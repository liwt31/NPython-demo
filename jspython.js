/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI510314 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI510410 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI504850 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI504876 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI181531 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181903 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181500 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180333 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182263 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182193 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181593 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181934 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180514 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180552 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180551 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180298 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180296 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180149 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180148 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180961 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181469 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180899 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178907 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180992 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180399 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181407 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180930 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180072 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180366 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180693 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178941 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178940 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179025 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179023 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179020 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180222 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180220 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180868 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181061 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI181060 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180260 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180257 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179505 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179503 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179502 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179148 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179147 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179343 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179341 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179338 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179256 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180037 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179768 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179767 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179466 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178689 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178776 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178722 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179464 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179463 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179695 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179693 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179733 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179732 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182673 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3886 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI506254 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI506262 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI451381 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI451363 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI451345 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI451327 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI450272 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI450283 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI503066 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI503045 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI503034 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI503041 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI503028 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI503055 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI503054 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI503036 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI503048 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI451401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI435248 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI435245 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI435242 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI435217 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI435214 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI435211 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI435192 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI435189 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI435186 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI435175 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI435173 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI435141 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI177015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI435158 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI435155 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI435152 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI178873 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178872 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI411617 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179073 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179067 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179065 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182158 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182116 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182113 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182111 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178680 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178765 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178716 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI182108 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182107 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178980 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178978 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178677 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178762 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178975 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182068 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179583 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179581 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178674 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178757 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178712 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179579 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179577 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179576 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179300 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179298 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179295 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179385 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179383 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179381 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI409647 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179426 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179424 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179422 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI409561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179623 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182228 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178686 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178773 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178720 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179659 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179541 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179897 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179866 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179835 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179183 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179182 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179802 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI409440 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179930 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178702 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179928 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181159 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178634 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178742 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180436 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180434 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180432 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181996 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181965 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181748 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181810 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181872 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181717 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181841 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178659 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181779 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181562 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181345 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181314 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181252 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181190 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181686 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181655 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181376 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178638 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178704 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179965 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181023 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181095 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178629 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178739 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178700 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178683 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178770 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178718 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180477 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180475 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180473 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177030 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177021 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180586 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177027 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177019 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180728 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI348047 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI348043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI348049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180112 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180110 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180109 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI409495 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180764 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180763 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI409736 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI409732 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182027 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178671 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178754 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178710 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180185 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180837 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI409513 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178621 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178736 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178698 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180801 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180800 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181624 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178594 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178731 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178696 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178653 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178748 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180002 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178561 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178723 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178567 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI177022 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177024 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178726 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178694 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178838 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178837 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI381362 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI608270 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI608410 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI350389 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI348051 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI208887 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI208886 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI337147 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI326025 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI25907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI275250 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI275249 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI268071 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI260204 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI50534 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI49853 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI49850 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI49744 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI51316 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI50649 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI50646 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI50537 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI279086 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI277238 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI106 = {size: 0,kind: 32,base: null,node: null,finalizer: null};
var NTI277235 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI116 = {size: 0,kind: 41,base: null,node: null,finalizer: null};
var NTI277054 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI320464 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI320466 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI325988 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI325984 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI329872 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI324639 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI320468 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI324650 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI324646 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI324446 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI324445 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI156090 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI638109 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157559 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI619110 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI616304 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI614891 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI612083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI156089 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3856 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI516275 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI573825 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI571846 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI561408 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI597857 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI573875 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI602677 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI600151 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI557081 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI557143 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI555084 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI552672 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI550122 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI551100 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI472069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI550123 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI545149 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI547089 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI547087 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI531177 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI497124 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI547082 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI547083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI545150 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI156085 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI531194 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI531191 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI531188 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI531178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI530050 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI515256 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI515255 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI435133 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI497148 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI497147 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI497145 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI497143 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI497141 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI497139 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI175083 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI497137 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI497135 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI497133 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI497131 = {size: 0,kind: 21,base: null,node: null,finalizer: null};
var NTI497129 = {size: 0,kind: 21,base: null,node: null,finalizer: null};
var NTI497068 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI467016 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI497127 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI497126 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI497125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI473059 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI375953 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI476450 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI469650 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI472071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI472070 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI470097 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI468191 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI468190 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134017 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3866 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI156087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI378280 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI377302 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI380247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI379353 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI156081 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI381718 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI377054 = {size: 0,kind: 42,base: null,node: null,finalizer: null};
var NTI377305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI377242 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI377303 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI374501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI373501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI372501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI371501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI370501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI369501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI368501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI367501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI366501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI365501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI364501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI363501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI362501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI361501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI360501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI359501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI358415 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI357180 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI357251 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI357245 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI357160 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI357246 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI355070 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI353098 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI301986 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI320460 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI301992 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI301989 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI320469 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI110 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI281307 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI108 = {size: 0,kind: 33,base: null,node: null,finalizer: null};
var NTI281228 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI281230 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI281339 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI281333 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI281324 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI41402 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI281313 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI281310 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI281226 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI281297 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI257479 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI249258 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI195498 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI195495 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI195492 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI241189 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178028 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI220231 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI220227 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI250866 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI212058 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI136 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI212015 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI212024 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI212017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI212040 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI212037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI212034 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3854 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI133824 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI202995 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI203987 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI203984 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI203981 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3844 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI175084 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157273 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157214 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI157277 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157318 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157332 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157329 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI157326 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI143056 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI157300 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157297 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI157294 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157353 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157362 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157358 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157346 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157349 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157212 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157081 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI157218 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI157280 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
NTI157218.base = NTI157280;
var NNI157081 = {kind: 2, offset: 0, typ: null, name: null, len: 17, sons: {"0": {kind: 1, offset: 0, typ: NTI157081, name: "NULL", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI157081, name: "Object", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI157081, name: "None", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI157081, name: "BaseError", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI157081, name: "Int", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI157081, name: "Float", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI157081, name: "Bool", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI157081, name: "Type", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI157081, name: "Tuple", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI157081, name: "List", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI157081, name: "Str", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI157081, name: "Code", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI157081, name: "NimFunc", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI157081, name: "Function", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI157081, name: "BoundMethod", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI157081, name: "Slice", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI157081, name: "Cell", len: 0, sons: null}}};
NTI157081.node = NNI157081;
var NNI157212 = {kind: 2, len: 38, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157349, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157349, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157349, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI157349, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI157349, name: "Field4", sons: null}, 
{kind: 1, offset: "Field5", len: 0, typ: NTI157349, name: "Field5", sons: null}, 
{kind: 1, offset: "Field6", len: 0, typ: NTI157349, name: "Field6", sons: null}, 
{kind: 1, offset: "Field7", len: 0, typ: NTI157346, name: "Field7", sons: null}, 
{kind: 1, offset: "Field8", len: 0, typ: NTI157346, name: "Field8", sons: null}, 
{kind: 1, offset: "Field9", len: 0, typ: NTI157346, name: "Field9", sons: null}, 
{kind: 1, offset: "Field10", len: 0, typ: NTI157346, name: "Field10", sons: null}, 
{kind: 1, offset: "Field11", len: 0, typ: NTI157346, name: "Field11", sons: null}, 
{kind: 1, offset: "Field12", len: 0, typ: NTI157346, name: "Field12", sons: null}, 
{kind: 1, offset: "Field13", len: 0, typ: NTI157349, name: "Field13", sons: null}, 
{kind: 1, offset: "Field14", len: 0, typ: NTI157349, name: "Field14", sons: null}, 
{kind: 1, offset: "Field15", len: 0, typ: NTI157349, name: "Field15", sons: null}, 
{kind: 1, offset: "Field16", len: 0, typ: NTI157349, name: "Field16", sons: null}, 
{kind: 1, offset: "Field17", len: 0, typ: NTI157349, name: "Field17", sons: null}, 
{kind: 1, offset: "Field18", len: 0, typ: NTI157349, name: "Field18", sons: null}, 
{kind: 1, offset: "Field19", len: 0, typ: NTI157349, name: "Field19", sons: null}, 
{kind: 1, offset: "Field20", len: 0, typ: NTI157349, name: "Field20", sons: null}, 
{kind: 1, offset: "Field21", len: 0, typ: NTI157349, name: "Field21", sons: null}, 
{kind: 1, offset: "Field22", len: 0, typ: NTI157349, name: "Field22", sons: null}, 
{kind: 1, offset: "Field23", len: 0, typ: NTI157346, name: "Field23", sons: null}, 
{kind: 1, offset: "Field24", len: 0, typ: NTI157346, name: "Field24", sons: null}, 
{kind: 1, offset: "Field25", len: 0, typ: NTI157346, name: "Field25", sons: null}, 
{kind: 1, offset: "Field26", len: 0, typ: NTI157358, name: "Field26", sons: null}, 
{kind: 1, offset: "Field27", len: 0, typ: NTI157362, name: "Field27", sons: null}, 
{kind: 1, offset: "Field28", len: 0, typ: NTI157349, name: "Field28", sons: null}, 
{kind: 1, offset: "Field29", len: 0, typ: NTI157353, name: "Field29", sons: null}, 
{kind: 1, offset: "Field30", len: 0, typ: NTI157346, name: "Field30", sons: null}, 
{kind: 1, offset: "Field31", len: 0, typ: NTI157362, name: "Field31", sons: null}, 
{kind: 1, offset: "Field32", len: 0, typ: NTI157349, name: "Field32", sons: null}, 
{kind: 1, offset: "Field33", len: 0, typ: NTI157353, name: "Field33", sons: null}, 
{kind: 1, offset: "Field34", len: 0, typ: NTI157349, name: "Field34", sons: null}, 
{kind: 1, offset: "Field35", len: 0, typ: NTI157353, name: "Field35", sons: null}, 
{kind: 1, offset: "Field36", len: 0, typ: NTI157346, name: "Field36", sons: null}, 
{kind: 1, offset: "Field37", len: 0, typ: NTI157346, name: "Field37", sons: null}]};
NTI157212.node = NNI157212;
var NNI157300 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157362, name: "Field2", sons: null}]};
NTI157300.node = NNI157300;
NTI157297.base = NTI157300;
var NNI157294 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI157297, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI157294.node = NNI157294;
var NNI157318 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157346, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157349, name: "Field1", sons: null}]};
NTI157318.node = NNI157318;
var NNI157332 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157318, name: "Field2", sons: null}]};
NTI157332.node = NNI157332;
NTI157329.base = NTI157332;
var NNI157326 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI157329, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI157326.node = NNI157326;
var NNI157280 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "base", len: 0, typ: NTI157218, name: "base", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI157081, name: "kind", sons: null}, 
{kind: 1, offset: "magicMethods", len: 0, typ: NTI157212, name: "magicMethods", sons: null}, 
{kind: 1, offset: "bltinMethods", len: 0, typ: NTI157294, name: "bltinMethods", sons: null}, 
{kind: 1, offset: "getsetDescr", len: 0, typ: NTI157326, name: "getsetDescr", sons: null}]};
NTI157280.node = NNI157280;
var NNI157273 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI104, name: "id", sons: null}, 
{kind: 1, offset: "pyType", len: 0, typ: NTI157218, name: "pyType", sons: null}]};
NTI157273.node = NNI157273;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI157273.base = NTI3808;
NTI157214.base = NTI157273;
var NNI157277 = {kind: 1, offset: "dict", len: 0, typ: NTI157214, name: "dict", sons: null};
NTI157277.node = NNI157277;
NTI157277.base = NTI157273;
NTI157280.base = NTI157277;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
var NNI175084 = {kind: 1, offset: "str", len: 0, typ: NTI138, name: "str", sons: null};
NTI175084.node = NNI175084;
NTI175084.base = NTI157273;
var NNI3844 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3844.node = NNI3844;
NTI3844.base = NTI3842;
var NNI202995 = {kind: 2, offset: 0, typ: null, name: null, len: 178, sons: {"0": {kind: 1, offset: 0, typ: NTI202995, name: "NULLTOKEN", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI202995, name: "Endmarker", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI202995, name: "Name", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI202995, name: "Number", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI202995, name: "String", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI202995, name: "Newline", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI202995, name: "Indent", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI202995, name: "Dedent", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI202995, name: "Lpar", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI202995, name: "Rpar", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI202995, name: "Lsqb", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI202995, name: "Rsqb", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI202995, name: "Colon", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI202995, name: "Comma", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI202995, name: "Semi", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI202995, name: "Plus", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI202995, name: "Minus", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI202995, name: "Star", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI202995, name: "Slash", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI202995, name: "Vbar", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI202995, name: "Amper", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI202995, name: "Less", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI202995, name: "Greater", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI202995, name: "Equal", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI202995, name: "Dot", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI202995, name: "Percent", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI202995, name: "Lbrace", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI202995, name: "Rbrace", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI202995, name: "Eqequal", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI202995, name: "Notequal", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI202995, name: "Lessequal", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI202995, name: "Greaterequal", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI202995, name: "Tilde", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI202995, name: "Circumflex", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI202995, name: "Leftshift", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI202995, name: "Rightshift", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI202995, name: "Doublestar", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI202995, name: "Plusequal", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI202995, name: "Minequal", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI202995, name: "Starequal", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI202995, name: "Slashequal", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI202995, name: "Percentequal", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI202995, name: "Amperequal", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI202995, name: "Vbarequal", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI202995, name: "Circumflexequal", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI202995, name: "Leftshiftequal", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI202995, name: "Rightshiftequal", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI202995, name: "Doublestarequal", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI202995, name: "Doubleslash", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI202995, name: "Doubleslashequal", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI202995, name: "At", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI202995, name: "Atequal", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI202995, name: "Rarrow", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI202995, name: "Ellipsis", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI202995, name: "PEP401", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI202995, name: "not", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI202995, name: "if", len: 0, sons: null}, 
"57": {kind: 1, offset: 57, typ: NTI202995, name: "True", len: 0, sons: null}, 
"58": {kind: 1, offset: 58, typ: NTI202995, name: "break", len: 0, sons: null}, 
"59": {kind: 1, offset: 59, typ: NTI202995, name: "with", len: 0, sons: null}, 
"60": {kind: 1, offset: 60, typ: NTI202995, name: "and", len: 0, sons: null}, 
"61": {kind: 1, offset: 61, typ: NTI202995, name: "lambda", len: 0, sons: null}, 
"62": {kind: 1, offset: 62, typ: NTI202995, name: "is", len: 0, sons: null}, 
"63": {kind: 1, offset: 63, typ: NTI202995, name: "def", len: 0, sons: null}, 
"64": {kind: 1, offset: 64, typ: NTI202995, name: "from", len: 0, sons: null}, 
"65": {kind: 1, offset: 65, typ: NTI202995, name: "pass", len: 0, sons: null}, 
"66": {kind: 1, offset: 66, typ: NTI202995, name: "del", len: 0, sons: null}, 
"67": {kind: 1, offset: 67, typ: NTI202995, name: "False", len: 0, sons: null}, 
"68": {kind: 1, offset: 68, typ: NTI202995, name: "finally", len: 0, sons: null}, 
"69": {kind: 1, offset: 69, typ: NTI202995, name: "try", len: 0, sons: null}, 
"70": {kind: 1, offset: 70, typ: NTI202995, name: "assert", len: 0, sons: null}, 
"71": {kind: 1, offset: 71, typ: NTI202995, name: "async", len: 0, sons: null}, 
"72": {kind: 1, offset: 72, typ: NTI202995, name: "yield", len: 0, sons: null}, 
"73": {kind: 1, offset: 73, typ: NTI202995, name: "or", len: 0, sons: null}, 
"74": {kind: 1, offset: 74, typ: NTI202995, name: "in", len: 0, sons: null}, 
"75": {kind: 1, offset: 75, typ: NTI202995, name: "None", len: 0, sons: null}, 
"76": {kind: 1, offset: 76, typ: NTI202995, name: "for", len: 0, sons: null}, 
"77": {kind: 1, offset: 77, typ: NTI202995, name: "raise", len: 0, sons: null}, 
"78": {kind: 1, offset: 78, typ: NTI202995, name: "nonlocal", len: 0, sons: null}, 
"79": {kind: 1, offset: 79, typ: NTI202995, name: "else", len: 0, sons: null}, 
"80": {kind: 1, offset: 80, typ: NTI202995, name: "continue", len: 0, sons: null}, 
"81": {kind: 1, offset: 81, typ: NTI202995, name: "class", len: 0, sons: null}, 
"82": {kind: 1, offset: 82, typ: NTI202995, name: "except", len: 0, sons: null}, 
"83": {kind: 1, offset: 83, typ: NTI202995, name: "elif", len: 0, sons: null}, 
"84": {kind: 1, offset: 84, typ: NTI202995, name: "global", len: 0, sons: null}, 
"85": {kind: 1, offset: 85, typ: NTI202995, name: "return", len: 0, sons: null}, 
"86": {kind: 1, offset: 86, typ: NTI202995, name: "import", len: 0, sons: null}, 
"87": {kind: 1, offset: 87, typ: NTI202995, name: "while", len: 0, sons: null}, 
"88": {kind: 1, offset: 88, typ: NTI202995, name: "as", len: 0, sons: null}, 
"89": {kind: 1, offset: 89, typ: NTI202995, name: "await", len: 0, sons: null}, 
"90": {kind: 1, offset: 90, typ: NTI202995, name: "boundary", len: 0, sons: null}, 
"91": {kind: 1, offset: 91, typ: NTI202995, name: "single_input", len: 0, sons: null}, 
"92": {kind: 1, offset: 92, typ: NTI202995, name: "file_input", len: 0, sons: null}, 
"93": {kind: 1, offset: 93, typ: NTI202995, name: "eval_input", len: 0, sons: null}, 
"94": {kind: 1, offset: 94, typ: NTI202995, name: "decorator", len: 0, sons: null}, 
"95": {kind: 1, offset: 95, typ: NTI202995, name: "decorators", len: 0, sons: null}, 
"96": {kind: 1, offset: 96, typ: NTI202995, name: "decorated", len: 0, sons: null}, 
"97": {kind: 1, offset: 97, typ: NTI202995, name: "async_funcdef", len: 0, sons: null}, 
"98": {kind: 1, offset: 98, typ: NTI202995, name: "funcdef", len: 0, sons: null}, 
"99": {kind: 1, offset: 99, typ: NTI202995, name: "parameters", len: 0, sons: null}, 
"100": {kind: 1, offset: 100, typ: NTI202995, name: "typedargslist", len: 0, sons: null}, 
"101": {kind: 1, offset: 101, typ: NTI202995, name: "tfpdef", len: 0, sons: null}, 
"102": {kind: 1, offset: 102, typ: NTI202995, name: "varargslist", len: 0, sons: null}, 
"103": {kind: 1, offset: 103, typ: NTI202995, name: "vfpdef", len: 0, sons: null}, 
"104": {kind: 1, offset: 104, typ: NTI202995, name: "stmt", len: 0, sons: null}, 
"105": {kind: 1, offset: 105, typ: NTI202995, name: "simple_stmt", len: 0, sons: null}, 
"106": {kind: 1, offset: 106, typ: NTI202995, name: "small_stmt", len: 0, sons: null}, 
"107": {kind: 1, offset: 107, typ: NTI202995, name: "expr_stmt", len: 0, sons: null}, 
"108": {kind: 1, offset: 108, typ: NTI202995, name: "annassign", len: 0, sons: null}, 
"109": {kind: 1, offset: 109, typ: NTI202995, name: "testlist_star_expr", len: 0, sons: null}, 
"110": {kind: 1, offset: 110, typ: NTI202995, name: "augassign", len: 0, sons: null}, 
"111": {kind: 1, offset: 111, typ: NTI202995, name: "del_stmt", len: 0, sons: null}, 
"112": {kind: 1, offset: 112, typ: NTI202995, name: "pass_stmt", len: 0, sons: null}, 
"113": {kind: 1, offset: 113, typ: NTI202995, name: "flow_stmt", len: 0, sons: null}, 
"114": {kind: 1, offset: 114, typ: NTI202995, name: "break_stmt", len: 0, sons: null}, 
"115": {kind: 1, offset: 115, typ: NTI202995, name: "continue_stmt", len: 0, sons: null}, 
"116": {kind: 1, offset: 116, typ: NTI202995, name: "return_stmt", len: 0, sons: null}, 
"117": {kind: 1, offset: 117, typ: NTI202995, name: "yield_stmt", len: 0, sons: null}, 
"118": {kind: 1, offset: 118, typ: NTI202995, name: "raise_stmt", len: 0, sons: null}, 
"119": {kind: 1, offset: 119, typ: NTI202995, name: "import_stmt", len: 0, sons: null}, 
"120": {kind: 1, offset: 120, typ: NTI202995, name: "import_name", len: 0, sons: null}, 
"121": {kind: 1, offset: 121, typ: NTI202995, name: "import_from", len: 0, sons: null}, 
"122": {kind: 1, offset: 122, typ: NTI202995, name: "import_as_name", len: 0, sons: null}, 
"123": {kind: 1, offset: 123, typ: NTI202995, name: "dotted_as_name", len: 0, sons: null}, 
"124": {kind: 1, offset: 124, typ: NTI202995, name: "import_as_names", len: 0, sons: null}, 
"125": {kind: 1, offset: 125, typ: NTI202995, name: "dotted_as_names", len: 0, sons: null}, 
"126": {kind: 1, offset: 126, typ: NTI202995, name: "dotted_name", len: 0, sons: null}, 
"127": {kind: 1, offset: 127, typ: NTI202995, name: "global_stmt", len: 0, sons: null}, 
"128": {kind: 1, offset: 128, typ: NTI202995, name: "nonlocal_stmt", len: 0, sons: null}, 
"129": {kind: 1, offset: 129, typ: NTI202995, name: "assert_stmt", len: 0, sons: null}, 
"130": {kind: 1, offset: 130, typ: NTI202995, name: "compound_stmt", len: 0, sons: null}, 
"131": {kind: 1, offset: 131, typ: NTI202995, name: "async_stmt", len: 0, sons: null}, 
"132": {kind: 1, offset: 132, typ: NTI202995, name: "if_stmt", len: 0, sons: null}, 
"133": {kind: 1, offset: 133, typ: NTI202995, name: "while_stmt", len: 0, sons: null}, 
"134": {kind: 1, offset: 134, typ: NTI202995, name: "for_stmt", len: 0, sons: null}, 
"135": {kind: 1, offset: 135, typ: NTI202995, name: "try_stmt", len: 0, sons: null}, 
"136": {kind: 1, offset: 136, typ: NTI202995, name: "with_stmt", len: 0, sons: null}, 
"137": {kind: 1, offset: 137, typ: NTI202995, name: "with_item", len: 0, sons: null}, 
"138": {kind: 1, offset: 138, typ: NTI202995, name: "except_clause", len: 0, sons: null}, 
"139": {kind: 1, offset: 139, typ: NTI202995, name: "suite", len: 0, sons: null}, 
"140": {kind: 1, offset: 140, typ: NTI202995, name: "test", len: 0, sons: null}, 
"141": {kind: 1, offset: 141, typ: NTI202995, name: "test_nocond", len: 0, sons: null}, 
"142": {kind: 1, offset: 142, typ: NTI202995, name: "lambdef", len: 0, sons: null}, 
"143": {kind: 1, offset: 143, typ: NTI202995, name: "lambdef_nocond", len: 0, sons: null}, 
"144": {kind: 1, offset: 144, typ: NTI202995, name: "or_test", len: 0, sons: null}, 
"145": {kind: 1, offset: 145, typ: NTI202995, name: "and_test", len: 0, sons: null}, 
"146": {kind: 1, offset: 146, typ: NTI202995, name: "not_test", len: 0, sons: null}, 
"147": {kind: 1, offset: 147, typ: NTI202995, name: "comparison", len: 0, sons: null}, 
"148": {kind: 1, offset: 148, typ: NTI202995, name: "comp_op", len: 0, sons: null}, 
"149": {kind: 1, offset: 149, typ: NTI202995, name: "star_expr", len: 0, sons: null}, 
"150": {kind: 1, offset: 150, typ: NTI202995, name: "expr", len: 0, sons: null}, 
"151": {kind: 1, offset: 151, typ: NTI202995, name: "xor_expr", len: 0, sons: null}, 
"152": {kind: 1, offset: 152, typ: NTI202995, name: "and_expr", len: 0, sons: null}, 
"153": {kind: 1, offset: 153, typ: NTI202995, name: "shift_expr", len: 0, sons: null}, 
"154": {kind: 1, offset: 154, typ: NTI202995, name: "arith_expr", len: 0, sons: null}, 
"155": {kind: 1, offset: 155, typ: NTI202995, name: "term", len: 0, sons: null}, 
"156": {kind: 1, offset: 156, typ: NTI202995, name: "factor", len: 0, sons: null}, 
"157": {kind: 1, offset: 157, typ: NTI202995, name: "power", len: 0, sons: null}, 
"158": {kind: 1, offset: 158, typ: NTI202995, name: "atom_expr", len: 0, sons: null}, 
"159": {kind: 1, offset: 159, typ: NTI202995, name: "atom", len: 0, sons: null}, 
"160": {kind: 1, offset: 160, typ: NTI202995, name: "testlist_comp", len: 0, sons: null}, 
"161": {kind: 1, offset: 161, typ: NTI202995, name: "trailer", len: 0, sons: null}, 
"162": {kind: 1, offset: 162, typ: NTI202995, name: "subscriptlist", len: 0, sons: null}, 
"163": {kind: 1, offset: 163, typ: NTI202995, name: "subscript", len: 0, sons: null}, 
"164": {kind: 1, offset: 164, typ: NTI202995, name: "sliceop", len: 0, sons: null}, 
"165": {kind: 1, offset: 165, typ: NTI202995, name: "exprlist", len: 0, sons: null}, 
"166": {kind: 1, offset: 166, typ: NTI202995, name: "testlist", len: 0, sons: null}, 
"167": {kind: 1, offset: 167, typ: NTI202995, name: "dictorsetmaker", len: 0, sons: null}, 
"168": {kind: 1, offset: 168, typ: NTI202995, name: "classdef", len: 0, sons: null}, 
"169": {kind: 1, offset: 169, typ: NTI202995, name: "arglist", len: 0, sons: null}, 
"170": {kind: 1, offset: 170, typ: NTI202995, name: "argument", len: 0, sons: null}, 
"171": {kind: 1, offset: 171, typ: NTI202995, name: "comp_iter", len: 0, sons: null}, 
"172": {kind: 1, offset: 172, typ: NTI202995, name: "sync_comp_for", len: 0, sons: null}, 
"173": {kind: 1, offset: 173, typ: NTI202995, name: "comp_for", len: 0, sons: null}, 
"174": {kind: 1, offset: 174, typ: NTI202995, name: "comp_if", len: 0, sons: null}, 
"175": {kind: 1, offset: 175, typ: NTI202995, name: "encoding_decl", len: 0, sons: null}, 
"176": {kind: 1, offset: 176, typ: NTI202995, name: "yield_expr", len: 0, sons: null}, 
"177": {kind: 1, offset: 177, typ: NTI202995, name: "yield_arg", len: 0, sons: null}}};
NTI202995.node = NNI202995;
var NNI203987 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI202995, name: "Field2", sons: null}]};
NTI203987.node = NNI203987;
NTI203984.base = NTI203987;
var NNI203981 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI203984, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI203981.node = NNI203981;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
NTI133824.base = NTI138;
var NNI3854 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3854.node = NNI3854;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
NTI3852.base = NTI3828;
NTI3854.base = NTI3852;
var NNI212015 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI212015, name: "None", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI212015, name: "Star", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI212015, name: "Plus", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI212015, name: "Query", len: 0, sons: null}}};
NTI212015.node = NNI212015;
NTI212058.base = NTI212017;
var NNI212024 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI104, name: "id", sons: null}, 
{kind: 1, offset: "father", len: 0, typ: NTI212017, name: "father", sons: null}, 
{kind: 1, offset: "repeat", len: 0, typ: NTI212015, name: "repeat", sons: null}, 
{kind: 1, offset: "epsilonSet", len: 0, typ: NTI212034, name: "epsilonSet", sons: null}, 
{kind: 3, offset: "kind", len: 256, typ: NTI136, name: "kind", sons: [[setConstr(97, 115), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "token", len: 0, typ: NTI202995, name: "token", sons: null}, 
{kind: 1, offset: "nextSet", len: 0, typ: NTI212034, name: "nextSet", sons: null}]}], 
[setConstr([65, 72]), {kind: 1, offset: "children", len: 0, typ: NTI212058, name: "children", sons: null}], 
[setConstr(256), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}]};
NTI212024.node = NNI212024;
NTI212017.base = NTI212024;
var NNI212040 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI212017, name: "Field1", sons: null}]};
NTI212040.node = NNI212040;
NTI212037.base = NTI212040;
var NNI212034 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI212037, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI212034.node = NNI212034;
NTI250866.base = NTI212017;
NTI220231.base = NTI212017;
var NNI220227 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI220231, name: "data", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI104, name: "head", sons: null}, 
{kind: 1, offset: "tail", len: 0, typ: NTI104, name: "tail", sons: null}, 
{kind: 1, offset: "count", len: 0, typ: NTI104, name: "count", sons: null}, 
{kind: 1, offset: "mask", len: 0, typ: NTI104, name: "mask", sons: null}]};
NTI220227.node = NNI220227;
NTI178028.base = NTI138;
NTI241189.base = NTI138;
var NNI195498 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}]};
NTI195498.node = NNI195498;
NTI195495.base = NTI195498;
var NNI195492 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI195495, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI195492.node = NNI195492;
NTI249258.base = NTI138;
NTI257479.base = NTI202995;
var NNI281226 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"0": {kind: 1, offset: 0, typ: NTI281226, name: "flagCaseInsensitive", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI281226, name: "flagNotCaseInsensitive", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI281226, name: "flagMultiLine", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI281226, name: "flagNotMultiLine", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI281226, name: "flagAnyMatchNewLine", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI281226, name: "flagNotAnyMatchNewLine", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI281226, name: "flagUnGreedy", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI281226, name: "flagNotUnGreedy", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI281226, name: "flagUnicode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI281226, name: "flagNotUnicode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI281226, name: "flagVerbose", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI281226, name: "flagNotVerbose", len: 0, sons: null}}};
NTI281226.node = NNI281226;
NTI281297.base = NTI281226;
var NNI281313 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI41402, name: "Field1", sons: null}]};
NTI281313.node = NNI281313;
NTI281310.base = NTI281313;
var NNI281333 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI41402, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI41402, name: "b", sons: null}]};
NTI281333.node = NNI281333;
NTI281324.base = NTI281333;
var NNI281228 = {kind: 2, offset: 0, typ: null, name: null, len: 46, sons: {"0": {kind: 1, offset: 0, typ: NTI281228, name: "reChar", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI281228, name: "reCharCI", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI281228, name: "reJoiner", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI281228, name: "reGroupStart", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI281228, name: "reGroupEnd", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI281228, name: "reOr", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI281228, name: "reZeroOrMore", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI281228, name: "reOneOrMore", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI281228, name: "reZeroOrOne", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI281228, name: "reRepRange", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI281228, name: "reStartSym", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI281228, name: "reEndSym", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI281228, name: "reStartSymML", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI281228, name: "reEndSymML", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI281228, name: "reStart", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI281228, name: "reEnd", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI281228, name: "reWordBoundary", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI281228, name: "reNotWordBoundary", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI281228, name: "reAlphaNum", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI281228, name: "reDigit", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI281228, name: "reWhiteSpace", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI281228, name: "reUCC", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI281228, name: "reNotAlphaNum", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI281228, name: "reNotDigit", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI281228, name: "reNotWhiteSpace", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI281228, name: "reNotUCC", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI281228, name: "reAny", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI281228, name: "reAnyNL", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI281228, name: "reWordBoundaryAscii", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI281228, name: "reNotWordBoundaryAscii", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI281228, name: "reAlphaNumAscii", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI281228, name: "reDigitAscii", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI281228, name: "reWhiteSpaceAscii", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI281228, name: "reNotAlphaNumAscii", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI281228, name: "reNotDigitAscii", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI281228, name: "reNotWhiteSpaceAscii", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI281228, name: "reAnyAscii", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI281228, name: "reAnyNLAscii", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI281228, name: "reSet", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI281228, name: "reNotSet", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI281228, name: "reLookahead", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI281228, name: "reLookbehind", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI281228, name: "reNotLookahead", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI281228, name: "reNotLookbehind", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI281228, name: "reSkip", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI281228, name: "reEOE", len: 0, sons: null}}};
NTI281228.node = NNI281228;
var NNI281307 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI281310, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI281307.node = NNI281307;
var NNI281230 = {kind: 2, len: 15, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI281228, name: "kind", sons: null}, 
{kind: 1, offset: "cp", len: 0, typ: NTI41402, name: "cp", sons: null}, 
{kind: 1, offset: "outA", len: 0, typ: NTI108, name: "outA", sons: null}, 
{kind: 1, offset: "outB", len: 0, typ: NTI108, name: "outB", sons: null}, 
{kind: 1, offset: "isGreedy", len: 0, typ: NTI130, name: "isGreedy", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI108, name: "idx", sons: null}, 
{kind: 1, offset: "isCapturing", len: 0, typ: NTI130, name: "isCapturing", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "flags", len: 0, typ: NTI281297, name: "flags", sons: null}, 
{kind: 1, offset: "min", len: 0, typ: NTI108, name: "min", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI108, name: "max", sons: null}, 
{kind: 1, offset: "cps", len: 0, typ: NTI281307, name: "cps", sons: null}, 
{kind: 1, offset: "ranges", len: 0, typ: NTI281324, name: "ranges", sons: null}, 
{kind: 1, offset: "shorthands", len: 0, typ: NTI281339, name: "shorthands", sons: null}, 
{kind: 1, offset: "cc", len: 0, typ: NTI110, name: "cc", sons: null}]};
NTI281230.node = NNI281230;
NTI281339.base = NTI281230;
NTI320469.base = NTI281230;
var NNI301992 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI108, name: "Field2", sons: null}]};
NTI301992.node = NNI301992;
NTI301989.base = NTI301992;
var NNI301986 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI301989, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI301986.node = NNI301986;
var NNI320460 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "states", len: 0, typ: NTI320469, name: "states", sons: null}, 
{kind: 1, offset: "groupsCount", len: 0, typ: NTI108, name: "groupsCount", sons: null}, 
{kind: 1, offset: "namedGroups", len: 0, typ: NTI301986, name: "namedGroups", sons: null}]};
NTI320460.node = NNI320460;
var NNI353098 = {kind: 1, offset: "b", len: 0, typ: NTI130, name: "b", sons: null};
NTI353098.node = NNI353098;
NTI353098.base = NTI157273;
var NNI355070 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI355070.node = NNI355070;
NTI355070.base = NTI157273;
var NNI357160 = {kind: 2, offset: 0, typ: null, name: null, len: 18, sons: {"0": {kind: 1, offset: 0, typ: NTI357160, name: "Base", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI357160, name: "Name", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI357160, name: "NotImplemented", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI357160, name: "Type", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI357160, name: "Attribute", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI357160, name: "Value", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI357160, name: "Index", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI357160, name: "StopIter", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI357160, name: "Lock", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI357160, name: "Import", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI357160, name: "UnboundLocal", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI357160, name: "Key", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI357160, name: "Assertion", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI357160, name: "ZeroDivision", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI357160, name: "Runtime", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI357160, name: "Syntax", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI357160, name: "Memory", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI357160, name: "KeyboardInterrupt", len: 0, sons: null}}};
NTI357160.node = NNI357160;
NTI357245.base = NTI357246;
var NNI357180 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157214, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157214, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI357180.node = NNI357180;
NTI357251.base = NTI357180;
var NNI357246 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tk", len: 0, typ: NTI357160, name: "tk", sons: null}, 
{kind: 1, offset: "thrown", len: 0, typ: NTI130, name: "thrown", sons: null}, 
{kind: 1, offset: "msg", len: 0, typ: NTI157214, name: "msg", sons: null}, 
{kind: 1, offset: "context", len: 0, typ: NTI357245, name: "context", sons: null}, 
{kind: 1, offset: "traceBacks", len: 0, typ: NTI357251, name: "traceBacks", sons: null}]};
NTI357246.node = NNI357246;
NTI357246.base = NTI157273;
var NNI358415 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI358415.node = NNI358415;
NTI358415.base = NTI357246;
var NNI359501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI359501.node = NNI359501;
NTI359501.base = NTI357246;
var NNI360501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI360501.node = NNI360501;
NTI360501.base = NTI357246;
var NNI361501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI361501.node = NNI361501;
NTI361501.base = NTI357246;
var NNI362501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI362501.node = NNI362501;
NTI362501.base = NTI357246;
var NNI363501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI363501.node = NNI363501;
NTI363501.base = NTI357246;
var NNI364501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI364501.node = NNI364501;
NTI364501.base = NTI357246;
var NNI365501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI365501.node = NNI365501;
NTI365501.base = NTI357246;
var NNI366501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI366501.node = NNI366501;
NTI366501.base = NTI357246;
var NNI367501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI367501.node = NNI367501;
NTI367501.base = NTI357246;
var NNI368501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI368501.node = NNI368501;
NTI368501.base = NTI357246;
var NNI369501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI369501.node = NNI369501;
NTI369501.base = NTI357246;
var NNI370501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI370501.node = NNI370501;
NTI370501.base = NTI357246;
var NNI371501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI371501.node = NNI371501;
NTI371501.base = NTI357246;
var NNI372501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI372501.node = NNI372501;
NTI372501.base = NTI357246;
var NNI373501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI373501.node = NNI373501;
NTI373501.base = NTI357246;
var NNI374501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI374501.node = NNI374501;
NTI374501.base = NTI357246;
var NNI377242 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"-1": {kind: 1, offset: -1, typ: NTI377242, name: "Negative", len: 0, sons: null}, 
"0": {kind: 1, offset: 0, typ: NTI377242, name: "Zero", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI377242, name: "Positive", len: 0, sons: null}}};
NTI377242.node = NNI377242;
NTI377305.base = NTI377054;
var NNI377303 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "sign", len: 0, typ: NTI377242, name: "sign", sons: null}, 
{kind: 1, offset: "digits", len: 0, typ: NTI377305, name: "digits", sons: null}]};
NTI377303.node = NNI377303;
NTI377303.base = NTI157273;
var NNI381718 = {kind: 1, offset: "v", len: 0, typ: NTI124, name: "v", sons: null};
NTI381718.node = NNI381718;
NTI381718.base = NTI157273;
var NNI156081 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156081.node = NNI156081;
NTI156081.base = NTI3826;
NTI379353.base = NTI377054;
NTI377302.base = NTI377303;
var NNI380247 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI377302, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI377302, name: "Field1", sons: null}]};
NTI380247.node = NNI380247;
NTI378280.base = NTI377054;
var NNI156087 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156087.node = NNI156087;
NTI156087.base = NTI3826;
var NNI3866 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3866.node = NNI3866;
NTI3866.base = NTI3828;
NTI134017.base = NTI138;
NTI468191.base = NTI157214;
var NNI468190 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI468191, name: "items", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI104, name: "idx", sons: null}]};
NTI468190.node = NNI468190;
NTI468190.base = NTI157273;
var NNI470097 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI157214, name: "start", sons: null}, 
{kind: 1, offset: "stop", len: 0, typ: NTI157214, name: "stop", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI157214, name: "step", sons: null}]};
NTI470097.node = NNI470097;
NTI470097.base = NTI157273;
NTI472071.base = NTI157214;
var NNI472070 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI472071, name: "items", sons: null}, 
{kind: 1, offset: "reprLock", len: 0, typ: NTI130, name: "reprLock", sons: null}]};
NTI472070.node = NNI472070;
NTI472070.base = NTI157273;
NTI469650.base = NTI157214;
var NNI476450 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157214, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157346, name: "Field1", sons: null}]};
NTI476450.node = NNI476450;
var NNI375953 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157214, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157346, name: "Field1", sons: null}]};
NTI375953.node = NNI375953;
NTI473059.base = NTI157214;
var NNI467016 = {kind: 2, offset: 0, typ: null, name: null, len: 123, sons: {"0": {kind: 1, offset: 0, typ: NTI467016, name: "NULLCODE", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI467016, name: "POP_TOP", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI467016, name: "ROT_TWO", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI467016, name: "ROT_THREE", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI467016, name: "DUP_TOP", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI467016, name: "DUP_TOP_TWO", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI467016, name: "ROT_FOUR", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI467016, name: "NOP", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI467016, name: "UNARY_POSITIVE", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI467016, name: "UNARY_NEGATIVE", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI467016, name: "UNARY_NOT", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI467016, name: "UNARY_INVERT", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI467016, name: "BINARY_MATRIX_MULTIPLY", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI467016, name: "INPLACE_MATRIX_MULTIPLY", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI467016, name: "BINARY_POWER", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI467016, name: "BINARY_MULTIPLY", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI467016, name: "BINARY_MODULO", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI467016, name: "BINARY_ADD", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI467016, name: "BINARY_SUBTRACT", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI467016, name: "BINARY_SUBSCR", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI467016, name: "BINARY_FLOOR_DIVIDE", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI467016, name: "BINARY_TRUE_DIVIDE", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI467016, name: "INPLACE_FLOOR_DIVIDE", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI467016, name: "INPLACE_TRUE_DIVIDE", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI467016, name: "GET_AITER", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI467016, name: "GET_ANEXT", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI467016, name: "BEFORE_ASYNC_WITH", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI467016, name: "BEGIN_FINALLY", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI467016, name: "END_ASYNC_FOR", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI467016, name: "INPLACE_ADD", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI467016, name: "INPLACE_SUBTRACT", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI467016, name: "INPLACE_MULTIPLY", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI467016, name: "INPLACE_MODULO", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI467016, name: "STORE_SUBSCR", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI467016, name: "DELETE_SUBSCR", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI467016, name: "BINARY_LSHIFT", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI467016, name: "BINARY_RSHIFT", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI467016, name: "BINARY_AND", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI467016, name: "BINARY_XOR", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI467016, name: "BINARY_OR", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI467016, name: "INPLACE_POWER", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI467016, name: "GET_ITER", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI467016, name: "GET_YIELD_FROM_ITER", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI467016, name: "PRINT_EXPR", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI467016, name: "LOAD_BUILD_CLASS", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI467016, name: "YIELD_FROM", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI467016, name: "GET_AWAITABLE", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI467016, name: "INPLACE_LSHIFT", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI467016, name: "INPLACE_RSHIFT", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI467016, name: "INPLACE_AND", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI467016, name: "INPLACE_XOR", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI467016, name: "INPLACE_OR", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI467016, name: "WITH_CLEANUP_START", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI467016, name: "WITH_CLEANUP_FINISH", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI467016, name: "RETURN_VALUE", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI467016, name: "IMPORT_STAR", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI467016, name: "SETUP_ANNOTATIONS", len: 0, sons: null}, 
"57": {kind: 1, offset: 57, typ: NTI467016, name: "YIELD_VALUE", len: 0, sons: null}, 
"58": {kind: 1, offset: 58, typ: NTI467016, name: "POP_BLOCK", len: 0, sons: null}, 
"59": {kind: 1, offset: 59, typ: NTI467016, name: "END_FINALLY", len: 0, sons: null}, 
"60": {kind: 1, offset: 60, typ: NTI467016, name: "POP_EXCEPT", len: 0, sons: null}, 
"61": {kind: 1, offset: 61, typ: NTI467016, name: "HAVE_ARGUMENT", len: 0, sons: null}, 
"62": {kind: 1, offset: 62, typ: NTI467016, name: "STORE_NAME", len: 0, sons: null}, 
"63": {kind: 1, offset: 63, typ: NTI467016, name: "DELETE_NAME", len: 0, sons: null}, 
"64": {kind: 1, offset: 64, typ: NTI467016, name: "UNPACK_SEQUENCE", len: 0, sons: null}, 
"65": {kind: 1, offset: 65, typ: NTI467016, name: "FOR_ITER", len: 0, sons: null}, 
"66": {kind: 1, offset: 66, typ: NTI467016, name: "UNPACK_EX", len: 0, sons: null}, 
"67": {kind: 1, offset: 67, typ: NTI467016, name: "STORE_ATTR", len: 0, sons: null}, 
"68": {kind: 1, offset: 68, typ: NTI467016, name: "DELETE_ATTR", len: 0, sons: null}, 
"69": {kind: 1, offset: 69, typ: NTI467016, name: "STORE_GLOBAL", len: 0, sons: null}, 
"70": {kind: 1, offset: 70, typ: NTI467016, name: "DELETE_GLOBAL", len: 0, sons: null}, 
"71": {kind: 1, offset: 71, typ: NTI467016, name: "LOAD_CONST", len: 0, sons: null}, 
"72": {kind: 1, offset: 72, typ: NTI467016, name: "LOAD_NAME", len: 0, sons: null}, 
"73": {kind: 1, offset: 73, typ: NTI467016, name: "BUILD_TUPLE", len: 0, sons: null}, 
"74": {kind: 1, offset: 74, typ: NTI467016, name: "BUILD_LIST", len: 0, sons: null}, 
"75": {kind: 1, offset: 75, typ: NTI467016, name: "BUILD_SET", len: 0, sons: null}, 
"76": {kind: 1, offset: 76, typ: NTI467016, name: "BUILD_MAP", len: 0, sons: null}, 
"77": {kind: 1, offset: 77, typ: NTI467016, name: "LOAD_ATTR", len: 0, sons: null}, 
"78": {kind: 1, offset: 78, typ: NTI467016, name: "COMPARE_OP", len: 0, sons: null}, 
"79": {kind: 1, offset: 79, typ: NTI467016, name: "IMPORT_NAME", len: 0, sons: null}, 
"80": {kind: 1, offset: 80, typ: NTI467016, name: "IMPORT_FROM", len: 0, sons: null}, 
"81": {kind: 1, offset: 81, typ: NTI467016, name: "JUMP_FORWARD", len: 0, sons: null}, 
"82": {kind: 1, offset: 82, typ: NTI467016, name: "JUMP_IF_FALSE_OR_POP", len: 0, sons: null}, 
"83": {kind: 1, offset: 83, typ: NTI467016, name: "JUMP_IF_TRUE_OR_POP", len: 0, sons: null}, 
"84": {kind: 1, offset: 84, typ: NTI467016, name: "JUMP_ABSOLUTE", len: 0, sons: null}, 
"85": {kind: 1, offset: 85, typ: NTI467016, name: "POP_JUMP_IF_FALSE", len: 0, sons: null}, 
"86": {kind: 1, offset: 86, typ: NTI467016, name: "POP_JUMP_IF_TRUE", len: 0, sons: null}, 
"87": {kind: 1, offset: 87, typ: NTI467016, name: "LOAD_GLOBAL", len: 0, sons: null}, 
"88": {kind: 1, offset: 88, typ: NTI467016, name: "SETUP_FINALLY", len: 0, sons: null}, 
"89": {kind: 1, offset: 89, typ: NTI467016, name: "LOAD_FAST", len: 0, sons: null}, 
"90": {kind: 1, offset: 90, typ: NTI467016, name: "STORE_FAST", len: 0, sons: null}, 
"91": {kind: 1, offset: 91, typ: NTI467016, name: "DELETE_FAST", len: 0, sons: null}, 
"92": {kind: 1, offset: 92, typ: NTI467016, name: "RAISE_VARARGS", len: 0, sons: null}, 
"93": {kind: 1, offset: 93, typ: NTI467016, name: "CALL_FUNCTION", len: 0, sons: null}, 
"94": {kind: 1, offset: 94, typ: NTI467016, name: "MAKE_FUNCTION", len: 0, sons: null}, 
"95": {kind: 1, offset: 95, typ: NTI467016, name: "BUILD_SLICE", len: 0, sons: null}, 
"96": {kind: 1, offset: 96, typ: NTI467016, name: "LOAD_CLOSURE", len: 0, sons: null}, 
"97": {kind: 1, offset: 97, typ: NTI467016, name: "LOAD_DEREF", len: 0, sons: null}, 
"98": {kind: 1, offset: 98, typ: NTI467016, name: "STORE_DEREF", len: 0, sons: null}, 
"99": {kind: 1, offset: 99, typ: NTI467016, name: "DELETE_DEREF", len: 0, sons: null}, 
"100": {kind: 1, offset: 100, typ: NTI467016, name: "CALL_FUNCTION_KW", len: 0, sons: null}, 
"101": {kind: 1, offset: 101, typ: NTI467016, name: "CALL_FUNCTION_EX", len: 0, sons: null}, 
"102": {kind: 1, offset: 102, typ: NTI467016, name: "SETUP_WITH", len: 0, sons: null}, 
"103": {kind: 1, offset: 103, typ: NTI467016, name: "EXTENDED_ARG", len: 0, sons: null}, 
"104": {kind: 1, offset: 104, typ: NTI467016, name: "LIST_APPEND", len: 0, sons: null}, 
"105": {kind: 1, offset: 105, typ: NTI467016, name: "SET_ADD", len: 0, sons: null}, 
"106": {kind: 1, offset: 106, typ: NTI467016, name: "MAP_ADD", len: 0, sons: null}, 
"107": {kind: 1, offset: 107, typ: NTI467016, name: "LOAD_CLASSDEREF", len: 0, sons: null}, 
"108": {kind: 1, offset: 108, typ: NTI467016, name: "BUILD_LIST_UNPACK", len: 0, sons: null}, 
"109": {kind: 1, offset: 109, typ: NTI467016, name: "BUILD_MAP_UNPACK", len: 0, sons: null}, 
"110": {kind: 1, offset: 110, typ: NTI467016, name: "BUILD_MAP_UNPACK_WITH_CALL", len: 0, sons: null}, 
"111": {kind: 1, offset: 111, typ: NTI467016, name: "BUILD_TUPLE_UNPACK", len: 0, sons: null}, 
"112": {kind: 1, offset: 112, typ: NTI467016, name: "BUILD_SET_UNPACK", len: 0, sons: null}, 
"113": {kind: 1, offset: 113, typ: NTI467016, name: "SETUP_ASYNC_WITH", len: 0, sons: null}, 
"114": {kind: 1, offset: 114, typ: NTI467016, name: "FORMAT_VALUE", len: 0, sons: null}, 
"115": {kind: 1, offset: 115, typ: NTI467016, name: "BUILD_CONST_KEY_MAP", len: 0, sons: null}, 
"116": {kind: 1, offset: 116, typ: NTI467016, name: "BUILD_STRING", len: 0, sons: null}, 
"117": {kind: 1, offset: 117, typ: NTI467016, name: "BUILD_TUPLE_UNPACK_WITH_CALL", len: 0, sons: null}, 
"118": {kind: 1, offset: 118, typ: NTI467016, name: "LOAD_METHOD", len: 0, sons: null}, 
"119": {kind: 1, offset: 119, typ: NTI467016, name: "CALL_METHOD", len: 0, sons: null}, 
"120": {kind: 1, offset: 120, typ: NTI467016, name: "CALL_FINALLY", len: 0, sons: null}, 
"121": {kind: 1, offset: 121, typ: NTI467016, name: "POP_FINALLY", len: 0, sons: null}, 
"122": {kind: 1, offset: 122, typ: NTI467016, name: "EXCEPT_HANDLER", len: 0, sons: null}}};
NTI467016.node = NNI467016;
var NNI497127 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI467016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI497068, name: "Field1", sons: null}]};
NTI497127.node = NNI497127;
NTI497126.base = NTI497127;
NTI497129.base = NTI467016;
NTI497131.base = NTI497068;
NTI497133.base = NTI104;
NTI497135.base = NTI157214;
NTI175083.base = NTI175084;
NTI497137.base = NTI175083;
NTI497139.base = NTI175083;
NTI497141.base = NTI175083;
NTI497143.base = NTI175083;
NTI497145.base = NTI175083;
var NNI435133 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI435133, name: "Local", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI435133, name: "Cell", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI435133, name: "Free", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI435133, name: "Global", len: 0, sons: null}}};
NTI435133.node = NNI435133;
var NNI497148 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI435133, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI497148.node = NNI497148;
NTI497147.base = NTI497148;
var NNI497125 = {kind: 2, len: 13, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "code", len: 0, typ: NTI497126, name: "code", sons: null}, 
{kind: 1, offset: "opCodes", len: 0, typ: NTI497129, name: "opCodes", sons: null}, 
{kind: 1, offset: "opArgs", len: 0, typ: NTI497131, name: "opArgs", sons: null}, 
{kind: 1, offset: "lineNos", len: 0, typ: NTI497133, name: "lineNos", sons: null}, 
{kind: 1, offset: "constants", len: 0, typ: NTI497135, name: "constants", sons: null}, 
{kind: 1, offset: "names", len: 0, typ: NTI497137, name: "names", sons: null}, 
{kind: 1, offset: "localVars", len: 0, typ: NTI497139, name: "localVars", sons: null}, 
{kind: 1, offset: "cellVars", len: 0, typ: NTI497141, name: "cellVars", sons: null}, 
{kind: 1, offset: "freeVars", len: 0, typ: NTI497143, name: "freeVars", sons: null}, 
{kind: 1, offset: "argNames", len: 0, typ: NTI497145, name: "argNames", sons: null}, 
{kind: 1, offset: "argScopes", len: 0, typ: NTI497147, name: "argScopes", sons: null}, 
{kind: 1, offset: "codeName", len: 0, typ: NTI175083, name: "codeName", sons: null}, 
{kind: 1, offset: "fileName", len: 0, typ: NTI175083, name: "fileName", sons: null}]};
NTI497125.node = NNI497125;
NTI497125.base = NTI157273;
NTI515256.base = NTI157214;
var NNI515255 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI515256, name: "items", sons: null}, 
{kind: 1, offset: "reprLock", len: 0, typ: NTI130, name: "reprLock", sons: null}, 
{kind: 1, offset: "readNum", len: 0, typ: NTI104, name: "readNum", sons: null}, 
{kind: 1, offset: "writeLock", len: 0, typ: NTI130, name: "writeLock", sons: null}]};
NTI515255.node = NNI515255;
NTI515255.base = NTI157273;
var NNI530050 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157214, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157346, name: "Field1", sons: null}]};
NTI530050.node = NNI530050;
var NNI531194 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157214, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157214, name: "Field2", sons: null}]};
NTI531194.node = NNI531194;
NTI531191.base = NTI531194;
var NNI531188 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI531191, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI531188.node = NNI531188;
var NNI531178 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "table", len: 0, typ: NTI531188, name: "table", sons: null}, 
{kind: 1, offset: "reprLock", len: 0, typ: NTI130, name: "reprLock", sons: null}, 
{kind: 1, offset: "readNum", len: 0, typ: NTI104, name: "readNum", sons: null}, 
{kind: 1, offset: "writeLock", len: 0, typ: NTI130, name: "writeLock", sons: null}]};
NTI531178.node = NNI531178;
NTI531178.base = NTI157273;
var NNI156085 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156085.node = NNI156085;
NTI156085.base = NTI3826;
var NNI545150 = {kind: 1, offset: "refObj", len: 0, typ: NTI157214, name: "refObj", sons: null};
NTI545150.node = NNI545150;
NTI545150.base = NTI157273;
NTI547082.base = NTI547083;
NTI497124.base = NTI497125;
NTI531177.base = NTI531178;
NTI547087.base = NTI157214;
NTI545149.base = NTI545150;
NTI547089.base = NTI545149;
var NNI547083 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "back", len: 0, typ: NTI547082, name: "back", sons: null}, 
{kind: 1, offset: "code", len: 0, typ: NTI497124, name: "code", sons: null}, 
{kind: 1, offset: "globals", len: 0, typ: NTI531177, name: "globals", sons: null}, 
{kind: 1, offset: "fastLocals", len: 0, typ: NTI547087, name: "fastLocals", sons: null}, 
{kind: 1, offset: "cellVars", len: 0, typ: NTI547089, name: "cellVars", sons: null}]};
NTI547083.node = NNI547083;
NTI547083.base = NTI157273;
NTI472069.base = NTI472070;
var NNI550123 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null}, 
{kind: 1, offset: "code", len: 0, typ: NTI497124, name: "code", sons: null}, 
{kind: 1, offset: "globals", len: 0, typ: NTI531177, name: "globals", sons: null}, 
{kind: 1, offset: "closure", len: 0, typ: NTI472069, name: "closure", sons: null}]};
NTI550123.node = NNI550123;
NTI550123.base = NTI157273;
NTI550122.base = NTI550123;
var NNI551100 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fun", len: 0, typ: NTI550122, name: "fun", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI157214, name: "self", sons: null}]};
NTI551100.node = NNI551100;
NTI551100.base = NTI157273;
var NNI552672 = {kind: 1, offset: "callable", len: 0, typ: NTI157214, name: "callable", sons: null};
NTI552672.node = NNI552672;
NTI552672.base = NTI157273;
var NNI555084 = {kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null};
NTI555084.node = NNI555084;
NTI555084.base = NTI157277;
var NNI557081 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI557081, name: "BltinFunc", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI557081, name: "UnaryMethod", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI557081, name: "BinaryMethod", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI557081, name: "TernaryMethod", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI557081, name: "BltinMethod", len: 0, sons: null}}};
NTI557081.node = NNI557081;
var NNI557143 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI157214, name: "self", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI557081, name: "kind", sons: null}, 
{kind: 1, offset: "fun", len: 0, typ: NTI104, name: "fun", sons: null}]};
NTI557143.node = NNI557143;
NTI557143.base = NTI157273;
var NNI600151 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI377302, name: "start", sons: null}, 
{kind: 1, offset: "ending", len: 0, typ: NTI377302, name: "ending", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI377302, name: "step", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI377302, name: "length", sons: null}]};
NTI600151.node = NNI600151;
NTI600151.base = NTI157273;
var NNI602677 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI377302, name: "start", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI377302, name: "step", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI377302, name: "length", sons: null}, 
{kind: 1, offset: "index", len: 0, typ: NTI377302, name: "index", sons: null}]};
NTI602677.node = NNI602677;
NTI602677.base = NTI157273;
NTI573875.base = NTI157214;
NTI597857.base = NTI545149;
var NNI561408 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI467016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI497068, name: "Field1", sons: null}]};
NTI561408.node = NNI561408;
var NNI571846 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157214, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157346, name: "Field1", sons: null}]};
NTI571846.node = NNI571846;
var NNI573825 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157214, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157346, name: "Field1", sons: null}]};
NTI573825.node = NNI573825;
NTI516275.base = NTI157214;
var NNI3856 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3856.node = NNI3856;
NTI3856.base = NTI3828;
var NNI156089 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156089.node = NNI156089;
NTI156089.base = NTI3826;
var NNI612083 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null}, 
{kind: 1, offset: "dType", len: 0, typ: NTI157218, name: "dType", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI557081, name: "kind", sons: null}, 
{kind: 1, offset: "meth", len: 0, typ: NTI104, name: "meth", sons: null}]};
NTI612083.node = NNI612083;
NTI612083.base = NTI157273;
var NNI614891 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "getter", len: 0, typ: NTI157346, name: "getter", sons: null}, 
{kind: 1, offset: "setter", len: 0, typ: NTI157349, name: "setter", sons: null}]};
NTI614891.node = NNI614891;
NTI614891.base = NTI157273;
var NNI616304 = {kind: 1, offset: "getter", len: 0, typ: NTI157214, name: "getter", sons: null};
NTI616304.node = NNI616304;
NTI616304.base = NTI157273;
var NNI619110 = {kind: 1, offset: "dict", len: 0, typ: NTI157214, name: "dict", sons: null};
NTI619110.node = NNI619110;
NTI619110.base = NTI157273;
NTI157559.base = NTI138;
var NNI638109 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI638109.node = NNI638109;
NTI638109.base = NTI157277;
var NNI156090 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fileName", len: 0, typ: NTI138, name: "fileName", sons: null}, 
{kind: 1, offset: "lineNo", len: 0, typ: NTI104, name: "lineNo", sons: null}, 
{kind: 1, offset: "colNo", len: 0, typ: NTI104, name: "colNo", sons: null}]};
NTI156090.node = NNI156090;
NTI156090.base = NTI3826;
NTI324446.base = NTI110;
var NNI324445 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI324446, name: "s", sons: null}, 
{kind: 1, offset: "key", len: 0, typ: NTI110, name: "key", sons: null}]};
NTI324445.node = NNI324445;
var NNI320468 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI108, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI320468.node = NNI320468;
NTI324650.base = NTI320468;
var NNI324646 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI324650, name: "s", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}]};
NTI324646.node = NNI324646;
var NNI324639 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "states", len: 0, typ: NTI324646, name: "states", sons: null}, 
{kind: 1, offset: "ids", len: 0, typ: NTI324445, name: "ids", sons: null}]};
NTI324639.node = NNI324639;
var NNI320464 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI320464, name: "captStart", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI320464, name: "captEnd", len: 0, sons: null}}};
NTI320464.node = NNI320464;
var NNI320466 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI320464, name: "kind", sons: null}, 
{kind: 1, offset: "prev", len: 0, typ: NTI104, name: "prev", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI108, name: "idx", sons: null}, 
{kind: 1, offset: "cpIdx", len: 0, typ: NTI104, name: "cpIdx", sons: null}]};
NTI320466.node = NNI320466;
NTI325988.base = NTI320466;
var NNI325984 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI325988, name: "s", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}]};
NTI325984.node = NNI325984;
var NNI329872 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI324445, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI324646, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI325984, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI324639, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI324639, name: "Field4", sons: null}]};
NTI329872.node = NNI329872;
NTI277054.base = NTI116;
NTI277235.base = NTI106;
NTI277238.base = NTI108;
NTI279086.base = NTI130;
NTI50537.base = NTI50646;
NTI50649.base = NTI51316;
NTI49744.base = NTI49850;
NTI49853.base = NTI50534;
NTI260204.base = NTI116;
NTI268071.base = NTI116;
NTI275250.base = NTI110;
NTI275249.base = NTI275250;
var NNI25907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI104, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI25907.node = NNI25907;
NTI326025.base = NTI25907;
var NNI208887 = {kind: 3, offset: "token", len: 178, typ: NTI202995, name: "token", sons: [[setConstr([0, 89]), {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineNo", len: 0, typ: NTI104, name: "lineNo", sons: null}, 
{kind: 1, offset: "colNo", len: 0, typ: NTI104, name: "colNo", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI138, name: "content", sons: null}]}], 
[setConstr(178), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]};
NTI208887.node = NNI208887;
NTI208886.base = NTI208887;
NTI337147.base = NTI208886;
NTI348051.base = NTI212017;
NTI350389.base = NTI212017;
NTI608410.base = NTI357180;
NTI608270.base = NTI357180;
NTI381362.base = NTI138;
var NNI177024 = {kind: 1, offset: "value", len: 0, typ: NTI104, name: "value", sons: null};
NTI177024.node = NNI177024;
var NNI177022 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI177022.node = NNI177022;
NTI177022.base = NTI3808;
NTI177024.base = NTI177022;
NTI177017.base = NTI177024;
var NNI178567 = {kind: 2, offset: 0, typ: null, name: null, len: 25, sons: {"0": {kind: 1, offset: 0, typ: NTI178567, name: "FunctionDef", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178567, name: "AsyncFunctionDef", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178567, name: "ClassDef", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178567, name: "Return", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178567, name: "Delete", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178567, name: "Assign", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178567, name: "AugAssign", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178567, name: "AnnAssign", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178567, name: "For", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178567, name: "AsyncFor", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI178567, name: "While", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI178567, name: "If", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI178567, name: "With", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI178567, name: "AsyncWith", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI178567, name: "Raise", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI178567, name: "Try", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI178567, name: "Assert", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI178567, name: "Import", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI178567, name: "ImportFrom", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI178567, name: "Global", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI178567, name: "Nonlocal", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI178567, name: "Expr", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI178567, name: "Pass", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI178567, name: "Break", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI178567, name: "Continue", len: 0, sons: null}}};
NTI178567.node = NNI178567;
var NNI178726 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178567, name: "kind", sons: null}]};
NTI178726.node = NNI178726;
NTI178726.base = NTI177022;
NTI178694.base = NTI178726;
NTI178838.base = NTI178694;
var NNI178837 = {kind: 1, offset: "body", len: 0, typ: NTI178838, name: "body", sons: null};
NTI178837.node = NNI178837;
var NNI178561 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI178561, name: "Module", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178561, name: "Interactive", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178561, name: "Expression", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178561, name: "Suite", len: 0, sons: null}}};
NTI178561.node = NNI178561;
var NNI178723 = {kind: 1, offset: "kind", len: 0, typ: NTI178561, name: "kind", sons: null};
NTI178723.node = NNI178723;
NTI178723.base = NTI177022;
NTI178837.base = NTI178723;
var NNI178653 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI178653, name: "Invert", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178653, name: "Not", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178653, name: "UAdd", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178653, name: "USub", len: 0, sons: null}}};
NTI178653.node = NNI178653;
var NNI178748 = {kind: 1, offset: "kind", len: 0, typ: NTI178653, name: "kind", sons: null};
NTI178748.node = NNI178748;
NTI178748.base = NTI177022;
NTI178706.base = NTI178748;
var NNI178594 = {kind: 2, offset: 0, typ: null, name: null, len: 25, sons: {"0": {kind: 1, offset: 0, typ: NTI178594, name: "BoolOp", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178594, name: "BinOp", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178594, name: "UnaryOp", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178594, name: "Lambda", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178594, name: "IfExp", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178594, name: "Dict", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178594, name: "Set", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178594, name: "ListComp", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178594, name: "SetComp", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178594, name: "DictComp", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI178594, name: "GeneratorExp", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI178594, name: "Await", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI178594, name: "Yield", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI178594, name: "YieldFrom", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI178594, name: "Compare", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI178594, name: "Call", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI178594, name: "FormattedValue", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI178594, name: "JoinedStr", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI178594, name: "Constant", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI178594, name: "Attribute", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI178594, name: "Subscript", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI178594, name: "Starred", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI178594, name: "Name", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI178594, name: "List", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI178594, name: "Tuple", len: 0, sons: null}}};
NTI178594.node = NNI178594;
var NNI178731 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178594, name: "kind", sons: null}]};
NTI178731.node = NNI178731;
NTI178731.base = NTI177022;
NTI178696.base = NTI178731;
var NNI180002 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "op", len: 0, typ: NTI178706, name: "op", sons: null}, 
{kind: 1, offset: "operand", len: 0, typ: NTI178696, name: "operand", sons: null}]};
NTI180002.node = NNI180002;
NTI180002.base = NTI178731;
var NNI181624 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181624.node = NNI181624;
NTI181624.base = NTI178748;
NTI180801.base = NTI178696;
var NNI178621 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI178621, name: "Load", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178621, name: "Store", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178621, name: "Del", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178621, name: "AugLoad", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178621, name: "AugStore", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178621, name: "Param", len: 0, sons: null}}};
NTI178621.node = NNI178621;
var NNI178736 = {kind: 1, offset: "kind", len: 0, typ: NTI178621, name: "kind", sons: null};
NTI178736.node = NNI178736;
NTI178736.base = NTI177022;
NTI178698.base = NTI178736;
var NNI180800 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elts", len: 0, typ: NTI180801, name: "elts", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180800.node = NNI180800;
NTI180800.base = NTI178731;
NTI409513.base = NTI178696;
var NNI180837 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180837.node = NNI180837;
NTI180837.base = NTI178736;
var NNI178671 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178671, name: "Comprehension", len: 0, sons: null}}};
NTI178671.node = NNI178671;
var NNI178754 = {kind: 1, offset: "kind", len: 0, typ: NTI178671, name: "kind", sons: null};
NTI178754.node = NNI178754;
NTI178754.base = NTI177022;
NTI178710.base = NTI178754;
NTI180185.base = NTI178710;
var NNI180183 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elt", len: 0, typ: NTI178696, name: "elt", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180185, name: "generators", sons: null}]};
NTI180183.node = NNI180183;
NTI180183.base = NTI178731;
NTI182030.base = NTI178696;
var NNI182027 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI178696, name: "iter", sons: null}, 
{kind: 1, offset: "ifs", len: 0, typ: NTI182030, name: "ifs", sons: null}, 
{kind: 1, offset: "is_async", len: 0, typ: NTI177017, name: "is_async", sons: null}]};
NTI182027.node = NNI182027;
NTI182027.base = NTI178754;
NTI409732.base = NTI178710;
NTI409736.base = NTI178710;
NTI180764.base = NTI178696;
var NNI180763 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elts", len: 0, typ: NTI180764, name: "elts", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180763.node = NNI180763;
NTI180763.base = NTI178731;
NTI409495.base = NTI178696;
NTI180110.base = NTI178696;
NTI180112.base = NTI178696;
var NNI180109 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "keys", len: 0, typ: NTI180110, name: "keys", sons: null}, 
{kind: 1, offset: "values", len: 0, typ: NTI180112, name: "values", sons: null}]};
NTI180109.node = NNI180109;
NTI180109.base = NTI178731;
var NNI348047 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tokenNode", len: 0, typ: NTI208886, name: "tokenNode", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI348049, name: "children", sons: null}, 
{kind: 1, offset: "grammarNodeSeq", len: 0, typ: NTI348051, name: "grammarNodeSeq", sons: null}]};
NTI348047.node = NNI348047;
NTI348043.base = NTI348047;
NTI348049.base = NTI348043;
var NNI177027 = {kind: 1, offset: "value", len: 0, typ: NTI175083, name: "value", sons: null};
NTI177027.node = NNI177027;
NTI177027.base = NTI177022;
NTI177019.base = NTI177027;
var NNI180728 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI177019, name: "id", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180728.node = NNI180728;
NTI180728.base = NTI178731;
var NNI177030 = {kind: 1, offset: "value", len: 0, typ: NTI157214, name: "value", sons: null};
NTI177030.node = NNI177030;
NTI177030.base = NTI177022;
NTI177021.base = NTI177030;
var NNI180586 = {kind: 1, offset: "value", len: 0, typ: NTI177021, name: "value", sons: null};
NTI180586.node = NNI180586;
NTI180586.base = NTI178731;
NTI180475.base = NTI178696;
var NNI178683 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178683, name: "Keyword", len: 0, sons: null}}};
NTI178683.node = NNI178683;
var NNI178770 = {kind: 1, offset: "kind", len: 0, typ: NTI178683, name: "kind", sons: null};
NTI178770.node = NNI178770;
NTI178770.base = NTI177022;
NTI178718.base = NTI178770;
NTI180477.base = NTI178718;
var NNI180473 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fun", len: 0, typ: NTI178696, name: "fun", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI180475, name: "args", sons: null}, 
{kind: 1, offset: "keywords", len: 0, typ: NTI180477, name: "keywords", sons: null}]};
NTI180473.node = NNI180473;
NTI180473.base = NTI178731;
var NNI178629 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI178629, name: "Slice", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178629, name: "ExtSlice", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178629, name: "Index", len: 0, sons: null}}};
NTI178629.node = NNI178629;
var NNI178739 = {kind: 1, offset: "kind", len: 0, typ: NTI178629, name: "kind", sons: null};
NTI178739.node = NNI178739;
NTI178739.base = NTI177022;
NTI178700.base = NTI178739;
var NNI180656 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "slice", len: 0, typ: NTI178700, name: "slice", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180656.node = NNI180656;
NTI180656.base = NTI178731;
var NNI181095 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI181095.node = NNI181095;
NTI181095.base = NTI178739;
var NNI181023 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lower", len: 0, typ: NTI178696, name: "lower", sons: null}, 
{kind: 1, offset: "upper", len: 0, typ: NTI178696, name: "upper", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI178696, name: "step", sons: null}]};
NTI181023.node = NNI181023;
NTI181023.base = NTI178739;
var NNI180619 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "attr", len: 0, typ: NTI177019, name: "attr", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180619.node = NNI180619;
NTI180619.base = NTI178731;
var NNI178638 = {kind: 2, offset: 0, typ: null, name: null, len: 13, sons: {"0": {kind: 1, offset: 0, typ: NTI178638, name: "Add", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178638, name: "Sub", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178638, name: "Mult", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178638, name: "MatMult", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178638, name: "Div", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178638, name: "Mod", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178638, name: "Pow", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178638, name: "LShift", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178638, name: "RShift", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178638, name: "BitOr", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI178638, name: "BitXor", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI178638, name: "BitAnd", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI178638, name: "FloorDiv", len: 0, sons: null}}};
NTI178638.node = NNI178638;
var NNI178745 = {kind: 1, offset: "kind", len: 0, typ: NTI178638, name: "kind", sons: null};
NTI178745.node = NNI178745;
NTI178745.base = NTI177022;
NTI178704.base = NTI178745;
var NNI179965 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "left", len: 0, typ: NTI178696, name: "left", sons: null}, 
{kind: 1, offset: "op", len: 0, typ: NTI178704, name: "op", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI178696, name: "right", sons: null}]};
NTI179965.node = NNI179965;
NTI179965.base = NTI178731;
var NNI181376 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181376.node = NNI181376;
NTI181376.base = NTI178745;
var NNI181655 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181655.node = NNI181655;
NTI181655.base = NTI178748;
var NNI181686 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181686.node = NNI181686;
NTI181686.base = NTI178748;
var NNI181190 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181190.node = NNI181190;
NTI181190.base = NTI178745;
var NNI181221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181221.node = NNI181221;
NTI181221.base = NTI178745;
var NNI181252 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181252.node = NNI181252;
NTI181252.base = NTI178745;
var NNI181314 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181314.node = NNI181314;
NTI181314.base = NTI178745;
var NNI181345 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181345.node = NNI181345;
NTI181345.base = NTI178745;
var NNI181562 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181562.node = NNI181562;
NTI181562.base = NTI178745;
var NNI181779 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181779.node = NNI181779;
var NNI178659 = {kind: 2, offset: 0, typ: null, name: null, len: 10, sons: {"0": {kind: 1, offset: 0, typ: NTI178659, name: "Eq", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178659, name: "NotEq", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178659, name: "Lt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178659, name: "LtE", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178659, name: "Gt", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178659, name: "GtE", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178659, name: "Is", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178659, name: "IsNot", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178659, name: "In", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178659, name: "NotIn", len: 0, sons: null}}};
NTI178659.node = NNI178659;
var NNI178751 = {kind: 1, offset: "kind", len: 0, typ: NTI178659, name: "kind", sons: null};
NTI178751.node = NNI178751;
NTI178751.base = NTI177022;
NTI181779.base = NTI178751;
var NNI181841 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181841.node = NNI181841;
NTI181841.base = NTI178751;
var NNI181717 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181717.node = NNI181717;
NTI181717.base = NTI178751;
var NNI181872 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181872.node = NNI181872;
NTI181872.base = NTI178751;
var NNI181810 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181810.node = NNI181810;
NTI181810.base = NTI178751;
var NNI181748 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181748.node = NNI181748;
NTI181748.base = NTI178751;
var NNI181965 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181965.node = NNI181965;
NTI181965.base = NTI178751;
var NNI181996 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181996.node = NNI181996;
NTI181996.base = NTI178751;
NTI178708.base = NTI178751;
NTI180434.base = NTI178708;
NTI180436.base = NTI178696;
var NNI180432 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "left", len: 0, typ: NTI178696, name: "left", sons: null}, 
{kind: 1, offset: "ops", len: 0, typ: NTI180434, name: "ops", sons: null}, 
{kind: 1, offset: "comparators", len: 0, typ: NTI180436, name: "comparators", sons: null}]};
NTI180432.node = NNI180432;
NTI180432.base = NTI178731;
var NNI181128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181128.node = NNI181128;
var NNI178634 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI178634, name: "And", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178634, name: "Or", len: 0, sons: null}}};
NTI178634.node = NNI178634;
var NNI178742 = {kind: 1, offset: "kind", len: 0, typ: NTI178634, name: "kind", sons: null};
NTI178742.node = NNI178742;
NTI178742.base = NTI177022;
NTI181128.base = NTI178742;
var NNI181159 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181159.node = NNI181159;
NTI181159.base = NTI178742;
NTI178702.base = NTI178742;
NTI179930.base = NTI178696;
var NNI179928 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "op", len: 0, typ: NTI178702, name: "op", sons: null}, 
{kind: 1, offset: "values", len: 0, typ: NTI179930, name: "values", sons: null}]};
NTI179928.node = NNI179928;
NTI179928.base = NTI178731;
NTI409440.base = NTI178696;
var NNI179802 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI179802.node = NNI179802;
NTI179802.base = NTI178726;
NTI179183.base = NTI178696;
var NNI179182 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "targets", len: 0, typ: NTI179183, name: "targets", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}]};
NTI179182.node = NNI179182;
NTI179182.base = NTI178726;
var NNI179835 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI179835.node = NNI179835;
NTI179835.base = NTI178726;
var NNI179866 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI179866.node = NNI179866;
NTI179866.base = NTI178726;
var NNI179897 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI179897.node = NNI179897;
NTI179897.base = NTI178726;
var NNI179114 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI179114.node = NNI179114;
NTI179114.base = NTI178726;
var NNI179541 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "exc", len: 0, typ: NTI178696, name: "exc", sons: null}, 
{kind: 1, offset: "cause", len: 0, typ: NTI178696, name: "cause", sons: null}]};
NTI179541.node = NNI179541;
NTI179541.base = NTI178726;
var NNI178686 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178686, name: "Alias", len: 0, sons: null}}};
NTI178686.node = NNI178686;
var NNI178773 = {kind: 1, offset: "kind", len: 0, typ: NTI178686, name: "kind", sons: null};
NTI178773.node = NNI178773;
NTI178773.base = NTI177022;
NTI178720.base = NTI178773;
NTI179659.base = NTI178720;
var NNI179658 = {kind: 1, offset: "names", len: 0, typ: NTI179659, name: "names", sons: null};
NTI179658.node = NNI179658;
NTI179658.base = NTI178726;
var NNI182228 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "asname", len: 0, typ: NTI177019, name: "asname", sons: null}]};
NTI182228.node = NNI182228;
NTI182228.base = NTI178773;
var NNI179623 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "msg", len: 0, typ: NTI178696, name: "msg", sons: null}]};
NTI179623.node = NNI179623;
NTI179623.base = NTI178726;
NTI409561.base = NTI178694;
NTI179424.base = NTI178694;
NTI179426.base = NTI178694;
var NNI179422 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179424, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179426, name: "orelse", sons: null}]};
NTI179422.node = NNI179422;
NTI179422.base = NTI178726;
NTI409647.base = NTI178694;
NTI179383.base = NTI178694;
NTI179385.base = NTI178694;
var NNI179381 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179383, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179385, name: "orelse", sons: null}]};
NTI179381.node = NNI179381;
NTI179381.base = NTI178726;
NTI179298.base = NTI178694;
NTI179300.base = NTI178694;
var NNI179295 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI178696, name: "iter", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179298, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179300, name: "orelse", sons: null}]};
NTI179295.node = NNI179295;
NTI179295.base = NTI178726;
NTI179577.base = NTI178694;
var NNI178674 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178674, name: "ExceptHandler", len: 0, sons: null}}};
NTI178674.node = NNI178674;
var NNI178757 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178674, name: "kind", sons: null}]};
NTI178757.node = NNI178757;
NTI178757.base = NTI177022;
NTI178712.base = NTI178757;
NTI179579.base = NTI178712;
NTI179581.base = NTI178694;
NTI179583.base = NTI178694;
var NNI179576 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "body", len: 0, typ: NTI179577, name: "body", sons: null}, 
{kind: 1, offset: "handlers", len: 0, typ: NTI179579, name: "handlers", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179581, name: "orelse", sons: null}, 
{kind: 1, offset: "finalbody", len: 0, typ: NTI179583, name: "finalbody", sons: null}]};
NTI179576.node = NNI179576;
NTI179576.base = NTI178726;
NTI182071.base = NTI178694;
var NNI182068 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "type", len: 0, typ: NTI178696, name: "type", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI182071, name: "body", sons: null}]};
NTI182068.node = NNI182068;
NTI182068.base = NTI178757;
var NNI178677 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178677, name: "Arguments", len: 0, sons: null}}};
NTI178677.node = NNI178677;
var NNI178762 = {kind: 1, offset: "kind", len: 0, typ: NTI178677, name: "kind", sons: null};
NTI178762.node = NNI178762;
NTI178762.base = NTI177022;
NTI178714.base = NTI178762;
NTI178978.base = NTI178694;
NTI178980.base = NTI178696;
var NNI178975 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI178714, name: "args", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI178978, name: "body", sons: null}, 
{kind: 1, offset: "decorator_list", len: 0, typ: NTI178980, name: "decorator_list", sons: null}, 
{kind: 1, offset: "returns", len: 0, typ: NTI178696, name: "returns", sons: null}]};
NTI178975.node = NNI178975;
NTI178975.base = NTI178726;
var NNI178680 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178680, name: "Arg", len: 0, sons: null}}};
NTI178680.node = NNI178680;
var NNI178765 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178680, name: "kind", sons: null}]};
NTI178765.node = NNI178765;
NTI178765.base = NTI177022;
NTI178716.base = NTI178765;
NTI182108.base = NTI178716;
NTI182111.base = NTI178716;
NTI182113.base = NTI178696;
NTI182116.base = NTI178696;
var NNI182107 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "args", len: 0, typ: NTI182108, name: "args", sons: null}, 
{kind: 1, offset: "vararg", len: 0, typ: NTI178716, name: "vararg", sons: null}, 
{kind: 1, offset: "kwonlyargs", len: 0, typ: NTI182111, name: "kwonlyargs", sons: null}, 
{kind: 1, offset: "kw_defaults", len: 0, typ: NTI182113, name: "kw_defaults", sons: null}, 
{kind: 1, offset: "kwarg", len: 0, typ: NTI178716, name: "kwarg", sons: null}, 
{kind: 1, offset: "defaults", len: 0, typ: NTI182116, name: "defaults", sons: null}]};
NTI182107.node = NNI182107;
NTI182107.base = NTI178762;
var NNI182158 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "arg", len: 0, typ: NTI177019, name: "arg", sons: null}, 
{kind: 1, offset: "annotation", len: 0, typ: NTI178696, name: "annotation", sons: null}]};
NTI182158.node = NNI182158;
NTI182158.base = NTI178765;
NTI179067.base = NTI178696;
NTI179069.base = NTI178718;
NTI179071.base = NTI178694;
NTI179073.base = NTI178696;
var NNI179065 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "bases", len: 0, typ: NTI179067, name: "bases", sons: null}, 
{kind: 1, offset: "keywords", len: 0, typ: NTI179069, name: "keywords", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179071, name: "body", sons: null}, 
{kind: 1, offset: "decorator_list", len: 0, typ: NTI179073, name: "decorator_list", sons: null}]};
NTI179065.node = NNI179065;
NTI179065.base = NTI178726;
NTI411617.base = NTI178696;
NTI178873.base = NTI178694;
var NNI178872 = {kind: 1, offset: "body", len: 0, typ: NTI178873, name: "body", sons: null};
NTI178872.node = NNI178872;
NTI178872.base = NTI178723;
NTI177015.base = NTI177022;
NTI435175.base = NTI435141;
var NNI435192 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI175083, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI435192.node = NNI435192;
NTI435189.base = NTI435192;
var NNI435186 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI435189, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI435186.node = NNI435186;
var NNI435217 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI175083, name: "Field1", sons: null}]};
NTI435217.node = NNI435217;
NTI435214.base = NTI435217;
var NNI435211 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI435214, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI435211.node = NNI435211;
var NNI435248 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI175083, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI435133, name: "Field2", sons: null}]};
NTI435248.node = NNI435248;
NTI435245.base = NTI435248;
var NNI435242 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI435245, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI435242.node = NNI435242;
var NNI435173 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI435141, name: "parent", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI435175, name: "children", sons: null}, 
{kind: 1, offset: "argVars", len: 0, typ: NTI435186, name: "argVars", sons: null}, 
{kind: 1, offset: "declaredVars", len: 0, typ: NTI435211, name: "declaredVars", sons: null}, 
{kind: 1, offset: "usedVars", len: 0, typ: NTI435211, name: "usedVars", sons: null}, 
{kind: 1, offset: "scopes", len: 0, typ: NTI435242, name: "scopes", sons: null}, 
{kind: 1, offset: "names", len: 0, typ: NTI435186, name: "names", sons: null}, 
{kind: 1, offset: "localVars", len: 0, typ: NTI435186, name: "localVars", sons: null}, 
{kind: 1, offset: "cellVars", len: 0, typ: NTI435186, name: "cellVars", sons: null}, 
{kind: 1, offset: "freeVars", len: 0, typ: NTI435186, name: "freeVars", sons: null}]};
NTI435173.node = NNI435173;
NTI435141.base = NTI435173;
var NNI435158 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI177015, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI435141, name: "Field2", sons: null}]};
NTI435158.node = NNI435158;
NTI435155.base = NTI435158;
var NNI435152 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI435155, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI435152.node = NNI435152;
var NNI451401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI177015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI435141, name: "Field1", sons: null}]};
NTI451401.node = NNI451401;
var NNI503041 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "opCode", len: 0, typ: NTI467016, name: "opCode", sons: null}, 
{kind: 1, offset: "lineNo", len: 0, typ: NTI104, name: "lineNo", sons: null}]};
NTI503041.node = NNI503041;
NTI503041.base = NTI3808;
NTI503028.base = NTI503041;
NTI503055.base = NTI503028;
var NNI503034 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI503034, name: "Misc", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI503034, name: "While", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI503034, name: "For", len: 0, sons: null}}};
NTI503034.node = NNI503034;
var NNI503054 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "instrSeq", len: 0, typ: NTI503055, name: "instrSeq", sons: null}, 
{kind: 1, offset: "tp", len: 0, typ: NTI503034, name: "tp", sons: null}, 
{kind: 1, offset: "next", len: 0, typ: NTI503036, name: "next", sons: null}, 
{kind: 1, offset: "seenReturn", len: 0, typ: NTI130, name: "seenReturn", sons: null}, 
{kind: 1, offset: "offset", len: 0, typ: NTI104, name: "offset", sons: null}]};
NTI503054.node = NNI503054;
NTI503036.base = NTI503054;
var NNI503048 = {kind: 1, offset: "target", len: 0, typ: NTI503036, name: "target", sons: null};
NTI503048.node = NNI503048;
var NNI503045 = {kind: 1, offset: "opArg", len: 0, typ: NTI104, name: "opArg", sons: null};
NTI503045.node = NNI503045;
NTI503045.base = NTI503041;
NTI503048.base = NTI503045;
NTI503066.base = NTI157214;
NTI450283.base = NTI175083;
NTI450272.base = NTI175083;
NTI451327.base = NTI175083;
NTI451345.base = NTI175083;
NTI451363.base = NTI175083;
NTI451381.base = NTI175083;
var NNI506254 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI435133, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI506254.node = NNI506254;
NTI506262.base = NTI506254;
var NNI3886 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3886.node = NNI3886;
NTI3886.base = NTI3828;
NTI182673.base = NTI138;
NTI179733.base = NTI177019;
var NNI179732 = {kind: 1, offset: "names", len: 0, typ: NTI179733, name: "names", sons: null};
NTI179732.node = NNI179732;
NTI179732.base = NTI178726;
NTI179695.base = NTI178720;
var NNI179693 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "module", len: 0, typ: NTI177019, name: "module", sons: null}, 
{kind: 1, offset: "names", len: 0, typ: NTI179695, name: "names", sons: null}, 
{kind: 1, offset: "level", len: 0, typ: NTI177017, name: "level", sons: null}]};
NTI179693.node = NNI179693;
NTI179693.base = NTI178726;
var NNI178689 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178689, name: "Withitem", len: 0, sons: null}}};
NTI178689.node = NNI178689;
var NNI178776 = {kind: 1, offset: "kind", len: 0, typ: NTI178689, name: "kind", sons: null};
NTI178776.node = NNI178776;
NTI178776.base = NTI177022;
NTI178722.base = NTI178776;
NTI179464.base = NTI178722;
NTI179466.base = NTI178694;
var NNI179463 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI179464, name: "items", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179466, name: "body", sons: null}]};
NTI179463.node = NNI179463;
NTI179463.base = NTI178726;
NTI179768.base = NTI177019;
var NNI179767 = {kind: 1, offset: "names", len: 0, typ: NTI179768, name: "names", sons: null};
NTI179767.node = NNI179767;
NTI179767.base = NTI178726;
var NNI180037 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "args", len: 0, typ: NTI178714, name: "args", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI178696, name: "body", sons: null}]};
NTI180037.node = NNI180037;
NTI180037.base = NTI178731;
var NNI179256 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "annotation", len: 0, typ: NTI178696, name: "annotation", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "simple", len: 0, typ: NTI177017, name: "simple", sons: null}]};
NTI179256.node = NNI179256;
NTI179256.base = NTI178726;
NTI179341.base = NTI178694;
NTI179343.base = NTI178694;
var NNI179338 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI178696, name: "iter", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179341, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179343, name: "orelse", sons: null}]};
NTI179338.node = NNI179338;
NTI179338.base = NTI178726;
NTI179148.base = NTI178696;
var NNI179147 = {kind: 1, offset: "targets", len: 0, typ: NTI179148, name: "targets", sons: null};
NTI179147.node = NNI179147;
NTI179147.base = NTI178726;
NTI179503.base = NTI178722;
NTI179505.base = NTI178694;
var NNI179502 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI179503, name: "items", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179505, name: "body", sons: null}]};
NTI179502.node = NNI179502;
NTI179502.base = NTI178726;
NTI180260.base = NTI178710;
var NNI180257 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "key", len: 0, typ: NTI178696, name: "key", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180260, name: "generators", sons: null}]};
NTI180257.node = NNI180257;
NTI180257.base = NTI178731;
NTI181061.base = NTI178700;
var NNI181060 = {kind: 1, offset: "dims", len: 0, typ: NTI181061, name: "dims", sons: null};
NTI181060.node = NNI181060;
NTI181060.base = NTI178739;
var NNI180868 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180868.node = NNI180868;
NTI180868.base = NTI178736;
NTI180222.base = NTI178710;
var NNI180220 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elt", len: 0, typ: NTI178696, name: "elt", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180222, name: "generators", sons: null}]};
NTI180220.node = NNI180220;
NTI180220.base = NTI178731;
NTI179023.base = NTI178694;
NTI179025.base = NTI178696;
var NNI179020 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI178714, name: "args", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179023, name: "body", sons: null}, 
{kind: 1, offset: "decorator_list", len: 0, typ: NTI179025, name: "decorator_list", sons: null}, 
{kind: 1, offset: "returns", len: 0, typ: NTI178696, name: "returns", sons: null}]};
NTI179020.node = NNI179020;
NTI179020.base = NTI178726;
var NNI179219 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "op", len: 0, typ: NTI178704, name: "op", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}]};
NTI179219.node = NNI179219;
NTI179219.base = NTI178726;
NTI178941.base = NTI178694;
var NNI178940 = {kind: 1, offset: "body", len: 0, typ: NTI178941, name: "body", sons: null};
NTI178940.node = NNI178940;
NTI178940.base = NTI178723;
var NNI181283 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181283.node = NNI181283;
NTI181283.base = NTI178745;
var NNI181438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181438.node = NNI181438;
NTI181438.base = NTI178745;
var NNI180693 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180693.node = NNI180693;
NTI180693.base = NTI178731;
var NNI180366 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI180366.node = NNI180366;
NTI180366.base = NTI178731;
var NNI180072 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI178696, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI178696, name: "orelse", sons: null}]};
NTI180072.node = NNI180072;
NTI180072.base = NTI178731;
var NNI180930 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180930.node = NNI180930;
NTI180930.base = NTI178736;
var NNI181407 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181407.node = NNI181407;
NTI181407.base = NTI178745;
var NNI180399 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI180399.node = NNI180399;
NTI180399.base = NTI178731;
var NNI180992 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180992.node = NNI180992;
NTI180992.base = NTI178736;
var NNI178907 = {kind: 1, offset: "body", len: 0, typ: NTI178696, name: "body", sons: null};
NTI178907.node = NNI178907;
NTI178907.base = NTI178723;
var NNI180899 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180899.node = NNI180899;
NTI180899.base = NTI178736;
var NNI181469 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181469.node = NNI181469;
NTI181469.base = NTI178745;
var NNI180961 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180961.node = NNI180961;
NTI180961.base = NTI178736;
NTI180149.base = NTI178696;
var NNI180148 = {kind: 1, offset: "elts", len: 0, typ: NTI180149, name: "elts", sons: null};
NTI180148.node = NNI180148;
NTI180148.base = NTI178731;
NTI180298.base = NTI178710;
var NNI180296 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elt", len: 0, typ: NTI178696, name: "elt", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180298, name: "generators", sons: null}]};
NTI180296.node = NNI180296;
NTI180296.base = NTI178731;
NTI180552.base = NTI178696;
var NNI180551 = {kind: 1, offset: "values", len: 0, typ: NTI180552, name: "values", sons: null};
NTI180551.node = NNI180551;
NTI180551.base = NTI178731;
var NNI180514 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "conversion", len: 0, typ: NTI177017, name: "conversion", sons: null}, 
{kind: 1, offset: "format_spec", len: 0, typ: NTI178696, name: "format_spec", sons: null}]};
NTI180514.node = NNI180514;
NTI180514.base = NTI178731;
var NNI181934 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181934.node = NNI181934;
NTI181934.base = NTI178751;
var NNI181593 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181593.node = NNI181593;
NTI181593.base = NTI178748;
var NNI182193 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "arg", len: 0, typ: NTI177019, name: "arg", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}]};
NTI182193.node = NNI182193;
NTI182193.base = NTI178770;
var NNI182263 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "context_expr", len: 0, typ: NTI178696, name: "context_expr", sons: null}, 
{kind: 1, offset: "optional_vars", len: 0, typ: NTI178696, name: "optional_vars", sons: null}]};
NTI182263.node = NNI182263;
NTI182263.base = NTI178776;
var NNI180333 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI180333.node = NNI180333;
NTI180333.base = NTI178731;
var NNI181500 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181500.node = NNI181500;
NTI181500.base = NTI178745;
var NNI181903 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181903.node = NNI181903;
NTI181903.base = NTI178751;
var NNI181531 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181531.node = NNI181531;
NTI181531.base = NTI178745;
var NNI504876 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI467016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI497068, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI504876.node = NNI504876;
var NNI504850 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI467016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI497068, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI504850.node = NNI504850;
NTI510410.base = NTI503036;
NTI510314.base = NTI503036;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function divInt(a_16657, b_16658) {
		    if (b_16658 == 0) raiseDivByZero();
    if (b_16658 == -1 && a_16657 == 2147483647) raiseOverflow();
    return Math.trunc(a_16657 / b_16658);
  

	
}

function mulInt(a_16639, b_16640) {
		    var result = a_16639 * b_16640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function eqStrings(a_16454, b_16455) {
		    if (a_16454 == b_16455) return true;
    if (a_16454 === null && b_16455.length == 0) return true;
    if (b_16455 === null && a_16454.length == 0) return true;
    if ((!a_16454) || (!b_16455)) return false;
    var alen = a_16454.length;
    if (alen != b_16455.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16454[i] != b_16455[i]) return false;
    return true;
  

	
}
		var grammar_lines_212094 = nimCopy(null, [makeNimstrLit("# Grammar for Python"), [], makeNimstrLit("# NOTE WELL: You should also follow all the steps listed at"), makeNimstrLit("# https://devguide.python.org/grammar/"), [], makeNimstrLit("# Start symbols for the grammar:"), makeNimstrLit("#       single_input is a single interactive statement;"), makeNimstrLit("#       file_input is a module or sequence of commands read from an input file;"), makeNimstrLit("#       eval_input is the input for the eval() functions."), makeNimstrLit("# NB: compound_stmt in single_input is followed by extra NEWLINE!"), makeNimstrLit("single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE"), makeNimstrLit("file_input: (NEWLINE | stmt)* ENDMARKER"), makeNimstrLit("eval_input: testlist NEWLINE* ENDMARKER"), [], makeNimstrLit("decorator: \'@\' dotted_name [ \'(\' [arglist] \')\' ] NEWLINE"), makeNimstrLit("decorators: decorator+"), makeNimstrLit("decorated: decorators (classdef | funcdef | async_funcdef)"), [], makeNimstrLit("async_funcdef: \'async\' funcdef"), makeNimstrLit("funcdef: \'def\' NAME parameters [\'->\' test] \':\' suite"), [], makeNimstrLit("parameters: \'(\' [typedargslist] \')\'"), makeNimstrLit("typedargslist: (tfpdef [\'=\' test] (\',\' tfpdef [\'=\' test])* [\',\' ["), makeNimstrLit("        \'*\' [tfpdef] (\',\' tfpdef [\'=\' test])* [\',\' [\'**\' tfpdef [\',\']]]"), makeNimstrLit("      | \'**\' tfpdef [\',\']]]"), makeNimstrLit("  | \'*\' [tfpdef] (\',\' tfpdef [\'=\' test])* [\',\' [\'**\' tfpdef [\',\']]]"), makeNimstrLit("  | \'**\' tfpdef [\',\'])"), makeNimstrLit("tfpdef: NAME [\':\' test]"), makeNimstrLit("varargslist: (vfpdef [\'=\' test] (\',\' vfpdef [\'=\' test])* [\',\' ["), makeNimstrLit("        \'*\' [vfpdef] (\',\' vfpdef [\'=\' test])* [\',\' [\'**\' vfpdef [\',\']]]"), makeNimstrLit("      | \'**\' vfpdef [\',\']]]"), makeNimstrLit("  | \'*\' [vfpdef] (\',\' vfpdef [\'=\' test])* [\',\' [\'**\' vfpdef [\',\']]]"), makeNimstrLit("  | \'**\' vfpdef [\',\']"), makeNimstrLit(")"), makeNimstrLit("vfpdef: NAME"), [], makeNimstrLit("stmt: simple_stmt | compound_stmt"), makeNimstrLit("simple_stmt: small_stmt (\';\' small_stmt)* [\';\'] NEWLINE"), makeNimstrLit("small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |"), makeNimstrLit("             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)"), makeNimstrLit("expr_stmt: testlist_star_expr (annassign | augassign (yield_expr|testlist) |"), makeNimstrLit("                     (\'=\' (yield_expr|testlist_star_expr))*)"), makeNimstrLit("annassign: \':\' test [\'=\' test]"), makeNimstrLit("testlist_star_expr: (test|star_expr) (\',\' (test|star_expr))* [\',\']"), makeNimstrLit("augassign: (\'+=\' | \'-=\' | \'*=\' | \'@=\' | \'/=\' | \'%=\' | \'&=\' | \'|=\' | \'^=\' |"), makeNimstrLit("            \'<<=\' | \'>>=\' | \'**=\' | \'//=\')"), makeNimstrLit("# For normal and annotated assignments, additional restrictions enforced by the interpreter"), makeNimstrLit("del_stmt: \'del\' exprlist"), makeNimstrLit("pass_stmt: \'pass\'"), makeNimstrLit("flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt"), makeNimstrLit("break_stmt: \'break\'"), makeNimstrLit("continue_stmt: \'continue\'"), makeNimstrLit("return_stmt: \'return\' [testlist]"), makeNimstrLit("yield_stmt: yield_expr"), makeNimstrLit("raise_stmt: \'raise\' [test [\'from\' test]]"), makeNimstrLit("import_stmt: import_name | import_from"), makeNimstrLit("import_name: \'import\' dotted_as_names"), makeNimstrLit("# note below: the (\'.\' | \'...\') is necessary because \'...\' is tokenized as ELLIPSIS"), makeNimstrLit("import_from: (\'from\' ((\'.\' | \'...\')* dotted_name | (\'.\' | \'...\')+)"), makeNimstrLit("              \'import\' (\'*\' | \'(\' import_as_names \')\' | import_as_names))"), makeNimstrLit("import_as_name: NAME [\'as\' NAME]"), makeNimstrLit("dotted_as_name: dotted_name [\'as\' NAME]"), makeNimstrLit("import_as_names: import_as_name (\',\' import_as_name)* [\',\']"), makeNimstrLit("dotted_as_names: dotted_as_name (\',\' dotted_as_name)*"), makeNimstrLit("dotted_name: NAME (\'.\' NAME)*"), makeNimstrLit("global_stmt: \'global\' NAME (\',\' NAME)*"), makeNimstrLit("nonlocal_stmt: \'nonlocal\' NAME (\',\' NAME)*"), makeNimstrLit("assert_stmt: \'assert\' test [\',\' test]"), [], makeNimstrLit("compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt"), makeNimstrLit("async_stmt: \'async\' (funcdef | with_stmt | for_stmt)"), makeNimstrLit("if_stmt: \'if\' test \':\' suite (\'elif\' test \':\' suite)* [\'else\' \':\' suite]"), makeNimstrLit("while_stmt: \'while\' test \':\' suite [\'else\' \':\' suite]"), makeNimstrLit("for_stmt: \'for\' exprlist \'in\' testlist \':\' suite [\'else\' \':\' suite]"), makeNimstrLit("try_stmt: (\'try\' \':\' suite"), makeNimstrLit("           ((except_clause \':\' suite)+"), makeNimstrLit("            [\'else\' \':\' suite]"), makeNimstrLit("            [\'finally\' \':\' suite] |"), makeNimstrLit("           \'finally\' \':\' suite))"), makeNimstrLit("with_stmt: \'with\' with_item (\',\' with_item)*  \':\' suite"), makeNimstrLit("with_item: test [\'as\' expr]"), makeNimstrLit("# NB compile.c makes sure that the default except clause is last"), makeNimstrLit("except_clause: \'except\' [test [\'as\' NAME]]"), makeNimstrLit("suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT"), [], makeNimstrLit("test: or_test [\'if\' or_test \'else\' test] | lambdef"), makeNimstrLit("test_nocond: or_test | lambdef_nocond"), makeNimstrLit("lambdef: \'lambda\' [varargslist] \':\' test"), makeNimstrLit("lambdef_nocond: \'lambda\' [varargslist] \':\' test_nocond"), makeNimstrLit("or_test: and_test (\'or\' and_test)*"), makeNimstrLit("and_test: not_test (\'and\' not_test)*"), makeNimstrLit("not_test: \'not\' not_test | comparison"), makeNimstrLit("comparison: expr (comp_op expr)*"), makeNimstrLit("# <> isn\'t actually a valid comparison operator in Python. It\'s here for the"), makeNimstrLit("# sake of a __future__ import described in PEP 401 (which really works :-)"), makeNimstrLit("comp_op: \'<\'|\'>\'|\'==\'|\'>=\'|\'<=\'|\'<>\'|\'!=\'|\'in\'|\'not\' \'in\'|\'is\'|\'is\' \'not\'"), makeNimstrLit("star_expr: \'*\' expr"), makeNimstrLit("expr: xor_expr (\'|\' xor_expr)*"), makeNimstrLit("xor_expr: and_expr (\'^\' and_expr)*"), makeNimstrLit("and_expr: shift_expr (\'&\' shift_expr)*"), makeNimstrLit("shift_expr: arith_expr ((\'<<\'|\'>>\') arith_expr)*"), makeNimstrLit("arith_expr: term ((\'+\'|\'-\') term)*"), makeNimstrLit("term: factor ((\'*\'|\'@\'|\'/\'|\'%\'|\'//\') factor)*"), makeNimstrLit("factor: (\'+\'|\'-\'|\'~\') factor | power"), makeNimstrLit("power: atom_expr [\'**\' factor]"), makeNimstrLit("atom_expr: [\'await\'] atom trailer*"), makeNimstrLit("atom: (\'(\' [yield_expr|testlist_comp] \')\' |"), makeNimstrLit("       \'[\' [testlist_comp] \']\' |"), makeNimstrLit("       \'{\' [dictorsetmaker] \'}\' |"), makeNimstrLit("       NAME | NUMBER | STRING+ | \'...\' | \'None\' | \'True\' | \'False\')"), makeNimstrLit("testlist_comp: (test|star_expr) ( comp_for | (\',\' (test|star_expr))* [\',\'] )"), makeNimstrLit("trailer: \'(\' [arglist] \')\' | \'[\' subscriptlist \']\' | \'.\' NAME"), makeNimstrLit("subscriptlist: subscript (\',\' subscript)* [\',\']"), makeNimstrLit("subscript: test | [test] \':\' [test] [sliceop]"), makeNimstrLit("sliceop: \':\' [test]"), makeNimstrLit("exprlist: (expr|star_expr) (\',\' (expr|star_expr))* [\',\']"), makeNimstrLit("testlist: test (\',\' test)* [\',\']"), makeNimstrLit("dictorsetmaker: ( ((test \':\' test | \'**\' expr)"), makeNimstrLit("                   (comp_for | (\',\' (test \':\' test | \'**\' expr))* [\',\'])) |"), makeNimstrLit("                  ((test | star_expr)"), makeNimstrLit("                   (comp_for | (\',\' (test | star_expr))* [\',\'])) )"), [], makeNimstrLit("classdef: \'class\' NAME [\'(\' [arglist] \')\'] \':\' suite"), [], makeNimstrLit("arglist: argument (\',\' argument)*  [\',\']"), [], makeNimstrLit("# The reason that keywords are test nodes instead of NAME is that using NAME"), makeNimstrLit("# results in an ambiguity. ast.c makes sure it\'s a NAME."), makeNimstrLit("# \"test \'=\' test\" is really \"keyword \'=\' test\", but we have no such token."), makeNimstrLit("# These need to be in a single rule to avoid grammar that is ambiguous"), makeNimstrLit("# to our LL(1) parser. Even though \'test\' includes \'*expr\' in star_expr,"), makeNimstrLit("# we explicitly match \'*\' here, too, to give it proper precedence."), makeNimstrLit("# Illegal combinations and orderings are blocked in ast.c:"), makeNimstrLit("# multiple (test comp_for) arguments are blocked; keyword unpackings"), makeNimstrLit("# that precede iterable unpackings are blocked; etc."), makeNimstrLit("argument: ( test [comp_for] |"), makeNimstrLit("            test \'=\' test |"), makeNimstrLit("            \'**\' test |"), makeNimstrLit("            \'*\' test )"), [], makeNimstrLit("comp_iter: comp_for | comp_if"), makeNimstrLit("sync_comp_for: \'for\' exprlist \'in\' or_test [comp_iter]"), makeNimstrLit("comp_for: [\'async\'] sync_comp_for"), makeNimstrLit("comp_if: \'if\' test_nocond [comp_iter]"), [], makeNimstrLit("# not used in grammar, but may appear in \"node\" passed from Parser to Compiler"), makeNimstrLit("encoding_decl: NAME"), [], makeNimstrLit("yield_expr: \'yield\' [yield_arg]"), makeNimstrLit("yield_arg: \'from\' test | testlist"), []], NTI133824);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}

function nimMax(a_16958, b_16959) {
		var Tmp1;

	var result_16960 = 0;

	BeforeRet: do {
		if ((b_16959 <= a_16958)) {
		Tmp1 = a_16958;
		}
		else {
		Tmp1 = b_16959;
		}
		
		result_16960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16960;

}
var ConstSet2 = setConstr(32, 9, 11, 13, 10, 12);

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}
var ConstSet3 = setConstr([97, 122], [65, 90], 95);

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}

function genericReset(x_17690, ti_17691) {
	var result_17692 = null;

		result_17692 = null;
		switch (ti_17691.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (is_fat_pointer_17201(ti_17691)) {
			        result_17692 = [null, 0];
      
			}
			
			break;
		case 19:
			      result_17692 = {};
    
			break;
		case 18:
		case 17:
			if ((ti_17691.kind == 17)) {
			result_17692 = {m_type: ti_17691};
			}
			else {
				result_17692 = {};
			}
			
			break;
		case 24:
		case 27:
			      result_17692 = [];
    
			break;
		case 4:
		case 16:
			      result_17692 = new Array(x_17690.length);
      for (var i = 0; i < x_17690.length; ++i) {
        result_17692[i] = genericReset(x_17690[i], ti_17691.base);
      }
    
			break;
		default: 
			break;
		}

	return result_17692;

}

function reprEnum(e_18481, typ_18482) {
	var result_18483 = null;

	var F={procname:"system.reprEnum",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/reprjs.nim",line:0};
	framePtr = F;
		if (!(is_undefined_18485(typ_18482.node.sons[e_18481]))) {
		F.line = 38;
		result_18483 = nimCopy(null, makeNimstrLit(typ_18482.node.sons[e_18481].name), NTI138);
		}
		else {
			F.line = 40;
			result_18483 = nimCopy(null, (cstrToNimstr((e_18481)+"")).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}
		
	framePtr = F.prev;

	return result_18483;

}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}

function SetPlus(a_16382, b_16383) {
		    var result = {};
    for (var elem in a_16382) { result[elem] = true; }
    for (var elem in b_16383) { result[elem] = true; }
    return result;
  

	
}

function SetCard(a_16293) {
		    var result = 0;
    for (var elem in a_16293) { ++result; }
    return result;
  

	
}

function isObj(obj_17838, subclass_17839) {
	var result_17840 = false;

	BeforeRet: do {
		var x_17841 = obj_17838;
		if ((x_17841 == subclass_17839)) {
		result_17840 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_17841 == subclass_17839))) break L2;
					if ((x_17841 == null)) {
					result_17840 = false;
					break BeforeRet;
					}
					
					x_17841 = x_17841.base;
				}
		} while(false);
		result_17840 = true;
		break BeforeRet;
	} while (false);

	return result_17840;

}
var ConstSet4 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet5 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr(101, 69);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);

function nimParseBiggestFloat(s_17938, number_17940, number_17940_Idx, start_17941) {
	var result_17943 = 0;

	var F={procname:"system.nimParseBiggestFloat",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/jssys.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 673;
		var esign_17944 = 1.0000000000000000e+00;
		F.line = 674;
		var sign_17945 = 1.0000000000000000e+00;
		F.line = 675;
		var i_17946 = start_17941;
		F.line = 676;
		var exponent_17947 = 0;
		F.line = 677;
		var flags_17948 = 0;
		F.line = 678;
		number_17940[number_17940_Idx] = 0.0;
		if ((s_17938[i_17946] == 43)) {
		F.line = 679;
		i_17946 += 1;
		}
		else {
		if ((s_17938[i_17946] == 45)) {
		F.line = 681;
		sign_17945 = -1.0000000000000000e+00;
		F.line = 682;
		i_17946 += 1;
		}
		}
		if (((s_17938[i_17946] == 78) || (s_17938[i_17946] == 110))) {
		if (((s_17938[(i_17946 + 1)] == 65) || (s_17938[(i_17946 + 1)] == 97))) {
		if (((s_17938[(i_17946 + 2)] == 78) || (s_17938[(i_17946 + 2)] == 110))) {
		if (!((ConstSet4[s_17938[(i_17946 + 3)]] != undefined))) {
		F.line = 687;
		number_17940[number_17940_Idx] = NaN;
		F.line = 688;
		result_17943 = ((i_17946 + 3) - start_17941);
		break BeforeRet;
		}
		
		}
		
		}
		
		F.line = 689;
		result_17943 = 0;
		break BeforeRet;
		}
		
		if (((s_17938[i_17946] == 73) || (s_17938[i_17946] == 105))) {
		if (((s_17938[(i_17946 + 1)] == 78) || (s_17938[(i_17946 + 1)] == 110))) {
		if (((s_17938[(i_17946 + 2)] == 70) || (s_17938[(i_17946 + 2)] == 102))) {
		if (!((ConstSet5[s_17938[(i_17946 + 3)]] != undefined))) {
		F.line = 694;
		number_17940[number_17940_Idx] = (Infinity * sign_17945);
		F.line = 695;
		result_17943 = ((i_17946 + 3) - start_17941);
		break BeforeRet;
		}
		
		}
		
		}
		
		F.line = 696;
		result_17943 = 0;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 697;
				L2: while (true) {
				if (!(ConstSet6[s_17938[i_17946]] != undefined)) break L2;
					F.line = 699;
					flags_17948 = (flags_17948 | 1);
					F.line = 700;
					number_17940[number_17940_Idx] = ((number_17940[number_17940_Idx] * 1.0000000000000000e+01) + (s_17938[i_17946] - 48));
					F.line = 701;
					i_17946 += 1;
					L3: do {
						F.line = 702;
							L4: while (true) {
							if (!(s_17938[i_17946] == 95)) break L4;
								F.line = 702;
								i_17946 += 1;
							}
					} while(false);
				}
		} while(false);
		if ((s_17938[i_17946] == 46)) {
		F.line = 705;
		var hd_18027 = 1.0000000000000000e+00;
		F.line = 706;
		i_17946 += 1;
		L5: do {
			F.line = 707;
				L6: while (true) {
				if (!(ConstSet7[s_17938[i_17946]] != undefined)) break L6;
					F.line = 709;
					flags_17948 = (flags_17948 | 2);
					F.line = 710;
					number_17940[number_17940_Idx] = ((number_17940[number_17940_Idx] * 1.0000000000000000e+01) + (s_17938[i_17946] - 48));
					F.line = 711;
					hd_18027 = (hd_18027 * 1.0000000000000000e+01);
					F.line = 712;
					i_17946 += 1;
					L7: do {
						F.line = 713;
							L8: while (true) {
							if (!(s_17938[i_17946] == 95)) break L8;
								F.line = 713;
								i_17946 += 1;
							}
					} while(false);
				}
		} while(false);
		F.line = 714;
		number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] / hd_18027);
		}
		
		if ((flags_17948 == 0)) {
		F.line = 716;
		result_17943 = 0;
		break BeforeRet;
		}
		
		if ((ConstSet8[s_17938[i_17946]] != undefined)) {
		F.line = 719;
		i_17946 += 1;
		if ((s_17938[i_17946] == 43)) {
		F.line = 721;
		i_17946 += 1;
		}
		else {
		if ((s_17938[i_17946] == 45)) {
		F.line = 723;
		esign_17944 = -1.0000000000000000e+00;
		F.line = 724;
		i_17946 += 1;
		}
		}
		if (!((ConstSet9[s_17938[i_17946]] != undefined))) {
		F.line = 726;
		result_17943 = 0;
		break BeforeRet;
		}
		
		L9: do {
			F.line = 727;
				L10: while (true) {
				if (!(ConstSet10[s_17938[i_17946]] != undefined)) break L10;
					F.line = 728;
					exponent_17947 = (((exponent_17947 * 10) + s_17938[i_17946]) - 48);
					F.line = 729;
					i_17946 += 1;
					L11: do {
						F.line = 730;
							L12: while (true) {
							if (!(s_17938[i_17946] == 95)) break L12;
								F.line = 730;
								i_17946 += 1;
							}
					} while(false);
				}
		} while(false);
		}
		
		F.line = 732;
		var hd_18165 = ten_to_the_power_of_17904(exponent_17947);
		if ((0.0 < esign_17944)) {
		F.line = 733;
		number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] * hd_18165);
		}
		else {
			F.line = 734;
			number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] / hd_18165);
		}
		
		F.line = 736;
		number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] * sign_17945);
		F.line = 737;
		result_17943 = (i_17946 - start_17941);
	} while (false);
	framePtr = F.prev;

	return result_17943;

}

function reraiseException() {
		if ((lastJSError == null)) {
		var e_16033 = null;
		e_16033 = {m_type: NTI3866, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16033.message = nimCopy(null, makeNimstrLit("no exception to reraise"), NTI138);
		e_16033.parent = null;
		raiseException(e_16033, "ReraiseError");
		}
		else {
			if ((excHandler == 0)) {
			if (is_nim_exception_15277()) {
			unhandledException(lastJSError);
			}
			
			}
			
			throw lastJSError;
		}
		

	
}

function negInt(a_16783) {
	var result_16784 = 0;

		result_16784 = (a_16783 * -1);

	return result_16784;

}

function absInt(a_16819) {
		var Tmp1;

	var result_16820 = 0;

		if ((a_16819 < 0)) {
		Tmp1 = (a_16819 * -1);
		}
		else {
		Tmp1 = a_16819;
		}
		
		result_16820 = Tmp1;

	return result_16820;

}

function modInt(a_16675, b_16676) {
		    if (b_16676 == 0) raiseDivByZero();
    if (b_16676 == -1 && a_16675 == 2147483647) raiseOverflow();
    return Math.trunc(a_16675 % b_16676);
  

	
}
var ConstSet11 = setConstr(60, 62, 94);
var ConstSet12 = setConstr(60, 62, 94);
var ConstSet13 = setConstr(45, 43, 32);
var ConstSet14 = setConstr([48, 57]);
var ConstSet15 = setConstr([48, 57]);
var ConstSet16 = setConstr([48, 57]);
var ConstSet17 = setConstr([65, 90], [97, 122]);
				var magic_names_157558 = nimCopy(null, [makeNimstrLit("__add__"), makeNimstrLit("__sub__"), makeNimstrLit("__mul__"), makeNimstrLit("__truediv__"), makeNimstrLit("__floordiv__"), makeNimstrLit("__mod__"), makeNimstrLit("__pow__"), makeNimstrLit("__not__"), makeNimstrLit("__negative__"), makeNimstrLit("__positive__"), makeNimstrLit("__abs__"), makeNimstrLit("__index__"), makeNimstrLit("__bool__"), makeNimstrLit("__and__"), makeNimstrLit("__xor__"), makeNimstrLit("__or__"), makeNimstrLit("__lt__"), makeNimstrLit("__le__"), makeNimstrLit("__eq__"), makeNimstrLit("__ne__"), makeNimstrLit("__gt__"), makeNimstrLit("__ge__"), makeNimstrLit("__contains__"), makeNimstrLit("__len__"), makeNimstrLit("__str__"), makeNimstrLit("__repr__"), makeNimstrLit("__new__"), makeNimstrLit("__init__"), makeNimstrLit("__getattr__"), makeNimstrLit("__setattr__"), makeNimstrLit("__hash__"), makeNimstrLit("__call__"), makeNimstrLit("__getitem__"), makeNimstrLit("__setitem__"), makeNimstrLit("__get__"), makeNimstrLit("__set__"), makeNimstrLit("__iter__"), makeNimstrLit("__iternext__")], NTI157559);
		var types_offsets_277053 = nimCopy(null, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 34, 35, 36, 37, 38, 39, 34, 34, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 64, 64, 65, 66, 64, 64, 64, 64, 67, 68, 64, 64, 64, 64, 64, 64, 64, 64, 69, 70, 71, 72, 73, 64, 64, 64, 74, 75, 76, 77, 78, 79, 64, 64, 80, 81, 34, 34, 34, 34, 34, 34, 82, 34, 34, 34, 34, 34, 83, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 84, 85, 86, 87, 34, 34, 34, 88, 34, 34, 34, 89, 90, 34, 34, 34, 34, 34, 91, 34, 34, 34, 92, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 93, 94, 95, 34, 34, 34, 34, 34, 34, 96, 97, 34, 34, 34, 34, 34, 34, 34, 34, 98, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 99, 34, 34, 34, 34, 34, 34, 34, 34, 100, 34, 34, 34, 34, 96, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 99, 34, 34, 34, 34, 34, 34, 101, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 102, 103, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 104, 105, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 106, 34, 34, 34, 34, 34, 34, 34, 34, 34, 107, 34, 34, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 120, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 121, 122, 123, 124, 125, 126, 34, 34, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 64, 137, 138, 139, 140, 141, 142, 64, 34, 34, 143, 64, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 64, 155, 64, 156, 64, 157, 158, 159, 160, 161, 162, 163, 64, 164, 165, 64, 166, 167, 168, 169, 64, 170, 171, 64, 64, 172, 173, 64, 64, 174, 175, 176, 177, 64, 178, 64, 64, 34, 34, 34, 34, 34, 34, 34, 179, 180, 34, 181, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 34, 34, 34, 34, 34, 34, 182, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 34, 34, 183, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 34, 34, 184, 185, 186, 187, 64, 64, 64, 64, 188, 189, 190, 191, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 192, 34, 34, 34, 34, 34, 193, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 194, 34, 34, 195, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 196, 197, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 198, 199, 200, 201, 202, 64, 203, 204, 205, 206, 207, 208, 209, 210, 64, 64, 64, 64, 211, 212, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 213, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 214, 215, 64, 64, 64, 64, 64, 216, 217, 64, 64, 218, 219, 64, 64, 64, 64, 220, 221, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 222, 223, 224, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 82, 225, 34, 226, 227, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 228, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 229, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 230, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 231, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 232, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 233, 34, 234, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 235, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 236, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 228, 34, 34, 237, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 106, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], NTI277054);
		var types_indices_277234 = nimCopy(null, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 5, 0, 0, 0, 6, 5, 0, 7, 7, 7, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 5, 5, 3, 3, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 3, 3, 3, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 5, 3, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 3, 5, 3, 3, 5, 5, 4, 3, 5, 5, 5, 4, 4, 4, 4, 3, 8, 5, 3, 8, 5, 3, 8, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 8, 5, 3, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3, 5, 3, 3, 5, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 4, 0, 3, 5, 0, 0, 5, 5, 5, 5, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 0, 3, 0, 3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 3, 3, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 3, 5, 0, 3, 5, 3, 3, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 4, 0, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 0, 4, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 3, 0, 3, 0, 3, 0, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 5, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 5, 3, 3, 3, 5, 5, 3, 3, 3, 5, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 0, 5, 3, 3, 3, 3, 5, 4, 4, 4, 4, 5, 0, 0, 5, 5, 3, 3, 0, 0, 0, 0, 0, 3, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 3, 5, 9, 9, 9, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 3, 5, 3, 3, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 4, 4, 4, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 9, 9, 9, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 4, 4, 9, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 0, 0, 3, 5, 3, 5, 4, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 5, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 0, 3, 3, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 5, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], NTI277235);
		var types_data_277237 = nimCopy(null, [0, 64, 129, 176, 128, 168, 2, 4, 160, 132, 180, 172], NTI277238);
		var nums_279349 = nimCopy(null, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], NTI279086);
				var tolower_ranges_50536 = nimCopy(null, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 398, 399, 702, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1025, 1036, 580, 1038, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 548, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 8544, 8559, 516, 9398, 9423, 526, 65313, 65338, 532], NTI50537);
				var tolower_singlets_50648 = nimCopy(null, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 416, 501, 418, 501, 420, 501, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 902, 538, 908, 564, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1217, 501, 1219, 501, 1223, 501, 1227, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1272, 501, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491], NTI50649);
				var toupper_ranges_49743 = nimCopy(null, [97, 122, 468, 224, 246, 468, 248, 254, 468, 598, 599, 295, 600, 601, 298, 650, 651, 283, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1105, 1116, 420, 1118, 1119, 420, 1377, 1414, 452, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 8560, 8575, 484, 9424, 9449, 474, 65345, 65370, 468], NTI49744);
				var toupper_singlets_49852 = nimCopy(null, [255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 409, 499, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 595, 290, 596, 294, 603, 297, 608, 295, 611, 293, 616, 291, 617, 289, 623, 289, 626, 287, 643, 282, 648, 282, 658, 281, 940, 462, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1224, 499, 1228, 499, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1273, 499, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8131, 509, 8165, 507, 8179, 509], NTI49853);
		var props_offsets_260203 = nimCopy(null, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 41, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 101, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 102, 103, 41, 41, 41, 41, 41, 41, 41, 41, 104, 41, 41, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 122, 123, 124, 125, 126, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 137, 41, 41, 144, 137, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 156, 158, 156, 159, 160, 161, 162, 163, 164, 165, 137, 166, 167, 137, 168, 169, 170, 171, 137, 172, 173, 137, 137, 174, 175, 137, 137, 176, 177, 178, 179, 137, 180, 137, 137, 41, 41, 41, 41, 41, 41, 41, 181, 182, 41, 183, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 41, 41, 41, 41, 184, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 185, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 186, 187, 188, 189, 137, 137, 137, 137, 190, 191, 192, 193, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 194, 41, 41, 41, 41, 41, 195, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 196, 41, 41, 197, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 198, 199, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 78, 200, 201, 202, 203, 204, 205, 137, 206, 207, 208, 209, 210, 211, 212, 213, 78, 78, 78, 78, 214, 215, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 216, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 217, 218, 219, 156, 156, 156, 156, 156, 220, 221, 156, 156, 222, 223, 156, 156, 224, 225, 226, 227, 228, 137, 72, 229, 72, 72, 72, 72, 72, 230, 231, 232, 233, 234, 235, 236, 237, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 239, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 240, 41, 241, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 242, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 243, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 121, 121, 121, 121, 244, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 245, 246, 247, 248, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 249, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 249], NTI260204);
		var props_indices_268070 = nimCopy(null, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 5, 5, 6, 7, 6, 5, 5, 8, 9, 5, 10, 11, 12, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 5, 14, 14, 14, 5, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 8, 5, 9, 16, 17, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 8, 14, 9, 14, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 5, 7, 7, 7, 7, 20, 5, 21, 20, 22, 23, 14, 24, 20, 21, 25, 26, 27, 27, 21, 28, 5, 5, 21, 27, 22, 29, 30, 30, 30, 5, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 14, 15, 31, 31, 31, 31, 31, 15, 18, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 14, 18, 32, 32, 32, 32, 32, 18, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 18, 33, 28, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 33, 28, 15, 18, 31, 32, 31, 32, 31, 32, 28, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 31, 32, 31, 32, 31, 32, 28, 18, 15, 15, 18, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 15, 15, 15, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 18, 15, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 15, 18, 15, 18, 18, 15, 18, 15, 31, 32, 15, 15, 15, 18, 15, 18, 15, 15, 18, 18, 34, 15, 18, 18, 18, 34, 34, 34, 34, 33, 35, 28, 33, 35, 28, 33, 35, 28, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 33, 35, 28, 31, 32, 15, 15, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 18, 18, 18, 18, 18, 15, 15, 18, 15, 15, 18, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 38, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 16, 16, 16, 16, 16, 16, 21, 21, 21, 21, 21, 21, 16, 16, 36, 36, 36, 36, 36, 16, 16, 16, 16, 16, 16, 16, 37, 16, 38, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 40, 40, 39, 40, 39, 40, 39, 39, 41, 42, 42, 42, 42, 41, 43, 42, 42, 42, 42, 42, 44, 44, 45, 45, 45, 45, 46, 46, 42, 42, 42, 42, 45, 45, 42, 45, 45, 42, 42, 47, 47, 47, 47, 48, 42, 42, 42, 42, 40, 40, 40, 49, 49, 39, 49, 49, 50, 40, 42, 42, 42, 40, 40, 40, 42, 42, 51, 40, 40, 40, 42, 42, 42, 42, 40, 41, 42, 42, 40, 52, 53, 53, 52, 53, 53, 52, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 15, 18, 15, 18, 54, 16, 15, 18, 55, 55, 36, 18, 18, 18, 56, 15, 55, 55, 55, 55, 21, 57, 31, 56, 31, 31, 31, 55, 31, 55, 31, 31, 32, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 15, 15, 15, 15, 15, 15, 31, 31, 32, 32, 32, 32, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 32, 32, 32, 15, 28, 28, 33, 58, 58, 28, 28, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 28, 28, 28, 18, 33, 28, 14, 15, 18, 33, 15, 18, 18, 15, 15, 15, 31, 31, 15, 31, 15, 15, 15, 31, 15, 15, 15, 15, 31, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 18, 32, 18, 18, 18, 32, 18, 18, 18, 18, 32, 32, 32, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 59, 40, 40, 40, 40, 40, 60, 60, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 38, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 28, 18, 61, 62, 55, 55, 20, 20, 7, 63, 42, 40, 40, 40, 40, 42, 40, 40, 40, 64, 42, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 64, 65, 40, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 81, 40, 42, 81, 74, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 84, 84, 84, 84, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 85, 85, 85, 85, 85, 85, 14, 14, 86, 6, 6, 87, 11, 88, 20, 20, 40, 40, 40, 40, 40, 40, 40, 40, 89, 90, 91, 88, 92, 93, 88, 88, 94, 94, 95, 95, 95, 95, 95, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 96, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 97, 98, 99, 89, 90, 91, 100, 101, 39, 39, 45, 42, 40, 40, 40, 40, 40, 42, 40, 40, 42, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 6, 103, 103, 88, 94, 94, 104, 94, 94, 94, 94, 105, 105, 105, 105, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 94, 95, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 88, 94, 40, 40, 40, 40, 40, 40, 40, 85, 20, 40, 40, 40, 40, 42, 40, 96, 96, 40, 40, 20, 42, 40, 40, 42, 94, 94, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94, 94, 94, 106, 106, 94, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 93, 92, 94, 107, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 40, 42, 40, 40, 42, 40, 40, 42, 42, 42, 40, 42, 42, 40, 42, 40, 40, 40, 42, 40, 42, 40, 42, 40, 42, 40, 40, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 40, 40, 40, 42, 40, 109, 109, 20, 5, 5, 5, 109, 63, 63, 42, 110, 110, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 109, 40, 40, 40, 40, 40, 40, 40, 40, 40, 109, 40, 40, 40, 109, 40, 40, 40, 40, 40, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 42, 42, 42, 63, 63, 81, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 93, 94, 94, 94, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 42, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 85, 42, 40, 40, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 97, 98, 99, 40, 40, 40, 42, 40, 40, 42, 42, 40, 40, 40, 40, 40, 51, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 112, 34, 34, 34, 34, 34, 51, 111, 113, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 114, 111, 111, 34, 40, 42, 40, 40, 51, 51, 51, 115, 115, 115, 115, 115, 115, 115, 115, 34, 34, 51, 51, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 55, 34, 34, 34, 34, 55, 55, 117, 34, 118, 111, 111, 51, 51, 51, 51, 55, 55, 111, 111, 55, 55, 119, 119, 114, 34, 55, 55, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 115, 115, 55, 115, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 7, 7, 120, 120, 120, 120, 120, 120, 59, 7, 34, 61, 40, 55, 55, 51, 51, 111, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 115, 55, 34, 115, 55, 34, 34, 55, 55, 117, 55, 111, 111, 111, 51, 51, 55, 55, 55, 55, 51, 51, 55, 55, 51, 51, 114, 55, 55, 55, 51, 55, 55, 55, 55, 55, 55, 55, 115, 115, 115, 34, 55, 115, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 51, 51, 34, 34, 34, 51, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 111, 111, 111, 51, 51, 51, 51, 51, 55, 51, 51, 111, 55, 111, 111, 114, 55, 55, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 7, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 55, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 118, 51, 111, 51, 51, 51, 51, 55, 55, 111, 119, 55, 55, 119, 119, 114, 55, 55, 55, 55, 55, 55, 55, 55, 121, 118, 55, 55, 55, 55, 115, 115, 55, 34, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 59, 34, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 34, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 55, 34, 34, 112, 34, 55, 55, 55, 34, 34, 55, 34, 55, 34, 34, 55, 55, 55, 34, 34, 55, 55, 55, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 118, 111, 51, 111, 111, 55, 55, 55, 111, 111, 111, 55, 119, 119, 119, 114, 55, 55, 34, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 20, 20, 20, 20, 20, 20, 7, 20, 55, 55, 55, 55, 55, 51, 111, 111, 111, 51, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 51, 51, 51, 111, 111, 111, 111, 55, 51, 51, 122, 55, 51, 51, 51, 114, 55, 55, 55, 55, 55, 55, 55, 123, 124, 55, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 59, 34, 51, 111, 111, 61, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 111, 126, 119, 111, 118, 111, 111, 55, 126, 119, 119, 55, 119, 119, 51, 114, 55, 55, 55, 55, 55, 55, 55, 118, 118, 55, 55, 55, 55, 55, 55, 55, 34, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 114, 114, 34, 118, 111, 111, 51, 51, 51, 51, 55, 111, 111, 111, 55, 119, 119, 119, 114, 34, 59, 55, 55, 55, 55, 34, 34, 34, 118, 120, 120, 120, 120, 120, 120, 120, 34, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 59, 34, 34, 34, 34, 34, 34, 55, 55, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 127, 55, 55, 55, 55, 118, 111, 111, 51, 51, 51, 55, 51, 55, 111, 111, 119, 111, 119, 119, 119, 118, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 111, 111, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 128, 128, 114, 55, 55, 55, 55, 7, 34, 34, 34, 34, 34, 34, 38, 51, 129, 129, 129, 129, 51, 51, 51, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 55, 34, 55, 55, 34, 34, 55, 34, 55, 55, 34, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 55, 34, 55, 55, 34, 34, 55, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 130, 130, 55, 51, 51, 34, 55, 55, 34, 34, 34, 34, 34, 55, 38, 55, 131, 131, 131, 131, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 22, 22, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 59, 59, 59, 61, 61, 61, 61, 61, 61, 61, 61, 132, 61, 61, 61, 61, 61, 61, 59, 61, 59, 59, 59, 42, 42, 59, 59, 59, 59, 59, 59, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 59, 42, 59, 42, 59, 133, 8, 9, 8, 9, 111, 111, 34, 34, 34, 115, 34, 34, 34, 34, 55, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 115, 34, 34, 34, 55, 55, 55, 55, 134, 135, 136, 137, 136, 136, 138, 136, 138, 135, 135, 135, 135, 51, 111, 135, 136, 40, 40, 114, 61, 40, 40, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 136, 51, 51, 51, 51, 55, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 136, 51, 51, 51, 55, 59, 59, 59, 59, 59, 59, 59, 59, 42, 59, 59, 59, 59, 59, 59, 55, 59, 59, 61, 61, 61, 61, 61, 59, 59, 59, 59, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 111, 111, 51, 121, 51, 51, 111, 51, 51, 51, 51, 51, 117, 111, 114, 114, 111, 111, 51, 51, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 111, 111, 51, 51, 34, 34, 34, 34, 51, 51, 51, 34, 111, 111, 111, 34, 34, 111, 111, 111, 111, 111, 111, 111, 34, 34, 34, 51, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 51, 51, 111, 111, 111, 111, 111, 111, 42, 34, 111, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 111, 111, 111, 51, 59, 59, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 55, 55, 55, 55, 55, 15, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 36, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 40, 40, 40, 61, 61, 61, 61, 61, 61, 61, 61, 61, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 18, 18, 18, 18, 18, 18, 55, 55, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 4, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 8, 9, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 61, 61, 140, 140, 140, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 51, 51, 114, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 114, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 111, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 111, 111, 111, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 114, 51, 61, 61, 61, 38, 61, 61, 61, 7, 34, 40, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 62, 5, 5, 5, 5, 51, 51, 51, 24, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 65, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 51, 51, 51, 111, 111, 111, 111, 51, 51, 111, 111, 111, 55, 55, 55, 55, 111, 111, 51, 111, 111, 111, 111, 111, 111, 64, 40, 42, 55, 55, 55, 55, 20, 55, 55, 55, 5, 5, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 42, 111, 111, 51, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 111, 51, 51, 51, 51, 51, 51, 51, 55, 114, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 111, 111, 51, 51, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 42, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 61, 61, 61, 38, 61, 61, 61, 61, 61, 61, 55, 55, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 60, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 111, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 34, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 118, 51, 51, 51, 51, 51, 119, 51, 119, 111, 111, 119, 119, 51, 119, 141, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 61, 61, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 42, 40, 40, 40, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 51, 51, 111, 111, 51, 51, 141, 114, 51, 51, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 111, 51, 51, 111, 111, 111, 51, 111, 51, 51, 51, 141, 141, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 51, 117, 55, 55, 55, 61, 61, 61, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 15, 15, 15, 61, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 61, 47, 42, 42, 42, 42, 42, 40, 40, 42, 42, 42, 42, 40, 111, 47, 47, 47, 47, 47, 47, 47, 34, 34, 34, 34, 42, 34, 34, 34, 34, 111, 111, 40, 34, 34, 111, 40, 40, 55, 55, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40, 40, 42, 40, 40, 40, 40, 40, 40, 40, 42, 40, 40, 53, 142, 42, 44, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 65, 65, 42, 55, 40, 52, 42, 40, 42, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 32, 32, 32, 28, 143, 18, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 15, 18, 15, 18, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 55, 31, 55, 31, 55, 31, 55, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 55, 32, 32, 31, 31, 31, 146, 145, 21, 144, 21, 21, 57, 32, 32, 32, 55, 32, 32, 31, 146, 31, 146, 145, 57, 57, 57, 32, 32, 32, 144, 55, 55, 32, 32, 31, 31, 31, 146, 55, 57, 57, 57, 32, 32, 32, 144, 32, 32, 32, 32, 31, 31, 31, 146, 31, 57, 147, 147, 55, 55, 32, 32, 32, 55, 32, 32, 31, 146, 31, 146, 145, 147, 21, 55, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 24, 24, 24, 150, 151, 62, 152, 62, 62, 62, 62, 5, 153, 23, 29, 8, 23, 23, 29, 8, 23, 5, 5, 5, 5, 153, 153, 153, 5, 154, 155, 156, 157, 158, 159, 160, 19, 6, 6, 6, 161, 161, 5, 153, 153, 5, 23, 29, 5, 153, 5, 153, 17, 17, 5, 5, 5, 162, 8, 9, 153, 153, 153, 5, 5, 5, 5, 5, 5, 5, 5, 14, 5, 17, 5, 5, 153, 5, 5, 5, 5, 5, 5, 5, 149, 24, 24, 24, 24, 24, 163, 164, 165, 166, 167, 24, 24, 24, 24, 24, 24, 27, 36, 55, 55, 27, 27, 27, 27, 27, 27, 168, 168, 169, 170, 171, 36, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 168, 168, 169, 170, 171, 55, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 55, 55, 55, 7, 7, 7, 7, 7, 7, 7, 7, 172, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 40, 40, 47, 47, 40, 40, 40, 40, 47, 47, 47, 40, 40, 60, 60, 60, 60, 40, 60, 60, 60, 47, 47, 40, 42, 40, 47, 47, 42, 42, 42, 42, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 174, 174, 33, 174, 20, 174, 174, 33, 20, 174, 28, 33, 33, 33, 28, 28, 33, 33, 33, 28, 20, 33, 174, 20, 14, 33, 33, 33, 33, 33, 20, 20, 174, 174, 174, 20, 33, 20, 146, 20, 33, 20, 146, 146, 33, 33, 25, 28, 33, 33, 15, 33, 28, 22, 22, 22, 22, 28, 20, 174, 28, 28, 33, 33, 169, 14, 14, 14, 14, 33, 28, 28, 28, 28, 20, 14, 20, 20, 18, 59, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 140, 140, 140, 15, 18, 140, 140, 140, 140, 30, 20, 20, 55, 55, 55, 55, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 176, 176, 20, 20, 20, 20, 14, 20, 20, 14, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 176, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 177, 176, 176, 20, 20, 14, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 14, 14, 14, 176, 14, 14, 176, 14, 14, 14, 14, 14, 10, 26, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 169, 169, 14, 169, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 14, 176, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 176, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 14, 14, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 20, 20, 20, 20, 20, 20, 20, 178, 179, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 30, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 169, 169, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 181, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 15, 18, 15, 15, 15, 18, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 18, 15, 18, 18, 18, 18, 18, 18, 36, 36, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 20, 20, 20, 20, 20, 20, 15, 18, 15, 18, 40, 40, 40, 15, 18, 55, 55, 55, 55, 55, 5, 5, 5, 5, 125, 5, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 18, 55, 55, 55, 55, 55, 18, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 36, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 114, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 5, 23, 29, 23, 29, 5, 5, 5, 23, 29, 5, 23, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 5, 5, 62, 5, 23, 29, 5, 5, 23, 29, 8, 9, 8, 9, 8, 9, 8, 9, 5, 5, 5, 5, 5, 37, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 62, 5, 5, 5, 5, 62, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 174, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 174, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 149, 5, 5, 5, 20, 38, 34, 140, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 62, 8, 9, 9, 20, 140, 140, 140, 140, 140, 140, 140, 140, 140, 182, 65, 41, 64, 183, 183, 62, 38, 38, 38, 38, 38, 174, 20, 175, 175, 175, 38, 34, 5, 20, 20, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 112, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 55, 55, 184, 184, 21, 21, 38, 185, 22, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 112, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 112, 112, 112, 112, 5, 38, 38, 185, 22, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 59, 59, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 55, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 120, 120, 120, 120, 120, 120, 120, 120, 174, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 59, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 5, 5, 5, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 34, 40, 60, 60, 60, 5, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 37, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 36, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 40, 40, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 16, 16, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 15, 18, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 37, 187, 187, 15, 18, 15, 18, 34, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 15, 18, 15, 15, 15, 15, 15, 18, 15, 18, 15, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 36, 36, 18, 34, 34, 34, 34, 34, 34, 34, 51, 34, 34, 34, 114, 34, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 51, 51, 111, 20, 20, 20, 20, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 59, 59, 7, 25, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 111, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 114, 51, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 34, 34, 34, 34, 34, 34, 61, 61, 61, 34, 61, 34, 34, 51, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 42, 42, 42, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 141, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 51, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 111, 111, 51, 51, 51, 51, 111, 111, 51, 111, 111, 111, 141, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 55, 38, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 51, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 111, 111, 51, 51, 111, 111, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 59, 59, 59, 34, 111, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 34, 40, 40, 42, 34, 34, 40, 40, 34, 34, 34, 34, 34, 40, 40, 34, 40, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 111, 111, 61, 61, 34, 38, 38, 111, 114, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 187, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 51, 111, 111, 51, 111, 111, 61, 111, 114, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 34, 115, 34, 115, 34, 34, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 115, 34, 115, 34, 34, 115, 115, 34, 34, 34, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 190, 191, 190, 192, 192, 192, 192, 192, 192, 192, 192, 192, 168, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 63, 190, 190, 190, 190, 190, 63, 190, 63, 190, 190, 63, 190, 190, 63, 190, 190, 190, 190, 190, 190, 190, 190, 190, 192, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 9, 8, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 93, 93, 93, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 194, 20, 93, 93, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 153, 153, 153, 153, 153, 153, 153, 170, 171, 153, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 40, 40, 153, 152, 152, 195, 195, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 5, 5, 170, 171, 153, 153, 153, 153, 195, 195, 195, 196, 153, 196, 55, 153, 196, 153, 153, 152, 170, 171, 170, 171, 170, 171, 161, 153, 153, 168, 197, 169, 169, 169, 55, 153, 172, 161, 153, 55, 55, 55, 55, 105, 105, 105, 94, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 24, 55, 153, 153, 161, 172, 161, 153, 153, 170, 171, 153, 168, 196, 197, 196, 196, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 196, 153, 169, 169, 169, 153, 153, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 170, 153, 171, 21, 195, 21, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 170, 169, 171, 169, 170, 171, 153, 170, 171, 153, 153, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 55, 55, 55, 172, 172, 169, 21, 174, 172, 172, 55, 174, 169, 169, 169, 169, 174, 174, 55, 163, 163, 163, 163, 163, 163, 163, 163, 163, 199, 199, 199, 20, 20, 163, 163, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 61, 5, 61, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 125, 125, 20, 59, 59, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 42, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 42, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 34, 34, 34, 34, 34, 34, 34, 34, 140, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 61, 140, 140, 140, 140, 140, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 84, 84, 84, 84, 84, 84, 63, 63, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 84, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 81, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 203, 203, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 63, 63, 63, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 202, 202, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 51, 51, 51, 63, 51, 51, 63, 63, 63, 63, 63, 51, 42, 51, 40, 84, 84, 84, 84, 63, 84, 84, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 40, 47, 42, 63, 63, 63, 63, 114, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 81, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 203, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 42, 63, 63, 63, 63, 202, 202, 202, 202, 202, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 5, 5, 5, 5, 5, 5, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 40, 40, 40, 40, 93, 93, 93, 93, 93, 93, 93, 93, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 63, 63, 63, 63, 63, 63, 63, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 42, 42, 40, 40, 40, 42, 40, 42, 42, 42, 42, 207, 207, 207, 207, 88, 88, 88, 88, 88, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 111, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 114, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 114, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 111, 111, 114, 113, 61, 61, 150, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 150, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 40, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 121, 51, 51, 51, 51, 111, 51, 122, 122, 51, 51, 51, 114, 114, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 34, 111, 111, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 141, 34, 34, 34, 34, 61, 61, 61, 61, 51, 117, 51, 51, 61, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 61, 34, 61, 61, 61, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 111, 111, 51, 141, 117, 51, 61, 61, 61, 61, 61, 61, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 111, 51, 51, 51, 51, 51, 51, 117, 114, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 51, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 117, 117, 34, 118, 111, 51, 111, 111, 111, 111, 55, 55, 111, 111, 55, 55, 119, 119, 141, 55, 55, 34, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 111, 111, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 55, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 114, 51, 51, 111, 117, 34, 34, 34, 34, 61, 61, 61, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 61, 55, 61, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 111, 111, 51, 51, 51, 51, 51, 51, 111, 121, 119, 119, 118, 119, 51, 51, 111, 114, 117, 34, 34, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 111, 111, 51, 51, 51, 51, 55, 55, 111, 111, 119, 119, 51, 51, 111, 114, 117, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 51, 111, 114, 51, 61, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 141, 117, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 111, 111, 51, 51, 51, 51, 111, 51, 51, 51, 51, 114, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 61, 61, 61, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 114, 117, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 51, 51, 51, 51, 51, 51, 126, 126, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 114, 51, 51, 51, 51, 111, 34, 51, 51, 51, 51, 61, 61, 61, 61, 61, 61, 61, 61, 114, 55, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 111, 111, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 51, 114, 61, 61, 61, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 111, 208, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 111, 51, 51, 51, 51, 51, 51, 51, 111, 51, 51, 111, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 55, 55, 55, 51, 55, 51, 51, 55, 51, 51, 51, 117, 51, 114, 114, 34, 51, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 55, 51, 51, 55, 111, 111, 51, 111, 114, 34, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 111, 111, 61, 61, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 55, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 47, 47, 47, 47, 47, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 40, 40, 61, 61, 61, 61, 61, 59, 59, 59, 59, 38, 38, 38, 38, 61, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 120, 120, 120, 120, 120, 120, 120, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 38, 38, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 59, 51, 47, 61, 24, 24, 24, 24, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 209, 209, 209, 209, 209, 209, 209, 210, 210, 47, 47, 47, 59, 59, 59, 211, 210, 210, 210, 210, 210, 24, 24, 24, 24, 24, 24, 24, 24, 42, 42, 42, 42, 42, 42, 42, 42, 59, 59, 40, 40, 40, 40, 40, 42, 42, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 209, 209, 209, 209, 209, 209, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 40, 40, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 55, 33, 33, 55, 55, 33, 55, 55, 33, 33, 55, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 55, 28, 55, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 55, 33, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 28, 55, 55, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 42, 42, 42, 42, 42, 42, 42, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 40, 40, 40, 40, 40, 40, 117, 63, 63, 63, 63, 63, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 63, 63, 63, 63, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 93, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 106, 207, 207, 207, 87, 207, 207, 207, 207, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 93, 105, 93, 93, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 93, 105, 93, 93, 93, 93, 93, 93, 105, 93, 93, 93, 93, 105, 93, 105, 93, 105, 93, 105, 105, 105, 93, 105, 105, 93, 105, 93, 93, 105, 93, 105, 93, 105, 93, 105, 93, 105, 93, 105, 105, 93, 105, 93, 93, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 105, 105, 105, 93, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 14, 14, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 125, 125, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 20, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 174, 174, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 180, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 180, 180, 180, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 55, 55, 55, 55, 55, 55, 180, 180, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 55, 55, 55, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 163, 163, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 163, 24, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 163, 163], NTI268071);
		var props_data_275248 = nimCopy(null, [[16384, 0, 14, 0], [16384, 0, 16, 0], [16384, 0, 15, 0], [16384, 0, 17, 0], [2048, 0, 17, 0], [33554432, 0, 18, 0], [33554432, 0, 10, 0], [134217728, 0, 10, 0], [2097152, 0, 18, 0], [4194304, 0, 18, 0], [67108864, 0, 9, 0], [33554432, 0, 12, 0], [1048576, 0, 9, 0], [256, 0, 8, 0], [67108864, 0, 18, 0], [4, 0, 0, 0], [268435456, 0, 18, 0], [524288, 0, 18, 0], [8, 0, 0, 0], [2048, 0, 12, 36], [536870912, 0, 18, 0], [268435456, 0, 18, 36], [2, 0, 0, 36], [8388608, 0, 18, 0], [32768, 0, 14, 0], [536870912, 0, 10, 0], [67108864, 0, 10, 0], [1024, 0, 8, 36], [8, 0, 0, 36], [16777216, 0, 18, 0], [1024, 0, 18, 36], [4, 0, 0, 48], [8, 0, 0, 48], [4, 0, 0, 36], [2, 0, 0, 0], [16, 0, 0, 36], [1, 0, 0, 36], [1, 0, 18, 0], [1, 0, 0, 0], [32, 230, 13, 10], [32, 230, 13, 0], [32, 232, 13, 0], [32, 220, 13, 0], [32, 216, 13, 10], [32, 202, 13, 0], [32, 220, 13, 10], [32, 202, 13, 10], [32, 1, 13, 0], [32, 1, 13, 10], [32, 230, 13, 53], [32, 240, 13, 10], [32, 0, 13, 0], [32, 233, 13, 0], [32, 234, 13, 0], [1, 0, 18, 53], [262144, 0, 0, 0], [33554432, 0, 18, 53], [268435456, 0, 18, 52], [4, 0, 0, 52], [536870912, 0, 0, 0], [128, 0, 13, 0], [33554432, 0, 0, 0], [1048576, 0, 18, 0], [262144, 0, 3, 0], [32, 222, 13, 0], [32, 228, 13, 0], [32, 10, 13, 0], [32, 11, 13, 0], [32, 12, 13, 0], [32, 13, 13, 0], [32, 14, 13, 0], [32, 15, 13, 0], [32, 16, 13, 0], [32, 17, 13, 0], [32, 18, 13, 0], [32, 19, 13, 0], [32, 20, 13, 0], [32, 21, 13, 0], [32, 22, 13, 0], [1048576, 0, 3, 0], [32, 23, 13, 0], [33554432, 0, 3, 0], [32, 24, 13, 0], [32, 25, 13, 0], [2, 0, 3, 0], [32768, 0, 11, 0], [67108864, 0, 4, 0], [134217728, 0, 4, 0], [33554432, 0, 4, 0], [32, 30, 13, 0], [32, 31, 13, 0], [32, 32, 13, 0], [32768, 0, 4, 0], [262144, 0, 4, 0], [2, 0, 4, 0], [2, 0, 4, 48], [1, 0, 4, 0], [32, 27, 13, 0], [32, 28, 13, 0], [32, 29, 13, 0], [32, 33, 13, 0], [32, 34, 13, 0], [256, 0, 11, 0], [33554432, 0, 11, 0], [32, 35, 13, 0], [2, 0, 4, 36], [536870912, 0, 4, 0], [32, 36, 13, 0], [256, 0, 3, 0], [1, 0, 3, 0], [134217728, 0, 3, 0], [64, 0, 0, 0], [2, 0, 0, 48], [32, 7, 13, 10], [32, 9, 13, 0], [2, 0, 0, 53], [256, 0, 0, 0], [32, 7, 13, 0], [64, 0, 0, 10], [64, 0, 0, 48], [1024, 0, 0, 0], [32, 0, 13, 10], [32, 0, 13, 48], [32, 84, 13, 0], [32, 91, 13, 10], [1024, 0, 18, 0], [32, 0, 0, 0], [32, 9, 13, 10], [32, 103, 13, 0], [32, 107, 13, 0], [32, 118, 13, 0], [32, 122, 13, 0], [33554432, 0, 0, 36], [32, 216, 13, 0], [32, 129, 13, 0], [32, 130, 13, 0], [32, 0, 13, 53], [32, 132, 13, 0], [32, 0, 13, 36], [2, 0, 0, 10], [512, 0, 0, 0], [64, 9, 0, 0], [32, 214, 13, 0], [8, 0, 0, 52], [8, 0, 0, 53], [16, 0, 0, 48], [4, 0, 0, 53], [268435456, 0, 18, 53], [2048, 0, 17, 53], [2048, 0, 17, 36], [32768, 0, 0, 0], [32768, 0, 3, 0], [1048576, 0, 18, 36], [33554432, 0, 18, 36], [4096, 0, 17, 0], [8192, 0, 15, 0], [32768, 0, 1, 0], [32768, 0, 5, 0], [32768, 0, 7, 0], [32768, 0, 2, 0], [32768, 0, 6, 0], [33554432, 0, 10, 36], [67108864, 0, 12, 0], [262144, 0, 14, 0], [32768, 0, 19, 0], [32768, 0, 20, 0], [32768, 0, 21, 0], [32768, 0, 22, 0], [67108864, 0, 9, 36], [67108864, 0, 18, 36], [2097152, 0, 18, 36], [4194304, 0, 18, 36], [134217728, 0, 10, 36], [262144, 0, 10, 0], [536870912, 0, 18, 36], [512, 0, 0, 36], [67108864, 0, 18, 48], [536870912, 0, 18, 48], [2097152, 0, 18, 53], [4194304, 0, 18, 53], [536870912, 0, 0, 36], [67108864, 0, 18, 53], [32, 218, 13, 0], [64, 224, 0, 0], [32, 8, 13, 10], [1, 0, 0, 48], [1024, 0, 0, 36], [268435456, 0, 0, 0], [65536, 0, 0, 0], [131072, 0, 0, 0], [2, 0, 3, 53], [32, 26, 13, 0], [2, 0, 3, 36], [268435456, 0, 4, 0], [134217728, 0, 4, 36], [524288, 0, 18, 36], [33554432, 0, 12, 36], [1048576, 0, 9, 36], [256, 0, 8, 36], [32768, 0, 18, 0], [512, 0, 18, 0], [1024, 0, 8, 0], [1024, 0, 3, 0], [536870912, 0, 3, 0], [4, 0, 3, 0], [8, 0, 3, 0], [1024, 0, 11, 0], [1024, 0, 4, 0], [32, 9, 0, 0], [536870912, 0, 0, 53], [64, 216, 0, 0], [64, 226, 0, 0], [67108864, 0, 0, 36]], NTI275249);
var ConstSet18 = setConstr(32);
var ConstSet19 = setConstr(13, 10);
var ConstSet20 = setConstr(2, 3, 4);
var ConstSet21 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);
var ConstSet22 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);
var ConstSet23 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);

function nimBoolToStr(x_15245) {
	var result_15246 = null;

		if (x_15245) {
		result_15246 = nimCopy(null, makeNimstrLit("true"), NTI138);
		}
		else {
			result_15246 = nimCopy(null, makeNimstrLit("false"), NTI138);
		}
		

	return result_15246;

}
var ConstSet24 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);
var ConstSet25 = setConstr(81, 82, 83, 84, 85, 86, 65, 88);
var ConstSet26 = setConstr(2, 1);
var ConstSet27 = setConstr(2, 1);
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_143246 = [0];
var object_id_157100 = [0];
var bltin_types_158717 = [null];

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function give_id_157814(obj_157816) {
	var F={procname:"pyobjectBase.giveId",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 173;
		obj_157816.id = object_id_157100[0];
		F.line = 175;
		object_id_157100[0] = addInt(object_id_157100[0], 1);
	framePtr = F.prev;

	
}

function is_power_of_two_128047(x_128049) {
		var Tmp1;

	var result_128050 = false;

	BeforeRet: do {
		if (!(0 < x_128049)) Tmp1 = false; else {			Tmp1 = ((x_128049 & (x_128049 - 1)) == 0);		}		result_128050 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_128050;

}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_20445 = null;
		F.line = 2916;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2918;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3872;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3879;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function init_table_158804(initial_size_158809) {
	var result_158811 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_158809))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_158811.counter = 0;
		F.line = 354;
		result_158811.data = new Array(chckRange(initial_size_158809, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_158809, 0, 2147483647);++i) {result_158811.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_158811;

}

function init_table_159031(initial_size_159036) {
	var result_159038 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_159036))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_159038.counter = 0;
		F.line = 354;
		result_159038.data = new Array(chckRange(initial_size_159036, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_159036, 0, 2147483647);++i) {result_159038.data[i]={Field0: 0, Field1: null, Field2: {Field0: null, Field1: null}};}	framePtr = F.prev;

	return result_159038;

}

function new_py_type_private_158731(name_158733) {
	var result_158734 = null;

	var F={procname:"pyobjectBase.newPyTypePrivate",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 187;
		result_158734 = {m_type: NTI157280, name: null, base: null, kind: 0, magicMethods: {Field0: null, Field1: null, Field2: null, Field3: null, Field4: null, Field5: null, Field6: null, Field7: null, Field8: null, Field9: null, Field10: null, Field11: null, Field12: null, Field13: null, Field14: null, Field15: null, Field16: null, Field17: null, Field18: null, Field19: null, Field20: null, Field21: null, Field22: null, Field23: null, Field24: null, Field25: null, Field26: null, Field27: null, Field28: null, Field29: null, Field30: null, Field31: null, Field32: null, Field33: null, Field34: null, Field35: null, Field36: null, Field37: null}, bltinMethods: {data: null, counter: 0}, getsetDescr: {data: null, counter: 0}, dict: null, id: 0, pyType: null};
		F.line = 189;
		give_id_157814(result_158734);
		F.line = 190;
		result_158734.name = nimCopy(null, name_158733, NTI138);
		F.line = 191;
		nimCopy(result_158734.bltinMethods, init_table_158804(64), NTI157294);
		F.line = 192;
		nimCopy(result_158734.getsetDescr, init_table_159031(64), NTI157326);
		F.line = 193;
		if (bltin_types_158717[0] != null) { bltin_types_158717[0].push(result_158734); } else { bltin_types_158717[0] = [result_158734]; };
	framePtr = F.prev;

	return result_158734;

}
var py_object_type_159247 = new_py_type_private_158731(makeNimstrLit("object"));

function new_py_type_159261(name_159263) {
	var result_159264 = null;

	var F={procname:"pyobjectBase.newPyType",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 200;
		result_159264 = new_py_type_private_158731(name_159263);
		F.line = 201;
		result_159264.base = py_object_type_159247;
	framePtr = F.prev;

	return result_159264;

}

function new_175206() {
	var result_175211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_175401 = null;
		F.line = 211;
		r_175401 = {m_type: NTI175084, str: null, id: 0, pyType: null};
		F.line = 212;
		result_175211 = r_175401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_175211;

}

function new_py_str_simple_175201() {
	var result_175203 = null;

	var F={procname:"stringobject.newPyStrSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_175424 = new_175206();
		F.line = 561;
		obj_175424.pyType = py_str_object_type_175090;
		F.line = 563;
		give_id_157814(obj_175424);
		result_175203 = obj_175424;
	framePtr = F.prev;

	return result_175203;

}

function new_py_str_default_175821(args_175039) {
	var result_175824 = null;

	var F={procname:"stringobject.newPyStrDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_175824 = new_py_str_simple_175201();
	framePtr = F.prev;

	return result_175824;

}
var py_str_object_type_175090 = new_py_type_159261(makeNimstrLit("Str"));
py_str_object_type_175090.kind = 10;
py_str_object_type_175090.magicMethods.Field26 = new_py_str_default_175821;

function new_py_string_176075(str_176077) {
	var result_176078 = null;

	var F={procname:"stringobject.newPyString",prev:framePtr,filename:"../Objects/stringobject.nim",line:0};
	framePtr = F;
		F.line = 13;
		result_176078 = new_py_str_simple_175201();
		F.line = 14;
		result_176078.str = nimCopy(null, str_176077, NTI138);
	framePtr = F.prev;

	return result_176078;

}
var new_py_str_176092 = new_py_string_176075;

function init_table_204069(initial_size_204074) {
	var result_204076 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_204074))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_204076.counter = 0;
		F.line = 354;
		result_204076.data = new Array(chckRange(initial_size_204074, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_204074, 0, 2147483647);++i) {result_204076.data[i]={Field0: 0, Field1: null, Field2: 0};}	framePtr = F.prev;

	return result_204076;

}

function next_power_of_two_128066(x_128068) {
	var result_128069 = 0;

		result_128069 = (x_128068 - 1);
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 16));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 8));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 4));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 2));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 1));
		result_128069 += (1 + ((x_128068 <= 0) ? 1:0));

	return result_128069;

}

function raiseDivByZero() {
		var e_16095 = null;
		e_16095 = {m_type: NTI3844, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16095.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_16095.parent = null;
		raiseException(e_16095, "DivByZeroError");

	
}

function right_size_146861(count_146863) {
	var result_146864 = 0;

	var F={procname:"tables.rightSize",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 150;
		result_146864 = next_power_of_two_128066(addInt(divInt(mulInt(count_146863, 3), 2), 4));
	framePtr = F.prev;

	return result_146864;

}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function HEX21HEX26_143057(h_143059, val_143060) {
	var result_143061 = 0;

	var F={procname:"hashes.!&",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 52;
		result_143061 = ((h_143059 + val_143060) >>> 0);
		F.line = 53;
		result_143061 = ((result_143061 + (result_143061 << 10)) >>> 0);
		F.line = 54;
		result_143061 = (result_143061 ^ ((result_143061 >>> 0) >>> 6));
	framePtr = F.prev;

	return result_143061;

}

function HEX21HEX24_143111(h_143113) {
	var result_143114 = 0;

	var F={procname:"hashes.!$",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 59;
		result_143114 = ((h_143113 + (h_143113 << 3)) >>> 0);
		F.line = 60;
		result_143114 = (result_143114 ^ ((result_143114 >>> 0) >>> 11));
		F.line = 61;
		result_143114 = ((result_143114 + (result_143114 << 15)) >>> 0);
	framePtr = F.prev;

	return result_143114;

}

function hash_143900(x_143902) {
	var result_143903 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 132;
		var h_143904 = 0;
		L1: do {
			F.line = 133;
			var i_143916 = 0;
			F.line = 2104;
			var colontmp__143924 = 0;
			F.line = 133;
			colontmp__143924 = subInt((x_143902 != null ? x_143902.length : 0), 1);
			F.line = 2107;
			var res_143927 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_143927 <= colontmp__143924)) break L3;
						F.line = 2109;
						i_143916 = res_143927;
						F.line = 134;
						h_143904 = HEX21HEX26_143057(h_143904, x_143902[chckIndx(i_143916, 0, x_143902.length+0-1)-0]);
						F.line = 2110;
						res_143927 = addInt(res_143927, 1);
					}
			} while(false);
		} while(false);
		F.line = 135;
		result_143903 = HEX21HEX24_143111(h_143904);
	framePtr = F.prev;

	return result_143903;

}

function is_filled_146491(hcode_146493) {
	var result_146494 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_146494 = !((hcode_146493 == 0));
	framePtr = F.prev;

	return result_146494;

}

function next_try_146614(h_146616, max_hash_146617) {
	var result_146618 = 0;

	var F={procname:"tables.nextTry",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_146618 = (addInt(h_146616, 1) & max_hash_146617);
	framePtr = F.prev;

	return result_146618;

}

function raw_get_204430(t_204435, key_204437, hc_204439, hc_204439_Idx) {
						var Tmp3;

	var result_204440 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_204439[hc_204439_Idx] = hash_143900(key_204437);
		if ((hc_204439[hc_204439_Idx] == 0)) {
		F.line = 45;
		hc_204439[hc_204439_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_204452 = (hc_204439[hc_204439_Idx] & (t_204435.data != null ? (t_204435.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_204435.data[chckIndx(h_204452, 0, t_204435.data.length+0-1)-0].Field0)) break L2;
						if (!(t_204435.data[chckIndx(h_204452, 0, t_204435.data.length+0-1)-0].Field0 == hc_204439[hc_204439_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_204435.data[chckIndx(h_204452, 0, t_204435.data.length+0-1)-0].Field1, key_204437);						}					if (Tmp3) {
					F.line = 38;
					result_204440 = h_204452;
					break BeforeRet;
					}
					
					F.line = 39;
					h_204452 = next_try_146614(h_204452, (t_204435.data != null ? (t_204435.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_204440 = subInt(-1, h_204452);
	} while (false);
	framePtr = F.prev;

	return result_204440;

}

function must_rehash_146509(length_146511, counter_146512) {
	var result_146513 = false;

	var F={procname:"tables.mustRehash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		if (!((counter_146512 < length_146511))) {
		F.line = 24;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim(24, 9) `\x0Acounter < length` "));
		}
		
		F.line = 25;
		result_146513 = ((mulInt(length_146511, 2) < mulInt(counter_146512, 3)) || (subInt(length_146511, counter_146512) < 4));
	framePtr = F.prev;

	return result_146513;

}

function raw_insert_206902(t_206909, data_206913, data_206913_Idx, key_206915, val_206917, hc_206919, h_206921) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_206913[data_206913_Idx][chckIndx(h_206921, 0, data_206913[data_206913_Idx].length+0-1)-0].Field1 = nimCopy(null, key_206915, NTI138);
		F.line = 65;
		data_206913[data_206913_Idx][chckIndx(h_206921, 0, data_206913[data_206913_Idx].length+0-1)-0].Field2 = val_206917;
		F.line = 66;
		data_206913[data_206913_Idx][chckIndx(h_206921, 0, data_206913[data_206913_Idx].length+0-1)-0].Field0 = hc_206919;
	framePtr = F.prev;

	
}

function enlarge_205658(t_205665) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_205673 = null;
		F.line = 314;
		n_205673 = new Array(chckRange(mulInt((t_205665.data != null ? t_205665.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_205665.data != null ? t_205665.data.length : 0), 2), 0, 2147483647);++i) {n_205673[i]={Field0: 0, Field1: null, Field2: 0};}		F.line = 315;
		var Tmp1 = t_205665.data; t_205665.data = n_205673; n_205673 = Tmp1;		L2: do {
			F.line = 316;
			var i_205928 = 0;
			F.line = 2088;
			var colontmp__207643 = 0;
			F.line = 316;
			colontmp__207643 = (n_205673 != null ? (n_205673.length-1) : -1);
			F.line = 2094;
			var res_207646 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_207646 <= colontmp__207643)) break L4;
						F.line = 2096;
						i_205928 = res_207646;
						F.line = 317;
						var eh_206164 = n_205673[chckIndx(i_205928, 0, n_205673.length+0-1)-0].Field0;
						if (is_filled_146491(eh_206164)) {
						F.line = 319;
						var j_206173 = (eh_206164 & (t_205665.data != null ? (t_205665.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_205665.data[chckIndx(j_206173, 0, t_205665.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_206173 = next_try_146614(j_206173, (t_205665.data != null ? (t_205665.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_206902(t_205665, t_205665, "data", n_205673[chckIndx(i_205928, 0, n_205673.length+0-1)-0].Field1, n_205673[chckIndx(i_205928, 0, n_205673.length+0-1)-0].Field2, eh_206164, j_206173);
						}
						
						F.line = 2097;
						res_207646 = addInt(res_207646, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_207664(t_207669, key_207671, hc_207673) {
	var result_207674 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_207683 = (hc_207673 & (t_207669.data != null ? (t_207669.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_207669.data[chckIndx(h_207683, 0, t_207669.data.length+0-1)-0].Field0)) break L2;
					if (((t_207669.data[chckIndx(h_207683, 0, t_207669.data.length+0-1)-0].Field0 == hc_207673) && eqStrings(t_207669.data[chckIndx(h_207683, 0, t_207669.data.length+0-1)-0].Field1, key_207671))) {
					F.line = 38;
					result_207674 = h_207683;
					break BeforeRet;
					}
					
					F.line = 39;
					h_207683 = next_try_146614(h_207683, (t_207669.data != null ? (t_207669.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_207674 = subInt(-1, h_207683);
	} while (false);
	framePtr = F.prev;

	return result_207674;

}

function HEX5BHEX5DHEX3D_204416(t_204423, key_204425, val_204427) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_204428 = [0];
		F.line = 98;
		var index_205184 = raw_get_204430(t_204423, key_204425, hc_204428, 0);
		if ((0 <= index_205184)) {
		F.line = 99;
		t_204423.data[chckIndx(index_205184, 0, t_204423.data.length+0-1)-0].Field2 = val_204427;
		}
		else {
			if (must_rehash_146509((t_204423.data != null ? t_204423.data.length : 0), t_204423.counter)) {
			F.line = 90;
			enlarge_205658(t_204423);
			F.line = 91;
			index_205184 = raw_get_known_hc_207664(t_204423, key_204425, hc_204428[0]);
			}
			
			F.line = 92;
			index_205184 = subInt(-1, index_205184);
			F.line = 93;
			raw_insert_206902(t_204423, t_204423, "data", key_204425, val_204427, hc_204428[0], index_205184);
			F.line = 100;
			t_204423.counter = addInt(t_204423.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function to_table_204056(pairs_204063) {
	var result_204065 = [{data: null, counter: 0}];

	var F={procname:"toTable.toTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 358;
		nimCopy(result_204065[0], init_table_204069(right_size_146861(chckRange((pairs_204063 != null ? pairs_204063.length : 0), 0, 2147483647))), NTI203981);
		L1: do {
			F.line = 359;
			var key_204268 = null;
			F.line = 359;
			var val_204269 = 0;
			F.line = 2247;
			var i_208477 = 0;
			L2: do {
				F.line = 2248;
					L3: while (true) {
					if (!(i_208477 < (pairs_204063 != null ? pairs_204063.length : 0))) break L3;
						F.line = 2249;
						key_204268 = pairs_204063[chckIndx(i_208477, 0, pairs_204063.length+0-1)-0]["Field0"];
						F.line = 2249;
						val_204269 = pairs_204063[chckIndx(i_208477, 0, pairs_204063.length+0-1)-0]["Field1"];
						F.line = 359;
						HEX5BHEX5DHEX3D_204416(result_204065[0], key_204268, val_204269);
						F.line = 2250;
						i_208477 = addInt(i_208477, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_204065[0];

}

function new_table_203968(pairs_203975) {
	var result_203999 = null;

	var F={procname:"newTable.newTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 490;
		result_203999 = {data: null, counter: 0};
		F.line = 491;
		nimCopy(result_203999, to_table_204056(pairs_203975), NTI203981);
	framePtr = F.prev;

	return result_203999;

}
var str_token_map_208604 = new_table_203968([{Field0: makeNimstrLit("ENDMARKER"), Field1: 1}, {Field0: makeNimstrLit("NAME"), Field1: 2}, {Field0: makeNimstrLit("NUMBER"), Field1: 3}, {Field0: makeNimstrLit("STRING"), Field1: 4}, {Field0: makeNimstrLit("NEWLINE"), Field1: 5}, {Field0: makeNimstrLit("INDENT"), Field1: 6}, {Field0: makeNimstrLit("DEDENT"), Field1: 7}, {Field0: makeNimstrLit("("), Field1: 8}, {Field0: makeNimstrLit(")"), Field1: 9}, {Field0: makeNimstrLit("["), Field1: 10}, {Field0: makeNimstrLit("]"), Field1: 11}, {Field0: makeNimstrLit(":"), Field1: 12}, {Field0: makeNimstrLit(","), Field1: 13}, {Field0: makeNimstrLit(";"), Field1: 14}, {Field0: makeNimstrLit("+"), Field1: 15}, {Field0: makeNimstrLit("-"), Field1: 16}, {Field0: makeNimstrLit("*"), Field1: 17}, {Field0: makeNimstrLit("/"), Field1: 18}, {Field0: makeNimstrLit("|"), Field1: 19}, {Field0: makeNimstrLit("&"), Field1: 20}, {Field0: makeNimstrLit("<"), Field1: 21}, {Field0: makeNimstrLit(">"), Field1: 22}, {Field0: makeNimstrLit("="), Field1: 23}, {Field0: makeNimstrLit("."), Field1: 24}, {Field0: makeNimstrLit("%"), Field1: 25}, {Field0: makeNimstrLit("{"), Field1: 26}, {Field0: makeNimstrLit("}"), Field1: 27}, {Field0: makeNimstrLit("=="), Field1: 28}, {Field0: makeNimstrLit("!="), Field1: 29}, {Field0: makeNimstrLit("<="), Field1: 30}, {Field0: makeNimstrLit(">="), Field1: 31}, {Field0: makeNimstrLit("~"), Field1: 32}, {Field0: makeNimstrLit("^"), Field1: 33}, {Field0: makeNimstrLit("<<"), Field1: 34}, {Field0: makeNimstrLit(">>"), Field1: 35}, {Field0: makeNimstrLit("**"), Field1: 36}, {Field0: makeNimstrLit("+="), Field1: 37}, {Field0: makeNimstrLit("-="), Field1: 38}, {Field0: makeNimstrLit("*="), Field1: 39}, {Field0: makeNimstrLit("/="), Field1: 40}, {Field0: makeNimstrLit("%="), Field1: 41}, {Field0: makeNimstrLit("&="), Field1: 42}, {Field0: makeNimstrLit("|="), Field1: 43}, {Field0: makeNimstrLit("^="), Field1: 44}, {Field0: makeNimstrLit("<<="), Field1: 45}, {Field0: makeNimstrLit(">>="), Field1: 46}, {Field0: makeNimstrLit("**="), Field1: 47}, {Field0: makeNimstrLit("//"), Field1: 48}, {Field0: makeNimstrLit("//="), Field1: 49}, {Field0: makeNimstrLit("@"), Field1: 50}, {Field0: makeNimstrLit("@="), Field1: 51}, {Field0: makeNimstrLit("->"), Field1: 52}, {Field0: makeNimstrLit("..."), Field1: 53}, {Field0: makeNimstrLit("<>"), Field1: 54}, {Field0: makeNimstrLit("single_input"), Field1: 91}, {Field0: makeNimstrLit("file_input"), Field1: 92}, {Field0: makeNimstrLit("eval_input"), Field1: 93}, {Field0: makeNimstrLit("decorator"), Field1: 94}, {Field0: makeNimstrLit("decorators"), Field1: 95}, {Field0: makeNimstrLit("decorated"), Field1: 96}, {Field0: makeNimstrLit("async_funcdef"), Field1: 97}, {Field0: makeNimstrLit("funcdef"), Field1: 98}, {Field0: makeNimstrLit("parameters"), Field1: 99}, {Field0: makeNimstrLit("typedargslist"), Field1: 100}, {Field0: makeNimstrLit("tfpdef"), Field1: 101}, {Field0: makeNimstrLit("varargslist"), Field1: 102}, {Field0: makeNimstrLit("vfpdef"), Field1: 103}, {Field0: makeNimstrLit("stmt"), Field1: 104}, {Field0: makeNimstrLit("simple_stmt"), Field1: 105}, {Field0: makeNimstrLit("small_stmt"), Field1: 106}, {Field0: makeNimstrLit("expr_stmt"), Field1: 107}, {Field0: makeNimstrLit("annassign"), Field1: 108}, {Field0: makeNimstrLit("testlist_star_expr"), Field1: 109}, {Field0: makeNimstrLit("augassign"), Field1: 110}, {Field0: makeNimstrLit("del_stmt"), Field1: 111}, {Field0: makeNimstrLit("pass_stmt"), Field1: 112}, {Field0: makeNimstrLit("flow_stmt"), Field1: 113}, {Field0: makeNimstrLit("break_stmt"), Field1: 114}, {Field0: makeNimstrLit("continue_stmt"), Field1: 115}, {Field0: makeNimstrLit("return_stmt"), Field1: 116}, {Field0: makeNimstrLit("yield_stmt"), Field1: 117}, {Field0: makeNimstrLit("raise_stmt"), Field1: 118}, {Field0: makeNimstrLit("import_stmt"), Field1: 119}, {Field0: makeNimstrLit("import_name"), Field1: 120}, {Field0: makeNimstrLit("import_from"), Field1: 121}, {Field0: makeNimstrLit("import_as_name"), Field1: 122}, {Field0: makeNimstrLit("dotted_as_name"), Field1: 123}, {Field0: makeNimstrLit("import_as_names"), Field1: 124}, {Field0: makeNimstrLit("dotted_as_names"), Field1: 125}, {Field0: makeNimstrLit("dotted_name"), Field1: 126}, {Field0: makeNimstrLit("global_stmt"), Field1: 127}, {Field0: makeNimstrLit("nonlocal_stmt"), Field1: 128}, {Field0: makeNimstrLit("assert_stmt"), Field1: 129}, {Field0: makeNimstrLit("compound_stmt"), Field1: 130}, {Field0: makeNimstrLit("async_stmt"), Field1: 131}, {Field0: makeNimstrLit("if_stmt"), Field1: 132}, {Field0: makeNimstrLit("while_stmt"), Field1: 133}, {Field0: makeNimstrLit("for_stmt"), Field1: 134}, {Field0: makeNimstrLit("try_stmt"), Field1: 135}, {Field0: makeNimstrLit("with_stmt"), Field1: 136}, {Field0: makeNimstrLit("with_item"), Field1: 137}, {Field0: makeNimstrLit("except_clause"), Field1: 138}, {Field0: makeNimstrLit("suite"), Field1: 139}, {Field0: makeNimstrLit("test"), Field1: 140}, {Field0: makeNimstrLit("test_nocond"), Field1: 141}, {Field0: makeNimstrLit("lambdef"), Field1: 142}, {Field0: makeNimstrLit("lambdef_nocond"), Field1: 143}, {Field0: makeNimstrLit("or_test"), Field1: 144}, {Field0: makeNimstrLit("and_test"), Field1: 145}, {Field0: makeNimstrLit("not_test"), Field1: 146}, {Field0: makeNimstrLit("comparison"), Field1: 147}, {Field0: makeNimstrLit("comp_op"), Field1: 148}, {Field0: makeNimstrLit("star_expr"), Field1: 149}, {Field0: makeNimstrLit("expr"), Field1: 150}, {Field0: makeNimstrLit("xor_expr"), Field1: 151}, {Field0: makeNimstrLit("and_expr"), Field1: 152}, {Field0: makeNimstrLit("shift_expr"), Field1: 153}, {Field0: makeNimstrLit("arith_expr"), Field1: 154}, {Field0: makeNimstrLit("term"), Field1: 155}, {Field0: makeNimstrLit("factor"), Field1: 156}, {Field0: makeNimstrLit("power"), Field1: 157}, {Field0: makeNimstrLit("atom_expr"), Field1: 158}, {Field0: makeNimstrLit("atom"), Field1: 159}, {Field0: makeNimstrLit("testlist_comp"), Field1: 160}, {Field0: makeNimstrLit("trailer"), Field1: 161}, {Field0: makeNimstrLit("subscriptlist"), Field1: 162}, {Field0: makeNimstrLit("subscript"), Field1: 163}, {Field0: makeNimstrLit("sliceop"), Field1: 164}, {Field0: makeNimstrLit("exprlist"), Field1: 165}, {Field0: makeNimstrLit("testlist"), Field1: 166}, {Field0: makeNimstrLit("dictorsetmaker"), Field1: 167}, {Field0: makeNimstrLit("classdef"), Field1: 168}, {Field0: makeNimstrLit("arglist"), Field1: 169}, {Field0: makeNimstrLit("argument"), Field1: 170}, {Field0: makeNimstrLit("comp_iter"), Field1: 171}, {Field0: makeNimstrLit("sync_comp_for"), Field1: 172}, {Field0: makeNimstrLit("comp_for"), Field1: 173}, {Field0: makeNimstrLit("comp_if"), Field1: 174}, {Field0: makeNimstrLit("encoding_decl"), Field1: 175}, {Field0: makeNimstrLit("yield_expr"), Field1: 176}, {Field0: makeNimstrLit("yield_arg"), Field1: 177}, {Field0: makeNimstrLit("not"), Field1: 55}, {Field0: makeNimstrLit("if"), Field1: 56}, {Field0: makeNimstrLit("True"), Field1: 57}, {Field0: makeNimstrLit("break"), Field1: 58}, {Field0: makeNimstrLit("with"), Field1: 59}, {Field0: makeNimstrLit("and"), Field1: 60}, {Field0: makeNimstrLit("lambda"), Field1: 61}, {Field0: makeNimstrLit("is"), Field1: 62}, {Field0: makeNimstrLit("def"), Field1: 63}, {Field0: makeNimstrLit("from"), Field1: 64}, {Field0: makeNimstrLit("pass"), Field1: 65}, {Field0: makeNimstrLit("del"), Field1: 66}, {Field0: makeNimstrLit("False"), Field1: 67}, {Field0: makeNimstrLit("finally"), Field1: 68}, {Field0: makeNimstrLit("try"), Field1: 69}, {Field0: makeNimstrLit("assert"), Field1: 70}, {Field0: makeNimstrLit("async"), Field1: 71}, {Field0: makeNimstrLit("yield"), Field1: 72}, {Field0: makeNimstrLit("or"), Field1: 73}, {Field0: makeNimstrLit("in"), Field1: 74}, {Field0: makeNimstrLit("None"), Field1: 75}, {Field0: makeNimstrLit("for"), Field1: 76}, {Field0: makeNimstrLit("raise"), Field1: 77}, {Field0: makeNimstrLit("nonlocal"), Field1: 78}, {Field0: makeNimstrLit("else"), Field1: 79}, {Field0: makeNimstrLit("continue"), Field1: 80}, {Field0: makeNimstrLit("class"), Field1: 81}, {Field0: makeNimstrLit("except"), Field1: 82}, {Field0: makeNimstrLit("elif"), Field1: 83}, {Field0: makeNimstrLit("global"), Field1: 84}, {Field0: makeNimstrLit("return"), Field1: 85}, {Field0: makeNimstrLit("import"), Field1: 86}, {Field0: makeNimstrLit("while"), Field1: 87}, {Field0: makeNimstrLit("as"), Field1: 88}, {Field0: makeNimstrLit("await"), Field1: 89}]);

function init_table_212098(initial_size_212103) {
	var result_212124 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_212103))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_212124.counter = 0;
		F.line = 354;
		result_212124.data = new Array(chckRange(initial_size_212103, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_212103, 0, 2147483647);++i) {result_212124.data[i]={Field0: 0, Field1: 0, Field2: null};}	framePtr = F.prev;

	return result_212124;

}

function init_table_212230(initial_size_212235) {
	var result_212256 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_212235))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_212256.counter = 0;
		F.line = 354;
		result_212256.data = new Array(chckRange(initial_size_212235, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_212235, 0, 2147483647);++i) {result_212256.data[i]={Field0: 0, Field1: 0, Field2: {}};}	framePtr = F.prev;

	return result_212256;

}
var grammar_set_212224 = [init_table_212098(64)];
var first_set_212424 = [init_table_212230(64)];
var success_grammar_node_212501 = new_grammar_node_212465(makeNimstrLit("s"), []);

function nsuFindChar(s_136416, sub_136417, start_136418, last_136419) {
		var Tmp1;

	var result_136421 = 0;

	BeforeRet: do {
		if ((last_136419 == 0)) {
		Tmp1 = (s_136416 != null ? (s_136416.length-1) : -1);
		}
		else {
		Tmp1 = last_136419;
		}
		
		var last_136423 = Tmp1;
		L2: do {
			var i_136809 = 0;
			var colontmp__137013 = 0;
			colontmp__137013 = start_136418;
			var res_137016 = colontmp__137013;
			L3: do {
					L4: while (true) {
					if (!(res_137016 <= last_136423)) break L4;
						i_136809 = res_137016;
						if ((sub_136417 == s_136416[i_136809])) {
						result_136421 = i_136809;
						break BeforeRet;
						}
						
						res_137016 += 1;
					}
			} while(false);
		} while(false);
		result_136421 = -1;
		break BeforeRet;
	} while (false);

	return result_136421;

}

function quit_19421(errormsg_19423, errorcode_19424) {
	var F={procname:"system.quit",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3588;
		rawEcho(errormsg_19423);
		F.line = 3589;
		exit(errorcode_19424);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_48874(s_48879, x_48882) {
	var result_48883 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3657;
		var a_49001 = x_48882.a;
		F.line = 3658;
		var l_49201 = addInt(subInt(x_48882.b, a_49001), 1);
		F.line = 3659;
		result_48883 = nimCopy(null, mnewString(chckRange(l_49201, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 3660;
			var i_49211 = 0;
			F.line = 3617;
			var i_49223 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_49223 < l_49201)) break L3;
						F.line = 3619;
						i_49211 = i_49223;
						F.line = 3660;
						result_48883[chckIndx(i_49211, 0, result_48883.length+0-1)-0] = s_48879[chckIndx(addInt(i_49211, a_49001), 0, s_48879.length+0-1)-0];
						F.line = 3620;
						i_49223 = addInt(i_49223, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_48883;

}

function HEX2EHEX2E_48828(a_48833, b_48835) {
	var result_48837 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_48837.a = a_48833;
		F.line = 399;
		result_48837.b = b_48835;
	framePtr = F.prev;

	return result_48837;

}

function HEX5BHEX5D_213441(t_213448, key_213450) {
	var result_213452 = [null, 0];
	var result_213452_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_213454 = [0];
		F.line = 161;
		var index_213468 = raw_get_204430(t_213448, key_213450, hc_213454, 0);
		if ((0 <= index_213468)) {
		F.line = 162;
		result_213452 = t_213448.data[chckIndx(index_213468, 0, t_213448.data.length+0-1)-0]; result_213452_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_213807 = null;
			F.line = 2896;
			e_213807 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_213807.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(key_213450), NTI138);
			F.line = 2891;
			e_213807.parent = null;
			F.line = 165;
			raiseException(e_213807, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_213452, result_213452_Idx];

}

function HEX5BHEX5D_212903(t_212909, key_212911) {
	var result_212913 = [null, 0];
	var result_212913_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 432;
		var Tmp1 = HEX5BHEX5D_213441(t_212909, key_212911); result_212913 = Tmp1[0]; result_212913_Idx = Tmp1[1];
	framePtr = F.prev;

	return [result_212913, result_212913_Idx];

}

function skip_whitespace_37912(s_37914, start_37915) {
	var result_37917 = 0;

	var F={procname:"parseutils.skipWhitespace",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 156;
				L2: while (true) {
				if (!((addInt(start_37915, result_37917) < (s_37914 != null ? s_37914.length : 0)) && (ConstSet2[s_37914[chckIndx(addInt(start_37915, result_37917), 0, s_37914.length+0-1)-0]] != undefined))) break L2;
					F.line = 156;
					result_37917 = addInt(result_37917, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_37917;

}

function get_char_249532(grammar_249534) {
	var result_249535 = 0;

	var F={procname:"grammar.getChar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 339;
		grammar_249534.cursor = addInt(grammar_249534.cursor, skip_whitespace_37912(grammar_249534.grammarString, grammar_249534.cursor));
		F.line = 340;
		result_249535 = grammar_249534.grammarString[chckIndx(grammar_249534.cursor, 0, grammar_249534.grammarString.length+0-1)-0];
	framePtr = F.prev;

	return result_249535;

}

function HEX5BHEX5D_81105(s_81110, x_81113) {
	var result_81114 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3657;
		var a_81201 = x_81113.a;
		F.line = 3658;
		var l_81401 = addInt(subInt(subInt((s_81110 != null ? s_81110.length : 0), x_81113.b), a_81201), 1);
		F.line = 3659;
		result_81114 = nimCopy(null, mnewString(chckRange(l_81401, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 3660;
			var i_81411 = 0;
			F.line = 3617;
			var i_81423 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_81423 < l_81401)) break L3;
						F.line = 3619;
						i_81411 = i_81423;
						F.line = 3660;
						result_81114[chckIndx(i_81411, 0, result_81114.length+0-1)-0] = s_81110[chckIndx(addInt(i_81411, a_81201), 0, s_81110.length+0-1)-0];
						F.line = 3620;
						i_81423 = addInt(i_81423, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_81114;

}

function HEX2EHEX2E_81053(a_81058, b_81060) {
	var result_81068 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_81068.a = a_81058;
		F.line = 399;
		result_81068.b = b_81060;
	framePtr = F.prev;

	return result_81068;

}

function error_grammar_229447(grammar_229449) {
	var F={procname:"grammar.errorGrammar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 271;
		var s_229450 = nimCopy(null, grammar_229449.grammarString, NTI138);
		F.line = 272;
		var c_229451 = grammar_229449.cursor;
		F.line = 274;
		F.line = 274;
		var fmt_res_229455 = mnewString(0);
		F.line = 274;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(makeNimstrLit("invalid syntax for ")); } else { fmt_res_229455 = makeNimstrLit("invalid syntax for "); };
		F.line = 260;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(HEX5BHEX5D_48874(s_229450, HEX2EHEX2E_48828(0, subInt(c_229451, 1)))); } else { fmt_res_229455 = HEX5BHEX5D_48874(s_229450, HEX2EHEX2E_48828(0, subInt(c_229451, 1))).slice(); };
		F.line = 274;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(makeNimstrLit(" $$")); } else { fmt_res_229455 = makeNimstrLit(" $$"); };
		F.line = 268;
		if (fmt_res_229455 != null) { addChar(fmt_res_229455, s_229450[chckIndx(c_229451, 0, s_229450.length+0-1)-0]); } else { fmt_res_229455 = [s_229450[chckIndx(c_229451, 0, s_229450.length+0-1)-0]]; };
		F.line = 274;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(makeNimstrLit("$$ ")); } else { fmt_res_229455 = makeNimstrLit("$$ "); };
		F.line = 260;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(HEX5BHEX5D_81105(s_229450, HEX2EHEX2E_81053(addInt(c_229451, 1), 1))); } else { fmt_res_229455 = HEX5BHEX5D_81105(s_229450, HEX2EHEX2E_81053(addInt(c_229451, 1), 1)).slice(); };
		var msg_234443 = nimCopy(null, fmt_res_229455, NTI138);
		F.line = 2895;
		var e_234450 = null;
		F.line = 2896;
		e_234450 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 275;
		e_234450.message = nimCopy(null, msg_234443, NTI138);
		F.line = 2891;
		e_234450.parent = null;
		F.line = 275;
		raiseException(e_234450, "ValueError");
	framePtr = F.prev;

	
}

function match_c_212447(grammar_212449) {
	var result_250468 = null;

	var F={procname:"grammar.matchC",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 395;
		switch (get_char_249532(grammar_212449)) {
		case 91:
			F.line = 397;
			grammar_212449.cursor = addInt(grammar_212449.cursor, 1);
			break;
		default: 
			F.line = 399;
			error_grammar_229447(grammar_212449);
			break;
		}
		F.line = 400;
		result_250468 = match_f_212456(grammar_212449);
		F.line = 401;
		result_250468.repeat = 3;
		F.line = 402;
		switch (get_char_249532(grammar_212449)) {
		case 93:
			F.line = 404;
			grammar_212449.cursor = addInt(grammar_212449.cursor, 1);
			break;
		default: 
			F.line = 406;
			error_grammar_229447(grammar_212449);
			break;
		}
	framePtr = F.prev;

	return result_250468;

}

function match_d_212450(grammar_212452) {
	var result_250504 = null;

	var F={procname:"grammar.matchD",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 410;
		switch (get_char_249532(grammar_212452)) {
		case 40:
			F.line = 412;
			grammar_212452.cursor = addInt(grammar_212452.cursor, 1);
			break;
		default: 
			F.line = 414;
			error_grammar_229447(grammar_212452);
			break;
		}
		F.line = 415;
		result_250504 = match_f_212456(grammar_212452);
		F.line = 416;
		switch (get_char_249532(grammar_212452)) {
		case 41:
			F.line = 418;
			grammar_212452.cursor = addInt(grammar_212452.cursor, 1);
			break;
		default: 
			F.line = 420;
			error_grammar_229447(grammar_212452);
			break;
		}
	framePtr = F.prev;

	return result_250504;

}

function skip_until_38050(s_38052, until_38053, start_38054) {
					var Tmp3;

	var result_38056 = 0;

	var F={procname:"parseutils.skipUntil",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 182;
				L2: while (true) {
					if (!(addInt(start_38054, result_38056) < (s_38052 != null ? s_38052.length : 0))) Tmp3 = false; else {						Tmp3 = !((s_38052[chckIndx(addInt(result_38056, start_38054), 0, s_38052.length+0-1)-0] == until_38053));					}				if (!Tmp3) break L2;
					F.line = 182;
					result_38056 = addInt(result_38056, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_38056;

}

function init_212556(s_212562, initial_size_212564) {
	var F={procname:"init.init",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_212564))) {
		F.line = 400;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(400, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 401;
		s_212562.counter = 0;
		F.line = 402;
		s_212562.data = new Array(chckRange(initial_size_212564, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_212564, 0, 2147483647);++i) {s_212562.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_212530(initial_size_212534) {
	var result_212536 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 414;
		init_212556(result_212536[0], initial_size_212534);
	framePtr = F.prev;

	return result_212536[0];

}

function new_grammar_node_212465(name_212467, token_string_212468) {
			var Tmp1;

	var result_212519 = null;

	var F={procname:"grammar.newGrammarNode",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 93;
		result_212519 = {id: 0, father: null, repeat: 0, epsilonSet: {data: null, counter: 0}, kind: 0, token: 0, nextSet: {data: null, counter: 0}, children: null};
		F.line = 94;
		nimCopy(result_212519.epsilonSet, init_set_212530(64), NTI212034);
		F.line = 95;
		switch (name_212467[chckIndx(0, 0, name_212467.length+0-1)-0]) {
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 43:
		case 63:
		case 42:
			F.line = 97;
			result_212519.kind = name_212467[chckIndx(0, 0, name_212467.length+0-1)-0];
			break;
		case 97:
			F.line = 99;
			result_212519.kind = 97;
			F.line = 100;
			result_212519.token = (Tmp1 = HEX5BHEX5D_212903(str_token_map_208604, token_string_212468), Tmp1[0])[Tmp1[1]];
			F.line = 101;
			nimCopy(result_212519.nextSet, init_set_212530(64), NTI212034);
			break;
		case 115:
			F.line = 103;
			result_212519.kind = 115;
			F.line = 104;
			nimCopy(result_212519.nextSet, init_set_212530(64), NTI212034);
			break;
		default: 
			F.line = 2895;
			var e_214006 = null;
			F.line = 2896;
			e_214006 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 106;
			F.line = 106;
			var fmt_res_214016 = mnewString(0);
			F.line = 106;
			if (fmt_res_214016 != null) { fmt_res_214016 = (fmt_res_214016).concat(makeNimstrLit("unknown name: ")); } else { fmt_res_214016 = makeNimstrLit("unknown name: "); };
			F.line = 260;
			if (fmt_res_214016 != null) { fmt_res_214016 = (fmt_res_214016).concat(name_212467); } else { fmt_res_214016 = name_212467.slice(); };
			e_214006.message = nimCopy(null, fmt_res_214016, NTI138);
			F.line = 2891;
			e_214006.parent = null;
			F.line = 106;
			raiseException(e_214006, "ValueError");
			break;
		}
	framePtr = F.prev;

	return result_212519;

}

function skip_while_38080(s_38082, to_skip_38084, start_38085) {
	var result_38087 = 0;

	var F={procname:"parseutils.skipWhile",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 187;
				L2: while (true) {
				if (!((addInt(start_38085, result_38087) < (s_38082 != null ? s_38082.length : 0)) && (to_skip_38084[s_38082[chckIndx(addInt(result_38087, start_38085), 0, s_38082.length+0-1)-0]] != undefined))) break L2;
					F.line = 187;
					result_38087 = addInt(result_38087, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_38087;

}

function match_b_212444(grammar_212446) {
	var result_250258 = null;

	var F={procname:"grammar.matchB",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 375;
		switch (get_char_249532(grammar_212446)) {
		case 91:
			F.line = 377;
			result_250258 = match_c_212447(grammar_212446);
			break;
		case 40:
			F.line = 379;
			result_250258 = match_d_212450(grammar_212446);
			break;
		case 39:
			F.line = 381;
			grammar_212446.cursor = addInt(grammar_212446.cursor, 1);
			F.line = 382;
			var prev_250268 = grammar_212446.cursor;
			F.line = 383;
			grammar_212446.cursor = addInt(grammar_212446.cursor, skip_until_38050(grammar_212446.grammarString, 39, grammar_212446.cursor));
			F.line = 384;
			grammar_212446.cursor = addInt(grammar_212446.cursor, 1);
			F.line = 385;
			var substr_250329 = HEX5BHEX5D_48874(grammar_212446.grammarString, HEX2EHEX2E_48828(prev_250268, subInt(grammar_212446.cursor, 2)));
			F.line = 386;
			result_250258 = new_grammar_node_212465(makeNimstrLit("a"), substr_250329);
			break;
		default: 
			F.line = 388;
			var first_250330 = grammar_212446.cursor;
			F.line = 389;
			grammar_212446.cursor = addInt(grammar_212446.cursor, skip_while_38080(grammar_212446.grammarString, ConstSet3, grammar_212446.cursor));
			F.line = 390;
			var substr_250451 = HEX5BHEX5D_48874(grammar_212446.grammarString, HEX2EHEX2E_48828(first_250330, subInt(grammar_212446.cursor, 1)));
			F.line = 391;
			result_250258 = new_grammar_node_212465(makeNimstrLit("a"), substr_250451);
			break;
		}
	framePtr = F.prev;

	return result_250258;

}

function exhausted_249558(grammar_249560) {
	var result_249561 = false;

	var F={procname:"grammar.exhausted",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 344;
		result_249561 = (grammar_249560.cursor == (grammar_249560.grammarString != null ? grammar_249560.grammarString.length : 0));
	framePtr = F.prev;

	return result_249561;

}

function match_e_212453(grammar_212455) {
	var result_250539 = null;

	var F={procname:"grammar.matchE",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (exhausted_249558(grammar_212455)) {
		F.line = 425;
		break BeforeRet;
		}
		
		F.line = 426;
		switch (get_char_249532(grammar_212455)) {
		case 43:
			F.line = 428;
			result_250539 = new_grammar_node_212465(makeNimstrLit("+"), []);
			F.line = 429;
			grammar_212455.cursor = addInt(grammar_212455.cursor, 1);
			break;
		case 42:
			F.line = 432;
			result_250539 = new_grammar_node_212465(makeNimstrLit("*"), []);
			F.line = 433;
			grammar_212455.cursor = addInt(grammar_212455.cursor, 1);
			break;
		default: 
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_250539;

}

function match_h_212462(grammar_212464) {
	var result_251008 = null;

	var F={procname:"grammar.matchH",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (exhausted_249558(grammar_212464)) {
		F.line = 475;
		break BeforeRet;
		}
		
		F.line = 476;
		switch (get_char_249532(grammar_212464)) {
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 91:
		case 40:
		case 39:
		case 95:
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
			F.line = 478;
			result_251008 = match_a_212441(grammar_212464);
			break;
		default: 
			F.line = 480;
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_251008;

}

function add_child_234491(father_234493, child_234494) {
	var F={procname:"grammar.addChild",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 283;
		if (father_234493.children != null) { father_234493.children.push(child_234494); } else { father_234493.children = [child_234494]; };
		F.line = 284;
		child_234494.father = father_234493;
	framePtr = F.prev;

	
}

function is_grammar_terminator_212485(node_212487) {
		var Tmp1;

	var result_214033 = false;

	var F={procname:"grammar.isGrammarTerminator",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 111;
		if ((node_212487.kind == 97)) Tmp1 = true; else {			Tmp1 = (node_212487.kind == 115);		}		result_214033 = Tmp1;
	framePtr = F.prev;

	return result_214033;

}

function match_a_212441(grammar_212443) {
			var Tmp1;
			var Tmp2;

	var result_249578 = null;

	var F={procname:"grammar.matchA",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 349;
		var b_249579 = match_b_212444(grammar_212443);
		F.line = 350;
		var e_249580 = match_e_212453(grammar_212443);
		F.line = 351;
		var h_249581 = match_h_212462(grammar_212443);
		if (!((e_249580 == null))) {
		F.line = 353;
		switch (e_249580.kind) {
		case 43:
			if (!((b_249579.repeat == 0))) {
			F.line = 355;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(355, 14) `b.repeat == None` "));
			}
			
			F.line = 356;
			b_249579.repeat = 2;
			break;
		case 42:
			if (!((b_249579.repeat == 0))) {
			F.line = 358;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(358, 14) `b.repeat == None` "));
			}
			
			F.line = 359;
			b_249579.repeat = 1;
			break;
		default: 
			if (true) {
			F.line = 361;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(361, 14) `false` "));
			}
			
			break;
		}
		}
		
		if (!((h_249581 == null))) {
		F.line = 363;
		result_249578 = new_grammar_node_212465(makeNimstrLit("A"), []);
		F.line = 364;
		add_child_234491(result_249578, b_249579);
			if (!((h_249581.repeat == 0))) Tmp2 = true; else {				Tmp2 = (h_249581.kind == 70);			}			if (Tmp2) Tmp1 = true; else {				Tmp1 = is_grammar_terminator_212485(h_249581);			}		if (Tmp1) {
		F.line = 366;
		add_child_234491(result_249578, h_249581);
		}
		else {
			L3: do {
				F.line = 368;
				var child_250233 = null;
				F.line = 3909;
				var colontmp__250236 = null;
				F.line = 368;
				colontmp__250236 = h_249581.children;
				F.line = 3911;
				var i_250239 = 0;
				F.line = 3912;
				var l_250241 = (colontmp__250236 != null ? colontmp__250236.length : 0);
				L4: do {
					F.line = 3913;
						L5: while (true) {
						if (!(i_250239 < l_250241)) break L5;
							F.line = 3914;
							child_250233 = colontmp__250236[chckIndx(i_250239, 0, colontmp__250236.length+0-1)-0];
							F.line = 369;
							add_child_234491(result_249578, child_250233);
							F.line = 3915;
							i_250239 = addInt(i_250239, 1);
							if (!(((colontmp__250236 != null ? colontmp__250236.length : 0) == l_250241))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 371;
			result_249578 = b_249579;
		}
		
	framePtr = F.prev;

	return result_249578;

}

function concat_250859(seqs_250865) {
	var result_250867 = null;

	var F={procname:"concat.concat",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sequtils.nim",line:0};
	framePtr = F;
		F.line = 62;
		var l_250869 = 0;
		L1: do {
			F.line = 63;
			var seqitm_250908 = null;
			F.line = 2247;
			var i_250968 = 0;
			L2: do {
				F.line = 2248;
					L3: while (true) {
					if (!(i_250968 < (seqs_250865 != null ? seqs_250865.length : 0))) break L3;
						F.line = 2249;
						seqitm_250908 = seqs_250865[chckIndx(i_250968, 0, seqs_250865.length+0-1)-0];
						F.line = 63;
						l_250869 = addInt(l_250869, (seqitm_250908 != null ? seqitm_250908.length : 0));
						F.line = 2250;
						i_250968 = addInt(i_250968, 1);
					}
			} while(false);
		} while(false);
		F.line = 64;
		result_250867 = new Array(chckRange(l_250869, 0, 2147483647)); for (var i=0;i<chckRange(l_250869, 0, 2147483647);++i) {result_250867[i]=null;}		F.line = 65;
		var i_250936 = 0;
		L4: do {
			F.line = 66;
			var s_250944 = null;
			F.line = 2247;
			var i_250978 = 0;
			L5: do {
				F.line = 2248;
					L6: while (true) {
					if (!(i_250978 < (seqs_250865 != null ? seqs_250865.length : 0))) break L6;
						F.line = 2249;
						s_250944 = seqs_250865[chckIndx(i_250978, 0, seqs_250865.length+0-1)-0];
						L7: do {
							F.line = 67;
							var itm_250953 = null;
							F.line = 3911;
							var i_250973 = 0;
							F.line = 3912;
							var l_250975 = (s_250944 != null ? s_250944.length : 0);
							L8: do {
								F.line = 3913;
									L9: while (true) {
									if (!(i_250973 < l_250975)) break L9;
										F.line = 3914;
										itm_250953 = s_250944[chckIndx(i_250973, 0, s_250944.length+0-1)-0];
										F.line = 68;
										result_250867[chckIndx(i_250936, 0, result_250867.length+0-1)-0] = itm_250953;
										F.line = 69;
										i_250936 = addInt(i_250936, 1);
										F.line = 3915;
										i_250973 = addInt(i_250973, 1);
										if (!(((s_250944 != null ? s_250944.length : 0) == l_250975))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 2250;
						i_250978 = addInt(i_250978, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_250867;

}

function match_g_212459(grammar_212461) {
	var result_250824 = null;

	var F={procname:"grammar.matchG",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (exhausted_249558(grammar_212461)) {
		F.line = 460;
		break BeforeRet;
		}
		
		F.line = 461;
		switch (get_char_249532(grammar_212461)) {
		case 124:
			F.line = 463;
			result_250824 = new_grammar_node_212465(makeNimstrLit("G"), []);
			F.line = 464;
			grammar_212461.cursor = addInt(grammar_212461.cursor, 1);
			F.line = 465;
			add_child_234491(result_250824, match_a_212441(grammar_212461));
			F.line = 466;
			var g_250835 = match_g_212459(grammar_212461);
			if (!((g_250835 == null))) {
			F.line = 468;
			result_250824.children = nimCopy(null, concat_250859([result_250824.children, g_250835.children]), NTI250866);
			}
			
			break;
		default: 
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_250824;

}

function match_f_212456(grammar_212458) {
	var result_250574 = null;

	var F={procname:"grammar.matchF",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 439;
		var a_250575 = match_a_212441(grammar_212458);
		F.line = 440;
		var g_250576 = match_g_212459(grammar_212458);
		if (!((g_250576 == null))) {
		F.line = 442;
		result_250574 = new_grammar_node_212465(makeNimstrLit("F"), []);
		F.line = 443;
		add_child_234491(result_250574, a_250575);
		L1: do {
			F.line = 444;
			var child_250598 = null;
			F.line = 3909;
			var colontmp__250802 = null;
			F.line = 444;
			colontmp__250802 = g_250576.children;
			F.line = 3911;
			var i_250805 = 0;
			F.line = 3912;
			var l_250807 = (colontmp__250802 != null ? colontmp__250802.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_250805 < l_250807)) break L3;
						F.line = 3914;
						child_250598 = colontmp__250802[chckIndx(i_250805, 0, colontmp__250802.length+0-1)-0];
						F.line = 445;
						add_child_234491(result_250574, child_250598);
						F.line = 3915;
						i_250805 = addInt(i_250805, 1);
						if (!(((colontmp__250802 != null ? colontmp__250802.length : 0) == l_250807))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 447;
			switch (a_250575.kind) {
			case 97:
				F.line = 449;
				result_250574 = new_grammar_node_212465(makeNimstrLit("A"), []);
				F.line = 450;
				add_child_234491(result_250574, a_250575);
				break;
			case 65:
			case 70:
				F.line = 452;
				result_250574 = a_250575;
				break;
			default: 
				F.line = 454;
				rawEcho(nimCharToStr(a_250575.kind));
				if (true) {
				F.line = 455;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(455, 14) `false` "));
				}
				
				break;
			}
		}
		
	framePtr = F.prev;

	return result_250574;

}

function init_deque_220220(initial_size_220224) {
	var result_220240 = {data: null, head: 0, tail: 0, count: 0, mask: 0};

	var F={procname:"initDeque.initDeque",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_220224))) {
		F.line = 58;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim(58, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 59;
		result_220240.mask = subInt(initial_size_220224, 1);
		F.line = 60;
		result_220240.data = new Array(chckRange(initial_size_220224, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_220224, 0, 2147483647);++i) {result_220240.data[i]=null;}	framePtr = F.prev;

	return result_220240;

}

function new_seq_221003(len_221007) {
	var result_221009 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_221009 = new Array(len_221007); for (var i=0;i<len_221007;++i) {result_221009[i]=null;}	framePtr = F.prev;

	return result_221009;

}

function expand_if_needed_220468(deq_220474) {
	var F={procname:"expandIfNeeded.expandIfNeeded",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		F.line = 129;
		var cap_220475 = addInt(deq_220474.mask, 1);
		if ((cap_220475 <= deq_220474.count)) {
		F.line = 131;
		var n_221033 = new_seq_221003(chckRange(mulInt(cap_220475, 2), 0, 2147483647));
		L1: do {
			F.line = 132;
			var i_221081 = 0;
			F.line = 132;
			var x_221082 = null;
			F.line = 110;
			var colontmp__221088 = {data: null, head: 0, tail: 0, count: 0, mask: 0};
			F.line = 132;
			nimCopy(colontmp__221088, deq_220474, NTI220227);
			F.line = 112;
			var i_221092 = colontmp__221088.head;
			L2: do {
				F.line = 113;
				var c_221094 = 0;
				F.line = 3616;
				var colontmp__221096 = 0;
				F.line = 113;
				colontmp__221096 = colontmp__221088.count;
				F.line = 3617;
				var i_221098 = 0;
				L3: do {
					F.line = 3618;
						L4: while (true) {
						if (!(i_221098 < colontmp__221096)) break L4;
							F.line = 3619;
							c_221094 = i_221098;
							F.line = 114;
							i_221081 = c_221094;
							F.line = 114;
							x_221082 = colontmp__221088.data[chckIndx(i_221092, 0, colontmp__221088.data.length+0-1)-0];
							F.line = 133;
							n_221033[chckIndx(i_221081, 0, n_221033.length+0-1)-0] = x_221082;
							F.line = 115;
							i_221092 = (addInt(i_221092, 1) & colontmp__221088.mask);
							F.line = 3620;
							i_221098 = addInt(i_221098, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 134;
		deq_220474.data = n_221033;
		F.line = 135;
		deq_220474.mask = subInt(mulInt(cap_220475, 2), 1);
		F.line = 136;
		deq_220474.tail = deq_220474.count;
		F.line = 137;
		deq_220474.head = 0;
		}
		
	framePtr = F.prev;

	
}

function add_last_220442(deq_220448, item_220450) {
	var F={procname:"addLast.addLast",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		F.line = 148;
		expand_if_needed_220468(deq_220448);
		F.line = 149;
		deq_220448.count = addInt(deq_220448.count, 1);
		F.line = 150;
		deq_220448.data[chckIndx(deq_220448.tail, 0, deq_220448.data.length+0-1)-0] = item_220450;
		F.line = 151;
		deq_220448.tail = (addInt(deq_220448.tail, 1) & deq_220448.mask);
	framePtr = F.prev;

	
}

function len_221365(deq_221370) {
	var result_221371 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_221371 = deq_221370.count;
	framePtr = F.prev;

	return result_221371;

}

function pop_first_221403(deq_221409) {
	var result_221410 = null;

	var F={procname:"popFirst.popFirst",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		if ((deq_221409.count < 1)) {
		F.line = 2895;
		var e_222206 = null;
		F.line = 2896;
		e_222206 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 70;
		e_222206.message = nimCopy(null, makeNimstrLit("Empty deque."), NTI138);
		F.line = 2891;
		e_222206.parent = null;
		F.line = 70;
		raiseException(e_222206, "IndexError");
		}
		
		F.line = 169;
		deq_221409.count = subInt(deq_221409.count, 1);
		F.line = 170;
		result_221410 = deq_221409.data[chckIndx(deq_221409.head, 0, deq_221409.data.length+0-1)-0];
		F.line = 171;
deq_221409.data[chckIndx(deq_221409.head, 0, deq_221409.data.length+0-1)-0] = genericReset(deq_221409.data[chckIndx(deq_221409.head, 0, deq_221409.data.length+0-1)-0], NTI212017);
		F.line = 172;
		deq_221409.head = (addInt(deq_221409.head, 1) & deq_221409.mask);
	framePtr = F.prev;

	return result_221410;

}

function assign_id_212472(node_212474) {
	var F={procname:"grammar.assignId",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 162;
		var to_visit_220424 = [init_deque_220220(4)];
		F.line = 163;
		add_last_220442(to_visit_220424[0], node_212474);
		F.line = 164;
		var idx_221138 = 1;
		L1: do {
			F.line = 165;
				L2: while (true) {
				if (!(0 < len_221365(to_visit_220424[0]))) break L2;
					L3: do {
						F.line = 166;
						var node_222253 = pop_first_221403(to_visit_220424[0]);
						F.line = 167;
						node_222253.id = idx_221138;
						F.line = 168;
						idx_221138 = addInt(idx_221138, 1);
						if (is_grammar_terminator_212485(node_222253)) {
						F.line = 170;
						break L3;
						}
						
						L4: do {
							F.line = 171;
							var child_222273 = null;
							F.line = 3909;
							var colontmp__222304 = null;
							F.line = 171;
							colontmp__222304 = node_222253.children;
							F.line = 3911;
							var i_222307 = 0;
							F.line = 3912;
							var l_222309 = (colontmp__222304 != null ? colontmp__222304.length : 0);
							L5: do {
								F.line = 3913;
									L6: while (true) {
									if (!(i_222307 < l_222309)) break L6;
										F.line = 3914;
										child_222273 = colontmp__222304[chckIndx(i_222307, 0, colontmp__222304.length+0-1)-0];
										F.line = 172;
										add_last_220442(to_visit_220424[0], child_222273);
										F.line = 3915;
										i_222307 = addInt(i_222307, 1);
										if (!(((colontmp__222304 != null ? colontmp__222304.length : 0) == l_222309))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function pop_222358(s_222364, s_222364_Idx) {
	var result_222365 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_222373 = subInt((s_222364[s_222364_Idx] != null ? s_222364[s_222364_Idx].length : 0), 1);
		F.line = 2525;
		result_222365 = s_222364[s_222364_Idx][chckIndx(l_222373, 0, s_222364[s_222364_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_222364[s_222364_Idx].length < chckRange(l_222373, 0, 2147483647)) { for (var i=s_222364[s_222364_Idx].length;i<chckRange(l_222373, 0, 2147483647);++i) s_222364[s_222364_Idx].push(null); }
               else { s_222364[s_222364_Idx].length = chckRange(l_222373, 0, 2147483647); };
	framePtr = F.prev;

	return result_222365;

}

function is_valid_214572(s_214577) {
	var result_214578 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_214578 = (0 < (s_214577.data != null ? s_214577.data.length : 0));
	framePtr = F.prev;

	return result_214578;

}

function hash_143414(x_143416, x_143416_Idx) {
	var result_143417 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 85;
		      if (typeof x_143416 == "object") {
        if ("_NimID" in x_143416)
          result_143417 = x_143416["_NimID"];
        else {
          result_143417 = ++object_id_143246[0];
          x_143416["_NimID"] = result_143417;
        }
      }
    
	framePtr = F.prev;

	return result_143417;

}

function hash_212469(node_212471) {
	var result_234476 = 0;

	var F={procname:"grammar.hash",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 279;
		result_234476 = hash_143414(node_212471);
	framePtr = F.prev;

	return result_234476;

}

function is_filled_154282(hcode_154284) {
	var result_154285 = false;

	var F={procname:"sets.isFilled",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 63;
		result_154285 = !((hcode_154284 == 0));
	framePtr = F.prev;

	return result_154285;

}

function next_try_154431(h_154433, max_hash_154434) {
	var result_154435 = 0;

	var F={procname:"sets.nextTry",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 147;
		result_154435 = (addInt(h_154433, 1) & max_hash_154434);
	framePtr = F.prev;

	return result_154435;

}

function raw_get_215021(s_215026, key_215028, hc_215030, hc_215030_Idx) {
						var Tmp3;

	var result_215031 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_215035 = hash_212469(key_215028);
		if ((hc_215035 == 0)) {
		F.line = 164;
		hc_215035 = 314159265;
		}
		
		hc_215030[hc_215030_Idx] = hc_215035;
		F.line = 150;
		var h_215045 = (hc_215030[hc_215030_Idx] & (s_215026.data != null ? (s_215026.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_215026.data[chckIndx(h_215045, 0, s_215026.data.length+0-1)-0].Field0)) break L2;
						if (!(s_215026.data[chckIndx(h_215045, 0, s_215026.data.length+0-1)-0].Field0 == hc_215030[hc_215030_Idx])) Tmp3 = false; else {							Tmp3 = (s_215026.data[chckIndx(h_215045, 0, s_215026.data.length+0-1)-0].Field1 == key_215028);						}					if (Tmp3) {
					F.line = 157;
					result_215031 = h_215045;
					break BeforeRet;
					}
					
					F.line = 158;
					h_215045 = next_try_154431(h_215045, (s_215026.data != null ? (s_215026.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_215031 = subInt(-1, h_215045);
	} while (false);
	framePtr = F.prev;

	return result_215031;

}

function must_rehash_154361(length_154363, counter_154364) {
	var result_154365 = false;

	var F={procname:"sets.mustRehash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!((counter_154364 < length_154363))) {
		F.line = 134;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(134, 9) `\x0Acounter < length` "));
		}
		
		F.line = 135;
		result_154365 = ((mulInt(length_154363, 2) < mulInt(counter_154364, 3)) || (subInt(length_154363, counter_154364) < 4));
	framePtr = F.prev;

	return result_154365;

}

function raw_get_known_hc_217236(s_217241, key_217243, hc_217245) {
	var result_217246 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_217255 = (hc_217245 & (s_217241.data != null ? (s_217241.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_217241.data[chckIndx(h_217255, 0, s_217241.data.length+0-1)-0].Field0)) break L2;
					if (((s_217241.data[chckIndx(h_217255, 0, s_217241.data.length+0-1)-0].Field0 == hc_217245) && (s_217241.data[chckIndx(h_217255, 0, s_217241.data.length+0-1)-0].Field1 == key_217243))) {
					F.line = 157;
					result_217246 = h_217255;
					break BeforeRet;
					}
					
					F.line = 158;
					h_217255 = next_try_154431(h_217255, (s_217241.data != null ? (s_217241.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_217246 = subInt(-1, h_217255);
	} while (false);
	framePtr = F.prev;

	return result_217246;

}

function raw_insert_218645(s_218651, data_218655, data_218655_Idx, key_218657, hc_218659, h_218661) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 172;
		data_218655[data_218655_Idx][chckIndx(h_218661, 0, data_218655[data_218655_Idx].length+0-1)-0].Field1 = key_218657;
		F.line = 173;
		data_218655[data_218655_Idx][chckIndx(h_218661, 0, data_218655[data_218655_Idx].length+0-1)-0].Field0 = hc_218659;
	framePtr = F.prev;

	
}

function enlarge_216132(s_216138) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 225;
		var n_216143 = null;
		F.line = 226;
		n_216143 = new Array(chckRange(mulInt((s_216138.data != null ? s_216138.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_216138.data != null ? s_216138.data.length : 0), 2), 0, 2147483647);++i) {n_216143[i]={Field0: 0, Field1: null};}		F.line = 227;
		var Tmp1 = s_216138.data; s_216138.data = n_216143; n_216143 = Tmp1;		L2: do {
			F.line = 228;
			var i_216414 = 0;
			F.line = 2088;
			var colontmp__219211 = 0;
			F.line = 228;
			colontmp__219211 = (n_216143 != null ? (n_216143.length-1) : -1);
			F.line = 2094;
			var res_219214 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_219214 <= colontmp__219211)) break L4;
						F.line = 2096;
						i_216414 = res_219214;
						if (is_filled_154282(n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field0)) {
						F.line = 230;
						var j_218090 = subInt(-1, raw_get_known_hc_217236(s_216138, n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field1, n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field0));
						F.line = 231;
						raw_insert_218645(s_216138, s_216138, "data", n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field1, n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field0, j_218090);
						}
						
						F.line = 2097;
						res_219214 = addInt(res_219214, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_214544(s_214550, key_214552) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_214550))) {
		F.line = 265;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(265, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 234;
		var hc_215001 = [0];
		F.line = 235;
		var index_215881 = raw_get_215021(s_214550, key_214552, hc_215001, 0);
		if ((index_215881 < 0)) {
		if (must_rehash_154361((s_214550.data != null ? s_214550.data.length : 0), s_214550.counter)) {
		F.line = 238;
		enlarge_216132(s_214550);
		F.line = 239;
		index_215881 = raw_get_known_hc_217236(s_214550, key_214552, hc_215001[0]);
		}
		
		F.line = 240;
		raw_insert_218645(s_214550, s_214550, "data", key_214552, hc_215001[0], subInt(-1, index_215881));
		F.line = 241;
		s_214550.counter = addInt(s_214550.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function is_optional_212482(node_212484) {
		var Tmp1;

	var result_234522 = false;

	var F={procname:"grammar.isOptional",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 290;
		if ((node_212484.repeat == 1)) Tmp1 = true; else {			Tmp1 = (node_212484.repeat == 3);		}		result_234522 = Tmp1;
	framePtr = F.prev;

	return result_234522;

}

function incl_222782(s_222788, other_222791) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_222788))) {
		F.line = 279;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(279, 10) `isValid(s)` The set `s` needs to be initialized."));
		}
		
		if (!(is_valid_214572(other_222791))) {
		F.line = 280;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(280, 10) `isValid(other)` The set `other` needs to be initialized."));
		}
		
		L1: do {
			F.line = 281;
			var item_223976 = null;
			if (!(is_valid_214572(other_222791))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_224069 = 0;
				F.line = 2104;
				var colontmp__224071 = 0;
				F.line = 120;
				colontmp__224071 = (other_222791.data != null ? (other_222791.data.length-1) : -1);
				F.line = 2107;
				var res_224073 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_224073 <= colontmp__224071)) break L4;
							F.line = 2109;
							h_224069 = res_224073;
							if (is_filled_154282(other_222791.data[chckIndx(h_224069, 0, other_222791.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_223976 = other_222791.data[chckIndx(h_224069, 0, other_222791.data.length+0-1)-0].Field1;
							F.line = 281;
							incl_214544(s_222788, item_223976);
							}
							
							F.line = 2110;
							res_224073 = addInt(res_224073, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function find_219431(a_219436, item_219438) {
	var result_219439 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_219615 = null;
			F.line = 3911;
			var i_219639 = 0;
			F.line = 3912;
			var l_219641 = (a_219436 != null ? a_219436.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_219639 < l_219641)) break L3;
						F.line = 3914;
						i_219615 = a_219436[chckIndx(i_219639, 0, a_219436.length+0-1)-0];
						if ((i_219615 == item_219438)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_219439 = addInt(result_219439, 1);
						F.line = 3915;
						i_219639 = addInt(i_219639, 1);
						if (!(((a_219436 != null ? a_219436.length : 0) == l_219641))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_219439 = -1;
	} while (false);
	framePtr = F.prev;

	return result_219439;

}

function nsuJoinSep(a_136144, sep_136145) {
	var result_136146 = null;

		if ((0 < (a_136144 != null ? a_136144.length : 0))) {
		var l_136161 = ((sep_136145 != null ? sep_136145.length : 0) * ((a_136144 != null ? a_136144.length : 0) - 1));
		L1: do {
			var i_136180 = 0;
			var colontmp__136210 = 0;
			colontmp__136210 = (a_136144 != null ? (a_136144.length-1) : -1);
			var res_136213 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_136213 <= colontmp__136210)) break L3;
						i_136180 = res_136213;
						l_136161 += (a_136144[i_136180] != null ? a_136144[i_136180].length : 0);
						res_136213 += 1;
					}
			} while(false);
		} while(false);
		result_136146 = nimCopy(null, mnewString(0), NTI138);
		if (result_136146 != null) { result_136146 = (result_136146).concat(a_136144[0]); } else { result_136146 = a_136144[0].slice(); };
		L4: do {
			var i_136208 = 0;
			var colontmp__136218 = 0;
			colontmp__136218 = (a_136144 != null ? (a_136144.length-1) : -1);
			var res_136221 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_136221 <= colontmp__136218)) break L6;
						i_136208 = res_136221;
						if (result_136146 != null) { result_136146 = (result_136146).concat(sep_136145); } else { result_136146 = sep_136145.slice(); };
						if (result_136146 != null) { result_136146 = (result_136146).concat(a_136144[i_136208]); } else { result_136146 = a_136144[i_136208].slice(); };
						res_136221 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			result_136146 = nimCopy(null, [], NTI138);
		}
		

	return result_136146;

}

function new_seq_178023(len_178027) {
	var result_178029 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_178029 = new Array(len_178027); for (var i=0;i<len_178027;++i) {result_178029[i]=null;}	framePtr = F.prev;

	return result_178029;

}

function HEX2A_25022(x_25024, order_25025) {
	var result_25026 = 0;

	var F={procname:"algorithm.*",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 21;
		var y_25033 = subInt(order_25025, 1);
		F.line = 22;
		result_25026 = subInt((x_25024 ^ y_25033), y_25033);
	framePtr = F.prev;

	return result_25026;

}

function merge_241352(a_241358, b_241362, lo_241364, m_241366, hi_241368, cmp_241375, order_241377) {
	var F={procname:"merge.merge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((HEX2A_25022(cmp_241375(a_241358[chckIndx(m_241366, 0, a_241358.length+0-1)-0], a_241358[chckIndx(addInt(m_241366, 1), 0, a_241358.length+0-1)-0]), order_241377) <= 0)) {
		F.line = 197;
		break BeforeRet;
		}
		
		F.line = 198;
		var j_241378 = lo_241364;
		if (!((j_241378 <= m_241366))) {
		F.line = 200;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(200, 10) `j <= m` "));
		}
		
		F.line = 202;
		var bb_241602 = 0;
		L1: do {
			F.line = 203;
				L2: while (true) {
				if (!(j_241378 <= m_241366)) break L2;
					F.line = 204;
					b_241362[chckIndx(bb_241602, 0, b_241362.length+0-1)-0] = a_241358[chckIndx(j_241378, 0, a_241358.length+0-1)-0];
					F.line = 205;
					bb_241602 = addInt(bb_241602, 1);
					F.line = 206;
					j_241378 = addInt(j_241378, 1);
				}
		} while(false);
		F.line = 210;
		var i_241820 = 0;
		F.line = 211;
		var k_241821 = lo_241364;
		L3: do {
			F.line = 213;
				L4: while (true) {
				if (!((k_241821 < j_241378) && (j_241378 <= hi_241368))) break L4;
					if ((HEX2A_25022(cmp_241375(b_241362[chckIndx(i_241820, 0, b_241362.length+0-1)-0], a_241358[chckIndx(j_241378, 0, a_241358.length+0-1)-0]), order_241377) <= 0)) {
					F.line = 215;
					a_241358[chckIndx(k_241821, 0, a_241358.length+0-1)-0] = b_241362[chckIndx(i_241820, 0, b_241362.length+0-1)-0];
					F.line = 216;
					i_241820 = addInt(i_241820, 1);
					}
					else {
						F.line = 218;
						a_241358[chckIndx(k_241821, 0, a_241358.length+0-1)-0] = a_241358[chckIndx(j_241378, 0, a_241358.length+0-1)-0];
						F.line = 219;
						j_241378 = addInt(j_241378, 1);
					}
					
					F.line = 220;
					k_241821 = addInt(k_241821, 1);
				}
		} while(false);
		L5: do {
			F.line = 223;
				L6: while (true) {
				if (!(k_241821 < j_241378)) break L6;
					F.line = 224;
					a_241358[chckIndx(k_241821, 0, a_241358.length+0-1)-0] = b_241362[chckIndx(i_241820, 0, b_241362.length+0-1)-0];
					F.line = 225;
					k_241821 = addInt(k_241821, 1);
					F.line = 226;
					i_241820 = addInt(i_241820, 1);
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function sort_241310(a_241316, cmp_241323, order_241325) {
	var F={procname:"sort.sort",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 259;
		var n_241332 = (a_241316 != null ? a_241316.length : 0);
		F.line = 260;
		var b_241334 = null;
		F.line = 261;
		b_241334 = new Array(chckRange(divInt(n_241332, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_241332, 2), 0, 2147483647);++i) {b_241334[i]=null;}		F.line = 262;
		var s_241346 = 1;
		L1: do {
			F.line = 263;
				L2: while (true) {
				if (!(s_241346 < n_241332)) break L2;
					F.line = 264;
					var m_241347 = subInt(subInt(n_241332, 1), s_241346);
					L3: do {
						F.line = 265;
							L4: while (true) {
							if (!(0 <= m_241347)) break L4;
								F.line = 266;
								merge_241352(a_241316, b_241334, nimMax(addInt(subInt(m_241347, s_241346), 1), 0), m_241347, addInt(m_241347, s_241346), cmp_241323, order_241325);
								F.line = 267;
								m_241347 = subInt(m_241347, mulInt(s_241346, 2));
							}
					} while(false);
					F.line = 268;
					s_241346 = mulInt(s_241346, 2);
				}
		} while(false);
	framePtr = F.prev;

	
}

function sorted_241255(a_241260, cmp_241267, order_241269) {
	var result_241271 = null;

	var F={procname:"sorted.sorted",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 273;
		result_241271 = nimCopy(null, new_seq_178023(chckRange((a_241260 != null ? a_241260.length : 0), 0, 2147483647)), NTI178028);
		L1: do {
			F.line = 274;
			var i_241304 = 0;
			F.line = 2104;
			var colontmp__242660 = 0;
			F.line = 274;
			colontmp__242660 = (a_241260 != null ? (a_241260.length-1) : -1);
			F.line = 2107;
			var res_242663 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_242663 <= colontmp__242660)) break L3;
						F.line = 2109;
						i_241304 = res_242663;
						F.line = 275;
						result_241271[chckIndx(i_241304, 0, result_241271.length+0-1)-0] = nimCopy(null, a_241260[chckIndx(i_241304, 0, a_241260.length+0-1)-0], NTI138);
						F.line = 2110;
						res_242663 = addInt(res_242663, 1);
					}
			} while(false);
		} while(false);
		F.line = 276;
		sort_241310(result_241271, cmp_241267, order_241269);
	framePtr = F.prev;

	return result_241271;

}

function init_195538(s_195544, initial_size_195546) {
	var F={procname:"init.init",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_195546))) {
		F.line = 400;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(400, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 401;
		s_195544.counter = 0;
		F.line = 402;
		s_195544.data = new Array(chckRange(initial_size_195546, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_195546, 0, 2147483647);++i) {s_195544.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_195512(initial_size_195516) {
	var result_195518 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 414;
		init_195538(result_195518[0], initial_size_195516);
	framePtr = F.prev;

	return result_195518[0];

}

function is_valid_195940(s_195945) {
	var result_195946 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_195946 = (0 < (s_195945.data != null ? s_195945.data.length : 0));
	framePtr = F.prev;

	return result_195946;

}

function raw_get_196221(s_196226, key_196228, hc_196230, hc_196230_Idx) {
						var Tmp3;

	var result_196231 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_196237 = hash_143900(key_196228);
		if ((hc_196237 == 0)) {
		F.line = 164;
		hc_196237 = 314159265;
		}
		
		hc_196230[hc_196230_Idx] = hc_196237;
		F.line = 150;
		var h_196247 = (hc_196230[hc_196230_Idx] & (s_196226.data != null ? (s_196226.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_196226.data[chckIndx(h_196247, 0, s_196226.data.length+0-1)-0].Field0)) break L2;
						if (!(s_196226.data[chckIndx(h_196247, 0, s_196226.data.length+0-1)-0].Field0 == hc_196230[hc_196230_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(s_196226.data[chckIndx(h_196247, 0, s_196226.data.length+0-1)-0].Field1, key_196228);						}					if (Tmp3) {
					F.line = 157;
					result_196231 = h_196247;
					break BeforeRet;
					}
					
					F.line = 158;
					h_196247 = next_try_154431(h_196247, (s_196226.data != null ? (s_196226.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_196231 = subInt(-1, h_196247);
	} while (false);
	framePtr = F.prev;

	return result_196231;

}

function raw_get_known_hc_198206(s_198211, key_198213, hc_198215) {
	var result_198216 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_198225 = (hc_198215 & (s_198211.data != null ? (s_198211.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_198211.data[chckIndx(h_198225, 0, s_198211.data.length+0-1)-0].Field0)) break L2;
					if (((s_198211.data[chckIndx(h_198225, 0, s_198211.data.length+0-1)-0].Field0 == hc_198215) && eqStrings(s_198211.data[chckIndx(h_198225, 0, s_198211.data.length+0-1)-0].Field1, key_198213))) {
					F.line = 157;
					result_198216 = h_198225;
					break BeforeRet;
					}
					
					F.line = 158;
					h_198225 = next_try_154431(h_198225, (s_198211.data != null ? (s_198211.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_198216 = subInt(-1, h_198225);
	} while (false);
	framePtr = F.prev;

	return result_198216;

}

function raw_insert_199447(s_199453, data_199457, data_199457_Idx, key_199459, hc_199461, h_199463) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 172;
		data_199457[data_199457_Idx][chckIndx(h_199463, 0, data_199457[data_199457_Idx].length+0-1)-0].Field1 = nimCopy(null, key_199459, NTI138);
		F.line = 173;
		data_199457[data_199457_Idx][chckIndx(h_199463, 0, data_199457[data_199457_Idx].length+0-1)-0].Field0 = hc_199461;
	framePtr = F.prev;

	
}

function enlarge_197214(s_197220) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 225;
		var n_197225 = null;
		F.line = 226;
		n_197225 = new Array(chckRange(mulInt((s_197220.data != null ? s_197220.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_197220.data != null ? s_197220.data.length : 0), 2), 0, 2147483647);++i) {n_197225[i]={Field0: 0, Field1: null};}		F.line = 227;
		var Tmp1 = s_197220.data; s_197220.data = n_197225; n_197225 = Tmp1;		L2: do {
			F.line = 228;
			var i_197480 = 0;
			F.line = 2088;
			var colontmp__199949 = 0;
			F.line = 228;
			colontmp__199949 = (n_197225 != null ? (n_197225.length-1) : -1);
			F.line = 2094;
			var res_199952 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_199952 <= colontmp__199949)) break L4;
						F.line = 2096;
						i_197480 = res_199952;
						if (is_filled_154282(n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field0)) {
						F.line = 230;
						var j_198956 = subInt(-1, raw_get_known_hc_198206(s_197220, n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field1, n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field0));
						F.line = 231;
						raw_insert_199447(s_197220, s_197220, "data", n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field1, n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field0, j_198956);
						}
						
						F.line = 2097;
						res_199952 = addInt(res_199952, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_195912(s_195918, key_195920) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_195940(s_195918))) {
		F.line = 265;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(265, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 234;
		var hc_196201 = [0];
		F.line = 235;
		var index_196979 = raw_get_196221(s_195918, key_195920, hc_196201, 0);
		if ((index_196979 < 0)) {
		if (must_rehash_154361((s_195918.data != null ? s_195918.data.length : 0), s_195918.counter)) {
		F.line = 238;
		enlarge_197214(s_195918);
		F.line = 239;
		index_196979 = raw_get_known_hc_198206(s_195918, key_195920, hc_196201[0]);
		}
		
		F.line = 240;
		raw_insert_199447(s_195918, s_195918, "data", key_195920, hc_196201[0], subInt(-1, index_196979));
		F.line = 241;
		s_195918.counter = addInt(s_195918.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function map_241025(data_241031, op_241036) {
	var result_241038 = [{data: null, counter: 0}];

	var F={procname:"map.map",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 617;
		nimCopy(result_241038[0], init_set_195512(64), NTI195492);
		L1: do {
			F.line = 618;
			var item_241054 = null;
			if (!(is_valid_214572(data_241031))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_241148 = 0;
				F.line = 2104;
				var colontmp__241150 = 0;
				F.line = 120;
				colontmp__241150 = (data_241031.data != null ? (data_241031.data.length-1) : -1);
				F.line = 2107;
				var res_241152 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_241152 <= colontmp__241150)) break L4;
							F.line = 2109;
							h_241148 = res_241152;
							if (is_filled_154282(data_241031.data[chckIndx(h_241148, 0, data_241031.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_241054 = data_241031.data[chckIndx(h_241148, 0, data_241031.data.length+0-1)-0].Field1;
							F.line = 618;
							incl_195912(result_241038[0], op_241036(item_241054));
							}
							
							F.line = 2110;
							res_241152 = addInt(res_241152, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_241038[0];

}

function cmpStrings(a_16418, b_16419) {
		    if (a_16418 == b_16419) return 0;
    if (!a_16418) return -1;
    if (!b_16419) return 1;
    for (var i = 0; i < a_16418.length && i < b_16419.length; i++) {
      var result = a_16418[i] - b_16419[i];
      if (result != 0) return result;
    }
    return a_16418.length - b_16419.length;
  

	
}

function cmp_7058(x_7060, y_7061) {
	var result_16438 = 0;

	BeforeRet: do {
		result_16438 = cmpStrings(x_7060, y_7061);
		break BeforeRet;
	} while (false);

	return result_16438;

}

function is_undefined_18485(x_18489) {
	var result_18490 = false;

	var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 34;
		result_18490 = x_18489 === undefined;
	framePtr = F.prev;

	return result_18490;

}

function substr_eq_132789(s_132791, pos_132792, substr_132793) {
	var result_132794 = false;

	BeforeRet: do {
		var i_132796 = 0;
		var length_132797 = (substr_132793 != null ? substr_132793.length : 0);
		L1: do {
				L2: while (true) {
				if (!((i_132796 < length_132797) && (s_132791[(pos_132792 + i_132796)] == substr_132793[i_132796]))) break L2;
					i_132796 += 1;
				}
		} while(false);
		result_132794 = (i_132796 == length_132797);
		break BeforeRet;
	} while (false);

	return result_132794;

}

function substr_23422(s_23424, first_23425, last_23426) {
	var result_23427 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4263;
		var first_23428 = nimMax(first_23425, 0);
		F.line = 4264;
		var l_23430 = nimMax(addInt(subInt(nimMin(last_23426, (s_23424 != null ? (s_23424.length-1) : -1)), first_23428), 1), 0);
		F.line = 4265;
		result_23427 = nimCopy(null, mnewString(chckRange(l_23430, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4266;
			var i_23442 = 0;
			F.line = 2104;
			var colontmp__23444 = 0;
			F.line = 4266;
			colontmp__23444 = subInt(l_23430, 1);
			F.line = 2107;
			var res_23447 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_23447 <= colontmp__23444)) break L3;
						F.line = 2109;
						i_23442 = res_23447;
						F.line = 4267;
						result_23427[chckIndx(i_23442, 0, result_23427.length+0-1)-0] = s_23424[chckIndx(addInt(i_23442, first_23428), 0, s_23424.length+0-1)-0];
						F.line = 2110;
						res_23447 = addInt(res_23447, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_23427;

}

function HEX24_212438(grammar_node_212440) {

		function HEX3Aanonymous_234607(n_234609) {
			var result_234610 = null;

			var F={procname:"$.:anonymous",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
			framePtr = F;
				F.line = 308;
				result_234610 = nimCopy(null, cstrToNimstr((n_234609.id)+""), NTI138);
			framePtr = F.prev;

			return result_234610;

		}

	var result_234557 = null;

	var F={procname:"grammar.$",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((grammar_node_212440 == success_grammar_node_212501)) {
		F.line = 295;
		result_234557 = nimCopy(null, makeNimstrLit("$$SUCCESS_GRAMMAR_NODE$$"), NTI138);
		break BeforeRet;
		}
		
		F.line = 296;
		var string_seq_234569 = null;
		F.line = 297;
		F.line = 297;
		var fmt_res_234572 = mnewString(0);
		F.line = 297;
		if (fmt_res_234572 != null) { fmt_res_234572 = (fmt_res_234572).concat(makeNimstrLit("(")); } else { fmt_res_234572 = makeNimstrLit("("); };
		F.line = 270;
		if (fmt_res_234572 != null) { fmt_res_234572 = (fmt_res_234572).concat(cstrToNimstr((grammar_node_212440.id)+"")); } else { fmt_res_234572 = cstrToNimstr((grammar_node_212440.id)+"").slice(); };
		F.line = 297;
		if (fmt_res_234572 != null) { fmt_res_234572 = (fmt_res_234572).concat(makeNimstrLit(")")); } else { fmt_res_234572 = makeNimstrLit(")"); };
		var head_234601 = nimCopy(null, fmt_res_234572, NTI138);
		F.line = 298;
		var tail_234602 = null;
		F.line = 299;
		switch (grammar_node_212440.repeat) {
		case 0:
			break;
		case 1:
			F.line = 303;
			tail_234602 = nimCopy(null, makeNimstrLit("*"), NTI138);
			break;
		case 2:
			F.line = 305;
			tail_234602 = nimCopy(null, makeNimstrLit("+"), NTI138);
			break;
		case 3:
			F.line = 307;
			tail_234602 = nimCopy(null, makeNimstrLit("?"), NTI138);
			break;
		}
		F.line = 308;
		var map_proc_234624 = HEX3Aanonymous_234607;
		F.line = 309;
		switch (grammar_node_212440.kind) {
		case 97:
			F.line = 311;
			F.line = 532;
			var result_241191 = nimCopy(null, [], NTI241189);
			L1: do {
				F.line = 533;
				var x_241236 = null;
				F.line = 100;
				var colontmp__249453 = {data: null, counter: 0};
				F.line = 311;
				nimCopy(colontmp__249453, map_241025(grammar_node_212440.nextSet, map_proc_234624), NTI195492);
				if (!(is_valid_195940(colontmp__249453))) {
				F.line = 119;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
				}
				
				L2: do {
					F.line = 120;
					var h_249457 = 0;
					F.line = 2104;
					var colontmp__249459 = 0;
					F.line = 120;
					colontmp__249459 = (colontmp__249453.data != null ? (colontmp__249453.data.length-1) : -1);
					F.line = 2107;
					var res_249461 = 0;
					L3: do {
						F.line = 2108;
							L4: while (true) {
							if (!(res_249461 <= colontmp__249459)) break L4;
								F.line = 2109;
								h_249457 = res_249461;
								if (is_filled_154282(colontmp__249453.data[chckIndx(h_249457, 0, colontmp__249453.data.length+0-1)-0].Field0)) {
								F.line = 121;
								x_241236 = colontmp__249453.data[chckIndx(h_249457, 0, colontmp__249453.data.length+0-1)-0].Field1;
								F.line = 534;
								var Tmp5 = nimCopy(null, x_241236, NTI138);
								if (result_241191 != null) { result_241191.push(Tmp5); } else { result_241191 = [Tmp5]; };
								}
								
								F.line = 2110;
								res_249461 = addInt(res_249461, 1);
							}
					} while(false);
				} while(false);
			} while(false);
			var next_set_242680 = nsuJoinSep(sorted_241255(result_241191, cmp_7058, 1), makeNimstrLit(", "));
			F.line = 312;
			F.line = 312;
			var fmt_res_242683 = mnewString(0);
			F.line = 312;
			if (fmt_res_242683 != null) { fmt_res_242683 = (fmt_res_242683).concat(makeNimstrLit("<")); } else { fmt_res_242683 = makeNimstrLit("<"); };
			F.line = 260;
			if (fmt_res_242683 != null) { fmt_res_242683 = (fmt_res_242683).concat(next_set_242680); } else { fmt_res_242683 = next_set_242680.slice(); };
			F.line = 312;
			if (fmt_res_242683 != null) { fmt_res_242683 = (fmt_res_242683).concat(makeNimstrLit(">")); } else { fmt_res_242683 = makeNimstrLit(">"); };
			if (tail_234602 != null) { tail_234602 = (tail_234602).concat(fmt_res_242683); } else { tail_234602 = fmt_res_242683.slice(); };
			break;
		case 65:
		case 70:
			F.line = 314;
			F.line = 532;
			var result_249260 = nimCopy(null, [], NTI249258);
			L6: do {
				F.line = 533;
				var x_249304 = null;
				F.line = 100;
				var colontmp__249465 = {data: null, counter: 0};
				F.line = 314;
				nimCopy(colontmp__249465, map_241025(grammar_node_212440.epsilonSet, map_proc_234624), NTI195492);
				if (!(is_valid_195940(colontmp__249465))) {
				F.line = 119;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
				}
				
				L7: do {
					F.line = 120;
					var h_249469 = 0;
					F.line = 2104;
					var colontmp__249471 = 0;
					F.line = 120;
					colontmp__249471 = (colontmp__249465.data != null ? (colontmp__249465.data.length-1) : -1);
					F.line = 2107;
					var res_249473 = 0;
					L8: do {
						F.line = 2108;
							L9: while (true) {
							if (!(res_249473 <= colontmp__249471)) break L9;
								F.line = 2109;
								h_249469 = res_249473;
								if (is_filled_154282(colontmp__249465.data[chckIndx(h_249469, 0, colontmp__249465.data.length+0-1)-0].Field0)) {
								F.line = 121;
								x_249304 = colontmp__249465.data[chckIndx(h_249469, 0, colontmp__249465.data.length+0-1)-0].Field1;
								F.line = 534;
								var Tmp10 = nimCopy(null, x_249304, NTI138);
								if (result_249260 != null) { result_249260.push(Tmp10); } else { result_249260 = [Tmp10]; };
								}
								
								F.line = 2110;
								res_249473 = addInt(res_249473, 1);
							}
					} while(false);
				} while(false);
			} while(false);
			var epsilon_set_249339 = nsuJoinSep(sorted_241255(result_249260, cmp_7058, 1), makeNimstrLit(", "));
			F.line = 315;
			F.line = 315;
			var fmt_res_249342 = mnewString(0);
			F.line = 315;
			if (fmt_res_249342 != null) { fmt_res_249342 = (fmt_res_249342).concat(makeNimstrLit("<")); } else { fmt_res_249342 = makeNimstrLit("<"); };
			F.line = 260;
			if (fmt_res_249342 != null) { fmt_res_249342 = (fmt_res_249342).concat(epsilon_set_249339); } else { fmt_res_249342 = epsilon_set_249339.slice(); };
			F.line = 315;
			if (fmt_res_249342 != null) { fmt_res_249342 = (fmt_res_249342).concat(makeNimstrLit(">")); } else { fmt_res_249342 = makeNimstrLit(">"); };
			if (tail_234602 != null) { tail_234602 = (tail_234602).concat(fmt_res_249342); } else { tail_234602 = fmt_res_249342.slice(); };
			break;
		default: 
			break;
		}
		F.line = 318;
		var name_249401 = null;
		F.line = 319;
		switch (grammar_node_212440.kind) {
		case 97:
			F.line = 321;
			name_249401 = nimCopy(null, reprEnum(grammar_node_212440.token, NTI202995), NTI138);
			break;
		default: 
			F.line = 323;
			name_249401 = nimCopy(null, nimCharToStr(grammar_node_212440.kind), NTI138);
			break;
		}
		F.line = 324;
		if (string_seq_234569 != null) { string_seq_234569.push((head_234601).concat(name_249401,tail_234602)); } else { string_seq_234569 = [(head_234601).concat(name_249401,tail_234602)]; };
		if (!(is_grammar_terminator_212485(grammar_node_212440))) {
		L11: do {
			F.line = 326;
			var child_249429 = null;
			F.line = 3909;
			var colontmp__249488 = null;
			F.line = 326;
			colontmp__249488 = grammar_node_212440.children;
			F.line = 3911;
			var i_249491 = 0;
			F.line = 3912;
			var l_249493 = (colontmp__249488 != null ? colontmp__249488.length : 0);
			L12: do {
				F.line = 3913;
					L13: while (true) {
					if (!(i_249491 < l_249493)) break L13;
						F.line = 3914;
						child_249429 = colontmp__249488[chckIndx(i_249491, 0, colontmp__249488.length+0-1)-0];
						L14: do {
							if ((child_249429 == null)) {
							F.line = 328;
							break L14;
							}
							
							L15: do {
								F.line = 329;
								var substr_249441 = null;
								F.line = 597;
								var colontmp__249479 = null;
								F.line = 329;
								colontmp__249479 = HEX24_212438(child_249429);
								F.line = 455;
								var last_249483 = 0;
								F.line = 456;
								var splits_249485 = -1;
								L16: do {
									F.line = 614;
										L17: while (true) {
										if (!(last_249483 <= (colontmp__249479 != null ? colontmp__249479.length : 0))) break L17;
											F.line = 459;
											var first_249487 = last_249483;
											L18: do {
												F.line = 460;
													L19: while (true) {
													if (!((last_249483 < (colontmp__249479 != null ? colontmp__249479.length : 0)) && !(substr_eq_132789(colontmp__249479, last_249483, makeNimstrLit("\x0A"))))) break L19;
														F.line = 461;
														last_249483 = addInt(last_249483, 1);
													}
											} while(false);
											if ((splits_249485 == 0)) {
											F.line = 462;
											last_249483 = (colontmp__249479 != null ? colontmp__249479.length : 0);
											}
											
											F.line = 463;
											substr_249441 = substr_23422(colontmp__249479, first_249487, subInt(last_249483, 1));
											F.line = 330;
											if (string_seq_234569 != null) { string_seq_234569.push((makeNimstrLit("    ")).concat(substr_249441)); } else { string_seq_234569 = [(makeNimstrLit("    ")).concat(substr_249441)]; };
											if ((splits_249485 == 0)) {
											F.line = 464;
											break L16;
											}
											
											F.line = 465;
											splits_249485 = subInt(splits_249485, 1);
											F.line = 466;
											last_249483 = addInt(last_249483, 1);
										}
								} while(false);
							} while(false);
						} while(false);
						F.line = 3915;
						i_249491 = addInt(i_249491, 1);
						if (!(((colontmp__249488 != null ? colontmp__249488.length : 0) == l_249493))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 331;
		result_234557 = nimCopy(null, nsuJoinSep(string_seq_234569, makeNimstrLit("\x0A")), NTI138);
	} while (false);
	framePtr = F.prev;

	return result_234557;

}

function next_in_tree_212475(node_212477) {
							var Tmp3;
							var Tmp4;

	var result_214443 = [{data: null, counter: 0}];

	var F={procname:"grammar.nextInTree",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 134;
		nimCopy(result_214443[0], init_set_212530(64), NTI212034);
		F.line = 135;
		var cur_node_214452 = node_212477;
		L1: do {
			F.line = 136;
				L2: while (true) {
				if (!true) break L2;
					F.line = 137;
					var father_214453 = cur_node_214452.father;
					if ((father_214453 == null)) {
					F.line = 139;
					incl_214544(result_214443[0], success_grammar_node_212501);
					F.line = 140;
					break L1;
					}
					
					F.line = 141;
					switch (father_214453.kind) {
					case 70:
							if ((father_214453.repeat == 2)) Tmp3 = true; else {								Tmp3 = (father_214453.repeat == 1);							}						if (Tmp3) {
						F.line = 144;
						incl_214544(result_214443[0], father_214453);
						}
						
						F.line = 145;
						cur_node_214452 = father_214453;
						break;
					case 65:
						F.line = 147;
						var idx_219655 = find_219431(father_214453.children, cur_node_214452);
						if (!(!((idx_219655 == -1)))) {
						F.line = 148;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(148, 14) `\x0Anot (idx == -1)` "));
						}
						
						if ((idx_219655 == subInt((father_214453.children != null ? father_214453.children.length : 0), 1))) {
							if ((father_214453.repeat == 2)) Tmp4 = true; else {								Tmp4 = (father_214453.repeat == 1);							}						if (Tmp4) {
						F.line = 151;
						incl_214544(result_214443[0], father_214453);
						}
						
						F.line = 152;
						cur_node_214452 = father_214453;
						}
						else {
							F.line = 154;
							incl_214544(result_214443[0], father_214453.children[chckIndx(addInt(idx_219655, 1), 0, father_214453.children.length+0-1)-0]);
							F.line = 155;
							break L1;
						}
						
						break;
					default: 
						F.line = 157;
						rawEcho(HEX24_212438(cur_node_214452));
						F.line = 158;
						rawEcho(HEX24_212438(father_214453));
						if (true) {
						F.line = 159;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(159, 14) `false` "));
						}
						
						break;
					}
				}
		} while(false);
	framePtr = F.prev;

	return result_214443[0];

}

function contains_224741(s_224746, key_224748) {
	var result_224749 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_224746))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_224801 = [0];
		F.line = 217;
		var index_224832 = raw_get_215021(s_224746, key_224748, hc_224801, 0);
		F.line = 218;
		result_224749 = (0 <= index_224832);
	framePtr = F.prev;

	return result_224749;

}

function len_225101(s_225106) {
	var result_225107 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 91;
		result_225107 = s_225106.counter;
	framePtr = F.prev;

	return result_225107;

}

function is_empty_154265(hcode_154267) {
	var result_154268 = false;

	var F={procname:"sets.isEmpty",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 60;
		result_154268 = (hcode_154267 == 0);
	framePtr = F.prev;

	return result_154268;

}

function excl_impl_226628(s_226634, key_226636) {
									var Tmp5;
									var Tmp6;
									var Tmp7;
										var Tmp8;
										var Tmp9;

	var result_226637 = false;

	var F={procname:"exclImpl.exclImpl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(is_valid_214572(s_226634))) {
		F.line = 293;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(293, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 294;
		var hc_226801 = [0];
		F.line = 295;
		var i_226832 = raw_get_215021(s_226634, key_226636, hc_226801, 0);
		F.line = 296;
		var msk_226841 = (s_226634.data != null ? (s_226634.data.length-1) : -1);
		F.line = 297;
		result_226637 = true;
		if ((0 <= i_226832)) {
		F.line = 300;
		result_226637 = false;
		F.line = 301;
		s_226634.counter = subInt(s_226634.counter, 1);
		L1: do {
			F.line = 302;
				L2: while (true) {
				if (!true) break L2;
					F.line = 303;
					var j_226852 = i_226832;
					F.line = 304;
					var r_226853 = j_226852;
					F.line = 305;
					s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field0 = 0;
					F.line = 306;
					F.line = 289;
					var v_227661 = null;
					s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field1 = v_227661;
					L3: do {
						F.line = 307;
							L4: while (true) {
							if (!true) break L4;
								F.line = 308;
								i_226832 = (addInt(i_226832, 1) & msk_226841);
								if (is_empty_154265(s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field0)) {
								F.line = 310;
								break BeforeRet;
								}
								
								F.line = 311;
								r_226853 = (s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field0 & msk_226841);
									if (!(r_226853 <= i_226832)) Tmp7 = false; else {										Tmp7 = (j_226852 < r_226853);									}									if (Tmp7) Tmp6 = true; else {										if (!(j_226852 < r_226853)) Tmp8 = false; else {											Tmp8 = (i_226832 < j_226852);										}										Tmp6 = Tmp8;									}									if (Tmp6) Tmp5 = true; else {										if (!(i_226832 < j_226852)) Tmp9 = false; else {											Tmp9 = (r_226853 <= i_226832);										}										Tmp5 = Tmp9;									}								if (!(Tmp5)) {
								F.line = 286;
								break L3;
								}
								
							}
					} while(false);
					F.line = 312;
					nimCopy(s_226634.data[chckIndx(j_226852, 0, s_226634.data.length+0-1)-0], s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0], NTI212040);
				}
		} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	return result_226637;

}

function excl_226299(s_226305, other_226308) {
	var F={procname:"excl.excl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_226305))) {
		F.line = 350;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(350, 10) `isValid(s)` The set `s` needs to be initialized."));
		}
		
		if (!(is_valid_214572(other_226308))) {
		F.line = 351;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(351, 10) `isValid(other)` The set `other` needs to be initialized."));
		}
		
		L1: do {
			F.line = 352;
			var item_226608 = null;
			if (!(is_valid_214572(other_226308))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_228749 = 0;
				F.line = 2104;
				var colontmp__228751 = 0;
				F.line = 120;
				colontmp__228751 = (other_226308.data != null ? (other_226308.data.length-1) : -1);
				F.line = 2107;
				var res_228753 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_228753 <= colontmp__228751)) break L4;
							F.line = 2109;
							h_228749 = res_228753;
							if (is_filled_154282(other_226308.data[chckIndx(h_228749, 0, other_226308.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_226608 = other_226308.data[chckIndx(h_228749, 0, other_226308.data.length+0-1)-0].Field1;
							F.line = 352;
							excl_impl_226628(s_226305, item_226608);
							}
							
							F.line = 2110;
							res_228753 = addInt(res_228753, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function gen_epsilon_set_212491(root_212493) {
	var F={procname:"grammar.genEpsilonSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 176;
		var to_visit_222338 = [[root_212493]];
		F.line = 177;
		var all_node_222347 = [init_set_212530(64)];
		L1: do {
			F.line = 179;
				L2: while (true) {
				if (!(0 < (to_visit_222338[0] != null ? to_visit_222338[0].length : 0))) break L2;
					F.line = 180;
					var cur_node_222398 = pop_222358(to_visit_222338, 0);
					F.line = 181;
					incl_214544(all_node_222347[0], cur_node_222398);
					F.line = 182;
					switch (cur_node_222398.kind) {
					case 70:
						L3: do {
							F.line = 184;
							var child_222497 = null;
							F.line = 3909;
							var colontmp__228772 = null;
							F.line = 184;
							colontmp__228772 = cur_node_222398.children;
							F.line = 3911;
							var i_228775 = 0;
							F.line = 3912;
							var l_228777 = (colontmp__228772 != null ? colontmp__228772.length : 0);
							L4: do {
								F.line = 3913;
									L5: while (true) {
									if (!(i_228775 < l_228777)) break L5;
										F.line = 3914;
										child_222497 = colontmp__228772[chckIndx(i_228775, 0, colontmp__228772.length+0-1)-0];
										F.line = 185;
										incl_214544(cur_node_222398.epsilonSet, child_222497);
										F.line = 3915;
										i_228775 = addInt(i_228775, 1);
										if (!(((colontmp__228772 != null ? colontmp__228772.length : 0) == l_228777))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						break;
					case 65:
						F.line = 187;
						incl_214544(cur_node_222398.epsilonSet, cur_node_222398.children[chckIndx(0, 0, cur_node_222398.children.length+0-1)-0]);
						if (is_optional_212482(cur_node_222398)) {
						F.line = 189;
						incl_222782(cur_node_222398.epsilonSet, next_in_tree_212475(cur_node_222398));
						}
						
						L6: do {
							F.line = 190;
							var child_224099 = null;
							F.line = 3909;
							var colontmp__228779 = null;
							F.line = 190;
							colontmp__228779 = cur_node_222398.children;
							F.line = 3911;
							var i_228782 = 0;
							F.line = 3912;
							var l_228784 = (colontmp__228779 != null ? colontmp__228779.length : 0);
							L7: do {
								F.line = 3913;
									L8: while (true) {
									if (!(i_228782 < l_228784)) break L8;
										F.line = 3914;
										child_224099 = colontmp__228779[chckIndx(i_228782, 0, colontmp__228779.length+0-1)-0];
										if (is_optional_212482(child_224099)) {
										F.line = 192;
										incl_222782(child_224099.epsilonSet, next_in_tree_212475(child_224099));
										}
										
										F.line = 3915;
										i_228782 = addInt(i_228782, 1);
										if (!(((colontmp__228779 != null ? colontmp__228779.length : 0) == l_228784))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						break;
					case 97:
						break;
					default: 
						F.line = 196;
						rawEcho(nimCharToStr(cur_node_222398.kind));
						if (true) {
						F.line = 197;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(197, 14) `false` "));
						}
						
						break;
					}
					if (!(is_grammar_terminator_212485(cur_node_222398))) {
					L9: do {
						F.line = 199;
						var child_224411 = null;
						F.line = 3909;
						var colontmp__228786 = null;
						F.line = 199;
						colontmp__228786 = cur_node_222398.children;
						F.line = 3911;
						var i_228789 = 0;
						F.line = 3912;
						var l_228791 = (colontmp__228786 != null ? colontmp__228786.length : 0);
						L10: do {
							F.line = 3913;
								L11: while (true) {
								if (!(i_228789 < l_228791)) break L11;
									F.line = 3914;
									child_224411 = colontmp__228786[chckIndx(i_228789, 0, colontmp__228786.length+0-1)-0];
									F.line = 200;
									if (to_visit_222338[0] != null) { to_visit_222338[0].push(child_224411); } else { to_visit_222338[0] = [child_224411]; };
									F.line = 3915;
									i_228789 = addInt(i_228789, 1);
									if (!(((colontmp__228786 != null ? colontmp__228786.length : 0) == l_228791))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					
				}
		} while(false);
		F.line = 203;
		var collected_224430 = [init_set_212530(64)];
		F.line = 204;
		incl_214544(collected_224430[0], success_grammar_node_212501);
		L12: do {
			F.line = 205;
			var cur_node_224527 = null;
			if (!(is_valid_214572(all_node_222347[0]))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L13: do {
				F.line = 120;
				var h_228847 = 0;
				F.line = 2104;
				var colontmp__228849 = 0;
				F.line = 120;
				colontmp__228849 = (all_node_222347[0].data != null ? (all_node_222347[0].data.length-1) : -1);
				F.line = 2107;
				var res_228851 = 0;
				L14: do {
					F.line = 2108;
						L15: while (true) {
						if (!(res_228851 <= colontmp__228849)) break L15;
							F.line = 2109;
							h_228847 = res_228851;
							if (is_filled_154282(all_node_222347[0].data[chckIndx(h_228847, 0, all_node_222347[0].data.length+0-1)-0].Field0)) {
							F.line = 121;
							cur_node_224527 = all_node_222347[0].data[chckIndx(h_228847, 0, all_node_222347[0].data.length+0-1)-0].Field1;
							L16: do {
								if (!(contains_224741(collected_224430[0], cur_node_224527))) {
								F.line = 207;
								if (to_visit_222338[0] != null) { to_visit_222338[0].push(cur_node_224527); } else { to_visit_222338[0] = [cur_node_224527]; };
								}
								
								L17: do {
									F.line = 208;
										L18: while (true) {
										if (!(0 < (to_visit_222338[0] != null ? to_visit_222338[0].length : 0))) break L18;
											L19: do {
												F.line = 209;
												var cur_node_224875 = pop_222358(to_visit_222338, 0);
												if ((len_225101(cur_node_224875.epsilonSet) == 0)) {
												F.line = 211;
												incl_214544(collected_224430[0], cur_node_224875);
												F.line = 212;
												break L19;
												}
												
												F.line = 213;
												var all_children_collected_225210 = true;
												L20: do {
													F.line = 214;
													var child_225218 = null;
													F.line = 100;
													var colontmp__228797 = {data: null, counter: 0};
													F.line = 214;
													nimCopy(colontmp__228797, cur_node_224875.epsilonSet, NTI212034);
													if (!(is_valid_214572(colontmp__228797))) {
													F.line = 119;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
													}
													
													L21: do {
														F.line = 120;
														var h_228801 = 0;
														F.line = 2104;
														var colontmp__228803 = 0;
														F.line = 120;
														colontmp__228803 = (colontmp__228797.data != null ? (colontmp__228797.data.length-1) : -1);
														F.line = 2107;
														var res_228805 = 0;
														L22: do {
															F.line = 2108;
																L23: while (true) {
																if (!(res_228805 <= colontmp__228803)) break L23;
																	F.line = 2109;
																	h_228801 = res_228805;
																	if (is_filled_154282(colontmp__228797.data[chckIndx(h_228801, 0, colontmp__228797.data.length+0-1)-0].Field0)) {
																	F.line = 121;
																	child_225218 = colontmp__228797.data[chckIndx(h_228801, 0, colontmp__228797.data.length+0-1)-0].Field1;
																	if (!(contains_224741(collected_224430[0], child_225218))) {
																	F.line = 216;
																	all_children_collected_225210 = false;
																	F.line = 217;
																	break L20;
																	}
																	
																	}
																	
																	F.line = 2110;
																	res_228805 = addInt(res_228805, 1);
																}
														} while(false);
													} while(false);
												} while(false);
												if (all_children_collected_225210) {
												L24: do {
													F.line = 219;
													var child_225447 = null;
													F.line = 100;
													var colontmp__228809 = {data: null, counter: 0};
													F.line = 219;
													nimCopy(colontmp__228809, cur_node_224875.epsilonSet, NTI212034);
													if (!(is_valid_214572(colontmp__228809))) {
													F.line = 119;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
													}
													
													L25: do {
														F.line = 120;
														var h_228813 = 0;
														F.line = 2104;
														var colontmp__228815 = 0;
														F.line = 120;
														colontmp__228815 = (colontmp__228809.data != null ? (colontmp__228809.data.length-1) : -1);
														F.line = 2107;
														var res_228817 = 0;
														L26: do {
															F.line = 2108;
																L27: while (true) {
																if (!(res_228817 <= colontmp__228815)) break L27;
																	F.line = 2109;
																	h_228813 = res_228817;
																	if (is_filled_154282(colontmp__228809.data[chckIndx(h_228813, 0, colontmp__228809.data.length+0-1)-0].Field0)) {
																	F.line = 121;
																	child_225447 = colontmp__228809.data[chckIndx(h_228813, 0, colontmp__228809.data.length+0-1)-0].Field1;
																	F.line = 220;
																	incl_222782(cur_node_224875.epsilonSet, child_225447.epsilonSet);
																	}
																	
																	F.line = 2110;
																	res_228817 = addInt(res_228817, 1);
																}
														} while(false);
													} while(false);
												} while(false);
												F.line = 221;
												incl_214544(collected_224430[0], cur_node_224875);
												}
												else {
													F.line = 223;
													if (to_visit_222338[0] != null) { to_visit_222338[0].push(cur_node_224875); } else { to_visit_222338[0] = [cur_node_224875]; };
													L28: do {
														F.line = 224;
														var child_225668 = null;
														F.line = 100;
														var colontmp__228821 = {data: null, counter: 0};
														F.line = 224;
														nimCopy(colontmp__228821, cur_node_224875.epsilonSet, NTI212034);
														if (!(is_valid_214572(colontmp__228821))) {
														F.line = 119;
														failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
														}
														
														L29: do {
															F.line = 120;
															var h_228825 = 0;
															F.line = 2104;
															var colontmp__228827 = 0;
															F.line = 120;
															colontmp__228827 = (colontmp__228821.data != null ? (colontmp__228821.data.length-1) : -1);
															F.line = 2107;
															var res_228829 = 0;
															L30: do {
																F.line = 2108;
																	L31: while (true) {
																	if (!(res_228829 <= colontmp__228827)) break L31;
																		F.line = 2109;
																		h_228825 = res_228829;
																		if (is_filled_154282(colontmp__228821.data[chckIndx(h_228825, 0, colontmp__228821.data.length+0-1)-0].Field0)) {
																		F.line = 121;
																		child_225668 = colontmp__228821.data[chckIndx(h_228825, 0, colontmp__228821.data.length+0-1)-0].Field1;
																		if (!(contains_224741(collected_224430[0], child_225668))) {
																		F.line = 226;
																		if (to_visit_222338[0] != null) { to_visit_222338[0].push(child_225668); } else { to_visit_222338[0] = [child_225668]; };
																		}
																		
																		}
																		
																		F.line = 2110;
																		res_228829 = addInt(res_228829, 1);
																	}
															} while(false);
														} while(false);
													} while(false);
												}
												
											} while(false);
										}
								} while(false);
								if ((len_225101(cur_node_224527.epsilonSet) == 0)) {
								F.line = 230;
								break L16;
								}
								
								F.line = 231;
								var to_exclude_226139 = [init_set_212530(64)];
								L32: do {
									F.line = 232;
									var child_226147 = null;
									F.line = 100;
									var colontmp__228833 = {data: null, counter: 0};
									F.line = 232;
									nimCopy(colontmp__228833, cur_node_224527.epsilonSet, NTI212034);
									if (!(is_valid_214572(colontmp__228833))) {
									F.line = 119;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
									}
									
									L33: do {
										F.line = 120;
										var h_228837 = 0;
										F.line = 2104;
										var colontmp__228839 = 0;
										F.line = 120;
										colontmp__228839 = (colontmp__228833.data != null ? (colontmp__228833.data.length-1) : -1);
										F.line = 2107;
										var res_228841 = 0;
										L34: do {
											F.line = 2108;
												L35: while (true) {
												if (!(res_228841 <= colontmp__228839)) break L35;
													F.line = 2109;
													h_228837 = res_228841;
													if (is_filled_154282(colontmp__228833.data[chckIndx(h_228837, 0, colontmp__228833.data.length+0-1)-0].Field0)) {
													F.line = 121;
													child_226147 = colontmp__228833.data[chckIndx(h_228837, 0, colontmp__228833.data.length+0-1)-0].Field1;
													F.line = 233;
													switch (child_226147.kind) {
													case 65:
													case 70:
														F.line = 235;
														incl_214544(to_exclude_226139[0], child_226147);
														break;
													default: 
														break;
													}
													}
													
													F.line = 2110;
													res_228841 = addInt(res_228841, 1);
												}
										} while(false);
									} while(false);
								} while(false);
								F.line = 238;
								excl_226299(cur_node_224527.epsilonSet, to_exclude_226139[0]);
							} while(false);
							}
							
							F.line = 2110;
							res_228851 = addInt(res_228851, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function add_228920(x_228926, x_228926_Idx, y_228929) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1612;
		var xl_228937 = (x_228926[x_228926_Idx] != null ? x_228926[x_228926_Idx].length : 0);
		F.line = 1613;
		if (x_228926[x_228926_Idx].length < chckRange(addInt(xl_228937, (y_228929 != null ? y_228929.length : 0)), 0, 2147483647)) { for (var i=x_228926[x_228926_Idx].length;i<chckRange(addInt(xl_228937, (y_228929 != null ? y_228929.length : 0)), 0, 2147483647);++i) x_228926[x_228926_Idx].push(null); }
               else { x_228926[x_228926_Idx].length = chckRange(addInt(xl_228937, (y_228929 != null ? y_228929.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1614;
			var i_228972 = 0;
			F.line = 2104;
			var colontmp__228974 = 0;
			F.line = 1614;
			colontmp__228974 = (y_228929 != null ? (y_228929.length-1) : -1);
			F.line = 2107;
			var res_228977 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_228977 <= colontmp__228974)) break L3;
						F.line = 2109;
						i_228972 = res_228977;
						F.line = 1614;
						x_228926[x_228926_Idx][chckIndx(addInt(xl_228937, i_228972), 0, x_228926[x_228926_Idx].length+0-1)-0] = y_228929[chckIndx(i_228972, 0, y_228929.length+0-1)-0];
						F.line = 2110;
						res_228977 = addInt(res_228977, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function gen_next_set_212494(root_212496) {
							var Tmp7;

	var F={procname:"grammar.genNextSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 243;
		var to_visit_228871 = [null];
		if (!(is_grammar_terminator_212485(root_212496))) {
		L1: do {
			F.line = 23;
			var item_228886 = null;
			F.line = 3909;
			var colontmp__229402 = null;
			F.line = 247;
			colontmp__229402 = root_212496.children;
			F.line = 3911;
			var i_229405 = 0;
			F.line = 3912;
			var l_229407 = (colontmp__229402 != null ? colontmp__229402.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_229405 < l_229407)) break L3;
						F.line = 3914;
						item_228886 = colontmp__229402[chckIndx(i_229405, 0, colontmp__229402.length+0-1)-0];
						F.line = 24;
						if (to_visit_228871[0] != null) { to_visit_228871[0].push(item_228886); } else { to_visit_228871[0] = [item_228886]; };
						F.line = 3915;
						i_229405 = addInt(i_229405, 1);
						if (!(((colontmp__229402 != null ? colontmp__229402.length : 0) == l_229407))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		L4: do {
			F.line = 248;
				L5: while (true) {
				if (!(0 < (to_visit_228871[0] != null ? to_visit_228871[0].length : 0))) break L5;
					L6: do {
						F.line = 249;
						var cur_node_228915 = pop_222358(to_visit_228871, 0);
						if (!(is_grammar_terminator_212485(cur_node_228915))) {
						F.line = 251;
						add_228920(to_visit_228871, 0, cur_node_228915.children);
						F.line = 252;
						break L6;
						}
						
						F.line = 254;
						var next_nodes_228996 = [next_in_tree_212475(cur_node_228915)];
							if ((cur_node_228915.repeat == 2)) Tmp7 = true; else {								Tmp7 = (cur_node_228915.repeat == 1);							}						if (Tmp7) {
						F.line = 256;
						incl_214544(next_nodes_228996[0], cur_node_228915);
						}
						
						L8: do {
							F.line = 258;
							var next_node_229111 = null;
							if (!(is_valid_214572(next_nodes_228996[0]))) {
							F.line = 119;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
							}
							
							L9: do {
								F.line = 120;
								var h_229427 = 0;
								F.line = 2104;
								var colontmp__229429 = 0;
								F.line = 120;
								colontmp__229429 = (next_nodes_228996[0].data != null ? (next_nodes_228996[0].data.length-1) : -1);
								F.line = 2107;
								var res_229431 = 0;
								L10: do {
									F.line = 2108;
										L11: while (true) {
										if (!(res_229431 <= colontmp__229429)) break L11;
											F.line = 2109;
											h_229427 = res_229431;
											if (is_filled_154282(next_nodes_228996[0].data[chckIndx(h_229427, 0, next_nodes_228996[0].data.length+0-1)-0].Field0)) {
											F.line = 121;
											next_node_229111 = next_nodes_228996[0].data[chckIndx(h_229427, 0, next_nodes_228996[0].data.length+0-1)-0].Field1;
											L12: do {
												L13: do {
													F.line = 259;
													var epsilon_next_node_229119 = null;
													F.line = 100;
													var colontmp__229413 = {data: null, counter: 0};
													F.line = 259;
													nimCopy(colontmp__229413, next_node_229111.epsilonSet, NTI212034);
													if (!(is_valid_214572(colontmp__229413))) {
													F.line = 119;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
													}
													
													L14: do {
														F.line = 120;
														var h_229417 = 0;
														F.line = 2104;
														var colontmp__229419 = 0;
														F.line = 120;
														colontmp__229419 = (colontmp__229413.data != null ? (colontmp__229413.data.length-1) : -1);
														F.line = 2107;
														var res_229421 = 0;
														L15: do {
															F.line = 2108;
																L16: while (true) {
																if (!(res_229421 <= colontmp__229419)) break L16;
																	F.line = 2109;
																	h_229417 = res_229421;
																	if (is_filled_154282(colontmp__229413.data[chckIndx(h_229417, 0, colontmp__229413.data.length+0-1)-0].Field0)) {
																	F.line = 121;
																	epsilon_next_node_229119 = colontmp__229413.data[chckIndx(h_229417, 0, colontmp__229413.data.length+0-1)-0].Field1;
																	F.line = 260;
																	incl_214544(cur_node_228915.nextSet, epsilon_next_node_229119);
																	}
																	
																	F.line = 2110;
																	res_229421 = addInt(res_229421, 1);
																}
														} while(false);
													} while(false);
												} while(false);
												F.line = 261;
												switch (next_node_229111.kind) {
												case 65:
												case 70:
													F.line = 263;
													break L12;
													break;
												case 97:
												case 115:
													F.line = 265;
													incl_214544(cur_node_228915.nextSet, next_node_229111);
													break;
												default: 
													if (true) {
													F.line = 267;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(267, 16) `false` "));
													}
													
													break;
												}
											} while(false);
											}
											
											F.line = 2110;
											res_229431 = addInt(res_229431, 1);
										}
								} while(false);
							} while(false);
						} while(false);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function new_grammar_214047(name_214049, grammar_string_214050) {
		var Tmp1;

	var result_214051 = null;

	var F={procname:"grammar.newGrammar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 115;
		result_214051 = {token: 0, grammarString: null, rootNode: null, firstSet: {}, cursor: 0};
		F.line = 116;
		result_214051.token = (Tmp1 = HEX5BHEX5D_212903(str_token_map_208604, name_214049), Tmp1[0])[Tmp1[1]];
		F.line = 117;
		result_214051.grammarString = nimCopy(null, grammar_string_214050, NTI138);
		F.line = 118;
		result_214051.rootNode = match_f_212456(result_214051);
		if (!(!(is_grammar_terminator_212485(result_214051.rootNode)))) {
		F.line = 121;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(121, 3) `not isGrammarTerminator(result.rootNode)` "));
		}
		
		F.line = 122;
		result_214051.cursor = 0;
		F.line = 123;
		assign_id_212472(result_214051.rootNode);
		F.line = 124;
		gen_epsilon_set_212491(result_214051.rootNode);
		F.line = 125;
		gen_next_set_212494(result_214051.rootNode);
	framePtr = F.prev;

	return result_214051;

}

function raw_insert_253509(t_253516, data_253520, data_253520_Idx, key_253522, val_253524, hc_253526, h_253528) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_253520[data_253520_Idx][chckIndx(h_253528, 0, data_253520[data_253520_Idx].length+0-1)-0].Field1 = key_253522;
		F.line = 65;
		data_253520[data_253520_Idx][chckIndx(h_253528, 0, data_253520[data_253520_Idx].length+0-1)-0].Field2 = val_253524;
		F.line = 66;
		data_253520[data_253520_Idx][chckIndx(h_253528, 0, data_253520[data_253520_Idx].length+0-1)-0].Field0 = hc_253526;
	framePtr = F.prev;

	
}

function enlarge_252121(t_252128) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_252136 = null;
		F.line = 314;
		n_252136 = new Array(chckRange(mulInt((t_252128.data != null ? t_252128.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_252128.data != null ? t_252128.data.length : 0), 2), 0, 2147483647);++i) {n_252136[i]={Field0: 0, Field1: 0, Field2: null};}		F.line = 315;
		var Tmp1 = t_252128.data; t_252128.data = n_252136; n_252136 = Tmp1;		L2: do {
			F.line = 316;
			var i_252407 = 0;
			F.line = 2088;
			var colontmp__254346 = 0;
			F.line = 316;
			colontmp__254346 = (n_252136 != null ? (n_252136.length-1) : -1);
			F.line = 2094;
			var res_254349 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_254349 <= colontmp__254346)) break L4;
						F.line = 2096;
						i_252407 = res_254349;
						F.line = 317;
						var eh_252675 = n_252136[chckIndx(i_252407, 0, n_252136.length+0-1)-0].Field0;
						if (is_filled_146491(eh_252675)) {
						F.line = 319;
						var j_252684 = (eh_252675 & (t_252128.data != null ? (t_252128.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_252128.data[chckIndx(j_252684, 0, t_252128.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_252684 = next_try_146614(j_252684, (t_252128.data != null ? (t_252128.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_253509(t_252128, t_252128, "data", n_252136[chckIndx(i_252407, 0, n_252136.length+0-1)-0].Field1, n_252136[chckIndx(i_252407, 0, n_252136.length+0-1)-0].Field2, eh_252675, j_252684);
						}
						
						F.line = 2097;
						res_254349 = addInt(res_254349, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function hash_254380(x_254384) {
	var result_254385 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_254385 = x_254384;
	framePtr = F.prev;

	return result_254385;

}

function raw_get_deep_254368(t_254373, key_254375, hc_254377, hc_254377_Idx) {
	var result_254378 = 0;

	var F={procname:"rawGetDeep.rawGetDeep",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 43;
		hc_254377[hc_254377_Idx] = hash_254380(key_254375);
		if ((hc_254377[hc_254377_Idx] == 0)) {
		F.line = 45;
		hc_254377[hc_254377_Idx] = 314159265;
		}
		
		F.line = 58;
		var h_254414 = (hc_254377[hc_254377_Idx] & (t_254373.data != null ? (t_254373.data.length-1) : -1));
		L1: do {
			F.line = 59;
				L2: while (true) {
				if (!is_filled_146491(t_254373.data[chckIndx(h_254414, 0, t_254373.data.length+0-1)-0].Field0)) break L2;
					F.line = 60;
					h_254414 = next_try_146614(h_254414, (t_254373.data != null ? (t_254373.data.length-1) : -1));
				}
		} while(false);
		F.line = 61;
		result_254378 = h_254414;
	framePtr = F.prev;

	return result_254378;

}

function add_251856(t_251863, key_251865, val_251867) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (must_rehash_146509((t_251863.data != null ? t_251863.data.length : 0), t_251863.counter)) {
		F.line = 82;
		enlarge_252121(t_251863);
		}
		
		F.line = 83;
		var hc_254366 = [0];
		F.line = 84;
		var j_254705 = raw_get_deep_254368(t_251863, key_251865, hc_254366, 0);
		F.line = 85;
		raw_insert_253509(t_251863, t_251863, "data", key_251865, val_251867, hc_254366[0], j_254705);
		F.line = 340;
		t_251863.counter = addInt(t_251863.counter, 1);
	framePtr = F.prev;

	
}

function lex_grammar_251022() {
						var Tmp10;

	var F={procname:"grammar.lexGrammar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 484;
		var lines_251024 = nimCopy(null, grammar_lines_212094, NTI133824);
		F.line = 486;
		var line_idx_251026 = 0;
		L1: do {
			F.line = 487;
				L2: while (true) {
				if (!(line_idx_251026 < (lines_251024 != null ? lines_251024.length : 0))) break L2;
					L3: do {
						F.line = 488;
						var line_251034 = nimCopy(null, lines_251024[chckIndx(line_idx_251026, 0, lines_251024.length+0-1)-0], NTI138);
						if ((((line_251034 != null ? line_251034.length : 0) < 1) || (line_251034[chckIndx(0, 0, line_251034.length+0-1)-0] == 35))) {
						F.line = 490;
						line_idx_251026 = addInt(line_idx_251026, 1);
						F.line = 491;
						break L3;
						}
						
						F.line = 492;
						var colon_idx_251044 = nsuFindChar(line_251034, 58, 0, 0);
						if ((colon_idx_251044 == -1)) {
						F.line = 494;
						quit_19421(makeNimstrLit("Unknown syntax at {lineIdx}: {line}"), 1);
						}
						
						F.line = 495;
						var name_251252 = HEX5BHEX5D_48874(line_251034, HEX2EHEX2E_48828(0, subInt(colon_idx_251044, 1)));
						F.line = 498;
						var num_par_251254 = 0;
						F.line = 499;
						var num_bra_251256 = 0;
						F.line = 500;
						var start_col_idx_251257 = addInt(colon_idx_251044, 1);
						F.line = 501;
						var col_idx_251258 = start_col_idx_251257;
						F.line = 502;
						var grammar_string_251259 = [];
						if ((start_col_idx_251257 == (line_251034 != null ? line_251034.length : 0))) {
						F.line = 504;
						quit_19421(makeNimstrLit("Unknown syntax at {lineIdx}: {line}"), 1);
						}
						
						L4: do {
							F.line = 505;
								L5: while (true) {
								if (!true) break L5;
									L6: do {
										F.line = 506;
											L7: while (true) {
											if (!(col_idx_251258 < (line_251034 != null ? line_251034.length : 0))) break L7;
												F.line = 508;
												switch (line_251034[chckIndx(col_idx_251258, 0, line_251034.length+0-1)-0]) {
												case 40:
													F.line = 510;
													num_par_251254 = addInt(num_par_251254, 1);
													break;
												case 41:
													F.line = 512;
													num_par_251254 = subInt(num_par_251254, 1);
													break;
												case 91:
													F.line = 514;
													num_bra_251256 = addInt(num_bra_251256, 1);
													break;
												case 93:
													F.line = 516;
													num_bra_251256 = subInt(num_bra_251256, 1);
													break;
												default: 
													break;
												}
												F.line = 519;
												col_idx_251258 = addInt(col_idx_251258, 1);
											}
									} while(false);
									F.line = 520;
									if (grammar_string_251259 != null) { grammar_string_251259 = (grammar_string_251259).concat(HEX5BHEX5D_48874(line_251034, HEX2EHEX2E_48828(start_col_idx_251257, subInt(col_idx_251258, 1)))); } else { grammar_string_251259 = HEX5BHEX5D_48874(line_251034, HEX2EHEX2E_48828(start_col_idx_251257, subInt(col_idx_251258, 1))).slice(); };
									if (((num_par_251254 == 0) && (num_bra_251256 == 0))) {
									F.line = 522;
									break L4;
									}
									else {
										F.line = 524;
										line_idx_251026 = addInt(line_idx_251026, 1);
										F.line = 525;
										line_251034 = nimCopy(null, lines_251024[chckIndx(line_idx_251026, 0, lines_251024.length+0-1)-0], NTI138);
										F.line = 526;
										start_col_idx_251257 = 0;
										L8: do {
											F.line = 528;
												L9: while (true) {
												if (!(line_251034[chckIndx(start_col_idx_251257, 0, line_251034.length+0-1)-0] == 32)) break L9;
													F.line = 529;
													start_col_idx_251257 = addInt(start_col_idx_251257, 1);
												}
										} while(false);
										F.line = 531;
										start_col_idx_251257 = nimMax(subInt(start_col_idx_251257, 1), 0);
										F.line = 532;
										col_idx_251258 = start_col_idx_251257;
									}
									
								}
						} while(false);
						F.line = 533;
						line_idx_251026 = addInt(line_idx_251026, 1);
						F.line = 534;
						var grammar_251478 = new_grammar_214047(name_251252, grammar_string_251259);
						F.line = 535;
						add_251856(grammar_set_212224[0], (Tmp10 = HEX5BHEX5D_212903(str_token_map_208604, name_251252), Tmp10[0])[Tmp10[1]], grammar_251478);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_256594(t_256599, key_256601, hc_256603, hc_256603_Idx) {
						var Tmp3;

	var result_256604 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_256603[hc_256603_Idx] = hash_254380(key_256601);
		if ((hc_256603[hc_256603_Idx] == 0)) {
		F.line = 45;
		hc_256603[hc_256603_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_256620 = (hc_256603[hc_256603_Idx] & (t_256599.data != null ? (t_256599.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_256599.data[chckIndx(h_256620, 0, t_256599.data.length+0-1)-0].Field0)) break L2;
						if (!(t_256599.data[chckIndx(h_256620, 0, t_256599.data.length+0-1)-0].Field0 == hc_256603[hc_256603_Idx])) Tmp3 = false; else {							Tmp3 = (t_256599.data[chckIndx(h_256620, 0, t_256599.data.length+0-1)-0].Field1 == key_256601);						}					if (Tmp3) {
					F.line = 38;
					result_256604 = h_256620;
					break BeforeRet;
					}
					
					F.line = 39;
					h_256620 = next_try_146614(h_256620, (t_256599.data != null ? (t_256599.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_256604 = subInt(-1, h_256620);
	} while (false);
	framePtr = F.prev;

	return result_256604;

}

function has_key_256582(t_256588, key_256590) {
	var result_256591 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_256592 = [0];
		F.line = 264;
		result_256591 = (0 <= raw_get_256594(t_256588, key_256590, hc_256592, 0));
	framePtr = F.prev;

	return result_256591;

}

function is_terminator_203174(node_203176) {
	var result_203177 = false;

	var F={procname:"token.isTerminator",prev:framePtr,filename:"../Parser/token.nim",line:0};
	framePtr = F;
		F.line = 132;
		result_203177 = (node_203176 < 90);
	framePtr = F.prev;

	return result_203177;

}

function raw_get_255078(t_255083, key_255085, hc_255087, hc_255087_Idx) {
						var Tmp3;

	var result_255088 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_255087[hc_255087_Idx] = hash_254380(key_255085);
		if ((hc_255087[hc_255087_Idx] == 0)) {
		F.line = 45;
		hc_255087[hc_255087_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_255104 = (hc_255087[hc_255087_Idx] & (t_255083.data != null ? (t_255083.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_255083.data[chckIndx(h_255104, 0, t_255083.data.length+0-1)-0].Field0)) break L2;
						if (!(t_255083.data[chckIndx(h_255104, 0, t_255083.data.length+0-1)-0].Field0 == hc_255087[hc_255087_Idx])) Tmp3 = false; else {							Tmp3 = (t_255083.data[chckIndx(h_255104, 0, t_255083.data.length+0-1)-0].Field1 == key_255085);						}					if (Tmp3) {
					F.line = 38;
					result_255088 = h_255104;
					break BeforeRet;
					}
					
					F.line = 39;
					h_255104 = next_try_146614(h_255104, (t_255083.data != null ? (t_255083.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_255088 = subInt(-1, h_255104);
	} while (false);
	framePtr = F.prev;

	return result_255088;

}

function HEX5BHEX5D_255063(t_255070, key_255072) {
	var result_255074 = [null, 0];
	var result_255074_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_255076 = [0];
		F.line = 161;
		var index_255939 = raw_get_255078(t_255070, key_255072, hc_255076, 0);
		if ((0 <= index_255939)) {
		F.line = 162;
		result_255074 = t_255070.data[chckIndx(index_255939, 0, t_255070.data.length+0-1)-0]; result_255074_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_256412 = null;
			F.line = 2896;
			e_256412 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_256412.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(reprEnum(key_255072, NTI202995)), NTI138);
			F.line = 2891;
			e_256412.parent = null;
			F.line = 165;
			raiseException(e_256412, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_255074, result_255074_Idx];

}

function is_non_terminator_203200(node_203202) {
	var result_203203 = false;

	var F={procname:"token.isNonTerminator",prev:framePtr,filename:"../Parser/token.nim",line:0};
	framePtr = F;
		F.line = 135;
		result_203203 = (90 < node_203202);
	framePtr = F.prev;

	return result_203203;

}

function gen_first_set_254783(grammar_254785) {
			var Tmp1;
							var Tmp6;

	var F={procname:"grammar.genFirstSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((grammar_254785.rootNode.kind == 97)) {
		F.line = 540;
		var root_token_254787 = grammar_254785.rootNode.token;
		if (is_terminator_203174(root_token_254787)) {
		F.line = 542;
		grammar_254785.firstSet[grammar_254785.rootNode.token] = true;
		}
		else {
			F.line = 544;
			var g_256435 = (Tmp1 = HEX5BHEX5D_255063(grammar_set_212224[0], root_token_254787), Tmp1[0])[Tmp1[1]];
			if (!(has_key_256582(first_set_212424[0], root_token_254787))) {
			F.line = 546;
			gen_first_set_254783(g_256435);
			}
			
			F.line = 835;
			nimCopy(grammar_254785.firstSet, SetPlus(grammar_254785.firstSet, g_256435.firstSet), NTI257479);
		}
		
		F.line = 548;
		break BeforeRet;
		}
		
		L2: do {
			F.line = 549;
			var first_node_257487 = null;
			F.line = 100;
			var colontmp__257798 = {data: null, counter: 0};
			F.line = 549;
			nimCopy(colontmp__257798, grammar_254785.rootNode.epsilonSet, NTI212034);
			if (!(is_valid_214572(colontmp__257798))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L3: do {
				F.line = 120;
				var h_257802 = 0;
				F.line = 2104;
				var colontmp__257804 = 0;
				F.line = 120;
				colontmp__257804 = (colontmp__257798.data != null ? (colontmp__257798.data.length-1) : -1);
				F.line = 2107;
				var res_257806 = 0;
				L4: do {
					F.line = 2108;
						L5: while (true) {
						if (!(res_257806 <= colontmp__257804)) break L5;
							F.line = 2109;
							h_257802 = res_257806;
							if (is_filled_154282(colontmp__257798.data[chckIndx(h_257802, 0, colontmp__257798.data.length+0-1)-0].Field0)) {
							F.line = 121;
							first_node_257487 = colontmp__257798.data[chckIndx(h_257802, 0, colontmp__257798.data.length+0-1)-0].Field1;
							if (is_non_terminator_203200(first_node_257487.token)) {
							F.line = 551;
							var first_grammar_257766 = (Tmp6 = HEX5BHEX5D_255063(grammar_set_212224[0], first_node_257487.token), Tmp6[0])[Tmp6[1]];
							if ((SetCard(first_grammar_257766.firstSet) == 0)) {
							F.line = 553;
							gen_first_set_254783(first_grammar_257766);
							}
							
							F.line = 835;
							nimCopy(grammar_254785.firstSet, SetPlus(grammar_254785.firstSet, first_grammar_257766.firstSet), NTI257479);
							}
							else {
								F.line = 556;
							grammar_254785.firstSet[first_node_257487.token] = true;
							}
							
							}
							
							F.line = 2110;
							res_257806 = addInt(res_257806, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function gen_first_set_257822() {
	var F={procname:"grammar.genFirstSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 561;
			var grammar_258407 = null;
			L2: do {
				F.line = 288;
				var h_258568 = 0;
				F.line = 2104;
				var colontmp__258570 = 0;
				F.line = 288;
				colontmp__258570 = (grammar_set_212224[0].data != null ? (grammar_set_212224[0].data.length-1) : -1);
				F.line = 2107;
				var res_258572 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_258572 <= colontmp__258570)) break L4;
							F.line = 2109;
							h_258568 = res_258572;
							if (is_filled_146491(grammar_set_212224[0].data[chckIndx(h_258568, 0, grammar_set_212224[0].data.length+0-1)-0].Field0)) {
							F.line = 289;
							grammar_258407 = grammar_set_212224[0].data[chckIndx(h_258568, 0, grammar_set_212224[0].data.length+0-1)-0].Field2;
							L5: do {
								if (has_key_256582(first_set_212424[0], grammar_258407.token)) {
								F.line = 563;
								break L5;
								}
								
								F.line = 564;
								gen_first_set_254783(grammar_258407);
							} while(false);
							}
							
							F.line = 2110;
							res_258572 = addInt(res_258572, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}
lex_grammar_251022();
gen_first_set_257822();

function init_table_337165(initial_size_337170) {
	var result_337191 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_337170))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_337191.counter = 0;
		F.line = 354;
		result_337191.data = new Array(chckRange(initial_size_337170, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_337170, 0, 2147483647);++i) {result_337191.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_337191;

}
var source_files_337224 = [init_table_337165(64)];

function re_343862() {
	var result_343867 = {states: null, groupsCount: 0, namedGroups: {data: null, counter: 0}};

	var F={procname:"re.re",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2867;
		nimCopy(result_343867, {states: nimCopy(null, [{kind: 45, cp: 191, outA: -1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 2, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 3, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 95, Field1: 95}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 1}, ranges: nimCopy(null, [{a: 97, b: 122}, {a: 65, b: 90}], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 7, cp: 43, outA: 2, outB: 5, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 5, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 95, Field1: 95}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 1}, ranges: nimCopy(null, [{a: 97, b: 122}, {a: 65, b: 90}, {a: 48, b: 57}], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 6, cp: 42, outA: 4, outB: 6, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 0, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 44, cp: 191, outA: 1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}], NTI320469), groupsCount: 0, namedGroups: {data: nimCopy(null, [], NTI301989), counter: 0}}, NTI320460);
	framePtr = F.prev;

	return result_343867;

}

function re_343888() {
	var result_343893 = {states: null, groupsCount: 0, namedGroups: {data: null, counter: 0}};

	var F={procname:"re.re",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2867;
		nimCopy(result_343893, {states: nimCopy(null, [{kind: 45, cp: 191, outA: -1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 3, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 19, cp: 100, outA: 3, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 6, cp: 42, outA: 2, outB: 5, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 0, cp: 46, outA: 6, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 8, cp: 63, outA: 4, outB: 6, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 19, cp: 100, outA: 7, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 7, cp: 43, outA: 6, outB: 15, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 10, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 69, Field1: 69}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 101, Field1: 101}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 2}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 11, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 43, Field1: 43}, {Field0: 0, Field1: 0}, {Field0: 45, Field1: 45}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 2}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 8, cp: 63, outA: 9, outB: 11, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 19, cp: 100, outA: 12, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 7, cp: 43, outA: 11, outB: 14, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 3, cp: 40, outA: 8, outB: -1, isGreedy: false, idx: 0, isCapturing: true, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 4, cp: 41, outA: 16, outB: -1, isGreedy: false, idx: 0, isCapturing: true, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 8, cp: 63, outA: 13, outB: 16, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 0, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 44, cp: 191, outA: 1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}], NTI320469), groupsCount: 1, namedGroups: {data: nimCopy(null, [], NTI301989), counter: 0}}, NTI320460);
	framePtr = F.prev;

	return result_343893;

}
var regex_name_343885 = [re_343862()];
var regex_number_343908 = [re_343888()];

function new_353206() {
	var result_353211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_353401 = null;
		F.line = 211;
		r_353401 = {m_type: NTI353098, b: false, id: 0, pyType: null};
		F.line = 212;
		result_353211 = r_353401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_353211;

}

function new_py_bool_simple_353201() {
	var result_353203 = null;

	var F={procname:"boolobject.newPyBoolSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_353424 = new_353206();
		F.line = 561;
		obj_353424.pyType = py_bool_object_type_353104;
		F.line = 563;
		give_id_157814(obj_353424);
		result_353203 = obj_353424;
	framePtr = F.prev;

	return result_353203;

}

function new_py_bool_default_353821(args_353053) {
	var result_353824 = null;

	var F={procname:"boolobject.newPyBoolDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_353824 = new_py_bool_simple_353201();
	framePtr = F.prev;

	return result_353824;

}
var py_bool_object_type_353104 = new_py_type_159261(makeNimstrLit("Bool"));
py_bool_object_type_353104.kind = 6;
py_bool_object_type_353104.magicMethods.Field26 = new_py_bool_default_353821;

function new_py_bool_354057(b_354059) {
	var result_354060 = null;

	var F={procname:"boolobject.newPyBool",prev:framePtr,filename:"../Objects/boolobject.nim",line:0};
	framePtr = F;
		F.line = 7;
		result_354060 = new_py_bool_simple_353201();
		F.line = 8;
		result_354060.b = b_354059;
	framePtr = F.prev;

	return result_354060;

}
var py_true_obj_354074 = new_py_bool_354057(true);
var py_false_obj_354075 = new_py_bool_354057(false);

function new_355206() {
	var result_355211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_355401 = null;
		F.line = 211;
		r_355401 = {m_type: NTI355070, id: 0, pyType: null};
		F.line = 212;
		result_355211 = r_355401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_355211;

}

function new_py_none_simple_355201() {
	var result_355203 = null;

	var F={procname:"noneobject.newPyNoneSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_355424 = new_355206();
		F.line = 561;
		obj_355424.pyType = py_none_object_type_355074;
		F.line = 563;
		give_id_157814(obj_355424);
		result_355203 = obj_355424;
	framePtr = F.prev;

	return result_355203;

}

function new_py_none_default_355821(args_355025) {
	var result_355824 = null;

	var F={procname:"noneobject.newPyNoneDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_355824 = new_py_none_simple_355201();
	framePtr = F.prev;

	return result_355824;

}

function of_py_none_object_355076(obj_355015) {
	var result_355078 = false;

	var F={procname:"noneobject.ofPyNoneObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_355078 = (obj_355015.pyType.kind == 2);
	framePtr = F.prev;

	return result_355078;

}

function eq_py_none_object_magic_356046(self_no_cast_356048, other_356049) {
	var result_356050 = null;

	var F={procname:"noneobject.eqPyNoneObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_356048.m_type, NTI355070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNoneObject` "));
		}
		
		F.line = 438;
		var self_356201 = self_no_cast_356048;
		if (of_py_none_object_355076(other_356049)) {
		F.line = 11;
		result_356050 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 13;
			result_356050 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_356050;

}
var py_none_object_type_355074 = new_py_type_159261(makeNimstrLit("None"));
py_none_object_type_355074.kind = 2;
py_none_object_type_355074.magicMethods.Field26 = new_py_none_default_355821;
var py_none_356044 = new_py_none_simple_355201();
py_none_object_type_355074.magicMethods.Field18 = eq_py_none_object_magic_356046;

function new_357406() {
	var result_357411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_357601 = null;
		F.line = 211;
		r_357601 = {m_type: NTI357246, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_357411 = r_357601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_357411;

}

function new_py_base_error_simple_357401() {
	var result_357403 = null;

	var F={procname:"exceptions.newPyBaseErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_357624 = new_357406();
		F.line = 561;
		obj_357624.pyType = py_base_error_object_type_357262;
		F.line = 563;
		give_id_157814(obj_357624);
		result_357403 = obj_357624;
	framePtr = F.prev;

	return result_357403;

}

function new_py_base_error_default_358021(args_357201) {
	var result_358024 = null;

	var F={procname:"exceptions.newPyBaseErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_358024 = new_py_base_error_simple_357401();
	framePtr = F.prev;

	return result_358024;

}
var py_base_error_object_type_357262 = new_py_type_159261(makeNimstrLit("BaseError"));
py_base_error_object_type_357262.kind = 3;
py_base_error_object_type_357262.magicMethods.Field26 = new_py_base_error_default_358021;

function new_358606() {
	var result_358611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_358801 = null;
		F.line = 211;
		r_358801 = {m_type: NTI358415, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_358611 = r_358801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_358611;

}

function new_py_name_error_simple_358601() {
	var result_358603 = null;

	var F={procname:"exceptions.newPyNameErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_358824 = new_358606();
		F.line = 561;
		obj_358824.pyType = py_name_error_object_type_358419;
		F.line = 563;
		give_id_157814(obj_358824);
		result_358603 = obj_358824;
	framePtr = F.prev;

	return result_358603;

}

function new_py_name_error_default_359221(args_358370) {
	var result_359224 = null;

	var F={procname:"exceptions.newPyNameErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_359224 = new_py_name_error_simple_358601();
	framePtr = F.prev;

	return result_359224;

}

function new_359606() {
	var result_359611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_359801 = null;
		F.line = 211;
		r_359801 = {m_type: NTI359501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_359611 = r_359801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_359611;

}

function new_py_not_implemented_error_simple_359601() {
	var result_359603 = null;

	var F={procname:"exceptions.newPyNotImplementedErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_359824 = new_359606();
		F.line = 561;
		obj_359824.pyType = py_not_implemented_error_object_type_359505;
		F.line = 563;
		give_id_157814(obj_359824);
		result_359603 = obj_359824;
	framePtr = F.prev;

	return result_359603;

}

function new_py_not_implemented_error_default_360221(args_359456) {
	var result_360224 = null;

	var F={procname:"exceptions.newPyNotImplementedErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_360224 = new_py_not_implemented_error_simple_359601();
	framePtr = F.prev;

	return result_360224;

}

function new_360606() {
	var result_360611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_360801 = null;
		F.line = 211;
		r_360801 = {m_type: NTI360501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_360611 = r_360801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_360611;

}

function new_py_type_error_simple_360601() {
	var result_360603 = null;

	var F={procname:"exceptions.newPyTypeErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_360824 = new_360606();
		F.line = 561;
		obj_360824.pyType = py_type_error_object_type_360505;
		F.line = 563;
		give_id_157814(obj_360824);
		result_360603 = obj_360824;
	framePtr = F.prev;

	return result_360603;

}

function new_py_type_error_default_361221(args_360456) {
	var result_361224 = null;

	var F={procname:"exceptions.newPyTypeErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_361224 = new_py_type_error_simple_360601();
	framePtr = F.prev;

	return result_361224;

}

function new_361606() {
	var result_361611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_361801 = null;
		F.line = 211;
		r_361801 = {m_type: NTI361501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_361611 = r_361801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_361611;

}

function new_py_attribute_error_simple_361601() {
	var result_361603 = null;

	var F={procname:"exceptions.newPyAttributeErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_361824 = new_361606();
		F.line = 561;
		obj_361824.pyType = py_attribute_error_object_type_361505;
		F.line = 563;
		give_id_157814(obj_361824);
		result_361603 = obj_361824;
	framePtr = F.prev;

	return result_361603;

}

function new_py_attribute_error_default_362221(args_361456) {
	var result_362224 = null;

	var F={procname:"exceptions.newPyAttributeErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_362224 = new_py_attribute_error_simple_361601();
	framePtr = F.prev;

	return result_362224;

}

function new_362606() {
	var result_362611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_362801 = null;
		F.line = 211;
		r_362801 = {m_type: NTI362501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_362611 = r_362801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_362611;

}

function new_py_value_error_simple_362601() {
	var result_362603 = null;

	var F={procname:"exceptions.newPyValueErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_362824 = new_362606();
		F.line = 561;
		obj_362824.pyType = py_value_error_object_type_362505;
		F.line = 563;
		give_id_157814(obj_362824);
		result_362603 = obj_362824;
	framePtr = F.prev;

	return result_362603;

}

function new_py_value_error_default_363221(args_362456) {
	var result_363224 = null;

	var F={procname:"exceptions.newPyValueErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_363224 = new_py_value_error_simple_362601();
	framePtr = F.prev;

	return result_363224;

}

function new_363606() {
	var result_363611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_363801 = null;
		F.line = 211;
		r_363801 = {m_type: NTI363501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_363611 = r_363801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_363611;

}

function new_py_index_error_simple_363601() {
	var result_363603 = null;

	var F={procname:"exceptions.newPyIndexErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_363824 = new_363606();
		F.line = 561;
		obj_363824.pyType = py_index_error_object_type_363505;
		F.line = 563;
		give_id_157814(obj_363824);
		result_363603 = obj_363824;
	framePtr = F.prev;

	return result_363603;

}

function new_py_index_error_default_364221(args_363456) {
	var result_364224 = null;

	var F={procname:"exceptions.newPyIndexErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_364224 = new_py_index_error_simple_363601();
	framePtr = F.prev;

	return result_364224;

}

function new_364606() {
	var result_364611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_364801 = null;
		F.line = 211;
		r_364801 = {m_type: NTI364501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_364611 = r_364801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_364611;

}

function new_py_stop_iter_error_simple_364601() {
	var result_364603 = null;

	var F={procname:"exceptions.newPyStopIterErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_364824 = new_364606();
		F.line = 561;
		obj_364824.pyType = py_stop_iter_error_object_type_364505;
		F.line = 563;
		give_id_157814(obj_364824);
		result_364603 = obj_364824;
	framePtr = F.prev;

	return result_364603;

}

function new_py_stop_iter_error_default_365221(args_364456) {
	var result_365224 = null;

	var F={procname:"exceptions.newPyStopIterErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_365224 = new_py_stop_iter_error_simple_364601();
	framePtr = F.prev;

	return result_365224;

}

function new_365606() {
	var result_365611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_365801 = null;
		F.line = 211;
		r_365801 = {m_type: NTI365501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_365611 = r_365801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_365611;

}

function new_py_lock_error_simple_365601() {
	var result_365603 = null;

	var F={procname:"exceptions.newPyLockErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_365824 = new_365606();
		F.line = 561;
		obj_365824.pyType = py_lock_error_object_type_365505;
		F.line = 563;
		give_id_157814(obj_365824);
		result_365603 = obj_365824;
	framePtr = F.prev;

	return result_365603;

}

function new_py_lock_error_default_366221(args_365456) {
	var result_366224 = null;

	var F={procname:"exceptions.newPyLockErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_366224 = new_py_lock_error_simple_365601();
	framePtr = F.prev;

	return result_366224;

}

function new_366606() {
	var result_366611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_366801 = null;
		F.line = 211;
		r_366801 = {m_type: NTI366501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_366611 = r_366801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_366611;

}

function new_py_import_error_simple_366601() {
	var result_366603 = null;

	var F={procname:"exceptions.newPyImportErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_366824 = new_366606();
		F.line = 561;
		obj_366824.pyType = py_import_error_object_type_366505;
		F.line = 563;
		give_id_157814(obj_366824);
		result_366603 = obj_366824;
	framePtr = F.prev;

	return result_366603;

}

function new_py_import_error_default_367221(args_366456) {
	var result_367224 = null;

	var F={procname:"exceptions.newPyImportErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_367224 = new_py_import_error_simple_366601();
	framePtr = F.prev;

	return result_367224;

}

function new_367606() {
	var result_367611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_367801 = null;
		F.line = 211;
		r_367801 = {m_type: NTI367501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_367611 = r_367801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_367611;

}

function new_py_unbound_local_error_simple_367601() {
	var result_367603 = null;

	var F={procname:"exceptions.newPyUnboundLocalErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_367824 = new_367606();
		F.line = 561;
		obj_367824.pyType = py_unbound_local_error_object_type_367505;
		F.line = 563;
		give_id_157814(obj_367824);
		result_367603 = obj_367824;
	framePtr = F.prev;

	return result_367603;

}

function new_py_unbound_local_error_default_368221(args_367456) {
	var result_368224 = null;

	var F={procname:"exceptions.newPyUnboundLocalErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_368224 = new_py_unbound_local_error_simple_367601();
	framePtr = F.prev;

	return result_368224;

}

function new_368606() {
	var result_368611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_368801 = null;
		F.line = 211;
		r_368801 = {m_type: NTI368501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_368611 = r_368801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_368611;

}

function new_py_key_error_simple_368601() {
	var result_368603 = null;

	var F={procname:"exceptions.newPyKeyErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_368824 = new_368606();
		F.line = 561;
		obj_368824.pyType = py_key_error_object_type_368505;
		F.line = 563;
		give_id_157814(obj_368824);
		result_368603 = obj_368824;
	framePtr = F.prev;

	return result_368603;

}

function new_py_key_error_default_369221(args_368456) {
	var result_369224 = null;

	var F={procname:"exceptions.newPyKeyErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_369224 = new_py_key_error_simple_368601();
	framePtr = F.prev;

	return result_369224;

}

function new_369606() {
	var result_369611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_369801 = null;
		F.line = 211;
		r_369801 = {m_type: NTI369501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_369611 = r_369801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_369611;

}

function new_py_assertion_error_simple_369601() {
	var result_369603 = null;

	var F={procname:"exceptions.newPyAssertionErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_369824 = new_369606();
		F.line = 561;
		obj_369824.pyType = py_assertion_error_object_type_369505;
		F.line = 563;
		give_id_157814(obj_369824);
		result_369603 = obj_369824;
	framePtr = F.prev;

	return result_369603;

}

function new_py_assertion_error_default_370221(args_369456) {
	var result_370224 = null;

	var F={procname:"exceptions.newPyAssertionErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_370224 = new_py_assertion_error_simple_369601();
	framePtr = F.prev;

	return result_370224;

}

function new_370606() {
	var result_370611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_370801 = null;
		F.line = 211;
		r_370801 = {m_type: NTI370501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_370611 = r_370801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_370611;

}

function new_py_zero_division_error_simple_370601() {
	var result_370603 = null;

	var F={procname:"exceptions.newPyZeroDivisionErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_370824 = new_370606();
		F.line = 561;
		obj_370824.pyType = py_zero_division_error_object_type_370505;
		F.line = 563;
		give_id_157814(obj_370824);
		result_370603 = obj_370824;
	framePtr = F.prev;

	return result_370603;

}

function new_py_zero_division_error_default_371221(args_370456) {
	var result_371224 = null;

	var F={procname:"exceptions.newPyZeroDivisionErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_371224 = new_py_zero_division_error_simple_370601();
	framePtr = F.prev;

	return result_371224;

}

function new_371606() {
	var result_371611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_371801 = null;
		F.line = 211;
		r_371801 = {m_type: NTI371501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_371611 = r_371801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_371611;

}

function new_py_runtime_error_simple_371601() {
	var result_371603 = null;

	var F={procname:"exceptions.newPyRuntimeErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_371824 = new_371606();
		F.line = 561;
		obj_371824.pyType = py_runtime_error_object_type_371505;
		F.line = 563;
		give_id_157814(obj_371824);
		result_371603 = obj_371824;
	framePtr = F.prev;

	return result_371603;

}

function new_py_runtime_error_default_372221(args_371456) {
	var result_372224 = null;

	var F={procname:"exceptions.newPyRuntimeErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_372224 = new_py_runtime_error_simple_371601();
	framePtr = F.prev;

	return result_372224;

}

function new_372606() {
	var result_372611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_372801 = null;
		F.line = 211;
		r_372801 = {m_type: NTI372501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_372611 = r_372801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_372611;

}

function new_py_syntax_error_simple_372601() {
	var result_372603 = null;

	var F={procname:"exceptions.newPySyntaxErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_372824 = new_372606();
		F.line = 561;
		obj_372824.pyType = py_syntax_error_object_type_372505;
		F.line = 563;
		give_id_157814(obj_372824);
		result_372603 = obj_372824;
	framePtr = F.prev;

	return result_372603;

}

function new_py_syntax_error_default_373221(args_372456) {
	var result_373224 = null;

	var F={procname:"exceptions.newPySyntaxErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_373224 = new_py_syntax_error_simple_372601();
	framePtr = F.prev;

	return result_373224;

}

function new_373606() {
	var result_373611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_373801 = null;
		F.line = 211;
		r_373801 = {m_type: NTI373501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_373611 = r_373801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_373611;

}

function new_py_memory_error_simple_373601() {
	var result_373603 = null;

	var F={procname:"exceptions.newPyMemoryErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_373824 = new_373606();
		F.line = 561;
		obj_373824.pyType = py_memory_error_object_type_373505;
		F.line = 563;
		give_id_157814(obj_373824);
		result_373603 = obj_373824;
	framePtr = F.prev;

	return result_373603;

}

function new_py_memory_error_default_374221(args_373456) {
	var result_374224 = null;

	var F={procname:"exceptions.newPyMemoryErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_374224 = new_py_memory_error_simple_373601();
	framePtr = F.prev;

	return result_374224;

}

function new_374606() {
	var result_374611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_374801 = null;
		F.line = 211;
		r_374801 = {m_type: NTI374501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_374611 = r_374801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_374611;

}

function new_py_keyboard_interrupt_error_simple_374601() {
	var result_374603 = null;

	var F={procname:"exceptions.newPyKeyboardInterruptErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_374824 = new_374606();
		F.line = 561;
		obj_374824.pyType = py_keyboard_interrupt_error_object_type_374505;
		F.line = 563;
		give_id_157814(obj_374824);
		result_374603 = obj_374824;
	framePtr = F.prev;

	return result_374603;

}

function new_py_keyboard_interrupt_error_default_375221(args_374456) {
	var result_375224 = null;

	var F={procname:"exceptions.newPyKeyboardInterruptErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_375224 = new_py_keyboard_interrupt_error_simple_374601();
	framePtr = F.prev;

	return result_375224;

}
var py_name_error_object_type_358419 = new_py_type_159261(makeNimstrLit("NameError"));
py_name_error_object_type_358419.magicMethods.Field26 = new_py_name_error_default_359221;
py_name_error_object_type_358419.kind = 3;
py_name_error_object_type_358419.base = py_base_error_object_type_357262;
var py_not_implemented_error_object_type_359505 = new_py_type_159261(makeNimstrLit("NotImplementedError"));
py_not_implemented_error_object_type_359505.magicMethods.Field26 = new_py_not_implemented_error_default_360221;
py_not_implemented_error_object_type_359505.kind = 3;
py_not_implemented_error_object_type_359505.base = py_base_error_object_type_357262;
var py_type_error_object_type_360505 = new_py_type_159261(makeNimstrLit("TypeError"));
py_type_error_object_type_360505.magicMethods.Field26 = new_py_type_error_default_361221;
py_type_error_object_type_360505.kind = 3;
py_type_error_object_type_360505.base = py_base_error_object_type_357262;
var py_attribute_error_object_type_361505 = new_py_type_159261(makeNimstrLit("AttributeError"));
py_attribute_error_object_type_361505.magicMethods.Field26 = new_py_attribute_error_default_362221;
py_attribute_error_object_type_361505.kind = 3;
py_attribute_error_object_type_361505.base = py_base_error_object_type_357262;
var py_value_error_object_type_362505 = new_py_type_159261(makeNimstrLit("ValueError"));
py_value_error_object_type_362505.magicMethods.Field26 = new_py_value_error_default_363221;
py_value_error_object_type_362505.kind = 3;
py_value_error_object_type_362505.base = py_base_error_object_type_357262;
var py_index_error_object_type_363505 = new_py_type_159261(makeNimstrLit("IndexError"));
py_index_error_object_type_363505.magicMethods.Field26 = new_py_index_error_default_364221;
py_index_error_object_type_363505.kind = 3;
py_index_error_object_type_363505.base = py_base_error_object_type_357262;
var py_stop_iter_error_object_type_364505 = new_py_type_159261(makeNimstrLit("StopIterError"));
py_stop_iter_error_object_type_364505.magicMethods.Field26 = new_py_stop_iter_error_default_365221;
py_stop_iter_error_object_type_364505.kind = 3;
py_stop_iter_error_object_type_364505.base = py_base_error_object_type_357262;
var py_lock_error_object_type_365505 = new_py_type_159261(makeNimstrLit("LockError"));
py_lock_error_object_type_365505.magicMethods.Field26 = new_py_lock_error_default_366221;
py_lock_error_object_type_365505.kind = 3;
py_lock_error_object_type_365505.base = py_base_error_object_type_357262;
var py_import_error_object_type_366505 = new_py_type_159261(makeNimstrLit("ImportError"));
py_import_error_object_type_366505.magicMethods.Field26 = new_py_import_error_default_367221;
py_import_error_object_type_366505.kind = 3;
py_import_error_object_type_366505.base = py_base_error_object_type_357262;
var py_unbound_local_error_object_type_367505 = new_py_type_159261(makeNimstrLit("UnboundLocalError"));
py_unbound_local_error_object_type_367505.magicMethods.Field26 = new_py_unbound_local_error_default_368221;
py_unbound_local_error_object_type_367505.kind = 3;
py_unbound_local_error_object_type_367505.base = py_base_error_object_type_357262;
var py_key_error_object_type_368505 = new_py_type_159261(makeNimstrLit("KeyError"));
py_key_error_object_type_368505.magicMethods.Field26 = new_py_key_error_default_369221;
py_key_error_object_type_368505.kind = 3;
py_key_error_object_type_368505.base = py_base_error_object_type_357262;
var py_assertion_error_object_type_369505 = new_py_type_159261(makeNimstrLit("AssertionError"));
py_assertion_error_object_type_369505.magicMethods.Field26 = new_py_assertion_error_default_370221;
py_assertion_error_object_type_369505.kind = 3;
py_assertion_error_object_type_369505.base = py_base_error_object_type_357262;
var py_zero_division_error_object_type_370505 = new_py_type_159261(makeNimstrLit("ZeroDivisionError"));
py_zero_division_error_object_type_370505.magicMethods.Field26 = new_py_zero_division_error_default_371221;
py_zero_division_error_object_type_370505.kind = 3;
py_zero_division_error_object_type_370505.base = py_base_error_object_type_357262;
var py_runtime_error_object_type_371505 = new_py_type_159261(makeNimstrLit("RuntimeError"));
py_runtime_error_object_type_371505.magicMethods.Field26 = new_py_runtime_error_default_372221;
py_runtime_error_object_type_371505.kind = 3;
py_runtime_error_object_type_371505.base = py_base_error_object_type_357262;
var py_syntax_error_object_type_372505 = new_py_type_159261(makeNimstrLit("SyntaxError"));
py_syntax_error_object_type_372505.magicMethods.Field26 = new_py_syntax_error_default_373221;
py_syntax_error_object_type_372505.kind = 3;
py_syntax_error_object_type_372505.base = py_base_error_object_type_357262;
var py_memory_error_object_type_373505 = new_py_type_159261(makeNimstrLit("MemoryError"));
py_memory_error_object_type_373505.magicMethods.Field26 = new_py_memory_error_default_374221;
py_memory_error_object_type_373505.kind = 3;
py_memory_error_object_type_373505.base = py_base_error_object_type_357262;
var py_keyboard_interrupt_error_object_type_374505 = new_py_type_159261(makeNimstrLit("KeyboardInterruptError"));
py_keyboard_interrupt_error_object_type_374505.magicMethods.Field26 = new_py_keyboard_interrupt_error_default_375221;
py_keyboard_interrupt_error_object_type_374505.kind = 3;
py_keyboard_interrupt_error_object_type_374505.base = py_base_error_object_type_357262;

function new_377406() {
	var result_377411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_377601 = null;
		F.line = 211;
		r_377601 = {m_type: NTI377303, sign: 0, digits: null, id: 0, pyType: null};
		F.line = 212;
		result_377411 = r_377601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_377411;

}

function new_py_int_simple_377401() {
	var result_377403 = null;

	var F={procname:"numobjects.newPyIntSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_377624 = new_377406();
		F.line = 561;
		obj_377624.pyType = py_int_object_type_377313;
		F.line = 563;
		give_id_157814(obj_377624);
		result_377403 = obj_377624;
	framePtr = F.prev;

	return result_377403;

}

function new_py_int_default_378021(args_377258) {
	var result_378024 = null;

	var F={procname:"numobjects.newPyIntDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_378024 = new_py_int_simple_377401();
	framePtr = F.prev;

	return result_378024;

}
var py_int_object_type_377313 = new_py_type_159261(makeNimstrLit("Int"));
py_int_object_type_377313.kind = 4;
py_int_object_type_377313.magicMethods.Field26 = new_py_int_default_378021;
var py_int_zero_378346 = new_py_int_378257(0);
var py_int_one_378347 = new_py_int_378257(1);
var py_int_two_378348 = new_py_int_378257(2);
var py_int_ten_378349 = new_py_int_378257(10);

function new_381806() {
	var result_381811 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_382001 = null;
		F.line = 211;
		r_382001 = {m_type: NTI381718, v: 0.0, id: 0, pyType: null};
		F.line = 212;
		result_381811 = r_382001;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_381811;

}

function new_py_float_simple_381801() {
	var result_381803 = null;

	var F={procname:"numobjects.newPyFloatSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_382024 = new_381806();
		F.line = 561;
		obj_382024.pyType = py_float_object_type_381724;
		F.line = 563;
		give_id_157814(obj_382024);
		result_381803 = obj_382024;
	framePtr = F.prev;

	return result_381803;

}

function new_py_float_default_382421(args_381673) {
	var result_382424 = null;

	var F={procname:"numobjects.newPyFloatDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_382424 = new_py_float_simple_381801();
	framePtr = F.prev;

	return result_382424;

}
var py_float_object_type_381724 = new_py_type_159261(makeNimstrLit("Float"));
py_float_object_type_381724.kind = 5;
py_float_object_type_381724.magicMethods.Field26 = new_py_float_default_382421;

function of_py_int_object_377315(obj_377248) {
	var result_377317 = false;

	var F={procname:"numobjects.ofPyIntObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_377317 = (obj_377248.pyType.kind == 4);
	framePtr = F.prev;

	return result_377317;

}

function do_add_378790(a_378792, b_378793) {
	var result_378794 = null;

	var F={procname:"numobjects.doAdd",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((a_378792.digits != null ? a_378792.digits.length : 0) < (b_378793.digits != null ? b_378793.digits.length : 0))) {
		F.line = 136;
		result_378794 = do_add_378790(b_378793, a_378792);
		break BeforeRet;
		}
		
		F.line = 137;
		var carry_378809 = 0;
		F.line = 138;
		result_378794 = new_py_int_simple_377401();
		L1: do {
			F.line = 139;
			var i_378827 = 0;
			F.line = 3616;
			var colontmp__378919 = 0;
			F.line = 139;
			colontmp__378919 = (a_378792.digits != null ? a_378792.digits.length : 0);
			F.line = 3617;
			var i_378922 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_378922 < colontmp__378919)) break L3;
						F.line = 3619;
						i_378827 = i_378922;
						if ((i_378827 < (b_378793.digits != null ? b_378793.digits.length : 0))) {
						F.line = 142;
						carry_378809 = ((carry_378809 + b_378793.digits[chckIndx(i_378827, 0, b_378793.digits.length+0-1)-0]) >>> 0);
						}
						
						F.line = 143;
						carry_378809 = ((carry_378809 + a_378792.digits[chckIndx(i_378827, 0, a_378792.digits.length+0-1)-0]) >>> 0);
						F.line = 144;
						var Tmp4 = nimCopy(null, chckRange((carry_378809 & 65535), 0, 65535), NTI377054);
						if (result_378794.digits != null) { result_378794.digits.push(Tmp4); } else { result_378794.digits = [Tmp4]; };
						F.line = 145;
						carry_378809 = chckRange(((carry_378809 >>> 0) >>> 16), 0, 65535);
						F.line = 3620;
						i_378922 = addInt(i_378922, 1);
					}
			} while(false);
		} while(false);
		if ((0 < carry_378809)) {
		F.line = 147;
		var Tmp5 = nimCopy(null, chckRange((carry_378809 & 65535), 0, 65535), NTI377054);
		if (result_378794.digits != null) { result_378794.digits.push(Tmp5); } else { result_378794.digits = [Tmp5]; };
		}
		
	} while (false);
	framePtr = F.prev;

	return result_378794;

}

function HEX5BHEX5D_378483(s_378489, i_378491) {
	var result_378493 = [null, 0];
	var result_378493_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_378493 = s_378489; result_378493_Idx = chckIndx(subInt((s_378489 != null ? s_378489.length : 0), i_378491), 0, s_378489.length+0-1)-0;
	framePtr = F.prev;

	return [result_378493, result_378493_Idx];

}

function pop_378524(s_378530, s_378530_Idx) {
	var result_378531 = 0;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_378539 = subInt((s_378530[s_378530_Idx] != null ? s_378530[s_378530_Idx].length : 0), 1);
		F.line = 2525;
		result_378531 = s_378530[s_378530_Idx][chckIndx(l_378539, 0, s_378530[s_378530_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_378530[s_378530_Idx].length < chckRange(l_378539, 0, 2147483647)) { for (var i=s_378530[s_378530_Idx].length;i<chckRange(l_378539, 0, 2147483647);++i) s_378530[s_378530_Idx].push(0); }
               else { s_378530[s_378530_Idx].length = chckRange(l_378539, 0, 2147483647); };
	framePtr = F.prev;

	return result_378531;

}

function normalize_378456(a_378458) {
							var Tmp4;

	var F={procname:"numobjects.normalize",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 98;
			var i_378476 = 0;
			F.line = 3616;
			var colontmp__378566 = 0;
			F.line = 98;
			colontmp__378566 = (a_378458.digits != null ? a_378458.digits.length : 0);
			F.line = 3617;
			var i_378569 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_378569 < colontmp__378566)) break L3;
						F.line = 3619;
						i_378476 = i_378569;
						if (((Tmp4 = HEX5BHEX5D_378483(a_378458.digits, 1), Tmp4[0])[Tmp4[1]] == 0)) {
						F.line = 100;
						pop_378524(a_378458, "digits");
						}
						else {
							F.line = 102;
							break L1;
						}
						
						F.line = 3620;
						i_378569 = addInt(i_378569, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function do_sub_378937(a_378939, b_378940) {
	var result_378941 = null;

	var F={procname:"numobjects.doSub",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((a_378939.digits != null ? a_378939.digits.length : 0) < (b_378940.digits != null ? b_378940.digits.length : 0))) {
		F.line = 152;
		var c_378956 = do_sub_378937(b_378940, a_378939);
		F.line = 153;
		c_378956.sign = -1;
		F.line = 154;
		result_378941 = c_378956;
		break BeforeRet;
		}
		
		F.line = 155;
		var carry_378957 = 0;
		F.line = 156;
		result_378941 = new_py_int_simple_377401();
		L1: do {
			F.line = 157;
			var i_378975 = 0;
			F.line = 3616;
			var colontmp__379100 = 0;
			F.line = 157;
			colontmp__379100 = (a_378939.digits != null ? a_378939.digits.length : 0);
			F.line = 3617;
			var i_379103 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_379103 < colontmp__379100)) break L3;
						F.line = 3619;
						i_378975 = i_379103;
						F.line = 158;
						var aa_378976 = a_378939.digits[chckIndx(i_378975, 0, a_378939.digits.length+0-1)-0];
						F.line = 159;
						var bb_378977 = carry_378957;
						if ((i_378975 < (b_378940.digits != null ? b_378940.digits.length : 0))) {
						F.line = 161;
						bb_378977 = ((bb_378977 + b_378940.digits[chckIndx(i_378975, 0, b_378940.digits.length+0-1)-0]) >>> 0);
						}
						
						if ((bb_378977 <= aa_378976)) {
						F.line = 163;
						var Tmp4 = nimCopy(null, chckRange((((aa_378976 - bb_378977) >>> 0) & 65535), 0, 65535), NTI377054);
						if (result_378941.digits != null) { result_378941.digits.push(Tmp4); } else { result_378941.digits = [Tmp4]; };
						F.line = 164;
						carry_378957 = 0;
						}
						else {
							F.line = 166;
							var Tmp5 = nimCopy(null, chckRange(((65536 - chckRange((((bb_378977 - aa_378976) >>> 0) & 65535), 0, 65535)) >>> 0), 0, 65535), NTI377054);
							if (result_378941.digits != null) { result_378941.digits.push(Tmp5); } else { result_378941.digits = [Tmp5]; };
							F.line = 167;
							carry_378957 = 1;
						}
						
						F.line = 3620;
						i_379103 = addInt(i_379103, 1);
					}
			} while(false);
		} while(false);
		if (!((carry_378957 == 0))) {
		F.line = 169;
		var Tmp6 = nimCopy(null, carry_378957, NTI377054);
		if (result_378941.digits != null) { result_378941.digits.push(Tmp6); } else { result_378941.digits = [Tmp6]; };
		F.line = 170;
		result_378941.sign = -1;
		}
		
		F.line = 171;
		normalize_378456(result_378941);
		if (((result_378941.digits != null ? result_378941.digits.length : 0) == 0)) {
		F.line = 173;
		result_378941.sign = 0;
		}
		else {
			F.line = 175;
			result_378941.sign = 1;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_378941;

}

function HEX2B_380161(a_380163, b_380164) {
	var result_380165 = null;

	var F={procname:"numobjects.+",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 243;
		switch (a_380163.sign) {
		case -1:
			F.line = 245;
			switch (b_380164.sign) {
			case -1:
				F.line = 247;
				var c_380166 = do_add_378790(a_380163, b_380164);
				F.line = 248;
				c_380166.sign = -1;
				F.line = 249;
				result_380165 = c_380166;
				break BeforeRet;
				break;
			case 0:
				F.line = 251;
				result_380165 = a_380163;
				break BeforeRet;
				break;
			case 1:
				F.line = 253;
				result_380165 = do_sub_378937(a_380163, b_380164);
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 255;
			result_380165 = b_380164;
			break BeforeRet;
			break;
		case 1:
			F.line = 257;
			switch (b_380164.sign) {
			case -1:
				F.line = 259;
				result_380165 = do_sub_378937(a_380163, b_380164);
				break BeforeRet;
				break;
			case 0:
				F.line = 261;
				result_380165 = a_380163;
				break BeforeRet;
				break;
			case 1:
				F.line = 263;
				var c_380167 = do_add_378790(a_380163, b_380164);
				F.line = 264;
				c_380167.sign = 1;
				F.line = 265;
				result_380165 = c_380167;
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_380165;

}

function of_py_float_object_381726(obj_381663) {
	var result_381728 = false;

	var F={procname:"numobjects.ofPyFloatObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_381728 = (obj_381663.pyType.kind == 5);
	framePtr = F.prev;

	return result_381728;

}

function ten_to_the_power_of_17904(b_17906) {
	var result_17907 = 0.0;

	var F={procname:"system.tenToThePowerOf",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/jssys.nim",line:0};
	framePtr = F;
		F.line = 656;
		var b_17908 = b_17906;
		F.line = 657;
		var a_17909 = 1.0000000000000000e+01;
		F.line = 658;
		result_17907 = 1.0000000000000000e+00;
		L1: do {
			F.line = 659;
				L2: while (true) {
				if (!true) break L2;
					if (((b_17908 & 1) == 1)) {
					F.line = 661;
					result_17907 = (result_17907 * a_17909);
					}
					
					F.line = 662;
					b_17908 = ((b_17908 >>> 0) >>> 1);
					if ((b_17908 == 0)) {
					F.line = 663;
					break L1;
					}
					
					F.line = 664;
					a_17909 = (a_17909 * a_17909);
				}
		} while(false);
	framePtr = F.prev;

	return result_17907;

}

function npuParseFloat(s_38824, number_38826, number_38826_Idx, start_38827) {
	var result_38829 = 0;

	var F={procname:"parseutils.parseFloat",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 371;
		var bf_38830 = [0.0];
		F.line = 372;
		result_38829 = nimParseBiggestFloat(s_38824, bf_38830, 0, start_38827);
		if (!((result_38829 == 0))) {
		F.line = 374;
		number_38826[number_38826_Idx] = bf_38830[0];
		}
		
	framePtr = F.prev;

	return result_38829;

}

function nsuParseFloat(s_134626) {
			var Tmp1;

	var result_134627 = [0.0];

		var l_134629 = npuParseFloat(s_134626, result_134627, 0, 0);
			if (!((l_134629 == (s_134626 != null ? s_134626.length : 0)))) Tmp1 = true; else {				Tmp1 = (l_134629 == 0);			}		if (Tmp1) {
		var e_134636 = null;
		e_134636 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_134636.message = nimCopy(null, (makeNimstrLit("invalid float: ")).concat(s_134626), NTI138);
		e_134636.parent = null;
		raiseException(e_134636, "ValueError");
		}
		

	return result_134627[0];

}

function to_float_382769(py_int_382771) {
	var result_382772 = 0.0;

	var F={procname:"numobjects.toFloat",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 503;
		result_382772 = nsuParseFloat(HEX24_157579(py_int_382771));
	framePtr = F.prev;

	return result_382772;

}

function new_py_float_382843(py_int_382845) {
	var result_382846 = null;

	var F={procname:"numobjects.newPyFloat",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 525;
		result_382846 = new_py_float_simple_381801();
		F.line = 526;
		result_382846.v = to_float_382769(py_int_382845);
	framePtr = F.prev;

	return result_382846;

}

function add_py_int_object_magic_382890(self_no_cast_382892, other_382893) {
	var result_382894 = null;

	var F={procname:"numobjects.addPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_382892.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_383001 = self_no_cast_382892;
		if (of_py_int_object_377315(other_382893)) {
		F.line = 537;
		result_382894 = HEX2B_380161(self_383001, other_382893);
		}
		else {
		if (of_py_float_object_381726(other_382893)) {
		F.line = 539;
		var new_float_383007 = new_py_float_382843(self_383001);
		F.line = 540;
		F.line = 56;
		if ((new_float_383007.pyType === null)) {
		F.line = 2895;
		var e_383034 = null;
		F.line = 2896;
		e_383034 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_383034.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_383034.parent = null;
		F.line = 26;
		raiseException(e_383034, "InternalError");
		}
		
		F.line = 27;
		var fun_383202 = new_float_383007.pyType.magicMethods.Field0;
		if ((fun_383202 === null)) {
		F.line = 29;
		var obj_type_str_383211 = new_float_383007.pyType.name;
		F.line = 30;
		var method_str_383213 = makeNimstrLit("add");
		F.line = 31;
		var msg_383215 = (makeNimstrLit("No ")).concat(method_str_383213,makeNimstrLit(" method for "),obj_type_str_383211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_383217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_383217.tk = 3;
		F.line = 108;
		excp_383217.thrown = true;
		F.line = 109;
		excp_383217.msg = new_py_string_176075(msg_383215);
		var excp_383220 = excp_383217;
		F.line = 36;
		result_382894 = excp_383220;
		break BeforeRet;
		}
		
		var fun_383402 = fun_383202;
		F.line = 57;
		var res_383404 = fun_383402(new_float_383007, other_382893);
		result_382894 = res_383404;
		}
		else {
			F.line = 542;
			F.line = 542;
			var fmt_res_383603 = mnewString(0);
			F.line = 542;
			if (fmt_res_383603 != null) { fmt_res_383603 = (fmt_res_383603).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_383603 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_383603 != null) { fmt_res_383603 = (fmt_res_383603).concat(other_382893.pyType.name); } else { fmt_res_383603 = other_382893.pyType.name.slice(); };
			var msg_383802 = (makeNimstrLit("+")).concat(fmt_res_383603);
			F.line = 543;
			F.line = 106;
			var excp_383804 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_383804.tk = 3;
			F.line = 108;
			excp_383804.thrown = true;
			F.line = 109;
			excp_383804.msg = new_py_string_176075(msg_383802);
			result_382894 = excp_383804;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_382894;

}

function copy_378438(int_obj_378440) {
	var result_378441 = null;

	var F={procname:"numobjects.copy",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 93;
		F.line = 93;
		var new_int_378442 = new_py_int_simple_377401();
		F.line = 94;
		new_int_378442.digits = nimCopy(null, int_obj_378440.digits, NTI377305);
		result_378441 = new_int_378442;
	framePtr = F.prev;

	return result_378441;

}

function HEX2D_380181(a_380183, b_380184) {
	var result_380185 = null;

	var F={procname:"numobjects.-",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 268;
		switch (a_380183.sign) {
		case -1:
			F.line = 270;
			switch (b_380184.sign) {
			case -1:
				F.line = 272;
				result_380185 = do_sub_378937(b_380184, a_380183);
				break BeforeRet;
				break;
			case 0:
				F.line = 274;
				result_380185 = a_380183;
				break BeforeRet;
				break;
			case 1:
				F.line = 276;
				var c_380186 = do_add_378790(a_380183, b_380184);
				F.line = 277;
				c_380186.sign = -1;
				F.line = 278;
				result_380185 = c_380186;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 280;
			switch (b_380184.sign) {
			case -1:
				F.line = 282;
				var c_380187 = copy_378438(b_380184);
				F.line = 283;
				c_380187.sign = 1;
				F.line = 284;
				result_380185 = c_380187;
				break BeforeRet;
				break;
			case 0:
				F.line = 286;
				result_380185 = a_380183;
				break BeforeRet;
				break;
			case 1:
				F.line = 288;
				var c_380188 = copy_378438(b_380184);
				F.line = 289;
				c_380188.sign = -1;
				F.line = 290;
				result_380185 = c_380188;
				break BeforeRet;
				break;
			}
			break;
		case 1:
			F.line = 292;
			switch (b_380184.sign) {
			case -1:
				F.line = 294;
				var c_380189 = do_add_378790(a_380183, b_380184);
				F.line = 295;
				c_380189.sign = 1;
				F.line = 296;
				result_380185 = c_380189;
				break BeforeRet;
				break;
			case 0:
				F.line = 298;
				result_380185 = a_380183;
				break BeforeRet;
				break;
			case 1:
				F.line = 300;
				result_380185 = do_sub_378937(a_380183, b_380184);
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_380185;

}

function sub_py_int_object_magic_383820(self_no_cast_383822, other_383823) {
	var result_383824 = null;

	var F={procname:"numobjects.subPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_383822.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_384001 = self_no_cast_383822;
		if (of_py_int_object_377315(other_383823)) {
		F.line = 537;
		result_383824 = HEX2D_380181(self_384001, other_383823);
		}
		else {
		if (of_py_float_object_381726(other_383823)) {
		F.line = 539;
		var new_float_384007 = new_py_float_382843(self_384001);
		F.line = 540;
		F.line = 56;
		if ((new_float_384007.pyType === null)) {
		F.line = 2895;
		var e_384034 = null;
		F.line = 2896;
		e_384034 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_384034.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_384034.parent = null;
		F.line = 26;
		raiseException(e_384034, "InternalError");
		}
		
		F.line = 27;
		var fun_384202 = new_float_384007.pyType.magicMethods.Field1;
		if ((fun_384202 === null)) {
		F.line = 29;
		var obj_type_str_384211 = new_float_384007.pyType.name;
		F.line = 30;
		var method_str_384213 = makeNimstrLit("sub");
		F.line = 31;
		var msg_384215 = (makeNimstrLit("No ")).concat(method_str_384213,makeNimstrLit(" method for "),obj_type_str_384211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_384217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_384217.tk = 3;
		F.line = 108;
		excp_384217.thrown = true;
		F.line = 109;
		excp_384217.msg = new_py_string_176075(msg_384215);
		var excp_384220 = excp_384217;
		F.line = 36;
		result_383824 = excp_384220;
		break BeforeRet;
		}
		
		var fun_384402 = fun_384202;
		F.line = 57;
		var res_384404 = fun_384402(new_float_384007, other_383823);
		result_383824 = res_384404;
		}
		else {
			F.line = 542;
			F.line = 542;
			var fmt_res_384603 = mnewString(0);
			F.line = 542;
			if (fmt_res_384603 != null) { fmt_res_384603 = (fmt_res_384603).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_384603 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_384603 != null) { fmt_res_384603 = (fmt_res_384603).concat(other_383823.pyType.name); } else { fmt_res_384603 = other_383823.pyType.name.slice(); };
			var msg_384802 = (makeNimstrLit("-")).concat(fmt_res_384603);
			F.line = 543;
			F.line = 106;
			var excp_384804 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_384804.tk = 3;
			F.line = 108;
			excp_384804.thrown = true;
			F.line = 109;
			excp_384804.msg = new_py_string_176075(msg_384802);
			result_383824 = excp_384804;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_383824;

}

function do_mul_379118(a_379120, b_379121) {
	var result_379122 = null;

	var F={procname:"numobjects.doMul",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 180;
		result_379122 = new_py_int_simple_377401();
		F.line = 181;
		var carry_379123 = 0;
		L1: do {
			F.line = 182;
			var i_379141 = 0;
			F.line = 3616;
			var colontmp__379226 = 0;
			F.line = 182;
			colontmp__379226 = (a_379120.digits != null ? a_379120.digits.length : 0);
			F.line = 3617;
			var i_379229 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_379229 < colontmp__379226)) break L3;
						F.line = 3619;
						i_379141 = i_379229;
						F.line = 183;
						carry_379123 = ((carry_379123 + ((a_379120.digits[chckIndx(i_379141, 0, a_379120.digits.length+0-1)-0] * b_379121) >>> 0)) >>> 0);
						F.line = 184;
						var Tmp4 = nimCopy(null, chckRange((carry_379123 & 65535), 0, 65535), NTI377054);
						if (result_379122.digits != null) { result_379122.digits.push(Tmp4); } else { result_379122.digits = [Tmp4]; };
						F.line = 185;
						carry_379123 = chckRange(((carry_379123 >>> 0) >>> 16), 0, 65535);
						F.line = 3620;
						i_379229 = addInt(i_379229, 1);
					}
			} while(false);
		} while(false);
		if ((0 < carry_379123)) {
		F.line = 187;
		var Tmp5 = nimCopy(null, chckRange((carry_379123 & 65535), 0, 65535), NTI377054);
		if (result_379122.digits != null) { result_379122.digits.push(Tmp5); } else { result_379122.digits = [Tmp5]; };
		}
		
	framePtr = F.prev;

	return result_379122;

}

function new_seq_378275(len_378279) {
	var result_378281 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_378281 = new Array(len_378279); for (var i=0;i<len_378279;++i) {result_378281[i]=0;}	framePtr = F.prev;

	return result_378281;

}

function HEX26_379344(x_379349, y_379352) {
	var result_379354 = null;

	var F={procname:"&.&",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2446;
		result_379354 = new Array(chckRange(addInt((x_379349 != null ? x_379349.length : 0), (y_379352 != null ? y_379352.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_379349 != null ? x_379349.length : 0), (y_379352 != null ? y_379352.length : 0)), 0, 2147483647);++i) {result_379354[i]=0;}		L1: do {
			F.line = 2447;
			var i_379397 = 0;
			F.line = 2104;
			var colontmp__379425 = 0;
			F.line = 2447;
			colontmp__379425 = subInt((x_379349 != null ? x_379349.length : 0), 1);
			F.line = 2107;
			var res_379428 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_379428 <= colontmp__379425)) break L3;
						F.line = 2109;
						i_379397 = res_379428;
						F.line = 2448;
						result_379354[chckIndx(i_379397, 0, result_379354.length+0-1)-0] = x_379349[chckIndx(i_379397, 0, x_379349.length+0-1)-0];
						F.line = 2110;
						res_379428 = addInt(res_379428, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 2449;
			var i_379416 = 0;
			F.line = 2104;
			var colontmp__379433 = 0;
			F.line = 2449;
			colontmp__379433 = subInt((y_379352 != null ? y_379352.length : 0), 1);
			F.line = 2107;
			var res_379436 = 0;
			L5: do {
				F.line = 2108;
					L6: while (true) {
					if (!(res_379436 <= colontmp__379433)) break L6;
						F.line = 2109;
						i_379416 = res_379436;
						F.line = 2450;
						result_379354[chckIndx(addInt(i_379416, (x_379349 != null ? x_379349.length : 0)), 0, result_379354.length+0-1)-0] = y_379352[chckIndx(i_379416, 0, y_379352.length+0-1)-0];
						F.line = 2110;
						res_379436 = addInt(res_379436, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_379354;

}

function HEX5BHEX5D_379489(s_379496, x_379499) {
	var result_379501 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_379601 = x_379499.a;
		F.line = 3707;
		var l_379807 = addInt(subInt(subInt((s_379496 != null ? s_379496.length : 0), x_379499.b), a_379601), 1);
		F.line = 3708;
		result_379501 = new Array(chckRange(l_379807, 0, 2147483647)); for (var i=0;i<chckRange(l_379807, 0, 2147483647);++i) {result_379501[i]=null;}		L1: do {
			F.line = 3709;
			var i_379827 = 0;
			F.line = 3617;
			var i_379835 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_379835 < l_379807)) break L3;
						F.line = 3619;
						i_379827 = i_379835;
						F.line = 3709;
						result_379501[chckIndx(i_379827, 0, result_379501.length+0-1)-0] = s_379496[chckIndx(addInt(i_379827, a_379601), 0, s_379496.length+0-1)-0];
						F.line = 3620;
						i_379835 = addInt(i_379835, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_379501;

}

function do_mul_379244(a_379246, b_379247) {
	var result_379248 = null;

	var F={procname:"numobjects.doMul",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((a_379246.digits != null ? a_379246.digits.length : 0) < (b_379247.digits != null ? b_379247.digits.length : 0))) {
		F.line = 191;
		result_379248 = do_mul_379244(b_379247, a_379246);
		break BeforeRet;
		}
		
		F.line = 192;
		var ints_379264 = null;
		L1: do {
			F.line = 193;
			var i_379311 = 0;
			F.line = 193;
			var db_379312 = 0;
			F.line = 2352;
			var colontmp__380017 = null;
			F.line = 193;
			colontmp__380017 = b_379247.digits;
			F.line = 2354;
			var i_380020 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_380020 < (colontmp__380017 != null ? colontmp__380017.length : 0))) break L3;
						F.line = 2356;
						i_379311 = i_380020;
						F.line = 2356;
						db_379312 = colontmp__380017[chckIndx(i_380020, 0, colontmp__380017.length+0-1)-0];
						F.line = 194;
						var c_379313 = do_mul_379118(a_379246, db_379312);
						F.line = 195;
						var zeros_379342 = new_seq_378275(chckRange(i_379311, 0, 2147483647));
						F.line = 196;
						c_379313.digits = nimCopy(null, HEX26_379344(zeros_379342, c_379313.digits), NTI379353);
						F.line = 197;
						if (ints_379264 != null) { ints_379264.push(c_379313); } else { ints_379264 = [c_379313]; };
						F.line = 2357;
						i_380020 = addInt(i_380020, 1);
					}
			} while(false);
		} while(false);
		F.line = 198;
		result_379248 = ints_379264[chckIndx(0, 0, ints_379264.length+0-1)-0];
		L4: do {
			F.line = 199;
			var int_obj_380015 = null;
			F.line = 3909;
			var colontmp__380023 = null;
			F.line = 199;
			colontmp__380023 = HEX5BHEX5D_379489(ints_379264, HEX2EHEX2E_81053(1, 1));
			F.line = 3911;
			var i_380026 = 0;
			F.line = 3912;
			var l_380028 = (colontmp__380023 != null ? colontmp__380023.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_380026 < l_380028)) break L6;
						F.line = 3914;
						int_obj_380015 = colontmp__380023[chckIndx(i_380026, 0, colontmp__380023.length+0-1)-0];
						F.line = 200;
						result_379248 = do_add_378790(result_379248, int_obj_380015);
						F.line = 3915;
						i_380026 = addInt(i_380026, 1);
						if (!(((colontmp__380023 != null ? colontmp__380023.length : 0) == l_380028))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_379248;

}

function HEX2A_380221(a_380223, b_380224) {
	var result_380225 = null;

	var F={procname:"numobjects.*",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 308;
		switch (a_380223.sign) {
		case -1:
			F.line = 310;
			switch (b_380224.sign) {
			case -1:
				F.line = 312;
				var c_380226 = do_mul_379244(a_380223, b_380224);
				F.line = 313;
				c_380226.sign = 1;
				F.line = 314;
				result_380225 = c_380226;
				break BeforeRet;
				break;
			case 0:
				F.line = 316;
				result_380225 = py_int_zero_378346;
				break BeforeRet;
				break;
			case 1:
				F.line = 318;
				var c_380227 = do_mul_379244(a_380223, b_380224);
				F.line = 319;
				c_380227.sign = -1;
				F.line = 320;
				result_380225 = c_380227;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 322;
			result_380225 = py_int_zero_378346;
			break BeforeRet;
			break;
		case 1:
			F.line = 324;
			switch (b_380224.sign) {
			case -1:
				F.line = 326;
				var c_380228 = do_mul_379244(a_380223, b_380224);
				F.line = 327;
				c_380228.sign = -1;
				F.line = 328;
				result_380225 = c_380228;
				break BeforeRet;
				break;
			case 0:
				F.line = 330;
				result_380225 = py_int_zero_378346;
				break BeforeRet;
				break;
			case 1:
				F.line = 332;
				var c_380229 = do_mul_379244(a_380223, b_380224);
				F.line = 333;
				c_380229.sign = 1;
				F.line = 334;
				result_380225 = c_380229;
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_380225;

}

function mul_py_int_object_magic_384820(self_no_cast_384822, other_384823) {
	var result_384824 = null;

	var F={procname:"numobjects.mulPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_384822.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_385001 = self_no_cast_384822;
		if (of_py_int_object_377315(other_384823)) {
		F.line = 537;
		result_384824 = HEX2A_380221(self_385001, other_384823);
		}
		else {
		if (of_py_float_object_381726(other_384823)) {
		F.line = 539;
		var new_float_385007 = new_py_float_382843(self_385001);
		F.line = 540;
		F.line = 56;
		if ((new_float_385007.pyType === null)) {
		F.line = 2895;
		var e_385034 = null;
		F.line = 2896;
		e_385034 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_385034.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_385034.parent = null;
		F.line = 26;
		raiseException(e_385034, "InternalError");
		}
		
		F.line = 27;
		var fun_385202 = new_float_385007.pyType.magicMethods.Field2;
		if ((fun_385202 === null)) {
		F.line = 29;
		var obj_type_str_385211 = new_float_385007.pyType.name;
		F.line = 30;
		var method_str_385213 = makeNimstrLit("mul");
		F.line = 31;
		var msg_385215 = (makeNimstrLit("No ")).concat(method_str_385213,makeNimstrLit(" method for "),obj_type_str_385211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_385217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_385217.tk = 3;
		F.line = 108;
		excp_385217.thrown = true;
		F.line = 109;
		excp_385217.msg = new_py_string_176075(msg_385215);
		var excp_385220 = excp_385217;
		F.line = 36;
		result_384824 = excp_385220;
		break BeforeRet;
		}
		
		var fun_385402 = fun_385202;
		F.line = 57;
		var res_385404 = fun_385402(new_float_385007, other_384823);
		result_384824 = res_385404;
		}
		else {
			F.line = 542;
			F.line = 542;
			var fmt_res_385603 = mnewString(0);
			F.line = 542;
			if (fmt_res_385603 != null) { fmt_res_385603 = (fmt_res_385603).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_385603 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_385603 != null) { fmt_res_385603 = (fmt_res_385603).concat(other_384823.pyType.name); } else { fmt_res_385603 = other_384823.pyType.name.slice(); };
			var msg_385802 = (makeNimstrLit("*")).concat(fmt_res_385603);
			F.line = 543;
			F.line = 106;
			var excp_385804 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_385804.tk = 3;
			F.line = 108;
			excp_385804.thrown = true;
			F.line = 109;
			excp_385804.msg = new_py_string_176075(msg_385802);
			result_384824 = excp_385804;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_384824;

}

function truediv_py_int_object_magic_385820(self_no_cast_385822, other_385823) {
	var result_385824 = null;

	var F={procname:"numobjects.truedivPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_385822.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_386001 = self_no_cast_385822;
		F.line = 559;
		var casted_386002 = new_py_float_382843(self_386001);
		F.line = 56;
		if ((casted_386002.pyType === null)) {
		F.line = 2895;
		var e_386029 = null;
		F.line = 2896;
		e_386029 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_386029.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_386029.parent = null;
		F.line = 26;
		raiseException(e_386029, "InternalError");
		}
		
		F.line = 27;
		var fun_386202 = casted_386002.pyType.magicMethods.Field3;
		if ((fun_386202 === null)) {
		F.line = 29;
		var obj_type_str_386211 = casted_386002.pyType.name;
		F.line = 30;
		var method_str_386213 = makeNimstrLit("trueDiv");
		F.line = 31;
		var msg_386215 = (makeNimstrLit("No ")).concat(method_str_386213,makeNimstrLit(" method for "),obj_type_str_386211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_386217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_386217.tk = 3;
		F.line = 108;
		excp_386217.thrown = true;
		F.line = 109;
		excp_386217.msg = new_py_string_176075(msg_386215);
		var excp_386220 = excp_386217;
		F.line = 36;
		result_385824 = excp_386220;
		break BeforeRet;
		}
		
		var fun_386402 = fun_386202;
		F.line = 57;
		var res_386404 = fun_386402(casted_386002, other_385823);
		result_385824 = res_386404;
	} while (false);
	framePtr = F.prev;

	return result_385824;

}

function zero_378388(int_obj_378390) {
	var result_378391 = false;

	var F={procname:"numobjects.zero",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 87;
		result_378391 = (int_obj_378390.sign == 0);
	framePtr = F.prev;

	return result_378391;

}

function set_xlen_378260(int_obj_378262, l_378263) {
	var F={procname:"numobjects.setXLen",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		if (((int_obj_378262.digits != null ? int_obj_378262.digits.length : 0) == 0)) {
		F.line = 74;
		int_obj_378262.digits = nimCopy(null, new_seq_378275(chckRange(l_378263, 0, 2147483647)), NTI378280);
		}
		else {
			F.line = 76;
		if (int_obj_378262.digits.length < chckRange(l_378263, 0, 2147483647)) { for (var i=int_obj_378262.digits.length;i<chckRange(l_378263, 0, 2147483647);++i) int_obj_378262.digits.push(0); }
               else { int_obj_378262.digits.length = chckRange(l_378263, 0, 2147483647); };
		}
		
	framePtr = F.prev;

	
}

function do_div_380243(n_380245, d_380246) {
				var Tmp5;

	var result_380248 = {Field0: null, Field1: null};

	var F={procname:"numobjects.doDiv",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 339;
		var nn_380256 = (n_380245.digits != null ? n_380245.digits.length : 0);
		F.line = 340;
		var dn_380264 = (d_380246.digits != null ? d_380246.digits.length : 0);
		if (!(!((nn_380256 == 0)))) {
		F.line = 341;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(341, 10) `\x0Anot (nn == 0)` "));
		}
		
		if ((nn_380256 < dn_380264)) {
		F.line = 344;
		nimCopy(result_380248, {Field0: py_int_zero_378346, Field1: n_380245}, NTI380247);
		break BeforeRet;
		}
		else {
		if ((dn_380264 == 1)) {
		F.line = 346;
		var dd_380402 = d_380246.digits[chckIndx(0, 0, d_380246.digits.length+0-1)-0];
		F.line = 347;
		var q_380403 = new_py_int_simple_377401();
		F.line = 348;
		var rr_380404 = 0;
		F.line = 349;
		set_xlen_378260(q_380403, (n_380245.digits != null ? n_380245.digits.length : 0));
		L1: do {
			F.line = 351;
			var i_380430 = 0;
			F.line = 2065;
			var colontmp__380621 = 0;
			F.line = 351;
			colontmp__380621 = (n_380245.digits != null ? (n_380245.digits.length-1) : -1);
			F.line = 2077;
			var res_380624 = colontmp__380621;
			L2: do {
				F.line = 2078;
					L3: while (true) {
					if (!(0 <= res_380624)) break L3;
						F.line = 2079;
						i_380430 = res_380624;
						F.line = 352;
						var tmp_380449 = ((n_380245.digits[chckIndx(i_380430, 0, n_380245.digits.length+0-1)-0] + (rr_380404 << 16)) >>> 0);
						F.line = 353;
						q_380403.digits[chckIndx(i_380430, 0, q_380403.digits.length+0-1)-0] = chckRange((((tmp_380449 / dd_380402) >>> 0) & 65535), 0, 65535);
						F.line = 354;
						rr_380404 = chckRange(((tmp_380449 % dd_380402) & 65535), 0, 65535);
						F.line = 2080;
						res_380624 = subInt(res_380624, 1);
					}
			} while(false);
		} while(false);
		F.line = 356;
		normalize_378456(q_380403);
		F.line = 357;
		var r_380492 = new_py_int_simple_377401();
		F.line = 358;
		var Tmp4 = nimCopy(null, rr_380404, NTI377054);
		if (r_380492.digits != null) { r_380492.digits.push(Tmp4); } else { r_380492.digits = [Tmp4]; };
		F.line = 359;
		nimCopy(result_380248, {Field0: q_380403, Field1: r_380492}, NTI380247);
		break BeforeRet;
		}
		else {
				if (!(dn_380264 <= nn_380256)) Tmp5 = false; else {					Tmp5 = (2 <= dn_380264);				}			if (!(Tmp5)) {
			F.line = 361;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(361, 12) `\x0A  dn <= nn and\x0A  2 <= dn` "));
			}
			
			F.line = 2895;
			var e_380607 = null;
			F.line = 2896;
			e_380607 = {m_type: NTI156087, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 362;
			e_380607.message = nimCopy(null, [], NTI138);
			F.line = 2891;
			e_380607.parent = null;
			F.line = 362;
			raiseException(e_380607, "IntError");
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_380248;

}

function div_380641(a_380643, b_380644) {
	var result_380645 = null;

	var F={procname:"numobjects.div",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 366;
		switch (a_380643.sign) {
		case -1:
			F.line = 368;
			switch (b_380644.sign) {
			case -1:
				F.line = 370;
				var colontmp__393233 = {Field0: null, Field1: null};
				F.line = 370;
				var q_380646 = null;
				F.line = 370;
				var r_380647 = null;
				F.line = 370;
				nimCopy(colontmp__393233, do_div_380243(a_380643, b_380644), NTI380247);
				F.line = 370;
				q_380646 = colontmp__393233["Field0"];
				F.line = 370;
				r_380647 = colontmp__393233["Field1"];
				if (((q_380646.digits != null ? q_380646.digits.length : 0) == 0)) {
				F.line = 372;
				q_380646.sign = 0;
				}
				else {
					F.line = 374;
					q_380646.sign = 1;
				}
				
				F.line = 375;
				result_380645 = q_380646;
				break BeforeRet;
				break;
			case 0:
				if (true) {
				F.line = 377;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(377, 14) `false` "));
				}
				
				break;
			case 1:
				F.line = 379;
				var colontmp__393234 = {Field0: null, Field1: null};
				F.line = 379;
				var q_380801 = null;
				F.line = 379;
				var r_380802 = null;
				F.line = 379;
				nimCopy(colontmp__393234, do_div_380243(a_380643, b_380644), NTI380247);
				F.line = 379;
				q_380801 = colontmp__393234["Field0"];
				F.line = 379;
				r_380802 = colontmp__393234["Field1"];
				if (((q_380801.digits != null ? q_380801.digits.length : 0) == 0)) {
				F.line = 381;
				q_380801.sign = 0;
				}
				else {
					F.line = 383;
					q_380801.sign = -1;
				}
				
				F.line = 384;
				result_380645 = q_380801;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 386;
			result_380645 = py_int_zero_378346;
			break BeforeRet;
			break;
		case 1:
			F.line = 388;
			switch (b_380644.sign) {
			case -1:
				F.line = 390;
				var colontmp__393235 = {Field0: null, Field1: null};
				F.line = 390;
				var q_380810 = null;
				F.line = 390;
				var r_380811 = null;
				F.line = 390;
				nimCopy(colontmp__393235, do_div_380243(a_380643, b_380644), NTI380247);
				F.line = 390;
				q_380810 = colontmp__393235["Field0"];
				F.line = 390;
				r_380811 = colontmp__393235["Field1"];
				if (((q_380810.digits != null ? q_380810.digits.length : 0) == 0)) {
				F.line = 392;
				q_380810.sign = 0;
				}
				else {
					F.line = 394;
					q_380810.sign = -1;
				}
				
				F.line = 395;
				result_380645 = q_380810;
				break BeforeRet;
				break;
			case 0:
				if (true) {
				F.line = 397;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(397, 14) `false` "));
				}
				
				break;
			case 1:
				F.line = 399;
				var colontmp__393236 = {Field0: null, Field1: null};
				F.line = 399;
				var q_381001 = null;
				F.line = 399;
				var r_381002 = null;
				F.line = 399;
				nimCopy(colontmp__393236, do_div_380243(a_380643, b_380644), NTI380247);
				F.line = 399;
				q_381001 = colontmp__393236["Field0"];
				F.line = 399;
				r_381002 = colontmp__393236["Field1"];
				if (((q_381001.digits != null ? q_381001.digits.length : 0) == 0)) {
				F.line = 401;
				q_381001.sign = 0;
				}
				else {
					F.line = 403;
					q_381001.sign = 1;
				}
				
				F.line = 404;
				result_380645 = q_381001;
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_380645;

}

function is_nim_exception_15277() {
		return lastJSError.m_type;

	
}

function floordiv_py_int_object_magic_386615(self_no_cast_386617, other_386618) {
	var result_386619 = null;

	var F={procname:"numobjects.floordivPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_386617.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_386801 = self_no_cast_386617;
		if (of_py_int_object_377315(other_386618)) {
		F.line = 565;
		var int_other_386802 = other_386618;
		if (zero_378388(int_other_386802)) {
		F.line = 567;
		F.line = 99;
		var excp_386804 = new_py_zero_division_error_simple_370601();
		F.line = 100;
		excp_386804.tk = 13;
		F.line = 101;
		excp_386804.thrown = true;
		result_386619 = excp_386804;
		break BeforeRet;
		}
		
		F.line = 568;
++excHandler;
		try {
		F.line = 569;
		result_386619 = div_380641(self_386801, other_386618);
		break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156087))) {
		F.line = 571;
		F.line = 106;
		var excp_386807 = new_py_value_error_simple_362601();
		F.line = 107;
		excp_386807.tk = 5;
		F.line = 108;
		excp_386807.thrown = true;
		F.line = 109;
		excp_386807.msg = new_py_string_176075(makeNimstrLit("big int operation not implemented"));
		result_386619 = excp_386807;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		}
		else {
		if (of_py_float_object_381726(other_386618)) {
		F.line = 573;
		var new_float_386809 = new_py_float_382843(self_386801);
		F.line = 574;
		F.line = 56;
		if ((new_float_386809.pyType === null)) {
		F.line = 2895;
		var e_386836 = null;
		F.line = 2896;
		e_386836 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_386836.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_386836.parent = null;
		F.line = 26;
		raiseException(e_386836, "InternalError");
		}
		
		F.line = 27;
		var fun_387002 = new_float_386809.pyType.magicMethods.Field4;
		if ((fun_387002 === null)) {
		F.line = 29;
		var obj_type_str_387011 = new_float_386809.pyType.name;
		F.line = 30;
		var method_str_387013 = makeNimstrLit("floorDiv");
		F.line = 31;
		var msg_387015 = (makeNimstrLit("No ")).concat(method_str_387013,makeNimstrLit(" method for "),obj_type_str_387011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_387017 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_387017.tk = 3;
		F.line = 108;
		excp_387017.thrown = true;
		F.line = 109;
		excp_387017.msg = new_py_string_176075(msg_387015);
		var excp_387020 = excp_387017;
		F.line = 36;
		result_386619 = excp_387020;
		break BeforeRet;
		}
		
		var fun_387202 = fun_387002;
		F.line = 57;
		var res_387204 = fun_387202(new_float_386809, other_386618);
		result_386619 = res_387204;
		break BeforeRet;
		}
		else {
			F.line = 576;
			F.line = 106;
			var excp_387602 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_387602.tk = 3;
			F.line = 108;
			excp_387602.thrown = true;
			F.line = 109;
			F.line = 576;
			var fmt_res_387404 = mnewString(0);
			F.line = 576;
			if (fmt_res_387404 != null) { fmt_res_387404 = (fmt_res_387404).concat(makeNimstrLit("floor divide not supported by int and ")); } else { fmt_res_387404 = makeNimstrLit("floor divide not supported by int and "); };
			F.line = 260;
			if (fmt_res_387404 != null) { fmt_res_387404 = (fmt_res_387404).concat(other_386618.pyType.name); } else { fmt_res_387404 = other_386618.pyType.name.slice(); };
			excp_387602.msg = new_py_string_176075(fmt_res_387404);
			result_386619 = excp_387602;
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_386619;

}

function negative_378363(int_obj_378365) {
	var result_378366 = false;

	var F={procname:"numobjects.negative",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 84;
		result_378366 = (int_obj_378365.sign == -1);
	framePtr = F.prev;

	return result_378366;

}

function pow_381023(a_381025, b_381026) {
	var result_381027 = null;

	var F={procname:"numobjects.pow",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(!(negative_378363(b_381026)))) {
		F.line = 408;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(408, 9) `not negative(b)` "));
		}
		
		if (zero_378388(b_381026)) {
		F.line = 410;
		result_381027 = py_int_one_378347;
		break BeforeRet;
		}
		
		F.line = 411;
		var new_b_381201 = div_380641(b_381026, py_int_two_378348);
		F.line = 412;
		var half_c_381202 = pow_381023(a_381025, new_b_381201);
		if (((b_381026.digits[chckIndx(0, 0, b_381026.digits.length+0-1)-0] % 2) == 1)) {
		F.line = 414;
		result_381027 = HEX2A_380221(HEX2A_380221(half_c_381202, half_c_381202), a_381025);
		break BeforeRet;
		}
		else {
			F.line = 416;
			result_381027 = HEX2A_380221(half_c_381202, half_c_381202);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_381027;

}

function pow_py_int_object_magic_387618(self_no_cast_387620, other_387621) {
	var result_387622 = null;

	var F={procname:"numobjects.powPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_387620.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_387801 = self_no_cast_387620;
		if (of_py_int_object_377315(other_387621)) {
		F.line = 537;
		result_387622 = pow_381023(self_387801, other_387621);
		}
		else {
		if (of_py_float_object_381726(other_387621)) {
		F.line = 539;
		var new_float_387807 = new_py_float_382843(self_387801);
		F.line = 540;
		F.line = 56;
		if ((new_float_387807.pyType === null)) {
		F.line = 2895;
		var e_387834 = null;
		F.line = 2896;
		e_387834 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_387834.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_387834.parent = null;
		F.line = 26;
		raiseException(e_387834, "InternalError");
		}
		
		F.line = 27;
		var fun_388002 = new_float_387807.pyType.magicMethods.Field6;
		if ((fun_388002 === null)) {
		F.line = 29;
		var obj_type_str_388011 = new_float_387807.pyType.name;
		F.line = 30;
		var method_str_388013 = makeNimstrLit("pow");
		F.line = 31;
		var msg_388015 = (makeNimstrLit("No ")).concat(method_str_388013,makeNimstrLit(" method for "),obj_type_str_388011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_388017 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_388017.tk = 3;
		F.line = 108;
		excp_388017.thrown = true;
		F.line = 109;
		excp_388017.msg = new_py_string_176075(msg_388015);
		var excp_388020 = excp_388017;
		F.line = 36;
		result_387622 = excp_388020;
		break BeforeRet;
		}
		
		var fun_388202 = fun_388002;
		F.line = 57;
		var res_388204 = fun_388202(new_float_387807, other_387621);
		result_387622 = res_388204;
		}
		else {
			F.line = 542;
			F.line = 542;
			var fmt_res_388403 = mnewString(0);
			F.line = 542;
			if (fmt_res_388403 != null) { fmt_res_388403 = (fmt_res_388403).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_388403 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_388403 != null) { fmt_res_388403 = (fmt_res_388403).concat(other_387621.pyType.name); } else { fmt_res_388403 = other_387621.pyType.name.slice(); };
			var msg_388602 = (makeNimstrLit("**")).concat(fmt_res_388403);
			F.line = 543;
			F.line = 106;
			var excp_388604 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_388604.tk = 3;
			F.line = 108;
			excp_388604.thrown = true;
			F.line = 109;
			excp_388604.msg = new_py_string_176075(msg_388602);
			result_387622 = excp_388604;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_387622;

}

function positive_py_int_object_magic_388620(self_no_cast_388622) {
	var result_388623 = null;

	var F={procname:"numobjects.positivePyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_388622.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_388801 = self_no_cast_388622;
		result_388623 = self_388801;
	framePtr = F.prev;

	return result_388623;

}

function HEX2D_380203(a_380205) {
	var result_380206 = null;

	var F={procname:"numobjects.-",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 303;
		result_380206 = copy_378438(a_380205);
		F.line = 304;
		result_380206.sign = chckRange(negInt(((a_380205.sign)|0)), -1, 1);
	framePtr = F.prev;

	return result_380206;

}

function negative_py_int_object_magic_388816(self_no_cast_388818) {
	var result_388819 = null;

	var F={procname:"numobjects.negativePyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_388818.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_389001 = self_no_cast_388818;
		result_388819 = HEX2D_380203(self_389001);
	framePtr = F.prev;

	return result_388819;

}

function bool_py_int_object_magic_389016(self_no_cast_389018) {
		var Tmp1;

	var result_389019 = null;

	var F={procname:"numobjects.boolPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_389018.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_389201 = self_no_cast_389018;
		if (zero_378388(self_389201)) {
		Tmp1 = py_false_obj_354075;
		}
		else {
		Tmp1 = py_true_obj_354074;
		}
		
		result_389019 = Tmp1;
	framePtr = F.prev;

	return result_389019;

}

function do_compare_378584(a_378586, b_378587) {
	var result_378588 = 0;

	var F={procname:"numobjects.doCompare",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((a_378586.digits != null ? a_378586.digits.length : 0) < (b_378587.digits != null ? b_378587.digits.length : 0))) {
		F.line = 107;
		result_378588 = -1;
		break BeforeRet;
		}
		
		if (((b_378587.digits != null ? b_378587.digits.length : 0) < (a_378586.digits != null ? a_378586.digits.length : 0))) {
		F.line = 109;
		result_378588 = 1;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 110;
			var i_378634 = 0;
			F.line = 2065;
			var colontmp__378655 = 0;
			F.line = 110;
			colontmp__378655 = subInt((a_378586.digits != null ? a_378586.digits.length : 0), 1);
			F.line = 2077;
			var res_378658 = colontmp__378655;
			L2: do {
				F.line = 2078;
					L3: while (true) {
					if (!(0 <= res_378658)) break L3;
						F.line = 2079;
						i_378634 = res_378658;
						L4: do {
							F.line = 111;
							var ad_378635 = a_378586.digits[chckIndx(i_378634, 0, a_378586.digits.length+0-1)-0];
							F.line = 112;
							var bd_378636 = b_378587.digits[chckIndx(i_378634, 0, b_378587.digits.length+0-1)-0];
							if ((ad_378635 < bd_378636)) {
							F.line = 114;
							result_378588 = -1;
							break BeforeRet;
							}
							else {
							if ((ad_378635 == bd_378636)) {
							F.line = 116;
							break L4;
							}
							else {
								F.line = 118;
								result_378588 = 1;
								break BeforeRet;
							}
							}
						} while(false);
						F.line = 2080;
						res_378658 = subInt(res_378658, 1);
					}
			} while(false);
		} while(false);
		F.line = 119;
		result_378588 = 0;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_378588;

}

function HEX3C_380042(a_380044, b_380045) {
	var result_380046 = false;

	var F={procname:"numobjects.<",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 203;
		switch (a_380044.sign) {
		case -1:
			F.line = 205;
			switch (b_380045.sign) {
			case -1:
				F.line = 207;
				result_380046 = (do_compare_378584(a_380044, b_380045) == 1);
				break BeforeRet;
				break;
			case 0:
			case 1:
				F.line = 209;
				result_380046 = true;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 211;
			result_380046 = (b_380045.sign == 1);
			break BeforeRet;
			break;
		case 1:
			F.line = 213;
			switch (b_380045.sign) {
			case -1:
			case 0:
				F.line = 215;
				result_380046 = false;
				break BeforeRet;
				break;
			case 1:
				F.line = 217;
				result_380046 = (do_compare_378584(a_380044, b_380045) == -1);
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_380046;

}

function lt_py_int_object_magic_389216(self_no_cast_389218, other_389219) {
	var result_389220 = null;

	var F={procname:"numobjects.ltPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_389218.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_389401 = self_no_cast_389218;
		if (of_py_int_object_377315(other_389219)) {
		if (HEX3C_380042(self_389401, other_389219)) {
		F.line = 598;
		result_389220 = py_true_obj_354074;
		}
		else {
			F.line = 600;
			result_389220 = py_false_obj_354075;
		}
		
		}
		else {
		if (of_py_float_object_381726(other_389219)) {
		F.line = 602;
		F.line = 56;
		if ((other_389219.pyType === null)) {
		F.line = 2895;
		var e_389428 = null;
		F.line = 2896;
		e_389428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_389428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_389428.parent = null;
		F.line = 26;
		raiseException(e_389428, "InternalError");
		}
		
		F.line = 27;
		var fun_389602 = other_389219.pyType.magicMethods.Field21;
		if ((fun_389602 === null)) {
		F.line = 29;
		var obj_type_str_389611 = other_389219.pyType.name;
		F.line = 30;
		var method_str_389613 = makeNimstrLit("ge");
		F.line = 31;
		var msg_389615 = (makeNimstrLit("No ")).concat(method_str_389613,makeNimstrLit(" method for "),obj_type_str_389611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_389617 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_389617.tk = 3;
		F.line = 108;
		excp_389617.thrown = true;
		F.line = 109;
		excp_389617.msg = new_py_string_176075(msg_389615);
		var excp_389620 = excp_389617;
		F.line = 36;
		result_389220 = excp_389620;
		break BeforeRet;
		}
		
		var fun_389802 = fun_389602;
		F.line = 57;
		var res_389804 = fun_389802(other_389219, self_389401);
		result_389220 = res_389804;
		}
		else {
			F.line = 604;
			F.line = 604;
			var fmt_res_390003 = mnewString(0);
			F.line = 604;
			if (fmt_res_390003 != null) { fmt_res_390003 = (fmt_res_390003).concat(makeNimstrLit("< not supported by int and ")); } else { fmt_res_390003 = makeNimstrLit("< not supported by int and "); };
			F.line = 260;
			if (fmt_res_390003 != null) { fmt_res_390003 = (fmt_res_390003).concat(other_389219.pyType.name); } else { fmt_res_390003 = other_389219.pyType.name.slice(); };
			var msg_390201 = nimCopy(null, fmt_res_390003, NTI138);
			F.line = 605;
			F.line = 106;
			var excp_390203 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_390203.tk = 3;
			F.line = 108;
			excp_390203.thrown = true;
			F.line = 109;
			excp_390203.msg = new_py_string_176075(msg_390201);
			result_389220 = excp_390203;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_389220;

}

function HEX3DHEX3D_380127(a_380129, b_380130) {
	var result_380131 = false;

	var F={procname:"numobjects.==",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((a_380129.sign == b_380130.sign))) {
		F.line = 239;
		result_380131 = false;
		break BeforeRet;
		}
		
		F.line = 240;
		result_380131 = (do_compare_378584(a_380129, b_380130) == 0);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_380131;

}

function of_py_bool_object_353106(obj_353043) {
	var result_353108 = false;

	var F={procname:"boolobject.ofPyBoolObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_353108 = (obj_353043.pyType.kind == 6);
	framePtr = F.prev;

	return result_353108;

}

function eq_py_int_object_magic_390219(self_no_cast_390221, other_390222) {
	var result_390223 = null;

	var F={procname:"numobjects.eqPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_390221.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_390401 = self_no_cast_390221;
		if (of_py_int_object_377315(other_390222)) {
		if (HEX3DHEX3D_380127(self_390401, other_390222)) {
		F.line = 611;
		result_390223 = py_true_obj_354074;
		}
		else {
			F.line = 613;
			result_390223 = py_false_obj_354075;
		}
		
		}
		else {
		if (of_py_float_object_381726(other_390222)) {
		F.line = 615;
		F.line = 56;
		if ((other_390222.pyType === null)) {
		F.line = 2895;
		var e_390428 = null;
		F.line = 2896;
		e_390428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_390428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_390428.parent = null;
		F.line = 26;
		raiseException(e_390428, "InternalError");
		}
		
		F.line = 27;
		var fun_390602 = other_390222.pyType.magicMethods.Field18;
		if ((fun_390602 === null)) {
		F.line = 29;
		var obj_type_str_390611 = other_390222.pyType.name;
		F.line = 30;
		var method_str_390613 = makeNimstrLit("eq");
		F.line = 31;
		var msg_390615 = (makeNimstrLit("No ")).concat(method_str_390613,makeNimstrLit(" method for "),obj_type_str_390611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_390617 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_390617.tk = 3;
		F.line = 108;
		excp_390617.thrown = true;
		F.line = 109;
		excp_390617.msg = new_py_string_176075(msg_390615);
		var excp_390620 = excp_390617;
		F.line = 36;
		result_390223 = excp_390620;
		break BeforeRet;
		}
		
		var fun_390802 = fun_390602;
		F.line = 57;
		var res_390804 = fun_390802(other_390222, self_390401);
		result_390223 = res_390804;
		}
		else {
		if (of_py_bool_object_353106(other_390222)) {
		if (HEX3DHEX3D_380127(self_390401, py_int_one_378347)) {
		F.line = 618;
		result_390223 = other_390222;
		}
		else {
			F.line = 620;
			F.line = 45;
			if ((other_390222.pyType === null)) {
			F.line = 2895;
			var e_391027 = null;
			F.line = 2896;
			e_391027 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_391027.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_391027.parent = null;
			F.line = 26;
			raiseException(e_391027, "InternalError");
			}
			
			F.line = 27;
			var fun_391202 = other_390222.pyType.magicMethods.Field7;
			if ((fun_391202 === null)) {
			F.line = 29;
			var obj_type_str_391211 = other_390222.pyType.name;
			F.line = 30;
			var method_str_391213 = makeNimstrLit("Not");
			F.line = 31;
			var msg_391215 = (makeNimstrLit("No ")).concat(method_str_391213,makeNimstrLit(" method for "),obj_type_str_391211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_391217 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_391217.tk = 3;
			F.line = 108;
			excp_391217.thrown = true;
			F.line = 109;
			excp_391217.msg = new_py_string_176075(msg_391215);
			var excp_391220 = excp_391217;
			F.line = 36;
			result_390223 = excp_391220;
			break BeforeRet;
			}
			
			var fun_391402 = fun_391202;
			F.line = 46;
			var res_391404 = fun_391402(other_390222);
			result_390223 = res_391404;
		}
		
		}
		else {
			F.line = 622;
			F.line = 622;
			var fmt_res_391603 = mnewString(0);
			F.line = 622;
			if (fmt_res_391603 != null) { fmt_res_391603 = (fmt_res_391603).concat(makeNimstrLit("== not supported by int and ")); } else { fmt_res_391603 = makeNimstrLit("== not supported by int and "); };
			F.line = 260;
			if (fmt_res_391603 != null) { fmt_res_391603 = (fmt_res_391603).concat(other_390222.pyType.name); } else { fmt_res_391603 = other_390222.pyType.name.slice(); };
			var msg_391801 = nimCopy(null, fmt_res_391603, NTI138);
			F.line = 623;
			F.line = 106;
			var excp_391803 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_391803.tk = 3;
			F.line = 108;
			excp_391803.thrown = true;
			F.line = 109;
			excp_391803.msg = new_py_string_176075(msg_391801);
			result_390223 = excp_391803;
		}
		}}
	} while (false);
	framePtr = F.prev;

	return result_390223;

}

function str_py_int_object_magic_391819(self_no_cast_391821) {
	var result_391822 = null;

	var F={procname:"numobjects.strPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_391821.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_392001 = self_no_cast_391821;
		result_391822 = new_py_string_176075(HEX24_157579(self_392001));
	framePtr = F.prev;

	return result_391822;

}

function repr_py_int_object_magic_392016(self_no_cast_392018) {
	var result_392019 = null;

	var F={procname:"numobjects.reprPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_392018.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_392201 = self_no_cast_392018;
		result_392019 = new_py_string_176075(HEX24_157579(self_392201));
	framePtr = F.prev;

	return result_392019;

}

function hash_py_int_object_magic_392216(self_no_cast_392218) {
	var result_392219 = null;

	var F={procname:"numobjects.hashPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_392218.m_type, NTI377303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_392401 = self_no_cast_392218;
		result_392219 = self_392401;
	framePtr = F.prev;

	return result_392219;

}

function inplace_add_378675(a_378677, b_378678) {
	var F={procname:"numobjects.inplaceAdd",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 123;
		var carry_378679 = b_378678;
		L1: do {
			F.line = 124;
			var i_378697 = 0;
			F.line = 3616;
			var colontmp__378772 = 0;
			F.line = 124;
			colontmp__378772 = (a_378677.digits != null ? a_378677.digits.length : 0);
			F.line = 3617;
			var i_378775 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_378775 < colontmp__378772)) break L3;
						F.line = 3619;
						i_378697 = i_378775;
						if ((carry_378679 == 0)) {
						F.line = 126;
						break BeforeRet;
						}
						
						F.line = 127;
						carry_378679 = ((carry_378679 + a_378677.digits[chckIndx(i_378697, 0, a_378677.digits.length+0-1)-0]) >>> 0);
						F.line = 128;
						a_378677.digits[chckIndx(i_378697, 0, a_378677.digits.length+0-1)-0] = chckRange((carry_378679 & 65535), 0, 65535);
						F.line = 129;
						carry_378679 = chckRange(((carry_378679 >>> 0) >>> 16), 0, 65535);
						F.line = 3620;
						i_378775 = addInt(i_378775, 1);
					}
			} while(false);
		} while(false);
		if ((0 < carry_378679)) {
		F.line = 131;
		var Tmp4 = nimCopy(null, chckRange((carry_378679 & 65535), 0, 65535), NTI377054);
		if (a_378677.digits != null) { a_378677.digits.push(Tmp4); } else { a_378677.digits = [Tmp4]; };
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function from_str_381232(s_381234) {
	var result_381235 = null;

	var F={procname:"numobjects.fromStr",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 446;
		result_381235 = new_py_int_simple_377401();
		F.line = 447;
		var start_381237 = 0;
		F.line = 448;
		var sign_381238 = 0;
		if ((s_381234[chckIndx(0, 0, s_381234.length+0-1)-0] == 45)) {
		F.line = 451;
		start_381237 = 1;
		}
		
		F.line = 452;
		if (result_381235.digits != null) { result_381235.digits.push(0); } else { result_381235.digits = [0]; };
		L1: do {
			F.line = 453;
			var i_381257 = 0;
			F.line = 3616;
			var colontmp__381279 = 0;
			F.line = 453;
			colontmp__381279 = (s_381234 != null ? s_381234.length : 0);
			F.line = 3617;
			var i_381282 = start_381237;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_381282 < colontmp__381279)) break L3;
						F.line = 3619;
						i_381257 = i_381282;
						F.line = 454;
						result_381235 = do_mul_379118(result_381235, 10);
						F.line = 455;
						var c_381258 = s_381234[chckIndx(i_381257, 0, s_381234.length+0-1)-0];
						F.line = 456;
						inplace_add_378675(result_381235, chckRange(subInt(c_381258, 48), 0, 65535));
						F.line = 3620;
						i_381282 = addInt(i_381282, 1);
					}
			} while(false);
		} while(false);
		F.line = 457;
		normalize_378456(result_381235);
		if ((s_381234[chckIndx(0, 0, s_381234.length+0-1)-0] == 45)) {
		F.line = 459;
		result_381235.sign = -1;
		}
		else {
			if (((result_381235.digits != null ? result_381235.digits.length : 0) == 0)) {
			F.line = 462;
			result_381235.sign = 0;
			}
			else {
				F.line = 464;
				result_381235.sign = 1;
			}
			
		}
		
	framePtr = F.prev;

	return result_381235;

}

function new_py_int_382786(str_382788) {
	var result_382789 = null;

	var F={procname:"numobjects.newPyInt",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 507;
		result_382789 = from_str_381232(str_382788);
	framePtr = F.prev;

	return result_382789;

}

function nsuSplitString(s_133820, sep_133821, maxsplit_133823) {
	var result_133825 = null;

		if (!((0 < (sep_133821 != null ? sep_133821.length : 0)))) {
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/strutils.nim(803, 11) `\x0A0 < len(sep)` "));
		}
		
		result_133825 = nimCopy(null, [], NTI134017);
		L1: do {
			var x_134019 = null;
			var last_134034 = 0;
			var splits_134036 = maxsplit_133823;
			L2: do {
					L3: while (true) {
					if (!(last_134034 <= (s_133820 != null ? s_133820.length : 0))) break L3;
						var first_134038 = last_134034;
						L4: do {
								L5: while (true) {
								if (!((last_134034 < (s_133820 != null ? s_133820.length : 0)) && !(substr_eq_132789(s_133820, last_134034, sep_133821)))) break L5;
									last_134034 += 1;
								}
						} while(false);
						if ((splits_134036 == 0)) {
						last_134034 = (s_133820 != null ? s_133820.length : 0);
						}
						
						x_134019 = substr_23422(s_133820, first_134038, (last_134034 - 1));
						var Tmp6 = nimCopy(null, x_134019, NTI138);
						if (result_133825 != null) { result_133825.push(Tmp6); } else { result_133825 = [Tmp6]; };
						if ((splits_134036 == 0)) {
						break L2;
						}
						
						splits_134036 -= 1;
						last_134034 += (sep_133821 != null ? sep_133821.length : 0);
					}
			} while(false);
		} while(false);

	return result_133825;

}

function new_py_int_378257(i_378259) {
	var result_382806 = null;

	var F={procname:"numobjects.newPyInt",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 510;
		result_382806 = new_py_int_simple_377401();
		F.line = 511;
		var ui_382807 = absInt(i_378259);
		L1: do {
			F.line = 512;
				L2: while (true) {
				if (!!((ui_382807 == 0))) break L2;
					F.line = 513;
					var Tmp3 = nimCopy(null, chckRange(modInt(ui_382807, 65536), 0, 65535), NTI377054);
					if (result_382806.digits != null) { result_382806.digits.push(Tmp3); } else { result_382806.digits = [Tmp3]; };
					F.line = 514;
					ui_382807 = ((ui_382807 >>> 0) >>> 16);
				}
		} while(false);
		if ((i_378259 < 0)) {
		F.line = 517;
		result_382806.sign = -1;
		}
		else {
		if ((i_378259 == 0)) {
		F.line = 519;
		result_382806.sign = 0;
		}
		else {
			F.line = 521;
			result_382806.sign = 1;
		}
		}
	framePtr = F.prev;

	return result_382806;

}

function new_py_int_object_magic_392416(args_392434) {
	var result_392435 = null;

	var F={procname:"numobjects.newPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(((args_392434 != null ? args_392434.length : 0) == 2))) {
		F.line = 190;
		var msg_392447 = null;
		if (false) {
		F.line = 192;
		F.line = 192;
		var fmt_res_392453 = mnewString(0);
		F.line = 192;
		if (fmt_res_392453 != null) { fmt_res_392453 = (fmt_res_392453).concat(makeNimstrLit(" argument (")); } else { fmt_res_392453 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_392453 != null) { fmt_res_392453 = (fmt_res_392453).concat(cstrToNimstr(((args_392434 != null ? args_392434.length : 0))+"")); } else { fmt_res_392453 = cstrToNimstr(((args_392434 != null ? args_392434.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_392453 != null) { fmt_res_392453 = (fmt_res_392453).concat(makeNimstrLit(" given)")); } else { fmt_res_392453 = makeNimstrLit(" given)"); };
		msg_392447 = nimCopy(null, (makeNimstrLit(" takes exactly 2")).concat(fmt_res_392453), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_392611 = mnewString(0);
			F.line = 194;
			if (fmt_res_392611 != null) { fmt_res_392611 = (fmt_res_392611).concat(makeNimstrLit(" argument (")); } else { fmt_res_392611 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_392611 != null) { fmt_res_392611 = (fmt_res_392611).concat(cstrToNimstr(((args_392434 != null ? args_392434.length : 0))+"")); } else { fmt_res_392611 = cstrToNimstr(((args_392434 != null ? args_392434.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_392611 != null) { fmt_res_392611 = (fmt_res_392611).concat(makeNimstrLit(" given)")); } else { fmt_res_392611 = makeNimstrLit(" given)"); };
			msg_392447 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_392611), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_392809 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_392809.tk = 3;
		F.line = 108;
		excp_392809.thrown = true;
		F.line = 109;
		excp_392809.msg = new_py_string_176075(msg_392447);
		result_392435 = excp_392809;
		break BeforeRet;
		}
		
		F.line = 638;
		var arg_392811 = args_392434[chckIndx(1, 0, args_392434.length+0-1)-0];
		F.line = 639;
		switch (arg_392811.pyType.kind) {
		case 4:
			F.line = 641;
			result_392435 = arg_392811;
			break BeforeRet;
			break;
		case 5:
			F.line = 643;
			var i_str_392814 = cstrToNimstr((arg_392811.v)+"");
			F.line = 644;
			result_392435 = new_py_int_382786(nsuSplitString(i_str_392814, makeNimstrLit("."), -1)[chckIndx(0, 0, nsuSplitString(i_str_392814, makeNimstrLit("."), -1).length+0-1)-0]);
			break BeforeRet;
			break;
		case 10:
			F.line = 646;
			var str_392816 = nimCopy(null, arg_392811.str, NTI138);
			F.line = 647;
++excHandler;
			try {
			F.line = 648;
			result_392435 = new_py_int_382786(str_392816);
			break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
			framePtr = F;
			if (lastJSError && (isObj(lastJSError.m_type, NTI3852))) {
			F.line = 650;
			F.line = 650;
			var fmt_res_392819 = mnewString(0);
			F.line = 650;
			if (fmt_res_392819 != null) { fmt_res_392819 = (fmt_res_392819).concat(makeNimstrLit("invalid literal for int() with base 10: \'")); } else { fmt_res_392819 = makeNimstrLit("invalid literal for int() with base 10: \'"); };
			F.line = 260;
			if (fmt_res_392819 != null) { fmt_res_392819 = (fmt_res_392819).concat(str_392816); } else { fmt_res_392819 = str_392816.slice(); };
			F.line = 650;
			if (fmt_res_392819 != null) { fmt_res_392819 = (fmt_res_392819).concat(makeNimstrLit("\'")); } else { fmt_res_392819 = makeNimstrLit("\'"); };
			var msg_393001 = nimCopy(null, fmt_res_392819, NTI138);
			F.line = 651;
			F.line = 106;
			var excp_393003 = new_py_value_error_simple_362601();
			F.line = 107;
			excp_393003.tk = 5;
			F.line = 108;
			excp_393003.thrown = true;
			F.line = 109;
			excp_393003.msg = new_py_string_176075(msg_393001);
			result_392435 = excp_393003;
			break BeforeRet;
			}
			else {
				reraiseException();
			}
lastJSError = prevJSError;
			} finally {
			framePtr = F;
			}
			break;
		case 6:
			if (arg_392811.b) {
			F.line = 654;
			result_392435 = new_py_int_378257(1);
			break BeforeRet;
			}
			else {
				F.line = 656;
				result_392435 = new_py_int_378257(0);
				break BeforeRet;
			}
			
			break;
		default: 
			F.line = 658;
			F.line = 106;
			var excp_393202 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_393202.tk = 3;
			F.line = 108;
			excp_393202.thrown = true;
			F.line = 109;
			F.line = 658;
			var fmt_res_393008 = mnewString(0);
			F.line = 658;
			if (fmt_res_393008 != null) { fmt_res_393008 = (fmt_res_393008).concat(makeNimstrLit("Int argument can\'t be \'")); } else { fmt_res_393008 = makeNimstrLit("Int argument can\'t be \'"); };
			F.line = 260;
			if (fmt_res_393008 != null) { fmt_res_393008 = (fmt_res_393008).concat(arg_392811.pyType.name); } else { fmt_res_393008 = arg_392811.pyType.name.slice(); };
			F.line = 658;
			if (fmt_res_393008 != null) { fmt_res_393008 = (fmt_res_393008).concat(makeNimstrLit("\'")); } else { fmt_res_393008 = makeNimstrLit("\'"); };
			excp_393202.msg = new_py_string_176075(fmt_res_393008);
			result_392435 = excp_393202;
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_392435;

}
py_int_object_type_377313.magicMethods.Field0 = add_py_int_object_magic_382890;
py_int_object_type_377313.magicMethods.Field1 = sub_py_int_object_magic_383820;
py_int_object_type_377313.magicMethods.Field2 = mul_py_int_object_magic_384820;
py_int_object_type_377313.magicMethods.Field3 = truediv_py_int_object_magic_385820;
py_int_object_type_377313.magicMethods.Field4 = floordiv_py_int_object_magic_386615;
py_int_object_type_377313.magicMethods.Field6 = pow_py_int_object_magic_387618;
py_int_object_type_377313.magicMethods.Field9 = positive_py_int_object_magic_388620;
py_int_object_type_377313.magicMethods.Field8 = negative_py_int_object_magic_388816;
py_int_object_type_377313.magicMethods.Field12 = bool_py_int_object_magic_389016;
py_int_object_type_377313.magicMethods.Field16 = lt_py_int_object_magic_389216;
py_int_object_type_377313.magicMethods.Field18 = eq_py_int_object_magic_390219;
py_int_object_type_377313.magicMethods.Field24 = str_py_int_object_magic_391819;
py_int_object_type_377313.magicMethods.Field25 = repr_py_int_object_magic_392016;
py_int_object_type_377313.magicMethods.Field30 = hash_py_int_object_magic_392216;
py_int_object_type_377313.magicMethods.Field26 = new_py_int_object_magic_392416;

function new_py_float_382860(v_382862) {
	var result_382863 = null;

	var F={procname:"numobjects.newPyFloat",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 530;
		result_382863 = new_py_float_simple_381801();
		F.line = 531;
		result_382863.v = v_382862;
	framePtr = F.prev;

	return result_382863;

}

function add_py_float_object_magic_393470(self_no_cast_393472, other_393473) {
	var result_393474 = null;

	var F={procname:"numobjects.addPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_393472.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_393601 = self_no_cast_393472;
		F.line = 661;
		var casted_393602 = null;
		if (of_py_float_object_381726(other_393473)) {
		F.line = 663;
		casted_393602 = other_393473;
		}
		else {
		if (of_py_int_object_377315(other_393473)) {
		F.line = 665;
		casted_393602 = new_py_float_382843(other_393473);
		}
		else {
			F.line = 667;
			F.line = 667;
			var fmt_res_393605 = mnewString(0);
			F.line = 667;
			if (fmt_res_393605 != null) { fmt_res_393605 = (fmt_res_393605).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_393605 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_393605 != null) { fmt_res_393605 = (fmt_res_393605).concat(other_393473.pyType.name); } else { fmt_res_393605 = other_393473.pyType.name.slice(); };
			var msg_393802 = (makeNimstrLit("add")).concat(fmt_res_393605);
			F.line = 668;
			F.line = 106;
			var excp_393804 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_393804.tk = 3;
			F.line = 108;
			excp_393804.thrown = true;
			F.line = 109;
			excp_393804.msg = new_py_string_176075(msg_393802);
			result_393474 = excp_393804;
			break BeforeRet;
		}
		}
		result_393474 = new_py_float_382860((self_393601.v + casted_393602.v));
	} while (false);
	framePtr = F.prev;

	return result_393474;

}

function sub_py_float_object_magic_393822(self_no_cast_393824, other_393825) {
	var result_393826 = null;

	var F={procname:"numobjects.subPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_393824.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_394001 = self_no_cast_393824;
		F.line = 661;
		var casted_394002 = null;
		if (of_py_float_object_381726(other_393825)) {
		F.line = 663;
		casted_394002 = other_393825;
		}
		else {
		if (of_py_int_object_377315(other_393825)) {
		F.line = 665;
		casted_394002 = new_py_float_382843(other_393825);
		}
		else {
			F.line = 667;
			F.line = 667;
			var fmt_res_394005 = mnewString(0);
			F.line = 667;
			if (fmt_res_394005 != null) { fmt_res_394005 = (fmt_res_394005).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_394005 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_394005 != null) { fmt_res_394005 = (fmt_res_394005).concat(other_393825.pyType.name); } else { fmt_res_394005 = other_393825.pyType.name.slice(); };
			var msg_394202 = (makeNimstrLit("sub")).concat(fmt_res_394005);
			F.line = 668;
			F.line = 106;
			var excp_394204 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_394204.tk = 3;
			F.line = 108;
			excp_394204.thrown = true;
			F.line = 109;
			excp_394204.msg = new_py_string_176075(msg_394202);
			result_393826 = excp_394204;
			break BeforeRet;
		}
		}
		result_393826 = new_py_float_382860((self_394001.v - casted_394002.v));
	} while (false);
	framePtr = F.prev;

	return result_393826;

}

function mul_py_float_object_magic_394222(self_no_cast_394224, other_394225) {
	var result_394226 = null;

	var F={procname:"numobjects.mulPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_394224.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_394401 = self_no_cast_394224;
		F.line = 661;
		var casted_394402 = null;
		if (of_py_float_object_381726(other_394225)) {
		F.line = 663;
		casted_394402 = other_394225;
		}
		else {
		if (of_py_int_object_377315(other_394225)) {
		F.line = 665;
		casted_394402 = new_py_float_382843(other_394225);
		}
		else {
			F.line = 667;
			F.line = 667;
			var fmt_res_394405 = mnewString(0);
			F.line = 667;
			if (fmt_res_394405 != null) { fmt_res_394405 = (fmt_res_394405).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_394405 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_394405 != null) { fmt_res_394405 = (fmt_res_394405).concat(other_394225.pyType.name); } else { fmt_res_394405 = other_394225.pyType.name.slice(); };
			var msg_394602 = (makeNimstrLit("mul")).concat(fmt_res_394405);
			F.line = 668;
			F.line = 106;
			var excp_394604 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_394604.tk = 3;
			F.line = 108;
			excp_394604.thrown = true;
			F.line = 109;
			excp_394604.msg = new_py_string_176075(msg_394602);
			result_394226 = excp_394604;
			break BeforeRet;
		}
		}
		result_394226 = new_py_float_382860((self_394401.v * casted_394402.v));
	} while (false);
	framePtr = F.prev;

	return result_394226;

}

function truediv_py_float_object_magic_394622(self_no_cast_394624, other_394625) {
	var result_394626 = null;

	var F={procname:"numobjects.truedivPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_394624.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_394801 = self_no_cast_394624;
		F.line = 661;
		var casted_394802 = null;
		if (of_py_float_object_381726(other_394625)) {
		F.line = 663;
		casted_394802 = other_394625;
		}
		else {
		if (of_py_int_object_377315(other_394625)) {
		F.line = 665;
		casted_394802 = new_py_float_382843(other_394625);
		}
		else {
			F.line = 667;
			F.line = 667;
			var fmt_res_394805 = mnewString(0);
			F.line = 667;
			if (fmt_res_394805 != null) { fmt_res_394805 = (fmt_res_394805).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_394805 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_394805 != null) { fmt_res_394805 = (fmt_res_394805).concat(other_394625.pyType.name); } else { fmt_res_394805 = other_394625.pyType.name.slice(); };
			var msg_395002 = (makeNimstrLit("truediv")).concat(fmt_res_394805);
			F.line = 668;
			F.line = 106;
			var excp_395004 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_395004.tk = 3;
			F.line = 108;
			excp_395004.thrown = true;
			F.line = 109;
			excp_395004.msg = new_py_string_176075(msg_395002);
			result_394626 = excp_395004;
			break BeforeRet;
		}
		}
		result_394626 = new_py_float_382860((self_394801.v / casted_394802.v));
	} while (false);
	framePtr = F.prev;

	return result_394626;

}

function floordiv_py_float_object_magic_395022(self_no_cast_395024, other_395025) {
	var result_395026 = null;

	var F={procname:"numobjects.floordivPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_395024.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_395201 = self_no_cast_395024;
		F.line = 661;
		var casted_395202 = null;
		if (of_py_float_object_381726(other_395025)) {
		F.line = 663;
		casted_395202 = other_395025;
		}
		else {
		if (of_py_int_object_377315(other_395025)) {
		F.line = 665;
		casted_395202 = new_py_float_382843(other_395025);
		}
		else {
			F.line = 667;
			F.line = 667;
			var fmt_res_395205 = mnewString(0);
			F.line = 667;
			if (fmt_res_395205 != null) { fmt_res_395205 = (fmt_res_395205).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_395205 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_395205 != null) { fmt_res_395205 = (fmt_res_395205).concat(other_395025.pyType.name); } else { fmt_res_395205 = other_395025.pyType.name.slice(); };
			var msg_395402 = (makeNimstrLit("floordiv")).concat(fmt_res_395205);
			F.line = 668;
			F.line = 106;
			var excp_395404 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_395404.tk = 3;
			F.line = 108;
			excp_395404.thrown = true;
			F.line = 109;
			excp_395404.msg = new_py_string_176075(msg_395402);
			result_395026 = excp_395404;
			break BeforeRet;
		}
		}
		result_395026 = new_py_float_382860(Math.floor((self_395201.v / casted_395202.v)));
	} while (false);
	framePtr = F.prev;

	return result_395026;

}

function pow_py_float_object_magic_395422(self_no_cast_395424, other_395425) {
	var result_395426 = null;

	var F={procname:"numobjects.powPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_395424.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_395601 = self_no_cast_395424;
		F.line = 661;
		var casted_395602 = null;
		if (of_py_float_object_381726(other_395425)) {
		F.line = 663;
		casted_395602 = other_395425;
		}
		else {
		if (of_py_int_object_377315(other_395425)) {
		F.line = 665;
		casted_395602 = new_py_float_382843(other_395425);
		}
		else {
			F.line = 667;
			F.line = 667;
			var fmt_res_395605 = mnewString(0);
			F.line = 667;
			if (fmt_res_395605 != null) { fmt_res_395605 = (fmt_res_395605).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_395605 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_395605 != null) { fmt_res_395605 = (fmt_res_395605).concat(other_395425.pyType.name); } else { fmt_res_395605 = other_395425.pyType.name.slice(); };
			var msg_395802 = (makeNimstrLit("pow")).concat(fmt_res_395605);
			F.line = 668;
			F.line = 106;
			var excp_395804 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_395804.tk = 3;
			F.line = 108;
			excp_395804.thrown = true;
			F.line = 109;
			excp_395804.msg = new_py_string_176075(msg_395802);
			result_395426 = excp_395804;
			break BeforeRet;
		}
		}
		result_395426 = new_py_float_382860(Math.pow(self_395601.v, casted_395602.v));
	} while (false);
	framePtr = F.prev;

	return result_395426;

}

function positive_py_float_object_magic_395820(self_no_cast_395822) {
	var result_395823 = null;

	var F={procname:"numobjects.positivePyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_395822.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_396001 = self_no_cast_395822;
		result_395823 = self_396001;
	framePtr = F.prev;

	return result_395823;

}

function negative_py_float_object_magic_396016(self_no_cast_396018) {
	var result_396019 = null;

	var F={procname:"numobjects.negativePyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_396018.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_396201 = self_no_cast_396018;
		result_396019 = new_py_float_382860(-(self_396201.v));
	framePtr = F.prev;

	return result_396019;

}

function bool_py_float_object_magic_396216(self_no_cast_396218) {
	var result_396219 = null;

	var F={procname:"numobjects.boolPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_396218.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_396401 = self_no_cast_396218;
		if ((self_396401.v == 0.0)) {
		F.line = 714;
		result_396219 = py_false_obj_354075;
		break BeforeRet;
		}
		else {
			F.line = 716;
			result_396219 = py_true_obj_354074;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_396219;

}

function lt_py_float_object_magic_396418(self_no_cast_396420, other_396421) {
	var result_396422 = null;

	var F={procname:"numobjects.ltPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_396420.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_396601 = self_no_cast_396420;
		F.line = 661;
		var casted_396602 = null;
		if (of_py_float_object_381726(other_396421)) {
		F.line = 663;
		casted_396602 = other_396421;
		}
		else {
		if (of_py_int_object_377315(other_396421)) {
		F.line = 665;
		casted_396602 = new_py_float_382843(other_396421);
		}
		else {
			F.line = 667;
			F.line = 667;
			var fmt_res_396605 = mnewString(0);
			F.line = 667;
			if (fmt_res_396605 != null) { fmt_res_396605 = (fmt_res_396605).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_396605 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_396605 != null) { fmt_res_396605 = (fmt_res_396605).concat(other_396421.pyType.name); } else { fmt_res_396605 = other_396421.pyType.name.slice(); };
			var msg_396802 = (makeNimstrLit("lt")).concat(fmt_res_396605);
			F.line = 668;
			F.line = 106;
			var excp_396804 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_396804.tk = 3;
			F.line = 108;
			excp_396804.thrown = true;
			F.line = 109;
			excp_396804.msg = new_py_string_176075(msg_396802);
			result_396422 = excp_396804;
			break BeforeRet;
		}
		}
		if ((self_396601.v < casted_396602.v)) {
		F.line = 721;
		result_396422 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 723;
			result_396422 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_396422;

}

function eq_py_float_object_magic_396822(self_no_cast_396824, other_396825) {
	var result_396826 = null;

	var F={procname:"numobjects.eqPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_396824.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_397001 = self_no_cast_396824;
		F.line = 661;
		var casted_397002 = null;
		if (of_py_float_object_381726(other_396825)) {
		F.line = 663;
		casted_397002 = other_396825;
		}
		else {
		if (of_py_int_object_377315(other_396825)) {
		F.line = 665;
		casted_397002 = new_py_float_382843(other_396825);
		}
		else {
			F.line = 667;
			F.line = 667;
			var fmt_res_397005 = mnewString(0);
			F.line = 667;
			if (fmt_res_397005 != null) { fmt_res_397005 = (fmt_res_397005).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_397005 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_397005 != null) { fmt_res_397005 = (fmt_res_397005).concat(other_396825.pyType.name); } else { fmt_res_397005 = other_396825.pyType.name.slice(); };
			var msg_397202 = (makeNimstrLit("eq")).concat(fmt_res_397005);
			F.line = 668;
			F.line = 106;
			var excp_397204 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_397204.tk = 3;
			F.line = 108;
			excp_397204.thrown = true;
			F.line = 109;
			excp_397204.msg = new_py_string_176075(msg_397202);
			result_396826 = excp_397204;
			break BeforeRet;
		}
		}
		if ((self_397001.v == casted_397002.v)) {
		F.line = 728;
		result_396826 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 730;
			result_396826 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_396826;

}

function gt_py_float_object_magic_397222(self_no_cast_397224, other_397225) {
	var result_397226 = null;

	var F={procname:"numobjects.gtPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_397224.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_397401 = self_no_cast_397224;
		F.line = 661;
		var casted_397402 = null;
		if (of_py_float_object_381726(other_397225)) {
		F.line = 663;
		casted_397402 = other_397225;
		}
		else {
		if (of_py_int_object_377315(other_397225)) {
		F.line = 665;
		casted_397402 = new_py_float_382843(other_397225);
		}
		else {
			F.line = 667;
			F.line = 667;
			var fmt_res_397405 = mnewString(0);
			F.line = 667;
			if (fmt_res_397405 != null) { fmt_res_397405 = (fmt_res_397405).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_397405 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_397405 != null) { fmt_res_397405 = (fmt_res_397405).concat(other_397225.pyType.name); } else { fmt_res_397405 = other_397225.pyType.name.slice(); };
			var msg_397602 = (makeNimstrLit("gt")).concat(fmt_res_397405);
			F.line = 668;
			F.line = 106;
			var excp_397604 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_397604.tk = 3;
			F.line = 108;
			excp_397604.thrown = true;
			F.line = 109;
			excp_397604.msg = new_py_string_176075(msg_397602);
			result_397226 = excp_397604;
			break BeforeRet;
		}
		}
		if ((casted_397402.v < self_397401.v)) {
		F.line = 735;
		result_397226 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 737;
			result_397226 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_397226;

}

function str_py_float_object_magic_397620(self_no_cast_397622) {
	var result_397623 = null;

	var F={procname:"numobjects.strPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_397622.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_397801 = self_no_cast_397622;
		result_397623 = new_py_string_176075(HEX24_157579(self_397801));
	framePtr = F.prev;

	return result_397623;

}

function repr_py_float_object_magic_397816(self_no_cast_397818) {
	var result_397819 = null;

	var F={procname:"numobjects.reprPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_397818.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_398001 = self_no_cast_397818;
		result_397819 = new_py_string_176075(HEX24_157579(self_398001));
	framePtr = F.prev;

	return result_397819;

}

function hash_144378(x_144380) {
	var result_144381 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 223;
		var y_144382 = [(x_144380 + 1.0000000000000000e+00)];
		F.line = 224;
		result_144381 = y_144382[0];
	framePtr = F.prev;

	return result_144381;

}

function hash_py_float_object_magic_398016(self_no_cast_398018) {
	var result_398019 = null;

	var F={procname:"numobjects.hashPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_398018.m_type, NTI381718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_398201 = self_no_cast_398018;
		result_398019 = new_py_int_378257(hash_144378(self_398201.v));
	framePtr = F.prev;

	return result_398019;

}
py_float_object_type_381724.magicMethods.Field0 = add_py_float_object_magic_393470;
py_float_object_type_381724.magicMethods.Field1 = sub_py_float_object_magic_393822;
py_float_object_type_381724.magicMethods.Field2 = mul_py_float_object_magic_394222;
py_float_object_type_381724.magicMethods.Field3 = truediv_py_float_object_magic_394622;
py_float_object_type_381724.magicMethods.Field4 = floordiv_py_float_object_magic_395022;
py_float_object_type_381724.magicMethods.Field6 = pow_py_float_object_magic_395422;
py_float_object_type_381724.magicMethods.Field9 = positive_py_float_object_magic_395820;
py_float_object_type_381724.magicMethods.Field8 = negative_py_float_object_magic_396016;
py_float_object_type_381724.magicMethods.Field12 = bool_py_float_object_magic_396216;
py_float_object_type_381724.magicMethods.Field16 = lt_py_float_object_magic_396418;
py_float_object_type_381724.magicMethods.Field18 = eq_py_float_object_magic_396822;
py_float_object_type_381724.magicMethods.Field20 = gt_py_float_object_magic_397222;
py_float_object_type_381724.magicMethods.Field24 = str_py_float_object_magic_397620;
py_float_object_type_381724.magicMethods.Field25 = repr_py_float_object_magic_397816;
py_float_object_type_381724.magicMethods.Field30 = hash_py_float_object_magic_398016;

function not_py_bool_object_magic_399384(self_no_cast_399386) {
		var Tmp1;

	var result_399387 = null;

	var F={procname:"boolobjectImpl.notPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_399386.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_399601 = self_no_cast_399386;
		if ((self_399601 == py_true_obj_354074)) {
		Tmp1 = py_false_obj_354075;
		}
		else {
		Tmp1 = py_true_obj_354074;
		}
		
		result_399387 = Tmp1;
	framePtr = F.prev;

	return result_399387;

}

function bool_py_bool_object_magic_399626(self_no_cast_399628) {
	var result_399629 = null;

	var F={procname:"boolobjectImpl.boolPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_399628.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_399801 = self_no_cast_399628;
		result_399629 = self_399801;
	framePtr = F.prev;

	return result_399629;

}

function and_py_bool_object_magic_399816(self_no_cast_399818, other_399819) {
			var Tmp1;

	var result_399820 = null;

	var F={procname:"boolobjectImpl.andPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_399818.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_400001 = self_no_cast_399818;
		F.line = 30;
		F.line = 45;
		if ((other_399819.pyType === null)) {
		F.line = 2895;
		var e_400028 = null;
		F.line = 2896;
		e_400028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_400028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_400028.parent = null;
		F.line = 26;
		raiseException(e_400028, "InternalError");
		}
		
		F.line = 27;
		var fun_400202 = other_399819.pyType.magicMethods.Field12;
		if ((fun_400202 === null)) {
		F.line = 29;
		var obj_type_str_400211 = other_399819.pyType.name;
		F.line = 30;
		var method_str_400213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_400215 = (makeNimstrLit("No ")).concat(method_str_400213,makeNimstrLit(" method for "),obj_type_str_400211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_400217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_400217.tk = 3;
		F.line = 108;
		excp_400217.thrown = true;
		F.line = 109;
		excp_400217.msg = new_py_string_176075(msg_400215);
		var excp_400220 = excp_400217;
		F.line = 36;
		result_399820 = excp_400220;
		break BeforeRet;
		}
		
		var fun_400402 = fun_400202;
		F.line = 46;
		var res_400404 = fun_400402(other_399819);
		var other_bool_obj_400601 = res_400404;
		if (!(of_py_bool_object_353106(other_bool_obj_400601))) {
		F.line = 165;
		var type_name_400604 = nimCopy(null, other_bool_obj_400601.pyType.name, NTI138);
		F.line = 166;
		F.line = 166;
		var fmt_res_400607 = mnewString(0);
		F.line = 166;
		if (fmt_res_400607 != null) { fmt_res_400607 = (fmt_res_400607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_400607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_400607 != null) { fmt_res_400607 = (fmt_res_400607).concat(type_name_400604); } else { fmt_res_400607 = type_name_400604.slice(); };
		F.line = 166;
		if (fmt_res_400607 != null) { fmt_res_400607 = (fmt_res_400607).concat(makeNimstrLit(")")); } else { fmt_res_400607 = makeNimstrLit(")"); };
		var msg_400802 = (makeNimstrLit("__bool__")).concat(fmt_res_400607);
		F.line = 167;
		F.line = 106;
		var excp_400804 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_400804.tk = 3;
		F.line = 108;
		excp_400804.thrown = true;
		F.line = 109;
		excp_400804.msg = new_py_string_176075(msg_400802);
		result_399820 = excp_400804;
		break BeforeRet;
		}
		
			if (!self_400001.b) Tmp1 = false; else {				Tmp1 = other_bool_obj_400601.b;			}		if (Tmp1) {
		F.line = 33;
		result_399820 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 35;
			result_399820 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_399820;

}

function xor_py_bool_object_magic_400820(self_no_cast_400822, other_400823) {
	var result_400824 = null;

	var F={procname:"boolobjectImpl.xorPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_400822.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_401001 = self_no_cast_400822;
		F.line = 38;
		F.line = 45;
		if ((other_400823.pyType === null)) {
		F.line = 2895;
		var e_401028 = null;
		F.line = 2896;
		e_401028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_401028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_401028.parent = null;
		F.line = 26;
		raiseException(e_401028, "InternalError");
		}
		
		F.line = 27;
		var fun_401202 = other_400823.pyType.magicMethods.Field12;
		if ((fun_401202 === null)) {
		F.line = 29;
		var obj_type_str_401211 = other_400823.pyType.name;
		F.line = 30;
		var method_str_401213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_401215 = (makeNimstrLit("No ")).concat(method_str_401213,makeNimstrLit(" method for "),obj_type_str_401211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_401217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_401217.tk = 3;
		F.line = 108;
		excp_401217.thrown = true;
		F.line = 109;
		excp_401217.msg = new_py_string_176075(msg_401215);
		var excp_401220 = excp_401217;
		F.line = 36;
		result_400824 = excp_401220;
		break BeforeRet;
		}
		
		var fun_401402 = fun_401202;
		F.line = 46;
		var res_401404 = fun_401402(other_400823);
		var other_bool_obj_401601 = res_401404;
		if (!(of_py_bool_object_353106(other_bool_obj_401601))) {
		F.line = 165;
		var type_name_401604 = nimCopy(null, other_bool_obj_401601.pyType.name, NTI138);
		F.line = 166;
		F.line = 166;
		var fmt_res_401607 = mnewString(0);
		F.line = 166;
		if (fmt_res_401607 != null) { fmt_res_401607 = (fmt_res_401607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_401607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_401607 != null) { fmt_res_401607 = (fmt_res_401607).concat(type_name_401604); } else { fmt_res_401607 = type_name_401604.slice(); };
		F.line = 166;
		if (fmt_res_401607 != null) { fmt_res_401607 = (fmt_res_401607).concat(makeNimstrLit(")")); } else { fmt_res_401607 = makeNimstrLit(")"); };
		var msg_401802 = (makeNimstrLit("__bool__")).concat(fmt_res_401607);
		F.line = 167;
		F.line = 106;
		var excp_401804 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_401804.tk = 3;
		F.line = 108;
		excp_401804.thrown = true;
		F.line = 109;
		excp_401804.msg = new_py_string_176075(msg_401802);
		result_400824 = excp_401804;
		break BeforeRet;
		}
		
		if ((self_401001.b != other_bool_obj_401601.b)) {
		F.line = 41;
		result_400824 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 43;
			result_400824 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_400824;

}

function or_py_bool_object_magic_401820(self_no_cast_401822, other_401823) {
			var Tmp1;

	var result_401824 = null;

	var F={procname:"boolobjectImpl.orPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_401822.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_402001 = self_no_cast_401822;
		F.line = 46;
		F.line = 45;
		if ((other_401823.pyType === null)) {
		F.line = 2895;
		var e_402028 = null;
		F.line = 2896;
		e_402028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_402028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_402028.parent = null;
		F.line = 26;
		raiseException(e_402028, "InternalError");
		}
		
		F.line = 27;
		var fun_402202 = other_401823.pyType.magicMethods.Field12;
		if ((fun_402202 === null)) {
		F.line = 29;
		var obj_type_str_402211 = other_401823.pyType.name;
		F.line = 30;
		var method_str_402213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_402215 = (makeNimstrLit("No ")).concat(method_str_402213,makeNimstrLit(" method for "),obj_type_str_402211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_402217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_402217.tk = 3;
		F.line = 108;
		excp_402217.thrown = true;
		F.line = 109;
		excp_402217.msg = new_py_string_176075(msg_402215);
		var excp_402220 = excp_402217;
		F.line = 36;
		result_401824 = excp_402220;
		break BeforeRet;
		}
		
		var fun_402402 = fun_402202;
		F.line = 46;
		var res_402404 = fun_402402(other_401823);
		var other_bool_obj_402601 = res_402404;
		if (!(of_py_bool_object_353106(other_bool_obj_402601))) {
		F.line = 165;
		var type_name_402604 = nimCopy(null, other_bool_obj_402601.pyType.name, NTI138);
		F.line = 166;
		F.line = 166;
		var fmt_res_402607 = mnewString(0);
		F.line = 166;
		if (fmt_res_402607 != null) { fmt_res_402607 = (fmt_res_402607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_402607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_402607 != null) { fmt_res_402607 = (fmt_res_402607).concat(type_name_402604); } else { fmt_res_402607 = type_name_402604.slice(); };
		F.line = 166;
		if (fmt_res_402607 != null) { fmt_res_402607 = (fmt_res_402607).concat(makeNimstrLit(")")); } else { fmt_res_402607 = makeNimstrLit(")"); };
		var msg_402802 = (makeNimstrLit("__bool__")).concat(fmt_res_402607);
		F.line = 167;
		F.line = 106;
		var excp_402804 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_402804.tk = 3;
		F.line = 108;
		excp_402804.thrown = true;
		F.line = 109;
		excp_402804.msg = new_py_string_176075(msg_402802);
		result_401824 = excp_402804;
		break BeforeRet;
		}
		
			if (self_402001.b) Tmp1 = true; else {				Tmp1 = other_bool_obj_402601.b;			}		if (Tmp1) {
		F.line = 49;
		result_401824 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 51;
			result_401824 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_401824;

}

function eq_py_bool_object_magic_402820(self_no_cast_402822, other_402823) {
	var result_402824 = null;

	var F={procname:"boolobjectImpl.eqPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_402822.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_403001 = self_no_cast_402822;
		F.line = 54;
		F.line = 45;
		if ((other_402823.pyType === null)) {
		F.line = 2895;
		var e_403028 = null;
		F.line = 2896;
		e_403028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_403028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_403028.parent = null;
		F.line = 26;
		raiseException(e_403028, "InternalError");
		}
		
		F.line = 27;
		var fun_403202 = other_402823.pyType.magicMethods.Field12;
		if ((fun_403202 === null)) {
		F.line = 29;
		var obj_type_str_403211 = other_402823.pyType.name;
		F.line = 30;
		var method_str_403213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_403215 = (makeNimstrLit("No ")).concat(method_str_403213,makeNimstrLit(" method for "),obj_type_str_403211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_403217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_403217.tk = 3;
		F.line = 108;
		excp_403217.thrown = true;
		F.line = 109;
		excp_403217.msg = new_py_string_176075(msg_403215);
		var excp_403220 = excp_403217;
		F.line = 36;
		result_402824 = excp_403220;
		break BeforeRet;
		}
		
		var fun_403402 = fun_403202;
		F.line = 46;
		var res_403404 = fun_403402(other_402823);
		var other_bool_obj_403601 = res_403404;
		if (!(of_py_bool_object_353106(other_bool_obj_403601))) {
		F.line = 165;
		var type_name_403604 = nimCopy(null, other_bool_obj_403601.pyType.name, NTI138);
		F.line = 166;
		F.line = 166;
		var fmt_res_403607 = mnewString(0);
		F.line = 166;
		if (fmt_res_403607 != null) { fmt_res_403607 = (fmt_res_403607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_403607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_403607 != null) { fmt_res_403607 = (fmt_res_403607).concat(type_name_403604); } else { fmt_res_403607 = type_name_403604.slice(); };
		F.line = 166;
		if (fmt_res_403607 != null) { fmt_res_403607 = (fmt_res_403607).concat(makeNimstrLit(")")); } else { fmt_res_403607 = makeNimstrLit(")"); };
		var msg_403802 = (makeNimstrLit("__bool__")).concat(fmt_res_403607);
		F.line = 167;
		F.line = 106;
		var excp_403804 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_403804.tk = 3;
		F.line = 108;
		excp_403804.thrown = true;
		F.line = 109;
		excp_403804.msg = new_py_string_176075(msg_403802);
		result_402824 = excp_403804;
		break BeforeRet;
		}
		
		F.line = 56;
		var other_bool_403806 = other_bool_obj_403601.b;
		if ((self_403001.b == other_bool_403806)) {
		F.line = 58;
		result_402824 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 60;
			result_402824 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_402824;

}

function repr_py_bool_object_magic_403821(self_no_cast_403823) {
	var result_403824 = null;

	var F={procname:"boolobjectImpl.reprPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_403823.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_404001 = self_no_cast_403823;
		if (self_404001.b) {
		F.line = 64;
		result_403824 = new_py_string_176075(makeNimstrLit("True"));
		break BeforeRet;
		}
		else {
			F.line = 66;
			result_403824 = new_py_string_176075(makeNimstrLit("False"));
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_403824;

}

function hash_py_bool_object_magic_404016(self_no_cast_404018) {
	var result_404019 = null;

	var F={procname:"boolobjectImpl.hashPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_404018.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_404201 = self_no_cast_404018;
		result_404019 = new_py_int_378257(((self_404201.b)|0));
	framePtr = F.prev;

	return result_404019;

}
py_bool_object_type_353104.magicMethods.Field7 = not_py_bool_object_magic_399384;
py_bool_object_type_353104.magicMethods.Field12 = bool_py_bool_object_magic_399626;
py_bool_object_type_353104.magicMethods.Field13 = and_py_bool_object_magic_399816;
py_bool_object_type_353104.magicMethods.Field14 = xor_py_bool_object_magic_400820;
py_bool_object_type_353104.magicMethods.Field15 = or_py_bool_object_magic_401820;
py_bool_object_type_353104.magicMethods.Field18 = eq_py_bool_object_magic_402820;
py_bool_object_type_353104.magicMethods.Field25 = repr_py_bool_object_magic_403821;
py_bool_object_type_353104.magicMethods.Field30 = hash_py_bool_object_magic_404016;

function of_py_str_object_175092(obj_175029) {
	var result_175094 = false;

	var F={procname:"stringobject.ofPyStrObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_175094 = (obj_175029.pyType.kind == 10);
	framePtr = F.prev;

	return result_175094;

}

function eq_py_str_object_magic_406327(self_no_cast_406329, other_406330) {
	var result_406331 = null;

	var F={procname:"stringobjectImpl.eqPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_406329.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_406401 = self_no_cast_406329;
		if (!(of_py_str_object_175092(other_406330))) {
		F.line = 24;
		result_406331 = py_false_obj_354075;
		break BeforeRet;
		}
		
		if (eqStrings(self_406401.str, other_406330.str)) {
		F.line = 26;
		result_406331 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 28;
			result_406331 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_406331;

}

function str_py_str_object_magic_406418(self_no_cast_406420) {
	var result_406421 = null;

	var F={procname:"stringobjectImpl.strPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_406420.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_406601 = self_no_cast_406420;
		result_406421 = self_406601;
	framePtr = F.prev;

	return result_406421;

}

function repr_py_str_object_magic_406616(self_no_cast_406618) {
	var result_406619 = null;

	var F={procname:"stringobjectImpl.reprPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_406618.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_406801 = self_no_cast_406618;
		result_406619 = new_py_string_176075(HEX24_157579(self_406801));
	framePtr = F.prev;

	return result_406619;

}

function hash_406040(self_406042) {
	var result_406043 = 0;

	var F={procname:"stringobjectImpl.hash",prev:framePtr,filename:"../Objects/stringobjectImpl.nim",line:0};
	framePtr = F;
		F.line = 10;
		result_406043 = hash_143900(self_406042.str);
	framePtr = F.prev;

	return result_406043;

}

function hash_py_str_object_magic_406816(self_no_cast_406818) {
	var result_406819 = null;

	var F={procname:"stringobjectImpl.hashPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_406818.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_407001 = self_no_cast_406818;
		result_406819 = new_py_int_378257(hash_406040(self_407001));
	framePtr = F.prev;

	return result_406819;

}

function new_py_str_object_magic_407016(args_407031) {
	var result_407032 = null;

	var F={procname:"stringobjectImpl.newPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_407031 != null ? args_407031.length : 0) == 2))) {
		F.line = 190;
		var msg_407044 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_407049 = mnewString(0);
		F.line = 192;
		if (fmt_res_407049 != null) { fmt_res_407049 = (fmt_res_407049).concat(makeNimstrLit(" argument (")); } else { fmt_res_407049 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_407049 != null) { fmt_res_407049 = (fmt_res_407049).concat(cstrToNimstr(((args_407031 != null ? args_407031.length : 0))+"")); } else { fmt_res_407049 = cstrToNimstr(((args_407031 != null ? args_407031.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_407049 != null) { fmt_res_407049 = (fmt_res_407049).concat(makeNimstrLit(" given)")); } else { fmt_res_407049 = makeNimstrLit(" given)"); };
		msg_407044 = nimCopy(null, (makeNimstrLit("New takes exactly 2")).concat(fmt_res_407049), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_407210 = mnewString(0);
			F.line = 194;
			if (fmt_res_407210 != null) { fmt_res_407210 = (fmt_res_407210).concat(makeNimstrLit(" argument (")); } else { fmt_res_407210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_407210 != null) { fmt_res_407210 = (fmt_res_407210).concat(cstrToNimstr(((args_407031 != null ? args_407031.length : 0))+"")); } else { fmt_res_407210 = cstrToNimstr(((args_407031 != null ? args_407031.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_407210 != null) { fmt_res_407210 = (fmt_res_407210).concat(makeNimstrLit(" given)")); } else { fmt_res_407210 = makeNimstrLit(" given)"); };
			msg_407044 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_407210), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_407409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_407409.tk = 3;
		F.line = 108;
		excp_407409.thrown = true;
		F.line = 109;
		excp_407409.msg = new_py_string_176075(msg_407044);
		result_407032 = excp_407409;
		break BeforeRet;
		}
		
		F.line = 230;
		var tp_407411 = args_407031[chckIndx(0, 0, args_407031.length+0-1)-0];
		F.line = 230;
		var obj_407412 = args_407031[chckIndx(1, 0, args_407031.length+0-1)-0];
		F.line = 45;
		if ((obj_407412.pyType === null)) {
		F.line = 2895;
		var e_407439 = null;
		F.line = 2896;
		e_407439 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_407439.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_407439.parent = null;
		F.line = 26;
		raiseException(e_407439, "InternalError");
		}
		
		F.line = 27;
		var fun_407602 = obj_407412.pyType.magicMethods.Field24;
		if ((fun_407602 === null)) {
		F.line = 29;
		var obj_type_str_407611 = obj_407412.pyType.name;
		F.line = 30;
		var method_str_407613 = makeNimstrLit("str");
		F.line = 31;
		var msg_407615 = (makeNimstrLit("No ")).concat(method_str_407613,makeNimstrLit(" method for "),obj_type_str_407611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_407617 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_407617.tk = 3;
		F.line = 108;
		excp_407617.thrown = true;
		F.line = 109;
		excp_407617.msg = new_py_string_176075(msg_407615);
		var excp_407620 = excp_407617;
		F.line = 36;
		result_407032 = excp_407620;
		break BeforeRet;
		}
		
		var fun_407802 = fun_407602;
		F.line = 46;
		var res_407804 = fun_407802(obj_407412);
		result_407032 = res_407804;
	} while (false);
	framePtr = F.prev;

	return result_407032;

}
py_str_object_type_175090.magicMethods.Field18 = eq_py_str_object_magic_406327;
py_str_object_type_175090.magicMethods.Field24 = str_py_str_object_magic_406418;
py_str_object_type_175090.magicMethods.Field25 = repr_py_str_object_magic_406616;
py_str_object_type_175090.magicMethods.Field30 = hash_py_str_object_magic_406816;
py_str_object_type_175090.magicMethods.Field26 = new_py_str_object_magic_407016;

function new_468406() {
	var result_468411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_468601 = null;
		F.line = 211;
		r_468601 = {m_type: NTI468190, items: null, idx: 0, id: 0, pyType: null};
		F.line = 212;
		result_468411 = r_468601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_468411;

}

function new_py_seq_iter_simple_468401() {
	var result_468403 = null;

	var F={procname:"iterobject.newPySeqIterSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_468624 = new_468406();
		F.line = 561;
		obj_468624.pyType = py_seq_iter_object_type_468200;
		F.line = 563;
		give_id_157814(obj_468624);
		result_468403 = obj_468624;
	framePtr = F.prev;

	return result_468403;

}

function new_py_seq_iter_default_469021(args_468145) {
	var result_469024 = null;

	var F={procname:"iterobject.newPySeqIterDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_469024 = new_py_seq_iter_simple_468401();
	framePtr = F.prev;

	return result_469024;

}

function iter_py_seq_iter_object_magic_469244(self_no_cast_469246) {
	var result_469247 = null;

	var F={procname:"iterobject.iterPySeqIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_469246.m_type, NTI468190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PySeqIterObject` "));
		}
		
		F.line = 438;
		var self_469401 = self_no_cast_469246;
		result_469247 = self_469401;
	framePtr = F.prev;

	return result_469247;

}

function iternext_py_seq_iter_object_magic_469416(self_no_cast_469418) {
	var result_469419 = null;

	var F={procname:"iterobject.iternextPySeqIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_469418.m_type, NTI468190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PySeqIterObject` "));
		}
		
		F.line = 438;
		var self_469601 = self_no_cast_469418;
		if ((self_469601.idx == (self_469601.items != null ? self_469601.items.length : 0))) {
		F.line = 14;
		F.line = 99;
		var excp_469610 = new_py_stop_iter_error_simple_364601();
		F.line = 100;
		excp_469610.tk = 7;
		F.line = 101;
		excp_469610.thrown = true;
		result_469419 = excp_469610;
		break BeforeRet;
		}
		
		F.line = 15;
		result_469419 = self_469601.items[chckIndx(self_469601.idx, 0, self_469601.items.length+0-1)-0];
		F.line = 16;
		self_469601.idx = addInt(self_469601.idx, 1);
	} while (false);
	framePtr = F.prev;

	return result_469419;

}
var py_seq_iter_object_type_468200 = new_py_type_159261(makeNimstrLit("SeqIter"));
py_seq_iter_object_type_468200.magicMethods.Field26 = new_py_seq_iter_default_469021;
py_seq_iter_object_type_468200.magicMethods.Field36 = iter_py_seq_iter_object_magic_469244;
py_seq_iter_object_type_468200.magicMethods.Field37 = iternext_py_seq_iter_object_magic_469416;

function new_470206() {
	var result_470211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_470401 = null;
		F.line = 211;
		r_470401 = {m_type: NTI470097, start: null, stop: null, step: null, id: 0, pyType: null};
		F.line = 212;
		result_470211 = r_470401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_470211;

}

function new_py_slice_simple_470201() {
	var result_470203 = null;

	var F={procname:"sliceobject.newPySliceSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_470424 = new_470206();
		F.line = 561;
		obj_470424.pyType = py_slice_object_type_470107;
		F.line = 563;
		give_id_157814(obj_470424);
		result_470203 = obj_470424;
	framePtr = F.prev;

	return result_470203;

}

function new_py_slice_default_470821(args_470052) {
	var result_470824 = null;

	var F={procname:"sliceobject.newPySliceDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_470824 = new_py_slice_simple_470201();
	framePtr = F.prev;

	return result_470824;

}
var py_slice_object_type_470107 = new_py_type_159261(makeNimstrLit("Slice"));
py_slice_object_type_470107.kind = 15;
py_slice_object_type_470107.magicMethods.Field26 = new_py_slice_default_470821;

function new_472206() {
	var result_472211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_472401 = null;
		F.line = 211;
		r_472401 = {m_type: NTI472070, items: null, reprLock: false, id: 0, pyType: null};
		F.line = 212;
		result_472211 = r_472401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_472211;

}

function new_py_tuple_simple_472201() {
	var result_472203 = null;

	var F={procname:"tupleobject.newPyTupleSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_472424 = new_472206();
		F.line = 561;
		obj_472424.pyType = py_tuple_object_type_472080;
		F.line = 563;
		give_id_157814(obj_472424);
		result_472203 = obj_472424;
	framePtr = F.prev;

	return result_472203;

}

function new_py_tuple_default_472821(args_472025) {
	var result_472824 = null;

	var F={procname:"tupleobject.newPyTupleDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_472824 = new_py_tuple_simple_472201();
	framePtr = F.prev;

	return result_472824;

}
var py_tuple_object_type_472080 = new_py_type_159261(makeNimstrLit("Tuple"));
py_tuple_object_type_472080.kind = 8;
py_tuple_object_type_472080.magicMethods.Field26 = new_py_tuple_default_472821;

function of_py_tuple_object_472082(obj_472015) {
	var result_472084 = false;

	var F={procname:"tupleobject.ofPyTupleObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_472084 = (obj_472015.pyType.kind == 8);
	framePtr = F.prev;

	return result_472084;

}

function of_py_base_error_object_357264(obj_357191) {
	var result_357266 = false;

	var F={procname:"exceptions.ofPyBaseErrorObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_357266 = (obj_357191.pyType.kind == 3);
	framePtr = F.prev;

	return result_357266;

}

function of_py_exception_object_358259(obj_358261) {
	var result_358262 = false;

	var F={procname:"exceptions.ofPyExceptionObject",prev:framePtr,filename:"../Objects/exceptions.nim",line:0};
	framePtr = F;
		F.line = 56;
		result_358262 = of_py_base_error_object_357264(obj_358261);
	framePtr = F.prev;

	return result_358262;

}

function eq_py_tuple_object_magic_473075(self_no_cast_473077, other_473078) {
							var Tmp4;

	var result_473079 = null;

	var F={procname:"tupleobject.eqPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_473077.m_type, NTI472070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_473201 = self_no_cast_473077;
		if (!(of_py_tuple_object_472082(other_473078))) {
		F.line = 22;
		result_473079 = py_false_obj_354075;
		break BeforeRet;
		}
		
		F.line = 23;
		var t_other_473202 = other_473078;
		if (!(((self_473201.items != null ? self_473201.items.length : 0) == (t_other_473202.items != null ? t_other_473202.items.length : 0)))) {
		F.line = 25;
		result_473079 = py_false_obj_354075;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 26;
			var i_473234 = 0;
			F.line = 3616;
			var colontmp__474004 = 0;
			F.line = 26;
			colontmp__474004 = (self_473201.items != null ? self_473201.items.length : 0);
			F.line = 3617;
			var i_474007 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_474007 < colontmp__474004)) break L3;
						F.line = 3619;
						i_473234 = i_474007;
						F.line = 27;
						var i1_473235 = self_473201.items[chckIndx(i_473234, 0, self_473201.items.length+0-1)-0];
						F.line = 28;
						var i2_473236 = t_other_473202.items[chckIndx(i_473234, 0, t_other_473202.items.length+0-1)-0];
						F.line = 29;
						F.line = 56;
						if ((i1_473235.pyType === null)) {
						F.line = 2895;
						var e_473263 = null;
						F.line = 2896;
						e_473263 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_473263.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_473263.parent = null;
						F.line = 26;
						raiseException(e_473263, "InternalError");
						}
						
						F.line = 27;
						var fun_473402 = i1_473235.pyType.magicMethods.Field18;
						if ((fun_473402 === null)) {
						F.line = 29;
						var obj_type_str_473411 = i1_473235.pyType.name;
						F.line = 30;
						var method_str_473413 = makeNimstrLit("eq");
						F.line = 31;
						var msg_473415 = (makeNimstrLit("No ")).concat(method_str_473413,makeNimstrLit(" method for "),obj_type_str_473411,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 106;
						var excp_473417 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_473417.tk = 3;
						F.line = 108;
						excp_473417.thrown = true;
						F.line = 109;
						excp_473417.msg = new_py_string_176075(msg_473415);
						var excp_473420 = excp_473417;
						F.line = 36;
						result_473079 = excp_473420;
						break BeforeRet;
						}
						
						var fun_473602 = fun_473402;
						F.line = 57;
						var res_473604 = fun_473602(i1_473235, i2_473236);
						var ret_obj_473801 = res_473604;
							if (of_py_exception_object_358259(ret_obj_473801)) {
							Tmp4 = ret_obj_473801.thrown;
							}
							else {
							Tmp4 = false;
							}
							
						if (Tmp4) {
						F.line = 31;
						result_473079 = ret_obj_473801;
						break BeforeRet;
						}
						
						if (!(of_py_bool_object_353106(ret_obj_473801))) {
						F.line = 32;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/tupleobject.nim(32, 12) `ofPyBoolObject(retObj)` "));
						}
						
						if (!(ret_obj_473801.b)) {
						F.line = 34;
						result_473079 = py_false_obj_354075;
						break BeforeRet;
						}
						
						F.line = 3620;
						i_474007 = addInt(i_474007, 1);
					}
			} while(false);
		} while(false);
		result_473079 = py_true_obj_354074;
	} while (false);
	framePtr = F.prev;

	return result_473079;

}

function new_py_seq_iter_469648(items_469651) {
	var result_469652 = null;

	var F={procname:"iterobject.newPySeqIter",prev:framePtr,filename:"../Objects/iterobject.nim",line:0};
	framePtr = F;
		F.line = 19;
		result_469652 = new_py_seq_iter_simple_468401();
		F.line = 20;
		result_469652.items = nimCopy(null, items_469651, NTI469650);
	framePtr = F.prev;

	return result_469652;

}

function iter_py_tuple_object_magic_474022(self_no_cast_474024) {
	var result_474025 = null;

	var F={procname:"tupleobject.iterPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_474024.m_type, NTI472070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_474201 = self_no_cast_474024;
		result_474025 = new_py_seq_iter_469648(self_474201.items);
	framePtr = F.prev;

	return result_474025;

}

function repr_py_tuple_object_magic_474216(self_no_cast_474218) {
	var result_474219 = null;

	var F={procname:"tupleobject.reprPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_474218.m_type, NTI472070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_474401 = self_no_cast_474218;
		if (self_474401.reprLock) {
		F.line = 379;
		result_474219 = new_py_string_176075(makeNimstrLit("..."));
		break BeforeRet;
		}
		
		F.line = 380;
		self_474401.reprLock = true;
		F.line = 438;
		try {
		F.line = 43;
		var ss_474403 = null;
		L2: do {
			F.line = 44;
			var item_474615 = null;
			F.line = 3909;
			var colontmp__475418 = null;
			F.line = 44;
			colontmp__475418 = self_474401.items;
			F.line = 3911;
			var i_475421 = 0;
			F.line = 3912;
			var l_475423 = (colontmp__475418 != null ? colontmp__475418.length : 0);
			L3: do {
				F.line = 3913;
					L4: while (true) {
					if (!(i_475421 < l_475423)) break L4;
						F.line = 3914;
						item_474615 = colontmp__475418[chckIndx(i_475421, 0, colontmp__475418.length+0-1)-0];
						F.line = 45;
						var item_repr_474616 = null;
						F.line = 46;
						F.line = 45;
						if ((item_474615.pyType === null)) {
						F.line = 2895;
						var e_474643 = null;
						F.line = 2896;
						e_474643 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_474643.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_474643.parent = null;
						F.line = 26;
						raiseException(e_474643, "InternalError");
						}
						
						F.line = 27;
						var fun_474802 = item_474615.pyType.magicMethods.Field25;
						if ((fun_474802 === null)) {
						F.line = 29;
						var obj_type_str_474811 = item_474615.pyType.name;
						F.line = 30;
						var method_str_474813 = makeNimstrLit("repr");
						F.line = 31;
						var msg_474815 = (makeNimstrLit("No ")).concat(method_str_474813,makeNimstrLit(" method for "),obj_type_str_474811,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 106;
						var excp_474817 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_474817.tk = 3;
						F.line = 108;
						excp_474817.thrown = true;
						F.line = 109;
						excp_474817.msg = new_py_string_176075(msg_474815);
						var excp_474820 = excp_474817;
						F.line = 36;
						result_474219 = excp_474820;
						break BeforeRet;
						}
						
						var fun_475002 = fun_474802;
						F.line = 46;
						var res_475004 = fun_475002(item_474615);
						var ret_obj_475201 = res_475004;
						if (!(of_py_str_object_175092(ret_obj_475201))) {
						F.line = 159;
						var type_name_475204 = nimCopy(null, ret_obj_475201.pyType.name, NTI138);
						F.line = 160;
						F.line = 160;
						var fmt_res_475207 = mnewString(0);
						F.line = 160;
						if (fmt_res_475207 != null) { fmt_res_475207 = (fmt_res_475207).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_475207 = makeNimstrLit(" returned non-string (type "); };
						F.line = 260;
						if (fmt_res_475207 != null) { fmt_res_475207 = (fmt_res_475207).concat(type_name_475204); } else { fmt_res_475207 = type_name_475204.slice(); };
						F.line = 160;
						if (fmt_res_475207 != null) { fmt_res_475207 = (fmt_res_475207).concat(makeNimstrLit(")")); } else { fmt_res_475207 = makeNimstrLit(")"); };
						var msg_475402 = (makeNimstrLit("__repr__")).concat(fmt_res_475207);
						F.line = 161;
						F.line = 106;
						var excp_475404 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_475404.tk = 3;
						F.line = 108;
						excp_475404.thrown = true;
						F.line = 109;
						excp_475404.msg = new_py_string_176075(msg_475402);
						result_474219 = excp_475404;
						break BeforeRet;
						}
						
						F.line = 48;
						item_repr_474616 = ret_obj_475201;
						F.line = 49;
						var Tmp5 = nimCopy(null, item_repr_474616.str, NTI138);
						if (ss_474403 != null) { ss_474403.push(Tmp5); } else { ss_474403 = [Tmp5]; };
						F.line = 3915;
						i_475421 = addInt(i_475421, 1);
						if (!(((colontmp__475418 != null ? colontmp__475418.length : 0) == l_475423))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 50;
		result_474219 = new_py_string_176075((makeNimstrLit("(")).concat(nsuJoinSep(ss_474403, makeNimstrLit(", ")),makeNimstrLit(")")));
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 383;
		self_474401.reprLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_474219;

}

function len_py_tuple_object_magic_475437(self_no_cast_475439) {
	var result_475440 = null;

	var F={procname:"tupleobject.lenPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_475439.m_type, NTI472070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_475601 = self_no_cast_475439;
		result_475440 = new_py_int_378257((self_475601.items != null ? self_475601.items.length : 0));
	framePtr = F.prev;

	return result_475440;

}

function id_157596(obj_157598) {
	var result_157599 = 0;

	var F={procname:"pyobjectBase.id",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 167;
		result_157599 = obj_157598.id;
	framePtr = F.prev;

	return result_157599;

}

function hash_py_tuple_object_magic_475623(self_no_cast_475625) {
	var result_475626 = null;

	var F={procname:"tupleobject.hashPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_475625.m_type, NTI472070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_475801 = self_no_cast_475625;
		F.line = 57;
		var h_475802 = id_157596(self_475801);
		L1: do {
			F.line = 58;
			var item_475811 = null;
			F.line = 3909;
			var colontmp__475814 = null;
			F.line = 58;
			colontmp__475814 = self_475801.items;
			F.line = 3911;
			var i_475817 = 0;
			F.line = 3912;
			var l_475819 = (colontmp__475814 != null ? colontmp__475814.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_475817 < l_475819)) break L3;
						F.line = 3914;
						item_475811 = colontmp__475814[chckIndx(i_475817, 0, colontmp__475814.length+0-1)-0];
						F.line = 59;
						h_475802 = (h_475802 ^ id_157596(item_475811));
						F.line = 3915;
						i_475817 = addInt(i_475817, 1);
						if (!(((colontmp__475814 != null ? colontmp__475814.length : 0) == l_475819))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 60;
		result_475626 = new_py_int_378257(h_475802);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_475626;

}

function HEX2AHEX3D_382725(x_382730, x_382730_Idx, y_382732) {
	var F={procname:"*=.*=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3796;
		x_382730[x_382730_Idx] = mulInt(x_382730[x_382730_Idx], y_382732);
	framePtr = F.prev;

	
}

function to_int_382674(py_int_382676) {
	var result_382677 = [0];

	var F={procname:"numobjects.toInt",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 495;
			var i_382695 = 0;
			F.line = 2065;
			var colontmp__382749 = 0;
			F.line = 495;
			colontmp__382749 = subInt((py_int_382676.digits != null ? py_int_382676.digits.length : 0), 1);
			F.line = 2077;
			var res_382752 = colontmp__382749;
			L2: do {
				F.line = 2078;
					L3: while (true) {
					if (!(0 <= res_382752)) break L3;
						F.line = 2079;
						i_382695 = res_382752;
						F.line = 496;
						result_382677[0] = (result_382677[0] << 16);
						F.line = 497;
						result_382677[0] = addInt(result_382677[0], ((py_int_382676.digits[chckIndx(i_382695, 0, py_int_382676.digits.length+0-1)-0])|0));
						F.line = 2080;
						res_382752 = subInt(res_382752, 1);
					}
			} while(false);
		} while(false);
		if ((py_int_382676.sign == -1)) {
		F.line = 499;
		HEX2AHEX3D_382725(result_382677, 0, -1);
		}
		
	framePtr = F.prev;

	return result_382677[0];

}

function of_py_slice_object_470109(obj_470042) {
	var result_470111 = false;

	var F={procname:"sliceobject.ofPySliceObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_470111 = (obj_470042.pyType.kind == 15);
	framePtr = F.prev;

	return result_470111;

}

function get_slice_items_471141(slice_471143, src_471146, src_471146_Idx, dest_471147, dest_471147_Idx) {
			var Tmp1;
			var Tmp2;

	var result_471148 = null;

	var F={procname:"sliceobject.getSliceItems",prev:framePtr,filename:"../Objects/sliceobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 39;
		F.line = 39;
		var start_471149 = 0;
		F.line = 39;
		var stop_471150 = 0;
		F.line = 39;
		var step_471151 = 0;
		F.line = 40;
		var step_obj_471152 = slice_471143.step;
		if (of_py_int_object_377315(step_obj_471152)) {
		F.line = 43;
		step_471151 = to_int_382674(step_obj_471152);
		}
		else {
			if (!(of_py_none_object_355076(step_obj_471152))) {
			F.line = 45;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/sliceobject.nim(45, 12) `ofPyNoneObject(stepObj)` "));
			}
			
			F.line = 46;
			step_471151 = 1;
		}
		
		F.line = 54;
		var start_default_471210 = 0;
		F.line = 54;
		var stop_default_471211 = 0;
		if ((0 < step_471151)) {
		F.line = 56;
		start_default_471210 = 0;
		F.line = 57;
		stop_default_471211 = (src_471146[src_471146_Idx] != null ? src_471146[src_471146_Idx].length : 0);
		}
		else {
			F.line = 59;
			start_default_471210 = subInt((src_471146[src_471146_Idx] != null ? src_471146[src_471146_Idx].length : 0), 1);
			F.line = 60;
			stop_default_471211 = -1;
		}
		
		F.line = 48;
		var name_obj_471232 = slice_471143.start;
		if (of_py_int_object_377315(name_obj_471232)) {
		F.line = 50;
		F.line = 754;
		var idx_471245 = to_int_382674(name_obj_471232);
		if ((idx_471245 < 0)) {
		F.line = 756;
		idx_471245 = addInt((src_471146[src_471146_Idx] != null ? src_471146[src_471146_Idx].length : 0), idx_471245);
		}
		
			if ((idx_471245 < 0)) Tmp1 = true; else {				Tmp1 = ((src_471146[src_471146_Idx] != null ? src_471146[src_471146_Idx].length : 0) <= idx_471245);			}		if (Tmp1) {
		F.line = 758;
		var msg_471247 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_471245)+""),makeNimstrLit(", len: "),cstrToNimstr(((src_471146[src_471146_Idx] != null ? src_471146[src_471146_Idx].length : 0))+""));
		F.line = 759;
		F.line = 106;
		var excp_471249 = new_py_index_error_simple_363601();
		F.line = 107;
		excp_471249.tk = 6;
		F.line = 108;
		excp_471249.thrown = true;
		F.line = 109;
		excp_471249.msg = new_py_string_176075(msg_471247);
		result_471148 = excp_471249;
		break BeforeRet;
		}
		
		start_471149 = idx_471245;
		}
		else {
			if (!(of_py_none_object_355076(name_obj_471232))) {
			F.line = 52;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/sliceobject.nim(52, 14) `ofPyNoneObject(nameObj471232)` "));
			}
			
			F.line = 61;
			start_471149 = start_default_471210;
		}
		
		F.line = 48;
		var name_obj_471404 = slice_471143.stop;
		if (of_py_int_object_377315(name_obj_471404)) {
		F.line = 50;
		F.line = 754;
		var idx_471417 = to_int_382674(name_obj_471404);
		if ((idx_471417 < 0)) {
		F.line = 756;
		idx_471417 = addInt((src_471146[src_471146_Idx] != null ? src_471146[src_471146_Idx].length : 0), idx_471417);
		}
		
			if ((idx_471417 < 0)) Tmp2 = true; else {				Tmp2 = ((src_471146[src_471146_Idx] != null ? src_471146[src_471146_Idx].length : 0) <= idx_471417);			}		if (Tmp2) {
		F.line = 758;
		var msg_471419 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_471417)+""),makeNimstrLit(", len: "),cstrToNimstr(((src_471146[src_471146_Idx] != null ? src_471146[src_471146_Idx].length : 0))+""));
		F.line = 759;
		F.line = 106;
		var excp_471421 = new_py_index_error_simple_363601();
		F.line = 107;
		excp_471421.tk = 6;
		F.line = 108;
		excp_471421.thrown = true;
		F.line = 109;
		excp_471421.msg = new_py_string_176075(msg_471419);
		result_471148 = excp_471421;
		break BeforeRet;
		}
		
		stop_471150 = idx_471417;
		}
		else {
			if (!(of_py_none_object_355076(name_obj_471404))) {
			F.line = 52;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/sliceobject.nim(52, 14) `ofPyNoneObject(nameObj471404)` "));
			}
			
			F.line = 62;
			stop_471150 = stop_default_471211;
		}
		
		if ((0 < step_471151)) {
		L3: do {
			F.line = 65;
				L4: while (true) {
				if (!(start_471149 < stop_471150)) break L4;
					F.line = 66;
					if (dest_471147[dest_471147_Idx] != null) { dest_471147[dest_471147_Idx].push(src_471146[src_471146_Idx][chckIndx(start_471149, 0, src_471146[src_471146_Idx].length+0-1)-0]); } else { dest_471147[dest_471147_Idx] = [src_471146[src_471146_Idx][chckIndx(start_471149, 0, src_471146[src_471146_Idx].length+0-1)-0]]; };
					F.line = 67;
					start_471149 = addInt(start_471149, step_471151);
				}
		} while(false);
		}
		else {
			L5: do {
				F.line = 69;
					L6: while (true) {
					if (!(stop_471150 < start_471149)) break L6;
						F.line = 70;
						if (dest_471147[dest_471147_Idx] != null) { dest_471147[dest_471147_Idx].push(src_471146[src_471146_Idx][chckIndx(start_471149, 0, src_471146[src_471146_Idx].length+0-1)-0]); } else { dest_471147[dest_471147_Idx] = [src_471146[src_471146_Idx][chckIndx(start_471149, 0, src_471146[src_471146_Idx].length+0-1)-0]]; };
						F.line = 71;
						start_471149 = addInt(start_471149, step_471151);
					}
			} while(false);
		}
		
		result_471148 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_471148;

}

function getitem_py_tuple_object_magic_475833(self_no_cast_475835, other_475836) {
			var Tmp1;
			var Tmp2;

	var result_475837 = null;

	var F={procname:"tupleobject.getitemPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_475835.m_type, NTI472070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_476001 = self_no_cast_475835;
		if (of_py_int_object_377315(other_475836)) {
		F.line = 65;
		F.line = 754;
		var idx_476014 = to_int_382674(other_475836);
		if ((idx_476014 < 0)) {
		F.line = 756;
		idx_476014 = addInt((self_476001.items != null ? self_476001.items.length : 0), idx_476014);
		}
		
			if ((idx_476014 < 0)) Tmp1 = true; else {				Tmp1 = ((self_476001.items != null ? self_476001.items.length : 0) <= idx_476014);			}		if (Tmp1) {
		F.line = 758;
		var msg_476016 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_476014)+""),makeNimstrLit(", len: "),cstrToNimstr(((self_476001.items != null ? self_476001.items.length : 0))+""));
		F.line = 759;
		F.line = 106;
		var excp_476018 = new_py_index_error_simple_363601();
		F.line = 107;
		excp_476018.tk = 6;
		F.line = 108;
		excp_476018.thrown = true;
		F.line = 109;
		excp_476018.msg = new_py_string_176075(msg_476016);
		result_475837 = excp_476018;
		break BeforeRet;
		}
		
		var idx_476020 = idx_476014;
		F.line = 66;
		result_475837 = self_476001.items[chckIndx(idx_476020, 0, self_476001.items.length+0-1)-0];
		break BeforeRet;
		}
		
		if (of_py_slice_object_470109(other_475836)) {
		F.line = 68;
		var slice_476021 = other_475836;
		F.line = 69;
		var new_list_476022 = new_py_tuple_simple_472201();
		F.line = 70;
		var ret_obj_476025 = get_slice_items_471141(slice_476021, self_476001, "items", new_list_476022, "items");
			if (of_py_exception_object_358259(ret_obj_476025)) {
			Tmp2 = ret_obj_476025.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 72;
		result_475837 = ret_obj_476025;
		break BeforeRet;
		}
		else {
			F.line = 74;
			result_475837 = new_list_476022;
			break BeforeRet;
		}
		
		}
		
		F.line = 76;
		F.line = 131;
		var name_476032 = other_475836.pyType.name;
		F.line = 132;
		var msg_476034 = (makeNimstrLit("tuple indices must be integers or slices, not ")).concat(name_476032);
		F.line = 106;
		var excp_476036 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_476036.tk = 3;
		F.line = 108;
		excp_476036.thrown = true;
		F.line = 109;
		excp_476036.msg = new_py_string_176075(msg_476034);
		result_475837 = excp_476036;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_475837;

}

function is_stop_iter_375871(obj_375873) {
		var Tmp1;

	var result_375874 = false;

	var F={procname:"exceptions.isStopIter",prev:framePtr,filename:"../Objects/exceptions.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(of_py_exception_object_358259(obj_375873))) {
		F.line = 138;
		result_375874 = false;
		break BeforeRet;
		}
		
		F.line = 139;
		var excp_375875 = obj_375873;
		F.line = 140;
		if (!(excp_375875.tk == 7)) Tmp1 = false; else {			Tmp1 = excp_375875.thrown;		}		result_375874 = Tmp1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_375874;

}

function init_py_tuple_object_magic_476053(self_no_cast_476055, args_476072) {
			var Tmp2;
						var Tmp5;

	var result_476073 = null;

	var F={procname:"tupleobject.initPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_476055.m_type, NTI472070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_476201 = self_no_cast_476055;
		if ((1 < (args_476072 != null ? args_476072.length : 0))) {
		F.line = 81;
		F.line = 81;
		var fmt_res_476213 = mnewString(0);
		F.line = 81;
		if (fmt_res_476213 != null) { fmt_res_476213 = (fmt_res_476213).concat(makeNimstrLit("tuple expected at most 1 args, got ")); } else { fmt_res_476213 = makeNimstrLit("tuple expected at most 1 args, got "); };
		F.line = 270;
		if (fmt_res_476213 != null) { fmt_res_476213 = (fmt_res_476213).concat(cstrToNimstr(((args_476072 != null ? args_476072.length : 0))+"")); } else { fmt_res_476213 = cstrToNimstr(((args_476072 != null ? args_476072.length : 0))+"").slice(); };
		var msg_476408 = nimCopy(null, fmt_res_476213, NTI138);
		F.line = 82;
		F.line = 106;
		var excp_476410 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_476410.tk = 3;
		F.line = 108;
		excp_476410.thrown = true;
		F.line = 109;
		excp_476410.msg = new_py_string_176075(msg_476408);
		result_476073 = excp_476410;
		break BeforeRet;
		}
		
		if (!(((self_476201.items != null ? self_476201.items.length : 0) == 0))) {
		F.line = 84;
		if (self_476201.items.length < 0) { for (var i=self_476201.items.length;i<0;++i) self_476201.items.push(null); }
               else { self_476201.items.length = 0; };
		}
		
		if (((args_476072 != null ? args_476072.length : 0) == 1)) {
		F.line = 86;
		var colontmp__476532 = {Field0: null, Field1: null};
		F.line = 86;
		var iterable_476489 = null;
		F.line = 86;
		var next_method_476490 = null;
		F.line = 86;
		F.line = 171;
		var ret_tuple_476452 = {Field0: null, Field1: null};
		L1: do {
			F.line = 173;
			var iter_func_476456 = args_476072[chckIndx(0, 0, args_476072.length+0-1)-0].pyType.magicMethods.Field36;
			if ((iter_func_476456 === null)) {
			F.line = 175;
			var msg_476464 = (args_476072[chckIndx(0, 0, args_476072.length+0-1)-0].pyType.name).concat(makeNimstrLit(" object is not iterable"));
			F.line = 176;
			F.line = 106;
			var excp_476467 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_476467.tk = 3;
			F.line = 108;
			excp_476467.thrown = true;
			F.line = 109;
			excp_476467.msg = new_py_string_176075(msg_476464);
			nimCopy(ret_tuple_476452, {Field0: excp_476467, Field1: null}, NTI476450);
			F.line = 177;
			break L1;
			}
			
			F.line = 178;
			var iter_obj_476470 = iter_func_476456(args_476072[chckIndx(0, 0, args_476072.length+0-1)-0]);
			F.line = 179;
			var iternext_func_476472 = iter_obj_476470.pyType.magicMethods.Field37;
			if ((iternext_func_476472 === null)) {
			F.line = 181;
			F.line = 181;
			var fmt_res_476481 = mnewString(0);
			F.line = 181;
			if (fmt_res_476481 != null) { fmt_res_476481 = (fmt_res_476481).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_476481 = makeNimstrLit("iter() returned non-iterator of type "); };
			var msg_476483 = (fmt_res_476481).concat(iter_obj_476470.pyType.name);
			F.line = 182;
			F.line = 106;
			var excp_476486 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_476486.tk = 3;
			F.line = 108;
			excp_476486.thrown = true;
			F.line = 109;
			excp_476486.msg = new_py_string_176075(msg_476483);
			nimCopy(ret_tuple_476452, {Field0: excp_476486, Field1: null}, NTI476450);
			F.line = 183;
			break L1;
			}
			
			F.line = 184;
			nimCopy(ret_tuple_476452, {Field0: iter_obj_476470, Field1: iternext_func_476472}, NTI476450);
		} while(false);
		nimCopy(colontmp__476532, ret_tuple_476452, NTI375953);
		F.line = 86;
		iterable_476489 = colontmp__476532["Field0"];
		F.line = 86;
		next_method_476490 = colontmp__476532["Field1"];
			if (of_py_exception_object_358259(iterable_476489)) {
			Tmp2 = iterable_476489.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 88;
		result_476073 = iterable_476489;
		break BeforeRet;
		}
		
		L3: do {
			F.line = 89;
				L4: while (true) {
				if (!true) break L4;
					F.line = 90;
					var next_obj_476491 = next_method_476490(iterable_476489);
					if (is_stop_iter_375871(next_obj_476491)) {
					F.line = 92;
					break L3;
					}
					
						if (of_py_exception_object_358259(next_obj_476491)) {
						Tmp5 = next_obj_476491.thrown;
						}
						else {
						Tmp5 = false;
						}
						
					if (Tmp5) {
					F.line = 94;
					result_476073 = next_obj_476491;
					break BeforeRet;
					}
					
					F.line = 95;
					if (self_476201.items != null) { self_476201.items.push(next_obj_476491); } else { self_476201.items = [next_obj_476491]; };
				}
		} while(false);
		}
		
		result_476073 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_476073;

}
py_tuple_object_type_472080.magicMethods.Field18 = eq_py_tuple_object_magic_473075;
py_tuple_object_type_472080.magicMethods.Field36 = iter_py_tuple_object_magic_474022;
py_tuple_object_type_472080.magicMethods.Field25 = repr_py_tuple_object_magic_474216;
py_tuple_object_type_472080.magicMethods.Field23 = len_py_tuple_object_magic_475437;
py_tuple_object_type_472080.magicMethods.Field30 = hash_py_tuple_object_magic_475623;
py_tuple_object_type_472080.magicMethods.Field32 = getitem_py_tuple_object_magic_475833;
py_tuple_object_type_472080.magicMethods.Field27 = init_py_tuple_object_magic_476053;

function repr_py_base_error_object_magic_481826(self_no_cast_481828) {
				var Tmp1;

	var result_481829 = null;

	var F={procname:"exceptionsImpl.reprPyBaseErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_481828.m_type, NTI357246))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBaseErrorObject` "));
		}
		
		F.line = 438;
		var self_482001 = self_no_cast_481828;
		F.line = 23;
		var msg_482003 = null;
		if ((self_482001.msg === null)) {
		F.line = 25;
		msg_482003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_482001.msg)) {
		F.line = 27;
		msg_482003 = nimCopy(null, self_482001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_482001.msg.pyType === null)) {
			F.line = 2895;
			var e_482037 = null;
			F.line = 2896;
			e_482037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_482037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_482037.parent = null;
			F.line = 26;
			raiseException(e_482037, "InternalError");
			}
			
			F.line = 27;
			var fun_482202 = self_482001.msg.pyType.magicMethods.Field25;
			if ((fun_482202 === null)) {
			F.line = 29;
			var obj_type_str_482211 = self_482001.msg.pyType.name;
			F.line = 30;
			var method_str_482213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_482215 = (makeNimstrLit("No ")).concat(method_str_482213,makeNimstrLit(" method for "),obj_type_str_482211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_482217 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_482217.tk = 3;
			F.line = 108;
			excp_482217.thrown = true;
			F.line = 109;
			excp_482217.msg = new_py_string_176075(msg_482215);
			var excp_482220 = excp_482217;
			F.line = 36;
			result_481829 = excp_482220;
			break BeforeRet;
			}
			
			var fun_482402 = fun_482202;
			F.line = 46;
			var res_482404 = fun_482402(self_482001.msg);
			var msg_obj_482602 = res_482404;
				if (of_py_exception_object_358259(msg_obj_482602)) {
				Tmp1 = msg_obj_482602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_482003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_482003 = nimCopy(null, msg_obj_482602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_482610 = (reprEnum(self_482001.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_482003);
		result_481829 = new_py_string_176075(str_482610);
	} while (false);
	framePtr = F.prev;

	return result_481829;

}

function new_py_tuple_473057(items_473060) {
	var result_473061 = null;

	var F={procname:"tupleobject.newPyTuple",prev:framePtr,filename:"../Objects/tupleobject.nim",line:0};
	framePtr = F;
		F.line = 15;
		result_473061 = new_py_tuple_simple_472201();
		F.line = 17;
		result_473061.items = nimCopy(null, items_473060, NTI473059);
	framePtr = F.prev;

	return result_473061;

}

function new_py_base_error_object_magic_482626(args_482641) {
	var result_482642 = null;

	var F={procname:"exceptionsImpl.newPyBaseErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_482644 = new_py_base_error_simple_357401();
		F.line = 41;
		excp_482644.tk = 0;
		F.line = 42;
		excp_482644.msg = new_py_tuple_473057(args_482641);
		result_482642 = excp_482644;
	framePtr = F.prev;

	return result_482642;

}

function repr_py_name_error_object_magic_482659(self_no_cast_482661) {
				var Tmp1;

	var result_482662 = null;

	var F={procname:"exceptionsImpl.reprPyNameErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_482661.m_type, NTI358415))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNameErrorObject` "));
		}
		
		F.line = 438;
		var self_482801 = self_no_cast_482661;
		F.line = 23;
		var msg_482803 = null;
		if ((self_482801.msg === null)) {
		F.line = 25;
		msg_482803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_482801.msg)) {
		F.line = 27;
		msg_482803 = nimCopy(null, self_482801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_482801.msg.pyType === null)) {
			F.line = 2895;
			var e_482837 = null;
			F.line = 2896;
			e_482837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_482837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_482837.parent = null;
			F.line = 26;
			raiseException(e_482837, "InternalError");
			}
			
			F.line = 27;
			var fun_483002 = self_482801.msg.pyType.magicMethods.Field25;
			if ((fun_483002 === null)) {
			F.line = 29;
			var obj_type_str_483011 = self_482801.msg.pyType.name;
			F.line = 30;
			var method_str_483013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_483015 = (makeNimstrLit("No ")).concat(method_str_483013,makeNimstrLit(" method for "),obj_type_str_483011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_483017 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_483017.tk = 3;
			F.line = 108;
			excp_483017.thrown = true;
			F.line = 109;
			excp_483017.msg = new_py_string_176075(msg_483015);
			var excp_483020 = excp_483017;
			F.line = 36;
			result_482662 = excp_483020;
			break BeforeRet;
			}
			
			var fun_483202 = fun_483002;
			F.line = 46;
			var res_483204 = fun_483202(self_482801.msg);
			var msg_obj_483402 = res_483204;
				if (of_py_exception_object_358259(msg_obj_483402)) {
				Tmp1 = msg_obj_483402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_482803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_482803 = nimCopy(null, msg_obj_483402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_483410 = (reprEnum(self_482801.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_482803);
		result_482662 = new_py_string_176075(str_483410);
	} while (false);
	framePtr = F.prev;

	return result_482662;

}

function new_py_name_error_object_magic_483426(args_483441) {
	var result_483442 = null;

	var F={procname:"exceptionsImpl.newPyNameErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_483444 = new_py_name_error_simple_358601();
		F.line = 41;
		excp_483444.tk = 1;
		F.line = 42;
		excp_483444.msg = new_py_tuple_473057(args_483441);
		result_483442 = excp_483444;
	framePtr = F.prev;

	return result_483442;

}

function repr_py_not_implemented_error_object_magic_483459(self_no_cast_483461) {
				var Tmp1;

	var result_483462 = null;

	var F={procname:"exceptionsImpl.reprPyNotImplementedErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_483461.m_type, NTI359501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNotImplementedErrorObject` "));
		}
		
		F.line = 438;
		var self_483601 = self_no_cast_483461;
		F.line = 23;
		var msg_483603 = null;
		if ((self_483601.msg === null)) {
		F.line = 25;
		msg_483603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_483601.msg)) {
		F.line = 27;
		msg_483603 = nimCopy(null, self_483601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_483601.msg.pyType === null)) {
			F.line = 2895;
			var e_483637 = null;
			F.line = 2896;
			e_483637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_483637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_483637.parent = null;
			F.line = 26;
			raiseException(e_483637, "InternalError");
			}
			
			F.line = 27;
			var fun_483802 = self_483601.msg.pyType.magicMethods.Field25;
			if ((fun_483802 === null)) {
			F.line = 29;
			var obj_type_str_483811 = self_483601.msg.pyType.name;
			F.line = 30;
			var method_str_483813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_483815 = (makeNimstrLit("No ")).concat(method_str_483813,makeNimstrLit(" method for "),obj_type_str_483811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_483817 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_483817.tk = 3;
			F.line = 108;
			excp_483817.thrown = true;
			F.line = 109;
			excp_483817.msg = new_py_string_176075(msg_483815);
			var excp_483820 = excp_483817;
			F.line = 36;
			result_483462 = excp_483820;
			break BeforeRet;
			}
			
			var fun_484002 = fun_483802;
			F.line = 46;
			var res_484004 = fun_484002(self_483601.msg);
			var msg_obj_484202 = res_484004;
				if (of_py_exception_object_358259(msg_obj_484202)) {
				Tmp1 = msg_obj_484202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_483603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_483603 = nimCopy(null, msg_obj_484202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_484210 = (reprEnum(self_483601.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_483603);
		result_483462 = new_py_string_176075(str_484210);
	} while (false);
	framePtr = F.prev;

	return result_483462;

}

function new_py_not_implemented_error_object_magic_484226(args_484241) {
	var result_484242 = null;

	var F={procname:"exceptionsImpl.newPyNotImplementedErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_484244 = new_py_not_implemented_error_simple_359601();
		F.line = 41;
		excp_484244.tk = 2;
		F.line = 42;
		excp_484244.msg = new_py_tuple_473057(args_484241);
		result_484242 = excp_484244;
	framePtr = F.prev;

	return result_484242;

}

function repr_py_type_error_object_magic_484259(self_no_cast_484261) {
				var Tmp1;

	var result_484262 = null;

	var F={procname:"exceptionsImpl.reprPyTypeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_484261.m_type, NTI360501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeErrorObject` "));
		}
		
		F.line = 438;
		var self_484401 = self_no_cast_484261;
		F.line = 23;
		var msg_484403 = null;
		if ((self_484401.msg === null)) {
		F.line = 25;
		msg_484403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_484401.msg)) {
		F.line = 27;
		msg_484403 = nimCopy(null, self_484401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_484401.msg.pyType === null)) {
			F.line = 2895;
			var e_484437 = null;
			F.line = 2896;
			e_484437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_484437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_484437.parent = null;
			F.line = 26;
			raiseException(e_484437, "InternalError");
			}
			
			F.line = 27;
			var fun_484602 = self_484401.msg.pyType.magicMethods.Field25;
			if ((fun_484602 === null)) {
			F.line = 29;
			var obj_type_str_484611 = self_484401.msg.pyType.name;
			F.line = 30;
			var method_str_484613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_484615 = (makeNimstrLit("No ")).concat(method_str_484613,makeNimstrLit(" method for "),obj_type_str_484611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_484617 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_484617.tk = 3;
			F.line = 108;
			excp_484617.thrown = true;
			F.line = 109;
			excp_484617.msg = new_py_string_176075(msg_484615);
			var excp_484620 = excp_484617;
			F.line = 36;
			result_484262 = excp_484620;
			break BeforeRet;
			}
			
			var fun_484802 = fun_484602;
			F.line = 46;
			var res_484804 = fun_484802(self_484401.msg);
			var msg_obj_485002 = res_484804;
				if (of_py_exception_object_358259(msg_obj_485002)) {
				Tmp1 = msg_obj_485002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_484403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_484403 = nimCopy(null, msg_obj_485002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_485010 = (reprEnum(self_484401.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_484403);
		result_484262 = new_py_string_176075(str_485010);
	} while (false);
	framePtr = F.prev;

	return result_484262;

}

function new_py_type_error_object_magic_485026(args_485041) {
	var result_485042 = null;

	var F={procname:"exceptionsImpl.newPyTypeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_485044 = new_py_type_error_simple_360601();
		F.line = 41;
		excp_485044.tk = 3;
		F.line = 42;
		excp_485044.msg = new_py_tuple_473057(args_485041);
		result_485042 = excp_485044;
	framePtr = F.prev;

	return result_485042;

}

function repr_py_attribute_error_object_magic_485059(self_no_cast_485061) {
				var Tmp1;

	var result_485062 = null;

	var F={procname:"exceptionsImpl.reprPyAttributeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_485061.m_type, NTI361501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyAttributeErrorObject` "));
		}
		
		F.line = 438;
		var self_485201 = self_no_cast_485061;
		F.line = 23;
		var msg_485203 = null;
		if ((self_485201.msg === null)) {
		F.line = 25;
		msg_485203 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_485201.msg)) {
		F.line = 27;
		msg_485203 = nimCopy(null, self_485201.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_485201.msg.pyType === null)) {
			F.line = 2895;
			var e_485237 = null;
			F.line = 2896;
			e_485237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_485237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_485237.parent = null;
			F.line = 26;
			raiseException(e_485237, "InternalError");
			}
			
			F.line = 27;
			var fun_485402 = self_485201.msg.pyType.magicMethods.Field25;
			if ((fun_485402 === null)) {
			F.line = 29;
			var obj_type_str_485411 = self_485201.msg.pyType.name;
			F.line = 30;
			var method_str_485413 = makeNimstrLit("repr");
			F.line = 31;
			var msg_485415 = (makeNimstrLit("No ")).concat(method_str_485413,makeNimstrLit(" method for "),obj_type_str_485411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_485417 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_485417.tk = 3;
			F.line = 108;
			excp_485417.thrown = true;
			F.line = 109;
			excp_485417.msg = new_py_string_176075(msg_485415);
			var excp_485420 = excp_485417;
			F.line = 36;
			result_485062 = excp_485420;
			break BeforeRet;
			}
			
			var fun_485602 = fun_485402;
			F.line = 46;
			var res_485604 = fun_485602(self_485201.msg);
			var msg_obj_485802 = res_485604;
				if (of_py_exception_object_358259(msg_obj_485802)) {
				Tmp1 = msg_obj_485802.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_485203 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_485203 = nimCopy(null, msg_obj_485802.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_485810 = (reprEnum(self_485201.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_485203);
		result_485062 = new_py_string_176075(str_485810);
	} while (false);
	framePtr = F.prev;

	return result_485062;

}

function new_py_attribute_error_object_magic_485826(args_485841) {
	var result_485842 = null;

	var F={procname:"exceptionsImpl.newPyAttributeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_485844 = new_py_attribute_error_simple_361601();
		F.line = 41;
		excp_485844.tk = 4;
		F.line = 42;
		excp_485844.msg = new_py_tuple_473057(args_485841);
		result_485842 = excp_485844;
	framePtr = F.prev;

	return result_485842;

}

function repr_py_value_error_object_magic_485859(self_no_cast_485861) {
				var Tmp1;

	var result_485862 = null;

	var F={procname:"exceptionsImpl.reprPyValueErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_485861.m_type, NTI362501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyValueErrorObject` "));
		}
		
		F.line = 438;
		var self_486001 = self_no_cast_485861;
		F.line = 23;
		var msg_486003 = null;
		if ((self_486001.msg === null)) {
		F.line = 25;
		msg_486003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_486001.msg)) {
		F.line = 27;
		msg_486003 = nimCopy(null, self_486001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_486001.msg.pyType === null)) {
			F.line = 2895;
			var e_486037 = null;
			F.line = 2896;
			e_486037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_486037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_486037.parent = null;
			F.line = 26;
			raiseException(e_486037, "InternalError");
			}
			
			F.line = 27;
			var fun_486202 = self_486001.msg.pyType.magicMethods.Field25;
			if ((fun_486202 === null)) {
			F.line = 29;
			var obj_type_str_486211 = self_486001.msg.pyType.name;
			F.line = 30;
			var method_str_486213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_486215 = (makeNimstrLit("No ")).concat(method_str_486213,makeNimstrLit(" method for "),obj_type_str_486211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_486217 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_486217.tk = 3;
			F.line = 108;
			excp_486217.thrown = true;
			F.line = 109;
			excp_486217.msg = new_py_string_176075(msg_486215);
			var excp_486220 = excp_486217;
			F.line = 36;
			result_485862 = excp_486220;
			break BeforeRet;
			}
			
			var fun_486402 = fun_486202;
			F.line = 46;
			var res_486404 = fun_486402(self_486001.msg);
			var msg_obj_486602 = res_486404;
				if (of_py_exception_object_358259(msg_obj_486602)) {
				Tmp1 = msg_obj_486602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_486003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_486003 = nimCopy(null, msg_obj_486602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_486610 = (reprEnum(self_486001.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_486003);
		result_485862 = new_py_string_176075(str_486610);
	} while (false);
	framePtr = F.prev;

	return result_485862;

}

function new_py_value_error_object_magic_486626(args_486641) {
	var result_486642 = null;

	var F={procname:"exceptionsImpl.newPyValueErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_486644 = new_py_value_error_simple_362601();
		F.line = 41;
		excp_486644.tk = 5;
		F.line = 42;
		excp_486644.msg = new_py_tuple_473057(args_486641);
		result_486642 = excp_486644;
	framePtr = F.prev;

	return result_486642;

}

function repr_py_index_error_object_magic_486659(self_no_cast_486661) {
				var Tmp1;

	var result_486662 = null;

	var F={procname:"exceptionsImpl.reprPyIndexErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_486661.m_type, NTI363501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIndexErrorObject` "));
		}
		
		F.line = 438;
		var self_486801 = self_no_cast_486661;
		F.line = 23;
		var msg_486803 = null;
		if ((self_486801.msg === null)) {
		F.line = 25;
		msg_486803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_486801.msg)) {
		F.line = 27;
		msg_486803 = nimCopy(null, self_486801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_486801.msg.pyType === null)) {
			F.line = 2895;
			var e_486837 = null;
			F.line = 2896;
			e_486837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_486837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_486837.parent = null;
			F.line = 26;
			raiseException(e_486837, "InternalError");
			}
			
			F.line = 27;
			var fun_487002 = self_486801.msg.pyType.magicMethods.Field25;
			if ((fun_487002 === null)) {
			F.line = 29;
			var obj_type_str_487011 = self_486801.msg.pyType.name;
			F.line = 30;
			var method_str_487013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_487015 = (makeNimstrLit("No ")).concat(method_str_487013,makeNimstrLit(" method for "),obj_type_str_487011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_487017 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_487017.tk = 3;
			F.line = 108;
			excp_487017.thrown = true;
			F.line = 109;
			excp_487017.msg = new_py_string_176075(msg_487015);
			var excp_487020 = excp_487017;
			F.line = 36;
			result_486662 = excp_487020;
			break BeforeRet;
			}
			
			var fun_487202 = fun_487002;
			F.line = 46;
			var res_487204 = fun_487202(self_486801.msg);
			var msg_obj_487402 = res_487204;
				if (of_py_exception_object_358259(msg_obj_487402)) {
				Tmp1 = msg_obj_487402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_486803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_486803 = nimCopy(null, msg_obj_487402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_487410 = (reprEnum(self_486801.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_486803);
		result_486662 = new_py_string_176075(str_487410);
	} while (false);
	framePtr = F.prev;

	return result_486662;

}

function new_py_index_error_object_magic_487426(args_487441) {
	var result_487442 = null;

	var F={procname:"exceptionsImpl.newPyIndexErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_487444 = new_py_index_error_simple_363601();
		F.line = 41;
		excp_487444.tk = 6;
		F.line = 42;
		excp_487444.msg = new_py_tuple_473057(args_487441);
		result_487442 = excp_487444;
	framePtr = F.prev;

	return result_487442;

}

function repr_py_stop_iter_error_object_magic_487459(self_no_cast_487461) {
				var Tmp1;

	var result_487462 = null;

	var F={procname:"exceptionsImpl.reprPyStopIterErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_487461.m_type, NTI364501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStopIterErrorObject` "));
		}
		
		F.line = 438;
		var self_487601 = self_no_cast_487461;
		F.line = 23;
		var msg_487603 = null;
		if ((self_487601.msg === null)) {
		F.line = 25;
		msg_487603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_487601.msg)) {
		F.line = 27;
		msg_487603 = nimCopy(null, self_487601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_487601.msg.pyType === null)) {
			F.line = 2895;
			var e_487637 = null;
			F.line = 2896;
			e_487637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_487637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_487637.parent = null;
			F.line = 26;
			raiseException(e_487637, "InternalError");
			}
			
			F.line = 27;
			var fun_487802 = self_487601.msg.pyType.magicMethods.Field25;
			if ((fun_487802 === null)) {
			F.line = 29;
			var obj_type_str_487811 = self_487601.msg.pyType.name;
			F.line = 30;
			var method_str_487813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_487815 = (makeNimstrLit("No ")).concat(method_str_487813,makeNimstrLit(" method for "),obj_type_str_487811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_487817 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_487817.tk = 3;
			F.line = 108;
			excp_487817.thrown = true;
			F.line = 109;
			excp_487817.msg = new_py_string_176075(msg_487815);
			var excp_487820 = excp_487817;
			F.line = 36;
			result_487462 = excp_487820;
			break BeforeRet;
			}
			
			var fun_488002 = fun_487802;
			F.line = 46;
			var res_488004 = fun_488002(self_487601.msg);
			var msg_obj_488202 = res_488004;
				if (of_py_exception_object_358259(msg_obj_488202)) {
				Tmp1 = msg_obj_488202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_487603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_487603 = nimCopy(null, msg_obj_488202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_488210 = (reprEnum(self_487601.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_487603);
		result_487462 = new_py_string_176075(str_488210);
	} while (false);
	framePtr = F.prev;

	return result_487462;

}

function new_py_stop_iter_error_object_magic_488226(args_488241) {
	var result_488242 = null;

	var F={procname:"exceptionsImpl.newPyStopIterErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_488244 = new_py_stop_iter_error_simple_364601();
		F.line = 41;
		excp_488244.tk = 7;
		F.line = 42;
		excp_488244.msg = new_py_tuple_473057(args_488241);
		result_488242 = excp_488244;
	framePtr = F.prev;

	return result_488242;

}

function repr_py_lock_error_object_magic_488259(self_no_cast_488261) {
				var Tmp1;

	var result_488262 = null;

	var F={procname:"exceptionsImpl.reprPyLockErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_488261.m_type, NTI365501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyLockErrorObject` "));
		}
		
		F.line = 438;
		var self_488401 = self_no_cast_488261;
		F.line = 23;
		var msg_488403 = null;
		if ((self_488401.msg === null)) {
		F.line = 25;
		msg_488403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_488401.msg)) {
		F.line = 27;
		msg_488403 = nimCopy(null, self_488401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_488401.msg.pyType === null)) {
			F.line = 2895;
			var e_488437 = null;
			F.line = 2896;
			e_488437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_488437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_488437.parent = null;
			F.line = 26;
			raiseException(e_488437, "InternalError");
			}
			
			F.line = 27;
			var fun_488602 = self_488401.msg.pyType.magicMethods.Field25;
			if ((fun_488602 === null)) {
			F.line = 29;
			var obj_type_str_488611 = self_488401.msg.pyType.name;
			F.line = 30;
			var method_str_488613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_488615 = (makeNimstrLit("No ")).concat(method_str_488613,makeNimstrLit(" method for "),obj_type_str_488611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_488617 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_488617.tk = 3;
			F.line = 108;
			excp_488617.thrown = true;
			F.line = 109;
			excp_488617.msg = new_py_string_176075(msg_488615);
			var excp_488620 = excp_488617;
			F.line = 36;
			result_488262 = excp_488620;
			break BeforeRet;
			}
			
			var fun_488802 = fun_488602;
			F.line = 46;
			var res_488804 = fun_488802(self_488401.msg);
			var msg_obj_489002 = res_488804;
				if (of_py_exception_object_358259(msg_obj_489002)) {
				Tmp1 = msg_obj_489002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_488403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_488403 = nimCopy(null, msg_obj_489002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_489010 = (reprEnum(self_488401.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_488403);
		result_488262 = new_py_string_176075(str_489010);
	} while (false);
	framePtr = F.prev;

	return result_488262;

}

function new_py_lock_error_object_magic_489026(args_489041) {
	var result_489042 = null;

	var F={procname:"exceptionsImpl.newPyLockErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_489044 = new_py_lock_error_simple_365601();
		F.line = 41;
		excp_489044.tk = 8;
		F.line = 42;
		excp_489044.msg = new_py_tuple_473057(args_489041);
		result_489042 = excp_489044;
	framePtr = F.prev;

	return result_489042;

}

function repr_py_import_error_object_magic_489059(self_no_cast_489061) {
				var Tmp1;

	var result_489062 = null;

	var F={procname:"exceptionsImpl.reprPyImportErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_489061.m_type, NTI366501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyImportErrorObject` "));
		}
		
		F.line = 438;
		var self_489201 = self_no_cast_489061;
		F.line = 23;
		var msg_489203 = null;
		if ((self_489201.msg === null)) {
		F.line = 25;
		msg_489203 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_489201.msg)) {
		F.line = 27;
		msg_489203 = nimCopy(null, self_489201.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_489201.msg.pyType === null)) {
			F.line = 2895;
			var e_489237 = null;
			F.line = 2896;
			e_489237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_489237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_489237.parent = null;
			F.line = 26;
			raiseException(e_489237, "InternalError");
			}
			
			F.line = 27;
			var fun_489402 = self_489201.msg.pyType.magicMethods.Field25;
			if ((fun_489402 === null)) {
			F.line = 29;
			var obj_type_str_489411 = self_489201.msg.pyType.name;
			F.line = 30;
			var method_str_489413 = makeNimstrLit("repr");
			F.line = 31;
			var msg_489415 = (makeNimstrLit("No ")).concat(method_str_489413,makeNimstrLit(" method for "),obj_type_str_489411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_489417 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_489417.tk = 3;
			F.line = 108;
			excp_489417.thrown = true;
			F.line = 109;
			excp_489417.msg = new_py_string_176075(msg_489415);
			var excp_489420 = excp_489417;
			F.line = 36;
			result_489062 = excp_489420;
			break BeforeRet;
			}
			
			var fun_489602 = fun_489402;
			F.line = 46;
			var res_489604 = fun_489602(self_489201.msg);
			var msg_obj_489802 = res_489604;
				if (of_py_exception_object_358259(msg_obj_489802)) {
				Tmp1 = msg_obj_489802.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_489203 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_489203 = nimCopy(null, msg_obj_489802.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_489810 = (reprEnum(self_489201.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_489203);
		result_489062 = new_py_string_176075(str_489810);
	} while (false);
	framePtr = F.prev;

	return result_489062;

}

function new_py_import_error_object_magic_489826(args_489841) {
	var result_489842 = null;

	var F={procname:"exceptionsImpl.newPyImportErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_489844 = new_py_import_error_simple_366601();
		F.line = 41;
		excp_489844.tk = 9;
		F.line = 42;
		excp_489844.msg = new_py_tuple_473057(args_489841);
		result_489842 = excp_489844;
	framePtr = F.prev;

	return result_489842;

}

function repr_py_unbound_local_error_object_magic_489859(self_no_cast_489861) {
				var Tmp1;

	var result_489862 = null;

	var F={procname:"exceptionsImpl.reprPyUnboundLocalErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_489861.m_type, NTI367501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyUnboundLocalErrorObject` "));
		}
		
		F.line = 438;
		var self_490001 = self_no_cast_489861;
		F.line = 23;
		var msg_490003 = null;
		if ((self_490001.msg === null)) {
		F.line = 25;
		msg_490003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_490001.msg)) {
		F.line = 27;
		msg_490003 = nimCopy(null, self_490001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_490001.msg.pyType === null)) {
			F.line = 2895;
			var e_490037 = null;
			F.line = 2896;
			e_490037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_490037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_490037.parent = null;
			F.line = 26;
			raiseException(e_490037, "InternalError");
			}
			
			F.line = 27;
			var fun_490202 = self_490001.msg.pyType.magicMethods.Field25;
			if ((fun_490202 === null)) {
			F.line = 29;
			var obj_type_str_490211 = self_490001.msg.pyType.name;
			F.line = 30;
			var method_str_490213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_490215 = (makeNimstrLit("No ")).concat(method_str_490213,makeNimstrLit(" method for "),obj_type_str_490211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_490217 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_490217.tk = 3;
			F.line = 108;
			excp_490217.thrown = true;
			F.line = 109;
			excp_490217.msg = new_py_string_176075(msg_490215);
			var excp_490220 = excp_490217;
			F.line = 36;
			result_489862 = excp_490220;
			break BeforeRet;
			}
			
			var fun_490402 = fun_490202;
			F.line = 46;
			var res_490404 = fun_490402(self_490001.msg);
			var msg_obj_490602 = res_490404;
				if (of_py_exception_object_358259(msg_obj_490602)) {
				Tmp1 = msg_obj_490602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_490003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_490003 = nimCopy(null, msg_obj_490602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_490610 = (reprEnum(self_490001.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_490003);
		result_489862 = new_py_string_176075(str_490610);
	} while (false);
	framePtr = F.prev;

	return result_489862;

}

function new_py_unbound_local_error_object_magic_490626(args_490641) {
	var result_490642 = null;

	var F={procname:"exceptionsImpl.newPyUnboundLocalErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_490644 = new_py_unbound_local_error_simple_367601();
		F.line = 41;
		excp_490644.tk = 10;
		F.line = 42;
		excp_490644.msg = new_py_tuple_473057(args_490641);
		result_490642 = excp_490644;
	framePtr = F.prev;

	return result_490642;

}

function repr_py_key_error_object_magic_490659(self_no_cast_490661) {
				var Tmp1;

	var result_490662 = null;

	var F={procname:"exceptionsImpl.reprPyKeyErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_490661.m_type, NTI368501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyKeyErrorObject` "));
		}
		
		F.line = 438;
		var self_490801 = self_no_cast_490661;
		F.line = 23;
		var msg_490803 = null;
		if ((self_490801.msg === null)) {
		F.line = 25;
		msg_490803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_490801.msg)) {
		F.line = 27;
		msg_490803 = nimCopy(null, self_490801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_490801.msg.pyType === null)) {
			F.line = 2895;
			var e_490837 = null;
			F.line = 2896;
			e_490837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_490837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_490837.parent = null;
			F.line = 26;
			raiseException(e_490837, "InternalError");
			}
			
			F.line = 27;
			var fun_491002 = self_490801.msg.pyType.magicMethods.Field25;
			if ((fun_491002 === null)) {
			F.line = 29;
			var obj_type_str_491011 = self_490801.msg.pyType.name;
			F.line = 30;
			var method_str_491013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_491015 = (makeNimstrLit("No ")).concat(method_str_491013,makeNimstrLit(" method for "),obj_type_str_491011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_491017 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_491017.tk = 3;
			F.line = 108;
			excp_491017.thrown = true;
			F.line = 109;
			excp_491017.msg = new_py_string_176075(msg_491015);
			var excp_491020 = excp_491017;
			F.line = 36;
			result_490662 = excp_491020;
			break BeforeRet;
			}
			
			var fun_491202 = fun_491002;
			F.line = 46;
			var res_491204 = fun_491202(self_490801.msg);
			var msg_obj_491402 = res_491204;
				if (of_py_exception_object_358259(msg_obj_491402)) {
				Tmp1 = msg_obj_491402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_490803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_490803 = nimCopy(null, msg_obj_491402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_491410 = (reprEnum(self_490801.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_490803);
		result_490662 = new_py_string_176075(str_491410);
	} while (false);
	framePtr = F.prev;

	return result_490662;

}

function new_py_key_error_object_magic_491426(args_491441) {
	var result_491442 = null;

	var F={procname:"exceptionsImpl.newPyKeyErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_491444 = new_py_key_error_simple_368601();
		F.line = 41;
		excp_491444.tk = 11;
		F.line = 42;
		excp_491444.msg = new_py_tuple_473057(args_491441);
		result_491442 = excp_491444;
	framePtr = F.prev;

	return result_491442;

}

function repr_py_assertion_error_object_magic_491459(self_no_cast_491461) {
				var Tmp1;

	var result_491462 = null;

	var F={procname:"exceptionsImpl.reprPyAssertionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_491461.m_type, NTI369501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyAssertionErrorObject` "));
		}
		
		F.line = 438;
		var self_491601 = self_no_cast_491461;
		F.line = 23;
		var msg_491603 = null;
		if ((self_491601.msg === null)) {
		F.line = 25;
		msg_491603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_491601.msg)) {
		F.line = 27;
		msg_491603 = nimCopy(null, self_491601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_491601.msg.pyType === null)) {
			F.line = 2895;
			var e_491637 = null;
			F.line = 2896;
			e_491637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_491637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_491637.parent = null;
			F.line = 26;
			raiseException(e_491637, "InternalError");
			}
			
			F.line = 27;
			var fun_491802 = self_491601.msg.pyType.magicMethods.Field25;
			if ((fun_491802 === null)) {
			F.line = 29;
			var obj_type_str_491811 = self_491601.msg.pyType.name;
			F.line = 30;
			var method_str_491813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_491815 = (makeNimstrLit("No ")).concat(method_str_491813,makeNimstrLit(" method for "),obj_type_str_491811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_491817 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_491817.tk = 3;
			F.line = 108;
			excp_491817.thrown = true;
			F.line = 109;
			excp_491817.msg = new_py_string_176075(msg_491815);
			var excp_491820 = excp_491817;
			F.line = 36;
			result_491462 = excp_491820;
			break BeforeRet;
			}
			
			var fun_492002 = fun_491802;
			F.line = 46;
			var res_492004 = fun_492002(self_491601.msg);
			var msg_obj_492202 = res_492004;
				if (of_py_exception_object_358259(msg_obj_492202)) {
				Tmp1 = msg_obj_492202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_491603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_491603 = nimCopy(null, msg_obj_492202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_492210 = (reprEnum(self_491601.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_491603);
		result_491462 = new_py_string_176075(str_492210);
	} while (false);
	framePtr = F.prev;

	return result_491462;

}

function new_py_assertion_error_object_magic_492226(args_492241) {
	var result_492242 = null;

	var F={procname:"exceptionsImpl.newPyAssertionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_492244 = new_py_assertion_error_simple_369601();
		F.line = 41;
		excp_492244.tk = 12;
		F.line = 42;
		excp_492244.msg = new_py_tuple_473057(args_492241);
		result_492242 = excp_492244;
	framePtr = F.prev;

	return result_492242;

}

function repr_py_zero_division_error_object_magic_492259(self_no_cast_492261) {
				var Tmp1;

	var result_492262 = null;

	var F={procname:"exceptionsImpl.reprPyZeroDivisionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_492261.m_type, NTI370501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyZeroDivisionErrorObject` "));
		}
		
		F.line = 438;
		var self_492401 = self_no_cast_492261;
		F.line = 23;
		var msg_492403 = null;
		if ((self_492401.msg === null)) {
		F.line = 25;
		msg_492403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_492401.msg)) {
		F.line = 27;
		msg_492403 = nimCopy(null, self_492401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_492401.msg.pyType === null)) {
			F.line = 2895;
			var e_492437 = null;
			F.line = 2896;
			e_492437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_492437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_492437.parent = null;
			F.line = 26;
			raiseException(e_492437, "InternalError");
			}
			
			F.line = 27;
			var fun_492602 = self_492401.msg.pyType.magicMethods.Field25;
			if ((fun_492602 === null)) {
			F.line = 29;
			var obj_type_str_492611 = self_492401.msg.pyType.name;
			F.line = 30;
			var method_str_492613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_492615 = (makeNimstrLit("No ")).concat(method_str_492613,makeNimstrLit(" method for "),obj_type_str_492611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_492617 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_492617.tk = 3;
			F.line = 108;
			excp_492617.thrown = true;
			F.line = 109;
			excp_492617.msg = new_py_string_176075(msg_492615);
			var excp_492620 = excp_492617;
			F.line = 36;
			result_492262 = excp_492620;
			break BeforeRet;
			}
			
			var fun_492802 = fun_492602;
			F.line = 46;
			var res_492804 = fun_492802(self_492401.msg);
			var msg_obj_493002 = res_492804;
				if (of_py_exception_object_358259(msg_obj_493002)) {
				Tmp1 = msg_obj_493002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_492403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_492403 = nimCopy(null, msg_obj_493002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_493010 = (reprEnum(self_492401.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_492403);
		result_492262 = new_py_string_176075(str_493010);
	} while (false);
	framePtr = F.prev;

	return result_492262;

}

function new_py_zero_division_error_object_magic_493026(args_493041) {
	var result_493042 = null;

	var F={procname:"exceptionsImpl.newPyZeroDivisionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_493044 = new_py_zero_division_error_simple_370601();
		F.line = 41;
		excp_493044.tk = 13;
		F.line = 42;
		excp_493044.msg = new_py_tuple_473057(args_493041);
		result_493042 = excp_493044;
	framePtr = F.prev;

	return result_493042;

}

function repr_py_runtime_error_object_magic_493059(self_no_cast_493061) {
				var Tmp1;

	var result_493062 = null;

	var F={procname:"exceptionsImpl.reprPyRuntimeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_493061.m_type, NTI371501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRuntimeErrorObject` "));
		}
		
		F.line = 438;
		var self_493201 = self_no_cast_493061;
		F.line = 23;
		var msg_493203 = null;
		if ((self_493201.msg === null)) {
		F.line = 25;
		msg_493203 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_493201.msg)) {
		F.line = 27;
		msg_493203 = nimCopy(null, self_493201.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_493201.msg.pyType === null)) {
			F.line = 2895;
			var e_493237 = null;
			F.line = 2896;
			e_493237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_493237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_493237.parent = null;
			F.line = 26;
			raiseException(e_493237, "InternalError");
			}
			
			F.line = 27;
			var fun_493402 = self_493201.msg.pyType.magicMethods.Field25;
			if ((fun_493402 === null)) {
			F.line = 29;
			var obj_type_str_493411 = self_493201.msg.pyType.name;
			F.line = 30;
			var method_str_493413 = makeNimstrLit("repr");
			F.line = 31;
			var msg_493415 = (makeNimstrLit("No ")).concat(method_str_493413,makeNimstrLit(" method for "),obj_type_str_493411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_493417 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_493417.tk = 3;
			F.line = 108;
			excp_493417.thrown = true;
			F.line = 109;
			excp_493417.msg = new_py_string_176075(msg_493415);
			var excp_493420 = excp_493417;
			F.line = 36;
			result_493062 = excp_493420;
			break BeforeRet;
			}
			
			var fun_493602 = fun_493402;
			F.line = 46;
			var res_493604 = fun_493602(self_493201.msg);
			var msg_obj_493802 = res_493604;
				if (of_py_exception_object_358259(msg_obj_493802)) {
				Tmp1 = msg_obj_493802.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_493203 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_493203 = nimCopy(null, msg_obj_493802.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_493810 = (reprEnum(self_493201.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_493203);
		result_493062 = new_py_string_176075(str_493810);
	} while (false);
	framePtr = F.prev;

	return result_493062;

}

function new_py_runtime_error_object_magic_493826(args_493841) {
	var result_493842 = null;

	var F={procname:"exceptionsImpl.newPyRuntimeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_493844 = new_py_runtime_error_simple_371601();
		F.line = 41;
		excp_493844.tk = 14;
		F.line = 42;
		excp_493844.msg = new_py_tuple_473057(args_493841);
		result_493842 = excp_493844;
	framePtr = F.prev;

	return result_493842;

}

function repr_py_syntax_error_object_magic_493859(self_no_cast_493861) {
				var Tmp1;

	var result_493862 = null;

	var F={procname:"exceptionsImpl.reprPySyntaxErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_493861.m_type, NTI372501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PySyntaxErrorObject` "));
		}
		
		F.line = 438;
		var self_494001 = self_no_cast_493861;
		F.line = 23;
		var msg_494003 = null;
		if ((self_494001.msg === null)) {
		F.line = 25;
		msg_494003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_494001.msg)) {
		F.line = 27;
		msg_494003 = nimCopy(null, self_494001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_494001.msg.pyType === null)) {
			F.line = 2895;
			var e_494037 = null;
			F.line = 2896;
			e_494037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_494037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_494037.parent = null;
			F.line = 26;
			raiseException(e_494037, "InternalError");
			}
			
			F.line = 27;
			var fun_494202 = self_494001.msg.pyType.magicMethods.Field25;
			if ((fun_494202 === null)) {
			F.line = 29;
			var obj_type_str_494211 = self_494001.msg.pyType.name;
			F.line = 30;
			var method_str_494213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_494215 = (makeNimstrLit("No ")).concat(method_str_494213,makeNimstrLit(" method for "),obj_type_str_494211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_494217 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_494217.tk = 3;
			F.line = 108;
			excp_494217.thrown = true;
			F.line = 109;
			excp_494217.msg = new_py_string_176075(msg_494215);
			var excp_494220 = excp_494217;
			F.line = 36;
			result_493862 = excp_494220;
			break BeforeRet;
			}
			
			var fun_494402 = fun_494202;
			F.line = 46;
			var res_494404 = fun_494402(self_494001.msg);
			var msg_obj_494602 = res_494404;
				if (of_py_exception_object_358259(msg_obj_494602)) {
				Tmp1 = msg_obj_494602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_494003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_494003 = nimCopy(null, msg_obj_494602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_494610 = (reprEnum(self_494001.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_494003);
		result_493862 = new_py_string_176075(str_494610);
	} while (false);
	framePtr = F.prev;

	return result_493862;

}

function new_py_syntax_error_object_magic_494626(args_494641) {
	var result_494642 = null;

	var F={procname:"exceptionsImpl.newPySyntaxErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_494644 = new_py_syntax_error_simple_372601();
		F.line = 41;
		excp_494644.tk = 15;
		F.line = 42;
		excp_494644.msg = new_py_tuple_473057(args_494641);
		result_494642 = excp_494644;
	framePtr = F.prev;

	return result_494642;

}

function repr_py_memory_error_object_magic_494659(self_no_cast_494661) {
				var Tmp1;

	var result_494662 = null;

	var F={procname:"exceptionsImpl.reprPyMemoryErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_494661.m_type, NTI373501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyMemoryErrorObject` "));
		}
		
		F.line = 438;
		var self_494801 = self_no_cast_494661;
		F.line = 23;
		var msg_494803 = null;
		if ((self_494801.msg === null)) {
		F.line = 25;
		msg_494803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_494801.msg)) {
		F.line = 27;
		msg_494803 = nimCopy(null, self_494801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_494801.msg.pyType === null)) {
			F.line = 2895;
			var e_494837 = null;
			F.line = 2896;
			e_494837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_494837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_494837.parent = null;
			F.line = 26;
			raiseException(e_494837, "InternalError");
			}
			
			F.line = 27;
			var fun_495002 = self_494801.msg.pyType.magicMethods.Field25;
			if ((fun_495002 === null)) {
			F.line = 29;
			var obj_type_str_495011 = self_494801.msg.pyType.name;
			F.line = 30;
			var method_str_495013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_495015 = (makeNimstrLit("No ")).concat(method_str_495013,makeNimstrLit(" method for "),obj_type_str_495011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_495017 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_495017.tk = 3;
			F.line = 108;
			excp_495017.thrown = true;
			F.line = 109;
			excp_495017.msg = new_py_string_176075(msg_495015);
			var excp_495020 = excp_495017;
			F.line = 36;
			result_494662 = excp_495020;
			break BeforeRet;
			}
			
			var fun_495202 = fun_495002;
			F.line = 46;
			var res_495204 = fun_495202(self_494801.msg);
			var msg_obj_495402 = res_495204;
				if (of_py_exception_object_358259(msg_obj_495402)) {
				Tmp1 = msg_obj_495402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_494803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_494803 = nimCopy(null, msg_obj_495402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_495410 = (reprEnum(self_494801.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_494803);
		result_494662 = new_py_string_176075(str_495410);
	} while (false);
	framePtr = F.prev;

	return result_494662;

}

function new_py_memory_error_object_magic_495426(args_495441) {
	var result_495442 = null;

	var F={procname:"exceptionsImpl.newPyMemoryErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_495444 = new_py_memory_error_simple_373601();
		F.line = 41;
		excp_495444.tk = 16;
		F.line = 42;
		excp_495444.msg = new_py_tuple_473057(args_495441);
		result_495442 = excp_495444;
	framePtr = F.prev;

	return result_495442;

}

function repr_py_keyboard_interrupt_error_object_magic_495459(self_no_cast_495461) {
				var Tmp1;

	var result_495462 = null;

	var F={procname:"exceptionsImpl.reprPyKeyboardInterruptErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_495461.m_type, NTI374501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyKeyboardInterruptErrorObject` "));
		}
		
		F.line = 438;
		var self_495601 = self_no_cast_495461;
		F.line = 23;
		var msg_495603 = null;
		if ((self_495601.msg === null)) {
		F.line = 25;
		msg_495603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_495601.msg)) {
		F.line = 27;
		msg_495603 = nimCopy(null, self_495601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_495601.msg.pyType === null)) {
			F.line = 2895;
			var e_495637 = null;
			F.line = 2896;
			e_495637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_495637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_495637.parent = null;
			F.line = 26;
			raiseException(e_495637, "InternalError");
			}
			
			F.line = 27;
			var fun_495802 = self_495601.msg.pyType.magicMethods.Field25;
			if ((fun_495802 === null)) {
			F.line = 29;
			var obj_type_str_495811 = self_495601.msg.pyType.name;
			F.line = 30;
			var method_str_495813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_495815 = (makeNimstrLit("No ")).concat(method_str_495813,makeNimstrLit(" method for "),obj_type_str_495811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_495817 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_495817.tk = 3;
			F.line = 108;
			excp_495817.thrown = true;
			F.line = 109;
			excp_495817.msg = new_py_string_176075(msg_495815);
			var excp_495820 = excp_495817;
			F.line = 36;
			result_495462 = excp_495820;
			break BeforeRet;
			}
			
			var fun_496002 = fun_495802;
			F.line = 46;
			var res_496004 = fun_496002(self_495601.msg);
			var msg_obj_496202 = res_496004;
				if (of_py_exception_object_358259(msg_obj_496202)) {
				Tmp1 = msg_obj_496202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_495603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_495603 = nimCopy(null, msg_obj_496202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_496210 = (reprEnum(self_495601.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_495603);
		result_495462 = new_py_string_176075(str_496210);
	} while (false);
	framePtr = F.prev;

	return result_495462;

}

function new_py_keyboard_interrupt_error_object_magic_496226(args_496241) {
	var result_496242 = null;

	var F={procname:"exceptionsImpl.newPyKeyboardInterruptErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_496244 = new_py_keyboard_interrupt_error_simple_374601();
		F.line = 41;
		excp_496244.tk = 17;
		F.line = 42;
		excp_496244.msg = new_py_tuple_473057(args_496241);
		result_496242 = excp_496244;
	framePtr = F.prev;

	return result_496242;

}
py_base_error_object_type_357262.magicMethods.Field25 = repr_py_base_error_object_magic_481826;
py_base_error_object_type_357262.magicMethods.Field26 = new_py_base_error_object_magic_482626;
py_name_error_object_type_358419.magicMethods.Field25 = repr_py_name_error_object_magic_482659;
py_name_error_object_type_358419.magicMethods.Field26 = new_py_name_error_object_magic_483426;
py_not_implemented_error_object_type_359505.magicMethods.Field25 = repr_py_not_implemented_error_object_magic_483459;
py_not_implemented_error_object_type_359505.magicMethods.Field26 = new_py_not_implemented_error_object_magic_484226;
py_type_error_object_type_360505.magicMethods.Field25 = repr_py_type_error_object_magic_484259;
py_type_error_object_type_360505.magicMethods.Field26 = new_py_type_error_object_magic_485026;
py_attribute_error_object_type_361505.magicMethods.Field25 = repr_py_attribute_error_object_magic_485059;
py_attribute_error_object_type_361505.magicMethods.Field26 = new_py_attribute_error_object_magic_485826;
py_value_error_object_type_362505.magicMethods.Field25 = repr_py_value_error_object_magic_485859;
py_value_error_object_type_362505.magicMethods.Field26 = new_py_value_error_object_magic_486626;
py_index_error_object_type_363505.magicMethods.Field25 = repr_py_index_error_object_magic_486659;
py_index_error_object_type_363505.magicMethods.Field26 = new_py_index_error_object_magic_487426;
py_stop_iter_error_object_type_364505.magicMethods.Field25 = repr_py_stop_iter_error_object_magic_487459;
py_stop_iter_error_object_type_364505.magicMethods.Field26 = new_py_stop_iter_error_object_magic_488226;
py_lock_error_object_type_365505.magicMethods.Field25 = repr_py_lock_error_object_magic_488259;
py_lock_error_object_type_365505.magicMethods.Field26 = new_py_lock_error_object_magic_489026;
py_import_error_object_type_366505.magicMethods.Field25 = repr_py_import_error_object_magic_489059;
py_import_error_object_type_366505.magicMethods.Field26 = new_py_import_error_object_magic_489826;
py_unbound_local_error_object_type_367505.magicMethods.Field25 = repr_py_unbound_local_error_object_magic_489859;
py_unbound_local_error_object_type_367505.magicMethods.Field26 = new_py_unbound_local_error_object_magic_490626;
py_key_error_object_type_368505.magicMethods.Field25 = repr_py_key_error_object_magic_490659;
py_key_error_object_type_368505.magicMethods.Field26 = new_py_key_error_object_magic_491426;
py_assertion_error_object_type_369505.magicMethods.Field25 = repr_py_assertion_error_object_magic_491459;
py_assertion_error_object_type_369505.magicMethods.Field26 = new_py_assertion_error_object_magic_492226;
py_zero_division_error_object_type_370505.magicMethods.Field25 = repr_py_zero_division_error_object_magic_492259;
py_zero_division_error_object_type_370505.magicMethods.Field26 = new_py_zero_division_error_object_magic_493026;
py_runtime_error_object_type_371505.magicMethods.Field25 = repr_py_runtime_error_object_magic_493059;
py_runtime_error_object_type_371505.magicMethods.Field26 = new_py_runtime_error_object_magic_493826;
py_syntax_error_object_type_372505.magicMethods.Field25 = repr_py_syntax_error_object_magic_493859;
py_syntax_error_object_type_372505.magicMethods.Field26 = new_py_syntax_error_object_magic_494626;
py_memory_error_object_type_373505.magicMethods.Field25 = repr_py_memory_error_object_magic_494659;
py_memory_error_object_type_373505.magicMethods.Field26 = new_py_memory_error_object_magic_495426;
py_keyboard_interrupt_error_object_type_374505.magicMethods.Field25 = repr_py_keyboard_interrupt_error_object_magic_495459;
py_keyboard_interrupt_error_object_type_374505.magicMethods.Field26 = new_py_keyboard_interrupt_error_object_magic_496226;

function new_497406() {
	var result_497411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_497601 = null;
		F.line = 211;
		r_497601 = {m_type: NTI497125, code: null, opCodes: [null, 0], opArgs: [null, 0], lineNos: null, constants: null, names: null, localVars: null, cellVars: null, freeVars: null, argNames: null, argScopes: null, codeName: null, fileName: null, id: 0, pyType: null};
		F.line = 212;
		result_497411 = r_497601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_497411;

}

function new_py_code_simple_497401() {
	var result_497403 = null;

	var F={procname:"codeobject.newPyCodeSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_497624 = new_497406();
		F.line = 561;
		obj_497624.pyType = py_code_object_type_497181;
		F.line = 563;
		give_id_157814(obj_497624);
		result_497403 = obj_497624;
	framePtr = F.prev;

	return result_497403;

}

function new_py_code_default_498021(args_497080) {
	var result_498024 = null;

	var F={procname:"codeobject.newPyCodeDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_498024 = new_py_code_simple_497401();
	framePtr = F.prev;

	return result_498024;

}
var py_code_object_type_497181 = new_py_type_159261(makeNimstrLit("Code"));
py_code_object_type_497181.kind = 11;
py_code_object_type_497181.magicMethods.Field26 = new_py_code_default_498021;

function parse_saturated_natural_38485(s_38487, b_38489, b_38489_Idx, start_38490) {
			var Tmp1;
					var Tmp4;

	var result_38492 = 0;

	var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 301;
		var i_38493 = start_38490;
		if (((i_38493 < (s_38487 != null ? s_38487.length : 0)) && (s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0] == 43))) {
		F.line = 302;
		i_38493 = addInt(i_38493, 1);
		}
		
			if (!(i_38493 < (s_38487 != null ? s_38487.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet15[s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 304;
		b_38489[b_38489_Idx] = 0;
		L2: do {
			F.line = 305;
				L3: while (true) {
					if (!(i_38493 < (s_38487 != null ? s_38487.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet16[s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 306;
					var c_38535 = subInt(s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0], 48);
					if ((b_38489[b_38489_Idx] <= divInt(subInt(2147483647, c_38535), 10))) {
					F.line = 308;
					b_38489[b_38489_Idx] = addInt(mulInt(b_38489[b_38489_Idx], 10), c_38535);
					}
					else {
						F.line = 310;
						b_38489[b_38489_Idx] = 2147483647;
					}
					
					F.line = 311;
					i_38493 = addInt(i_38493, 1);
					L5: do {
						F.line = 312;
							L6: while (true) {
							if (!((i_38493 < (s_38487 != null ? s_38487.length : 0)) && (s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0] == 95))) break L6;
								F.line = 312;
								i_38493 = addInt(i_38493, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 313;
		result_38492 = subInt(i_38493, start_38490);
		}
		
	framePtr = F.prev;

	return result_38492;

}

function parse_standard_format_specifier_141928(s_141930, start_141931, ignore_unknown_suffix_141933) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_141934 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

	var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 449;
		result_141934.fill = 32;
		F.line = 450;
		result_141934.align = 0;
		F.line = 451;
		result_141934.sign = 45;
		F.line = 452;
		var i_141937 = start_141931;
		if (((addInt(i_141937, 1) < (s_141930 != null ? s_141930.length : 0)) && (ConstSet11[s_141930[chckIndx(addInt(i_141937, 1), 0, s_141930.length+0-1)-0]] != undefined))) {
		F.line = 454;
		result_141934.fill = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 455;
		result_141934.align = s_141930[chckIndx(addInt(i_141937, 1), 0, s_141930.length+0-1)-0];
		F.line = 456;
		i_141937 = addInt(i_141937, 2);
		}
		else {
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (ConstSet12[s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0]] != undefined))) {
		F.line = 458;
		result_141934.align = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 459;
		i_141937 = addInt(i_141937, 1);
		}
		}
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (ConstSet13[s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0]] != undefined))) {
		F.line = 462;
		result_141934.sign = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 463;
		i_141937 = addInt(i_141937, 1);
		}
		
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0] == 35))) {
		F.line = 466;
		result_141934.alternateForm = true;
		F.line = 467;
		i_141937 = addInt(i_141937, 1);
		}
		
			if (!((addInt(i_141937, 1) < (s_141930 != null ? s_141930.length : 0)) && (s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet14[s_141930[chckIndx(addInt(i_141937, 1), 0, s_141930.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 470;
		result_141934.padWithZero = true;
		F.line = 471;
		i_141937 = addInt(i_141937, 1);
		}
		
		F.line = 473;
		var parsed_length_142022 = parse_saturated_natural_38485(s_141930, result_141934, "minimumWidth", i_141937);
		F.line = 474;
		i_141937 = addInt(i_141937, parsed_length_142022);
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0] == 46))) {
		F.line = 476;
		i_141937 = addInt(i_141937, 1);
		F.line = 477;
		var parsed_length_b_142042 = parse_saturated_natural_38485(s_141930, result_141934, "precision", i_141937);
		F.line = 478;
		i_141937 = addInt(i_141937, parsed_length_b_142042);
		}
		else {
			F.line = 480;
			result_141934.precision = -1;
		}
		
			if (!(i_141937 < (s_141930 != null ? s_141930.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet17[s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0]] != undefined);			}		if (Tmp2) {
		F.line = 483;
		result_141934.typ = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 484;
		i_141937 = addInt(i_141937, 1);
		}
		
		F.line = 485;
		result_141934.endPosition = i_141937;
			if (!!((i_141937 == (s_141930 != null ? s_141930.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_141933);			}		if (Tmp3) {
		F.line = 2895;
		var e_142120 = null;
		F.line = 2896;
		e_142120 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 488;
		e_142120.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ")).concat(HEX5BHEX5D_81105(s_141930, HEX2EHEX2E_81053(i_141937, 1))), NTI138);
		F.line = 2891;
		e_142120.parent = null;
		F.line = 487;
		raiseException(e_142120, "ValueError");
		}
		
	framePtr = F.prev;

	return result_141934;

}

function mk_digit_141621(v_141623, typ_141624) {
			var Tmp1;

	var result_141625 = null;

	var F={procname:"strformat.mkDigit",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		if (!((v_141623 < 26))) {
		F.line = 342;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim(342, 9) `v < 26` "));
		}
		
		if ((v_141623 < 10)) {
		F.line = 344;
		result_141625 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_141623), 0, 255)), NTI138);
		}
		else {
			F.line = 346;
			if ((typ_141624 == 120)) {
			Tmp1 = 97;
			}
			else {
			Tmp1 = 65;
			}
			
			result_141625 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_141623), 10), 0, 255)), NTI138);
		}
		
	framePtr = F.prev;

	return result_141625;

}

function nsuRepeatChar(c_134984, count_134985) {
	var result_134986 = null;

		result_134986 = nimCopy(null, mnewString(count_134985), NTI138);
		L1: do {
			var i_134998 = 0;
			var colontmp__135000 = 0;
			colontmp__135000 = (count_134985 - 1);
			var res_135003 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_135003 <= colontmp__135000)) break L3;
						i_134998 = res_135003;
						result_134986[i_134998] = c_134984;
						res_135003 += 1;
					}
			} while(false);
		} while(false);

	return result_134986;

}

function format_int_158429(n_158433, radix_158435, spec_158437) {
		var Tmp7;

	var result_158438 = null;

	var F={procname:"formatInt.formatInt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 388;
		var v_158601 = n_158433;
		F.line = 389;
		var negative_158602 = (v_158601 < 0);
		if (negative_158602) {
		F.line = 392;
		v_158601 = mulInt(v_158601, -1);
		}
		
		F.line = 394;
		var xx_158604 = [];
		if (spec_158437.alternateForm) {
		F.line = 396;
		switch (spec_158437.typ) {
		case 88:
			F.line = 397;
			xx_158604 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 120:
			F.line = 398;
			xx_158604 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 98:
			F.line = 399;
			xx_158604 = nimCopy(null, makeNimstrLit("0b"), NTI138);
			break;
		case 111:
			F.line = 400;
			xx_158604 = nimCopy(null, makeNimstrLit("0o"), NTI138);
			break;
		default: 
			break;
		}
		}
		
		if ((v_158601 == 0)) {
		F.line = 404;
		result_158438 = nimCopy(null, makeNimstrLit("0"), NTI138);
		}
		else {
			F.line = 406;
			result_158438 = nimCopy(null, [], NTI138);
			L1: do {
				F.line = 407;
					L2: while (true) {
					if (!(0 < v_158601)) break L2;
						F.line = 408;
						var d_158607 = modInt(v_158601, radix_158435);
						F.line = 409;
						v_158601 = divInt(v_158601, radix_158435);
						F.line = 410;
						if (result_158438 != null) { result_158438 = (result_158438).concat(mk_digit_141621(chckRange(d_158607, -2147483648, 2147483647), spec_158437.typ)); } else { result_158438 = mk_digit_141621(chckRange(d_158607, -2147483648, 2147483647), spec_158437.typ).slice(); };
					}
			} while(false);
			L3: do {
				F.line = 411;
				var idx_158618 = 0;
				F.line = 3616;
				var colontmp__158664 = 0;
				F.line = 411;
				colontmp__158664 = divInt((result_158438 != null ? result_158438.length : 0), 2);
				F.line = 3617;
				var i_158667 = 0;
				L4: do {
					F.line = 3618;
						L5: while (true) {
						if (!(i_158667 < colontmp__158664)) break L5;
							F.line = 3619;
							idx_158618 = i_158667;
							F.line = 412;
							var Tmp6 = result_158438[chckIndx(idx_158618, 0, result_158438.length+0-1)-0]; result_158438[chckIndx(idx_158618, 0, result_158438.length+0-1)-0] = result_158438[chckIndx(subInt(subInt((result_158438 != null ? result_158438.length : 0), idx_158618), 1), 0, result_158438.length+0-1)-0]; result_158438[chckIndx(subInt(subInt((result_158438 != null ? result_158438.length : 0), idx_158618), 1), 0, result_158438.length+0-1)-0] = Tmp6;							F.line = 3620;
							i_158667 = addInt(i_158667, 1);
						}
				} while(false);
			} while(false);
		}
		
		if (spec_158437.padWithZero) {
		F.line = 414;
		if (negative_158602) Tmp7 = true; else {			Tmp7 = !((spec_158437.sign == 45));		}		var sign_158637 = Tmp7;
		F.line = 415;
		var to_fill_158644 = subInt(subInt(subInt(spec_158437.minimumWidth, (result_158438 != null ? result_158438.length : 0)), (xx_158604 != null ? xx_158604.length : 0)), (sign_158637 ? 1:0));
		if ((0 < to_fill_158644)) {
		F.line = 417;
		result_158438 = nimCopy(null, (nsuRepeatChar(48, chckRange(to_fill_158644, 0, 2147483647))).concat(result_158438), NTI138);
		}
		
		}
		
		if (negative_158602) {
		F.line = 420;
		result_158438 = nimCopy(null, (makeNimstrLit("-")).concat(xx_158604,result_158438), NTI138);
		}
		else {
		if (!((spec_158437.sign == 45))) {
		F.line = 422;
		result_158438 = nimCopy(null, [spec_158437.sign].concat(xx_158604,result_158438), NTI138);
		}
		else {
			F.line = 424;
			result_158438 = nimCopy(null, (xx_158604).concat(result_158438), NTI138);
		}
		}
		if ((spec_158437.align == 60)) {
		L8: do {
			F.line = 427;
			var i_158655 = 0;
			F.line = 3616;
			var colontmp__158670 = 0;
			F.line = 3616;
			var colontmp__158671 = 0;
			F.line = 427;
			colontmp__158670 = (result_158438 != null ? result_158438.length : 0);
			F.line = 427;
			colontmp__158671 = spec_158437.minimumWidth;
			F.line = 3617;
			var i_158674 = colontmp__158670;
			L9: do {
				F.line = 3618;
					L10: while (true) {
					if (!(i_158674 < colontmp__158671)) break L10;
						F.line = 3619;
						i_158655 = i_158674;
						F.line = 428;
						if (result_158438 != null) { addChar(result_158438, spec_158437.fill); } else { result_158438 = [spec_158437.fill]; };
						F.line = 3620;
						i_158674 = addInt(i_158674, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 430;
			var to_fill_158656 = subInt(spec_158437.minimumWidth, (result_158438 != null ? result_158438.length : 0));
			if ((spec_158437.align == 94)) {
			F.line = 432;
			var half_158657 = divInt(to_fill_158656, 2);
			F.line = 433;
			result_158438 = nimCopy(null, (nsuRepeatChar(spec_158437.fill, chckRange(half_158657, 0, 2147483647))).concat(result_158438,nsuRepeatChar(spec_158437.fill, chckRange(subInt(to_fill_158656, half_158657), 0, 2147483647))), NTI138);
			}
			else {
				if ((0 < to_fill_158656)) {
				F.line = 436;
				result_158438 = nimCopy(null, (nsuRepeatChar(spec_158437.fill, chckRange(to_fill_158656, 0, 2147483647))).concat(result_158438), NTI138);
				}
				
			}
			
		}
		
	framePtr = F.prev;

	return result_158438;

}

function format_158402(value_158406, specifier_158408, res_158410, res_158410_Idx) {
	var F={procname:"format.format",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 495;
		var spec_158411 = parse_standard_format_specifier_141928(specifier_158408, 0, false);
		F.line = 496;
		var radix_158413 = 10;
		F.line = 497;
		switch (spec_158411.typ) {
		case 120:
		case 88:
			F.line = 498;
			radix_158413 = 16;
			break;
		case 100:
		case 0:
			break;
		case 98:
			F.line = 500;
			radix_158413 = 2;
			break;
		case 111:
			F.line = 501;
			radix_158413 = 8;
			break;
		default: 
			F.line = 2895;
			var e_158419 = null;
			F.line = 2896;
			e_158419 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 505;
			e_158419.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ")).concat([spec_158411.typ]), NTI138);
			F.line = 2891;
			e_158419.parent = null;
			F.line = 503;
			raiseException(e_158419, "ValueError");
			break;
		}
		F.line = 506;
		if (res_158410[res_158410_Idx] != null) { res_158410[res_158410_Idx] = (res_158410[res_158410_Idx]).concat(format_int_158429(value_158406, radix_158413, spec_158411)); } else { res_158410[res_158410_Idx] = format_int_158429(value_158406, radix_158413, spec_158411).slice(); };
	framePtr = F.prev;

	
}

function id_str_158001(obj_158003) {
	var result_158004 = null;

	var F={procname:"pyobjectBase.idStr",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 179;
		F.line = 179;
		var fmt_res_158007 = [mnewString(0)];
		F.line = 274;
		format_158402(obj_158003.id, makeNimstrLit("#x"), fmt_res_158007, 0);
		result_158004 = nimCopy(null, fmt_res_158007[0], NTI138);
	framePtr = F.prev;

	return result_158004;

}

function repr_py_code_object_magic_498552(self_no_cast_498554) {
	var result_498555 = null;

	var F={procname:"codeobject.reprPyCodeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_498554.m_type, NTI497125))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyCodeObject` "));
		}
		
		F.line = 438;
		var self_498601 = self_no_cast_498554;
		F.line = 71;
		var code_name_498602 = nimCopy(null, self_498601.codeName.str, NTI138);
		F.line = 72;
		var file_name_498603 = nimCopy(null, self_498601.fileName.str, NTI138);
		F.line = 73;
		F.line = 73;
		var fmt_res_498607 = mnewString(0);
		F.line = 73;
		if (fmt_res_498607 != null) { fmt_res_498607 = (fmt_res_498607).concat(makeNimstrLit("<code object ")); } else { fmt_res_498607 = makeNimstrLit("<code object "); };
		F.line = 260;
		if (fmt_res_498607 != null) { fmt_res_498607 = (fmt_res_498607).concat(code_name_498602); } else { fmt_res_498607 = code_name_498602.slice(); };
		F.line = 73;
		if (fmt_res_498607 != null) { fmt_res_498607 = (fmt_res_498607).concat(makeNimstrLit(" at ")); } else { fmt_res_498607 = makeNimstrLit(" at "); };
		F.line = 260;
		if (fmt_res_498607 != null) { fmt_res_498607 = (fmt_res_498607).concat(id_str_158001(self_498601)); } else { fmt_res_498607 = id_str_158001(self_498601).slice(); };
		F.line = 73;
		if (fmt_res_498607 != null) { fmt_res_498607 = (fmt_res_498607).concat(makeNimstrLit(", file \"")); } else { fmt_res_498607 = makeNimstrLit(", file \""); };
		F.line = 260;
		if (fmt_res_498607 != null) { fmt_res_498607 = (fmt_res_498607).concat(file_name_498603); } else { fmt_res_498607 = file_name_498603.slice(); };
		F.line = 73;
		if (fmt_res_498607 != null) { fmt_res_498607 = (fmt_res_498607).concat(makeNimstrLit("\">")); } else { fmt_res_498607 = makeNimstrLit("\">"); };
		var msg_499201 = nimCopy(null, fmt_res_498607, NTI138);
		result_498555 = new_py_str_176092(msg_499201);
	framePtr = F.prev;

	return result_498555;

}
py_code_object_type_497181.magicMethods.Field25 = repr_py_code_object_magic_498552;
var py_config_514072 = [{filepath: null, filename: null, path: null}];

function new_515406() {
	var result_515411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_515601 = null;
		F.line = 211;
		r_515601 = {m_type: NTI515255, items: null, reprLock: false, readNum: 0, writeLock: false, id: 0, pyType: null};
		F.line = 212;
		result_515411 = r_515601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_515411;

}

function new_py_list_simple_515401() {
	var result_515403 = null;

	var F={procname:"listobject.newPyListSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_515624 = new_515406();
		F.line = 561;
		obj_515624.pyType = py_list_object_type_515269;
		F.line = 563;
		give_id_157814(obj_515624);
		result_515403 = obj_515624;
	framePtr = F.prev;

	return result_515403;

}

function new_py_list_default_516021(args_515210) {
	var result_516024 = null;

	var F={procname:"listobject.newPyListDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_516024 = new_py_list_simple_515401();
	framePtr = F.prev;

	return result_516024;

}
var py_list_object_type_515269 = new_py_type_159261(makeNimstrLit("List"));
py_list_object_type_515269.kind = 9;
py_list_object_type_515269.magicMethods.Field26 = new_py_list_default_516021;

function contains_py_list_object_magic_516293(self_no_cast_516295, other_516296) {
							var Tmp5;

	var result_516297 = null;

	var F={procname:"listobject.containsPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_516295.m_type, NTI515255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_516401 = self_no_cast_516295;
		if (self_516401.writeLock) {
		F.line = 414;
		var msg_516403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_516405 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_516405.tk = 8;
		F.line = 108;
		excp_516405.thrown = true;
		F.line = 109;
		excp_516405.msg = new_py_string_176075(msg_516403);
		result_516297 = excp_516405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_516401.readNum = addInt(self_516401.readNum, 1);
		F.line = 438;
		try {
		L2: do {
			F.line = 24;
			var idx_516462 = 0;
			F.line = 24;
			var item_516463 = null;
			F.line = 2352;
			var colontmp__517025 = null;
			F.line = 24;
			colontmp__517025 = self_516401.items;
			F.line = 2354;
			var i_517028 = 0;
			L3: do {
				F.line = 2355;
					L4: while (true) {
					if (!(i_517028 < (colontmp__517025 != null ? colontmp__517025.length : 0))) break L4;
						F.line = 2356;
						idx_516462 = i_517028;
						F.line = 2356;
						item_516463 = colontmp__517025[chckIndx(i_517028, 0, colontmp__517025.length+0-1)-0];
						F.line = 25;
						F.line = 56;
						if ((item_516463.pyType === null)) {
						F.line = 2895;
						var e_516490 = null;
						F.line = 2896;
						e_516490 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_516490.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_516490.parent = null;
						F.line = 26;
						raiseException(e_516490, "InternalError");
						}
						
						F.line = 27;
						var fun_516602 = item_516463.pyType.magicMethods.Field18;
						if ((fun_516602 === null)) {
						F.line = 29;
						var obj_type_str_516611 = item_516463.pyType.name;
						F.line = 30;
						var method_str_516613 = makeNimstrLit("eq");
						F.line = 31;
						var msg_516615 = (makeNimstrLit("No ")).concat(method_str_516613,makeNimstrLit(" method for "),obj_type_str_516611,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 106;
						var excp_516617 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_516617.tk = 3;
						F.line = 108;
						excp_516617.thrown = true;
						F.line = 109;
						excp_516617.msg = new_py_string_176075(msg_516615);
						var excp_516620 = excp_516617;
						F.line = 36;
						result_516297 = excp_516620;
						break BeforeRet;
						}
						
						var fun_516802 = fun_516602;
						F.line = 57;
						var res_516804 = fun_516802(item_516463, other_516296);
						var ret_obj_517001 = res_516804;
							if (of_py_exception_object_358259(ret_obj_517001)) {
							Tmp5 = ret_obj_517001.thrown;
							}
							else {
							Tmp5 = false;
							}
							
						if (Tmp5) {
						F.line = 27;
						result_516297 = ret_obj_517001;
						break BeforeRet;
						}
						
						if ((ret_obj_517001 == py_true_obj_354074)) {
						F.line = 29;
						result_516297 = py_true_obj_354074;
						break BeforeRet;
						}
						
						F.line = 2357;
						i_517028 = addInt(i_517028, 1);
					}
			} while(false);
		} while(false);
		F.line = 30;
		result_516297 = py_false_obj_354075;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_516401.readNum = subInt(self_516401.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_516297;

}

function iter_py_list_object_magic_517044(self_no_cast_517046) {
		var Tmp1;

	var result_517047 = null;

	var F={procname:"listobject.iterPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_517046.m_type, NTI515255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_517201 = self_no_cast_517046;
		if (self_517201.writeLock) {
		F.line = 414;
		var msg_517203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_517205 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_517205.tk = 8;
		F.line = 108;
		excp_517205.thrown = true;
		F.line = 109;
		excp_517205.msg = new_py_string_176075(msg_517203);
		result_517047 = excp_517205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_517201.readNum = addInt(self_517201.readNum, 1);
		F.line = 438;
		try {
		Tmp1 = new_py_seq_iter_469648(self_517201.items);
		} finally {
		framePtr = F;
		F.line = 417;
		self_517201.readNum = subInt(self_517201.readNum, 1);
		}
		result_517047 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_517047;

}

function repr_py_list_object_magic_517241(self_no_cast_517243) {
	var result_517244 = null;

	var F={procname:"listobject.reprPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_517243.m_type, NTI515255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_517401 = self_no_cast_517243;
		if (self_517401.reprLock) {
		F.line = 379;
		result_517244 = new_py_string_176075(makeNimstrLit("..."));
		break BeforeRet;
		}
		
		F.line = 380;
		self_517401.reprLock = true;
		F.line = 438;
		try {
		if (self_517401.writeLock) {
		F.line = 414;
		var msg_517403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_517405 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_517405.tk = 8;
		F.line = 108;
		excp_517405.thrown = true;
		F.line = 109;
		excp_517405.msg = new_py_string_176075(msg_517403);
		result_517244 = excp_517405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_517401.readNum = addInt(self_517401.readNum, 1);
		F.line = 438;
		try {
		F.line = 38;
		var ss_517417 = null;
		L3: do {
			F.line = 39;
			var item_517426 = null;
			F.line = 3909;
			var colontmp__518227 = null;
			F.line = 39;
			colontmp__518227 = self_517401.items;
			F.line = 3911;
			var i_518230 = 0;
			F.line = 3912;
			var l_518232 = (colontmp__518227 != null ? colontmp__518227.length : 0);
			L4: do {
				F.line = 3913;
					L5: while (true) {
					if (!(i_518230 < l_518232)) break L5;
						F.line = 3914;
						item_517426 = colontmp__518227[chckIndx(i_518230, 0, colontmp__518227.length+0-1)-0];
						F.line = 40;
						var item_repr_517427 = null;
						F.line = 41;
						F.line = 45;
						if ((item_517426.pyType === null)) {
						F.line = 2895;
						var e_517454 = null;
						F.line = 2896;
						e_517454 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_517454.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_517454.parent = null;
						F.line = 26;
						raiseException(e_517454, "InternalError");
						}
						
						F.line = 27;
						var fun_517602 = item_517426.pyType.magicMethods.Field25;
						if ((fun_517602 === null)) {
						F.line = 29;
						var obj_type_str_517611 = item_517426.pyType.name;
						F.line = 30;
						var method_str_517613 = makeNimstrLit("repr");
						F.line = 31;
						var msg_517615 = (makeNimstrLit("No ")).concat(method_str_517613,makeNimstrLit(" method for "),obj_type_str_517611,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 106;
						var excp_517617 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_517617.tk = 3;
						F.line = 108;
						excp_517617.thrown = true;
						F.line = 109;
						excp_517617.msg = new_py_string_176075(msg_517615);
						var excp_517620 = excp_517617;
						F.line = 36;
						result_517244 = excp_517620;
						break BeforeRet;
						}
						
						var fun_517802 = fun_517602;
						F.line = 46;
						var res_517804 = fun_517802(item_517426);
						var ret_obj_518001 = res_517804;
						if (!(of_py_str_object_175092(ret_obj_518001))) {
						F.line = 159;
						var type_name_518004 = nimCopy(null, ret_obj_518001.pyType.name, NTI138);
						F.line = 160;
						F.line = 160;
						var fmt_res_518007 = mnewString(0);
						F.line = 160;
						if (fmt_res_518007 != null) { fmt_res_518007 = (fmt_res_518007).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_518007 = makeNimstrLit(" returned non-string (type "); };
						F.line = 260;
						if (fmt_res_518007 != null) { fmt_res_518007 = (fmt_res_518007).concat(type_name_518004); } else { fmt_res_518007 = type_name_518004.slice(); };
						F.line = 160;
						if (fmt_res_518007 != null) { fmt_res_518007 = (fmt_res_518007).concat(makeNimstrLit(")")); } else { fmt_res_518007 = makeNimstrLit(")"); };
						var msg_518202 = (makeNimstrLit("__repr__")).concat(fmt_res_518007);
						F.line = 161;
						F.line = 106;
						var excp_518204 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_518204.tk = 3;
						F.line = 108;
						excp_518204.thrown = true;
						F.line = 109;
						excp_518204.msg = new_py_string_176075(msg_518202);
						result_517244 = excp_518204;
						break BeforeRet;
						}
						
						F.line = 43;
						item_repr_517427 = ret_obj_518001;
						F.line = 44;
						var Tmp6 = nimCopy(null, item_repr_517427.str, NTI138);
						if (ss_517417 != null) { ss_517417.push(Tmp6); } else { ss_517417 = [Tmp6]; };
						F.line = 3915;
						i_518230 = addInt(i_518230, 1);
						if (!(((colontmp__518227 != null ? colontmp__518227.length : 0) == l_518232))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 45;
		result_517244 = new_py_string_176075((makeNimstrLit("[")).concat(nsuJoinSep(ss_517417, makeNimstrLit(", ")),makeNimstrLit("]")));
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_517401.readNum = subInt(self_517401.readNum, 1);
		}
		} finally {
		framePtr = F;
		F.line = 383;
		self_517401.reprLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_517244;

}

function len_py_list_object_magic_518248(self_no_cast_518250) {
		var Tmp1;

	var result_518251 = null;

	var F={procname:"listobject.lenPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_518250.m_type, NTI515255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_518401 = self_no_cast_518250;
		if (self_518401.writeLock) {
		F.line = 414;
		var msg_518403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_518405 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_518405.tk = 8;
		F.line = 108;
		excp_518405.thrown = true;
		F.line = 109;
		excp_518405.msg = new_py_string_176075(msg_518403);
		result_518251 = excp_518405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_518401.readNum = addInt(self_518401.readNum, 1);
		F.line = 438;
		try {
		Tmp1 = new_py_int_378257((self_518401.items != null ? self_518401.items.length : 0));
		} finally {
		framePtr = F;
		F.line = 417;
		self_518401.readNum = subInt(self_518401.readNum, 1);
		}
		result_518251 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_518251;

}

function new_py_list_516257() {
	var result_516259 = null;

	var F={procname:"listobject.newPyList",prev:framePtr,filename:"../Objects/listobject.nim",line:0};
	framePtr = F;
		F.line = 16;
		result_516259 = new_py_list_simple_515401();
	framePtr = F.prev;

	return result_516259;

}

function getitem_py_list_object_magic_518448(self_no_cast_518450, other_518451) {
			var Tmp2;
			var Tmp3;

	var result_518452 = null;

	var F={procname:"listobject.getitemPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_518450.m_type, NTI515255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_518601 = self_no_cast_518450;
		if (self_518601.writeLock) {
		F.line = 414;
		var msg_518603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_518605 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_518605.tk = 8;
		F.line = 108;
		excp_518605.thrown = true;
		F.line = 109;
		excp_518605.msg = new_py_string_176075(msg_518603);
		result_518452 = excp_518605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_518601.readNum = addInt(self_518601.readNum, 1);
		F.line = 438;
		try {
		if (of_py_int_object_377315(other_518451)) {
		F.line = 53;
		F.line = 754;
		var idx_518628 = to_int_382674(other_518451);
		if ((idx_518628 < 0)) {
		F.line = 756;
		idx_518628 = addInt((self_518601.items != null ? self_518601.items.length : 0), idx_518628);
		}
		
			if ((idx_518628 < 0)) Tmp2 = true; else {				Tmp2 = ((self_518601.items != null ? self_518601.items.length : 0) <= idx_518628);			}		if (Tmp2) {
		F.line = 758;
		var msg_518630 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_518628)+""),makeNimstrLit(", len: "),cstrToNimstr(((self_518601.items != null ? self_518601.items.length : 0))+""));
		F.line = 759;
		F.line = 106;
		var excp_518632 = new_py_index_error_simple_363601();
		F.line = 107;
		excp_518632.tk = 6;
		F.line = 108;
		excp_518632.thrown = true;
		F.line = 109;
		excp_518632.msg = new_py_string_176075(msg_518630);
		result_518452 = excp_518632;
		break BeforeRet;
		}
		
		var idx_518634 = idx_518628;
		F.line = 54;
		result_518452 = self_518601.items[chckIndx(idx_518634, 0, self_518601.items.length+0-1)-0];
		break BeforeRet;
		}
		
		if (of_py_slice_object_470109(other_518451)) {
		F.line = 56;
		var slice_518635 = other_518451;
		F.line = 57;
		var new_list_518636 = new_py_list_516257();
		F.line = 58;
		var ret_obj_518639 = get_slice_items_471141(slice_518635, self_518601, "items", new_list_518636, "items");
			if (of_py_exception_object_358259(ret_obj_518639)) {
			Tmp3 = ret_obj_518639.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 60;
		result_518452 = ret_obj_518639;
		break BeforeRet;
		}
		else {
			F.line = 62;
			result_518452 = new_list_518636;
			break BeforeRet;
		}
		
		}
		
		F.line = 64;
		F.line = 131;
		var name_518646 = other_518451.pyType.name;
		F.line = 132;
		var msg_518648 = (makeNimstrLit("list indices must be integers or slices, not ")).concat(name_518646);
		F.line = 106;
		var excp_518650 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_518650.tk = 3;
		F.line = 108;
		excp_518650.thrown = true;
		F.line = 109;
		excp_518650.msg = new_py_string_176075(msg_518648);
		result_518452 = excp_518650;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_518601.readNum = subInt(self_518601.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_518452;

}

function setitem_py_list_object_magic_518678(self_no_cast_518680, arg1_518681, arg2_518682) {
			var Tmp1;
			var Tmp3;

	var result_518683 = null;

	var F={procname:"listobject.setitemPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_518680.m_type, NTI515255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_518801 = self_no_cast_518680;
			if ((0 < self_518801.readNum)) Tmp1 = true; else {				Tmp1 = self_518801.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_518805 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 106;
		var excp_518807 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_518807.tk = 8;
		F.line = 108;
		excp_518807.thrown = true;
		F.line = 109;
		excp_518807.msg = new_py_string_176075(msg_518805);
		result_518683 = excp_518807;
		break BeforeRet;
		}
		
		F.line = 408;
		self_518801.writeLock = true;
		F.line = 438;
		try {
		if (of_py_int_object_377315(arg1_518681)) {
		F.line = 69;
		F.line = 754;
		var idx_518821 = to_int_382674(arg1_518681);
		if ((idx_518821 < 0)) {
		F.line = 756;
		idx_518821 = addInt((self_518801.items != null ? self_518801.items.length : 0), idx_518821);
		}
		
			if ((idx_518821 < 0)) Tmp3 = true; else {				Tmp3 = ((self_518801.items != null ? self_518801.items.length : 0) <= idx_518821);			}		if (Tmp3) {
		F.line = 758;
		var msg_518823 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_518821)+""),makeNimstrLit(", len: "),cstrToNimstr(((self_518801.items != null ? self_518801.items.length : 0))+""));
		F.line = 759;
		F.line = 106;
		var excp_518825 = new_py_index_error_simple_363601();
		F.line = 107;
		excp_518825.tk = 6;
		F.line = 108;
		excp_518825.thrown = true;
		F.line = 109;
		excp_518825.msg = new_py_string_176075(msg_518823);
		result_518683 = excp_518825;
		break BeforeRet;
		}
		
		var idx_518827 = idx_518821;
		F.line = 70;
		self_518801.items[chckIndx(idx_518827, 0, self_518801.items.length+0-1)-0] = arg2_518682;
		F.line = 71;
		result_518683 = py_none_356044;
		break BeforeRet;
		}
		
		if (of_py_slice_object_470109(arg1_518681)) {
		F.line = 73;
		F.line = 106;
		var excp_518829 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_518829.tk = 3;
		F.line = 108;
		excp_518829.thrown = true;
		F.line = 109;
		excp_518829.msg = new_py_string_176075(makeNimstrLit("store to slice not implemented"));
		result_518683 = excp_518829;
		break BeforeRet;
		}
		
		F.line = 74;
		F.line = 131;
		var name_518837 = arg1_518681.pyType.name;
		F.line = 132;
		var msg_518839 = (makeNimstrLit("list indices must be integers or slices, not ")).concat(name_518837);
		F.line = 106;
		var excp_518841 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_518841.tk = 3;
		F.line = 108;
		excp_518841.thrown = true;
		F.line = 109;
		excp_518841.msg = new_py_string_176075(msg_518839);
		result_518683 = excp_518841;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 410;
		self_518801.writeLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_518683;

}

function raw_get_160346(t_160351, key_160353, hc_160355, hc_160355_Idx) {
						var Tmp3;

	var result_160356 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_160355[hc_160355_Idx] = hash_143900(key_160353);
		if ((hc_160355[hc_160355_Idx] == 0)) {
		F.line = 45;
		hc_160355[hc_160355_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_160368 = (hc_160355[hc_160355_Idx] & (t_160351.data != null ? (t_160351.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_160351.data[chckIndx(h_160368, 0, t_160351.data.length+0-1)-0].Field0)) break L2;
						if (!(t_160351.data[chckIndx(h_160368, 0, t_160351.data.length+0-1)-0].Field0 == hc_160355[hc_160355_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_160351.data[chckIndx(h_160368, 0, t_160351.data.length+0-1)-0].Field1, key_160353);						}					if (Tmp3) {
					F.line = 38;
					result_160356 = h_160368;
					break BeforeRet;
					}
					
					F.line = 39;
					h_160368 = next_try_146614(h_160368, (t_160351.data != null ? (t_160351.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_160356 = subInt(-1, h_160368);
	} while (false);
	framePtr = F.prev;

	return result_160356;

}

function has_key_160333(t_160339, key_160341) {
	var result_160342 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_160343 = [0];
		F.line = 264;
		result_160342 = (0 <= raw_get_160346(t_160339, key_160341, hc_160343, 0));
	framePtr = F.prev;

	return result_160342;

}

function raw_insert_163490(t_163497, data_163501, data_163501_Idx, key_163503, val_163505, hc_163507, h_163509) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_163501[data_163501_Idx][chckIndx(h_163509, 0, data_163501[data_163501_Idx].length+0-1)-0].Field1 = nimCopy(null, key_163503, NTI138);
		F.line = 65;
		data_163501[data_163501_Idx][chckIndx(h_163509, 0, data_163501[data_163501_Idx].length+0-1)-0].Field2 = val_163505;
		F.line = 66;
		data_163501[data_163501_Idx][chckIndx(h_163509, 0, data_163501[data_163501_Idx].length+0-1)-0].Field0 = hc_163507;
	framePtr = F.prev;

	
}

function enlarge_162246(t_162253) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_162261 = null;
		F.line = 314;
		n_162261 = new Array(chckRange(mulInt((t_162253.data != null ? t_162253.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_162253.data != null ? t_162253.data.length : 0), 2), 0, 2147483647);++i) {n_162261[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_162253.data; t_162253.data = n_162261; n_162261 = Tmp1;		L2: do {
			F.line = 316;
			var i_162516 = 0;
			F.line = 2088;
			var colontmp__164231 = 0;
			F.line = 316;
			colontmp__164231 = (n_162261 != null ? (n_162261.length-1) : -1);
			F.line = 2094;
			var res_164234 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_164234 <= colontmp__164231)) break L4;
						F.line = 2096;
						i_162516 = res_164234;
						F.line = 317;
						var eh_162752 = n_162261[chckIndx(i_162516, 0, n_162261.length+0-1)-0].Field0;
						if (is_filled_146491(eh_162752)) {
						F.line = 319;
						var j_162761 = (eh_162752 & (t_162253.data != null ? (t_162253.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_162253.data[chckIndx(j_162761, 0, t_162253.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_162761 = next_try_146614(j_162761, (t_162253.data != null ? (t_162253.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_163490(t_162253, t_162253, "data", n_162261[chckIndx(i_162516, 0, n_162261.length+0-1)-0].Field1, n_162261[chckIndx(i_162516, 0, n_162261.length+0-1)-0].Field2, eh_162752, j_162761);
						}
						
						F.line = 2097;
						res_164234 = addInt(res_164234, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_164253(t_164258, key_164260, hc_164262) {
	var result_164263 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_164272 = (hc_164262 & (t_164258.data != null ? (t_164258.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_164258.data[chckIndx(h_164272, 0, t_164258.data.length+0-1)-0].Field0)) break L2;
					if (((t_164258.data[chckIndx(h_164272, 0, t_164258.data.length+0-1)-0].Field0 == hc_164262) && eqStrings(t_164258.data[chckIndx(h_164272, 0, t_164258.data.length+0-1)-0].Field1, key_164260))) {
					F.line = 38;
					result_164263 = h_164272;
					break BeforeRet;
					}
					
					F.line = 39;
					h_164272 = next_try_146614(h_164272, (t_164258.data != null ? (t_164258.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_164263 = subInt(-1, h_164272);
	} while (false);
	framePtr = F.prev;

	return result_164263;

}

function HEX5BHEX5DHEX3D_161747(t_161754, key_161756, val_161758) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_161759 = [0];
		F.line = 98;
		var index_161772 = raw_get_160346(t_161754, key_161756, hc_161759, 0);
		if ((0 <= index_161772)) {
		F.line = 99;
		t_161754.data[chckIndx(index_161772, 0, t_161754.data.length+0-1)-0].Field2 = val_161758;
		}
		else {
			if (must_rehash_146509((t_161754.data != null ? t_161754.data.length : 0), t_161754.counter)) {
			F.line = 90;
			enlarge_162246(t_161754);
			F.line = 91;
			index_161772 = raw_get_known_hc_164253(t_161754, key_161756, hc_161759[0]);
			}
			
			F.line = 92;
			index_161772 = subInt(-1, index_161772);
			F.line = 93;
			raw_insert_163490(t_161754, t_161754, "data", key_161756, val_161758, hc_161759[0], index_161772);
			F.line = 100;
			t_161754.counter = addInt(t_161754.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function register_bltin_method_160182(t_160184, name_160185, fun_160186) {
	var F={procname:"pyobject.registerBltinMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		if (has_key_160333(t_160184.bltinMethods, name_160185)) {
		F.line = 2895;
		var e_161406 = null;
		F.line = 2896;
		e_161406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 92;
		F.line = 92;
		var fmt_res_161416 = mnewString(0);
		F.line = 92;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(makeNimstrLit("Method ")); } else { fmt_res_161416 = makeNimstrLit("Method "); };
		F.line = 260;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(name_160185); } else { fmt_res_161416 = name_160185.slice(); };
		F.line = 92;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(makeNimstrLit(" is registered twice for type ")); } else { fmt_res_161416 = makeNimstrLit(" is registered twice for type "); };
		F.line = 260;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(t_160184.name); } else { fmt_res_161416 = t_160184.name.slice(); };
		e_161406.message = nimCopy(null, fmt_res_161416, NTI138);
		F.line = 2891;
		e_161406.parent = null;
		F.line = 92;
		raiseException(e_161406, "InternalError");
		}
		
		F.line = 93;
		HEX5BHEX5DHEX3D_161747(t_160184.bltinMethods, name_160185, fun_160186);
	framePtr = F.prev;

	
}

function append_py_list_object_method_518859(self_no_cast_518861, args_518875) {
			var Tmp1;
		var Tmp2;

	var result_518876 = null;

	var F={procname:"listobject.appendPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_518875 != null ? args_518875.length : 0) == 1))) {
		F.line = 190;
		var msg_518888 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_518893 = mnewString(0);
		F.line = 192;
		if (fmt_res_518893 != null) { fmt_res_518893 = (fmt_res_518893).concat(makeNimstrLit(" argument (")); } else { fmt_res_518893 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_518893 != null) { fmt_res_518893 = (fmt_res_518893).concat(cstrToNimstr(((args_518875 != null ? args_518875.length : 0))+"")); } else { fmt_res_518893 = cstrToNimstr(((args_518875 != null ? args_518875.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_518893 != null) { fmt_res_518893 = (fmt_res_518893).concat(makeNimstrLit(" given)")); } else { fmt_res_518893 = makeNimstrLit(" given)"); };
		msg_518888 = nimCopy(null, (makeNimstrLit("append takes exactly 1")).concat(fmt_res_518893), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_519010 = mnewString(0);
			F.line = 194;
			if (fmt_res_519010 != null) { fmt_res_519010 = (fmt_res_519010).concat(makeNimstrLit(" argument (")); } else { fmt_res_519010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_519010 != null) { fmt_res_519010 = (fmt_res_519010).concat(cstrToNimstr(((args_518875 != null ? args_518875.length : 0))+"")); } else { fmt_res_519010 = cstrToNimstr(((args_518875 != null ? args_518875.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_519010 != null) { fmt_res_519010 = (fmt_res_519010).concat(makeNimstrLit(" given)")); } else { fmt_res_519010 = makeNimstrLit(" given)"); };
			msg_518888 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_519010), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_519209 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_519209.tk = 3;
		F.line = 108;
		excp_519209.thrown = true;
		F.line = 109;
		excp_519209.msg = new_py_string_176075(msg_518888);
		result_518876 = excp_519209;
		break BeforeRet;
		}
		
		F.line = 230;
		var item_519211 = args_518875[chckIndx(0, 0, args_518875.length+0-1)-0];
		if (!(isObj(self_no_cast_518861.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_519401 = self_no_cast_518861;
			if ((0 < self_519401.readNum)) Tmp1 = true; else {				Tmp1 = self_519401.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_519405 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 106;
		var excp_519407 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_519407.tk = 8;
		F.line = 108;
		excp_519407.thrown = true;
		F.line = 109;
		excp_519407.msg = new_py_string_176075(msg_519405);
		result_518876 = excp_519407;
		break BeforeRet;
		}
		
		F.line = 408;
		self_519401.writeLock = true;
		F.line = 444;
		try {
		F.line = 78;
		if (self_519401.items != null) { self_519401.items.push(item_519211); } else { self_519401.items = [item_519211]; };
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_519401.writeLock = false;
		}
		result_518876 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_518876;

}

function clear_py_list_object_method_519435(self_no_cast_519437, args_519451) {
			var Tmp1;
		var Tmp2;

	var result_519452 = null;

	var F={procname:"listobject.clearPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_519451 != null ? args_519451.length : 0) == 0))) {
		F.line = 190;
		var msg_519464 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_519469 = mnewString(0);
		F.line = 192;
		if (fmt_res_519469 != null) { fmt_res_519469 = (fmt_res_519469).concat(makeNimstrLit(" argument (")); } else { fmt_res_519469 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_519469 != null) { fmt_res_519469 = (fmt_res_519469).concat(cstrToNimstr(((args_519451 != null ? args_519451.length : 0))+"")); } else { fmt_res_519469 = cstrToNimstr(((args_519451 != null ? args_519451.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_519469 != null) { fmt_res_519469 = (fmt_res_519469).concat(makeNimstrLit(" given)")); } else { fmt_res_519469 = makeNimstrLit(" given)"); };
		msg_519464 = nimCopy(null, (makeNimstrLit("clear takes exactly 0")).concat(fmt_res_519469), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_519610 = mnewString(0);
			F.line = 194;
			if (fmt_res_519610 != null) { fmt_res_519610 = (fmt_res_519610).concat(makeNimstrLit(" argument (")); } else { fmt_res_519610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_519610 != null) { fmt_res_519610 = (fmt_res_519610).concat(cstrToNimstr(((args_519451 != null ? args_519451.length : 0))+"")); } else { fmt_res_519610 = cstrToNimstr(((args_519451 != null ? args_519451.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_519610 != null) { fmt_res_519610 = (fmt_res_519610).concat(makeNimstrLit(" given)")); } else { fmt_res_519610 = makeNimstrLit(" given)"); };
			msg_519464 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_519610), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_519809 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_519809.tk = 3;
		F.line = 108;
		excp_519809.thrown = true;
		F.line = 109;
		excp_519809.msg = new_py_string_176075(msg_519464);
		result_519452 = excp_519809;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_519437.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_520001 = self_no_cast_519437;
			if ((0 < self_520001.readNum)) Tmp1 = true; else {				Tmp1 = self_520001.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_520005 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 106;
		var excp_520007 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_520007.tk = 8;
		F.line = 108;
		excp_520007.thrown = true;
		F.line = 109;
		excp_520007.msg = new_py_string_176075(msg_520005);
		result_519452 = excp_520007;
		break BeforeRet;
		}
		
		F.line = 408;
		self_520001.writeLock = true;
		F.line = 444;
		try {
		F.line = 83;
		if (self_520001.items.length < 0) { for (var i=self_520001.items.length;i<0;++i) self_520001.items.push(null); }
               else { self_520001.items.length = 0; };
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_520001.writeLock = false;
		}
		result_519452 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_519452;

}

function copy_py_list_object_method_520035(self_no_cast_520037, args_520051) {
		var Tmp1;

	var result_520052 = null;

	var F={procname:"listobject.copyPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_520051 != null ? args_520051.length : 0) == 0))) {
		F.line = 190;
		var msg_520064 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_520069 = mnewString(0);
		F.line = 192;
		if (fmt_res_520069 != null) { fmt_res_520069 = (fmt_res_520069).concat(makeNimstrLit(" argument (")); } else { fmt_res_520069 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_520069 != null) { fmt_res_520069 = (fmt_res_520069).concat(cstrToNimstr(((args_520051 != null ? args_520051.length : 0))+"")); } else { fmt_res_520069 = cstrToNimstr(((args_520051 != null ? args_520051.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_520069 != null) { fmt_res_520069 = (fmt_res_520069).concat(makeNimstrLit(" given)")); } else { fmt_res_520069 = makeNimstrLit(" given)"); };
		msg_520064 = nimCopy(null, (makeNimstrLit("copy takes exactly 0")).concat(fmt_res_520069), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_520210 = mnewString(0);
			F.line = 194;
			if (fmt_res_520210 != null) { fmt_res_520210 = (fmt_res_520210).concat(makeNimstrLit(" argument (")); } else { fmt_res_520210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_520210 != null) { fmt_res_520210 = (fmt_res_520210).concat(cstrToNimstr(((args_520051 != null ? args_520051.length : 0))+"")); } else { fmt_res_520210 = cstrToNimstr(((args_520051 != null ? args_520051.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_520210 != null) { fmt_res_520210 = (fmt_res_520210).concat(makeNimstrLit(" given)")); } else { fmt_res_520210 = makeNimstrLit(" given)"); };
			msg_520064 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_520210), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_520409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_520409.tk = 3;
		F.line = 108;
		excp_520409.thrown = true;
		F.line = 109;
		excp_520409.msg = new_py_string_176075(msg_520064);
		result_520052 = excp_520409;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_520037.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_520601 = self_no_cast_520037;
		if (self_520601.writeLock) {
		F.line = 414;
		var msg_520603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_520605 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_520605.tk = 8;
		F.line = 108;
		excp_520605.thrown = true;
		F.line = 109;
		excp_520605.msg = new_py_string_176075(msg_520603);
		result_520052 = excp_520605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_520601.readNum = addInt(self_520601.readNum, 1);
		F.line = 444;
		try {
		F.line = 88;
		var new_l_520616 = new_py_list_516257();
		F.line = 89;
		new_l_520616.items = nimCopy(null, self_520601.items, NTI515256);
		Tmp1 = new_l_520616;
		} finally {
		framePtr = F;
		F.line = 417;
		self_520601.readNum = subInt(self_520601.readNum, 1);
		}
		result_520052 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_520052;

}

function count_py_list_object_method_520642(self_no_cast_520644, args_520658) {
		var Tmp1;
							var Tmp6;

	var result_520659 = null;

	var F={procname:"listobject.countPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_520658 != null ? args_520658.length : 0) == 1))) {
		F.line = 190;
		var msg_520671 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_520676 = mnewString(0);
		F.line = 192;
		if (fmt_res_520676 != null) { fmt_res_520676 = (fmt_res_520676).concat(makeNimstrLit(" argument (")); } else { fmt_res_520676 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_520676 != null) { fmt_res_520676 = (fmt_res_520676).concat(cstrToNimstr(((args_520658 != null ? args_520658.length : 0))+"")); } else { fmt_res_520676 = cstrToNimstr(((args_520658 != null ? args_520658.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_520676 != null) { fmt_res_520676 = (fmt_res_520676).concat(makeNimstrLit(" given)")); } else { fmt_res_520676 = makeNimstrLit(" given)"); };
		msg_520671 = nimCopy(null, (makeNimstrLit("count takes exactly 1")).concat(fmt_res_520676), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_520810 = mnewString(0);
			F.line = 194;
			if (fmt_res_520810 != null) { fmt_res_520810 = (fmt_res_520810).concat(makeNimstrLit(" argument (")); } else { fmt_res_520810 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_520810 != null) { fmt_res_520810 = (fmt_res_520810).concat(cstrToNimstr(((args_520658 != null ? args_520658.length : 0))+"")); } else { fmt_res_520810 = cstrToNimstr(((args_520658 != null ? args_520658.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_520810 != null) { fmt_res_520810 = (fmt_res_520810).concat(makeNimstrLit(" given)")); } else { fmt_res_520810 = makeNimstrLit(" given)"); };
			msg_520671 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_520810), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_521009 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_521009.tk = 3;
		F.line = 108;
		excp_521009.thrown = true;
		F.line = 109;
		excp_521009.msg = new_py_string_176075(msg_520671);
		result_520659 = excp_521009;
		break BeforeRet;
		}
		
		F.line = 230;
		var target_521011 = args_520658[chckIndx(0, 0, args_520658.length+0-1)-0];
		if (!(isObj(self_no_cast_520644.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_521201 = self_no_cast_520644;
		if (self_521201.writeLock) {
		F.line = 414;
		var msg_521203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_521205 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_521205.tk = 8;
		F.line = 108;
		excp_521205.thrown = true;
		F.line = 109;
		excp_521205.msg = new_py_string_176075(msg_521203);
		result_520659 = excp_521205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_521201.readNum = addInt(self_521201.readNum, 1);
		F.line = 444;
		try {
		F.line = 94;
		var count_521216 = 0;
		L3: do {
			F.line = 95;
			var item_521225 = null;
			F.line = 3909;
			var colontmp__521834 = null;
			F.line = 95;
			colontmp__521834 = self_521201.items;
			F.line = 3911;
			var i_521837 = 0;
			F.line = 3912;
			var l_521839 = (colontmp__521834 != null ? colontmp__521834.length : 0);
			L4: do {
				F.line = 3913;
					L5: while (true) {
					if (!(i_521837 < l_521839)) break L5;
						F.line = 3914;
						item_521225 = colontmp__521834[chckIndx(i_521837, 0, colontmp__521834.length+0-1)-0];
						F.line = 96;
						F.line = 56;
						if ((item_521225.pyType === null)) {
						F.line = 2895;
						var e_521252 = null;
						F.line = 2896;
						e_521252 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_521252.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_521252.parent = null;
						F.line = 26;
						raiseException(e_521252, "InternalError");
						}
						
						F.line = 27;
						var fun_521402 = item_521225.pyType.magicMethods.Field18;
						if ((fun_521402 === null)) {
						F.line = 29;
						var obj_type_str_521411 = item_521225.pyType.name;
						F.line = 30;
						var method_str_521413 = makeNimstrLit("eq");
						F.line = 31;
						var msg_521415 = (makeNimstrLit("No ")).concat(method_str_521413,makeNimstrLit(" method for "),obj_type_str_521411,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 106;
						var excp_521417 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_521417.tk = 3;
						F.line = 108;
						excp_521417.thrown = true;
						F.line = 109;
						excp_521417.msg = new_py_string_176075(msg_521415);
						var excp_521420 = excp_521417;
						F.line = 36;
						result_520659 = excp_521420;
						break BeforeRet;
						}
						
						var fun_521602 = fun_521402;
						F.line = 57;
						var res_521604 = fun_521602(item_521225, target_521011);
						var ret_obj_521801 = res_521604;
							if (of_py_exception_object_358259(ret_obj_521801)) {
							Tmp6 = ret_obj_521801.thrown;
							}
							else {
							Tmp6 = false;
							}
							
						if (Tmp6) {
						F.line = 98;
						result_520659 = ret_obj_521801;
						break BeforeRet;
						}
						
						if ((ret_obj_521801 == py_true_obj_354074)) {
						F.line = 100;
						count_521216 = addInt(count_521216, 1);
						}
						
						F.line = 3915;
						i_521837 = addInt(i_521837, 1);
						if (!(((colontmp__521834 != null ? colontmp__521834.length : 0) == l_521839))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		Tmp1 = new_py_int_378257(count_521216);
		} finally {
		framePtr = F;
		F.line = 417;
		self_521201.readNum = subInt(self_521201.readNum, 1);
		}
		result_520659 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_520659;

}

function doclear_py_list_object_method_521855(self_no_cast_521857, args_521871) {
		var Tmp1;

	var result_521872 = null;

	var F={procname:"listobject.doclearPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_521871 != null ? args_521871.length : 0) == 0))) {
		F.line = 190;
		var msg_521884 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_521889 = mnewString(0);
		F.line = 192;
		if (fmt_res_521889 != null) { fmt_res_521889 = (fmt_res_521889).concat(makeNimstrLit(" argument (")); } else { fmt_res_521889 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_521889 != null) { fmt_res_521889 = (fmt_res_521889).concat(cstrToNimstr(((args_521871 != null ? args_521871.length : 0))+"")); } else { fmt_res_521889 = cstrToNimstr(((args_521871 != null ? args_521871.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_521889 != null) { fmt_res_521889 = (fmt_res_521889).concat(makeNimstrLit(" given)")); } else { fmt_res_521889 = makeNimstrLit(" given)"); };
		msg_521884 = nimCopy(null, (makeNimstrLit("doClear takes exactly 0")).concat(fmt_res_521889), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_522010 = mnewString(0);
			F.line = 194;
			if (fmt_res_522010 != null) { fmt_res_522010 = (fmt_res_522010).concat(makeNimstrLit(" argument (")); } else { fmt_res_522010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_522010 != null) { fmt_res_522010 = (fmt_res_522010).concat(cstrToNimstr(((args_521871 != null ? args_521871.length : 0))+"")); } else { fmt_res_522010 = cstrToNimstr(((args_521871 != null ? args_521871.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_522010 != null) { fmt_res_522010 = (fmt_res_522010).concat(makeNimstrLit(" given)")); } else { fmt_res_522010 = makeNimstrLit(" given)"); };
			msg_521884 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_522010), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_522209 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_522209.tk = 3;
		F.line = 108;
		excp_522209.thrown = true;
		F.line = 109;
		excp_522209.msg = new_py_string_176075(msg_521884);
		result_521872 = excp_522209;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_521857.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_522401 = self_no_cast_521857;
		if (self_522401.writeLock) {
		F.line = 414;
		var msg_522403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_522405 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_522405.tk = 8;
		F.line = 108;
		excp_522405.thrown = true;
		F.line = 109;
		excp_522405.msg = new_py_string_176075(msg_522403);
		result_521872 = excp_522405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_522401.readNum = addInt(self_522401.readNum, 1);
		F.line = 444;
		try {
		Tmp1 = clear_py_list_object_method_519435(self_522401, []);
		} finally {
		framePtr = F;
		F.line = 417;
		self_522401.readNum = subInt(self_522401.readNum, 1);
		}
		result_521872 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_521872;

}

function doread_py_list_object_method_522441(self_no_cast_522443, args_522457) {
			var Tmp1;

	var result_522458 = null;

	var F={procname:"listobject.doreadPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(((args_522457 != null ? args_522457.length : 0) == 0))) {
		F.line = 190;
		var msg_522470 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_522475 = mnewString(0);
		F.line = 192;
		if (fmt_res_522475 != null) { fmt_res_522475 = (fmt_res_522475).concat(makeNimstrLit(" argument (")); } else { fmt_res_522475 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_522475 != null) { fmt_res_522475 = (fmt_res_522475).concat(cstrToNimstr(((args_522457 != null ? args_522457.length : 0))+"")); } else { fmt_res_522475 = cstrToNimstr(((args_522457 != null ? args_522457.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_522475 != null) { fmt_res_522475 = (fmt_res_522475).concat(makeNimstrLit(" given)")); } else { fmt_res_522475 = makeNimstrLit(" given)"); };
		msg_522470 = nimCopy(null, (makeNimstrLit("doRead takes exactly 0")).concat(fmt_res_522475), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_522610 = mnewString(0);
			F.line = 194;
			if (fmt_res_522610 != null) { fmt_res_522610 = (fmt_res_522610).concat(makeNimstrLit(" argument (")); } else { fmt_res_522610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_522610 != null) { fmt_res_522610 = (fmt_res_522610).concat(cstrToNimstr(((args_522457 != null ? args_522457.length : 0))+"")); } else { fmt_res_522610 = cstrToNimstr(((args_522457 != null ? args_522457.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_522610 != null) { fmt_res_522610 = (fmt_res_522610).concat(makeNimstrLit(" given)")); } else { fmt_res_522610 = makeNimstrLit(" given)"); };
			msg_522470 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_522610), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_522809 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_522809.tk = 3;
		F.line = 108;
		excp_522809.thrown = true;
		F.line = 109;
		excp_522809.msg = new_py_string_176075(msg_522470);
		result_522458 = excp_522809;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_522443.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_523001 = self_no_cast_522443;
			if ((0 < self_523001.readNum)) Tmp1 = true; else {				Tmp1 = self_523001.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_523005 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 106;
		var excp_523007 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_523007.tk = 8;
		F.line = 108;
		excp_523007.thrown = true;
		F.line = 109;
		excp_523007.msg = new_py_string_176075(msg_523005);
		result_522458 = excp_523007;
		break BeforeRet;
		}
		
		F.line = 408;
		self_523001.writeLock = true;
		F.line = 444;
		try {
		F.line = 112;
		result_522458 = doclear_py_list_object_method_521855(self_523001, []);
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 410;
		self_523001.writeLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_522458;

}

function aint_py_list_object_method_523027(self_no_cast_523029, args_523043) {
		var Tmp1;

	var result_523044 = null;

	var F={procname:"listobject.aintPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_523043 != null ? args_523043.length : 0) == 1))) {
		F.line = 190;
		var msg_523056 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_523061 = mnewString(0);
		F.line = 192;
		if (fmt_res_523061 != null) { fmt_res_523061 = (fmt_res_523061).concat(makeNimstrLit(" argument (")); } else { fmt_res_523061 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_523061 != null) { fmt_res_523061 = (fmt_res_523061).concat(cstrToNimstr(((args_523043 != null ? args_523043.length : 0))+"")); } else { fmt_res_523061 = cstrToNimstr(((args_523043 != null ? args_523043.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_523061 != null) { fmt_res_523061 = (fmt_res_523061).concat(makeNimstrLit(" given)")); } else { fmt_res_523061 = makeNimstrLit(" given)"); };
		msg_523056 = nimCopy(null, (makeNimstrLit("aInt takes exactly 1")).concat(fmt_res_523061), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_523210 = mnewString(0);
			F.line = 194;
			if (fmt_res_523210 != null) { fmt_res_523210 = (fmt_res_523210).concat(makeNimstrLit(" argument (")); } else { fmt_res_523210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_523210 != null) { fmt_res_523210 = (fmt_res_523210).concat(cstrToNimstr(((args_523043 != null ? args_523043.length : 0))+"")); } else { fmt_res_523210 = cstrToNimstr(((args_523043 != null ? args_523043.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_523210 != null) { fmt_res_523210 = (fmt_res_523210).concat(makeNimstrLit(" given)")); } else { fmt_res_523210 = makeNimstrLit(" given)"); };
			msg_523056 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_523210), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_523409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_523409.tk = 3;
		F.line = 108;
		excp_523409.thrown = true;
		F.line = 109;
		excp_523409.msg = new_py_string_176075(msg_523056);
		result_523044 = excp_523409;
		break BeforeRet;
		}
		
		if (!(isObj(args_523043[chckIndx(0, 0, args_523043.length+0-1)-0].m_type, NTI377303))) {
		F.line = 185;
		var expected_523422 = nimCopy(null, py_int_object_type_377313.name, NTI138);
		F.line = 186;
		var got_523423 = nimCopy(null, args_523043[chckIndx(0, 0, args_523043.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_523424 = makeNimstrLit("aInt");
		F.line = 188;
		F.line = 188;
		var fmt_res_523428 = mnewString(0);
		F.line = 260;
		if (fmt_res_523428 != null) { fmt_res_523428 = (fmt_res_523428).concat(expected_523422); } else { fmt_res_523428 = expected_523422.slice(); };
		F.line = 188;
		if (fmt_res_523428 != null) { fmt_res_523428 = (fmt_res_523428).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_523428 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_523428 != null) { fmt_res_523428 = (fmt_res_523428).concat(m_name_523424); } else { fmt_res_523428 = m_name_523424.slice(); };
		F.line = 188;
		if (fmt_res_523428 != null) { fmt_res_523428 = (fmt_res_523428).concat(makeNimstrLit(" (got ")); } else { fmt_res_523428 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_523428 != null) { fmt_res_523428 = (fmt_res_523428).concat(got_523423); } else { fmt_res_523428 = got_523423.slice(); };
		F.line = 188;
		if (fmt_res_523428 != null) { fmt_res_523428 = (fmt_res_523428).concat(makeNimstrLit(")")); } else { fmt_res_523428 = makeNimstrLit(")"); };
		var msg_524002 = nimCopy(null, fmt_res_523428, NTI138);
		F.line = 189;
		F.line = 106;
		var excp_524004 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_524004.tk = 3;
		F.line = 108;
		excp_524004.thrown = true;
		F.line = 109;
		excp_524004.msg = new_py_string_176075(msg_524002);
		result_523044 = excp_524004;
		break BeforeRet;
		}
		
		F.line = 237;
		var i_524006 = args_523043[chckIndx(0, 0, args_523043.length+0-1)-0];
		if (!(isObj(self_no_cast_523029.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_524201 = self_no_cast_523029;
		if (self_524201.writeLock) {
		F.line = 414;
		var msg_524203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_524205 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_524205.tk = 8;
		F.line = 108;
		excp_524205.thrown = true;
		F.line = 109;
		excp_524205.msg = new_py_string_176075(msg_524203);
		result_523044 = excp_524205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_524201.readNum = addInt(self_524201.readNum, 1);
		F.line = 444;
		try {
		F.line = 117;
		if (self_524201.items != null) { self_524201.items.push(i_524006); } else { self_524201.items = [i_524006]; };
		Tmp1 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 417;
		self_524201.readNum = subInt(self_524201.readNum, 1);
		}
		result_523044 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_523044;

}

function hello_py_list_object_method_524273(self_no_cast_524275, args_524289) {
	var result_524290 = null;

	var F={procname:"listobject.helloPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_524289 != null ? args_524289.length : 0) == 0))) {
		F.line = 190;
		var msg_524302 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_524307 = mnewString(0);
		F.line = 192;
		if (fmt_res_524307 != null) { fmt_res_524307 = (fmt_res_524307).concat(makeNimstrLit(" argument (")); } else { fmt_res_524307 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_524307 != null) { fmt_res_524307 = (fmt_res_524307).concat(cstrToNimstr(((args_524289 != null ? args_524289.length : 0))+"")); } else { fmt_res_524307 = cstrToNimstr(((args_524289 != null ? args_524289.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_524307 != null) { fmt_res_524307 = (fmt_res_524307).concat(makeNimstrLit(" given)")); } else { fmt_res_524307 = makeNimstrLit(" given)"); };
		msg_524302 = nimCopy(null, (makeNimstrLit("hello takes exactly 0")).concat(fmt_res_524307), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_524410 = mnewString(0);
			F.line = 194;
			if (fmt_res_524410 != null) { fmt_res_524410 = (fmt_res_524410).concat(makeNimstrLit(" argument (")); } else { fmt_res_524410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_524410 != null) { fmt_res_524410 = (fmt_res_524410).concat(cstrToNimstr(((args_524289 != null ? args_524289.length : 0))+"")); } else { fmt_res_524410 = cstrToNimstr(((args_524289 != null ? args_524289.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_524410 != null) { fmt_res_524410 = (fmt_res_524410).concat(makeNimstrLit(" given)")); } else { fmt_res_524410 = makeNimstrLit(" given)"); };
			msg_524302 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_524410), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_524609 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_524609.tk = 3;
		F.line = 108;
		excp_524609.thrown = true;
		F.line = 109;
		excp_524609.msg = new_py_string_176075(msg_524302);
		result_524290 = excp_524609;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_524275.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_524801 = self_no_cast_524275;
		F.line = 14;
		rawEcho(makeNimstrLit("hello"));
		L1: do {
			F.line = 15;
			var line_524808 = null;
			F.line = 455;
			var last_524814 = 0;
			F.line = 456;
			var splits_524816 = -1;
			L2: do {
				F.line = 614;
					L3: while (true) {
					if (!(last_524814 <= 5)) break L3;
						F.line = 459;
						var first_524818 = last_524814;
						L4: do {
							F.line = 460;
								L5: while (true) {
								if (!((last_524814 < 5) && !(substr_eq_132789(makeNimstrLit("hello"), last_524814, makeNimstrLit("\x0A"))))) break L5;
									F.line = 461;
									last_524814 = addInt(last_524814, 1);
								}
						} while(false);
						if ((splits_524816 == 0)) {
						F.line = 462;
						last_524814 = 5;
						}
						
						F.line = 463;
						line_524808 = substr_23422(makeNimstrLit("hello"), first_524818, subInt(last_524814, 1));
						F.line = 16;
						log(" ", toJSStr(line_524808));
						if ((splits_524816 == 0)) {
						F.line = 464;
						break L2;
						}
						
						F.line = 465;
						splits_524816 = subInt(splits_524816, 1);
						F.line = 466;
						last_524814 = addInt(last_524814, 1);
					}
			} while(false);
		} while(false);
		result_524290 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_524290;

}

function index_py_list_object_method_525003(self_no_cast_525005, args_525019) {
		var Tmp1;
							var Tmp6;

	var result_525020 = null;

	var F={procname:"listobject.indexPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_525019 != null ? args_525019.length : 0) == 1))) {
		F.line = 190;
		var msg_525032 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_525037 = mnewString(0);
		F.line = 192;
		if (fmt_res_525037 != null) { fmt_res_525037 = (fmt_res_525037).concat(makeNimstrLit(" argument (")); } else { fmt_res_525037 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_525037 != null) { fmt_res_525037 = (fmt_res_525037).concat(cstrToNimstr(((args_525019 != null ? args_525019.length : 0))+"")); } else { fmt_res_525037 = cstrToNimstr(((args_525019 != null ? args_525019.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_525037 != null) { fmt_res_525037 = (fmt_res_525037).concat(makeNimstrLit(" given)")); } else { fmt_res_525037 = makeNimstrLit(" given)"); };
		msg_525032 = nimCopy(null, (makeNimstrLit("index takes exactly 1")).concat(fmt_res_525037), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_525210 = mnewString(0);
			F.line = 194;
			if (fmt_res_525210 != null) { fmt_res_525210 = (fmt_res_525210).concat(makeNimstrLit(" argument (")); } else { fmt_res_525210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_525210 != null) { fmt_res_525210 = (fmt_res_525210).concat(cstrToNimstr(((args_525019 != null ? args_525019.length : 0))+"")); } else { fmt_res_525210 = cstrToNimstr(((args_525019 != null ? args_525019.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_525210 != null) { fmt_res_525210 = (fmt_res_525210).concat(makeNimstrLit(" given)")); } else { fmt_res_525210 = makeNimstrLit(" given)"); };
			msg_525032 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_525210), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_525409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_525409.tk = 3;
		F.line = 108;
		excp_525409.thrown = true;
		F.line = 109;
		excp_525409.msg = new_py_string_176075(msg_525032);
		result_525020 = excp_525409;
		break BeforeRet;
		}
		
		F.line = 230;
		var target_525411 = args_525019[chckIndx(0, 0, args_525019.length+0-1)-0];
		if (!(isObj(self_no_cast_525005.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_525601 = self_no_cast_525005;
		if (self_525601.writeLock) {
		F.line = 414;
		var msg_525603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_525605 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_525605.tk = 8;
		F.line = 108;
		excp_525605.thrown = true;
		F.line = 109;
		excp_525605.msg = new_py_string_176075(msg_525603);
		result_525020 = excp_525605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_525601.readNum = addInt(self_525601.readNum, 1);
		F.line = 444;
		try {
		L3: do {
			F.line = 133;
			var idx_525629 = 0;
			F.line = 133;
			var item_525630 = null;
			F.line = 2352;
			var colontmp__526417 = null;
			F.line = 133;
			colontmp__526417 = self_525601.items;
			F.line = 2354;
			var i_526420 = 0;
			L4: do {
				F.line = 2355;
					L5: while (true) {
					if (!(i_526420 < (colontmp__526417 != null ? colontmp__526417.length : 0))) break L5;
						F.line = 2356;
						idx_525629 = i_526420;
						F.line = 2356;
						item_525630 = colontmp__526417[chckIndx(i_526420, 0, colontmp__526417.length+0-1)-0];
						F.line = 134;
						F.line = 56;
						if ((item_525630.pyType === null)) {
						F.line = 2895;
						var e_525657 = null;
						F.line = 2896;
						e_525657 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_525657.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_525657.parent = null;
						F.line = 26;
						raiseException(e_525657, "InternalError");
						}
						
						F.line = 27;
						var fun_525802 = item_525630.pyType.magicMethods.Field18;
						if ((fun_525802 === null)) {
						F.line = 29;
						var obj_type_str_525811 = item_525630.pyType.name;
						F.line = 30;
						var method_str_525813 = makeNimstrLit("eq");
						F.line = 31;
						var msg_525815 = (makeNimstrLit("No ")).concat(method_str_525813,makeNimstrLit(" method for "),obj_type_str_525811,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 106;
						var excp_525817 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_525817.tk = 3;
						F.line = 108;
						excp_525817.thrown = true;
						F.line = 109;
						excp_525817.msg = new_py_string_176075(msg_525815);
						var excp_525820 = excp_525817;
						F.line = 36;
						result_525020 = excp_525820;
						break BeforeRet;
						}
						
						var fun_526002 = fun_525802;
						F.line = 57;
						var res_526004 = fun_526002(item_525630, target_525411);
						var ret_obj_526201 = res_526004;
							if (of_py_exception_object_358259(ret_obj_526201)) {
							Tmp6 = ret_obj_526201.thrown;
							}
							else {
							Tmp6 = false;
							}
							
						if (Tmp6) {
						F.line = 136;
						result_525020 = ret_obj_526201;
						break BeforeRet;
						}
						
						if ((ret_obj_526201 == py_true_obj_354074)) {
						F.line = 138;
						result_525020 = new_py_int_378257(idx_525629);
						break BeforeRet;
						}
						
						F.line = 2357;
						i_526420 = addInt(i_526420, 1);
					}
			} while(false);
		} while(false);
		F.line = 139;
		F.line = 139;
		var fmt_res_526215 = mnewString(0);
		F.line = 270;
		if (fmt_res_526215 != null) { fmt_res_526215 = (fmt_res_526215).concat(HEX24_157579(target_525411)); } else { fmt_res_526215 = HEX24_157579(target_525411).slice(); };
		F.line = 139;
		if (fmt_res_526215 != null) { fmt_res_526215 = (fmt_res_526215).concat(makeNimstrLit(" is not in list")); } else { fmt_res_526215 = makeNimstrLit(" is not in list"); };
		var msg_526401 = nimCopy(null, fmt_res_526215, NTI138);
		F.line = 106;
		var excp_526403 = new_py_value_error_simple_362601();
		F.line = 107;
		excp_526403.tk = 5;
		F.line = 108;
		excp_526403.thrown = true;
		F.line = 109;
		excp_526403.msg = new_py_string_176075(msg_526401);
		Tmp1 = excp_526403;
		} finally {
		framePtr = F;
		F.line = 417;
		self_525601.readNum = subInt(self_525601.readNum, 1);
		}
		result_525020 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_525020;

}

function HEX3C_380084(aa_380086, b_380087) {
	var result_380088 = false;

	var F={procname:"numobjects.<",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 220;
		var a_380089 = new_py_int_378257(aa_380086);
		F.line = 221;
		switch (a_380089.sign) {
		case -1:
			F.line = 223;
			switch (b_380087.sign) {
			case -1:
				F.line = 225;
				result_380088 = (do_compare_378584(a_380089, b_380087) == 1);
				break BeforeRet;
				break;
			case 0:
			case 1:
				F.line = 227;
				result_380088 = true;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 229;
			result_380088 = (b_380087.sign == 1);
			break BeforeRet;
			break;
		case 1:
			F.line = 231;
			switch (b_380087.sign) {
			case -1:
			case 0:
				F.line = 233;
				result_380088 = false;
				break BeforeRet;
				break;
			case 1:
				F.line = 235;
				result_380088 = (do_compare_378584(a_380089, b_380087) == -1);
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_380088;

}

function insert_527625(x_527631, x_527631_Idx, item_527633, i_527635) {
	var F={procname:"insert.insert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1664;
		var it_528001 = null;
		F.line = 1665;
		x_527631[x_527631_Idx].splice(i_527635, 0, it_528001);
		F.line = 1668;
		x_527631[x_527631_Idx][chckIndx(i_527635, 0, x_527631[x_527631_Idx].length+0-1)-0] = item_527633;
	framePtr = F.prev;

	
}

function insert_py_list_object_method_526438(self_no_cast_526440, args_526454) {
			var Tmp1;
		var Tmp2;

	var result_526455 = null;

	var F={procname:"listobject.insertPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_526454 != null ? args_526454.length : 0) == 2))) {
		F.line = 190;
		var msg_526467 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_526472 = mnewString(0);
		F.line = 192;
		if (fmt_res_526472 != null) { fmt_res_526472 = (fmt_res_526472).concat(makeNimstrLit(" argument (")); } else { fmt_res_526472 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_526472 != null) { fmt_res_526472 = (fmt_res_526472).concat(cstrToNimstr(((args_526454 != null ? args_526454.length : 0))+"")); } else { fmt_res_526472 = cstrToNimstr(((args_526454 != null ? args_526454.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_526472 != null) { fmt_res_526472 = (fmt_res_526472).concat(makeNimstrLit(" given)")); } else { fmt_res_526472 = makeNimstrLit(" given)"); };
		msg_526467 = nimCopy(null, (makeNimstrLit("insert takes exactly 2")).concat(fmt_res_526472), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_526610 = mnewString(0);
			F.line = 194;
			if (fmt_res_526610 != null) { fmt_res_526610 = (fmt_res_526610).concat(makeNimstrLit(" argument (")); } else { fmt_res_526610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_526610 != null) { fmt_res_526610 = (fmt_res_526610).concat(cstrToNimstr(((args_526454 != null ? args_526454.length : 0))+"")); } else { fmt_res_526610 = cstrToNimstr(((args_526454 != null ? args_526454.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_526610 != null) { fmt_res_526610 = (fmt_res_526610).concat(makeNimstrLit(" given)")); } else { fmt_res_526610 = makeNimstrLit(" given)"); };
			msg_526467 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_526610), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_526809 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_526809.tk = 3;
		F.line = 108;
		excp_526809.thrown = true;
		F.line = 109;
		excp_526809.msg = new_py_string_176075(msg_526467);
		result_526455 = excp_526809;
		break BeforeRet;
		}
		
		if (!(isObj(args_526454[chckIndx(0, 0, args_526454.length+0-1)-0].m_type, NTI377303))) {
		F.line = 185;
		var expected_526822 = nimCopy(null, py_int_object_type_377313.name, NTI138);
		F.line = 186;
		var got_526823 = nimCopy(null, args_526454[chckIndx(0, 0, args_526454.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_526824 = makeNimstrLit("insert");
		F.line = 188;
		F.line = 188;
		var fmt_res_526828 = mnewString(0);
		F.line = 260;
		if (fmt_res_526828 != null) { fmt_res_526828 = (fmt_res_526828).concat(expected_526822); } else { fmt_res_526828 = expected_526822.slice(); };
		F.line = 188;
		if (fmt_res_526828 != null) { fmt_res_526828 = (fmt_res_526828).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_526828 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_526828 != null) { fmt_res_526828 = (fmt_res_526828).concat(m_name_526824); } else { fmt_res_526828 = m_name_526824.slice(); };
		F.line = 188;
		if (fmt_res_526828 != null) { fmt_res_526828 = (fmt_res_526828).concat(makeNimstrLit(" (got ")); } else { fmt_res_526828 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_526828 != null) { fmt_res_526828 = (fmt_res_526828).concat(got_526823); } else { fmt_res_526828 = got_526823.slice(); };
		F.line = 188;
		if (fmt_res_526828 != null) { fmt_res_526828 = (fmt_res_526828).concat(makeNimstrLit(")")); } else { fmt_res_526828 = makeNimstrLit(")"); };
		var msg_527402 = nimCopy(null, fmt_res_526828, NTI138);
		F.line = 189;
		F.line = 106;
		var excp_527404 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_527404.tk = 3;
		F.line = 108;
		excp_527404.thrown = true;
		F.line = 109;
		excp_527404.msg = new_py_string_176075(msg_527402);
		result_526455 = excp_527404;
		break BeforeRet;
		}
		
		F.line = 237;
		var idx_527406 = args_526454[chckIndx(0, 0, args_526454.length+0-1)-0];
		F.line = 230;
		var item_527407 = args_526454[chckIndx(1, 0, args_526454.length+0-1)-0];
		if (!(isObj(self_no_cast_526440.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_527601 = self_no_cast_526440;
			if ((0 < self_527601.readNum)) Tmp1 = true; else {				Tmp1 = self_527601.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_527605 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 106;
		var excp_527607 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_527607.tk = 8;
		F.line = 108;
		excp_527607.thrown = true;
		F.line = 109;
		excp_527607.msg = new_py_string_176075(msg_527605);
		result_526455 = excp_527607;
		break BeforeRet;
		}
		
		F.line = 408;
		self_527601.writeLock = true;
		F.line = 444;
		try {
		F.line = 145;
		var int_idx_527609 = 0;
		if (negative_378363(idx_527406)) {
		F.line = 147;
		int_idx_527609 = 0;
		}
		else {
		if (HEX3C_380084((self_527601.items != null ? self_527601.items.length : 0), idx_527406)) {
		F.line = 149;
		int_idx_527609 = (self_527601.items != null ? self_527601.items.length : 0);
		}
		else {
			F.line = 151;
			int_idx_527609 = to_int_382674(idx_527406);
		}
		}
		F.line = 152;
		insert_527625(self_527601, "items", item_527407, chckRange(int_idx_527609, 0, 2147483647));
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_527601.writeLock = false;
		}
		result_526455 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_526455;

}

function pop_528821(s_528827, s_528827_Idx) {
	var result_528828 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_528836 = subInt((s_528827[s_528827_Idx] != null ? s_528827[s_528827_Idx].length : 0), 1);
		F.line = 2525;
		result_528828 = s_528827[s_528827_Idx][chckIndx(l_528836, 0, s_528827[s_528827_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_528827[s_528827_Idx].length < chckRange(l_528836, 0, 2147483647)) { for (var i=s_528827[s_528827_Idx].length;i<chckRange(l_528836, 0, 2147483647);++i) s_528827[s_528827_Idx].push(null); }
               else { s_528827[s_528827_Idx].length = chckRange(l_528836, 0, 2147483647); };
	framePtr = F.prev;

	return result_528828;

}

function pop_py_list_object_method_528233(self_no_cast_528235, args_528249) {
			var Tmp1;
		var Tmp2;

	var result_528250 = null;

	var F={procname:"listobject.popPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_528249 != null ? args_528249.length : 0) == 0))) {
		F.line = 190;
		var msg_528262 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_528267 = mnewString(0);
		F.line = 192;
		if (fmt_res_528267 != null) { fmt_res_528267 = (fmt_res_528267).concat(makeNimstrLit(" argument (")); } else { fmt_res_528267 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_528267 != null) { fmt_res_528267 = (fmt_res_528267).concat(cstrToNimstr(((args_528249 != null ? args_528249.length : 0))+"")); } else { fmt_res_528267 = cstrToNimstr(((args_528249 != null ? args_528249.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_528267 != null) { fmt_res_528267 = (fmt_res_528267).concat(makeNimstrLit(" given)")); } else { fmt_res_528267 = makeNimstrLit(" given)"); };
		msg_528262 = nimCopy(null, (makeNimstrLit("pop takes exactly 0")).concat(fmt_res_528267), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_528410 = mnewString(0);
			F.line = 194;
			if (fmt_res_528410 != null) { fmt_res_528410 = (fmt_res_528410).concat(makeNimstrLit(" argument (")); } else { fmt_res_528410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_528410 != null) { fmt_res_528410 = (fmt_res_528410).concat(cstrToNimstr(((args_528249 != null ? args_528249.length : 0))+"")); } else { fmt_res_528410 = cstrToNimstr(((args_528249 != null ? args_528249.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_528410 != null) { fmt_res_528410 = (fmt_res_528410).concat(makeNimstrLit(" given)")); } else { fmt_res_528410 = makeNimstrLit(" given)"); };
			msg_528262 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_528410), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_528609 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_528609.tk = 3;
		F.line = 108;
		excp_528609.thrown = true;
		F.line = 109;
		excp_528609.msg = new_py_string_176075(msg_528262);
		result_528250 = excp_528609;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_528235.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_528801 = self_no_cast_528235;
			if ((0 < self_528801.readNum)) Tmp1 = true; else {				Tmp1 = self_528801.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_528805 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 106;
		var excp_528807 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_528807.tk = 8;
		F.line = 108;
		excp_528807.thrown = true;
		F.line = 109;
		excp_528807.msg = new_py_string_176075(msg_528805);
		result_528250 = excp_528807;
		break BeforeRet;
		}
		
		F.line = 408;
		self_528801.writeLock = true;
		F.line = 444;
		try {
		if (((self_528801.items != null ? self_528801.items.length : 0) == 0)) {
		F.line = 158;
		var msg_528816 = makeNimstrLit("pop from empty list");
		F.line = 159;
		F.line = 106;
		var excp_528818 = new_py_index_error_simple_363601();
		F.line = 107;
		excp_528818.tk = 6;
		F.line = 108;
		excp_528818.thrown = true;
		F.line = 109;
		excp_528818.msg = new_py_string_176075(msg_528816);
		result_528250 = excp_528818;
		break BeforeRet;
		}
		
		Tmp2 = pop_528821(self_528801, "items");
		} finally {
		framePtr = F;
		F.line = 410;
		self_528801.writeLock = false;
		}
		result_528250 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_528250;

}

function delete_529603(s_529609, s_529609_Idx, first_529611, last_529613) {
	var F={procname:"delete.delete",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sequtils.nim",line:0};
	framePtr = F;
		F.line = 365;
		var i_529614 = first_529611;
		F.line = 366;
		var j_529615 = addInt(last_529613, 1);
		F.line = 367;
		var new_len_529623 = addInt(subInt((s_529609[s_529609_Idx] != null ? s_529609[s_529609_Idx].length : 0), j_529615), i_529614);
		L1: do {
			F.line = 368;
				L2: while (true) {
				if (!(i_529614 < new_len_529623)) break L2;
					F.line = 369;
					s_529609[s_529609_Idx][chckIndx(i_529614, 0, s_529609[s_529609_Idx].length+0-1)-0] = s_529609[s_529609_Idx][chckIndx(j_529615, 0, s_529609[s_529609_Idx].length+0-1)-0];
					F.line = 370;
					i_529614 = addInt(i_529614, 1);
					F.line = 371;
					j_529615 = addInt(j_529615, 1);
				}
		} while(false);
		F.line = 372;
		if (s_529609[s_529609_Idx].length < chckRange(new_len_529623, 0, 2147483647)) { for (var i=s_529609[s_529609_Idx].length;i<chckRange(new_len_529623, 0, 2147483647);++i) s_529609[s_529609_Idx].push(null); }
               else { s_529609[s_529609_Idx].length = chckRange(new_len_529623, 0, 2147483647); };
	framePtr = F.prev;

	
}

function remove_py_list_object_method_528877(self_no_cast_528879, args_528893) {
			var Tmp1;
			var Tmp3;

	var result_528894 = null;

	var F={procname:"listobject.removePyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(((args_528893 != null ? args_528893.length : 0) == 1))) {
		F.line = 190;
		var msg_528906 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_528911 = mnewString(0);
		F.line = 192;
		if (fmt_res_528911 != null) { fmt_res_528911 = (fmt_res_528911).concat(makeNimstrLit(" argument (")); } else { fmt_res_528911 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_528911 != null) { fmt_res_528911 = (fmt_res_528911).concat(cstrToNimstr(((args_528893 != null ? args_528893.length : 0))+"")); } else { fmt_res_528911 = cstrToNimstr(((args_528893 != null ? args_528893.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_528911 != null) { fmt_res_528911 = (fmt_res_528911).concat(makeNimstrLit(" given)")); } else { fmt_res_528911 = makeNimstrLit(" given)"); };
		msg_528906 = nimCopy(null, (makeNimstrLit("remove takes exactly 1")).concat(fmt_res_528911), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_529010 = mnewString(0);
			F.line = 194;
			if (fmt_res_529010 != null) { fmt_res_529010 = (fmt_res_529010).concat(makeNimstrLit(" argument (")); } else { fmt_res_529010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_529010 != null) { fmt_res_529010 = (fmt_res_529010).concat(cstrToNimstr(((args_528893 != null ? args_528893.length : 0))+"")); } else { fmt_res_529010 = cstrToNimstr(((args_528893 != null ? args_528893.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_529010 != null) { fmt_res_529010 = (fmt_res_529010).concat(makeNimstrLit(" given)")); } else { fmt_res_529010 = makeNimstrLit(" given)"); };
			msg_528906 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_529010), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_529209 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_529209.tk = 3;
		F.line = 108;
		excp_529209.thrown = true;
		F.line = 109;
		excp_529209.msg = new_py_string_176075(msg_528906);
		result_528894 = excp_529209;
		break BeforeRet;
		}
		
		F.line = 230;
		var target_529211 = args_528893[chckIndx(0, 0, args_528893.length+0-1)-0];
		if (!(isObj(self_no_cast_528879.m_type, NTI515255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_529401 = self_no_cast_528879;
			if ((0 < self_529401.readNum)) Tmp1 = true; else {				Tmp1 = self_529401.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_529405 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 106;
		var excp_529407 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_529407.tk = 8;
		F.line = 108;
		excp_529407.thrown = true;
		F.line = 109;
		excp_529407.msg = new_py_string_176075(msg_529405);
		result_528894 = excp_529407;
		break BeforeRet;
		}
		
		F.line = 408;
		self_529401.writeLock = true;
		F.line = 444;
		try {
		F.line = 163;
		var ret_obj_529421 = index_py_list_object_method_525003(self_no_cast_528879, [target_529211]);
			if (of_py_exception_object_358259(ret_obj_529421)) {
			Tmp3 = ret_obj_529421.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 165;
		result_528894 = ret_obj_529421;
		break BeforeRet;
		}
		
		if (!(of_py_int_object_377315(ret_obj_529421))) {
		F.line = 166;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/listobject.nim(166, 10) `ofPyIntObject(retObj)` "));
		}
		
		F.line = 167;
		var idx_529601 = to_int_382674(ret_obj_529421);
		F.line = 168;
		delete_529603(self_529401, "items", chckRange(idx_529601, 0, 2147483647), chckRange(addInt(idx_529601, 1), 0, 2147483647));
		} finally {
		framePtr = F;
		F.line = 410;
		self_529401.writeLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_528894;

}

function init_py_list_object_magic_529699(self_no_cast_529701, args_529715) {
			var Tmp2;
						var Tmp5;

	var result_529716 = null;

	var F={procname:"listobject.initPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_529701.m_type, NTI515255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_529801 = self_no_cast_529701;
		if ((1 < (args_529715 != null ? args_529715.length : 0))) {
		F.line = 173;
		F.line = 173;
		var fmt_res_529813 = mnewString(0);
		F.line = 173;
		if (fmt_res_529813 != null) { fmt_res_529813 = (fmt_res_529813).concat(makeNimstrLit("list expected at most 1 args, got ")); } else { fmt_res_529813 = makeNimstrLit("list expected at most 1 args, got "); };
		F.line = 270;
		if (fmt_res_529813 != null) { fmt_res_529813 = (fmt_res_529813).concat(cstrToNimstr(((args_529715 != null ? args_529715.length : 0))+"")); } else { fmt_res_529813 = cstrToNimstr(((args_529715 != null ? args_529715.length : 0))+"").slice(); };
		var msg_530008 = nimCopy(null, fmt_res_529813, NTI138);
		F.line = 174;
		F.line = 106;
		var excp_530010 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_530010.tk = 3;
		F.line = 108;
		excp_530010.thrown = true;
		F.line = 109;
		excp_530010.msg = new_py_string_176075(msg_530008);
		result_529716 = excp_530010;
		break BeforeRet;
		}
		
		if (!(((self_529801.items != null ? self_529801.items.length : 0) == 0))) {
		F.line = 176;
		if (self_529801.items.length < 0) { for (var i=self_529801.items.length;i<0;++i) self_529801.items.push(null); }
               else { self_529801.items.length = 0; };
		}
		
		if (((args_529715 != null ? args_529715.length : 0) == 1)) {
		F.line = 178;
		var colontmp__530132 = {Field0: null, Field1: null};
		F.line = 178;
		var iterable_530089 = null;
		F.line = 178;
		var next_method_530090 = null;
		F.line = 178;
		F.line = 171;
		var ret_tuple_530052 = {Field0: null, Field1: null};
		L1: do {
			F.line = 173;
			var iter_func_530056 = args_529715[chckIndx(0, 0, args_529715.length+0-1)-0].pyType.magicMethods.Field36;
			if ((iter_func_530056 === null)) {
			F.line = 175;
			var msg_530064 = (args_529715[chckIndx(0, 0, args_529715.length+0-1)-0].pyType.name).concat(makeNimstrLit(" object is not iterable"));
			F.line = 176;
			F.line = 106;
			var excp_530067 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_530067.tk = 3;
			F.line = 108;
			excp_530067.thrown = true;
			F.line = 109;
			excp_530067.msg = new_py_string_176075(msg_530064);
			nimCopy(ret_tuple_530052, {Field0: excp_530067, Field1: null}, NTI530050);
			F.line = 177;
			break L1;
			}
			
			F.line = 178;
			var iter_obj_530070 = iter_func_530056(args_529715[chckIndx(0, 0, args_529715.length+0-1)-0]);
			F.line = 179;
			var iternext_func_530072 = iter_obj_530070.pyType.magicMethods.Field37;
			if ((iternext_func_530072 === null)) {
			F.line = 181;
			F.line = 181;
			var fmt_res_530081 = mnewString(0);
			F.line = 181;
			if (fmt_res_530081 != null) { fmt_res_530081 = (fmt_res_530081).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_530081 = makeNimstrLit("iter() returned non-iterator of type "); };
			var msg_530083 = (fmt_res_530081).concat(iter_obj_530070.pyType.name);
			F.line = 182;
			F.line = 106;
			var excp_530086 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_530086.tk = 3;
			F.line = 108;
			excp_530086.thrown = true;
			F.line = 109;
			excp_530086.msg = new_py_string_176075(msg_530083);
			nimCopy(ret_tuple_530052, {Field0: excp_530086, Field1: null}, NTI530050);
			F.line = 183;
			break L1;
			}
			
			F.line = 184;
			nimCopy(ret_tuple_530052, {Field0: iter_obj_530070, Field1: iternext_func_530072}, NTI530050);
		} while(false);
		nimCopy(colontmp__530132, ret_tuple_530052, NTI375953);
		F.line = 178;
		iterable_530089 = colontmp__530132["Field0"];
		F.line = 178;
		next_method_530090 = colontmp__530132["Field1"];
			if (of_py_exception_object_358259(iterable_530089)) {
			Tmp2 = iterable_530089.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 180;
		result_529716 = iterable_530089;
		break BeforeRet;
		}
		
		L3: do {
			F.line = 181;
				L4: while (true) {
				if (!true) break L4;
					F.line = 182;
					var next_obj_530091 = next_method_530090(iterable_530089);
					if (is_stop_iter_375871(next_obj_530091)) {
					F.line = 184;
					break L3;
					}
					
						if (of_py_exception_object_358259(next_obj_530091)) {
						Tmp5 = next_obj_530091.thrown;
						}
						else {
						Tmp5 = false;
						}
						
					if (Tmp5) {
					F.line = 186;
					result_529716 = next_obj_530091;
					break BeforeRet;
					}
					
					F.line = 187;
					if (self_529801.items != null) { self_529801.items.push(next_obj_530091); } else { self_529801.items = [next_obj_530091]; };
				}
		} while(false);
		}
		
		result_529716 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_529716;

}
py_list_object_type_515269.magicMethods.Field22 = contains_py_list_object_magic_516293;
py_list_object_type_515269.magicMethods.Field36 = iter_py_list_object_magic_517044;
py_list_object_type_515269.magicMethods.Field25 = repr_py_list_object_magic_517241;
py_list_object_type_515269.magicMethods.Field23 = len_py_list_object_magic_518248;
py_list_object_type_515269.magicMethods.Field32 = getitem_py_list_object_magic_518448;
py_list_object_type_515269.magicMethods.Field33 = setitem_py_list_object_magic_518678;
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("append"), append_py_list_object_method_518859);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("clear"), clear_py_list_object_method_519435);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("copy"), copy_py_list_object_method_520035);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("count"), count_py_list_object_method_520642);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("doClear"), doclear_py_list_object_method_521855);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("doRead"), doread_py_list_object_method_522441);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("aInt"), aint_py_list_object_method_523027);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("hello"), hello_py_list_object_method_524273);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("index"), index_py_list_object_method_525003);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("insert"), insert_py_list_object_method_526438);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("pop"), pop_py_list_object_method_528233);
register_bltin_method_160182(py_list_object_type_515269, makeNimstrLit("remove"), remove_py_list_object_method_528877);
py_list_object_type_515269.magicMethods.Field27 = init_py_list_object_magic_529699;

function new_531406() {
	var result_531411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_531601 = null;
		F.line = 211;
		r_531601 = {m_type: NTI531178, table: {data: null, counter: 0}, reprLock: false, readNum: 0, writeLock: false, id: 0, pyType: null};
		F.line = 212;
		result_531411 = r_531601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_531411;

}

function new_pydict_simple_531401() {
	var result_531403 = null;

	var F={procname:"dictobject.newPydictSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_531624 = new_531406();
		F.line = 561;
		obj_531624.pyType = pydict_object_type_531222;
		F.line = 563;
		give_id_157814(obj_531624);
		result_531403 = obj_531624;
	framePtr = F.prev;

	return result_531403;

}

function new_pydict_default_532021(args_531133) {
	var result_532024 = null;

	var F={procname:"dictobject.newPydictDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_532024 = new_pydict_simple_531401();
	framePtr = F.prev;

	return result_532024;

}
var pydict_object_type_531222 = new_py_type_159261(makeNimstrLit("dict"));
pydict_object_type_531222.magicMethods.Field26 = new_pydict_default_532021;

function hash_381480(x_381484) {
	var result_381485 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_381485 = x_381484;
	framePtr = F.prev;

	return result_381485;

}

function hash_381617(x_381621) {
	var result_381622 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_381622 = x_381621;
	framePtr = F.prev;

	return result_381622;

}

function hash_381475(self_381477) {
	var result_381478 = 0;

	var F={procname:"numobjects.hash",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 483;
		result_381478 = hash_381480(self_381477.sign);
		L1: do {
			F.line = 484;
			var digit_381615 = 0;
			F.line = 3909;
			var colontmp__381643 = null;
			F.line = 484;
			colontmp__381643 = self_381477.digits;
			F.line = 3911;
			var i_381646 = 0;
			F.line = 3912;
			var l_381648 = (colontmp__381643 != null ? colontmp__381643.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_381646 < l_381648)) break L3;
						F.line = 3914;
						digit_381615 = colontmp__381643[chckIndx(i_381646, 0, colontmp__381643.length+0-1)-0];
						F.line = 485;
						result_381478 = (result_381478 ^ hash_381617(digit_381615));
						F.line = 3915;
						i_381646 = addInt(i_381646, 1);
						if (!(((colontmp__381643 != null ? colontmp__381643.length : 0) == l_381648))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_381478;

}

function hash_531040(obj_531042) {
	var result_531043 = 0;

	var F={procname:"dictobject.hash",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 17;
		var fun_531044 = obj_531042.pyType.magicMethods.Field30;
		if ((fun_531044 === null)) {
		F.line = 19;
		result_531043 = hash_143414(obj_531042);
		break BeforeRet;
		}
		else {
			F.line = 21;
			var ret_obj_531052 = fun_531044(obj_531042);
			if (!(of_py_int_object_377315(ret_obj_531052))) {
			F.line = 2895;
			var e_531059 = null;
			F.line = 2896;
			e_531059 = {m_type: NTI156085, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 23;
			e_531059.message = nimCopy(null, ret_obj_531052.pyType.name, NTI138);
			F.line = 2891;
			e_531059.parent = null;
			F.line = 23;
			raiseException(e_531059, "DictError");
			}
			
			F.line = 24;
			result_531043 = hash_381475(ret_obj_531052);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_531043;

}

function HEX3DHEX3D_531081(obj1_531083, obj2_531084) {
	var result_531085 = false;

	var F={procname:"dictobject.==",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 28;
		var fun_531086 = obj1_531083.pyType.magicMethods.Field18;
		if ((fun_531086 === null)) {
		F.line = 30;
		result_531085 = (id_157596(obj1_531083) == id_157596(obj2_531084));
		break BeforeRet;
		}
		else {
			F.line = 32;
			var ret_obj_531093 = fun_531086(obj1_531083, obj2_531084);
			if (!(of_py_bool_object_353106(ret_obj_531093))) {
			F.line = 2895;
			var e_531100 = null;
			F.line = 2896;
			e_531100 = {m_type: NTI156085, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 34;
			e_531100.message = nimCopy(null, ret_obj_531093.pyType.name, NTI138);
			F.line = 2891;
			e_531100.parent = null;
			F.line = 34;
			raiseException(e_531100, "DictError");
			}
			
			F.line = 35;
			result_531085 = ret_obj_531093.b;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_531085;

}

function raw_get_532600(t_532605, key_532607, hc_532609, hc_532609_Idx) {
						var Tmp3;

	var result_532610 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_532609[hc_532609_Idx] = hash_531040(key_532607);
		if ((hc_532609[hc_532609_Idx] == 0)) {
		F.line = 45;
		hc_532609[hc_532609_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_532620 = (hc_532609[hc_532609_Idx] & (t_532605.data != null ? (t_532605.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_532605.data[chckIndx(h_532620, 0, t_532605.data.length+0-1)-0].Field0)) break L2;
						if (!(t_532605.data[chckIndx(h_532620, 0, t_532605.data.length+0-1)-0].Field0 == hc_532609[hc_532609_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_531081(t_532605.data[chckIndx(h_532620, 0, t_532605.data.length+0-1)-0].Field1, key_532607);						}					if (Tmp3) {
					F.line = 38;
					result_532610 = h_532620;
					break BeforeRet;
					}
					
					F.line = 39;
					h_532620 = next_try_146614(h_532620, (t_532605.data != null ? (t_532605.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_532610 = subInt(-1, h_532620);
	} while (false);
	framePtr = F.prev;

	return result_532610;

}

function get_or_default_537528(t_537534, key_537536, default_537538) {
		var Tmp1;

	var result_537539 = null;

	var F={procname:"getOrDefault.getOrDefault",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 177;
		var hc_537545 = [0];
		F.line = 178;
		var index_537559 = raw_get_532600(t_537534, key_537536, hc_537545, 0);
		F.line = 179;
		if ((0 <= index_537559)) {
		Tmp1 = t_537534.data[chckIndx(index_537559, 0, t_537534.data.length+0-1)-0].Field2;
		}
		else {
		Tmp1 = default_537538;
		}
		
		result_537539 = Tmp1;
	framePtr = F.prev;

	return result_537539;

}

function contains_pydict_object_magic_537051(self_no_cast_537053, other_537054) {
	var result_537055 = null;

	var F={procname:"dictobject.containsPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_537053.m_type, NTI531178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_537201 = self_no_cast_537053;
		if (self_537201.writeLock) {
		F.line = 414;
		var msg_537203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_537205 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_537205.tk = 8;
		F.line = 108;
		excp_537205.thrown = true;
		F.line = 109;
		excp_537205.msg = new_py_string_176075(msg_537203);
		result_537055 = excp_537205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_537201.readNum = addInt(self_537201.readNum, 1);
		F.line = 438;
		try {
		F.line = 61;
		var hash_func_537223 = other_537054.pyType.magicMethods.Field30;
		if ((hash_func_537223 === null)) {
		F.line = 63;
		var tp_name_537231 = nimCopy(null, other_537054.pyType.name, NTI138);
		F.line = 64;
		var msg_537233 = (makeNimstrLit("unhashable type: ")).concat(tp_name_537231);
		F.line = 65;
		F.line = 106;
		var excp_537235 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_537235.tk = 3;
		F.line = 108;
		excp_537235.thrown = true;
		F.line = 109;
		excp_537235.msg = new_py_string_176075(msg_537233);
		result_537055 = excp_537235;
		break BeforeRet;
		}
		
		F.line = 70;
++excHandler;
		try {
		F.line = 71;
		result_537055 = get_or_default_537528(self_537201.table, other_537054, null);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156085))) {
		F.line = 73;
		var msg_537791 = makeNimstrLit("__hash__ method doesn\'t return an integer or __eq__ method doesn\'t return a bool");
		F.line = 74;
		F.line = 106;
		var excp_537793 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_537793.tk = 3;
		F.line = 108;
		excp_537793.thrown = true;
		F.line = 109;
		excp_537793.msg = new_py_string_176075(msg_537791);
		result_537055 = excp_537793;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		if ((result_537055 === null)) {
		F.line = 76;
		result_537055 = py_false_obj_354075;
		break BeforeRet;
		}
		else {
			F.line = 78;
			result_537055 = py_true_obj_354074;
			break BeforeRet;
		}
		
		} finally {
		framePtr = F;
		F.line = 417;
		self_537201.readNum = subInt(self_537201.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_537055;

}

function repr_pydict_object_magic_537827(self_no_cast_537829) {
	var result_537830 = null;

	var F={procname:"dictobject.reprPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_537829.m_type, NTI531178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_538001 = self_no_cast_537829;
		if (self_538001.reprLock) {
		F.line = 379;
		result_537830 = new_py_string_176075(makeNimstrLit("..."));
		break BeforeRet;
		}
		
		F.line = 380;
		self_538001.reprLock = true;
		F.line = 438;
		try {
		if (self_538001.writeLock) {
		F.line = 414;
		var msg_538003 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_538005 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_538005.tk = 8;
		F.line = 108;
		excp_538005.thrown = true;
		F.line = 109;
		excp_538005.msg = new_py_string_176075(msg_538003);
		result_537830 = excp_538005;
		break BeforeRet;
		}
		
		F.line = 412;
		self_538001.readNum = addInt(self_538001.readNum, 1);
		F.line = 438;
		try {
		F.line = 81;
		var ss_538017 = null;
		L3: do {
			F.line = 82;
			var k_538720 = null;
			F.line = 82;
			var v_538721 = null;
			F.line = 270;
			var colontmp__540622 = {data: null, counter: 0};
			F.line = 82;
			nimCopy(colontmp__540622, self_538001.table, NTI531188);
			L4: do {
				F.line = 272;
				var h_540626 = 0;
				F.line = 2104;
				var colontmp__540628 = 0;
				F.line = 272;
				colontmp__540628 = (colontmp__540622.data != null ? (colontmp__540622.data.length-1) : -1);
				F.line = 2107;
				var res_540630 = 0;
				L5: do {
					F.line = 2108;
						L6: while (true) {
						if (!(res_540630 <= colontmp__540628)) break L6;
							F.line = 2109;
							h_540626 = res_540630;
							if (is_filled_146491(colontmp__540622.data[chckIndx(h_540626, 0, colontmp__540622.data.length+0-1)-0].Field0)) {
							F.line = 273;
							k_538720 = colontmp__540622.data[chckIndx(h_540626, 0, colontmp__540622.data.length+0-1)-0].Field1;
							F.line = 273;
							v_538721 = colontmp__540622.data[chckIndx(h_540626, 0, colontmp__540622.data.length+0-1)-0].Field2;
							F.line = 83;
							F.line = 45;
							if ((k_538720.pyType === null)) {
							F.line = 2895;
							var e_538748 = null;
							F.line = 2896;
							e_538748 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 26;
							e_538748.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
							F.line = 2891;
							e_538748.parent = null;
							F.line = 26;
							raiseException(e_538748, "InternalError");
							}
							
							F.line = 27;
							var fun_538802 = k_538720.pyType.magicMethods.Field25;
							if ((fun_538802 === null)) {
							F.line = 29;
							var obj_type_str_538811 = k_538720.pyType.name;
							F.line = 30;
							var method_str_538813 = makeNimstrLit("repr");
							F.line = 31;
							var msg_538815 = (makeNimstrLit("No ")).concat(method_str_538813,makeNimstrLit(" method for "),obj_type_str_538811,makeNimstrLit(" defined"));
							F.line = 32;
							F.line = 106;
							var excp_538817 = new_py_type_error_simple_360601();
							F.line = 107;
							excp_538817.tk = 3;
							F.line = 108;
							excp_538817.thrown = true;
							F.line = 109;
							excp_538817.msg = new_py_string_176075(msg_538815);
							var excp_538820 = excp_538817;
							F.line = 36;
							result_537830 = excp_538820;
							break BeforeRet;
							}
							
							var fun_539002 = fun_538802;
							F.line = 46;
							var res_539004 = fun_539002(k_538720);
							var k_repr_539201 = res_539004;
							F.line = 84;
							F.line = 45;
							if ((v_538721.pyType === null)) {
							F.line = 2895;
							var e_539228 = null;
							F.line = 2896;
							e_539228 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 26;
							e_539228.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
							F.line = 2891;
							e_539228.parent = null;
							F.line = 26;
							raiseException(e_539228, "InternalError");
							}
							
							F.line = 27;
							var fun_539402 = v_538721.pyType.magicMethods.Field25;
							if ((fun_539402 === null)) {
							F.line = 29;
							var obj_type_str_539411 = v_538721.pyType.name;
							F.line = 30;
							var method_str_539413 = makeNimstrLit("repr");
							F.line = 31;
							var msg_539415 = (makeNimstrLit("No ")).concat(method_str_539413,makeNimstrLit(" method for "),obj_type_str_539411,makeNimstrLit(" defined"));
							F.line = 32;
							F.line = 106;
							var excp_539417 = new_py_type_error_simple_360601();
							F.line = 107;
							excp_539417.tk = 3;
							F.line = 108;
							excp_539417.thrown = true;
							F.line = 109;
							excp_539417.msg = new_py_string_176075(msg_539415);
							var excp_539420 = excp_539417;
							F.line = 36;
							result_537830 = excp_539420;
							break BeforeRet;
							}
							
							var fun_539602 = fun_539402;
							F.line = 46;
							var res_539604 = fun_539602(v_538721);
							var v_repr_539801 = res_539604;
							if (!(of_py_str_object_175092(k_repr_539201))) {
							F.line = 159;
							var type_name_539804 = nimCopy(null, k_repr_539201.pyType.name, NTI138);
							F.line = 160;
							F.line = 160;
							var fmt_res_539807 = mnewString(0);
							F.line = 160;
							if (fmt_res_539807 != null) { fmt_res_539807 = (fmt_res_539807).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_539807 = makeNimstrLit(" returned non-string (type "); };
							F.line = 260;
							if (fmt_res_539807 != null) { fmt_res_539807 = (fmt_res_539807).concat(type_name_539804); } else { fmt_res_539807 = type_name_539804.slice(); };
							F.line = 160;
							if (fmt_res_539807 != null) { fmt_res_539807 = (fmt_res_539807).concat(makeNimstrLit(")")); } else { fmt_res_539807 = makeNimstrLit(")"); };
							var msg_540002 = (makeNimstrLit("__str__")).concat(fmt_res_539807);
							F.line = 161;
							F.line = 106;
							var excp_540004 = new_py_type_error_simple_360601();
							F.line = 107;
							excp_540004.tk = 3;
							F.line = 108;
							excp_540004.thrown = true;
							F.line = 109;
							excp_540004.msg = new_py_string_176075(msg_540002);
							result_537830 = excp_540004;
							break BeforeRet;
							}
							
							if (!(of_py_str_object_175092(v_repr_539801))) {
							F.line = 159;
							var type_name_540008 = nimCopy(null, v_repr_539801.pyType.name, NTI138);
							F.line = 160;
							F.line = 160;
							var fmt_res_540011 = mnewString(0);
							F.line = 160;
							if (fmt_res_540011 != null) { fmt_res_540011 = (fmt_res_540011).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_540011 = makeNimstrLit(" returned non-string (type "); };
							F.line = 260;
							if (fmt_res_540011 != null) { fmt_res_540011 = (fmt_res_540011).concat(type_name_540008); } else { fmt_res_540011 = type_name_540008.slice(); };
							F.line = 160;
							if (fmt_res_540011 != null) { fmt_res_540011 = (fmt_res_540011).concat(makeNimstrLit(")")); } else { fmt_res_540011 = makeNimstrLit(")"); };
							var msg_540202 = (makeNimstrLit("__str__")).concat(fmt_res_540011);
							F.line = 161;
							F.line = 106;
							var excp_540204 = new_py_type_error_simple_360601();
							F.line = 107;
							excp_540204.tk = 3;
							F.line = 108;
							excp_540204.thrown = true;
							F.line = 109;
							excp_540204.msg = new_py_string_176075(msg_540202);
							result_537830 = excp_540204;
							break BeforeRet;
							}
							
							F.line = 87;
							F.line = 87;
							var fmt_res_540209 = mnewString(0);
							F.line = 260;
							if (fmt_res_540209 != null) { fmt_res_540209 = (fmt_res_540209).concat(k_repr_539201.str); } else { fmt_res_540209 = k_repr_539201.str.slice(); };
							F.line = 87;
							if (fmt_res_540209 != null) { fmt_res_540209 = (fmt_res_540209).concat(makeNimstrLit(": ")); } else { fmt_res_540209 = makeNimstrLit(": "); };
							F.line = 260;
							if (fmt_res_540209 != null) { fmt_res_540209 = (fmt_res_540209).concat(v_repr_539801.str); } else { fmt_res_540209 = v_repr_539801.str.slice(); };
							var Tmp7 = nimCopy(null, fmt_res_540209, NTI138);
							if (ss_538017 != null) { ss_538017.push(Tmp7); } else { ss_538017 = [Tmp7]; };
							}
							
							F.line = 2110;
							res_540630 = addInt(res_540630, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 88;
		result_537830 = new_py_string_176075((makeNimstrLit("{")).concat(nsuJoinSep(ss_538017, makeNimstrLit(", ")),makeNimstrLit("}")));
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_538001.readNum = subInt(self_538001.readNum, 1);
		}
		} finally {
		framePtr = F;
		F.line = 383;
		self_538001.reprLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_537830;

}

function len_540983(t_540989) {
	var result_540990 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 154;
		result_540990 = t_540989.counter;
	framePtr = F.prev;

	return result_540990;

}

function len_pydict_object_magic_540648(self_no_cast_540650) {
		var Tmp1;

	var result_540651 = null;

	var F={procname:"dictobject.lenPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_540650.m_type, NTI531178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_540801 = self_no_cast_540650;
		if (self_540801.writeLock) {
		F.line = 414;
		var msg_540803 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_540805 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_540805.tk = 8;
		F.line = 108;
		excp_540805.thrown = true;
		F.line = 109;
		excp_540805.msg = new_py_string_176075(msg_540803);
		result_540651 = excp_540805;
		break BeforeRet;
		}
		
		F.line = 412;
		self_540801.readNum = addInt(self_540801.readNum, 1);
		F.line = 438;
		try {
		Tmp1 = new_py_int_378257(len_540983(self_540801.table));
		} finally {
		framePtr = F;
		F.line = 417;
		self_540801.readNum = subInt(self_540801.readNum, 1);
		}
		result_540651 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_540651;

}

function init_table_532263(initial_size_532268) {
	var result_532270 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_532268))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_532270.counter = 0;
		F.line = 354;
		result_532270.data = new Array(chckRange(initial_size_532268, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_532268, 0, 2147483647);++i) {result_532270.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_532270;

}

function new_py_dict_532257() {
	var result_532259 = null;

	var F={procname:"dictobject.newPyDict",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		F.line = 46;
		result_532259 = new_pydict_simple_531401();
		F.line = 47;
		nimCopy(result_532259.table, init_table_532263(64), NTI531188);
	framePtr = F.prev;

	return result_532259;

}

function new_pydict_object_magic_541027(args_541042) {
	var result_541043 = null;

	var F={procname:"dictobject.newPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 95;
		result_541043 = new_py_dict_532257();
	framePtr = F.prev;

	return result_541043;

}

function getitem_pydict_object_magic_541059(self_no_cast_541061, other_541062) {
			var Tmp3;

	var result_541063 = null;

	var F={procname:"dictobject.getitemPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_541061.m_type, NTI531178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_541201 = self_no_cast_541061;
		if (self_541201.writeLock) {
		F.line = 414;
		var msg_541203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_541205 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_541205.tk = 8;
		F.line = 108;
		excp_541205.thrown = true;
		F.line = 109;
		excp_541205.msg = new_py_string_176075(msg_541203);
		result_541063 = excp_541205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_541201.readNum = addInt(self_541201.readNum, 1);
		F.line = 438;
		try {
		F.line = 61;
		var hash_func_541223 = other_541062.pyType.magicMethods.Field30;
		if ((hash_func_541223 === null)) {
		F.line = 63;
		var tp_name_541231 = nimCopy(null, other_541062.pyType.name, NTI138);
		F.line = 64;
		var msg_541233 = (makeNimstrLit("unhashable type: ")).concat(tp_name_541231);
		F.line = 65;
		F.line = 106;
		var excp_541235 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_541235.tk = 3;
		F.line = 108;
		excp_541235.thrown = true;
		F.line = 109;
		excp_541235.msg = new_py_string_176075(msg_541233);
		result_541063 = excp_541235;
		break BeforeRet;
		}
		
		F.line = 100;
++excHandler;
		try {
		F.line = 101;
		result_541063 = get_or_default_537528(self_541201.table, other_541062, null);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156085))) {
		F.line = 103;
		var msg_541539 = makeNimstrLit("__hash__ method doesn\'t return an integer or __eq__ method doesn\'t return a bool");
		F.line = 104;
		F.line = 106;
		var excp_541541 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_541541.tk = 3;
		F.line = 108;
		excp_541541.thrown = true;
		F.line = 109;
		excp_541541.msg = new_py_string_176075(msg_541539);
		result_541063 = excp_541541;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		if (!((result_541063 === null))) {
		F.line = 106;
		break BeforeRet;
		}
		
		F.line = 108;
		var msg_541550 = null;
		F.line = 109;
		var repr_541551 = other_541062.pyType.magicMethods.Field25(other_541062);
			if (of_py_exception_object_358259(repr_541551)) {
			Tmp3 = repr_541551.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 111;
		msg_541550 = nimCopy(null, makeNimstrLit("exception occured when generating key error msg calling repr"), NTI138);
		}
		else {
			F.line = 113;
			msg_541550 = nimCopy(null, repr_541551.str, NTI138);
		}
		
		F.line = 114;
		F.line = 106;
		var excp_541553 = new_py_key_error_simple_368601();
		F.line = 107;
		excp_541553.tk = 11;
		F.line = 108;
		excp_541553.thrown = true;
		F.line = 109;
		excp_541553.msg = new_py_string_176075(msg_541550);
		result_541063 = excp_541553;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_541201.readNum = subInt(self_541201.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_541063;

}

function raw_insert_535562(t_535569, data_535573, data_535573_Idx, key_535575, val_535577, hc_535579, h_535581) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_535573[data_535573_Idx][chckIndx(h_535581, 0, data_535573[data_535573_Idx].length+0-1)-0].Field1 = key_535575;
		F.line = 65;
		data_535573[data_535573_Idx][chckIndx(h_535581, 0, data_535573[data_535573_Idx].length+0-1)-0].Field2 = val_535577;
		F.line = 66;
		data_535573[data_535573_Idx][chckIndx(h_535581, 0, data_535573[data_535573_Idx].length+0-1)-0].Field0 = hc_535579;
	framePtr = F.prev;

	
}

function enlarge_534432(t_534439) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_534447 = null;
		F.line = 314;
		n_534447 = new Array(chckRange(mulInt((t_534439.data != null ? t_534439.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_534439.data != null ? t_534439.data.length : 0), 2), 0, 2147483647);++i) {n_534447[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_534439.data; t_534439.data = n_534447; n_534447 = Tmp1;		L2: do {
			F.line = 316;
			var i_534660 = 0;
			F.line = 2088;
			var colontmp__536249 = 0;
			F.line = 316;
			colontmp__536249 = (n_534447 != null ? (n_534447.length-1) : -1);
			F.line = 2094;
			var res_536252 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_536252 <= colontmp__536249)) break L4;
						F.line = 2096;
						i_534660 = res_536252;
						F.line = 317;
						var eh_534878 = n_534447[chckIndx(i_534660, 0, n_534447.length+0-1)-0].Field0;
						if (is_filled_146491(eh_534878)) {
						F.line = 319;
						var j_534887 = (eh_534878 & (t_534439.data != null ? (t_534439.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_534439.data[chckIndx(j_534887, 0, t_534439.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_534887 = next_try_146614(j_534887, (t_534439.data != null ? (t_534439.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_535562(t_534439, t_534439, "data", n_534447[chckIndx(i_534660, 0, n_534447.length+0-1)-0].Field1, n_534447[chckIndx(i_534660, 0, n_534447.length+0-1)-0].Field2, eh_534878, j_534887);
						}
						
						F.line = 2097;
						res_536252 = addInt(res_536252, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_536270(t_536275, key_536277, hc_536279) {
	var result_536280 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_536289 = (hc_536279 & (t_536275.data != null ? (t_536275.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_536275.data[chckIndx(h_536289, 0, t_536275.data.length+0-1)-0].Field0)) break L2;
					if (((t_536275.data[chckIndx(h_536289, 0, t_536275.data.length+0-1)-0].Field0 == hc_536279) && HEX3DHEX3D_531081(t_536275.data[chckIndx(h_536289, 0, t_536275.data.length+0-1)-0].Field1, key_536277))) {
					F.line = 38;
					result_536280 = h_536289;
					break BeforeRet;
					}
					
					F.line = 39;
					h_536289 = next_try_146614(h_536289, (t_536275.data != null ? (t_536275.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_536280 = subInt(-1, h_536289);
	} while (false);
	framePtr = F.prev;

	return result_536280;

}

function HEX5BHEX5DHEX3D_533993(t_534000, key_534002, val_534004) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_534005 = [0];
		F.line = 98;
		var index_534018 = raw_get_532600(t_534000, key_534002, hc_534005, 0);
		if ((0 <= index_534018)) {
		F.line = 99;
		t_534000.data[chckIndx(index_534018, 0, t_534000.data.length+0-1)-0].Field2 = val_534004;
		}
		else {
			if (must_rehash_146509((t_534000.data != null ? t_534000.data.length : 0), t_534000.counter)) {
			F.line = 90;
			enlarge_534432(t_534000);
			F.line = 91;
			index_534018 = raw_get_known_hc_536270(t_534000, key_534002, hc_534005[0]);
			}
			
			F.line = 92;
			index_534018 = subInt(-1, index_534018);
			F.line = 93;
			raw_insert_535562(t_534000, t_534000, "data", key_534002, val_534004, hc_534005[0], index_534018);
			F.line = 100;
			t_534000.counter = addInt(t_534000.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function setitem_pydict_object_magic_541581(self_no_cast_541583, arg1_541584, arg2_541585) {
			var Tmp1;
		var Tmp2;

	var result_541586 = null;

	var F={procname:"dictobject.setitemPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_541583.m_type, NTI531178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_541801 = self_no_cast_541583;
			if ((0 < self_541801.readNum)) Tmp1 = true; else {				Tmp1 = self_541801.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_541805 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 106;
		var excp_541807 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_541807.tk = 8;
		F.line = 108;
		excp_541807.thrown = true;
		F.line = 109;
		excp_541807.msg = new_py_string_176075(msg_541805);
		result_541586 = excp_541807;
		break BeforeRet;
		}
		
		F.line = 408;
		self_541801.writeLock = true;
		F.line = 438;
		try {
		F.line = 61;
		var hash_func_541816 = arg1_541584.pyType.magicMethods.Field30;
		if ((hash_func_541816 === null)) {
		F.line = 63;
		var tp_name_541824 = nimCopy(null, arg1_541584.pyType.name, NTI138);
		F.line = 64;
		var msg_541826 = (makeNimstrLit("unhashable type: ")).concat(tp_name_541824);
		F.line = 65;
		F.line = 106;
		var excp_541828 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_541828.tk = 3;
		F.line = 108;
		excp_541828.thrown = true;
		F.line = 109;
		excp_541828.msg = new_py_string_176075(msg_541826);
		result_541586 = excp_541828;
		break BeforeRet;
		}
		
		F.line = 119;
++excHandler;
		try {
		F.line = 120;
		HEX5BHEX5DHEX3D_533993(self_541801.table, arg1_541584, arg2_541585);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156085))) {
		F.line = 122;
		var msg_541989 = makeNimstrLit("__hash__ method doesn\'t return an integer or __eq__ method doesn\'t return a bool");
		F.line = 123;
		F.line = 106;
		var excp_541991 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_541991.tk = 3;
		F.line = 108;
		excp_541991.thrown = true;
		F.line = 109;
		excp_541991.msg = new_py_string_176075(msg_541989);
		result_541586 = excp_541991;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_541801.writeLock = false;
		}
		result_541586 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_541586;

}

function copy_pydict_object_method_542009(self_no_cast_542011, args_542025) {
		var Tmp1;

	var result_542026 = null;

	var F={procname:"dictobject.copyPydictObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_542025 != null ? args_542025.length : 0) == 0))) {
		F.line = 190;
		var msg_542038 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_542043 = mnewString(0);
		F.line = 192;
		if (fmt_res_542043 != null) { fmt_res_542043 = (fmt_res_542043).concat(makeNimstrLit(" argument (")); } else { fmt_res_542043 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_542043 != null) { fmt_res_542043 = (fmt_res_542043).concat(cstrToNimstr(((args_542025 != null ? args_542025.length : 0))+"")); } else { fmt_res_542043 = cstrToNimstr(((args_542025 != null ? args_542025.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_542043 != null) { fmt_res_542043 = (fmt_res_542043).concat(makeNimstrLit(" given)")); } else { fmt_res_542043 = makeNimstrLit(" given)"); };
		msg_542038 = nimCopy(null, (makeNimstrLit("copy takes exactly 0")).concat(fmt_res_542043), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_542210 = mnewString(0);
			F.line = 194;
			if (fmt_res_542210 != null) { fmt_res_542210 = (fmt_res_542210).concat(makeNimstrLit(" argument (")); } else { fmt_res_542210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_542210 != null) { fmt_res_542210 = (fmt_res_542210).concat(cstrToNimstr(((args_542025 != null ? args_542025.length : 0))+"")); } else { fmt_res_542210 = cstrToNimstr(((args_542025 != null ? args_542025.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_542210 != null) { fmt_res_542210 = (fmt_res_542210).concat(makeNimstrLit(" given)")); } else { fmt_res_542210 = makeNimstrLit(" given)"); };
			msg_542038 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_542210), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_542409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_542409.tk = 3;
		F.line = 108;
		excp_542409.thrown = true;
		F.line = 109;
		excp_542409.msg = new_py_string_176075(msg_542038);
		result_542026 = excp_542409;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_542011.m_type, NTI531178))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PydictObject` "));
		}
		
		F.line = 444;
		var self_542601 = self_no_cast_542011;
		if (self_542601.writeLock) {
		F.line = 414;
		var msg_542603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 106;
		var excp_542605 = new_py_lock_error_simple_365601();
		F.line = 107;
		excp_542605.tk = 8;
		F.line = 108;
		excp_542605.thrown = true;
		F.line = 109;
		excp_542605.msg = new_py_string_176075(msg_542603);
		result_542026 = excp_542605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_542601.readNum = addInt(self_542601.readNum, 1);
		F.line = 444;
		try {
		F.line = 127;
		var new_t_542616 = new_py_dict_532257();
		F.line = 128;
		nimCopy(new_t_542616.table, self_542601.table, NTI531188);
		Tmp1 = new_t_542616;
		} finally {
		framePtr = F;
		F.line = 417;
		self_542601.readNum = subInt(self_542601.readNum, 1);
		}
		result_542026 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_542026;

}
pydict_object_type_531222.magicMethods.Field22 = contains_pydict_object_magic_537051;
pydict_object_type_531222.magicMethods.Field25 = repr_pydict_object_magic_537827;
pydict_object_type_531222.magicMethods.Field23 = len_pydict_object_magic_540648;
pydict_object_type_531222.magicMethods.Field26 = new_pydict_object_magic_541027;
pydict_object_type_531222.magicMethods.Field32 = getitem_pydict_object_magic_541059;
pydict_object_type_531222.magicMethods.Field33 = setitem_pydict_object_magic_541581;
register_bltin_method_160182(pydict_object_type_531222, makeNimstrLit("copy"), copy_pydict_object_method_542009);
var bltin_dict_544014 = new_py_dict_532257();

function new_545206() {
	var result_545211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_545401 = null;
		F.line = 211;
		r_545401 = {m_type: NTI545150, refObj: null, id: 0, pyType: null};
		F.line = 212;
		result_545211 = r_545401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_545211;

}

function new_py_cell_simple_545201() {
	var result_545203 = null;

	var F={procname:"cellobject.newPyCellSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_545424 = new_545206();
		F.line = 561;
		obj_545424.pyType = py_cell_object_type_545156;
		F.line = 563;
		give_id_157814(obj_545424);
		result_545203 = obj_545424;
	framePtr = F.prev;

	return result_545203;

}

function new_py_cell_default_545821(args_545105) {
	var result_545824 = null;

	var F={procname:"cellobject.newPyCellDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_545824 = new_py_cell_simple_545201();
	framePtr = F.prev;

	return result_545824;

}
var py_cell_object_type_545156 = new_py_type_159261(makeNimstrLit("Cell"));
py_cell_object_type_545156.kind = 16;
py_cell_object_type_545156.magicMethods.Field26 = new_py_cell_default_545821;

function new_547206() {
	var result_547211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_547401 = null;
		F.line = 211;
		r_547401 = {m_type: NTI547083, back: null, code: null, globals: null, fastLocals: null, cellVars: null, id: 0, pyType: null};
		F.line = 212;
		result_547211 = r_547401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_547211;

}

function new_py_frame_simple_547201() {
	var result_547203 = null;

	var F={procname:"frameobject.newPyFrameSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_547424 = new_547206();
		F.line = 561;
		obj_547424.pyType = py_frame_object_type_547101;
		F.line = 563;
		give_id_157814(obj_547424);
		result_547203 = obj_547424;
	framePtr = F.prev;

	return result_547203;

}

function new_py_frame_default_547821(args_547038) {
	var result_547824 = null;

	var F={procname:"frameobject.newPyFrameDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_547824 = new_py_frame_simple_547201();
	framePtr = F.prev;

	return result_547824;

}
var py_frame_object_type_547101 = new_py_type_159261(makeNimstrLit("Frame"));
py_frame_object_type_547101.magicMethods.Field26 = new_py_frame_default_547821;

function new_550206() {
	var result_550211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_550401 = null;
		F.line = 211;
		r_550401 = {m_type: NTI550123, name: null, code: null, globals: null, closure: null, id: 0, pyType: null};
		F.line = 212;
		result_550211 = r_550401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_550211;

}

function new_py_function_simple_550201() {
	var result_550203 = null;

	var F={procname:"funcobject.newPyFunctionSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_550424 = new_550206();
		F.line = 561;
		obj_550424.pyType = py_function_object_type_550135;
		F.line = 563;
		give_id_157814(obj_550424);
		result_550203 = obj_550424;
	framePtr = F.prev;

	return result_550203;

}

function new_py_function_default_550821(args_550078) {
	var result_550824 = null;

	var F={procname:"funcobject.newPyFunctionDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_550824 = new_py_function_simple_550201();
	framePtr = F.prev;

	return result_550824;

}

function new_551206() {
	var result_551211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_551401 = null;
		F.line = 211;
		r_551401 = {m_type: NTI551100, fun: null, self: null, id: 0, pyType: null};
		F.line = 212;
		result_551211 = r_551401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_551211;

}

function new_py_bound_method_simple_551201() {
	var result_551203 = null;

	var F={procname:"funcobject.newPyBoundMethodSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_551424 = new_551206();
		F.line = 561;
		obj_551424.pyType = py_bound_method_object_type_551108;
		F.line = 563;
		give_id_157814(obj_551424);
		result_551203 = obj_551424;
	framePtr = F.prev;

	return result_551203;

}

function new_py_bound_method_default_551821(args_551055) {
	var result_551824 = null;

	var F={procname:"funcobject.newPyBoundMethodDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_551824 = new_py_bound_method_simple_551201();
	framePtr = F.prev;

	return result_551824;

}
var py_function_object_type_550135 = new_py_type_159261(makeNimstrLit("Function"));
py_function_object_type_550135.kind = 13;
py_function_object_type_550135.magicMethods.Field26 = new_py_function_default_550821;
var py_bound_method_object_type_551108 = new_py_type_159261(makeNimstrLit("BoundMethod"));
py_bound_method_object_type_551108.kind = 14;
py_bound_method_object_type_551108.magicMethods.Field26 = new_py_bound_method_default_551821;

function new_bound_method_552214(fun_552216, self_552217) {
	var result_552218 = null;

	var F={procname:"funcobject.newBoundMethod",prev:framePtr,filename:"../Objects/funcobject.nim",line:0};
	framePtr = F;
		F.line = 33;
		result_552218 = new_py_bound_method_simple_551201();
		F.line = 34;
		result_552218.fun = fun_552216;
		F.line = 35;
		result_552218.self = self_552217;
	framePtr = F.prev;

	return result_552218;

}

function get_py_function_object_magic_552232(self_no_cast_552234, other_552235) {
	var result_552236 = null;

	var F={procname:"funcobject.getPyFunctionObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_552234.m_type, NTI550123))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFunctionObject` "));
		}
		
		F.line = 438;
		var self_552401 = self_no_cast_552234;
		result_552236 = new_bound_method_552214(self_552401, other_552235);
	framePtr = F.prev;

	return result_552236;

}

function get_py_bound_method_object_magic_552416(self_no_cast_552418, other_552419) {
	var result_552420 = null;

	var F={procname:"funcobject.getPyBoundMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_552418.m_type, NTI551100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoundMethodObject` "));
		}
		
		F.line = 438;
		var self_552601 = self_no_cast_552418;
		result_552420 = self_552601;
	framePtr = F.prev;

	return result_552420;

}

function new_552806() {
	var result_552811 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_553001 = null;
		F.line = 211;
		r_553001 = {m_type: NTI552672, callable: null, id: 0, pyType: null};
		F.line = 212;
		result_552811 = r_553001;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_552811;

}

function new_py_static_method_simple_552801() {
	var result_552803 = null;

	var F={procname:"funcobject.newPyStaticMethodSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_553024 = new_552806();
		F.line = 561;
		obj_553024.pyType = py_static_method_object_type_552678;
		F.line = 563;
		give_id_157814(obj_553024);
		result_552803 = obj_553024;
	framePtr = F.prev;

	return result_552803;

}

function new_py_static_method_default_553421(args_552627) {
	var result_553424 = null;

	var F={procname:"funcobject.newPyStaticMethodDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_553424 = new_py_static_method_simple_552801();
	framePtr = F.prev;

	return result_553424;

}

function get_py_static_method_object_magic_553644(self_no_cast_553646, other_553647) {
	var result_553648 = null;

	var F={procname:"funcobject.getPyStaticMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_553646.m_type, NTI552672))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStaticMethodObject` "));
		}
		
		F.line = 438;
		var self_553801 = self_no_cast_553646;
		result_553648 = self_553801.callable;
	framePtr = F.prev;

	return result_553648;

}

function init_py_static_method_object_magic_553816(self_no_cast_553818, args_553832) {
	var result_553833 = null;

	var F={procname:"funcobject.initPyStaticMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_553832 != null ? args_553832.length : 0) == 1))) {
		F.line = 190;
		var msg_553845 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_553850 = mnewString(0);
		F.line = 192;
		if (fmt_res_553850 != null) { fmt_res_553850 = (fmt_res_553850).concat(makeNimstrLit(" argument (")); } else { fmt_res_553850 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_553850 != null) { fmt_res_553850 = (fmt_res_553850).concat(cstrToNimstr(((args_553832 != null ? args_553832.length : 0))+"")); } else { fmt_res_553850 = cstrToNimstr(((args_553832 != null ? args_553832.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_553850 != null) { fmt_res_553850 = (fmt_res_553850).concat(makeNimstrLit(" given)")); } else { fmt_res_553850 = makeNimstrLit(" given)"); };
		msg_553845 = nimCopy(null, (makeNimstrLit("init takes exactly 1")).concat(fmt_res_553850), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_554010 = mnewString(0);
			F.line = 194;
			if (fmt_res_554010 != null) { fmt_res_554010 = (fmt_res_554010).concat(makeNimstrLit(" argument (")); } else { fmt_res_554010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_554010 != null) { fmt_res_554010 = (fmt_res_554010).concat(cstrToNimstr(((args_553832 != null ? args_553832.length : 0))+"")); } else { fmt_res_554010 = cstrToNimstr(((args_553832 != null ? args_553832.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_554010 != null) { fmt_res_554010 = (fmt_res_554010).concat(makeNimstrLit(" given)")); } else { fmt_res_554010 = makeNimstrLit(" given)"); };
			msg_553845 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_554010), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_554209 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_554209.tk = 3;
		F.line = 108;
		excp_554209.thrown = true;
		F.line = 109;
		excp_554209.msg = new_py_string_176075(msg_553845);
		result_553833 = excp_554209;
		break BeforeRet;
		}
		
		F.line = 230;
		var callable_554211 = args_553832[chckIndx(0, 0, args_553832.length+0-1)-0];
		if (!(isObj(self_no_cast_553818.m_type, NTI552672))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStaticMethodObject` "));
		}
		
		F.line = 438;
		var self_554401 = self_no_cast_553818;
		F.line = 52;
		self_554401.callable = callable_554211;
		result_553833 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_553833;

}
py_function_object_type_550135.magicMethods.Field34 = get_py_function_object_magic_552232;
py_bound_method_object_type_551108.magicMethods.Field34 = get_py_bound_method_object_magic_552416;
var py_static_method_object_type_552678 = new_py_type_159261(makeNimstrLit("StaticMethod"));
py_static_method_object_type_552678.magicMethods.Field26 = new_py_static_method_default_553421;
py_static_method_object_type_552678.magicMethods.Field34 = get_py_static_method_object_magic_553644;
py_static_method_object_type_552678.magicMethods.Field27 = init_py_static_method_object_magic_553816;

function new_555206() {
	var result_555211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_555401 = null;
		F.line = 211;
		r_555401 = {m_type: NTI555084, name: null, dict: null, id: 0, pyType: null};
		F.line = 212;
		result_555211 = r_555401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_555211;

}

function new_py_module_simple_555201() {
	var result_555203 = null;

	var F={procname:"moduleobject.newPyModuleSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_555424 = new_555206();
		F.line = 561;
		obj_555424.pyType = py_module_object_type_555090;
		F.line = 563;
		give_id_157814(obj_555424);
		F.line = 565;
		obj_555424.dict = new_py_dict_532257();
		result_555203 = obj_555424;
	framePtr = F.prev;

	return result_555203;

}

function new_py_module_default_555821(args_555039) {
	var result_555824 = null;

	var F={procname:"moduleobject.newPyModuleDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_555824 = new_py_module_simple_555201();
	framePtr = F.prev;

	return result_555824;

}
var py_module_object_type_555090 = new_py_type_159261(makeNimstrLit("Module"));
py_module_object_type_555090.magicMethods.Field26 = new_py_module_default_555821;

function new_557206() {
	var result_557211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_557401 = null;
		F.line = 211;
		r_557401 = {m_type: NTI557143, name: null, self: null, kind: 0, fun: 0, id: 0, pyType: null};
		F.line = 212;
		result_557211 = r_557401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_557211;

}

function new_py_nim_func_simple_557201() {
	var result_557203 = null;

	var F={procname:"methodobject.newPyNimFuncSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_557424 = new_557206();
		F.line = 561;
		obj_557424.pyType = py_nim_func_object_type_557155;
		F.line = 563;
		give_id_157814(obj_557424);
		result_557203 = obj_557424;
	framePtr = F.prev;

	return result_557203;

}

function new_py_nim_func_default_557821(args_557098) {
	var result_557824 = null;

	var F={procname:"methodobject.newPyNimFuncDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_557824 = new_py_nim_func_simple_557201();
	framePtr = F.prev;

	return result_557824;

}

function call_py_nim_func_object_magic_558044(self_no_cast_558046, args_558060) {
	var result_558061 = null;

	var F={procname:"methodobject.callPyNimFuncObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_558046.m_type, NTI557143))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNimFuncObject` "));
		}
		
		F.line = 438;
		var self_558201 = self_no_cast_558046;
		F.line = 29;
		switch (self_558201.kind) {
		case 0:
			F.line = 31;
			result_558061 = self_558201.fun(args_558060);
			break BeforeRet;
			break;
		case 1:
			if (!(((args_558060 != null ? args_558060.length : 0) == 0))) {
			F.line = 190;
			var msg_558215 = null;
			if (false) {
			F.line = 192;
			F.line = 192;
			var fmt_res_558220 = mnewString(0);
			F.line = 192;
			if (fmt_res_558220 != null) { fmt_res_558220 = (fmt_res_558220).concat(makeNimstrLit(" argument (")); } else { fmt_res_558220 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_558220 != null) { fmt_res_558220 = (fmt_res_558220).concat(cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"")); } else { fmt_res_558220 = cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"").slice(); };
			F.line = 192;
			if (fmt_res_558220 != null) { fmt_res_558220 = (fmt_res_558220).concat(makeNimstrLit(" given)")); } else { fmt_res_558220 = makeNimstrLit(" given)"); };
			msg_558215 = nimCopy(null, (makeNimstrLit(" takes exactly 0")).concat(fmt_res_558220), NTI138);
			}
			else {
				F.line = 194;
				F.line = 194;
				var fmt_res_558410 = mnewString(0);
				F.line = 194;
				if (fmt_res_558410 != null) { fmt_res_558410 = (fmt_res_558410).concat(makeNimstrLit(" argument (")); } else { fmt_res_558410 = makeNimstrLit(" argument ("); };
				F.line = 270;
				if (fmt_res_558410 != null) { fmt_res_558410 = (fmt_res_558410).concat(cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"")); } else { fmt_res_558410 = cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"").slice(); };
				F.line = 194;
				if (fmt_res_558410 != null) { fmt_res_558410 = (fmt_res_558410).concat(makeNimstrLit(" given)")); } else { fmt_res_558410 = makeNimstrLit(" given)"); };
				msg_558215 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_558410), NTI138);
			}
			
			F.line = 195;
			F.line = 106;
			var excp_558609 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_558609.tk = 3;
			F.line = 108;
			excp_558609.thrown = true;
			F.line = 109;
			excp_558609.msg = new_py_string_176075(msg_558215);
			result_558061 = excp_558609;
			break BeforeRet;
			}
			
			F.line = 34;
			result_558061 = self_558201.fun(self_558201.self);
			break BeforeRet;
			break;
		case 2:
			if (!(((args_558060 != null ? args_558060.length : 0) == 1))) {
			F.line = 190;
			var msg_558623 = null;
			if (false) {
			F.line = 192;
			F.line = 192;
			var fmt_res_558628 = mnewString(0);
			F.line = 192;
			if (fmt_res_558628 != null) { fmt_res_558628 = (fmt_res_558628).concat(makeNimstrLit(" argument (")); } else { fmt_res_558628 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_558628 != null) { fmt_res_558628 = (fmt_res_558628).concat(cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"")); } else { fmt_res_558628 = cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"").slice(); };
			F.line = 192;
			if (fmt_res_558628 != null) { fmt_res_558628 = (fmt_res_558628).concat(makeNimstrLit(" given)")); } else { fmt_res_558628 = makeNimstrLit(" given)"); };
			msg_558623 = nimCopy(null, (makeNimstrLit(" takes exactly 1")).concat(fmt_res_558628), NTI138);
			}
			else {
				F.line = 194;
				F.line = 194;
				var fmt_res_558810 = mnewString(0);
				F.line = 194;
				if (fmt_res_558810 != null) { fmt_res_558810 = (fmt_res_558810).concat(makeNimstrLit(" argument (")); } else { fmt_res_558810 = makeNimstrLit(" argument ("); };
				F.line = 270;
				if (fmt_res_558810 != null) { fmt_res_558810 = (fmt_res_558810).concat(cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"")); } else { fmt_res_558810 = cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"").slice(); };
				F.line = 194;
				if (fmt_res_558810 != null) { fmt_res_558810 = (fmt_res_558810).concat(makeNimstrLit(" given)")); } else { fmt_res_558810 = makeNimstrLit(" given)"); };
				msg_558623 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_558810), NTI138);
			}
			
			F.line = 195;
			F.line = 106;
			var excp_559009 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_559009.tk = 3;
			F.line = 108;
			excp_559009.thrown = true;
			F.line = 109;
			excp_559009.msg = new_py_string_176075(msg_558623);
			result_558061 = excp_559009;
			break BeforeRet;
			}
			
			F.line = 37;
			result_558061 = self_558201.fun(self_558201.self, args_558060[chckIndx(0, 0, args_558060.length+0-1)-0]);
			break BeforeRet;
			break;
		case 3:
			if (!(((args_558060 != null ? args_558060.length : 0) == 2))) {
			F.line = 190;
			var msg_559023 = null;
			if (false) {
			F.line = 192;
			F.line = 192;
			var fmt_res_559028 = mnewString(0);
			F.line = 192;
			if (fmt_res_559028 != null) { fmt_res_559028 = (fmt_res_559028).concat(makeNimstrLit(" argument (")); } else { fmt_res_559028 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_559028 != null) { fmt_res_559028 = (fmt_res_559028).concat(cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"")); } else { fmt_res_559028 = cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"").slice(); };
			F.line = 192;
			if (fmt_res_559028 != null) { fmt_res_559028 = (fmt_res_559028).concat(makeNimstrLit(" given)")); } else { fmt_res_559028 = makeNimstrLit(" given)"); };
			msg_559023 = nimCopy(null, (makeNimstrLit(" takes exactly 2")).concat(fmt_res_559028), NTI138);
			}
			else {
				F.line = 194;
				F.line = 194;
				var fmt_res_559210 = mnewString(0);
				F.line = 194;
				if (fmt_res_559210 != null) { fmt_res_559210 = (fmt_res_559210).concat(makeNimstrLit(" argument (")); } else { fmt_res_559210 = makeNimstrLit(" argument ("); };
				F.line = 270;
				if (fmt_res_559210 != null) { fmt_res_559210 = (fmt_res_559210).concat(cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"")); } else { fmt_res_559210 = cstrToNimstr(((args_558060 != null ? args_558060.length : 0))+"").slice(); };
				F.line = 194;
				if (fmt_res_559210 != null) { fmt_res_559210 = (fmt_res_559210).concat(makeNimstrLit(" given)")); } else { fmt_res_559210 = makeNimstrLit(" given)"); };
				msg_559023 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_559210), NTI138);
			}
			
			F.line = 195;
			F.line = 106;
			var excp_559409 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_559409.tk = 3;
			F.line = 108;
			excp_559409.thrown = true;
			F.line = 109;
			excp_559409.msg = new_py_string_176075(msg_559023);
			result_558061 = excp_559409;
			break BeforeRet;
			}
			
			F.line = 40;
			result_558061 = self_558201.fun(self_558201.self, args_558060[chckIndx(0, 0, args_558060.length+0-1)-0], args_558060[chckIndx(1, 0, args_558060.length+0-1)-0]);
			break BeforeRet;
			break;
		case 4:
			F.line = 42;
			result_558061 = self_558201.fun(self_558201.self, args_558060);
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_558061;

}
var py_nim_func_object_type_557155 = new_py_type_159261(makeNimstrLit("NimFunc"));
py_nim_func_object_type_557155.kind = 12;
py_nim_func_object_type_557155.magicMethods.Field26 = new_py_nim_func_default_557821;
py_nim_func_object_type_557155.magicMethods.Field31 = call_py_nim_func_object_magic_558044;
var val_stack_561095 = [null];
var block_stack_561097 = [null];

function new_600206() {
	var result_600211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_600401 = null;
		F.line = 211;
		r_600401 = {m_type: NTI600151, start: null, ending: null, step: null, length: null, id: 0, pyType: null};
		F.line = 212;
		result_600211 = r_600401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_600211;

}

function new_py_range_simple_600201() {
	var result_600203 = null;

	var F={procname:"rangeobject.newPyRangeSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_600424 = new_600206();
		F.line = 561;
		obj_600424.pyType = py_range_object_type_600163;
		F.line = 563;
		give_id_157814(obj_600424);
		result_600203 = obj_600424;
	framePtr = F.prev;

	return result_600203;

}

function new_py_range_default_600821(args_600106) {
	var result_600824 = null;

	var F={procname:"rangeobject.newPyRangeDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_600824 = new_py_range_simple_600201();
	framePtr = F.prev;

	return result_600824;

}

function len_py_range_object_magic_601044(self_no_cast_601046) {
	var result_601047 = null;

	var F={procname:"rangeobject.lenPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_601046.m_type, NTI600151))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_601201 = self_no_cast_601046;
		result_601047 = self_601201.length;
	framePtr = F.prev;

	return result_601047;

}

function repr_py_range_object_magic_601216(self_no_cast_601218) {
	var result_601219 = null;

	var F={procname:"rangeobject.reprPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_601218.m_type, NTI600151))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_601401 = self_no_cast_601218;
		F.line = 21;
		var fmt_res_601405 = mnewString(0);
		F.line = 21;
		if (fmt_res_601405 != null) { fmt_res_601405 = (fmt_res_601405).concat(makeNimstrLit("range(")); } else { fmt_res_601405 = makeNimstrLit("range("); };
		F.line = 270;
		if (fmt_res_601405 != null) { fmt_res_601405 = (fmt_res_601405).concat(HEX24_157579(self_601401.start)); } else { fmt_res_601405 = HEX24_157579(self_601401.start).slice(); };
		F.line = 21;
		if (fmt_res_601405 != null) { fmt_res_601405 = (fmt_res_601405).concat(makeNimstrLit(", ")); } else { fmt_res_601405 = makeNimstrLit(", "); };
		F.line = 270;
		if (fmt_res_601405 != null) { fmt_res_601405 = (fmt_res_601405).concat(HEX24_157579(self_601401.ending)); } else { fmt_res_601405 = HEX24_157579(self_601401.ending).slice(); };
		F.line = 21;
		if (fmt_res_601405 != null) { fmt_res_601405 = (fmt_res_601405).concat(makeNimstrLit(", ")); } else { fmt_res_601405 = makeNimstrLit(", "); };
		F.line = 270;
		if (fmt_res_601405 != null) { fmt_res_601405 = (fmt_res_601405).concat(HEX24_157579(self_601401.step)); } else { fmt_res_601405 = HEX24_157579(self_601401.step).slice(); };
		F.line = 21;
		if (fmt_res_601405 != null) { fmt_res_601405 = (fmt_res_601405).concat(makeNimstrLit(", ")); } else { fmt_res_601405 = makeNimstrLit(", "); };
		F.line = 270;
		if (fmt_res_601405 != null) { fmt_res_601405 = (fmt_res_601405).concat(HEX24_157579(self_601401.length)); } else { fmt_res_601405 = HEX24_157579(self_601401.length).slice(); };
		F.line = 21;
		if (fmt_res_601405 != null) { fmt_res_601405 = (fmt_res_601405).concat(makeNimstrLit(")")); } else { fmt_res_601405 = makeNimstrLit(")"); };
		result_601219 = new_py_string_176075(fmt_res_601405);
	framePtr = F.prev;

	return result_601219;

}

function positive_378413(int_obj_378415) {
	var result_378416 = false;

	var F={procname:"numobjects.positive",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 90;
		result_378416 = (int_obj_378415.sign == 1);
	framePtr = F.prev;

	return result_378416;

}

function init_py_range_object_magic_602215(self_no_cast_602217, args_602231) {
	var result_602232 = null;

	var F={procname:"rangeobject.initPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_602217.m_type, NTI600151))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_602401 = self_no_cast_602217;
		L1: do {
			F.line = 25;
			var arg_602410 = null;
			F.line = 3911;
			var i_602605 = 0;
			F.line = 3912;
			var l_602607 = (args_602231 != null ? args_602231.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_602605 < l_602607)) break L3;
						F.line = 3914;
						arg_602410 = args_602231[chckIndx(i_602605, 0, args_602231.length+0-1)-0];
						if (!(of_py_int_object_377315(arg_602410))) {
						F.line = 29;
						var msg_602411 = makeNimstrLit("range() only support int arguments");
						F.line = 30;
						F.line = 106;
						var excp_602413 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_602413.tk = 3;
						F.line = 108;
						excp_602413.thrown = true;
						F.line = 109;
						excp_602413.msg = new_py_string_176075(msg_602411);
						result_602232 = excp_602413;
						break BeforeRet;
						}
						
						F.line = 3915;
						i_602605 = addInt(i_602605, 1);
						if (!(((args_602231 != null ? args_602231.length : 0) == l_602607))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 31;
		var start_602415 = null;
		F.line = 31;
		var ending_602416 = null;
		F.line = 31;
		var step_602417 = null;
		F.line = 32;
		switch ((args_602231 != null ? args_602231.length : 0)) {
		case 1:
			F.line = 34;
			start_602415 = new_py_int_378257(0);
			F.line = 35;
			ending_602416 = args_602231[chckIndx(0, 0, args_602231.length+0-1)-0];
			F.line = 36;
			step_602417 = new_py_int_378257(1);
			break;
		case 2:
			F.line = 38;
			start_602415 = args_602231[chckIndx(0, 0, args_602231.length+0-1)-0];
			F.line = 39;
			ending_602416 = args_602231[chckIndx(1, 0, args_602231.length+0-1)-0];
			F.line = 40;
			step_602417 = new_py_int_378257(1);
			break;
		case 3:
			F.line = 42;
			start_602415 = args_602231[chckIndx(0, 0, args_602231.length+0-1)-0];
			F.line = 43;
			ending_602416 = args_602231[chckIndx(1, 0, args_602231.length+0-1)-0];
			F.line = 44;
			step_602417 = args_602231[chckIndx(2, 0, args_602231.length+0-1)-0];
			if (zero_378388(step_602417)) {
			F.line = 46;
			var msg_602425 = makeNimstrLit("range() step must not be 0");
			F.line = 47;
			F.line = 106;
			var excp_602427 = new_py_value_error_simple_362601();
			F.line = 107;
			excp_602427.tk = 5;
			F.line = 108;
			excp_602427.thrown = true;
			F.line = 109;
			excp_602427.msg = new_py_string_176075(msg_602425);
			result_602232 = excp_602427;
			break BeforeRet;
			}
			
			break;
		default: 
			F.line = 49;
			var msg_602429 = makeNimstrLit("range() expected 1-3 arguments");
			F.line = 50;
			F.line = 106;
			var excp_602431 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_602431.tk = 3;
			F.line = 108;
			excp_602431.thrown = true;
			F.line = 109;
			excp_602431.msg = new_py_string_176075(msg_602429);
			result_602232 = excp_602431;
			break BeforeRet;
			break;
		}
		F.line = 51;
		var length_602433 = null;
		if (positive_378413(step_602417)) {
		F.line = 57;
		length_602433 = div_380641(HEX2D_380181(HEX2B_380161(HEX2D_380181(ending_602416, start_602415), step_602417), py_int_one_378347), step_602417);
		}
		else {
			if (!(negative_378363(step_602417))) {
			F.line = 60;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/rangeobject.nim(60, 12) `negative(step)` "));
			}
			
			F.line = 61;
			length_602433 = div_380641(HEX2D_380181(HEX2D_380181(HEX2B_380161(HEX2D_380203(ending_602416), start_602415), step_602417), py_int_one_378347), HEX2D_380203(step_602417));
		}
		
		if (negative_378363(length_602433)) {
		F.line = 63;
		length_602433 = py_int_zero_378346;
		}
		
		F.line = 64;
		self_602401.start = start_602415;
		F.line = 65;
		self_602401.ending = ending_602416;
		F.line = 66;
		self_602401.step = step_602417;
		F.line = 67;
		self_602401.length = length_602433;
		result_602232 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_602232;

}

function new_602806() {
	var result_602811 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_603001 = null;
		F.line = 211;
		r_603001 = {m_type: NTI602677, start: null, step: null, length: null, index: null, id: 0, pyType: null};
		F.line = 212;
		result_602811 = r_603001;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_602811;

}

function new_py_range_iter_simple_602801() {
	var result_602803 = null;

	var F={procname:"rangeobject.newPyRangeIterSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_603024 = new_602806();
		F.line = 561;
		obj_603024.pyType = py_range_iter_object_type_602689;
		F.line = 563;
		give_id_157814(obj_603024);
		result_602803 = obj_603024;
	framePtr = F.prev;

	return result_602803;

}

function new_py_range_iter_default_603421(args_602632) {
	var result_603424 = null;

	var F={procname:"rangeobject.newPyRangeIterDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_603424 = new_py_range_iter_simple_602801();
	framePtr = F.prev;

	return result_603424;

}

function iter_py_range_object_magic_603644(self_no_cast_603646) {
	var result_603647 = null;

	var F={procname:"rangeobject.iterPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_603646.m_type, NTI600151))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_603801 = self_no_cast_603646;
		F.line = 79;
		var iter_603802 = new_py_range_iter_simple_602801();
		F.line = 80;
		iter_603802.start = self_603801.start;
		F.line = 81;
		iter_603802.step = self_603801.step;
		F.line = 82;
		iter_603802.length = self_603801.length;
		F.line = 83;
		iter_603802.index = new_py_int_378257(0);
		result_603647 = iter_603802;
	framePtr = F.prev;

	return result_603647;

}

function iter_py_range_iter_object_magic_603817(self_no_cast_603819) {
	var result_603820 = null;

	var F={procname:"rangeobject.iterPyRangeIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_603819.m_type, NTI602677))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeIterObject` "));
		}
		
		F.line = 438;
		var self_604001 = self_no_cast_603819;
		result_603820 = self_604001;
	framePtr = F.prev;

	return result_603820;

}

function iternext_py_range_iter_object_magic_604016(self_no_cast_604018) {
	var result_604019 = null;

	var F={procname:"rangeobject.iternextPyRangeIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_604018.m_type, NTI602677))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeIterObject` "));
		}
		
		F.line = 438;
		var self_604201 = self_no_cast_604018;
			F.line = 56;
			if ((self_604201.index.pyType === null)) {
			F.line = 2895;
			var e_604228 = null;
			F.line = 2896;
			e_604228 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_604228.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_604228.parent = null;
			F.line = 26;
			raiseException(e_604228, "InternalError");
			}
			
			F.line = 27;
			var fun_604402 = self_604201.index.pyType.magicMethods.Field16;
			if ((fun_604402 === null)) {
			F.line = 29;
			var obj_type_str_604411 = self_604201.index.pyType.name;
			F.line = 30;
			var method_str_604413 = makeNimstrLit("lt");
			F.line = 31;
			var msg_604415 = (makeNimstrLit("No ")).concat(method_str_604413,makeNimstrLit(" method for "),obj_type_str_604411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_604417 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_604417.tk = 3;
			F.line = 108;
			excp_604417.thrown = true;
			F.line = 109;
			excp_604417.msg = new_py_string_176075(msg_604415);
			var excp_604420 = excp_604417;
			F.line = 36;
			result_604019 = excp_604420;
			break BeforeRet;
			}
			
			var fun_604602 = fun_604402;
			F.line = 57;
			var res_604604 = fun_604602(self_604201.index, self_604201.length);
		if ((res_604604 == py_true_obj_354074)) {
		F.line = 92;
		result_604019 = HEX2B_380161(self_604201.start, HEX2A_380221(self_604201.index, self_604201.step));
		F.line = 93;
		F.line = 56;
		if ((self_604201.index.pyType === null)) {
		F.line = 2895;
		var e_604838 = null;
		F.line = 2896;
		e_604838 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_604838.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_604838.parent = null;
		F.line = 26;
		raiseException(e_604838, "InternalError");
		}
		
		F.line = 27;
		var fun_605002 = self_604201.index.pyType.magicMethods.Field0;
		if ((fun_605002 === null)) {
		F.line = 29;
		var obj_type_str_605011 = self_604201.index.pyType.name;
		F.line = 30;
		var method_str_605013 = makeNimstrLit("add");
		F.line = 31;
		var msg_605015 = (makeNimstrLit("No ")).concat(method_str_605013,makeNimstrLit(" method for "),obj_type_str_605011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_605017 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_605017.tk = 3;
		F.line = 108;
		excp_605017.thrown = true;
		F.line = 109;
		excp_605017.msg = new_py_string_176075(msg_605015);
		var excp_605020 = excp_605017;
		F.line = 36;
		result_604019 = excp_605020;
		break BeforeRet;
		}
		
		var fun_605202 = fun_605002;
		F.line = 57;
		var res_605204 = fun_605202(self_604201.index, new_py_int_378257(1));
		var new_index_605401 = res_605204;
		F.line = 94;
		self_604201.index = new_index_605401;
		}
		else {
			F.line = 96;
			F.line = 99;
			var excp_605403 = new_py_stop_iter_error_simple_364601();
			F.line = 100;
			excp_605403.tk = 7;
			F.line = 101;
			excp_605403.thrown = true;
			result_604019 = excp_605403;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_604019;

}
var py_range_object_type_600163 = new_py_type_159261(makeNimstrLit("Range"));
py_range_object_type_600163.magicMethods.Field26 = new_py_range_default_600821;
py_range_object_type_600163.magicMethods.Field23 = len_py_range_object_magic_601044;
py_range_object_type_600163.magicMethods.Field25 = repr_py_range_object_magic_601216;
py_range_object_type_600163.magicMethods.Field27 = init_py_range_object_magic_602215;
var py_range_iter_object_type_602689 = new_py_type_159261(makeNimstrLit("RangeIter"));
py_range_iter_object_type_602689.magicMethods.Field26 = new_py_range_iter_default_603421;
py_range_object_type_600163.magicMethods.Field36 = iter_py_range_object_magic_603644;
py_range_iter_object_type_602689.magicMethods.Field36 = iter_py_range_iter_object_magic_603817;
py_range_iter_object_type_602689.magicMethods.Field37 = iternext_py_range_iter_object_magic_604016;

function add_quoted_499609(s_499613, s_499613_Idx, x_499615) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4110;
		if (s_499613[s_499613_Idx] != null) { s_499613[s_499613_Idx] = (s_499613[s_499613_Idx]).concat(HEX24_157579(x_499615)); } else { s_499613[s_499613_Idx] = HEX24_157579(x_499615).slice(); };
	framePtr = F.prev;

	
}

function collection_to_string_499245(x_499249, prefix_499251, separator_499253, suffix_499255) {
	var result_499256 = [null];

	var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2631;
		result_499256[0] = nimCopy(null, prefix_499251, NTI138);
		F.line = 2632;
		var first_element_499257 = true;
		L1: do {
			F.line = 2633;
			var value_499415 = null;
			F.line = 3911;
			var i_499818 = 0;
			F.line = 3912;
			var l_499820 = (x_499249 != null ? x_499249.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_499818 < l_499820)) break L3;
						F.line = 3914;
						value_499415 = x_499249[chckIndx(i_499818, 0, x_499249.length+0-1)-0];
						if (first_element_499257) {
						F.line = 2635;
						first_element_499257 = false;
						}
						else {
							F.line = 2637;
						if (result_499256[0] != null) { result_499256[0] = (result_499256[0]).concat(separator_499253); } else { result_499256[0] = separator_499253.slice(); };
						}
						
						if ((value_499415 === null)) {
						F.line = 2642;
						if (result_499256[0] != null) { result_499256[0] = (result_499256[0]).concat(makeNimstrLit("nil")); } else { result_499256[0] = makeNimstrLit("nil"); };
						}
						else {
							F.line = 2644;
						add_quoted_499609(result_499256, 0, value_499415);
						}
						
						F.line = 3915;
						i_499818 = addInt(i_499818, 1);
						if (!(((x_499249 != null ? x_499249.length : 0) == l_499820))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2648;
		if (result_499256[0] != null) { result_499256[0] = (result_499256[0]).concat(suffix_499255); } else { result_499256[0] = suffix_499255.slice(); };
	framePtr = F.prev;

	return result_499256[0];

}

function HEX24_499237(x_499242) {
	var result_499243 = null;

	var F={procname:"$.$",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2659;
		result_499243 = nimCopy(null, collection_to_string_499245(x_499242, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);
	framePtr = F.prev;

	return result_499243;

}

function HEX5BHEX5D_595449(s_595456, x_595459) {
	var result_595461 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_595607 = subInt((s_595456 != null ? s_595456.length : 0), x_595459.a);
		F.line = 3707;
		var l_595807 = addInt(subInt(subInt((s_595456 != null ? s_595456.length : 0), x_595459.b), a_595607), 1);
		F.line = 3708;
		result_595461 = new Array(chckRange(l_595807, 0, 2147483647)); for (var i=0;i<chckRange(l_595807, 0, 2147483647);++i) {result_595461[i]=null;}		L1: do {
			F.line = 3709;
			var i_595827 = 0;
			F.line = 3617;
			var i_595835 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_595835 < l_595807)) break L3;
						F.line = 3619;
						i_595827 = i_595835;
						F.line = 3709;
						result_595461[chckIndx(i_595827, 0, result_595461.length+0-1)-0] = s_595456[chckIndx(addInt(i_595827, a_595607), 0, s_595456.length+0-1)-0];
						F.line = 3620;
						i_595835 = addInt(i_595835, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_595461;

}

function HEX2EHEX2E_595406(a_595411, b_595413) {
	var result_595421 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_595421.a = a_595411;
		F.line = 399;
		result_595421.b = b_595413;
	framePtr = F.prev;

	return result_595421;

}

function new_py_frame_548057() {
	var result_548059 = null;

	var F={procname:"frameobject.newPyFrame",prev:framePtr,filename:"../Objects/frameobject.nim",line:0};
	framePtr = F;
		F.line = 25;
		result_548059 = new_py_frame_simple_547201();
	framePtr = F.prev;

	return result_548059;

}

function new_seq_573870(len_573874) {
	var result_573876 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_573876 = new Array(len_573874); for (var i=0;i<len_573874;++i) {result_573876[i]=null;}	framePtr = F.prev;

	return result_573876;

}

function new_seq_597852(len_597856) {
	var result_597858 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_597858 = new Array(len_597856); for (var i=0;i<len_597856;++i) {result_597858[i]=null;}	framePtr = F.prev;

	return result_597858;

}

function new_py_cell_546057(content_546059) {
	var result_546060 = null;

	var F={procname:"cellobject.newPyCell",prev:framePtr,filename:"../Objects/cellobject.nim",line:0};
	framePtr = F;
		F.line = 8;
		result_546060 = new_py_cell_simple_545201();
		F.line = 9;
		result_546060.refObj = content_546059;
	framePtr = F.prev;

	return result_546060;

}

function of_py_cell_object_545158(obj_545095) {
	var result_545160 = false;

	var F={procname:"cellobject.ofPyCellObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_545160 = (obj_545095.pyType.kind == 16);
	framePtr = F.prev;

	return result_545160;

}

function new_py_frame_561050(fun_561052, args_561054, back_561055) {
	var result_594421 = null;

	var F={procname:"neval.newPyFrame",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 660;
		F.line = 660;
		var code_594422 = fun_561052.code;
		if (((code_594422.argScopes != null ? code_594422.argScopes.length : 0) < (args_561054 != null ? args_561054.length : 0))) {
		F.line = 663;
		F.line = 663;
		var fmt_res_594440 = mnewString(0);
		F.line = 260;
		if (fmt_res_594440 != null) { fmt_res_594440 = (fmt_res_594440).concat(fun_561052.name.str); } else { fmt_res_594440 = fun_561052.name.str.slice(); };
		F.line = 663;
		if (fmt_res_594440 != null) { fmt_res_594440 = (fmt_res_594440).concat(makeNimstrLit("() takes ")); } else { fmt_res_594440 = makeNimstrLit("() takes "); };
		F.line = 270;
		if (fmt_res_594440 != null) { fmt_res_594440 = (fmt_res_594440).concat(cstrToNimstr(((code_594422.argScopes != null ? code_594422.argScopes.length : 0))+"")); } else { fmt_res_594440 = cstrToNimstr(((code_594422.argScopes != null ? code_594422.argScopes.length : 0))+"").slice(); };
		F.line = 663;
		if (fmt_res_594440 != null) { fmt_res_594440 = (fmt_res_594440).concat(makeNimstrLit(" positional arguments but ")); } else { fmt_res_594440 = makeNimstrLit(" positional arguments but "); };
		F.line = 270;
		if (fmt_res_594440 != null) { fmt_res_594440 = (fmt_res_594440).concat(cstrToNimstr(((args_561054 != null ? args_561054.length : 0))+"")); } else { fmt_res_594440 = cstrToNimstr(((args_561054 != null ? args_561054.length : 0))+"").slice(); };
		F.line = 663;
		if (fmt_res_594440 != null) { fmt_res_594440 = (fmt_res_594440).concat(makeNimstrLit(" were given")); } else { fmt_res_594440 = makeNimstrLit(" were given"); };
		var msg_595008 = nimCopy(null, fmt_res_594440, NTI138);
		F.line = 664;
		F.line = 106;
		var excp_595010 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_595010.tk = 3;
		F.line = 108;
		excp_595010.thrown = true;
		F.line = 109;
		excp_595010.msg = new_py_string_176075(msg_595008);
		result_594421 = excp_595010;
		break BeforeRet;
		}
		else {
		if (((args_561054 != null ? args_561054.length : 0) < (code_594422.argScopes != null ? code_594422.argScopes.length : 0))) {
		F.line = 666;
		var diff_595040 = subInt((code_594422.argScopes != null ? code_594422.argScopes.length : 0), (args_561054 != null ? args_561054.length : 0));
		F.line = 667;
		F.line = 667;
		var fmt_res_595044 = mnewString(0);
		F.line = 260;
		if (fmt_res_595044 != null) { fmt_res_595044 = (fmt_res_595044).concat(fun_561052.name.str); } else { fmt_res_595044 = fun_561052.name.str.slice(); };
		F.line = 667;
		if (fmt_res_595044 != null) { fmt_res_595044 = (fmt_res_595044).concat(makeNimstrLit("() missing ")); } else { fmt_res_595044 = makeNimstrLit("() missing "); };
		F.line = 270;
		if (fmt_res_595044 != null) { fmt_res_595044 = (fmt_res_595044).concat(cstrToNimstr((diff_595040)+"")); } else { fmt_res_595044 = cstrToNimstr((diff_595040)+"").slice(); };
		F.line = 667;
		if (fmt_res_595044 != null) { fmt_res_595044 = (fmt_res_595044).concat(makeNimstrLit(" required positional argument: ")); } else { fmt_res_595044 = makeNimstrLit(" required positional argument: "); };
		F.line = 668;
		var fmt_res_595404 = mnewString(0);
		F.line = 270;
		if (fmt_res_595404 != null) { fmt_res_595404 = (fmt_res_595404).concat(HEX24_499237(HEX5BHEX5D_595449(code_594422.argNames, HEX2EHEX2E_595406(diff_595040, 1)))); } else { fmt_res_595404 = HEX24_499237(HEX5BHEX5D_595449(code_594422.argNames, HEX2EHEX2E_595406(diff_595040, 1))).slice(); };
		F.line = 668;
		if (fmt_res_595404 != null) { fmt_res_595404 = (fmt_res_595404).concat(makeNimstrLit(". ")); } else { fmt_res_595404 = makeNimstrLit(". "); };
		F.line = 270;
		if (fmt_res_595404 != null) { fmt_res_595404 = (fmt_res_595404).concat(cstrToNimstr(((args_561054 != null ? args_561054.length : 0))+"")); } else { fmt_res_595404 = cstrToNimstr(((args_561054 != null ? args_561054.length : 0))+"").slice(); };
		F.line = 668;
		if (fmt_res_595404 != null) { fmt_res_595404 = (fmt_res_595404).concat(makeNimstrLit(" args are given.")); } else { fmt_res_595404 = makeNimstrLit(" args are given."); };
		var msg_597808 = (fmt_res_595044).concat(fmt_res_595404);
		F.line = 669;
		F.line = 106;
		var excp_597810 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_597810.tk = 3;
		F.line = 108;
		excp_597810.thrown = true;
		F.line = 109;
		excp_597810.msg = new_py_string_176075(msg_597808);
		result_594421 = excp_597810;
		break BeforeRet;
		}
		}
		F.line = 670;
		var frame_597812 = new_py_frame_548057();
		F.line = 671;
		frame_597812.back = back_561055;
		F.line = 672;
		frame_597812.code = code_594422;
		F.line = 673;
		frame_597812.globals = fun_561052.globals;
		F.line = 675;
		frame_597812.fastLocals = nimCopy(null, new_seq_573870(chckRange((code_594422.localVars != null ? code_594422.localVars.length : 0), 0, 2147483647)), NTI573875);
		F.line = 676;
		frame_597812.cellVars = nimCopy(null, new_seq_597852(chckRange(addInt((code_594422.cellVars != null ? code_594422.cellVars.length : 0), (code_594422.freeVars != null ? code_594422.freeVars.length : 0)), 0, 2147483647)), NTI597857);
		L1: do {
			F.line = 678;
			var i_597931 = 0;
			F.line = 3616;
			var colontmp__598811 = 0;
			F.line = 678;
			colontmp__598811 = (code_594422.cellVars != null ? code_594422.cellVars.length : 0);
			F.line = 3617;
			var i_598814 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_598814 < colontmp__598811)) break L3;
						F.line = 3619;
						i_597931 = i_598814;
						F.line = 679;
						frame_597812.cellVars[chckIndx(i_597931, 0, frame_597812.cellVars.length+0-1)-0] = new_py_cell_546057(null);
						F.line = 3620;
						i_598814 = addInt(i_598814, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 681;
			var i_597949 = 0;
			F.line = 3616;
			var colontmp__598817 = 0;
			F.line = 681;
			colontmp__598817 = (args_561054 != null ? args_561054.length : 0);
			F.line = 3617;
			var i_598820 = 0;
			L5: do {
				F.line = 3618;
					L6: while (true) {
					if (!(i_598820 < colontmp__598817)) break L6;
						F.line = 3619;
						i_597949 = i_598820;
						F.line = 682;
						var colontmp__610153 = {Field0: 0, Field1: 0};
						F.line = 682;
						var scope_597950 = 0;
						F.line = 682;
						var scope_idx_597951 = 0;
						F.line = 682;
						nimCopy(colontmp__610153, code_594422.argScopes[chckIndx(i_597949, 0, code_594422.argScopes.length+0-1)-0], NTI497148);
						F.line = 682;
						scope_597950 = colontmp__610153["Field0"];
						F.line = 682;
						scope_idx_597951 = colontmp__610153["Field1"];
						F.line = 683;
						switch (scope_597950) {
						case 0:
							F.line = 685;
							frame_597812.fastLocals[chckIndx(scope_idx_597951, 0, frame_597812.fastLocals.length+0-1)-0] = args_561054[chckIndx(i_597949, 0, args_561054.length+0-1)-0];
							break;
						case 3:
							F.line = 2895;
							var e_597959 = null;
							F.line = 2896;
							e_597959 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 31;
							e_597959.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
							F.line = 2891;
							e_597959.parent = null;
							F.line = 687;
							raiseException(e_597959, "InternalError");
							break;
						case 1:
							F.line = 689;
							frame_597812.cellVars[chckIndx(scope_idx_597951, 0, frame_597812.cellVars.length+0-1)-0].refObj = args_561054[chckIndx(i_597949, 0, args_561054.length+0-1)-0];
							break;
						case 2:
							F.line = 2895;
							var e_598008 = null;
							F.line = 2896;
							e_598008 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 691;
							e_598008.message = nimCopy(null, makeNimstrLit("arguments can\'t be free"), NTI138);
							F.line = 2891;
							e_598008.parent = null;
							F.line = 691;
							raiseException(e_598008, "InternalError");
							break;
						}
						F.line = 3620;
						i_598820 = addInt(i_598820, 1);
					}
			} while(false);
		} while(false);
		if ((fun_561052.closure === null)) {
		if (!(((code_594422.freeVars != null ? code_594422.freeVars.length : 0) == 0))) {
		F.line = 694;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(694, 12) `len(code.freeVars) == 0` "));
		}
		
		}
		else {
			if (!(((code_594422.freeVars != null ? code_594422.freeVars.length : 0) == (fun_561052.closure.items != null ? fun_561052.closure.items.length : 0)))) {
			F.line = 696;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(696, 12) `len(code.freeVars) == len(fun.closure.items)` "));
			}
			
			L7: do {
				F.line = 697;
				var idx_598614 = 0;
				F.line = 697;
				var c_598615 = null;
				F.line = 2352;
				var colontmp__598823 = null;
				F.line = 697;
				colontmp__598823 = fun_561052.closure.items;
				F.line = 2354;
				var i_598826 = 0;
				L8: do {
					F.line = 2355;
						L9: while (true) {
						if (!(i_598826 < (colontmp__598823 != null ? colontmp__598823.length : 0))) break L9;
							F.line = 2356;
							idx_598614 = i_598826;
							F.line = 2356;
							c_598615 = colontmp__598823[chckIndx(i_598826, 0, colontmp__598823.length+0-1)-0];
							if (!(of_py_cell_object_545158(c_598615))) {
							F.line = 698;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(698, 14) `ofPyCellObject(c)` "));
							}
							
							F.line = 699;
							frame_597812.cellVars[chckIndx(addInt((code_594422.cellVars != null ? code_594422.cellVars.length : 0), idx_598614), 0, frame_597812.cellVars.length+0-1)-0] = c_598615;
							F.line = 2357;
							i_598826 = addInt(i_598826, 1);
						}
				} while(false);
			} while(false);
		}
		
		result_594421 = frame_597812;
	} while (false);
	framePtr = F.prev;

	return result_594421;

}

function HEX5BHEX5D_562217(s_562223, i_562225) {
	var result_562227 = [null, 0];
	var result_562227_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_562227 = s_562223; result_562227_Idx = chckIndx(subInt((s_562223 != null ? s_562223.length : 0), i_562225), 0, s_562223.length+0-1)-0;
	framePtr = F.prev;

	return [result_562227, result_562227_Idx];

}

function HEX5BHEX5DHEX3D_563204(s_563210, i_563212, x_563214) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3735;
		s_563210[chckIndx(subInt((s_563210 != null ? s_563210.length : 0), i_563212), 0, s_563210.length+0-1)-0] = x_563214;
	framePtr = F.prev;

	
}

function HEX5BHEX5D_533542(t_533549, key_533551) {
	var result_533553 = [null, 0];
	var result_533553_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_533555 = [0];
		F.line = 161;
		var index_533569 = raw_get_532600(t_533549, key_533551, hc_533555, 0);
		if ((0 <= index_533569)) {
		F.line = 162;
		result_533553 = t_533549.data[chckIndx(index_533569, 0, t_533549.data.length+0-1)-0]; result_533553_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_533806 = null;
			F.line = 2896;
			e_533806 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_533806.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_157579(key_533551)), NTI138);
			F.line = 2891;
			e_533806.parent = null;
			F.line = 165;
			raiseException(e_533806, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_533553, result_533553_Idx];

}

function HEX5BHEX5D_533323(dict_533325, key_533326) {
		var Tmp1;

	var result_533327 = null;

	var F={procname:"dictobject.[]",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 53;
		result_533327 = (Tmp1 = HEX5BHEX5D_533542(dict_533325.table, key_533326), Tmp1[0])[Tmp1[1]];
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_533327;

}

function HEX5BHEX5D_572236(s_572242, i_572244) {
	var result_572246 = [null, 0];
	var result_572246_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_572246 = s_572242; result_572246_Idx = chckIndx(subInt((s_572242 != null ? s_572242.length : 0), i_572244), 0, s_572242.length+0-1)-0;
	framePtr = F.prev;

	return [result_572246, result_572246_Idx];

}

function pop_572271(s_572277, s_572277_Idx) {
	var result_572278 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_572286 = subInt((s_572277[s_572277_Idx] != null ? s_572277[s_572277_Idx].length : 0), 1);
		F.line = 2525;
		result_572278 = s_572277[s_572277_Idx][chckIndx(l_572286, 0, s_572277[s_572277_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_572277[s_572277_Idx].length < chckRange(l_572286, 0, 2147483647)) { for (var i=s_572277[s_572277_Idx].length;i<chckRange(l_572286, 0, 2147483647);++i) s_572277[s_572277_Idx].push(null); }
               else { s_572277[s_572277_Idx].length = chckRange(l_572286, 0, 2147483647); };
	framePtr = F.prev;

	return result_572278;

}

function of_py_list_object_515271(obj_515200) {
	var result_515273 = false;

	var F={procname:"listobject.ofPyListObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_515273 = (obj_515200.pyType.kind == 9);
	framePtr = F.prev;

	return result_515273;

}

function HEX5BHEX5DHEX3D_533842(dict_533844, key_533845, value_533846) {
	var F={procname:"dictobject.[]=",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		F.line = 57;
		HEX5BHEX5DHEX3D_533993(dict_533844.table, key_533845, value_533846);
	framePtr = F.prev;

	
}

function new_py_list_516273(items_516276) {
	var result_516277 = null;

	var F={procname:"listobject.newPyList",prev:framePtr,filename:"../Objects/listobject.nim",line:0};
	framePtr = F;
		F.line = 19;
		result_516277 = new_py_list_516257();
		F.line = 20;
		result_516277.items = nimCopy(null, items_516276, NTI516275);
	framePtr = F.prev;

	return result_516277;

}

function is_exception_type_496313(obj_496315) {
	var result_496316 = false;

	var F={procname:"exceptionsImpl.isExceptionType",prev:framePtr,filename:"../Objects/exceptionsImpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 66;
		if (!((obj_496315.pyType.kind == 7))) {
		F.line = 67;
		result_496316 = false;
		break BeforeRet;
		}
		
		F.line = 68;
		var obj_type_496326 = obj_496315;
		result_496316 = (obj_type_496326.kind == 3);
	} while (false);
	framePtr = F.prev;

	return result_496316;

}

function match_excp_496272(target_496274, current_496275) {
	var result_496276 = null;

	var F={procname:"exceptionsImpl.matchExcp",prev:framePtr,filename:"../Objects/exceptionsImpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 57;
		F.line = 57;
		var tp_496277 = current_496275.pyType;
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!!((tp_496277 == null))) break L2;
					if ((tp_496277 == target_496274)) {
					F.line = 60;
					result_496276 = py_true_obj_354074;
					break BeforeRet;
					}
					
					F.line = 61;
					tp_496277 = tp_496277.base;
				}
		} while(false);
		result_496276 = py_false_obj_354075;
	} while (false);
	framePtr = F.prev;

	return result_496276;

}

function py_import_561059(name_561061) {
	var result_594180 = null;

	var F={procname:"neval.pyImport",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
		F.line = 624;
		F.line = 106;
		var excp_594182 = new_py_runtime_error_simple_371601();
		F.line = 107;
		excp_594182.tk = 14;
		F.line = 108;
		excp_594182.thrown = true;
		F.line = 109;
		excp_594182.msg = new_py_string_176075(makeNimstrLit("Can\'t import in js mode"));
		result_594180 = excp_594182;
	framePtr = F.prev;

	return result_594180;

}

function has_key_532588(t_532594, key_532596) {
	var result_532597 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_532598 = [0];
		F.line = 264;
		result_532597 = (0 <= raw_get_532600(t_532594, key_532596, hc_532598, 0));
	framePtr = F.prev;

	return result_532597;

}

function has_key_532437(dict_532439, key_532440) {
	var result_532441 = false;

	var F={procname:"dictobject.hasKey",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 50;
		result_532441 = has_key_532588(dict_532439.table, key_532440);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_532441;

}

function is_class_159414(obj_159416) {
	var result_159417 = false;

	var F={procname:"pyobjectBase.isClass",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 212;
		result_159417 = (obj_159416.pyType.kind == 7);
	framePtr = F.prev;

	return result_159417;

}

function of_py_function_object_550137(obj_550068) {
	var result_550139 = false;

	var F={procname:"funcobject.ofPyFunctionObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_550139 = (obj_550068.pyType.kind == 13);
	framePtr = F.prev;

	return result_550139;

}

function new_py_func_552057(name_552059, code_552060, globals_552061, closure_552062) {
	var result_552063 = null;

	var F={procname:"funcobject.newPyFunc",prev:framePtr,filename:"../Objects/funcobject.nim",line:0};
	framePtr = F;
		F.line = 23;
		result_552063 = new_py_function_simple_550201();
		F.line = 24;
		result_552063.name = name_552059;
		F.line = 25;
		result_552063.code = code_552060;
		F.line = 26;
		result_552063.globals = globals_552061;
		if (!((closure_552062 === null))) {
		if (!(of_py_tuple_object_472082(closure_552062))) {
		F.line = 28;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/funcobject.nim(28, 12) `ofPyTupleObject(closure)` "));
		}
		
		}
		
		F.line = 29;
		result_552063.closure = closure_552062;
	framePtr = F.prev;

	return result_552063;

}

function new_py_slice_471057(start_471059, stop_471060, step_471061) {
			var Tmp1;

	var result_471062 = null;

	var F={procname:"sliceobject.newPySlice",prev:framePtr,filename:"../Objects/sliceobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 15;
		F.line = 15;
		var slice_471063 = new_py_slice_simple_470201();
		if ((of_py_int_object_377315(start_471059) || of_py_none_object_355076(start_471059))) {
		F.line = 28;
		slice_471063.start = start_471059;
		}
		else {
			F.line = 21;
			var index_fun_471079 = start_471059.pyType.magicMethods.Field11;
			if ((index_fun_471079 === null)) {
			F.line = 23;
			var msg_471087 = makeNimstrLit("slice indices must be integers or None or have an __index__ method");
			F.line = 24;
			F.line = 106;
			var excp_471089 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_471089.tk = 3;
			F.line = 108;
			excp_471089.thrown = true;
			F.line = 109;
			excp_471089.msg = new_py_string_176075(msg_471087);
			result_471062 = excp_471089;
			break BeforeRet;
			}
			else {
				F.line = 26;
				slice_471063.start = index_fun_471079(start_471059);
			}
			
		}
		
		if ((of_py_int_object_377315(stop_471060) || of_py_none_object_355076(stop_471060))) {
		F.line = 29;
		slice_471063.stop = stop_471060;
		}
		else {
			F.line = 21;
			var index_fun_471096 = stop_471060.pyType.magicMethods.Field11;
			if ((index_fun_471096 === null)) {
			F.line = 23;
			var msg_471104 = makeNimstrLit("slice indices must be integers or None or have an __index__ method");
			F.line = 24;
			F.line = 106;
			var excp_471106 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_471106.tk = 3;
			F.line = 108;
			excp_471106.thrown = true;
			F.line = 109;
			excp_471106.msg = new_py_string_176075(msg_471104);
			result_471062 = excp_471106;
			break BeforeRet;
			}
			else {
				F.line = 26;
				slice_471063.stop = index_fun_471096(stop_471060);
			}
			
		}
		
		if ((of_py_int_object_377315(step_471061) || of_py_none_object_355076(step_471061))) {
		F.line = 30;
		slice_471063.step = step_471061;
		}
		else {
			F.line = 21;
			var index_fun_471113 = step_471061.pyType.magicMethods.Field11;
			if ((index_fun_471113 === null)) {
			F.line = 23;
			var msg_471121 = makeNimstrLit("slice indices must be integers or None or have an __index__ method");
			F.line = 24;
			F.line = 106;
			var excp_471123 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_471123.tk = 3;
			F.line = 108;
			excp_471123.thrown = true;
			F.line = 109;
			excp_471123.msg = new_py_string_176075(msg_471121);
			result_471062 = excp_471123;
			break BeforeRet;
			}
			else {
				F.line = 26;
				slice_471063.step = index_fun_471113(step_471061);
			}
			
		}
		
			if (!of_py_int_object_377315(slice_471063.step)) Tmp1 = false; else {				Tmp1 = (to_int_382674(slice_471063.step) == 0);			}		if (Tmp1) {
		F.line = 33;
		F.line = 106;
		var excp_471126 = new_py_value_error_simple_362601();
		F.line = 107;
		excp_471126.tk = 5;
		F.line = 108;
		excp_471126.thrown = true;
		F.line = 109;
		excp_471126.msg = new_py_string_176075(makeNimstrLit("slice step cannot be zero"));
		result_471062 = excp_471126;
		break BeforeRet;
		}
		
		result_471062 = slice_471063;
	} while (false);
	framePtr = F.prev;

	return result_471062;

}

function eval_frame_561056(f_561058) {
											var Tmp9;
											var Tmp10;
												var Tmp11;
											var Tmp12;
												var Tmp13;
											var Tmp14;
												var Tmp15;
											var Tmp16;
												var Tmp17;
											var Tmp18;
												var Tmp19;
											var Tmp20;
												var Tmp21;
												var Tmp22;
											var Tmp23;
												var Tmp24;
											var Tmp25;
												var Tmp26;
											var Tmp27;
												var Tmp28;
											var Tmp29;
												var Tmp30;
											var Tmp31;
												var Tmp32;
											var Tmp33;
												var Tmp35;
												var Tmp36;
												var Tmp37;
											var Tmp38;
												var Tmp39;
													var Tmp40;
													var Tmp41;
													var Tmp42;
															var Tmp46;
															var Tmp50;
													var Tmp52;
																	var Tmp56;
																var Tmp60;
											var Tmp61;
												var Tmp62;
												var Tmp63;
																var Tmp73;
											var Tmp74;
												var Tmp75;
												var Tmp76;
													var Tmp77;
												var Tmp78;
													var Tmp79;
												var Tmp80;
													var Tmp81;
												var Tmp82;
													var Tmp83;
												var Tmp84;
													var Tmp85;
												var Tmp86;
													var Tmp87;
												var Tmp88;
													var Tmp89;
												var Tmp90;
													var Tmp91;
													var Tmp92;
														var Tmp93;
														var Tmp94;
												var Tmp95;
												var Tmp96;
											var Tmp97;
													var Tmp98;
											var Tmp99;
													var Tmp100;
													var Tmp101;
													var Tmp102;
											var Tmp103;
													var Tmp104;
														var Tmp105;
													var Tmp106;
												var Tmp110;
												var Tmp111;
											var Tmp112;
												var Tmp113;
											var Tmp114;

						function set_trace_back_561418(excp_561420) {
							var F={procname:"evalFrame.setTraceBack",prev:framePtr,filename:"neval.nim",line:0};
							framePtr = F;
								F.line = 101;
								var line_no_561421 = f_561058.code.lineNos[chckIndx(last_i_561403, 0, f_561058.code.lineNos.length+0-1)-0];
								F.line = 103;
								if (excp_561420.traceBacks != null) { excp_561420.traceBacks.push({Field0: f_561058.code.fileName, Field1: f_561058.code.codeName, Field2: line_no_561421, Field3: -1}); } else { excp_561420.traceBacks = [{Field0: f_561058.code.fileName, Field1: f_561058.code.codeName, Field2: line_no_561421, Field3: -1}]; };
							framePtr = F.prev;

							
						}
									var Tmp118;
											var Tmp119;
											var Tmp120;

	var result_561217 = null;

	var F={procname:"neval.evalFrame",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 83;
		var last_i_561403 = -1;
		F.line = 86;
		var op_code_561404 = 0;
		F.line = 87;
		var op_arg_561405 = 0;
		F.line = 149;
		var constants_561643 = f_561058.code, constants_561643_Idx = "constants";
		F.line = 150;
		var names_561645 = f_561058.code, names_561645_Idx = "names";
		F.line = 151;
		var fast_locals_561647 = f_561058, fast_locals_561647_Idx = "fastLocals";
		F.line = 152;
		var cell_vars_561649 = f_561058, cell_vars_561649_Idx = "cellVars";
		F.line = 182;
		try {
		L2: do {
			F.line = 184;
				L3: while (true) {
				if (!true) break L3;
					F.line = 185;
					var excp_obj_561827 = null;
					L4: do {
						F.line = 189;
++excHandler;
						try {
						L6: do {
							F.line = 190;
								L7: while (true) {
								if (!true) break L7;
									L8: do {
										F.line = 192;
										var colontmp__610154 = {Field0: 0, Field1: 0};
										F.line = 192;
										var op_code_562005 = 0;
										F.line = 192;
										var op_arg_562006 = 0;
										F.line = 192;
										F.line = 89;
										last_i_561403 = addInt(last_i_561403, 1);
										nimCopy(colontmp__610154, f_561058.code.code[chckIndx(last_i_561403, 0, f_561058.code.code.length+0-1)-0], NTI561408);
										F.line = 192;
										op_code_562005 = colontmp__610154["Field0"];
										F.line = 192;
										op_arg_562006 = colontmp__610154["Field1"];
										F.line = 195;
										switch (op_code_562005) {
										case 1:
											F.line = 197;
											pop_528821(val_stack_561095, 0);
											break;
										case 4:
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push((Tmp9 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp9[0])[Tmp9[1]]); } else { val_stack_561095[0] = [(Tmp9 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp9[0])[Tmp9[1]]]; };
											break;
										case 7:
											F.line = 203;
											break L8;
											break;
										case 8:
											F.line = 43;
											var top_562433 = (Tmp10 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp10[0])[Tmp10[1]];
											F.line = 44;
											F.line = 45;
											if ((top_562433.pyType === null)) {
											F.line = 2895;
											var e_562460 = null;
											F.line = 2896;
											e_562460 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_562460.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_562460.parent = null;
											F.line = 26;
											raiseException(e_562460, "InternalError");
											}
											
											F.line = 27;
											var fun_562602 = top_562433.pyType.magicMethods.Field9;
											if ((fun_562602 === null)) {
											F.line = 29;
											var obj_type_str_562611 = top_562433.pyType.name;
											F.line = 30;
											var method_str_562613 = makeNimstrLit("positive");
											F.line = 31;
											var msg_562615 = (makeNimstrLit("No ")).concat(method_str_562613,makeNimstrLit(" method for "),obj_type_str_562611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_562617 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_562617.tk = 3;
											F.line = 108;
											excp_562617.thrown = true;
											F.line = 109;
											excp_562617.msg = new_py_string_176075(msg_562615);
											var excp_562620 = excp_562617;
											F.line = 34;
											excp_obj_561827 = excp_562620;
											F.line = 34;
											break L4;
											}
											
											var fun_562802 = fun_562602;
											F.line = 46;
											var res_562804 = fun_562802(top_562433);
												if (of_py_exception_object_358259(res_562804)) {
												Tmp11 = res_562804.thrown;
												}
												else {
												Tmp11 = false;
												}
												
											if (Tmp11) {
											F.line = 49;
											excp_obj_561827 = res_562804;
											F.line = 49;
											break L4;
											}
											
											var res_563002 = res_562804;
											F.line = 206;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_563002);
											break;
										case 9:
											F.line = 43;
											var top_563256 = (Tmp12 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp12[0])[Tmp12[1]];
											F.line = 44;
											F.line = 45;
											if ((top_563256.pyType === null)) {
											F.line = 2895;
											var e_563283 = null;
											F.line = 2896;
											e_563283 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_563283.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_563283.parent = null;
											F.line = 26;
											raiseException(e_563283, "InternalError");
											}
											
											F.line = 27;
											var fun_563402 = top_563256.pyType.magicMethods.Field8;
											if ((fun_563402 === null)) {
											F.line = 29;
											var obj_type_str_563411 = top_563256.pyType.name;
											F.line = 30;
											var method_str_563413 = makeNimstrLit("negative");
											F.line = 31;
											var msg_563415 = (makeNimstrLit("No ")).concat(method_str_563413,makeNimstrLit(" method for "),obj_type_str_563411,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_563417 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_563417.tk = 3;
											F.line = 108;
											excp_563417.thrown = true;
											F.line = 109;
											excp_563417.msg = new_py_string_176075(msg_563415);
											var excp_563420 = excp_563417;
											F.line = 34;
											excp_obj_561827 = excp_563420;
											F.line = 34;
											break L4;
											}
											
											var fun_563602 = fun_563402;
											F.line = 46;
											var res_563604 = fun_563602(top_563256);
												if (of_py_exception_object_358259(res_563604)) {
												Tmp13 = res_563604.thrown;
												}
												else {
												Tmp13 = false;
												}
												
											if (Tmp13) {
											F.line = 49;
											excp_obj_561827 = res_563604;
											F.line = 49;
											break L4;
											}
											
											var res_563802 = res_563604;
											F.line = 209;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_563802);
											break;
										case 10:
											F.line = 43;
											var top_564036 = (Tmp14 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp14[0])[Tmp14[1]];
											F.line = 44;
											F.line = 45;
											if ((top_564036.pyType === null)) {
											F.line = 2895;
											var e_564063 = null;
											F.line = 2896;
											e_564063 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_564063.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_564063.parent = null;
											F.line = 26;
											raiseException(e_564063, "InternalError");
											}
											
											F.line = 27;
											var fun_564202 = top_564036.pyType.magicMethods.Field7;
											if ((fun_564202 === null)) {
											F.line = 29;
											var obj_type_str_564211 = top_564036.pyType.name;
											F.line = 30;
											var method_str_564213 = makeNimstrLit("Not");
											F.line = 31;
											var msg_564215 = (makeNimstrLit("No ")).concat(method_str_564213,makeNimstrLit(" method for "),obj_type_str_564211,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_564217 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_564217.tk = 3;
											F.line = 108;
											excp_564217.thrown = true;
											F.line = 109;
											excp_564217.msg = new_py_string_176075(msg_564215);
											var excp_564220 = excp_564217;
											F.line = 34;
											excp_obj_561827 = excp_564220;
											F.line = 34;
											break L4;
											}
											
											var fun_564402 = fun_564202;
											F.line = 46;
											var res_564404 = fun_564402(top_564036);
												if (of_py_exception_object_358259(res_564404)) {
												Tmp15 = res_564404.thrown;
												}
												else {
												Tmp15 = false;
												}
												
											if (Tmp15) {
											F.line = 49;
											excp_obj_561827 = res_564404;
											F.line = 49;
											break L4;
											}
											
											var res_564602 = res_564404;
											F.line = 212;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_564602);
											break;
										case 14:
											F.line = 48;
											var op2_564832 = pop_528821(val_stack_561095, 0);
											F.line = 49;
											var op1_564849 = (Tmp16 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp16[0])[Tmp16[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_564849.pyType === null)) {
											F.line = 2895;
											var e_564876 = null;
											F.line = 2896;
											e_564876 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_564876.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_564876.parent = null;
											F.line = 26;
											raiseException(e_564876, "InternalError");
											}
											
											F.line = 27;
											var fun_565002 = op1_564849.pyType.magicMethods.Field6;
											if ((fun_565002 === null)) {
											F.line = 29;
											var obj_type_str_565011 = op1_564849.pyType.name;
											F.line = 30;
											var method_str_565013 = makeNimstrLit("pow");
											F.line = 31;
											var msg_565015 = (makeNimstrLit("No ")).concat(method_str_565013,makeNimstrLit(" method for "),obj_type_str_565011,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_565017 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_565017.tk = 3;
											F.line = 108;
											excp_565017.thrown = true;
											F.line = 109;
											excp_565017.msg = new_py_string_176075(msg_565015);
											var excp_565020 = excp_565017;
											F.line = 34;
											excp_obj_561827 = excp_565020;
											F.line = 34;
											break L4;
											}
											
											var fun_565202 = fun_565002;
											F.line = 57;
											var res_565204 = fun_565202(op1_564849, op2_564832);
												if (of_py_exception_object_358259(res_565204)) {
												Tmp17 = res_565204.thrown;
												}
												else {
												Tmp17 = false;
												}
												
											if (Tmp17) {
											F.line = 60;
											excp_obj_561827 = res_565204;
											F.line = 60;
											break L4;
											}
											
											var res_565402 = res_565204;
											F.line = 215;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_565402);
											break;
										case 15:
											F.line = 48;
											var op2_565632 = pop_528821(val_stack_561095, 0);
											F.line = 49;
											var op1_565649 = (Tmp18 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp18[0])[Tmp18[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_565649.pyType === null)) {
											F.line = 2895;
											var e_565676 = null;
											F.line = 2896;
											e_565676 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_565676.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_565676.parent = null;
											F.line = 26;
											raiseException(e_565676, "InternalError");
											}
											
											F.line = 27;
											var fun_565802 = op1_565649.pyType.magicMethods.Field2;
											if ((fun_565802 === null)) {
											F.line = 29;
											var obj_type_str_565811 = op1_565649.pyType.name;
											F.line = 30;
											var method_str_565813 = makeNimstrLit("mul");
											F.line = 31;
											var msg_565815 = (makeNimstrLit("No ")).concat(method_str_565813,makeNimstrLit(" method for "),obj_type_str_565811,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_565817 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_565817.tk = 3;
											F.line = 108;
											excp_565817.thrown = true;
											F.line = 109;
											excp_565817.msg = new_py_string_176075(msg_565815);
											var excp_565820 = excp_565817;
											F.line = 34;
											excp_obj_561827 = excp_565820;
											F.line = 34;
											break L4;
											}
											
											var fun_566002 = fun_565802;
											F.line = 57;
											var res_566004 = fun_566002(op1_565649, op2_565632);
												if (of_py_exception_object_358259(res_566004)) {
												Tmp19 = res_566004.thrown;
												}
												else {
												Tmp19 = false;
												}
												
											if (Tmp19) {
											F.line = 60;
											excp_obj_561827 = res_566004;
											F.line = 60;
											break L4;
											}
											
											var res_566202 = res_566004;
											F.line = 218;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_566202);
											break;
										case 16:
											F.line = 48;
											var op2_566432 = pop_528821(val_stack_561095, 0);
											F.line = 49;
											var op1_566449 = (Tmp20 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp20[0])[Tmp20[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_566449.pyType === null)) {
											F.line = 2895;
											var e_566476 = null;
											F.line = 2896;
											e_566476 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_566476.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_566476.parent = null;
											F.line = 26;
											raiseException(e_566476, "InternalError");
											}
											
											F.line = 27;
											var fun_566602 = op1_566449.pyType.magicMethods.Field5;
											if ((fun_566602 === null)) {
											F.line = 29;
											var obj_type_str_566611 = op1_566449.pyType.name;
											F.line = 30;
											var method_str_566613 = makeNimstrLit("Mod");
											F.line = 31;
											var msg_566615 = (makeNimstrLit("No ")).concat(method_str_566613,makeNimstrLit(" method for "),obj_type_str_566611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_566617 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_566617.tk = 3;
											F.line = 108;
											excp_566617.thrown = true;
											F.line = 109;
											excp_566617.msg = new_py_string_176075(msg_566615);
											var excp_566620 = excp_566617;
											F.line = 34;
											excp_obj_561827 = excp_566620;
											F.line = 34;
											break L4;
											}
											
											var fun_566802 = fun_566602;
											F.line = 57;
											var res_566804 = fun_566802(op1_566449, op2_566432);
												if (of_py_exception_object_358259(res_566804)) {
												Tmp21 = res_566804.thrown;
												}
												else {
												Tmp21 = false;
												}
												
											if (Tmp21) {
											F.line = 60;
											excp_obj_561827 = res_566804;
											F.line = 60;
											break L4;
											}
											
											var res_567002 = res_566804;
											F.line = 221;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_567002);
											break;
										case 33:
											F.line = 224;
											var idx_567225 = pop_528821(val_stack_561095, 0);
											F.line = 225;
											var obj_567235 = pop_528821(val_stack_561095, 0);
											F.line = 226;
											var value_567245 = pop_528821(val_stack_561095, 0);
											F.line = 227;
											F.line = 67;
											if ((obj_567235.pyType === null)) {
											F.line = 2895;
											var e_567272 = null;
											F.line = 2896;
											e_567272 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_567272.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_567272.parent = null;
											F.line = 26;
											raiseException(e_567272, "InternalError");
											}
											
											F.line = 27;
											var fun_567402 = obj_567235.pyType.magicMethods.Field33;
											if ((fun_567402 === null)) {
											F.line = 29;
											var obj_type_str_567411 = obj_567235.pyType.name;
											F.line = 30;
											var method_str_567413 = makeNimstrLit("setitem");
											F.line = 31;
											var msg_567415 = (makeNimstrLit("No ")).concat(method_str_567413,makeNimstrLit(" method for "),obj_type_str_567411,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_567417 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_567417.tk = 3;
											F.line = 108;
											excp_567417.thrown = true;
											F.line = 109;
											excp_567417.msg = new_py_string_176075(msg_567415);
											var excp_567420 = excp_567417;
											F.line = 34;
											excp_obj_561827 = excp_567420;
											F.line = 34;
											break L4;
											}
											
											var fun_567602 = fun_567402;
											F.line = 68;
											var res_567604 = fun_567602(obj_567235, idx_567225, value_567245);
												if (of_py_exception_object_358259(res_567604)) {
												Tmp22 = res_567604.thrown;
												}
												else {
												Tmp22 = false;
												}
												
											if (Tmp22) {
											F.line = 71;
											excp_obj_561827 = res_567604;
											F.line = 71;
											break L4;
											}
											
											res_567604;
											break;
										case 17:
											F.line = 48;
											var op2_567818 = pop_528821(val_stack_561095, 0);
											F.line = 49;
											var op1_567835 = (Tmp23 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp23[0])[Tmp23[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_567835.pyType === null)) {
											F.line = 2895;
											var e_567862 = null;
											F.line = 2896;
											e_567862 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_567862.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_567862.parent = null;
											F.line = 26;
											raiseException(e_567862, "InternalError");
											}
											
											F.line = 27;
											var fun_568002 = op1_567835.pyType.magicMethods.Field0;
											if ((fun_568002 === null)) {
											F.line = 29;
											var obj_type_str_568011 = op1_567835.pyType.name;
											F.line = 30;
											var method_str_568013 = makeNimstrLit("add");
											F.line = 31;
											var msg_568015 = (makeNimstrLit("No ")).concat(method_str_568013,makeNimstrLit(" method for "),obj_type_str_568011,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_568017 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_568017.tk = 3;
											F.line = 108;
											excp_568017.thrown = true;
											F.line = 109;
											excp_568017.msg = new_py_string_176075(msg_568015);
											var excp_568020 = excp_568017;
											F.line = 34;
											excp_obj_561827 = excp_568020;
											F.line = 34;
											break L4;
											}
											
											var fun_568202 = fun_568002;
											F.line = 57;
											var res_568204 = fun_568202(op1_567835, op2_567818);
												if (of_py_exception_object_358259(res_568204)) {
												Tmp24 = res_568204.thrown;
												}
												else {
												Tmp24 = false;
												}
												
											if (Tmp24) {
											F.line = 60;
											excp_obj_561827 = res_568204;
											F.line = 60;
											break L4;
											}
											
											var res_568402 = res_568204;
											F.line = 230;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_568402);
											break;
										case 18:
											F.line = 48;
											var op2_568632 = pop_528821(val_stack_561095, 0);
											F.line = 49;
											var op1_568649 = (Tmp25 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp25[0])[Tmp25[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_568649.pyType === null)) {
											F.line = 2895;
											var e_568676 = null;
											F.line = 2896;
											e_568676 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_568676.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_568676.parent = null;
											F.line = 26;
											raiseException(e_568676, "InternalError");
											}
											
											F.line = 27;
											var fun_568802 = op1_568649.pyType.magicMethods.Field1;
											if ((fun_568802 === null)) {
											F.line = 29;
											var obj_type_str_568811 = op1_568649.pyType.name;
											F.line = 30;
											var method_str_568813 = makeNimstrLit("sub");
											F.line = 31;
											var msg_568815 = (makeNimstrLit("No ")).concat(method_str_568813,makeNimstrLit(" method for "),obj_type_str_568811,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_568817 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_568817.tk = 3;
											F.line = 108;
											excp_568817.thrown = true;
											F.line = 109;
											excp_568817.msg = new_py_string_176075(msg_568815);
											var excp_568820 = excp_568817;
											F.line = 34;
											excp_obj_561827 = excp_568820;
											F.line = 34;
											break L4;
											}
											
											var fun_569002 = fun_568802;
											F.line = 57;
											var res_569004 = fun_569002(op1_568649, op2_568632);
												if (of_py_exception_object_358259(res_569004)) {
												Tmp26 = res_569004.thrown;
												}
												else {
												Tmp26 = false;
												}
												
											if (Tmp26) {
											F.line = 60;
											excp_obj_561827 = res_569004;
											F.line = 60;
											break L4;
											}
											
											var res_569202 = res_569004;
											F.line = 233;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_569202);
											break;
										case 19:
											F.line = 48;
											var op2_569432 = pop_528821(val_stack_561095, 0);
											F.line = 49;
											var op1_569449 = (Tmp27 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp27[0])[Tmp27[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_569449.pyType === null)) {
											F.line = 2895;
											var e_569476 = null;
											F.line = 2896;
											e_569476 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_569476.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_569476.parent = null;
											F.line = 26;
											raiseException(e_569476, "InternalError");
											}
											
											F.line = 27;
											var fun_569602 = op1_569449.pyType.magicMethods.Field32;
											if ((fun_569602 === null)) {
											F.line = 29;
											var obj_type_str_569611 = op1_569449.pyType.name;
											F.line = 30;
											var method_str_569613 = makeNimstrLit("getitem");
											F.line = 31;
											var msg_569615 = (makeNimstrLit("No ")).concat(method_str_569613,makeNimstrLit(" method for "),obj_type_str_569611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_569617 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_569617.tk = 3;
											F.line = 108;
											excp_569617.thrown = true;
											F.line = 109;
											excp_569617.msg = new_py_string_176075(msg_569615);
											var excp_569620 = excp_569617;
											F.line = 34;
											excp_obj_561827 = excp_569620;
											F.line = 34;
											break L4;
											}
											
											var fun_569802 = fun_569602;
											F.line = 57;
											var res_569804 = fun_569802(op1_569449, op2_569432);
												if (of_py_exception_object_358259(res_569804)) {
												Tmp28 = res_569804.thrown;
												}
												else {
												Tmp28 = false;
												}
												
											if (Tmp28) {
											F.line = 60;
											excp_obj_561827 = res_569804;
											F.line = 60;
											break L4;
											}
											
											var res_570002 = res_569804;
											F.line = 236;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_570002);
											break;
										case 20:
											F.line = 48;
											var op2_570232 = pop_528821(val_stack_561095, 0);
											F.line = 49;
											var op1_570249 = (Tmp29 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp29[0])[Tmp29[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_570249.pyType === null)) {
											F.line = 2895;
											var e_570276 = null;
											F.line = 2896;
											e_570276 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_570276.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_570276.parent = null;
											F.line = 26;
											raiseException(e_570276, "InternalError");
											}
											
											F.line = 27;
											var fun_570402 = op1_570249.pyType.magicMethods.Field4;
											if ((fun_570402 === null)) {
											F.line = 29;
											var obj_type_str_570411 = op1_570249.pyType.name;
											F.line = 30;
											var method_str_570413 = makeNimstrLit("floorDiv");
											F.line = 31;
											var msg_570415 = (makeNimstrLit("No ")).concat(method_str_570413,makeNimstrLit(" method for "),obj_type_str_570411,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_570417 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_570417.tk = 3;
											F.line = 108;
											excp_570417.thrown = true;
											F.line = 109;
											excp_570417.msg = new_py_string_176075(msg_570415);
											var excp_570420 = excp_570417;
											F.line = 34;
											excp_obj_561827 = excp_570420;
											F.line = 34;
											break L4;
											}
											
											var fun_570602 = fun_570402;
											F.line = 57;
											var res_570604 = fun_570602(op1_570249, op2_570232);
												if (of_py_exception_object_358259(res_570604)) {
												Tmp30 = res_570604.thrown;
												}
												else {
												Tmp30 = false;
												}
												
											if (Tmp30) {
											F.line = 60;
											excp_obj_561827 = res_570604;
											F.line = 60;
											break L4;
											}
											
											var res_570802 = res_570604;
											F.line = 239;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_570802);
											break;
										case 21:
											F.line = 48;
											var op2_571032 = pop_528821(val_stack_561095, 0);
											F.line = 49;
											var op1_571049 = (Tmp31 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp31[0])[Tmp31[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_571049.pyType === null)) {
											F.line = 2895;
											var e_571076 = null;
											F.line = 2896;
											e_571076 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_571076.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_571076.parent = null;
											F.line = 26;
											raiseException(e_571076, "InternalError");
											}
											
											F.line = 27;
											var fun_571202 = op1_571049.pyType.magicMethods.Field3;
											if ((fun_571202 === null)) {
											F.line = 29;
											var obj_type_str_571211 = op1_571049.pyType.name;
											F.line = 30;
											var method_str_571213 = makeNimstrLit("trueDiv");
											F.line = 31;
											var msg_571215 = (makeNimstrLit("No ")).concat(method_str_571213,makeNimstrLit(" method for "),obj_type_str_571211,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_571217 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_571217.tk = 3;
											F.line = 108;
											excp_571217.thrown = true;
											F.line = 109;
											excp_571217.msg = new_py_string_176075(msg_571215);
											var excp_571220 = excp_571217;
											F.line = 34;
											excp_obj_561827 = excp_571220;
											F.line = 34;
											break L4;
											}
											
											var fun_571402 = fun_571202;
											F.line = 57;
											var res_571404 = fun_571402(op1_571049, op2_571032);
												if (of_py_exception_object_358259(res_571404)) {
												Tmp32 = res_571404.thrown;
												}
												else {
												Tmp32 = false;
												}
												
											if (Tmp32) {
											F.line = 60;
											excp_obj_561827 = res_571404;
											F.line = 60;
											break L4;
											}
											
											var res_571602 = res_571404;
											F.line = 242;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_571602);
											break;
										case 41:
											F.line = 245;
											var top_571831 = (Tmp33 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp33[0])[Tmp33[1]];
											F.line = 246;
											var colontmp__610155 = {Field0: null, Field1: null};
											F.line = 246;
											var iter_obj_571885 = null;
											F.line = 246;
											var __571886 = null;
											F.line = 246;
											F.line = 171;
											var ret_tuple_571848 = {Field0: null, Field1: null};
											L34: do {
												F.line = 173;
												var iter_func_571852 = top_571831.pyType.magicMethods.Field36;
												if ((iter_func_571852 === null)) {
												F.line = 175;
												var msg_571860 = (top_571831.pyType.name).concat(makeNimstrLit(" object is not iterable"));
												F.line = 176;
												F.line = 106;
												var excp_571863 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_571863.tk = 3;
												F.line = 108;
												excp_571863.thrown = true;
												F.line = 109;
												excp_571863.msg = new_py_string_176075(msg_571860);
												nimCopy(ret_tuple_571848, {Field0: excp_571863, Field1: null}, NTI571846);
												F.line = 177;
												break L34;
												}
												
												F.line = 178;
												var iter_obj_571866 = iter_func_571852(top_571831);
												F.line = 179;
												var iternext_func_571868 = iter_obj_571866.pyType.magicMethods.Field37;
												if ((iternext_func_571868 === null)) {
												F.line = 181;
												F.line = 181;
												var fmt_res_571877 = mnewString(0);
												F.line = 181;
												if (fmt_res_571877 != null) { fmt_res_571877 = (fmt_res_571877).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_571877 = makeNimstrLit("iter() returned non-iterator of type "); };
												var msg_571879 = (fmt_res_571877).concat(iter_obj_571866.pyType.name);
												F.line = 182;
												F.line = 106;
												var excp_571882 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_571882.tk = 3;
												F.line = 108;
												excp_571882.thrown = true;
												F.line = 109;
												excp_571882.msg = new_py_string_176075(msg_571879);
												nimCopy(ret_tuple_571848, {Field0: excp_571882, Field1: null}, NTI571846);
												F.line = 183;
												break L34;
												}
												
												F.line = 184;
												nimCopy(ret_tuple_571848, {Field0: iter_obj_571866, Field1: iternext_func_571868}, NTI571846);
											} while(false);
											nimCopy(colontmp__610155, ret_tuple_571848, NTI375953);
											F.line = 246;
											iter_obj_571885 = colontmp__610155["Field0"];
											F.line = 246;
											__571886 = colontmp__610155["Field1"];
												if (of_py_exception_object_358259(iter_obj_571885)) {
												Tmp35 = iter_obj_571885.thrown;
												}
												else {
												Tmp35 = false;
												}
												
											if (Tmp35) {
											F.line = 248;
											excp_obj_561827 = iter_obj_571885;
											F.line = 248;
											break L4;
											}
											
											F.line = 249;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, iter_obj_571885);
											break;
										case 43:
											F.line = 252;
											var top_572025 = pop_528821(val_stack_561095, 0);
											if (!((id_157596(top_572025) == id_157596(py_none_356044)))) {
											F.line = 255;
											var repr_obj_572026 = top_572025.pyType.magicMethods.Field25(top_572025);
												if (of_py_exception_object_358259(repr_obj_572026)) {
												Tmp36 = repr_obj_572026.thrown;
												}
												else {
												Tmp36 = false;
												}
												
											if (Tmp36) {
											F.line = 257;
											excp_obj_561827 = repr_obj_572026;
											F.line = 257;
											break L4;
											}
											
											F.line = 260;
											var print_function_572027 = HEX5BHEX5D_533323(bltin_dict_544014, new_py_str_176092(makeNimstrLit("print")));
											F.line = 261;
											var ret_obj_572040 = call_py_nim_func_object_magic_558044(print_function_572027, [repr_obj_572026]);
												if (of_py_exception_object_358259(ret_obj_572040)) {
												Tmp37 = ret_obj_572040.thrown;
												}
												else {
												Tmp37 = false;
												}
												
											if (Tmp37) {
											F.line = 263;
											excp_obj_561827 = ret_obj_572040;
											F.line = 263;
											break L4;
											}
											
											}
											
											break;
										case 44:
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(HEX5BHEX5D_533323(bltin_dict_544014, new_py_str_176092(makeNimstrLit("__build_class__")))); } else { val_stack_561095[0] = [HEX5BHEX5D_533323(bltin_dict_544014, new_py_str_176092(makeNimstrLit("__build_class__")))]; };
											break;
										case 54:
											F.line = 269;
											result_561217 = pop_528821(val_stack_561095, 0);
											break BeforeRet;
											break;
										case 58:
											if (((val_stack_561095[0] != null ? val_stack_561095[0].length : 0) == 0)) {
											F.line = 274;
											F.line = 173;
											var ret_572269 = (Tmp38 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp38[0])[Tmp38[1]].sPtr;
											F.line = 174;
											pop_572271(block_stack_561097, 0);
											ret_572269;
											}
											else {
												F.line = 276;
												var top_572326 = (Tmp39 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp39[0])[Tmp39[1]];
												if (((val_stack_561095[0] != null ? val_stack_561095[0].length : 0) == 0)) {
													F.line = 140;
													var ret_572345 = (Tmp40 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp40[0])[Tmp40[1]].sPtr;
													F.line = 140;
													pop_572271(block_stack_561097, 0);
												if (!((ret_572345 == 0))) {
												F.line = 140;
												failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(140, 14) `\x0A  let ret572345 = blockStack[BackwardsIndex(1)].sPtr\x0A  discard pop(blockStack)\x0A  ret572345 == 0` "));
												}
												
												}
												else {
													F.line = 142;
													F.line = 173;
													var ret_572345 = (Tmp41 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp41[0])[Tmp41[1]].sPtr;
													F.line = 174;
													pop_572271(block_stack_561097, 0);
												if (val_stack_561095[0].length < chckRange(ret_572345, 0, 2147483647)) { for (var i=val_stack_561095[0].length;i<chckRange(ret_572345, 0, 2147483647);++i) val_stack_561095[0].push(null); }
               else { val_stack_561095[0].length = chckRange(ret_572345, 0, 2147483647); };
												}
												
													if (of_py_exception_object_358259(top_572326)) {
													Tmp42 = top_572326.thrown;
													}
													else {
													Tmp42 = false;
													}
													
												if (Tmp42) {
												F.line = 280;
												excp_obj_561827 = top_572326;
												F.line = 280;
												break L4;
												}
												
											}
											
											break;
										case 62:
											F.line = 2895;
											var e_572417 = null;
											F.line = 2896;
											e_572417 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 283;
											e_572417.message = nimCopy(null, makeNimstrLit("locals() scope not implemented"), NTI138);
											F.line = 2891;
											e_572417.parent = null;
											F.line = 283;
											raiseException(e_572417, "InternalError");
											break;
										case 64:
											F.line = 291;
											var s_572619 = pop_528821(val_stack_561095, 0);
											if (of_py_tuple_object_472082(s_572619)) {
											F.line = 293;
											var t_572620 = s_572619;
											if (!((op_arg_562006 == (t_572620.items != null ? t_572620.items.length : 0)))) {
											F.line = 287;
											var got_572639 = cstrToNimstr(((t_572620.items != null ? t_572620.items.length : 0))+"");
											F.line = 288;
											F.line = 288;
											var fmt_res_572643 = mnewString(0);
											F.line = 288;
											if (fmt_res_572643 != null) { fmt_res_572643 = (fmt_res_572643).concat(makeNimstrLit("not enough values to unpack (expected ")); } else { fmt_res_572643 = makeNimstrLit("not enough values to unpack (expected "); };
											F.line = 270;
											if (fmt_res_572643 != null) { fmt_res_572643 = (fmt_res_572643).concat(cstrToNimstr((op_arg_562006)+"")); } else { fmt_res_572643 = cstrToNimstr((op_arg_562006)+"").slice(); };
											F.line = 288;
											if (fmt_res_572643 != null) { fmt_res_572643 = (fmt_res_572643).concat(makeNimstrLit(", got ")); } else { fmt_res_572643 = makeNimstrLit(", got "); };
											F.line = 260;
											if (fmt_res_572643 != null) { fmt_res_572643 = (fmt_res_572643).concat(got_572639); } else { fmt_res_572643 = got_572639.slice(); };
											F.line = 288;
											if (fmt_res_572643 != null) { fmt_res_572643 = (fmt_res_572643).concat(makeNimstrLit(")")); } else { fmt_res_572643 = makeNimstrLit(")"); };
											var msg_573002 = nimCopy(null, fmt_res_572643, NTI138);
											F.line = 289;
											F.line = 106;
											var excp_573004 = new_py_value_error_simple_362601();
											F.line = 107;
											excp_573004.tk = 5;
											F.line = 108;
											excp_573004.thrown = true;
											F.line = 109;
											excp_573004.msg = new_py_string_176075(msg_573002);
											var excp_573007 = excp_573004;
											F.line = 290;
											excp_obj_561827 = excp_573007;
											F.line = 295;
											break L4;
											}
											
											L43: do {
												F.line = 296;
												var i_573019 = 0;
												F.line = 2107;
												var res_594053 = 1;
												L44: do {
													F.line = 2108;
														L45: while (true) {
														if (!(res_594053 <= op_arg_562006)) break L45;
															F.line = 2109;
															i_573019 = res_594053;
															F.line = 129;
															if (val_stack_561095[0] != null) { val_stack_561095[0].push((Tmp46 = HEX5BHEX5D_562217(t_572620.items, i_573019), Tmp46[0])[Tmp46[1]]); } else { val_stack_561095[0] = [(Tmp46 = HEX5BHEX5D_562217(t_572620.items, i_573019), Tmp46[0])[Tmp46[1]]]; };
															F.line = 2110;
															res_594053 = addInt(res_594053, 1);
														}
												} while(false);
											} while(false);
											}
											else {
											if (of_py_list_object_515271(s_572619)) {
											F.line = 299;
											var l_573211 = s_572619;
											if (!((op_arg_562006 == (l_573211.items != null ? l_573211.items.length : 0)))) {
											F.line = 287;
											var got_573230 = cstrToNimstr(((l_573211.items != null ? l_573211.items.length : 0))+"");
											F.line = 288;
											F.line = 288;
											var fmt_res_573234 = mnewString(0);
											F.line = 288;
											if (fmt_res_573234 != null) { fmt_res_573234 = (fmt_res_573234).concat(makeNimstrLit("not enough values to unpack (expected ")); } else { fmt_res_573234 = makeNimstrLit("not enough values to unpack (expected "); };
											F.line = 270;
											if (fmt_res_573234 != null) { fmt_res_573234 = (fmt_res_573234).concat(cstrToNimstr((op_arg_562006)+"")); } else { fmt_res_573234 = cstrToNimstr((op_arg_562006)+"").slice(); };
											F.line = 288;
											if (fmt_res_573234 != null) { fmt_res_573234 = (fmt_res_573234).concat(makeNimstrLit(", got ")); } else { fmt_res_573234 = makeNimstrLit(", got "); };
											F.line = 260;
											if (fmt_res_573234 != null) { fmt_res_573234 = (fmt_res_573234).concat(got_573230); } else { fmt_res_573234 = got_573230.slice(); };
											F.line = 288;
											if (fmt_res_573234 != null) { fmt_res_573234 = (fmt_res_573234).concat(makeNimstrLit(")")); } else { fmt_res_573234 = makeNimstrLit(")"); };
											var msg_573602 = nimCopy(null, fmt_res_573234, NTI138);
											F.line = 289;
											F.line = 106;
											var excp_573604 = new_py_value_error_simple_362601();
											F.line = 107;
											excp_573604.tk = 5;
											F.line = 108;
											excp_573604.thrown = true;
											F.line = 109;
											excp_573604.msg = new_py_string_176075(msg_573602);
											var excp_573607 = excp_573604;
											F.line = 290;
											excp_obj_561827 = excp_573607;
											F.line = 301;
											break L4;
											}
											
											L47: do {
												F.line = 302;
												var i_573619 = 0;
												F.line = 2107;
												var res_594061 = 1;
												L48: do {
													F.line = 2108;
														L49: while (true) {
														if (!(res_594061 <= op_arg_562006)) break L49;
															F.line = 2109;
															i_573619 = res_594061;
															F.line = 129;
															if (val_stack_561095[0] != null) { val_stack_561095[0].push((Tmp50 = HEX5BHEX5D_562217(l_573211.items, i_573619), Tmp50[0])[Tmp50[1]]); } else { val_stack_561095[0] = [(Tmp50 = HEX5BHEX5D_562217(l_573211.items, i_573619), Tmp50[0])[Tmp50[1]]]; };
															F.line = 2110;
															res_594061 = addInt(res_594061, 1);
														}
												} while(false);
											} while(false);
											}
											else {
												F.line = 305;
												var colontmp__610156 = {Field0: null, Field1: null};
												F.line = 305;
												var iterable_573864 = null;
												F.line = 305;
												var next_method_573865 = null;
												F.line = 305;
												F.line = 171;
												var ret_tuple_573827 = {Field0: null, Field1: null};
												L51: do {
													F.line = 173;
													var iter_func_573831 = s_572619.pyType.magicMethods.Field36;
													if ((iter_func_573831 === null)) {
													F.line = 175;
													var msg_573839 = (s_572619.pyType.name).concat(makeNimstrLit(" object is not iterable"));
													F.line = 176;
													F.line = 106;
													var excp_573842 = new_py_type_error_simple_360601();
													F.line = 107;
													excp_573842.tk = 3;
													F.line = 108;
													excp_573842.thrown = true;
													F.line = 109;
													excp_573842.msg = new_py_string_176075(msg_573839);
													nimCopy(ret_tuple_573827, {Field0: excp_573842, Field1: null}, NTI573825);
													F.line = 177;
													break L51;
													}
													
													F.line = 178;
													var iter_obj_573845 = iter_func_573831(s_572619);
													F.line = 179;
													var iternext_func_573847 = iter_obj_573845.pyType.magicMethods.Field37;
													if ((iternext_func_573847 === null)) {
													F.line = 181;
													F.line = 181;
													var fmt_res_573856 = mnewString(0);
													F.line = 181;
													if (fmt_res_573856 != null) { fmt_res_573856 = (fmt_res_573856).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_573856 = makeNimstrLit("iter() returned non-iterator of type "); };
													var msg_573858 = (fmt_res_573856).concat(iter_obj_573845.pyType.name);
													F.line = 182;
													F.line = 106;
													var excp_573861 = new_py_type_error_simple_360601();
													F.line = 107;
													excp_573861.tk = 3;
													F.line = 108;
													excp_573861.thrown = true;
													F.line = 109;
													excp_573861.msg = new_py_string_176075(msg_573858);
													nimCopy(ret_tuple_573827, {Field0: excp_573861, Field1: null}, NTI573825);
													F.line = 183;
													break L51;
													}
													
													F.line = 184;
													nimCopy(ret_tuple_573827, {Field0: iter_obj_573845, Field1: iternext_func_573847}, NTI573825);
												} while(false);
												nimCopy(colontmp__610156, ret_tuple_573827, NTI375953);
												F.line = 305;
												iterable_573864 = colontmp__610156["Field0"];
												F.line = 305;
												next_method_573865 = colontmp__610156["Field1"];
													if (of_py_exception_object_358259(iterable_573864)) {
													Tmp52 = iterable_573864.thrown;
													}
													else {
													Tmp52 = false;
													}
													
												if (Tmp52) {
												F.line = 307;
												excp_obj_561827 = iterable_573864;
												F.line = 307;
												break L4;
												}
												
												F.line = 310;
												var items_573918 = new_seq_573870(chckRange(op_arg_562006, 0, 2147483647));
												L53: do {
													F.line = 311;
													var i_573929 = 0;
													F.line = 3617;
													var i_594070 = 0;
													L54: do {
														F.line = 3618;
															L55: while (true) {
															if (!(i_594070 < op_arg_562006)) break L55;
																F.line = 3619;
																i_573929 = i_594070;
																F.line = 312;
																var ret_obj_573930 = next_method_573865(iterable_573864);
																if (is_stop_iter_375871(ret_obj_573930)) {
																F.line = 287;
																var got_573935 = cstrToNimstr((i_573929)+"");
																F.line = 288;
																F.line = 288;
																var fmt_res_573939 = mnewString(0);
																F.line = 288;
																if (fmt_res_573939 != null) { fmt_res_573939 = (fmt_res_573939).concat(makeNimstrLit("not enough values to unpack (expected ")); } else { fmt_res_573939 = makeNimstrLit("not enough values to unpack (expected "); };
																F.line = 270;
																if (fmt_res_573939 != null) { fmt_res_573939 = (fmt_res_573939).concat(cstrToNimstr((op_arg_562006)+"")); } else { fmt_res_573939 = cstrToNimstr((op_arg_562006)+"").slice(); };
																F.line = 288;
																if (fmt_res_573939 != null) { fmt_res_573939 = (fmt_res_573939).concat(makeNimstrLit(", got ")); } else { fmt_res_573939 = makeNimstrLit(", got "); };
																F.line = 260;
																if (fmt_res_573939 != null) { fmt_res_573939 = (fmt_res_573939).concat(got_573935); } else { fmt_res_573939 = got_573935.slice(); };
																F.line = 288;
																if (fmt_res_573939 != null) { fmt_res_573939 = (fmt_res_573939).concat(makeNimstrLit(")")); } else { fmt_res_573939 = makeNimstrLit(")"); };
																var msg_574202 = nimCopy(null, fmt_res_573939, NTI138);
																F.line = 289;
																F.line = 106;
																var excp_574204 = new_py_value_error_simple_362601();
																F.line = 107;
																excp_574204.tk = 5;
																F.line = 108;
																excp_574204.thrown = true;
																F.line = 109;
																excp_574204.msg = new_py_string_176075(msg_574202);
																var excp_574207 = excp_574204;
																F.line = 290;
																excp_obj_561827 = excp_574207;
																F.line = 314;
																break L4;
																}
																else {
																	if (of_py_exception_object_358259(ret_obj_573930)) {
																	Tmp56 = ret_obj_573930.thrown;
																	}
																	else {
																	Tmp56 = false;
																	}
																	
																if (Tmp56) {
																F.line = 316;
																excp_obj_561827 = ret_obj_573930;
																F.line = 316;
																break L4;
																}
																else {
																	F.line = 318;
																	items_573918[chckIndx(i_573929, 0, items_573918.length+0-1)-0] = ret_obj_573930;
																}
																}
																F.line = 3620;
																i_594070 = addInt(i_594070, 1);
															}
													} while(false);
												} while(false);
												L57: do {
													F.line = 319;
													var i_574219 = 0;
													F.line = 2107;
													var res_594076 = 1;
													L58: do {
														F.line = 2108;
															L59: while (true) {
															if (!(res_594076 <= op_arg_562006)) break L59;
																F.line = 2109;
																i_574219 = res_594076;
																F.line = 129;
																if (val_stack_561095[0] != null) { val_stack_561095[0].push((Tmp60 = HEX5BHEX5D_562217(items_573918, i_574219), Tmp60[0])[Tmp60[1]]); } else { val_stack_561095[0] = [(Tmp60 = HEX5BHEX5D_562217(items_573918, i_574219), Tmp60[0])[Tmp60[1]]]; };
																F.line = 2110;
																res_594076 = addInt(res_594076, 1);
															}
													} while(false);
												} while(false);
											}
											}
											break;
										case 65:
											F.line = 323;
											var top_574427 = (Tmp61 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp61[0])[Tmp61[1]];
											F.line = 324;
											var next_func_574428 = top_574427.pyType.magicMethods.Field37;
											if ((next_func_574428 === null)) {
											F.line = 326;
											rawEcho(top_574427.pyType.name);
											F.line = 2895;
											var e_574443 = null;
											F.line = 2896;
											e_574443 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 31;
											e_574443.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
											F.line = 2891;
											e_574443.parent = null;
											F.line = 327;
											raiseException(e_574443, "InternalError");
											}
											
											F.line = 328;
											var ret_obj_574601 = next_func_574428(top_574427);
											if (is_stop_iter_375871(ret_obj_574601)) {
											F.line = 330;
											pop_528821(val_stack_561095, 0);
											F.line = 98;
											last_i_561403 = subInt(op_arg_562006, 1);
											}
											else {
												if (of_py_exception_object_358259(ret_obj_574601)) {
												Tmp62 = ret_obj_574601.thrown;
												}
												else {
												Tmp62 = false;
												}
												
											if (Tmp62) {
											F.line = 333;
											excp_obj_561827 = ret_obj_574601;
											F.line = 333;
											break L4;
											}
											else {
												F.line = 129;
												if (val_stack_561095[0] != null) { val_stack_561095[0].push(ret_obj_574601); } else { val_stack_561095[0] = [ret_obj_574601]; };
											}
											}
											break;
										case 67:
											F.line = 338;
											var name_574812 = names_561645[names_561645_Idx][chckIndx(op_arg_562006, 0, names_561645[names_561645_Idx].length+0-1)-0];
											F.line = 339;
											var owner_574822 = pop_528821(val_stack_561095, 0);
											F.line = 340;
											var v_574832 = pop_528821(val_stack_561095, 0);
											F.line = 341;
											F.line = 67;
											if ((owner_574822.pyType === null)) {
											F.line = 2895;
											var e_574859 = null;
											F.line = 2896;
											e_574859 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_574859.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_574859.parent = null;
											F.line = 26;
											raiseException(e_574859, "InternalError");
											}
											
											F.line = 27;
											var fun_575002 = owner_574822.pyType.magicMethods.Field29;
											if ((fun_575002 === null)) {
											F.line = 29;
											var obj_type_str_575011 = owner_574822.pyType.name;
											F.line = 30;
											var method_str_575013 = makeNimstrLit("setattr");
											F.line = 31;
											var msg_575015 = (makeNimstrLit("No ")).concat(method_str_575013,makeNimstrLit(" method for "),obj_type_str_575011,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_575017 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_575017.tk = 3;
											F.line = 108;
											excp_575017.thrown = true;
											F.line = 109;
											excp_575017.msg = new_py_string_176075(msg_575015);
											var excp_575020 = excp_575017;
											F.line = 34;
											excp_obj_561827 = excp_575020;
											F.line = 34;
											break L4;
											}
											
											var fun_575202 = fun_575002;
											F.line = 68;
											var res_575204 = fun_575202(owner_574822, name_574812, v_574832);
												if (of_py_exception_object_358259(res_575204)) {
												Tmp63 = res_575204.thrown;
												}
												else {
												Tmp63 = false;
												}
												
											if (Tmp63) {
											F.line = 71;
											excp_obj_561827 = res_575204;
											F.line = 71;
											break L4;
											}
											
											res_575204;
											break;
										case 69:
											F.line = 344;
											var name_575402 = names_561645[names_561645_Idx][chckIndx(op_arg_562006, 0, names_561645[names_561645_Idx].length+0-1)-0];
											F.line = 345;
											HEX5BHEX5DHEX3D_533842(f_561058.globals, name_575402, pop_528821(val_stack_561095, 0));
											break;
										case 71:
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(constants_561643[constants_561643_Idx][chckIndx(op_arg_562006, 0, constants_561643[constants_561643_Idx].length+0-1)-0]); } else { val_stack_561095[0] = [constants_561643[constants_561643_Idx][chckIndx(op_arg_562006, 0, constants_561643[constants_561643_Idx].length+0-1)-0]]; };
											break;
										case 72:
											F.line = 2895;
											var e_575617 = null;
											F.line = 2896;
											e_575617 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 351;
											e_575617.message = nimCopy(null, makeNimstrLit("locals() scope not implemented"), NTI138);
											F.line = 2891;
											e_575617.parent = null;
											F.line = 351;
											raiseException(e_575617, "InternalError");
											break;
										case 73:
											F.line = 354;
											var args_575830 = new_seq_573870(chckRange(op_arg_562006, 0, 2147483647));
											L64: do {
												F.line = 355;
												var i_575842 = 0;
												F.line = 2107;
												var res_594087 = 1;
												L65: do {
													F.line = 2108;
														L66: while (true) {
														if (!(res_594087 <= op_arg_562006)) break L66;
															F.line = 2109;
															i_575842 = res_594087;
															F.line = 356;
															HEX5BHEX5DHEX3D_563204(args_575830, i_575842, pop_528821(val_stack_561095, 0));
															F.line = 2110;
															res_594087 = addInt(res_594087, 1);
														}
												} while(false);
											} while(false);
											F.line = 357;
											var new_tuple_575866 = new_py_tuple_473057(args_575830);
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(new_tuple_575866); } else { val_stack_561095[0] = [new_tuple_575866]; };
											break;
										case 74:
											F.line = 361;
											var args_576040 = new_seq_573870(chckRange(op_arg_562006, 0, 2147483647));
											L67: do {
												F.line = 362;
												var i_576052 = 0;
												F.line = 2107;
												var res_594095 = 1;
												L68: do {
													F.line = 2108;
														L69: while (true) {
														if (!(res_594095 <= op_arg_562006)) break L69;
															F.line = 2109;
															i_576052 = res_594095;
															F.line = 363;
															HEX5BHEX5DHEX3D_563204(args_576040, i_576052, pop_528821(val_stack_561095, 0));
															F.line = 2110;
															res_594095 = addInt(res_594095, 1);
														}
												} while(false);
											} while(false);
											F.line = 365;
											var new_list_576076 = new_py_list_516273(args_576040);
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(new_list_576076); } else { val_stack_561095[0] = [new_list_576076]; };
											break;
										case 76:
											F.line = 369;
											var d_576212 = new_py_dict_532257();
											L70: do {
												F.line = 370;
												var i_576223 = 0;
												F.line = 3617;
												var i_594103 = 0;
												L71: do {
													F.line = 3618;
														L72: while (true) {
														if (!(i_594103 < op_arg_562006)) break L72;
															F.line = 3619;
															i_576223 = i_594103;
															F.line = 371;
															var key_576233 = pop_528821(val_stack_561095, 0);
															F.line = 372;
															var value_576243 = pop_528821(val_stack_561095, 0);
															F.line = 373;
															var ret_obj_576244 = setitem_pydict_object_magic_541581(d_576212, key_576233, value_576243);
																if (of_py_exception_object_358259(ret_obj_576244)) {
																Tmp73 = ret_obj_576244.thrown;
																}
																else {
																Tmp73 = false;
																}
																
															if (Tmp73) {
															F.line = 375;
															excp_obj_561827 = ret_obj_576244;
															F.line = 375;
															break L4;
															}
															
															F.line = 3620;
															i_594103 = addInt(i_594103, 1);
														}
												} while(false);
											} while(false);
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(d_576212); } else { val_stack_561095[0] = [d_576212]; };
											break;
										case 77:
											F.line = 379;
											var name_576412 = names_561645[names_561645_Idx][chckIndx(op_arg_562006, 0, names_561645[names_561645_Idx].length+0-1)-0];
											F.line = 380;
											var obj_576428 = (Tmp74 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp74[0])[Tmp74[1]];
											F.line = 381;
											F.line = 56;
											if ((obj_576428.pyType === null)) {
											F.line = 2895;
											var e_576455 = null;
											F.line = 2896;
											e_576455 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_576455.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_576455.parent = null;
											F.line = 26;
											raiseException(e_576455, "InternalError");
											}
											
											F.line = 27;
											var fun_576602 = obj_576428.pyType.magicMethods.Field28;
											if ((fun_576602 === null)) {
											F.line = 29;
											var obj_type_str_576611 = obj_576428.pyType.name;
											F.line = 30;
											var method_str_576613 = makeNimstrLit("getattr");
											F.line = 31;
											var msg_576615 = (makeNimstrLit("No ")).concat(method_str_576613,makeNimstrLit(" method for "),obj_type_str_576611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 106;
											var excp_576617 = new_py_type_error_simple_360601();
											F.line = 107;
											excp_576617.tk = 3;
											F.line = 108;
											excp_576617.thrown = true;
											F.line = 109;
											excp_576617.msg = new_py_string_176075(msg_576615);
											var excp_576620 = excp_576617;
											F.line = 34;
											excp_obj_561827 = excp_576620;
											F.line = 34;
											break L4;
											}
											
											var fun_576802 = fun_576602;
											F.line = 57;
											var res_576804 = fun_576802(obj_576428, name_576412);
												if (of_py_exception_object_358259(res_576804)) {
												Tmp75 = res_576804.thrown;
												}
												else {
												Tmp75 = false;
												}
												
											if (Tmp75) {
											F.line = 60;
											excp_obj_561827 = res_576804;
											F.line = 60;
											break L4;
											}
											
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_576804);
											break;
										case 78:
											F.line = 384;
											var cmp_op_577216 = chckRange(op_arg_562006, 0, 10);
											F.line = 385;
											switch (cmp_op_577216) {
											case 0:
												F.line = 48;
												var op2_577234 = pop_528821(val_stack_561095, 0);
												F.line = 49;
												var op1_577251 = (Tmp76 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp76[0])[Tmp76[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_577251.pyType === null)) {
												F.line = 2895;
												var e_577278 = null;
												F.line = 2896;
												e_577278 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_577278.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_577278.parent = null;
												F.line = 26;
												raiseException(e_577278, "InternalError");
												}
												
												F.line = 27;
												var fun_577402 = op1_577251.pyType.magicMethods.Field16;
												if ((fun_577402 === null)) {
												F.line = 29;
												var obj_type_str_577411 = op1_577251.pyType.name;
												F.line = 30;
												var method_str_577413 = makeNimstrLit("lt");
												F.line = 31;
												var msg_577415 = (makeNimstrLit("No ")).concat(method_str_577413,makeNimstrLit(" method for "),obj_type_str_577411,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_577417 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_577417.tk = 3;
												F.line = 108;
												excp_577417.thrown = true;
												F.line = 109;
												excp_577417.msg = new_py_string_176075(msg_577415);
												var excp_577420 = excp_577417;
												F.line = 34;
												excp_obj_561827 = excp_577420;
												F.line = 34;
												break L4;
												}
												
												var fun_577602 = fun_577402;
												F.line = 57;
												var res_577604 = fun_577602(op1_577251, op2_577234);
													if (of_py_exception_object_358259(res_577604)) {
													Tmp77 = res_577604.thrown;
													}
													else {
													Tmp77 = false;
													}
													
												if (Tmp77) {
												F.line = 60;
												excp_obj_561827 = res_577604;
												F.line = 60;
												break L4;
												}
												
												var res_577802 = res_577604;
												F.line = 387;
												HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_577802);
												break;
											case 1:
												F.line = 48;
												var op2_578032 = pop_528821(val_stack_561095, 0);
												F.line = 49;
												var op1_578049 = (Tmp78 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp78[0])[Tmp78[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_578049.pyType === null)) {
												F.line = 2895;
												var e_578076 = null;
												F.line = 2896;
												e_578076 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_578076.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_578076.parent = null;
												F.line = 26;
												raiseException(e_578076, "InternalError");
												}
												
												F.line = 27;
												var fun_578202 = op1_578049.pyType.magicMethods.Field17;
												if ((fun_578202 === null)) {
												F.line = 29;
												var obj_type_str_578211 = op1_578049.pyType.name;
												F.line = 30;
												var method_str_578213 = makeNimstrLit("le");
												F.line = 31;
												var msg_578215 = (makeNimstrLit("No ")).concat(method_str_578213,makeNimstrLit(" method for "),obj_type_str_578211,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_578217 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_578217.tk = 3;
												F.line = 108;
												excp_578217.thrown = true;
												F.line = 109;
												excp_578217.msg = new_py_string_176075(msg_578215);
												var excp_578220 = excp_578217;
												F.line = 34;
												excp_obj_561827 = excp_578220;
												F.line = 34;
												break L4;
												}
												
												var fun_578402 = fun_578202;
												F.line = 57;
												var res_578404 = fun_578402(op1_578049, op2_578032);
													if (of_py_exception_object_358259(res_578404)) {
													Tmp79 = res_578404.thrown;
													}
													else {
													Tmp79 = false;
													}
													
												if (Tmp79) {
												F.line = 60;
												excp_obj_561827 = res_578404;
												F.line = 60;
												break L4;
												}
												
												var res_578602 = res_578404;
												F.line = 389;
												HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_578602);
												break;
											case 2:
												F.line = 48;
												var op2_578832 = pop_528821(val_stack_561095, 0);
												F.line = 49;
												var op1_578849 = (Tmp80 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp80[0])[Tmp80[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_578849.pyType === null)) {
												F.line = 2895;
												var e_578876 = null;
												F.line = 2896;
												e_578876 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_578876.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_578876.parent = null;
												F.line = 26;
												raiseException(e_578876, "InternalError");
												}
												
												F.line = 27;
												var fun_579002 = op1_578849.pyType.magicMethods.Field18;
												if ((fun_579002 === null)) {
												F.line = 29;
												var obj_type_str_579011 = op1_578849.pyType.name;
												F.line = 30;
												var method_str_579013 = makeNimstrLit("eq");
												F.line = 31;
												var msg_579015 = (makeNimstrLit("No ")).concat(method_str_579013,makeNimstrLit(" method for "),obj_type_str_579011,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_579017 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_579017.tk = 3;
												F.line = 108;
												excp_579017.thrown = true;
												F.line = 109;
												excp_579017.msg = new_py_string_176075(msg_579015);
												var excp_579020 = excp_579017;
												F.line = 34;
												excp_obj_561827 = excp_579020;
												F.line = 34;
												break L4;
												}
												
												var fun_579202 = fun_579002;
												F.line = 57;
												var res_579204 = fun_579202(op1_578849, op2_578832);
													if (of_py_exception_object_358259(res_579204)) {
													Tmp81 = res_579204.thrown;
													}
													else {
													Tmp81 = false;
													}
													
												if (Tmp81) {
												F.line = 60;
												excp_obj_561827 = res_579204;
												F.line = 60;
												break L4;
												}
												
												var res_579402 = res_579204;
												F.line = 391;
												HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_579402);
												break;
											case 3:
												F.line = 48;
												var op2_579632 = pop_528821(val_stack_561095, 0);
												F.line = 49;
												var op1_579649 = (Tmp82 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp82[0])[Tmp82[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_579649.pyType === null)) {
												F.line = 2895;
												var e_579676 = null;
												F.line = 2896;
												e_579676 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_579676.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_579676.parent = null;
												F.line = 26;
												raiseException(e_579676, "InternalError");
												}
												
												F.line = 27;
												var fun_579802 = op1_579649.pyType.magicMethods.Field19;
												if ((fun_579802 === null)) {
												F.line = 29;
												var obj_type_str_579811 = op1_579649.pyType.name;
												F.line = 30;
												var method_str_579813 = makeNimstrLit("ne");
												F.line = 31;
												var msg_579815 = (makeNimstrLit("No ")).concat(method_str_579813,makeNimstrLit(" method for "),obj_type_str_579811,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_579817 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_579817.tk = 3;
												F.line = 108;
												excp_579817.thrown = true;
												F.line = 109;
												excp_579817.msg = new_py_string_176075(msg_579815);
												var excp_579820 = excp_579817;
												F.line = 34;
												excp_obj_561827 = excp_579820;
												F.line = 34;
												break L4;
												}
												
												var fun_580002 = fun_579802;
												F.line = 57;
												var res_580004 = fun_580002(op1_579649, op2_579632);
													if (of_py_exception_object_358259(res_580004)) {
													Tmp83 = res_580004.thrown;
													}
													else {
													Tmp83 = false;
													}
													
												if (Tmp83) {
												F.line = 60;
												excp_obj_561827 = res_580004;
												F.line = 60;
												break L4;
												}
												
												var res_580202 = res_580004;
												F.line = 393;
												HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_580202);
												break;
											case 4:
												F.line = 48;
												var op2_580432 = pop_528821(val_stack_561095, 0);
												F.line = 49;
												var op1_580449 = (Tmp84 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp84[0])[Tmp84[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_580449.pyType === null)) {
												F.line = 2895;
												var e_580476 = null;
												F.line = 2896;
												e_580476 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_580476.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_580476.parent = null;
												F.line = 26;
												raiseException(e_580476, "InternalError");
												}
												
												F.line = 27;
												var fun_580602 = op1_580449.pyType.magicMethods.Field20;
												if ((fun_580602 === null)) {
												F.line = 29;
												var obj_type_str_580611 = op1_580449.pyType.name;
												F.line = 30;
												var method_str_580613 = makeNimstrLit("gt");
												F.line = 31;
												var msg_580615 = (makeNimstrLit("No ")).concat(method_str_580613,makeNimstrLit(" method for "),obj_type_str_580611,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_580617 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_580617.tk = 3;
												F.line = 108;
												excp_580617.thrown = true;
												F.line = 109;
												excp_580617.msg = new_py_string_176075(msg_580615);
												var excp_580620 = excp_580617;
												F.line = 34;
												excp_obj_561827 = excp_580620;
												F.line = 34;
												break L4;
												}
												
												var fun_580802 = fun_580602;
												F.line = 57;
												var res_580804 = fun_580802(op1_580449, op2_580432);
													if (of_py_exception_object_358259(res_580804)) {
													Tmp85 = res_580804.thrown;
													}
													else {
													Tmp85 = false;
													}
													
												if (Tmp85) {
												F.line = 60;
												excp_obj_561827 = res_580804;
												F.line = 60;
												break L4;
												}
												
												var res_581002 = res_580804;
												F.line = 395;
												HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_581002);
												break;
											case 5:
												F.line = 48;
												var op2_581232 = pop_528821(val_stack_561095, 0);
												F.line = 49;
												var op1_581249 = (Tmp86 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp86[0])[Tmp86[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_581249.pyType === null)) {
												F.line = 2895;
												var e_581276 = null;
												F.line = 2896;
												e_581276 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_581276.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_581276.parent = null;
												F.line = 26;
												raiseException(e_581276, "InternalError");
												}
												
												F.line = 27;
												var fun_581402 = op1_581249.pyType.magicMethods.Field21;
												if ((fun_581402 === null)) {
												F.line = 29;
												var obj_type_str_581411 = op1_581249.pyType.name;
												F.line = 30;
												var method_str_581413 = makeNimstrLit("ge");
												F.line = 31;
												var msg_581415 = (makeNimstrLit("No ")).concat(method_str_581413,makeNimstrLit(" method for "),obj_type_str_581411,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_581417 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_581417.tk = 3;
												F.line = 108;
												excp_581417.thrown = true;
												F.line = 109;
												excp_581417.msg = new_py_string_176075(msg_581415);
												var excp_581420 = excp_581417;
												F.line = 34;
												excp_obj_561827 = excp_581420;
												F.line = 34;
												break L4;
												}
												
												var fun_581602 = fun_581402;
												F.line = 57;
												var res_581604 = fun_581602(op1_581249, op2_581232);
													if (of_py_exception_object_358259(res_581604)) {
													Tmp87 = res_581604.thrown;
													}
													else {
													Tmp87 = false;
													}
													
												if (Tmp87) {
												F.line = 60;
												excp_obj_561827 = res_581604;
												F.line = 60;
												break L4;
												}
												
												var res_581802 = res_581604;
												F.line = 397;
												HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, res_581802);
												break;
											case 6:
												F.line = 129;
												F.line = 55;
												var op1_582032 = pop_528821(val_stack_561095, 0);
												F.line = 56;
												var op2_582049 = (Tmp88 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp88[0])[Tmp88[1]];
												F.line = 57;
												F.line = 56;
												if ((op1_582032.pyType === null)) {
												F.line = 2895;
												var e_582076 = null;
												F.line = 2896;
												e_582076 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_582076.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_582076.parent = null;
												F.line = 26;
												raiseException(e_582076, "InternalError");
												}
												
												F.line = 27;
												var fun_582202 = op1_582032.pyType.magicMethods.Field22;
												if ((fun_582202 === null)) {
												F.line = 29;
												var obj_type_str_582211 = op1_582032.pyType.name;
												F.line = 30;
												var method_str_582213 = makeNimstrLit("contains");
												F.line = 31;
												var msg_582215 = (makeNimstrLit("No ")).concat(method_str_582213,makeNimstrLit(" method for "),obj_type_str_582211,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_582217 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_582217.tk = 3;
												F.line = 108;
												excp_582217.thrown = true;
												F.line = 109;
												excp_582217.msg = new_py_string_176075(msg_582215);
												var excp_582220 = excp_582217;
												F.line = 34;
												excp_obj_561827 = excp_582220;
												F.line = 34;
												break L4;
												}
												
												var fun_582402 = fun_582202;
												F.line = 57;
												var res_582404 = fun_582402(op1_582032, op2_582049);
													if (of_py_exception_object_358259(res_582404)) {
													Tmp89 = res_582404.thrown;
													}
													else {
													Tmp89 = false;
													}
													
												if (Tmp89) {
												F.line = 60;
												excp_obj_561827 = res_582404;
												F.line = 60;
												break L4;
												}
												
												var res_582602 = res_582404;
												if (val_stack_561095[0] != null) { val_stack_561095[0].push(res_582602); } else { val_stack_561095[0] = [res_582602]; };
												break;
											case 7:
												F.line = 401;
												F.line = 55;
												var op1_582828 = pop_528821(val_stack_561095, 0);
												F.line = 56;
												var op2_582845 = (Tmp90 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp90[0])[Tmp90[1]];
												F.line = 57;
												F.line = 56;
												if ((op1_582828.pyType === null)) {
												F.line = 2895;
												var e_582872 = null;
												F.line = 2896;
												e_582872 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_582872.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_582872.parent = null;
												F.line = 26;
												raiseException(e_582872, "InternalError");
												}
												
												F.line = 27;
												var fun_583002 = op1_582828.pyType.magicMethods.Field22;
												if ((fun_583002 === null)) {
												F.line = 29;
												var obj_type_str_583011 = op1_582828.pyType.name;
												F.line = 30;
												var method_str_583013 = makeNimstrLit("contains");
												F.line = 31;
												var msg_583015 = (makeNimstrLit("No ")).concat(method_str_583013,makeNimstrLit(" method for "),obj_type_str_583011,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_583017 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_583017.tk = 3;
												F.line = 108;
												excp_583017.thrown = true;
												F.line = 109;
												excp_583017.msg = new_py_string_176075(msg_583015);
												var excp_583020 = excp_583017;
												F.line = 34;
												excp_obj_561827 = excp_583020;
												F.line = 34;
												break L4;
												}
												
												var fun_583202 = fun_583002;
												F.line = 57;
												var res_583204 = fun_583202(op1_582828, op2_582845);
													if (of_py_exception_object_358259(res_583204)) {
													Tmp91 = res_583204.thrown;
													}
													else {
													Tmp91 = false;
													}
													
												if (Tmp91) {
												F.line = 60;
												excp_obj_561827 = res_583204;
												F.line = 60;
												break L4;
												}
												
												var res_583402 = res_583204;
												var obj_583403 = res_583402;
												if (of_py_bool_object_353106(obj_583403)) {
												F.line = 129;
												F.line = 45;
												if ((obj_583403.pyType === null)) {
												F.line = 2895;
												var e_583430 = null;
												F.line = 2896;
												e_583430 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_583430.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_583430.parent = null;
												F.line = 26;
												raiseException(e_583430, "InternalError");
												}
												
												F.line = 27;
												var fun_583602 = obj_583403.pyType.magicMethods.Field7;
												if ((fun_583602 === null)) {
												F.line = 29;
												var obj_type_str_583611 = obj_583403.pyType.name;
												F.line = 30;
												var method_str_583613 = makeNimstrLit("Not");
												F.line = 31;
												var msg_583615 = (makeNimstrLit("No ")).concat(method_str_583613,makeNimstrLit(" method for "),obj_type_str_583611,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_583617 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_583617.tk = 3;
												F.line = 108;
												excp_583617.thrown = true;
												F.line = 109;
												excp_583617.msg = new_py_string_176075(msg_583615);
												var excp_583620 = excp_583617;
												F.line = 34;
												excp_obj_561827 = excp_583620;
												F.line = 34;
												break L4;
												}
												
												var fun_583802 = fun_583602;
												F.line = 46;
												var res_583804 = fun_583802(obj_583403);
													if (of_py_exception_object_358259(res_583804)) {
													Tmp92 = res_583804.thrown;
													}
													else {
													Tmp92 = false;
													}
													
												if (Tmp92) {
												F.line = 49;
												excp_obj_561827 = res_583804;
												F.line = 49;
												break L4;
												}
												
												if (val_stack_561095[0] != null) { val_stack_561095[0].push(res_583804); } else { val_stack_561095[0] = [res_583804]; };
												}
												else {
													F.line = 405;
													F.line = 45;
													if ((obj_583403.pyType === null)) {
													F.line = 2895;
													var e_584237 = null;
													F.line = 2896;
													e_584237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
													F.line = 26;
													e_584237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
													F.line = 2891;
													e_584237.parent = null;
													F.line = 26;
													raiseException(e_584237, "InternalError");
													}
													
													F.line = 27;
													var fun_584402 = obj_583403.pyType.magicMethods.Field12;
													if ((fun_584402 === null)) {
													F.line = 29;
													var obj_type_str_584411 = obj_583403.pyType.name;
													F.line = 30;
													var method_str_584413 = makeNimstrLit("bool");
													F.line = 31;
													var msg_584415 = (makeNimstrLit("No ")).concat(method_str_584413,makeNimstrLit(" method for "),obj_type_str_584411,makeNimstrLit(" defined"));
													F.line = 32;
													F.line = 106;
													var excp_584417 = new_py_type_error_simple_360601();
													F.line = 107;
													excp_584417.tk = 3;
													F.line = 108;
													excp_584417.thrown = true;
													F.line = 109;
													excp_584417.msg = new_py_string_176075(msg_584415);
													var excp_584420 = excp_584417;
													F.line = 34;
													excp_obj_561827 = excp_584420;
													F.line = 34;
													break L4;
													}
													
													var fun_584602 = fun_584402;
													F.line = 46;
													var res_584604 = fun_584602(obj_583403);
														if (of_py_exception_object_358259(res_584604)) {
														Tmp93 = res_584604.thrown;
														}
														else {
														Tmp93 = false;
														}
														
													if (Tmp93) {
													F.line = 49;
													excp_obj_561827 = res_584604;
													F.line = 49;
													break L4;
													}
													
													var bool_obj_584801 = res_584604;
													if (!(of_py_bool_object_353106(bool_obj_584801))) {
													F.line = 2895;
													var e_584807 = null;
													F.line = 2896;
													e_584807 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
													F.line = 31;
													e_584807.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
													F.line = 2891;
													e_584807.parent = null;
													F.line = 407;
													raiseException(e_584807, "InternalError");
													}
													
													F.line = 129;
													F.line = 45;
													if ((bool_obj_584801.pyType === null)) {
													F.line = 2895;
													var e_585027 = null;
													F.line = 2896;
													e_585027 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
													F.line = 26;
													e_585027.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
													F.line = 2891;
													e_585027.parent = null;
													F.line = 26;
													raiseException(e_585027, "InternalError");
													}
													
													F.line = 27;
													var fun_585202 = bool_obj_584801.pyType.magicMethods.Field7;
													if ((fun_585202 === null)) {
													F.line = 29;
													var obj_type_str_585211 = bool_obj_584801.pyType.name;
													F.line = 30;
													var method_str_585213 = makeNimstrLit("Not");
													F.line = 31;
													var msg_585215 = (makeNimstrLit("No ")).concat(method_str_585213,makeNimstrLit(" method for "),obj_type_str_585211,makeNimstrLit(" defined"));
													F.line = 32;
													F.line = 106;
													var excp_585217 = new_py_type_error_simple_360601();
													F.line = 107;
													excp_585217.tk = 3;
													F.line = 108;
													excp_585217.thrown = true;
													F.line = 109;
													excp_585217.msg = new_py_string_176075(msg_585215);
													var excp_585220 = excp_585217;
													F.line = 34;
													excp_obj_561827 = excp_585220;
													F.line = 34;
													break L4;
													}
													
													var fun_585402 = fun_585202;
													F.line = 46;
													var res_585404 = fun_585402(bool_obj_584801);
														if (of_py_exception_object_358259(res_585404)) {
														Tmp94 = res_585404.thrown;
														}
														else {
														Tmp94 = false;
														}
														
													if (Tmp94) {
													F.line = 49;
													excp_obj_561827 = res_585404;
													F.line = 49;
													break L4;
													}
													
													if (val_stack_561095[0] != null) { val_stack_561095[0].push(res_585404); } else { val_stack_561095[0] = [res_585404]; };
												}
												
												break;
											case 10:
												F.line = 410;
												var target_excp_585821 = pop_528821(val_stack_561095, 0);
												if (!(is_exception_type_496313(target_excp_585821))) {
												F.line = 412;
												var msg_585822 = makeNimstrLit("catching classes that do not inherit from BaseException is not allowed");
												F.line = 414;
												F.line = 106;
												var excp_585824 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_585824.tk = 3;
												F.line = 108;
												excp_585824.thrown = true;
												F.line = 109;
												excp_585824.msg = new_py_string_176075(msg_585822);
												excp_obj_561827 = excp_585824;
												F.line = 414;
												break L4;
												}
												
												F.line = 415;
												var current_excp_585841 = (Tmp95 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp95[0])[Tmp95[1]];
												F.line = 129;
												if (val_stack_561095[0] != null) { val_stack_561095[0].push(match_excp_496272(target_excp_585821, current_excp_585841)); } else { val_stack_561095[0] = [match_excp_496272(target_excp_585821, current_excp_585841)]; };
												break;
											default: 
												F.line = 2895;
												var e_586016 = null;
												F.line = 2896;
												e_586016 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 31;
												e_586016.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
												F.line = 2891;
												e_586016.parent = null;
												F.line = 418;
												raiseException(e_586016, "InternalError");
												break;
											}
											break;
										case 79:
											F.line = 421;
											var name_586202 = names_561645[names_561645_Idx][chckIndx(op_arg_562006, 0, names_561645[names_561645_Idx].length+0-1)-0];
											F.line = 422;
											var ret_obj_586203 = py_import_561059(name_586202);
												if (of_py_exception_object_358259(ret_obj_586203)) {
												Tmp96 = ret_obj_586203.thrown;
												}
												else {
												Tmp96 = false;
												}
												
											if (Tmp96) {
											F.line = 424;
											excp_obj_561827 = ret_obj_586203;
											F.line = 424;
											break L4;
											}
											
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(ret_obj_586203); } else { val_stack_561095[0] = [ret_obj_586203]; };
											break;
										case 82:
											F.line = 428;
											var top_586427 = (Tmp97 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp97[0])[Tmp97[1]];
												F.line = 62;
												var ret_586433 = false;
												if (of_py_bool_object_353106(top_586427)) {
												F.line = 64;
												ret_586433 = top_586427.b;
												}
												
												F.line = 67;
												F.line = 45;
												if ((top_586427.pyType === null)) {
												F.line = 2895;
												var e_586460 = null;
												F.line = 2896;
												e_586460 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_586460.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_586460.parent = null;
												F.line = 26;
												raiseException(e_586460, "InternalError");
												}
												
												F.line = 27;
												var fun_586602 = top_586427.pyType.magicMethods.Field12;
												if ((fun_586602 === null)) {
												F.line = 29;
												var obj_type_str_586611 = top_586427.pyType.name;
												F.line = 30;
												var method_str_586613 = makeNimstrLit("bool");
												F.line = 31;
												var msg_586615 = (makeNimstrLit("No ")).concat(method_str_586613,makeNimstrLit(" method for "),obj_type_str_586611,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_586617 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_586617.tk = 3;
												F.line = 108;
												excp_586617.thrown = true;
												F.line = 109;
												excp_586617.msg = new_py_string_176075(msg_586615);
												var excp_586620 = excp_586617;
												F.line = 34;
												excp_obj_561827 = excp_586620;
												F.line = 34;
												break L4;
												}
												
												var fun_586802 = fun_586602;
												F.line = 46;
												var res_586804 = fun_586802(top_586427);
													if (of_py_exception_object_358259(res_586804)) {
													Tmp98 = res_586804.thrown;
													}
													else {
													Tmp98 = false;
													}
													
												if (Tmp98) {
												F.line = 49;
												excp_obj_561827 = res_586804;
												F.line = 49;
												break L4;
												}
												
												var bool_obj_587002 = res_586804;
											if ((bool_obj_587002.b == false)) {
											F.line = 98;
											last_i_561403 = subInt(op_arg_562006, 1);
											}
											else {
												F.line = 432;
											pop_528821(val_stack_561095, 0);
											}
											
											break;
										case 83:
											F.line = 435;
											var top_587028 = (Tmp99 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp99[0])[Tmp99[1]];
												F.line = 62;
												var ret_587034 = false;
												if (of_py_bool_object_353106(top_587028)) {
												F.line = 64;
												ret_587034 = top_587028.b;
												}
												
												F.line = 67;
												F.line = 45;
												if ((top_587028.pyType === null)) {
												F.line = 2895;
												var e_587061 = null;
												F.line = 2896;
												e_587061 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_587061.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_587061.parent = null;
												F.line = 26;
												raiseException(e_587061, "InternalError");
												}
												
												F.line = 27;
												var fun_587202 = top_587028.pyType.magicMethods.Field12;
												if ((fun_587202 === null)) {
												F.line = 29;
												var obj_type_str_587211 = top_587028.pyType.name;
												F.line = 30;
												var method_str_587213 = makeNimstrLit("bool");
												F.line = 31;
												var msg_587215 = (makeNimstrLit("No ")).concat(method_str_587213,makeNimstrLit(" method for "),obj_type_str_587211,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_587217 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_587217.tk = 3;
												F.line = 108;
												excp_587217.thrown = true;
												F.line = 109;
												excp_587217.msg = new_py_string_176075(msg_587215);
												var excp_587220 = excp_587217;
												F.line = 34;
												excp_obj_561827 = excp_587220;
												F.line = 34;
												break L4;
												}
												
												var fun_587402 = fun_587202;
												F.line = 46;
												var res_587404 = fun_587402(top_587028);
													if (of_py_exception_object_358259(res_587404)) {
													Tmp100 = res_587404.thrown;
													}
													else {
													Tmp100 = false;
													}
													
												if (Tmp100) {
												F.line = 49;
												excp_obj_561827 = res_587404;
												F.line = 49;
												break L4;
												}
												
												var bool_obj_587602 = res_587404;
											if ((bool_obj_587602.b == true)) {
											F.line = 98;
											last_i_561403 = subInt(op_arg_562006, 1);
											}
											else {
												F.line = 439;
											pop_528821(val_stack_561095, 0);
											}
											
											break;
										case 81:
										case 84:
											F.line = 98;
											last_i_561403 = subInt(op_arg_562006, 1);
											break;
										case 85:
											F.line = 445;
											var top_587624 = pop_528821(val_stack_561095, 0);
												F.line = 62;
												var ret_587630 = false;
												if (of_py_bool_object_353106(top_587624)) {
												F.line = 64;
												ret_587630 = top_587624.b;
												}
												
												F.line = 67;
												F.line = 45;
												if ((top_587624.pyType === null)) {
												F.line = 2895;
												var e_587657 = null;
												F.line = 2896;
												e_587657 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_587657.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_587657.parent = null;
												F.line = 26;
												raiseException(e_587657, "InternalError");
												}
												
												F.line = 27;
												var fun_587802 = top_587624.pyType.magicMethods.Field12;
												if ((fun_587802 === null)) {
												F.line = 29;
												var obj_type_str_587811 = top_587624.pyType.name;
												F.line = 30;
												var method_str_587813 = makeNimstrLit("bool");
												F.line = 31;
												var msg_587815 = (makeNimstrLit("No ")).concat(method_str_587813,makeNimstrLit(" method for "),obj_type_str_587811,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_587817 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_587817.tk = 3;
												F.line = 108;
												excp_587817.thrown = true;
												F.line = 109;
												excp_587817.msg = new_py_string_176075(msg_587815);
												var excp_587820 = excp_587817;
												F.line = 34;
												excp_obj_561827 = excp_587820;
												F.line = 34;
												break L4;
												}
												
												var fun_588002 = fun_587802;
												F.line = 46;
												var res_588004 = fun_588002(top_587624);
													if (of_py_exception_object_358259(res_588004)) {
													Tmp101 = res_588004.thrown;
													}
													else {
													Tmp101 = false;
													}
													
												if (Tmp101) {
												F.line = 49;
												excp_obj_561827 = res_588004;
												F.line = 49;
												break L4;
												}
												
												var bool_obj_588202 = res_588004;
											if ((bool_obj_588202.b == false)) {
											F.line = 98;
											last_i_561403 = subInt(op_arg_562006, 1);
											}
											
											break;
										case 86:
											F.line = 450;
											var top_588213 = pop_528821(val_stack_561095, 0);
												F.line = 62;
												var ret_588219 = false;
												if (of_py_bool_object_353106(top_588213)) {
												F.line = 64;
												ret_588219 = top_588213.b;
												}
												
												F.line = 67;
												F.line = 45;
												if ((top_588213.pyType === null)) {
												F.line = 2895;
												var e_588246 = null;
												F.line = 2896;
												e_588246 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_588246.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_588246.parent = null;
												F.line = 26;
												raiseException(e_588246, "InternalError");
												}
												
												F.line = 27;
												var fun_588402 = top_588213.pyType.magicMethods.Field12;
												if ((fun_588402 === null)) {
												F.line = 29;
												var obj_type_str_588411 = top_588213.pyType.name;
												F.line = 30;
												var method_str_588413 = makeNimstrLit("bool");
												F.line = 31;
												var msg_588415 = (makeNimstrLit("No ")).concat(method_str_588413,makeNimstrLit(" method for "),obj_type_str_588411,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 106;
												var excp_588417 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_588417.tk = 3;
												F.line = 108;
												excp_588417.thrown = true;
												F.line = 109;
												excp_588417.msg = new_py_string_176075(msg_588415);
												var excp_588420 = excp_588417;
												F.line = 34;
												excp_obj_561827 = excp_588420;
												F.line = 34;
												break L4;
												}
												
												var fun_588602 = fun_588402;
												F.line = 46;
												var res_588604 = fun_588602(top_588213);
													if (of_py_exception_object_358259(res_588604)) {
													Tmp102 = res_588604.thrown;
													}
													else {
													Tmp102 = false;
													}
													
												if (Tmp102) {
												F.line = 49;
												excp_obj_561827 = res_588604;
												F.line = 49;
												break L4;
												}
												
												var bool_obj_588802 = res_588604;
											if ((bool_obj_588802.b == true)) {
											F.line = 98;
											last_i_561403 = subInt(op_arg_562006, 1);
											}
											
											break;
										case 87:
											F.line = 455;
											var name_588804 = names_561645[names_561645_Idx][chckIndx(op_arg_562006, 0, names_561645[names_561645_Idx].length+0-1)-0];
											F.line = 456;
											var obj_588805 = null;
											if (has_key_532437(f_561058.globals, name_588804)) {
											F.line = 458;
											obj_588805 = HEX5BHEX5D_533323(f_561058.globals, name_588804);
											}
											else {
											if (has_key_532437(bltin_dict_544014, name_588804)) {
											F.line = 460;
											obj_588805 = HEX5BHEX5D_533323(bltin_dict_544014, name_588804);
											}
											else {
												F.line = 462;
												F.line = 462;
												var fmt_res_588808 = mnewString(0);
												F.line = 462;
												if (fmt_res_588808 != null) { fmt_res_588808 = (fmt_res_588808).concat(makeNimstrLit("name \'")); } else { fmt_res_588808 = makeNimstrLit("name \'"); };
												F.line = 260;
												if (fmt_res_588808 != null) { fmt_res_588808 = (fmt_res_588808).concat(name_588804.str); } else { fmt_res_588808 = name_588804.str.slice(); };
												F.line = 462;
												if (fmt_res_588808 != null) { fmt_res_588808 = (fmt_res_588808).concat(makeNimstrLit("\' is not defined")); } else { fmt_res_588808 = makeNimstrLit("\' is not defined"); };
												var msg_589001 = nimCopy(null, fmt_res_588808, NTI138);
												F.line = 463;
												F.line = 106;
												var excp_589003 = new_py_name_error_simple_358601();
												F.line = 107;
												excp_589003.tk = 1;
												F.line = 108;
												excp_589003.thrown = true;
												F.line = 109;
												excp_589003.msg = new_py_string_176075(msg_589001);
												excp_obj_561827 = excp_589003;
												F.line = 463;
												break L4;
											}
											}
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(obj_588805); } else { val_stack_561095[0] = [obj_588805]; };
											break;
										case 88:
											if ((0 < (block_stack_561097[0] != null ? block_stack_561097[0].length : 0))) {
											F.line = 468;
											if (block_stack_561097[0] != null) { block_stack_561097[0].push({handler: op_arg_562006, sPtr: (val_stack_561095[0] != null ? val_stack_561095[0].length : 0), context: (Tmp103 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp103[0])[Tmp103[1]].context, status: 0}); } else { block_stack_561097[0] = [{handler: op_arg_562006, sPtr: (val_stack_561095[0] != null ? val_stack_561095[0].length : 0), context: (Tmp103 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp103[0])[Tmp103[1]].context, status: 0}]; };
											}
											else {
												F.line = 470;
											if (block_stack_561097[0] != null) { block_stack_561097[0].push({handler: op_arg_562006, sPtr: (val_stack_561095[0] != null ? val_stack_561095[0].length : 0), context: null, status: 0}); } else { block_stack_561097[0] = [{handler: op_arg_562006, sPtr: (val_stack_561095[0] != null ? val_stack_561095[0].length : 0), context: null, status: 0}]; };
											}
											
											break;
										case 89:
											F.line = 473;
											var obj_589271 = fast_locals_561647[fast_locals_561647_Idx][chckIndx(op_arg_562006, 0, fast_locals_561647[fast_locals_561647_Idx].length+0-1)-0];
											if ((obj_589271 === null)) {
											F.line = 475;
											var name_589279 = f_561058.code.localVars[chckIndx(op_arg_562006, 0, f_561058.code.localVars.length+0-1)-0];
											F.line = 476;
											F.line = 476;
											var fmt_res_589282 = mnewString(0);
											F.line = 476;
											if (fmt_res_589282 != null) { fmt_res_589282 = (fmt_res_589282).concat(makeNimstrLit("local variable ")); } else { fmt_res_589282 = makeNimstrLit("local variable "); };
											F.line = 270;
											if (fmt_res_589282 != null) { fmt_res_589282 = (fmt_res_589282).concat(HEX24_157579(name_589279)); } else { fmt_res_589282 = HEX24_157579(name_589279).slice(); };
											F.line = 476;
											if (fmt_res_589282 != null) { fmt_res_589282 = (fmt_res_589282).concat(makeNimstrLit(" referenced before assignment")); } else { fmt_res_589282 = makeNimstrLit(" referenced before assignment"); };
											var msg_589401 = nimCopy(null, fmt_res_589282, NTI138);
											F.line = 477;
											F.line = 106;
											var excp_589403 = new_py_unbound_local_error_simple_367601();
											F.line = 107;
											excp_589403.tk = 10;
											F.line = 108;
											excp_589403.thrown = true;
											F.line = 109;
											excp_589403.msg = new_py_string_176075(msg_589401);
											var excp_589405 = excp_589403;
											F.line = 478;
											excp_obj_561827 = excp_589405;
											F.line = 478;
											break L4;
											}
											
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(obj_589271); } else { val_stack_561095[0] = [obj_589271]; };
											break;
										case 90:
											F.line = 482;
											fast_locals_561647[fast_locals_561647_Idx][chckIndx(op_arg_562006, 0, fast_locals_561647[fast_locals_561647_Idx].length+0-1)-0] = pop_528821(val_stack_561095, 0);
											break;
										case 92:
											F.line = 485;
											switch (op_arg_562006) {
											case 0:
													if (!((0 < (block_stack_561097[0] != null ? block_stack_561097[0].length : 0)))) Tmp104 = true; else {														Tmp104 = ((Tmp105 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp105[0])[Tmp105[1]].context === null);													}												if (Tmp104) {
												F.line = 488;
												F.line = 106;
												var excp_589654 = new_py_runtime_error_simple_371601();
												F.line = 107;
												excp_589654.tk = 14;
												F.line = 108;
												excp_589654.thrown = true;
												F.line = 109;
												excp_589654.msg = new_py_string_176075(makeNimstrLit("No active exception to reraise"));
												var excp_589656 = excp_589654;
												F.line = 489;
												excp_obj_561827 = excp_589656;
												F.line = 489;
												break L4;
												}
												else {
													F.line = 491;
													excp_obj_561827 = (Tmp106 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp106[0])[Tmp106[1]].context;
													F.line = 491;
													break L4;
												}
												
												break;
											case 1:
												F.line = 493;
												var obj_589681 = pop_528821(val_stack_561095, 0);
												F.line = 494;
												var excp_589682 = null;
												if (is_class_159414(obj_589681)) {
												F.line = 496;
												var new_func_589683 = obj_589681.magicMethods.Field26;
												if ((new_func_589683 === null)) {
												F.line = 2895;
												var e_589695 = null;
												F.line = 2896;
												e_589695 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 498;
												e_589695.message = nimCopy(null, makeNimstrLit("__new__ of exceptions should be initialized"), NTI138);
												F.line = 2891;
												e_589695.parent = null;
												F.line = 498;
												raiseException(e_589695, "InternalError");
												}
												
												F.line = 499;
												excp_589682 = new_func_589683([]);
												}
												else {
													F.line = 501;
													excp_589682 = obj_589681;
												}
												
												if (!(of_py_exception_object_358259(excp_589682))) {
												F.line = 2895;
												var e_589820 = null;
												F.line = 2896;
												e_589820 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 31;
												e_589820.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
												F.line = 2891;
												e_589820.parent = null;
												F.line = 503;
												raiseException(e_589820, "InternalError");
												}
												
												F.line = 504;
												excp_589682.thrown = true;
												F.line = 505;
												excp_obj_561827 = excp_589682;
												F.line = 505;
												break L4;
												break;
											default: 
												F.line = 2895;
												var e_590206 = null;
												F.line = 2896;
												e_590206 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 507;
												F.line = 507;
												var fmt_res_590216 = mnewString(0);
												F.line = 507;
												if (fmt_res_590216 != null) { fmt_res_590216 = (fmt_res_590216).concat(makeNimstrLit("RaiseVarargs has opArg ")); } else { fmt_res_590216 = makeNimstrLit("RaiseVarargs has opArg "); };
												F.line = 270;
												if (fmt_res_590216 != null) { fmt_res_590216 = (fmt_res_590216).concat(cstrToNimstr((op_arg_562006)+"")); } else { fmt_res_590216 = cstrToNimstr((op_arg_562006)+"").slice(); };
												e_590206.message = nimCopy(null, fmt_res_590216, NTI138);
												F.line = 2891;
												e_590206.parent = null;
												F.line = 507;
												raiseException(e_590206, "InternalError");
												break;
											}
											break;
										case 93:
											F.line = 510;
											var args_590430 = new_seq_573870(chckRange(op_arg_562006, 0, 2147483647));
											L107: do {
												F.line = 511;
												var i_590442 = 0;
												F.line = 2107;
												var res_594150 = 1;
												L108: do {
													F.line = 2108;
														L109: while (true) {
														if (!(res_594150 <= op_arg_562006)) break L109;
															F.line = 2109;
															i_590442 = res_594150;
															F.line = 512;
															HEX5BHEX5DHEX3D_563204(args_590430, i_590442, pop_528821(val_stack_561095, 0));
															F.line = 2110;
															res_594150 = addInt(res_594150, 1);
														}
												} while(false);
											} while(false);
											F.line = 513;
											var func_obj_no_cast_590475 = pop_528821(val_stack_561095, 0);
											F.line = 514;
											var ret_obj_590476 = null;
											if (of_py_function_object_550137(func_obj_no_cast_590475)) {
											F.line = 517;
											var func_obj_590477 = func_obj_no_cast_590475;
											F.line = 519;
											var new_f_590478 = new_py_frame_561050(func_obj_590477, args_590430, f_561058);
												if (of_py_exception_object_358259(new_f_590478)) {
												Tmp110 = new_f_590478.thrown;
												}
												else {
												Tmp110 = false;
												}
												
											if (Tmp110) {
											F.line = 521;
											excp_obj_561827 = new_f_590478;
											F.line = 521;
											break L4;
											}
											
											F.line = 522;
											ret_obj_590476 = eval_frame_561056(new_f_590478);
											}
											else {
												F.line = 526;
												var call_func_590479 = func_obj_no_cast_590475.pyType.magicMethods.Field31;
												if ((call_func_590479 === null)) {
												F.line = 528;
												F.line = 528;
												var fmt_res_590488 = mnewString(0);
												F.line = 260;
												if (fmt_res_590488 != null) { fmt_res_590488 = (fmt_res_590488).concat(func_obj_no_cast_590475.pyType.name); } else { fmt_res_590488 = func_obj_no_cast_590475.pyType.name.slice(); };
												F.line = 528;
												if (fmt_res_590488 != null) { fmt_res_590488 = (fmt_res_590488).concat(makeNimstrLit(" is not callable")); } else { fmt_res_590488 = makeNimstrLit(" is not callable"); };
												var msg_590601 = nimCopy(null, fmt_res_590488, NTI138);
												F.line = 529;
												F.line = 106;
												var excp_590603 = new_py_type_error_simple_360601();
												F.line = 107;
												excp_590603.tk = 3;
												F.line = 108;
												excp_590603.thrown = true;
												F.line = 109;
												excp_590603.msg = new_py_string_176075(msg_590601);
												ret_obj_590476 = excp_590603;
												}
												else {
													F.line = 531;
													ret_obj_590476 = call_func_590479(func_obj_no_cast_590475, args_590430);
												}
												
											}
											
												if (of_py_exception_object_358259(ret_obj_590476)) {
												Tmp111 = ret_obj_590476.thrown;
												}
												else {
												Tmp111 = false;
												}
												
											if (Tmp111) {
											F.line = 533;
											excp_obj_561827 = ret_obj_590476;
											F.line = 533;
											break L4;
											}
											
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(ret_obj_590476); } else { val_stack_561095[0] = [ret_obj_590476]; };
											break;
										case 94:
											if (!(((op_arg_562006 == 0) || (op_arg_562006 == 8)))) {
											F.line = 538;
											failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(538, 22) `opArg == 0 or opArg == 8` "));
											}
											
											F.line = 539;
											var name_591010 = pop_528821(val_stack_561095, 0);
											F.line = 540;
											var code_591020 = pop_528821(val_stack_561095, 0);
											F.line = 541;
											var closure_591021 = null;
											if (!(((op_arg_562006 & 8) == 0))) {
											F.line = 543;
											closure_591021 = pop_528821(val_stack_561095, 0);
											}
											
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(new_py_func_552057(name_591010, code_591020, f_561058.globals, closure_591021)); } else { val_stack_561095[0] = [new_py_func_552057(name_591010, code_591020, f_561058.globals, closure_591021)]; };
											break;
										case 95:
											F.line = 547;
											var lower_591212 = null;
											F.line = 547;
											var upper_591213 = null;
											F.line = 547;
											var step_591214 = null;
											if ((op_arg_562006 == 3)) {
											F.line = 549;
											step_591214 = pop_528821(val_stack_561095, 0);
											}
											else {
												if (!((op_arg_562006 == 2))) {
												F.line = 551;
												failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(551, 24) `opArg == 2` "));
												}
												
												F.line = 552;
												step_591214 = py_none_356044;
											}
											
											F.line = 553;
											upper_591213 = pop_528821(val_stack_561095, 0);
											F.line = 554;
											lower_591212 = (Tmp112 = HEX5BHEX5D_562217(val_stack_561095[0], 1), Tmp112[0])[Tmp112[1]];
											F.line = 555;
											var slice_591425 = new_py_slice_471057(lower_591212, upper_591213, step_591214);
												if (of_py_exception_object_358259(slice_591425)) {
												Tmp113 = slice_591425.thrown;
												}
												else {
												Tmp113 = false;
												}
												
											if (Tmp113) {
											F.line = 557;
											excp_obj_561827 = slice_591425;
											F.line = 557;
											break L4;
											}
											
											F.line = 558;
											HEX5BHEX5DHEX3D_563204(val_stack_561095[0], 1, slice_591425);
											break;
										case 96:
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(cell_vars_561649[cell_vars_561649_Idx][chckIndx(op_arg_562006, 0, cell_vars_561649[cell_vars_561649_Idx].length+0-1)-0]); } else { val_stack_561095[0] = [cell_vars_561649[cell_vars_561649_Idx][chckIndx(op_arg_562006, 0, cell_vars_561649[cell_vars_561649_Idx].length+0-1)-0]]; };
											break;
										case 97:
											F.line = 564;
											var c_591812 = cell_vars_561649[cell_vars_561649_Idx][chckIndx(op_arg_562006, 0, cell_vars_561649[cell_vars_561649_Idx].length+0-1)-0];
											if ((c_591812.refObj === null)) {
											F.line = 566;
											var name_591820 = f_561058.code.cellVars[chckIndx(op_arg_562006, 0, f_561058.code.cellVars.length+0-1)-0];
											F.line = 567;
											F.line = 567;
											var fmt_res_591823 = mnewString(0);
											F.line = 567;
											if (fmt_res_591823 != null) { fmt_res_591823 = (fmt_res_591823).concat(makeNimstrLit("local variable ")); } else { fmt_res_591823 = makeNimstrLit("local variable "); };
											F.line = 270;
											if (fmt_res_591823 != null) { fmt_res_591823 = (fmt_res_591823).concat(HEX24_157579(name_591820)); } else { fmt_res_591823 = HEX24_157579(name_591820).slice(); };
											F.line = 567;
											if (fmt_res_591823 != null) { fmt_res_591823 = (fmt_res_591823).concat(makeNimstrLit(" referenced before assignment")); } else { fmt_res_591823 = makeNimstrLit(" referenced before assignment"); };
											var msg_592001 = nimCopy(null, fmt_res_591823, NTI138);
											F.line = 568;
											F.line = 106;
											var excp_592003 = new_py_unbound_local_error_simple_367601();
											F.line = 107;
											excp_592003.tk = 10;
											F.line = 108;
											excp_592003.thrown = true;
											F.line = 109;
											excp_592003.msg = new_py_string_176075(msg_592001);
											var excp_592005 = excp_592003;
											F.line = 569;
											excp_obj_561827 = excp_592005;
											F.line = 569;
											break L4;
											}
											
											F.line = 129;
											if (val_stack_561095[0] != null) { val_stack_561095[0].push(c_591812.refObj); } else { val_stack_561095[0] = [c_591812.refObj]; };
											break;
										case 98:
											F.line = 573;
											cell_vars_561649[cell_vars_561649_Idx][chckIndx(op_arg_562006, 0, cell_vars_561649[cell_vars_561649_Idx].length+0-1)-0].refObj = pop_528821(val_stack_561095, 0);
											break;
										case 104:
											F.line = 576;
											var top_592231 = pop_528821(val_stack_561095, 0);
											F.line = 577;
											var l_592247 = (Tmp114 = HEX5BHEX5D_562217(val_stack_561095[0], op_arg_562006), Tmp114[0])[Tmp114[1]];
											if (!(of_py_list_object_515271(l_592247))) {
											F.line = 578;
											failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(578, 22) `ofPyListObject(l)` "));
											}
											
											F.line = 579;
											if (l_592247.items != null) { l_592247.items.push(top_592231); } else { l_592247.items = [top_592231]; };
											break;
										default: 
											F.line = 582;
											F.line = 582;
											var fmt_res_592413 = mnewString(0);
											F.line = 582;
											if (fmt_res_592413 != null) { fmt_res_592413 = (fmt_res_592413).concat(makeNimstrLit("!!! NOT IMPLEMENTED OPCODE ")); } else { fmt_res_592413 = makeNimstrLit("!!! NOT IMPLEMENTED OPCODE "); };
											F.line = 270;
											if (fmt_res_592413 != null) { fmt_res_592413 = (fmt_res_592413).concat(reprEnum(op_code_562005, NTI467016)); } else { fmt_res_592413 = reprEnum(op_code_562005, NTI467016).slice(); };
											F.line = 582;
											if (fmt_res_592413 != null) { fmt_res_592413 = (fmt_res_592413).concat(makeNimstrLit(" IN EVAL FRAME !!!")); } else { fmt_res_592413 = makeNimstrLit(" IN EVAL FRAME !!!"); };
											var msg_592607 = nimCopy(null, fmt_res_592413, NTI138);
											F.line = 583;
											F.line = 106;
											var excp_592609 = new_py_not_implemented_error_simple_359601();
											F.line = 107;
											excp_592609.tk = 2;
											F.line = 108;
											excp_592609.thrown = true;
											F.line = 109;
											excp_592609.msg = new_py_string_176075(msg_592607);
											result_561217 = excp_592609;
											break BeforeRet;
											break;
										}
									} while(false);
								}
						} while(false);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = F;
						if (lastJSError && (isObj(lastJSError.m_type, NTI3856))) {
						F.line = 585;
						F.line = 106;
						var excp_592612 = new_py_memory_error_simple_373601();
						F.line = 107;
						excp_592612.tk = 16;
						F.line = 108;
						excp_592612.thrown = true;
						F.line = 109;
						excp_592612.msg = new_py_string_176075(makeNimstrLit("Out of Memory"));
						excp_obj_561827 = excp_592612;
						F.line = 586;
						excp_obj_561827 = excp_obj_561827;
						F.line = 586;
						break L4;
						}
						else 						if (lastJSError && (isObj(lastJSError.m_type, NTI156089))) {
						F.line = 588;
						F.line = 106;
						var excp_592615 = new_py_keyboard_interrupt_error_simple_374601();
						F.line = 107;
						excp_592615.tk = 17;
						F.line = 108;
						excp_592615.thrown = true;
						F.line = 109;
						excp_592615.msg = new_py_string_176075([]);
						excp_obj_561827 = excp_592615;
						F.line = 589;
						excp_obj_561827 = excp_obj_561827;
						F.line = 589;
						break L4;
						}
						else {
							reraiseException();
						}
lastJSError = prevJSError;
						} finally {
						framePtr = F;
						}
					} while(false);
					L115: do {
						if (!(!((excp_obj_561827 === null)))) {
						F.line = 593;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(593, 9) `not isNil(excpObj)` "));
						}
						
						if (!(of_py_exception_object_358259(excp_obj_561827))) {
						F.line = 594;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(594, 16) `ofPyExceptionObject(excpObj)` "));
						}
						
						F.line = 595;
						var excp_593001 = excp_obj_561827;
						F.line = 596;
						set_trace_back_561418(excp_593001);
						L116: do {
							F.line = 597;
								L117: while (true) {
								if (!(0 < (block_stack_561097[0] != null ? block_stack_561097[0].length : 0))) break L117;
									F.line = 598;
									var top_block_593026 = (Tmp118 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp118[0])[Tmp118[1]];
									F.line = 599;
									switch (top_block_593026.status) {
									case 0:
										F.line = 601;
										excp_593001.context = top_block_593026.context;
										F.line = 602;
										top_block_593026.context = excp_593001;
										F.line = 603;
										top_block_593026.status = 1;
										if (((val_stack_561095[0] != null ? val_stack_561095[0].length : 0) == 0)) {
										if (!((top_block_593026.sPtr == 0))) {
										F.line = 140;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(140, 14) `topBlock.sPtr == 0` "));
										}
										
										}
										else {
											F.line = 142;
										if (val_stack_561095[0].length < chckRange(top_block_593026.sPtr, 0, 2147483647)) { for (var i=val_stack_561095[0].length;i<chckRange(top_block_593026.sPtr, 0, 2147483647);++i) val_stack_561095[0].push(null); }
               else { val_stack_561095[0].length = chckRange(top_block_593026.sPtr, 0, 2147483647); };
										}
										
										F.line = 129;
										if (val_stack_561095[0] != null) { val_stack_561095[0].push(excp_593001); } else { val_stack_561095[0] = [excp_593001]; };
										F.line = 98;
										last_i_561403 = subInt(top_block_593026.handler, 1);
										F.line = 609;
										break L115;
										break;
									case 1:
										if ((excp_593001.context === null)) {
										F.line = 612;
										excp_593001.context = top_block_593026.context;
										}
										
										if (((val_stack_561095[0] != null ? val_stack_561095[0].length : 0) == 0)) {
											F.line = 140;
											var ret_593627 = (Tmp119 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp119[0])[Tmp119[1]].sPtr;
											F.line = 140;
											pop_572271(block_stack_561097, 0);
										if (!((ret_593627 == 0))) {
										F.line = 140;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(140, 14) `\x0A  let ret593627 = blockStack[BackwardsIndex(1)].sPtr\x0A  discard pop(blockStack)\x0A  ret593627 == 0` "));
										}
										
										}
										else {
											F.line = 142;
											F.line = 173;
											var ret_593627 = (Tmp120 = HEX5BHEX5D_572236(block_stack_561097[0], 1), Tmp120[0])[Tmp120[1]].sPtr;
											F.line = 174;
											pop_572271(block_stack_561097, 0);
										if (val_stack_561095[0].length < chckRange(ret_593627, 0, 2147483647)) { for (var i=val_stack_561095[0].length;i<chckRange(ret_593627, 0, 2147483647);++i) val_stack_561095[0].push(null); }
               else { val_stack_561095[0].length = chckRange(ret_593627, 0, 2147483647); };
										}
										
										break;
									default: 
										F.line = 2895;
										var e_593816 = null;
										F.line = 2896;
										e_593816 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 31;
										e_593816.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_593816.parent = null;
										F.line = 616;
										raiseException(e_593816, "InternalError");
										break;
									}
								}
						} while(false);
						F.line = 617;
						result_561217 = excp_593001;
						break BeforeRet;
					} while(false);
				}
		} while(false);
		} finally {
		framePtr = F;
		}
	} while (false);
	framePtr = F.prev;

	return result_561217;

}

function call_py_function_object_magic_609722(self_no_cast_609724, args_609738) {
			var Tmp1;

	var result_609739 = null;

	var F={procname:"funcobjectImpl.callPyFunctionObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_609724.m_type, NTI550123))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFunctionObject` "));
		}
		
		F.line = 438;
		var self_609801 = self_no_cast_609724;
		F.line = 16;
		var f_609802 = new_py_frame_561050(self_609801, args_609738, null);
			if (of_py_exception_object_358259(f_609802)) {
			Tmp1 = f_609802.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 18;
		result_609739 = f_609802;
		break BeforeRet;
		}
		
		result_609739 = eval_frame_561056(f_609802);
	} while (false);
	framePtr = F.prev;

	return result_609739;

}

function HEX26_610015(x_610020, y_610023) {
	var result_610025 = null;

	var F={procname:"&.&",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2446;
		result_610025 = new Array(chckRange(addInt((x_610020 != null ? x_610020.length : 0), (y_610023 != null ? y_610023.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_610020 != null ? x_610020.length : 0), (y_610023 != null ? y_610023.length : 0)), 0, 2147483647);++i) {result_610025[i]=null;}		L1: do {
			F.line = 2447;
			var i_610068 = 0;
			F.line = 2104;
			var colontmp__610096 = 0;
			F.line = 2447;
			colontmp__610096 = subInt((x_610020 != null ? x_610020.length : 0), 1);
			F.line = 2107;
			var res_610099 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_610099 <= colontmp__610096)) break L3;
						F.line = 2109;
						i_610068 = res_610099;
						F.line = 2448;
						result_610025[chckIndx(i_610068, 0, result_610025.length+0-1)-0] = x_610020[chckIndx(i_610068, 0, x_610020.length+0-1)-0];
						F.line = 2110;
						res_610099 = addInt(res_610099, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 2449;
			var i_610087 = 0;
			F.line = 2104;
			var colontmp__610104 = 0;
			F.line = 2449;
			colontmp__610104 = subInt((y_610023 != null ? y_610023.length : 0), 1);
			F.line = 2107;
			var res_610107 = 0;
			L5: do {
				F.line = 2108;
					L6: while (true) {
					if (!(res_610107 <= colontmp__610104)) break L6;
						F.line = 2109;
						i_610087 = res_610107;
						F.line = 2450;
						result_610025[chckIndx(addInt(i_610087, (x_610020 != null ? x_610020.length : 0)), 0, result_610025.length+0-1)-0] = y_610023[chckIndx(i_610087, 0, y_610023.length+0-1)-0];
						F.line = 2110;
						res_610107 = addInt(res_610107, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_610025;

}

function call_py_bound_method_object_magic_609818(self_no_cast_609820, args_609834) {
			var Tmp1;

	var result_609835 = null;

	var F={procname:"funcobjectImpl.callPyBoundMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_609820.m_type, NTI551100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoundMethodObject` "));
		}
		
		F.line = 438;
		var self_610001 = self_no_cast_609820;
		F.line = 24;
		var f_610124 = new_py_frame_561050(self_610001.fun, HEX26_610015([self_610001.self], args_609834), null);
			if (of_py_exception_object_358259(f_610124)) {
			Tmp1 = f_610124.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 26;
		result_609835 = f_610124;
		break BeforeRet;
		}
		
		result_609835 = eval_frame_561056(f_610124);
	} while (false);
	framePtr = F.prev;

	return result_609835;

}
py_function_object_type_550135.magicMethods.Field31 = call_py_function_object_magic_609722;
py_bound_method_object_type_551108.magicMethods.Field31 = call_py_bound_method_object_magic_609818;

function new_612206() {
	var result_612211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_612401 = null;
		F.line = 211;
		r_612401 = {m_type: NTI612083, name: null, dType: null, kind: 0, meth: 0, id: 0, pyType: null};
		F.line = 212;
		result_612211 = r_612401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_612211;

}

function new_py_method_descr_simple_612201() {
	var result_612203 = null;

	var F={procname:"descrobject.newPyMethodDescrSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_612424 = new_612206();
		F.line = 561;
		obj_612424.pyType = py_method_descr_object_type_612095;
		F.line = 563;
		give_id_157814(obj_612424);
		result_612203 = obj_612424;
	framePtr = F.prev;

	return result_612203;

}

function new_py_method_descr_default_612821(args_612038) {
	var result_612824 = null;

	var F={procname:"descrobject.newPyMethodDescrDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_612824 = new_py_method_descr_simple_612201();
	framePtr = F.prev;

	return result_612824;

}
var py_method_descr_object_type_612095 = new_py_type_159261(makeNimstrLit("MethodDescr"));
py_method_descr_object_type_612095.magicMethods.Field26 = new_py_method_descr_default_612821;

function new_py_nim_func_559444(fun_559446, name_559447) {
	var result_559448 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		F.line = 47;
		result_559448 = new_py_nim_func_simple_557201();
		F.line = 48;
		result_559448.name = name_559447;
		F.line = 49;
		result_559448.kind = 0;
		F.line = 50;
		result_559448.fun = fun_559446;
	framePtr = F.prev;

	return result_559448;

}

function new_py_nim_func_559485(fun_559480, name_559482, self_559484) {
	var result_559487 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_559484 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self559484)` "));
		}
		
		F.line = 58;
		result_559487 = new_py_nim_func_simple_557201();
		F.line = 59;
		result_559487.name = name_559482;
		F.line = 60;
		result_559487.kind = 1;
		F.line = 61;
		result_559487.fun = fun_559480;
		F.line = 62;
		result_559487.self = self_559484;
	framePtr = F.prev;

	return result_559487;

}

function new_py_nim_func_559622(fun_559617, name_559619, self_559621) {
	var result_559624 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_559621 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self559621)` "));
		}
		
		F.line = 58;
		result_559624 = new_py_nim_func_simple_557201();
		F.line = 59;
		result_559624.name = name_559619;
		F.line = 60;
		result_559624.kind = 2;
		F.line = 61;
		result_559624.fun = fun_559617;
		F.line = 62;
		result_559624.self = self_559621;
	framePtr = F.prev;

	return result_559624;

}

function new_py_nim_func_559822(fun_559817, name_559819, self_559821) {
	var result_559824 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_559821 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self559821)` "));
		}
		
		F.line = 58;
		result_559824 = new_py_nim_func_simple_557201();
		F.line = 59;
		result_559824.name = name_559819;
		F.line = 60;
		result_559824.kind = 3;
		F.line = 61;
		result_559824.fun = fun_559817;
		F.line = 62;
		result_559824.self = self_559821;
	framePtr = F.prev;

	return result_559824;

}

function new_py_nim_func_560022(fun_560017, name_560019, self_560021) {
	var result_560024 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_560021 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self560021)` "));
		}
		
		F.line = 58;
		result_560024 = new_py_nim_func_simple_557201();
		F.line = 59;
		result_560024.name = name_560019;
		F.line = 60;
		result_560024.kind = 4;
		F.line = 61;
		result_560024.fun = fun_560017;
		F.line = 62;
		result_560024.self = self_560021;
	framePtr = F.prev;

	return result_560024;

}

function get_py_method_descr_object_magic_614014(self_no_cast_614016, other_614017) {
	var result_614018 = null;

	var F={procname:"descrobject.getPyMethodDescrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_614016.m_type, NTI612083))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyMethodDescrObject` "));
		}
		
		F.line = 438;
		var self_614201 = self_no_cast_614016;
		if (!((other_614017.pyType == self_614201.dType))) {
		F.line = 49;
		F.line = 49;
		var fmt_res_614215 = mnewString(0);
		F.line = 49;
		if (fmt_res_614215 != null) { fmt_res_614215 = (fmt_res_614215).concat(makeNimstrLit("descriptor ")); } else { fmt_res_614215 = makeNimstrLit("descriptor "); };
		F.line = 270;
		if (fmt_res_614215 != null) { fmt_res_614215 = (fmt_res_614215).concat(HEX24_157579(self_614201.name)); } else { fmt_res_614215 = HEX24_157579(self_614201.name).slice(); };
		F.line = 49;
		if (fmt_res_614215 != null) { fmt_res_614215 = (fmt_res_614215).concat(makeNimstrLit(" for ")); } else { fmt_res_614215 = makeNimstrLit(" for "); };
		F.line = 260;
		if (fmt_res_614215 != null) { fmt_res_614215 = (fmt_res_614215).concat(self_614201.dType.name); } else { fmt_res_614215 = self_614201.dType.name.slice(); };
		F.line = 49;
		if (fmt_res_614215 != null) { fmt_res_614215 = (fmt_res_614215).concat(makeNimstrLit(" objects ")); } else { fmt_res_614215 = makeNimstrLit(" objects "); };
		F.line = 50;
		var fmt_res_614603 = mnewString(0);
		F.line = 50;
		if (fmt_res_614603 != null) { fmt_res_614603 = (fmt_res_614603).concat(makeNimstrLit("doesn\'t apply to ")); } else { fmt_res_614603 = makeNimstrLit("doesn\'t apply to "); };
		F.line = 260;
		if (fmt_res_614603 != null) { fmt_res_614603 = (fmt_res_614603).concat(other_614017.pyType.name); } else { fmt_res_614603 = other_614017.pyType.name.slice(); };
		F.line = 50;
		if (fmt_res_614603 != null) { fmt_res_614603 = (fmt_res_614603).concat(makeNimstrLit(" object")); } else { fmt_res_614603 = makeNimstrLit(" object"); };
		var msg_614801 = (fmt_res_614215).concat(fmt_res_614603);
		F.line = 51;
		F.line = 106;
		var excp_614803 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_614803.tk = 3;
		F.line = 108;
		excp_614803.thrown = true;
		F.line = 109;
		excp_614803.msg = new_py_string_176075(msg_614801);
		result_614018 = excp_614803;
		break BeforeRet;
		}
		
		F.line = 52;
		var owner_614805 = other_614017;
		F.line = 53;
		switch (self_614201.kind) {
		case 0:
			F.line = 55;
			result_614018 = new_py_nim_func_559444(self_614201.meth, self_614201.name);
			break BeforeRet;
			break;
		case 1:
			F.line = 57;
			result_614018 = new_py_nim_func_559485(self_614201.meth, self_614201.name, owner_614805);
			break BeforeRet;
			break;
		case 2:
			F.line = 59;
			result_614018 = new_py_nim_func_559622(self_614201.meth, self_614201.name, owner_614805);
			break BeforeRet;
			break;
		case 3:
			F.line = 61;
			result_614018 = new_py_nim_func_559822(self_614201.meth, self_614201.name, owner_614805);
			break BeforeRet;
			break;
		case 4:
			F.line = 63;
			result_614018 = new_py_nim_func_560022(self_614201.meth, self_614201.name, owner_614805);
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_614018;

}

function new_615006() {
	var result_615011 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_615201 = null;
		F.line = 211;
		r_615201 = {m_type: NTI614891, getter: null, setter: null, id: 0, pyType: null};
		F.line = 212;
		result_615011 = r_615201;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_615011;

}

function new_py_get_set_descr_simple_615001() {
	var result_615003 = null;

	var F={procname:"descrobject.newPyGetSetDescrSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_615224 = new_615006();
		F.line = 561;
		obj_615224.pyType = py_get_set_descr_object_type_614899;
		F.line = 563;
		give_id_157814(obj_615224);
		result_615003 = obj_615224;
	framePtr = F.prev;

	return result_615003;

}

function new_py_get_set_descr_default_615621(args_614846) {
	var result_615624 = null;

	var F={procname:"descrobject.newPyGetSetDescrDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_615624 = new_py_get_set_descr_simple_615001();
	framePtr = F.prev;

	return result_615624;

}

function get_py_get_set_descr_object_magic_615844(self_no_cast_615846, other_615847) {
	var result_615848 = null;

	var F={procname:"descrobject.getPyGetSetDescrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_615846.m_type, NTI614891))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyGetSetDescrObject` "));
		}
		
		F.line = 438;
		var self_616001 = self_no_cast_615846;
		result_615848 = self_616001.getter(other_615847);
	framePtr = F.prev;

	return result_615848;

}

function set_py_get_set_descr_object_magic_616016(self_no_cast_616018, arg1_616019, arg2_616020) {
	var result_616021 = null;

	var F={procname:"descrobject.setPyGetSetDescrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_616018.m_type, NTI614891))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyGetSetDescrObject` "));
		}
		
		F.line = 438;
		var self_616201 = self_no_cast_616018;
		result_616021 = self_616201.setter(arg1_616019, arg2_616020);
	framePtr = F.prev;

	return result_616021;

}
py_method_descr_object_type_612095.magicMethods.Field34 = get_py_method_descr_object_magic_614014;
var py_get_set_descr_object_type_614899 = new_py_type_159261(makeNimstrLit("GetSetDescr"));
py_get_set_descr_object_type_614899.magicMethods.Field26 = new_py_get_set_descr_default_615621;
py_get_set_descr_object_type_614899.magicMethods.Field34 = get_py_get_set_descr_object_magic_615844;
py_get_set_descr_object_type_614899.magicMethods.Field35 = set_py_get_set_descr_object_magic_616016;

function new_616406() {
	var result_616411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_616601 = null;
		F.line = 211;
		r_616601 = {m_type: NTI616304, getter: null, id: 0, pyType: null};
		F.line = 212;
		result_616411 = r_616601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_616411;

}

function new_py_property_simple_616401() {
	var result_616403 = null;

	var F={procname:"descrobject.newPyPropertySimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_616624 = new_616406();
		F.line = 561;
		obj_616624.pyType = py_property_object_type_616310;
		F.line = 563;
		give_id_157814(obj_616624);
		result_616403 = obj_616624;
	framePtr = F.prev;

	return result_616403;

}

function new_py_property_default_617021(args_616259) {
	var result_617024 = null;

	var F={procname:"descrobject.newPyPropertyDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_617024 = new_py_property_simple_616401();
	framePtr = F.prev;

	return result_617024;

}

function init_py_property_object_magic_617244(self_no_cast_617246, args_617260) {
	var result_617261 = null;

	var F={procname:"descrobject.initPyPropertyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_617246.m_type, NTI616304))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyPropertyObject` "));
		}
		
		F.line = 438;
		var self_617401 = self_no_cast_617246;
		if (!(((args_617260 != null ? args_617260.length : 0) == 1))) {
		F.line = 190;
		var msg_617413 = null;
		if (false) {
		F.line = 192;
		F.line = 192;
		var fmt_res_617418 = mnewString(0);
		F.line = 192;
		if (fmt_res_617418 != null) { fmt_res_617418 = (fmt_res_617418).concat(makeNimstrLit(" argument (")); } else { fmt_res_617418 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_617418 != null) { fmt_res_617418 = (fmt_res_617418).concat(cstrToNimstr(((args_617260 != null ? args_617260.length : 0))+"")); } else { fmt_res_617418 = cstrToNimstr(((args_617260 != null ? args_617260.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_617418 != null) { fmt_res_617418 = (fmt_res_617418).concat(makeNimstrLit(" given)")); } else { fmt_res_617418 = makeNimstrLit(" given)"); };
		msg_617413 = nimCopy(null, (makeNimstrLit(" takes exactly 1")).concat(fmt_res_617418), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_617610 = mnewString(0);
			F.line = 194;
			if (fmt_res_617610 != null) { fmt_res_617610 = (fmt_res_617610).concat(makeNimstrLit(" argument (")); } else { fmt_res_617610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_617610 != null) { fmt_res_617610 = (fmt_res_617610).concat(cstrToNimstr(((args_617260 != null ? args_617260.length : 0))+"")); } else { fmt_res_617610 = cstrToNimstr(((args_617260 != null ? args_617260.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_617610 != null) { fmt_res_617610 = (fmt_res_617610).concat(makeNimstrLit(" given)")); } else { fmt_res_617610 = makeNimstrLit(" given)"); };
			msg_617413 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_617610), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_617809 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_617809.tk = 3;
		F.line = 108;
		excp_617809.thrown = true;
		F.line = 109;
		excp_617809.msg = new_py_string_176075(msg_617413);
		result_617261 = excp_617809;
		break BeforeRet;
		}
		
		F.line = 93;
		self_617401.getter = args_617260[chckIndx(0, 0, args_617260.length+0-1)-0];
		result_617261 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_617261;

}

function of_py_nim_func_object_557157(obj_557088) {
	var result_557159 = false;

	var F={procname:"methodobject.ofPyNimFuncObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_557159 = (obj_557088.pyType.kind == 12);
	framePtr = F.prev;

	return result_557159;

}

function fast_call_611133(callable_611135, args_611137) {
	var result_611138 = null;

	var F={procname:"call.fastCall",prev:framePtr,filename:"call.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (of_py_nim_func_object_557157(callable_611135)) {
		F.line = 7;
		result_611138 = call_py_nim_func_object_magic_558044(callable_611135, args_611137);
		break BeforeRet;
		}
		else {
		if (of_py_function_object_550137(callable_611135)) {
		F.line = 9;
		result_611138 = call_py_function_object_magic_609722(callable_611135, args_611137);
		break BeforeRet;
		}
		else {
			F.line = 11;
			if ((callable_611135.pyType === null)) {
			F.line = 2895;
			var e_611161 = null;
			F.line = 2896;
			e_611161 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_611161.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_611161.parent = null;
			F.line = 26;
			raiseException(e_611161, "InternalError");
			}
			
			F.line = 27;
			var fun_611202 = callable_611135.pyType.magicMethods.Field31;
			if ((fun_611202 === null)) {
			F.line = 29;
			var obj_type_str_611211 = callable_611135.pyType.name;
			F.line = 30;
			var method_str_611213 = makeNimstrLit("call");
			F.line = 31;
			var msg_611215 = (makeNimstrLit("No ")).concat(method_str_611213,makeNimstrLit(" method for "),obj_type_str_611211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 106;
			var excp_611217 = new_py_type_error_simple_360601();
			F.line = 107;
			excp_611217.tk = 3;
			F.line = 108;
			excp_611217.thrown = true;
			F.line = 109;
			excp_611217.msg = new_py_string_176075(msg_611215);
			var excp_611220 = excp_611217;
			F.line = 36;
			result_611138 = excp_611220;
			break BeforeRet;
			}
			
			var fun_611401 = fun_611202;
			F.line = 12;
			result_611138 = fun_611401(callable_611135, args_611137);
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_611138;

}

function get_py_property_object_magic_617825(self_no_cast_617827, other_617828) {
	var result_617829 = null;

	var F={procname:"descrobject.getPyPropertyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_617827.m_type, NTI616304))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyPropertyObject` "));
		}
		
		F.line = 438;
		var self_618001 = self_no_cast_617827;
		result_617829 = fast_call_611133(self_618001.getter, [other_617828]);
	framePtr = F.prev;

	return result_617829;

}
var py_property_object_type_616310 = new_py_type_159261(makeNimstrLit("Property"));
py_property_object_type_616310.magicMethods.Field26 = new_py_property_default_617021;
py_property_object_type_616310.magicMethods.Field27 = init_py_property_object_magic_617244;
py_property_object_type_616310.magicMethods.Field34 = get_py_property_object_magic_617825;

function new_619206() {
	var result_619211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_619401 = null;
		F.line = 211;
		r_619401 = {m_type: NTI619110, dict: null, id: 0, pyType: null};
		F.line = 212;
		result_619211 = r_619401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_619211;

}

function new_py_dict_proxy_simple_619201() {
	var result_619203 = null;

	var F={procname:"dictproxyobject.newPyDictProxySimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_619424 = new_619206();
		F.line = 561;
		obj_619424.pyType = py_dict_proxy_object_type_619116;
		F.line = 563;
		give_id_157814(obj_619424);
		result_619203 = obj_619424;
	framePtr = F.prev;

	return result_619203;

}

function new_py_dict_proxy_default_619821(args_619065) {
	var result_619824 = null;

	var F={procname:"dictproxyobject.newPyDictProxyDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_619824 = new_py_dict_proxy_simple_619201();
	framePtr = F.prev;

	return result_619824;

}

function repr_py_dict_proxy_object_magic_620044(self_no_cast_620046) {
	var result_620047 = null;

	var F={procname:"dictproxyobject.reprPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_620046.m_type, NTI619110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_620201 = self_no_cast_620046;
		F.line = 45;
		if ((self_620201.dict.pyType === null)) {
		F.line = 2895;
		var e_620228 = null;
		F.line = 2896;
		e_620228 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_620228.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_620228.parent = null;
		F.line = 26;
		raiseException(e_620228, "InternalError");
		}
		
		F.line = 27;
		var fun_620402 = self_620201.dict.pyType.magicMethods.Field25;
		if ((fun_620402 === null)) {
		F.line = 29;
		var obj_type_str_620411 = self_620201.dict.pyType.name;
		F.line = 30;
		var method_str_620413 = makeNimstrLit("repr");
		F.line = 31;
		var msg_620415 = (makeNimstrLit("No ")).concat(method_str_620413,makeNimstrLit(" method for "),obj_type_str_620411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_620417 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_620417.tk = 3;
		F.line = 108;
		excp_620417.thrown = true;
		F.line = 109;
		excp_620417.msg = new_py_string_176075(msg_620415);
		var excp_620420 = excp_620417;
		F.line = 36;
		result_620047 = excp_620420;
		break BeforeRet;
		}
		
		var fun_620602 = fun_620402;
		F.line = 46;
		var res_620604 = fun_620602(self_620201.dict);
		result_620047 = res_620604;
	} while (false);
	framePtr = F.prev;

	return result_620047;

}

function str_py_dict_proxy_object_magic_620815(self_no_cast_620817) {
	var result_620818 = null;

	var F={procname:"dictproxyobject.strPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_620817.m_type, NTI619110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_621001 = self_no_cast_620817;
		F.line = 45;
		if ((self_621001.dict.pyType === null)) {
		F.line = 2895;
		var e_621028 = null;
		F.line = 2896;
		e_621028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_621028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_621028.parent = null;
		F.line = 26;
		raiseException(e_621028, "InternalError");
		}
		
		F.line = 27;
		var fun_621202 = self_621001.dict.pyType.magicMethods.Field24;
		if ((fun_621202 === null)) {
		F.line = 29;
		var obj_type_str_621211 = self_621001.dict.pyType.name;
		F.line = 30;
		var method_str_621213 = makeNimstrLit("str");
		F.line = 31;
		var msg_621215 = (makeNimstrLit("No ")).concat(method_str_621213,makeNimstrLit(" method for "),obj_type_str_621211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_621217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_621217.tk = 3;
		F.line = 108;
		excp_621217.thrown = true;
		F.line = 109;
		excp_621217.msg = new_py_string_176075(msg_621215);
		var excp_621220 = excp_621217;
		F.line = 36;
		result_620818 = excp_621220;
		break BeforeRet;
		}
		
		var fun_621402 = fun_621202;
		F.line = 46;
		var res_621404 = fun_621402(self_621001.dict);
		result_620818 = res_621404;
	} while (false);
	framePtr = F.prev;

	return result_620818;

}

function getitem_py_dict_proxy_object_magic_621615(self_no_cast_621617, other_621618) {
	var result_621619 = null;

	var F={procname:"dictproxyobject.getitemPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_621617.m_type, NTI619110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_621801 = self_no_cast_621617;
		F.line = 56;
		if ((self_621801.dict.pyType === null)) {
		F.line = 2895;
		var e_621828 = null;
		F.line = 2896;
		e_621828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_621828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_621828.parent = null;
		F.line = 26;
		raiseException(e_621828, "InternalError");
		}
		
		F.line = 27;
		var fun_622002 = self_621801.dict.pyType.magicMethods.Field32;
		if ((fun_622002 === null)) {
		F.line = 29;
		var obj_type_str_622011 = self_621801.dict.pyType.name;
		F.line = 30;
		var method_str_622013 = makeNimstrLit("getitem");
		F.line = 31;
		var msg_622015 = (makeNimstrLit("No ")).concat(method_str_622013,makeNimstrLit(" method for "),obj_type_str_622011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_622017 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_622017.tk = 3;
		F.line = 108;
		excp_622017.thrown = true;
		F.line = 109;
		excp_622017.msg = new_py_string_176075(msg_622015);
		var excp_622020 = excp_622017;
		F.line = 36;
		result_621619 = excp_622020;
		break BeforeRet;
		}
		
		var fun_622202 = fun_622002;
		F.line = 57;
		var res_622204 = fun_622202(self_621801.dict, other_621618);
		result_621619 = res_622204;
	} while (false);
	framePtr = F.prev;

	return result_621619;

}

function len_py_dict_proxy_object_magic_622415(self_no_cast_622417) {
	var result_622418 = null;

	var F={procname:"dictproxyobject.lenPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_622417.m_type, NTI619110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_622601 = self_no_cast_622417;
		F.line = 45;
		if ((self_622601.dict.pyType === null)) {
		F.line = 2895;
		var e_622628 = null;
		F.line = 2896;
		e_622628 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_622628.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_622628.parent = null;
		F.line = 26;
		raiseException(e_622628, "InternalError");
		}
		
		F.line = 27;
		var fun_622802 = self_622601.dict.pyType.magicMethods.Field23;
		if ((fun_622802 === null)) {
		F.line = 29;
		var obj_type_str_622811 = self_622601.dict.pyType.name;
		F.line = 30;
		var method_str_622813 = makeNimstrLit("len");
		F.line = 31;
		var msg_622815 = (makeNimstrLit("No ")).concat(method_str_622813,makeNimstrLit(" method for "),obj_type_str_622811,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_622817 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_622817.tk = 3;
		F.line = 108;
		excp_622817.thrown = true;
		F.line = 109;
		excp_622817.msg = new_py_string_176075(msg_622815);
		var excp_622820 = excp_622817;
		F.line = 36;
		result_622418 = excp_622820;
		break BeforeRet;
		}
		
		var fun_623002 = fun_622802;
		F.line = 46;
		var res_623004 = fun_623002(self_622601.dict);
		result_622418 = res_623004;
	} while (false);
	framePtr = F.prev;

	return result_622418;

}

function init_py_dict_proxy_object_magic_623215(self_no_cast_623217, args_623231) {
	var result_623232 = null;

	var F={procname:"dictproxyobject.initPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_623231 != null ? args_623231.length : 0) == 1))) {
		F.line = 190;
		var msg_623244 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_623249 = mnewString(0);
		F.line = 192;
		if (fmt_res_623249 != null) { fmt_res_623249 = (fmt_res_623249).concat(makeNimstrLit(" argument (")); } else { fmt_res_623249 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_623249 != null) { fmt_res_623249 = (fmt_res_623249).concat(cstrToNimstr(((args_623231 != null ? args_623231.length : 0))+"")); } else { fmt_res_623249 = cstrToNimstr(((args_623231 != null ? args_623231.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_623249 != null) { fmt_res_623249 = (fmt_res_623249).concat(makeNimstrLit(" given)")); } else { fmt_res_623249 = makeNimstrLit(" given)"); };
		msg_623244 = nimCopy(null, (makeNimstrLit("init takes exactly 1")).concat(fmt_res_623249), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_623410 = mnewString(0);
			F.line = 194;
			if (fmt_res_623410 != null) { fmt_res_623410 = (fmt_res_623410).concat(makeNimstrLit(" argument (")); } else { fmt_res_623410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_623410 != null) { fmt_res_623410 = (fmt_res_623410).concat(cstrToNimstr(((args_623231 != null ? args_623231.length : 0))+"")); } else { fmt_res_623410 = cstrToNimstr(((args_623231 != null ? args_623231.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_623410 != null) { fmt_res_623410 = (fmt_res_623410).concat(makeNimstrLit(" given)")); } else { fmt_res_623410 = makeNimstrLit(" given)"); };
			msg_623244 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_623410), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_623609 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_623609.tk = 3;
		F.line = 108;
		excp_623609.thrown = true;
		F.line = 109;
		excp_623609.msg = new_py_string_176075(msg_623244);
		result_623232 = excp_623609;
		break BeforeRet;
		}
		
		F.line = 230;
		var mapping_623611 = args_623231[chckIndx(0, 0, args_623231.length+0-1)-0];
		if (!(isObj(self_no_cast_623217.m_type, NTI619110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_623801 = self_no_cast_623217;
		F.line = 23;
		self_623801.dict = mapping_623611;
		result_623232 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_623232;

}
var py_dict_proxy_object_type_619116 = new_py_type_159261(makeNimstrLit("DictProxy"));
py_dict_proxy_object_type_619116.magicMethods.Field26 = new_py_dict_proxy_default_619821;
py_dict_proxy_object_type_619116.magicMethods.Field25 = repr_py_dict_proxy_object_magic_620044;
py_dict_proxy_object_type_619116.magicMethods.Field24 = str_py_dict_proxy_object_magic_620815;
py_dict_proxy_object_type_619116.magicMethods.Field32 = getitem_py_dict_proxy_object_magic_621615;
py_dict_proxy_object_type_619116.magicMethods.Field23 = len_py_dict_proxy_object_magic_622415;
py_dict_proxy_object_type_619116.magicMethods.Field27 = init_py_dict_proxy_object_magic_623215;

function repr_py_type_object_magic_624363(self_no_cast_624365) {
	var result_624366 = null;

	var F={procname:"typeobject.reprPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_624365.m_type, NTI157280))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 438;
		var self_624401 = self_no_cast_624365;
		result_624366 = new_py_string_176075(self_624401.name);
	framePtr = F.prev;

	return result_624366;

}

function str_py_type_object_magic_624416(self_no_cast_624418) {
	var result_624419 = null;

	var F={procname:"typeobject.strPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_624418.m_type, NTI157280))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 438;
		var self_624601 = self_no_cast_624418;
		F.line = 34;
		var fmt_res_624604 = mnewString(0);
		F.line = 34;
		if (fmt_res_624604 != null) { fmt_res_624604 = (fmt_res_624604).concat(makeNimstrLit("<class \'")); } else { fmt_res_624604 = makeNimstrLit("<class \'"); };
		F.line = 260;
		if (fmt_res_624604 != null) { fmt_res_624604 = (fmt_res_624604).concat(self_624601.name); } else { fmt_res_624604 = self_624601.name.slice(); };
		F.line = 34;
		if (fmt_res_624604 != null) { fmt_res_624604 = (fmt_res_624604).concat(makeNimstrLit("\'>")); } else { fmt_res_624604 = makeNimstrLit("\'>"); };
		result_624419 = new_py_string_176075(fmt_res_624604);
	framePtr = F.prev;

	return result_624419;

}

function raw_get_625579(t_625584, key_625586, hc_625588, hc_625588_Idx) {
						var Tmp3;

	var result_625589 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_625588[hc_625588_Idx] = hash_143900(key_625586);
		if ((hc_625588[hc_625588_Idx] == 0)) {
		F.line = 45;
		hc_625588[hc_625588_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_625601 = (hc_625588[hc_625588_Idx] & (t_625584.data != null ? (t_625584.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_625584.data[chckIndx(h_625601, 0, t_625584.data.length+0-1)-0].Field0)) break L2;
						if (!(t_625584.data[chckIndx(h_625601, 0, t_625584.data.length+0-1)-0].Field0 == hc_625588[hc_625588_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_625584.data[chckIndx(h_625601, 0, t_625584.data.length+0-1)-0].Field1, key_625586);						}					if (Tmp3) {
					F.line = 38;
					result_625589 = h_625601;
					break BeforeRet;
					}
					
					F.line = 39;
					h_625601 = next_try_146614(h_625601, (t_625584.data != null ? (t_625584.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_625589 = subInt(-1, h_625601);
	} while (false);
	framePtr = F.prev;

	return result_625589;

}

function raw_insert_627823(t_627830, data_627834, data_627834_Idx, key_627836, val_627838, hc_627840, h_627842) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_627834[data_627834_Idx][chckIndx(h_627842, 0, data_627834[data_627834_Idx].length+0-1)-0].Field1 = nimCopy(null, key_627836, NTI138);
		F.line = 65;
		nimCopy(data_627834[data_627834_Idx][chckIndx(h_627842, 0, data_627834[data_627834_Idx].length+0-1)-0].Field2, val_627838, NTI157318);
		F.line = 66;
		data_627834[data_627834_Idx][chckIndx(h_627842, 0, data_627834[data_627834_Idx].length+0-1)-0].Field0 = hc_627840;
	framePtr = F.prev;

	
}

function enlarge_626693(t_626700) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_626708 = null;
		F.line = 314;
		n_626708 = new Array(chckRange(mulInt((t_626700.data != null ? t_626700.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_626700.data != null ? t_626700.data.length : 0), 2), 0, 2147483647);++i) {n_626708[i]={Field0: 0, Field1: null, Field2: {Field0: null, Field1: null}};}		F.line = 315;
		var Tmp1 = t_626700.data; t_626700.data = n_626708; n_626708 = Tmp1;		L2: do {
			F.line = 316;
			var i_626921 = 0;
			F.line = 2088;
			var colontmp__628510 = 0;
			F.line = 316;
			colontmp__628510 = (n_626708 != null ? (n_626708.length-1) : -1);
			F.line = 2094;
			var res_628513 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_628513 <= colontmp__628510)) break L4;
						F.line = 2096;
						i_626921 = res_628513;
						F.line = 317;
						var eh_627139 = n_626708[chckIndx(i_626921, 0, n_626708.length+0-1)-0].Field0;
						if (is_filled_146491(eh_627139)) {
						F.line = 319;
						var j_627148 = (eh_627139 & (t_626700.data != null ? (t_626700.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_626700.data[chckIndx(j_627148, 0, t_626700.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_627148 = next_try_146614(j_627148, (t_626700.data != null ? (t_626700.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_627823(t_626700, t_626700, "data", n_626708[chckIndx(i_626921, 0, n_626708.length+0-1)-0].Field1, n_626708[chckIndx(i_626921, 0, n_626708.length+0-1)-0].Field2, eh_627139, j_627148);
						}
						
						F.line = 2097;
						res_628513 = addInt(res_628513, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_628531(t_628536, key_628538, hc_628540) {
	var result_628541 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_628550 = (hc_628540 & (t_628536.data != null ? (t_628536.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_628536.data[chckIndx(h_628550, 0, t_628536.data.length+0-1)-0].Field0)) break L2;
					if (((t_628536.data[chckIndx(h_628550, 0, t_628536.data.length+0-1)-0].Field0 == hc_628540) && eqStrings(t_628536.data[chckIndx(h_628550, 0, t_628536.data.length+0-1)-0].Field1, key_628538))) {
					F.line = 38;
					result_628541 = h_628550;
					break BeforeRet;
					}
					
					F.line = 39;
					h_628550 = next_try_146614(h_628550, (t_628536.data != null ? (t_628536.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_628541 = subInt(-1, h_628550);
	} while (false);
	framePtr = F.prev;

	return result_628541;

}

function HEX5BHEX5DHEX3D_625565(t_625572, key_625574, val_625576) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_625577 = [0];
		F.line = 98;
		var index_626279 = raw_get_625579(t_625572, key_625574, hc_625577, 0);
		if ((0 <= index_626279)) {
		F.line = 99;
		nimCopy(t_625572.data[chckIndx(index_626279, 0, t_625572.data.length+0-1)-0].Field2, val_625576, NTI157318);
		}
		else {
			if (must_rehash_146509((t_625572.data != null ? t_625572.data.length : 0), t_625572.counter)) {
			F.line = 90;
			enlarge_626693(t_625572);
			F.line = 91;
			index_626279 = raw_get_known_hc_628531(t_625572, key_625574, hc_625577[0]);
			}
			
			F.line = 92;
			index_626279 = subInt(-1, index_626279);
			F.line = 93;
			raw_insert_627823(t_625572, t_625572, "data", key_625574, val_625576, hc_625577[0], index_626279);
			F.line = 100;
			t_625572.counter = addInt(t_625572.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function new_py_dict_proxy_623829(mapping_623831) {
	var result_623832 = null;

	var F={procname:"dictproxyobject.newPyDictProxy",prev:framePtr,filename:"../Objects/dictproxyobject.nim",line:0};
	framePtr = F;
		F.line = 27;
		F.line = 27;
		var d_623833 = new_py_dict_proxy_simple_619201();
		F.line = 28;
		d_623833.dict = mapping_623831;
		result_623832 = d_623833;
	framePtr = F.prev;

	return result_623832;

}

function dict_py_type_object_getter_624815(self_no_cast_624817) {
	var result_624818 = null;

	var F={procname:"typeobject.dictPyTypeObjectGetter",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 450;
		if (!(isObj(self_no_cast_624817.m_type, NTI157280))) {
		F.line = 450;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(450, 32) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 450;
		var self_625001 = self_no_cast_624817;
		result_624818 = new_py_dict_proxy_623829(self_625001.dict);
	framePtr = F.prev;

	return result_624818;

}

function dict_py_type_object_setter_625016(self_no_cast_625018, other_625019) {
	var result_625020 = null;

	var F={procname:"typeobject.dictPyTypeObjectSetter",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 456;
		if (!(isObj(self_no_cast_625018.m_type, NTI157280))) {
		F.line = 456;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(456, 32) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 456;
		var self_625201 = self_no_cast_625018;
		F.line = 106;
		var excp_625402 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_625402.tk = 3;
		F.line = 108;
		excp_625402.thrown = true;
		F.line = 109;
		F.line = 40;
		var fmt_res_625205 = mnewString(0);
		F.line = 40;
		if (fmt_res_625205 != null) { fmt_res_625205 = (fmt_res_625205).concat(makeNimstrLit("can\'t set attributes of built-in/extension type ")); } else { fmt_res_625205 = makeNimstrLit("can\'t set attributes of built-in/extension type "); };
		F.line = 260;
		if (fmt_res_625205 != null) { fmt_res_625205 = (fmt_res_625205).concat(self_625201.name); } else { fmt_res_625205 = self_625201.name.slice(); };
		excp_625402.msg = new_py_string_176075(fmt_res_625205);
		result_625020 = excp_625402;
	framePtr = F.prev;

	return result_625020;

}
var magic_name_strs_624041 = [null];
L18: do {
	var name_624102 = [null];
	var i_629290 = 0;
	if ((i_629290 <= 37)) {
	L19: do {
			L20: while (true) {
			if (!true) break L20;
				name_624102[0] = magic_names_157558[i_629290];
				if (magic_name_strs_624041[0] != null) { magic_name_strs_624041[0].push(new_py_str_176092(name_624102[0])); } else { magic_name_strs_624041[0] = [new_py_str_176092(name_624102[0])]; };
				if ((37 <= i_629290)) {
				break L19;
				}
				
				i_629290 += 1;
			}
	} while(false);
	}
	
} while(false);
var py_type_object_type_624361 = new_py_type_159261(makeNimstrLit("type"));
py_type_object_type_624361.kind = 7;
py_type_object_type_624361.magicMethods.Field25 = repr_py_type_object_magic_624363;
py_type_object_type_624361.magicMethods.Field24 = str_py_type_object_magic_624416;
HEX5BHEX5DHEX3D_625565(py_type_object_type_624361.getsetDescr, makeNimstrLit("__dict__"), {Field0: dict_py_type_object_getter_624815, Field1: dict_py_type_object_setter_625016});

function default_le_629321(o1_629323, o2_629324) {
	var result_629325 = null;

	var F={procname:"typeobject.defaultLe",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 49;
		F.line = 49;
		F.line = 56;
		if ((o1_629323.pyType === null)) {
		F.line = 2895;
		var e_629352 = null;
		F.line = 2896;
		e_629352 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_629352.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_629352.parent = null;
		F.line = 26;
		raiseException(e_629352, "InternalError");
		}
		
		F.line = 27;
		var fun_629402 = o1_629323.pyType.magicMethods.Field16;
		if ((fun_629402 === null)) {
		F.line = 29;
		var obj_type_str_629411 = o1_629323.pyType.name;
		F.line = 30;
		var method_str_629413 = makeNimstrLit("lt");
		F.line = 31;
		var msg_629415 = (makeNimstrLit("No ")).concat(method_str_629413,makeNimstrLit(" method for "),obj_type_str_629411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_629417 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_629417.tk = 3;
		F.line = 108;
		excp_629417.thrown = true;
		F.line = 109;
		excp_629417.msg = new_py_string_176075(msg_629415);
		var excp_629420 = excp_629417;
		F.line = 36;
		result_629325 = excp_629420;
		break BeforeRet;
		}
		
		var fun_629602 = fun_629402;
		F.line = 57;
		var res_629604 = fun_629602(o1_629323, o2_629324);
		var lt_629801 = res_629604;
		F.line = 50;
		F.line = 56;
		if ((o1_629323.pyType === null)) {
		F.line = 2895;
		var e_629828 = null;
		F.line = 2896;
		e_629828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_629828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_629828.parent = null;
		F.line = 26;
		raiseException(e_629828, "InternalError");
		}
		
		F.line = 27;
		var fun_630002 = o1_629323.pyType.magicMethods.Field18;
		if ((fun_630002 === null)) {
		F.line = 29;
		var obj_type_str_630011 = o1_629323.pyType.name;
		F.line = 30;
		var method_str_630013 = makeNimstrLit("eq");
		F.line = 31;
		var msg_630015 = (makeNimstrLit("No ")).concat(method_str_630013,makeNimstrLit(" method for "),obj_type_str_630011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_630017 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_630017.tk = 3;
		F.line = 108;
		excp_630017.thrown = true;
		F.line = 109;
		excp_630017.msg = new_py_string_176075(msg_630015);
		var excp_630020 = excp_630017;
		F.line = 36;
		result_629325 = excp_630020;
		break BeforeRet;
		}
		
		var fun_630202 = fun_630002;
		F.line = 57;
		var res_630204 = fun_630202(o1_629323, o2_629324);
		var eq_630401 = res_630204;
		F.line = 56;
		if ((lt_629801.pyType === null)) {
		F.line = 2895;
		var e_630428 = null;
		F.line = 2896;
		e_630428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_630428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_630428.parent = null;
		F.line = 26;
		raiseException(e_630428, "InternalError");
		}
		
		F.line = 27;
		var fun_630602 = lt_629801.pyType.magicMethods.Field15;
		if ((fun_630602 === null)) {
		F.line = 29;
		var obj_type_str_630611 = lt_629801.pyType.name;
		F.line = 30;
		var method_str_630613 = makeNimstrLit("Or");
		F.line = 31;
		var msg_630615 = (makeNimstrLit("No ")).concat(method_str_630613,makeNimstrLit(" method for "),obj_type_str_630611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_630617 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_630617.tk = 3;
		F.line = 108;
		excp_630617.thrown = true;
		F.line = 109;
		excp_630617.msg = new_py_string_176075(msg_630615);
		var excp_630620 = excp_630617;
		F.line = 36;
		result_629325 = excp_630620;
		break BeforeRet;
		}
		
		var fun_630802 = fun_630602;
		F.line = 57;
		var res_630804 = fun_630802(lt_629801, eq_630401);
		result_629325 = res_630804;
	} while (false);
	framePtr = F.prev;

	return result_629325;

}

function default_ne_631014(o1_631016, o2_631017) {
	var result_631018 = null;

	var F={procname:"typeobject.defaultNe",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 54;
		F.line = 54;
		F.line = 56;
		if ((o1_631016.pyType === null)) {
		F.line = 2895;
		var e_631045 = null;
		F.line = 2896;
		e_631045 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_631045.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_631045.parent = null;
		F.line = 26;
		raiseException(e_631045, "InternalError");
		}
		
		F.line = 27;
		var fun_631202 = o1_631016.pyType.magicMethods.Field18;
		if ((fun_631202 === null)) {
		F.line = 29;
		var obj_type_str_631211 = o1_631016.pyType.name;
		F.line = 30;
		var method_str_631213 = makeNimstrLit("eq");
		F.line = 31;
		var msg_631215 = (makeNimstrLit("No ")).concat(method_str_631213,makeNimstrLit(" method for "),obj_type_str_631211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_631217 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_631217.tk = 3;
		F.line = 108;
		excp_631217.thrown = true;
		F.line = 109;
		excp_631217.msg = new_py_string_176075(msg_631215);
		var excp_631220 = excp_631217;
		F.line = 36;
		result_631018 = excp_631220;
		break BeforeRet;
		}
		
		var fun_631402 = fun_631202;
		F.line = 57;
		var res_631404 = fun_631402(o1_631016, o2_631017);
		var eq_631601 = res_631404;
		F.line = 45;
		if ((eq_631601.pyType === null)) {
		F.line = 2895;
		var e_631628 = null;
		F.line = 2896;
		e_631628 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_631628.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_631628.parent = null;
		F.line = 26;
		raiseException(e_631628, "InternalError");
		}
		
		F.line = 27;
		var fun_631802 = eq_631601.pyType.magicMethods.Field7;
		if ((fun_631802 === null)) {
		F.line = 29;
		var obj_type_str_631811 = eq_631601.pyType.name;
		F.line = 30;
		var method_str_631813 = makeNimstrLit("Not");
		F.line = 31;
		var msg_631815 = (makeNimstrLit("No ")).concat(method_str_631813,makeNimstrLit(" method for "),obj_type_str_631811,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_631817 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_631817.tk = 3;
		F.line = 108;
		excp_631817.thrown = true;
		F.line = 109;
		excp_631817.msg = new_py_string_176075(msg_631815);
		var excp_631820 = excp_631817;
		F.line = 36;
		result_631018 = excp_631820;
		break BeforeRet;
		}
		
		var fun_632002 = fun_631802;
		F.line = 46;
		var res_632004 = fun_632002(eq_631601);
		result_631018 = res_632004;
	} while (false);
	framePtr = F.prev;

	return result_631018;

}

function default_ge_632214(o1_632216, o2_632217) {
	var result_632218 = null;

	var F={procname:"typeobject.defaultGe",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 58;
		F.line = 58;
		F.line = 56;
		if ((o1_632216.pyType === null)) {
		F.line = 2895;
		var e_632245 = null;
		F.line = 2896;
		e_632245 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_632245.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_632245.parent = null;
		F.line = 26;
		raiseException(e_632245, "InternalError");
		}
		
		F.line = 27;
		var fun_632402 = o1_632216.pyType.magicMethods.Field20;
		if ((fun_632402 === null)) {
		F.line = 29;
		var obj_type_str_632411 = o1_632216.pyType.name;
		F.line = 30;
		var method_str_632413 = makeNimstrLit("gt");
		F.line = 31;
		var msg_632415 = (makeNimstrLit("No ")).concat(method_str_632413,makeNimstrLit(" method for "),obj_type_str_632411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_632417 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_632417.tk = 3;
		F.line = 108;
		excp_632417.thrown = true;
		F.line = 109;
		excp_632417.msg = new_py_string_176075(msg_632415);
		var excp_632420 = excp_632417;
		F.line = 36;
		result_632218 = excp_632420;
		break BeforeRet;
		}
		
		var fun_632602 = fun_632402;
		F.line = 57;
		var res_632604 = fun_632602(o1_632216, o2_632217);
		var gt_632801 = res_632604;
		F.line = 59;
		F.line = 56;
		if ((o1_632216.pyType === null)) {
		F.line = 2895;
		var e_632828 = null;
		F.line = 2896;
		e_632828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_632828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_632828.parent = null;
		F.line = 26;
		raiseException(e_632828, "InternalError");
		}
		
		F.line = 27;
		var fun_633002 = o1_632216.pyType.magicMethods.Field18;
		if ((fun_633002 === null)) {
		F.line = 29;
		var obj_type_str_633011 = o1_632216.pyType.name;
		F.line = 30;
		var method_str_633013 = makeNimstrLit("eq");
		F.line = 31;
		var msg_633015 = (makeNimstrLit("No ")).concat(method_str_633013,makeNimstrLit(" method for "),obj_type_str_633011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_633017 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_633017.tk = 3;
		F.line = 108;
		excp_633017.thrown = true;
		F.line = 109;
		excp_633017.msg = new_py_string_176075(msg_633015);
		var excp_633020 = excp_633017;
		F.line = 36;
		result_632218 = excp_633020;
		break BeforeRet;
		}
		
		var fun_633202 = fun_633002;
		F.line = 57;
		var res_633204 = fun_633202(o1_632216, o2_632217);
		var eq_633401 = res_633204;
		F.line = 56;
		if ((gt_632801.pyType === null)) {
		F.line = 2895;
		var e_633428 = null;
		F.line = 2896;
		e_633428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_633428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_633428.parent = null;
		F.line = 26;
		raiseException(e_633428, "InternalError");
		}
		
		F.line = 27;
		var fun_633602 = gt_632801.pyType.magicMethods.Field15;
		if ((fun_633602 === null)) {
		F.line = 29;
		var obj_type_str_633611 = gt_632801.pyType.name;
		F.line = 30;
		var method_str_633613 = makeNimstrLit("Or");
		F.line = 31;
		var msg_633615 = (makeNimstrLit("No ")).concat(method_str_633613,makeNimstrLit(" method for "),obj_type_str_633611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_633617 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_633617.tk = 3;
		F.line = 108;
		excp_633617.thrown = true;
		F.line = 109;
		excp_633617.msg = new_py_string_176075(msg_633615);
		var excp_633620 = excp_633617;
		F.line = 36;
		result_632218 = excp_633620;
		break BeforeRet;
		}
		
		var fun_633802 = fun_633602;
		F.line = 57;
		var res_633804 = fun_633802(gt_632801, eq_633401);
		result_632218 = res_633804;
	} while (false);
	framePtr = F.prev;

	return result_632218;

}

function get_type_dict_629304(obj_629306) {
	var result_629307 = null;

	var F={procname:"typeobject.getTypeDict",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		F.line = 45;
		result_629307 = obj_629306.pyType.dict;
	framePtr = F.prev;

	return result_629307;

}

function has_dict_159278(obj_159280) {
	var result_159281 = false;

	var F={procname:"pyobjectBase.hasDict",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 204;
		result_159281 = isObj(obj_159280.m_type, NTI157277);
	framePtr = F.prev;

	return result_159281;

}

function get_dict_159307(obj_159309) {
	var result_159310 = null;

	var F={procname:"pyobjectBase.getDict",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 207;
		if (!(has_dict_159278(obj_159309))) {
		F.line = 2895;
		var e_159316 = null;
		F.line = 2896;
		e_159316 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 208;
		e_159316.message = nimCopy(null, makeNimstrLit("obj has no dict. Use hasDict before getDict"), NTI138);
		F.line = 2891;
		e_159316.parent = null;
		F.line = 208;
		raiseException(e_159316, "InternalError");
		}
		
		result_159310 = obj_159309.dict;
	framePtr = F.prev;

	return result_159310;

}

function get_attr_634414(self_634416, name_obj_634417) {
	var result_634418 = null;

	var F={procname:"typeobject.getAttr",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(of_py_str_object_175092(name_obj_634417))) {
		F.line = 68;
		var type_str_634419 = nimCopy(null, name_obj_634417.pyType.name, NTI138);
		F.line = 69;
		F.line = 69;
		var fmt_res_634422 = mnewString(0);
		F.line = 69;
		if (fmt_res_634422 != null) { fmt_res_634422 = (fmt_res_634422).concat(makeNimstrLit("attribute name must be string, not ")); } else { fmt_res_634422 = makeNimstrLit("attribute name must be string, not "); };
		F.line = 260;
		if (fmt_res_634422 != null) { fmt_res_634422 = (fmt_res_634422).concat(type_str_634419); } else { fmt_res_634422 = type_str_634419.slice(); };
		var msg_634601 = nimCopy(null, fmt_res_634422, NTI138);
		F.line = 70;
		F.line = 106;
		var excp_634603 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_634603.tk = 3;
		F.line = 108;
		excp_634603.thrown = true;
		F.line = 109;
		excp_634603.msg = new_py_string_176075(msg_634601);
		result_634418 = excp_634603;
		break BeforeRet;
		}
		
		F.line = 71;
		var name_634605 = name_obj_634417;
		F.line = 72;
		var type_dict_634606 = get_type_dict_629304(self_634416);
		if ((type_dict_634606 === null)) {
		F.line = 2895;
		var e_634619 = null;
		F.line = 2896;
		e_634619 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 74;
		e_634619.message = nimCopy(null, makeNimstrLit("for type object dict must not be nil"), NTI138);
		F.line = 2891;
		e_634619.parent = null;
		F.line = 74;
		raiseException(e_634619, "InternalError");
		}
		
		F.line = 75;
		var descr_634801 = null;
		if (has_key_532437(type_dict_634606, name_634605)) {
		F.line = 77;
		descr_634801 = HEX5BHEX5D_533323(type_dict_634606, name_634605);
		F.line = 78;
		var descr_get_634802 = descr_634801.pyType.magicMethods.Field34;
		if (!((descr_get_634802 === null))) {
		F.line = 80;
		result_634418 = descr_get_634802(descr_634801, self_634416);
		break BeforeRet;
		}
		
		}
		
		if (has_dict_159278(self_634416)) {
		F.line = 83;
		var inst_dict_634809 = get_dict_159307(self_634416);
		if (has_key_532437(inst_dict_634809, name_634605)) {
		F.line = 85;
		result_634418 = HEX5BHEX5D_533323(inst_dict_634809, name_634605);
		break BeforeRet;
		}
		
		}
		
		if (!((descr_634801 === null))) {
		F.line = 88;
		result_634418 = descr_634801;
		break BeforeRet;
		}
		
		F.line = 90;
		F.line = 125;
		var msg_634821 = (self_634416.pyType.name).concat(makeNimstrLit(" has no attribute "),HEX24_157579(name_634605));
		F.line = 106;
		var excp_634823 = new_py_attribute_error_simple_361601();
		F.line = 107;
		excp_634823.tk = 4;
		F.line = 108;
		excp_634823.thrown = true;
		F.line = 109;
		excp_634823.msg = new_py_string_176075(msg_634821);
		result_634418 = excp_634823;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_634418;

}

function set_attr_634838(self_634840, name_obj_634841, value_634842) {
	var result_634843 = null;

	var F={procname:"typeobject.setAttr",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(of_py_str_object_175092(name_obj_634841))) {
		F.line = 95;
		var type_str_634844 = nimCopy(null, name_obj_634841.pyType.name, NTI138);
		F.line = 96;
		F.line = 96;
		var fmt_res_634847 = mnewString(0);
		F.line = 96;
		if (fmt_res_634847 != null) { fmt_res_634847 = (fmt_res_634847).concat(makeNimstrLit("attribute name must be string, not ")); } else { fmt_res_634847 = makeNimstrLit("attribute name must be string, not "); };
		F.line = 260;
		if (fmt_res_634847 != null) { fmt_res_634847 = (fmt_res_634847).concat(type_str_634844); } else { fmt_res_634847 = type_str_634844.slice(); };
		var msg_635001 = nimCopy(null, fmt_res_634847, NTI138);
		F.line = 97;
		F.line = 106;
		var excp_635003 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_635003.tk = 3;
		F.line = 108;
		excp_635003.thrown = true;
		F.line = 109;
		excp_635003.msg = new_py_string_176075(msg_635001);
		result_634843 = excp_635003;
		break BeforeRet;
		}
		
		F.line = 98;
		var name_635005 = name_obj_634841;
		F.line = 99;
		var type_dict_635006 = get_type_dict_629304(self_634840);
		if ((type_dict_635006 === null)) {
		F.line = 2895;
		var e_635019 = null;
		F.line = 2896;
		e_635019 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 101;
		e_635019.message = nimCopy(null, makeNimstrLit("for type object dict must not be nil"), NTI138);
		F.line = 2891;
		e_635019.parent = null;
		F.line = 101;
		raiseException(e_635019, "InternalError");
		}
		
		F.line = 102;
		var descr_635201 = null;
		if (has_key_532437(type_dict_635006, name_635005)) {
		F.line = 104;
		descr_635201 = HEX5BHEX5D_533323(type_dict_635006, name_635005);
		F.line = 105;
		var descr_set_635202 = descr_635201.pyType.magicMethods.Field35;
		if (!((descr_set_635202 === null))) {
		F.line = 107;
		result_634843 = descr_set_635202(descr_635201, self_634840, value_634842);
		break BeforeRet;
		}
		
		}
		
		if (has_dict_159278(self_634840)) {
		F.line = 110;
		var inst_dict_635209 = get_dict_159307(self_634840);
		F.line = 111;
		HEX5BHEX5DHEX3D_533842(inst_dict_635209, name_635005, value_634842);
		F.line = 112;
		result_634843 = py_none_356044;
		break BeforeRet;
		}
		
		F.line = 114;
		F.line = 125;
		var msg_635214 = (self_634840.pyType.name).concat(makeNimstrLit(" has no attribute "),HEX24_157579(name_635005));
		F.line = 106;
		var excp_635216 = new_py_attribute_error_simple_361601();
		F.line = 107;
		excp_635216.tk = 4;
		F.line = 108;
		excp_635216.thrown = true;
		F.line = 109;
		excp_635216.msg = new_py_string_176075(msg_635214);
		result_634843 = excp_635216;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_634843;

}

function repr_default_634014(self_634016) {
	var result_634017 = null;

	var F={procname:"typeobject.reprDefault",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		F.line = 63;
		F.line = 63;
		var fmt_res_634020 = mnewString(0);
		F.line = 63;
		if (fmt_res_634020 != null) { fmt_res_634020 = (fmt_res_634020).concat(makeNimstrLit("<")); } else { fmt_res_634020 = makeNimstrLit("<"); };
		F.line = 260;
		if (fmt_res_634020 != null) { fmt_res_634020 = (fmt_res_634020).concat(self_634016.pyType.name); } else { fmt_res_634020 = self_634016.pyType.name.slice(); };
		F.line = 63;
		if (fmt_res_634020 != null) { fmt_res_634020 = (fmt_res_634020).concat(makeNimstrLit(" at ")); } else { fmt_res_634020 = makeNimstrLit(" at "); };
		F.line = 260;
		if (fmt_res_634020 != null) { fmt_res_634020 = (fmt_res_634020).concat(id_str_158001(self_634016)); } else { fmt_res_634020 = id_str_158001(self_634016).slice(); };
		F.line = 63;
		if (fmt_res_634020 != null) { fmt_res_634020 = (fmt_res_634020).concat(makeNimstrLit(">")); } else { fmt_res_634020 = makeNimstrLit(">"); };
		result_634017 = new_py_string_176075(fmt_res_634020);
	framePtr = F.prev;

	return result_634017;

}

function add_generic_635231(t_635233) {
			var Tmp1;
			var Tmp2;

	var F={procname:"typeobject.addGeneric",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
			if (!!((t_635233.magicMethods.Field16 === null))) Tmp1 = false; else {				Tmp1 = !((t_635233.magicMethods.Field18 === null));			}		if (Tmp1) {
		if ((t_635233.magicMethods.Field17 === null)) {
		F.line = 126;
		t_635233.magicMethods.Field17 = default_le_629321;
		}
		
		}
		
		if (!((t_635233.magicMethods.Field18 === null))) {
		if ((t_635233.magicMethods.Field19 === null)) {
		F.line = 128;
		t_635233.magicMethods.Field19 = default_ne_631014;
		}
		
		}
		
			if (!!((t_635233.magicMethods.Field21 === null))) Tmp2 = false; else {				Tmp2 = !((t_635233.magicMethods.Field18 === null));			}		if (Tmp2) {
		if ((t_635233.magicMethods.Field21 === null)) {
		F.line = 130;
		t_635233.magicMethods.Field21 = default_ge_632214;
		}
		
		}
		
		if ((t_635233.magicMethods.Field28 === null)) {
		F.line = 131;
		t_635233.magicMethods.Field28 = get_attr_634414;
		}
		
		if ((t_635233.magicMethods.Field29 === null)) {
		F.line = 132;
		t_635233.magicMethods.Field29 = set_attr_634838;
		}
		
		if ((t_635233.magicMethods.Field25 === null)) {
		F.line = 133;
		t_635233.magicMethods.Field25 = repr_default_634014;
		}
		
		if ((t_635233.magicMethods.Field24 === null)) {
		F.line = 134;
		t_635233.magicMethods.Field24 = t_635233.magicMethods.Field25;
		}
		
	framePtr = F.prev;

	
}

function new_py_static_method_554429(callable_554431) {
	var result_554432 = null;

	var F={procname:"funcobject.newPyStaticMethod",prev:framePtr,filename:"../Objects/funcobject.nim",line:0};
	framePtr = F;
		F.line = 56;
		result_554432 = new_py_static_method_simple_552801();
		F.line = 57;
		result_554432.callable = callable_554431;
	framePtr = F.prev;

	return result_554432;

}

function new_py_method_descr_613221(t_613216, meth_613218, name_613220) {
	var result_613223 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_613223 = new_py_method_descr_simple_612201();
		F.line = 27;
		result_613223.dType = t_613216;
		F.line = 28;
		result_613223.kind = 2;
		if (!(!((result_613223.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_613223.meth = meth_613218;
		F.line = 31;
		result_613223.name = name_613220;
	framePtr = F.prev;

	return result_613223;

}

function new_py_method_descr_613078(t_613073, meth_613075, name_613077) {
	var result_613080 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_613080 = new_py_method_descr_simple_612201();
		F.line = 27;
		result_613080.dType = t_613073;
		F.line = 28;
		result_613080.kind = 1;
		if (!(!((result_613080.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_613080.meth = meth_613075;
		F.line = 31;
		result_613080.name = name_613077;
	framePtr = F.prev;

	return result_613080;

}

function new_py_method_descr_613828(t_613830, meth_613831, name_613832) {
	var result_613833 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_613839 = null;
		F.line = 2896;
		e_613839 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 43;
		e_613839.message = nimCopy(null, makeNimstrLit("bltin function shouldn\'t be method. This is a placeholder to fool the compiler"), NTI138);
		F.line = 2891;
		e_613839.parent = null;
		F.line = 43;
		raiseException(e_613839, "InternalError");
	framePtr = F.prev;

	return result_613833;

}

function new_py_method_descr_613621(t_613616, meth_613618, name_613620) {
	var result_613623 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_613623 = new_py_method_descr_simple_612201();
		F.line = 27;
		result_613623.dType = t_613616;
		F.line = 28;
		result_613623.kind = 4;
		if (!(!((result_613623.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_613623.meth = meth_613618;
		F.line = 31;
		result_613623.name = name_613620;
	framePtr = F.prev;

	return result_613623;

}

function new_py_method_descr_613421(t_613416, meth_613418, name_613420) {
	var result_613423 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_613423 = new_py_method_descr_simple_612201();
		F.line = 27;
		result_613423.dType = t_613416;
		F.line = 28;
		result_613423.kind = 3;
		if (!(!((result_613423.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_613423.meth = meth_613418;
		F.line = 31;
		result_613423.name = name_613420;
	framePtr = F.prev;

	return result_613423;

}

function new_py_get_set_descr_616229(getter_616231, setter_616232) {
	var result_616233 = null;

	var F={procname:"descrobject.newPyGetSetDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 79;
		F.line = 79;
		var descr_616234 = new_py_get_set_descr_simple_615001();
		F.line = 80;
		descr_616234.getter = getter_616231;
		F.line = 81;
		descr_616234.setter = setter_616232;
		result_616233 = descr_616234;
	framePtr = F.prev;

	return result_616233;

}

function init_type_dict_635342(tp_635344) {
	var F={procname:"typeobject.initTypeDict",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		if (!((tp_635344.dict === null))) {
		F.line = 139;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/typeobject.nim(139, 10) `isNil(tp.dict)` "));
		}
		
		F.line = 140;
		var d_635401 = new_py_dict_532257();
		F.line = 143;
		var i_635404 = -1;
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field0"] === null))) {
		F.line = 147;
		var name_py_str_635426 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635426, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field0"], name_py_str_635426, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635426, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field0"], name_py_str_635426));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field1"] === null))) {
		F.line = 147;
		var name_py_str_635444 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635444, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field1"], name_py_str_635444, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635444, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field1"], name_py_str_635444));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field2"] === null))) {
		F.line = 147;
		var name_py_str_635462 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635462, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field2"], name_py_str_635462, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635462, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field2"], name_py_str_635462));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field3"] === null))) {
		F.line = 147;
		var name_py_str_635480 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635480, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field3"], name_py_str_635480, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635480, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field3"], name_py_str_635480));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field4"] === null))) {
		F.line = 147;
		var name_py_str_635498 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635498, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field4"], name_py_str_635498, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635498, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field4"], name_py_str_635498));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field5"] === null))) {
		F.line = 147;
		var name_py_str_635516 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635516, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field5"], name_py_str_635516, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635516, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field5"], name_py_str_635516));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field6"] === null))) {
		F.line = 147;
		var name_py_str_635534 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635534, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field6"], name_py_str_635534, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635534, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field6"], name_py_str_635534));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field7"] === null))) {
		F.line = 147;
		var name_py_str_635552 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635552, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field7"], name_py_str_635552, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635552, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field7"], name_py_str_635552));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field8"] === null))) {
		F.line = 147;
		var name_py_str_635570 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635570, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field8"], name_py_str_635570, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635570, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field8"], name_py_str_635570));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field9"] === null))) {
		F.line = 147;
		var name_py_str_635588 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635588, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field9"], name_py_str_635588, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635588, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field9"], name_py_str_635588));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field10"] === null))) {
		F.line = 147;
		var name_py_str_635606 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635606, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field10"], name_py_str_635606, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635606, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field10"], name_py_str_635606));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field11"] === null))) {
		F.line = 147;
		var name_py_str_635624 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635624, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field11"], name_py_str_635624, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635624, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field11"], name_py_str_635624));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field12"] === null))) {
		F.line = 147;
		var name_py_str_635642 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635642, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field12"], name_py_str_635642, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635642, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field12"], name_py_str_635642));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field13"] === null))) {
		F.line = 147;
		var name_py_str_635660 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635660, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field13"], name_py_str_635660, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635660, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field13"], name_py_str_635660));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field14"] === null))) {
		F.line = 147;
		var name_py_str_635678 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635678, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field14"], name_py_str_635678, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635678, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field14"], name_py_str_635678));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field15"] === null))) {
		F.line = 147;
		var name_py_str_635696 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635696, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field15"], name_py_str_635696, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635696, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field15"], name_py_str_635696));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field16"] === null))) {
		F.line = 147;
		var name_py_str_635714 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635714, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field16"], name_py_str_635714, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635714, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field16"], name_py_str_635714));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field17"] === null))) {
		F.line = 147;
		var name_py_str_635732 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635732, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field17"], name_py_str_635732, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635732, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field17"], name_py_str_635732));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field18"] === null))) {
		F.line = 147;
		var name_py_str_635750 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635750, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field18"], name_py_str_635750, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635750, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field18"], name_py_str_635750));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field19"] === null))) {
		F.line = 147;
		var name_py_str_635768 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635768, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field19"], name_py_str_635768, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635768, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field19"], name_py_str_635768));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field20"] === null))) {
		F.line = 147;
		var name_py_str_635786 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635786, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field20"], name_py_str_635786, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635786, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field20"], name_py_str_635786));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field21"] === null))) {
		F.line = 147;
		var name_py_str_635804 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635804, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field21"], name_py_str_635804, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635804, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field21"], name_py_str_635804));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field22"] === null))) {
		F.line = 147;
		var name_py_str_635822 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635822, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field22"], name_py_str_635822, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635822, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field22"], name_py_str_635822));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field23"] === null))) {
		F.line = 147;
		var name_py_str_635840 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635840, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field23"], name_py_str_635840, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635840, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field23"], name_py_str_635840));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field24"] === null))) {
		F.line = 147;
		var name_py_str_635858 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635858, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field24"], name_py_str_635858, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635858, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field24"], name_py_str_635858));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field25"] === null))) {
		F.line = 147;
		var name_py_str_635876 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635876, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field25"], name_py_str_635876, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635876, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field25"], name_py_str_635876));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field26"] === null))) {
		F.line = 147;
		var name_py_str_635894 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (true) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635894, new_py_static_method_554429(new_py_nim_func_559444(tp_635344.magicMethods["Field26"], name_py_str_635894)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635894, new_py_method_descr_613828(tp_635344, tp_635344.magicMethods["Field26"], name_py_str_635894));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field27"] === null))) {
		F.line = 147;
		var name_py_str_635912 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635912, new_py_static_method_554429(new_py_nim_func_560022(tp_635344.magicMethods["Field27"], name_py_str_635912, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635912, new_py_method_descr_613621(tp_635344, tp_635344.magicMethods["Field27"], name_py_str_635912));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field28"] === null))) {
		F.line = 147;
		var name_py_str_635930 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635930, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field28"], name_py_str_635930, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635930, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field28"], name_py_str_635930));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field29"] === null))) {
		F.line = 147;
		var name_py_str_635948 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635948, new_py_static_method_554429(new_py_nim_func_559822(tp_635344.magicMethods["Field29"], name_py_str_635948, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635948, new_py_method_descr_613421(tp_635344, tp_635344.magicMethods["Field29"], name_py_str_635948));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field30"] === null))) {
		F.line = 147;
		var name_py_str_635966 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635966, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field30"], name_py_str_635966, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635966, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field30"], name_py_str_635966));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field31"] === null))) {
		F.line = 147;
		var name_py_str_635984 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635984, new_py_static_method_554429(new_py_nim_func_560022(tp_635344.magicMethods["Field31"], name_py_str_635984, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_635984, new_py_method_descr_613621(tp_635344, tp_635344.magicMethods["Field31"], name_py_str_635984));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field32"] === null))) {
		F.line = 147;
		var name_py_str_636002 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636002, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field32"], name_py_str_636002, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636002, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field32"], name_py_str_636002));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field33"] === null))) {
		F.line = 147;
		var name_py_str_636020 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636020, new_py_static_method_554429(new_py_nim_func_559822(tp_635344.magicMethods["Field33"], name_py_str_636020, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636020, new_py_method_descr_613421(tp_635344, tp_635344.magicMethods["Field33"], name_py_str_636020));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field34"] === null))) {
		F.line = 147;
		var name_py_str_636038 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636038, new_py_static_method_554429(new_py_nim_func_559622(tp_635344.magicMethods["Field34"], name_py_str_636038, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636038, new_py_method_descr_613221(tp_635344, tp_635344.magicMethods["Field34"], name_py_str_636038));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field35"] === null))) {
		F.line = 147;
		var name_py_str_636056 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636056, new_py_static_method_554429(new_py_nim_func_559822(tp_635344.magicMethods["Field35"], name_py_str_636056, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636056, new_py_method_descr_613421(tp_635344, tp_635344.magicMethods["Field35"], name_py_str_636056));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field36"] === null))) {
		F.line = 147;
		var name_py_str_636074 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636074, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field36"], name_py_str_636074, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636074, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field36"], name_py_str_636074));
		}
		
		}
		
		F.line = 145;
		i_635404 = addInt(i_635404, 1);
		if (!((tp_635344.magicMethods["Field37"] === null))) {
		F.line = 147;
		var name_py_str_636092 = magic_name_strs_624041[0][chckIndx(i_635404, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636092, new_py_static_method_554429(new_py_nim_func_559485(tp_635344.magicMethods["Field37"], name_py_str_636092, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636092, new_py_method_descr_613078(tp_635344, tp_635344.magicMethods["Field37"], name_py_str_636092));
		}
		
		}
		
		L1: do {
			F.line = 153;
			var key_636797 = null;
			F.line = 153;
			var value_636798 = {Field0: null, Field1: null};
			F.line = 270;
			var colontmp__637509 = {data: null, counter: 0};
			F.line = 153;
			nimCopy(colontmp__637509, tp_635344.getsetDescr, NTI157326);
			L2: do {
				F.line = 272;
				var h_637513 = 0;
				F.line = 2104;
				var colontmp__637515 = 0;
				F.line = 272;
				colontmp__637515 = (colontmp__637509.data != null ? (colontmp__637509.data.length-1) : -1);
				F.line = 2107;
				var res_637517 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_637517 <= colontmp__637515)) break L4;
							F.line = 2109;
							h_637513 = res_637517;
							if (is_filled_146491(colontmp__637509.data[chckIndx(h_637513, 0, colontmp__637509.data.length+0-1)-0].Field0)) {
							F.line = 273;
							key_636797 = colontmp__637509.data[chckIndx(h_637513, 0, colontmp__637509.data.length+0-1)-0].Field1;
							F.line = 273;
							nimCopy(value_636798, colontmp__637509.data[chckIndx(h_637513, 0, colontmp__637509.data.length+0-1)-0].Field2, NTI157318);
							F.line = 154;
							var getter_636799 = value_636798["Field0"];
							F.line = 155;
							var setter_636800 = value_636798["Field1"];
							F.line = 156;
							var descr_636801 = new_py_get_set_descr_616229(getter_636799, setter_636800);
							F.line = 157;
							var name_py_str_636802 = new_py_str_176092(key_636797);
							F.line = 158;
							HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_636802, descr_636801);
							}
							
							F.line = 2110;
							res_637517 = addInt(res_637517, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		L5: do {
			F.line = 161;
			var name_637505 = null;
			F.line = 161;
			var meth_637506 = null;
			F.line = 270;
			var colontmp__637521 = {data: null, counter: 0};
			F.line = 161;
			nimCopy(colontmp__637521, tp_635344.bltinMethods, NTI157294);
			L6: do {
				F.line = 272;
				var h_637525 = 0;
				F.line = 2104;
				var colontmp__637527 = 0;
				F.line = 272;
				colontmp__637527 = (colontmp__637521.data != null ? (colontmp__637521.data.length-1) : -1);
				F.line = 2107;
				var res_637529 = 0;
				L7: do {
					F.line = 2108;
						L8: while (true) {
						if (!(res_637529 <= colontmp__637527)) break L8;
							F.line = 2109;
							h_637525 = res_637529;
							if (is_filled_146491(colontmp__637521.data[chckIndx(h_637525, 0, colontmp__637521.data.length+0-1)-0].Field0)) {
							F.line = 273;
							name_637505 = colontmp__637521.data[chckIndx(h_637525, 0, colontmp__637521.data.length+0-1)-0].Field1;
							F.line = 273;
							meth_637506 = colontmp__637521.data[chckIndx(h_637525, 0, colontmp__637521.data.length+0-1)-0].Field2;
							F.line = 162;
							var name_py_str_637507 = new_py_string_176075(name_637505);
							F.line = 163;
							HEX5BHEX5DHEX3D_533842(d_635401, name_py_str_637507, new_py_method_descr_613621(tp_635344, meth_637506, name_py_str_637507));
							}
							
							F.line = 2110;
							res_637529 = addInt(res_637529, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 165;
		tp_635344.dict = d_635401;
	framePtr = F.prev;

	
}

function type_ready_637659(tp_637661) {
	var F={procname:"typeobject.typeReady",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		F.line = 168;
		tp_637661.pyType = py_type_object_type_624361;
		F.line = 169;
		add_generic_635231(tp_637661);
		if ((tp_637661.dict === null)) {
		F.line = 171;
		init_type_dict_635342(tp_637661);
		}
		
	framePtr = F.prev;

	
}

function call_py_type_object_magic_637682(self_no_cast_637684, args_637698) {
			var Tmp1;
			var Tmp2;

	var result_637699 = null;

	var F={procname:"typeobject.callPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_637684.m_type, NTI157280))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 438;
		var self_637801 = self_no_cast_637684;
		if (((self_637801 == py_type_object_type_624361) && ((args_637698 != null ? args_637698.length : 0) == 1))) {
		F.line = 180;
		result_637699 = args_637698[chckIndx(0, 0, args_637698.length+0-1)-0].pyType;
		break BeforeRet;
		}
		
		F.line = 182;
		var new_func_637819 = self_637801.magicMethods.Field26;
		if ((new_func_637819 === null)) {
		F.line = 184;
		F.line = 184;
		var fmt_res_637829 = mnewString(0);
		F.line = 184;
		if (fmt_res_637829 != null) { fmt_res_637829 = (fmt_res_637829).concat(makeNimstrLit("cannot create \'")); } else { fmt_res_637829 = makeNimstrLit("cannot create \'"); };
		F.line = 260;
		if (fmt_res_637829 != null) { fmt_res_637829 = (fmt_res_637829).concat(self_637801.name); } else { fmt_res_637829 = self_637801.name.slice(); };
		F.line = 184;
		if (fmt_res_637829 != null) { fmt_res_637829 = (fmt_res_637829).concat(makeNimstrLit("\' instances because __new__ is not set")); } else { fmt_res_637829 = makeNimstrLit("\' instances because __new__ is not set"); };
		var msg_638001 = nimCopy(null, fmt_res_637829, NTI138);
		F.line = 185;
		F.line = 106;
		var excp_638003 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_638003.tk = 3;
		F.line = 108;
		excp_638003.thrown = true;
		F.line = 109;
		excp_638003.msg = new_py_string_176075(msg_638001);
		result_637699 = excp_638003;
		break BeforeRet;
		}
		
		F.line = 186;
		var new_obj_638028 = new_func_637819(HEX26_610015([self_637801], args_637698));
			if (of_py_exception_object_358259(new_obj_638028)) {
			Tmp1 = new_obj_638028.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 188;
		result_637699 = new_obj_638028;
		break BeforeRet;
		}
		
		F.line = 189;
		var init_func_638029 = self_637801.magicMethods.Field27;
		if (!((init_func_638029 === null))) {
		F.line = 191;
		var init_ret_638036 = init_func_638029(new_obj_638028, args_637698);
			if (of_py_exception_object_358259(init_ret_638036)) {
			Tmp2 = init_ret_638036.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 193;
		result_637699 = init_ret_638036;
		break BeforeRet;
		}
		
		}
		
		F.line = 195;
		result_637699 = new_obj_638028;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_637699;

}

function new_638206() {
	var result_638211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_638401 = null;
		F.line = 211;
		r_638401 = {m_type: NTI638109, dict: null, id: 0, pyType: null};
		F.line = 212;
		result_638211 = r_638401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_638211;

}

function new_py_instance_simple_638201() {
	var result_638203 = null;

	var F={procname:"typeobject.newPyInstanceSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_638424 = new_638206();
		F.line = 561;
		obj_638424.pyType = py_instance_object_type_638113;
		F.line = 563;
		give_id_157814(obj_638424);
		F.line = 565;
		obj_638424.dict = new_py_dict_532257();
		result_638203 = obj_638424;
	framePtr = F.prev;

	return result_638203;

}

function new_py_instance_default_638821(args_638064) {
	var result_638824 = null;

	var F={procname:"typeobject.newPyInstanceDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_638824 = new_py_instance_simple_638201();
	framePtr = F.prev;

	return result_638824;

}

function HEX5BHEX5D_639438(s_639445, x_639448) {
	var result_639450 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_639601 = x_639448.a;
		F.line = 3707;
		var l_639807 = addInt(subInt(subInt((s_639445 != null ? s_639445.length : 0), x_639448.b), a_639601), 1);
		F.line = 3708;
		result_639450 = new Array(chckRange(l_639807, 0, 2147483647)); for (var i=0;i<chckRange(l_639807, 0, 2147483647);++i) {result_639450[i]=null;}		L1: do {
			F.line = 3709;
			var i_639827 = 0;
			F.line = 3617;
			var i_639835 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_639835 < l_639807)) break L3;
						F.line = 3619;
						i_639827 = i_639835;
						F.line = 3709;
						result_639450[chckIndx(i_639827, 0, result_639450.length+0-1)-0] = s_639445[chckIndx(addInt(i_639827, a_639601), 0, s_639445.length+0-1)-0];
						F.line = 3620;
						i_639835 = addInt(i_639835, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_639450;

}

function new_py_instance_object_magic_639046(args_639061) {
	var result_639062 = null;

	var F={procname:"typeobject.newPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((args_639061 != null ? args_639061.length : 0) < 1)) {
		F.line = 200;
		var msg_639073 = null;
		if (true) {
		F.line = 202;
		F.line = 202;
		var fmt_res_639078 = mnewString(0);
		F.line = 202;
		if (fmt_res_639078 != null) { fmt_res_639078 = (fmt_res_639078).concat(makeNimstrLit(" argument (")); } else { fmt_res_639078 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_639078 != null) { fmt_res_639078 = (fmt_res_639078).concat(cstrToNimstr(((args_639061 != null ? args_639061.length : 0))+"")); } else { fmt_res_639078 = cstrToNimstr(((args_639061 != null ? args_639061.length : 0))+"").slice(); };
		F.line = 202;
		if (fmt_res_639078 != null) { fmt_res_639078 = (fmt_res_639078).concat(makeNimstrLit(" given)")); } else { fmt_res_639078 = makeNimstrLit(" given)"); };
		msg_639073 = nimCopy(null, (makeNimstrLit("New takes at least 1")).concat(fmt_res_639078), NTI138);
		}
		else {
			F.line = 204;
			F.line = 204;
			var fmt_res_639210 = mnewString(0);
			F.line = 204;
			if (fmt_res_639210 != null) { fmt_res_639210 = (fmt_res_639210).concat(makeNimstrLit(" argument (")); } else { fmt_res_639210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_639210 != null) { fmt_res_639210 = (fmt_res_639210).concat(cstrToNimstr(((args_639061 != null ? args_639061.length : 0))+"")); } else { fmt_res_639210 = cstrToNimstr(((args_639061 != null ? args_639061.length : 0))+"").slice(); };
			F.line = 204;
			if (fmt_res_639210 != null) { fmt_res_639210 = (fmt_res_639210).concat(makeNimstrLit(" given)")); } else { fmt_res_639210 = makeNimstrLit(" given)"); };
			msg_639073 = nimCopy(null, (makeNimstrLit("expected at least 1")).concat(fmt_res_639210), NTI138);
		}
		
		F.line = 205;
		F.line = 106;
		var excp_639409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_639409.tk = 3;
		F.line = 108;
		excp_639409.thrown = true;
		F.line = 109;
		excp_639409.msg = new_py_string_176075(msg_639073);
		result_639062 = excp_639409;
		break BeforeRet;
		}
		
		F.line = 215;
		var actual_args_639850 = HEX5BHEX5D_639438(args_639061, HEX2EHEX2E_81053(1, 1));
		if (!(isObj(args_639061[chckIndx(0, 0, args_639061.length+0-1)-0].m_type, NTI157280))) {
		F.line = 185;
		var expected_639862 = nimCopy(null, py_type_object_type_624361.name, NTI138);
		F.line = 186;
		var got_639863 = nimCopy(null, args_639061[chckIndx(0, 0, args_639061.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_639864 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_639868 = mnewString(0);
		F.line = 260;
		if (fmt_res_639868 != null) { fmt_res_639868 = (fmt_res_639868).concat(expected_639862); } else { fmt_res_639868 = expected_639862.slice(); };
		F.line = 188;
		if (fmt_res_639868 != null) { fmt_res_639868 = (fmt_res_639868).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_639868 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_639868 != null) { fmt_res_639868 = (fmt_res_639868).concat(m_name_639864); } else { fmt_res_639868 = m_name_639864.slice(); };
		F.line = 188;
		if (fmt_res_639868 != null) { fmt_res_639868 = (fmt_res_639868).concat(makeNimstrLit(" (got ")); } else { fmt_res_639868 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_639868 != null) { fmt_res_639868 = (fmt_res_639868).concat(got_639863); } else { fmt_res_639868 = got_639863.slice(); };
		F.line = 188;
		if (fmt_res_639868 != null) { fmt_res_639868 = (fmt_res_639868).concat(makeNimstrLit(")")); } else { fmt_res_639868 = makeNimstrLit(")"); };
		var msg_640402 = nimCopy(null, fmt_res_639868, NTI138);
		F.line = 189;
		F.line = 106;
		var excp_640404 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_640404.tk = 3;
		F.line = 108;
		excp_640404.thrown = true;
		F.line = 109;
		excp_640404.msg = new_py_string_176075(msg_640402);
		result_639062 = excp_640404;
		break BeforeRet;
		}
		
		F.line = 237;
		var tp_640406 = args_639061[chckIndx(0, 0, args_639061.length+0-1)-0];
		F.line = 210;
		result_639062 = new_py_instance_simple_638201();
		F.line = 211;
		result_639062.pyType = tp_640406;
	} while (false);
	framePtr = F.prev;

	return result_639062;

}
type_ready_637659(py_type_object_type_624361);
py_type_object_type_624361.magicMethods.Field31 = call_py_type_object_magic_637682;
var py_instance_object_type_638113 = new_py_type_159261(makeNimstrLit("Instance"));
py_instance_object_type_638113.magicMethods.Field26 = new_py_instance_default_638821;
py_instance_object_type_638113.magicMethods.Field26 = new_py_instance_object_magic_639046;

function add_py_instance_object_magic_648163(self_no_cast_648165, other_648166) {
	var result_648167 = null;

	var F={procname:"typeobject.addPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648165.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_648201 = self_no_cast_648165;
		F.line = 221;
		var magic_name_str_648207 = magic_name_strs_624041[0][chckIndx(0, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_648209 = HEX5BHEX5D_533323(get_type_dict_629304(self_648201), magic_name_str_648207);
		F.line = 223;
		result_648167 = fast_call_611133(fun_648209, [self_648201, other_648166]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648167;

}

function sub_py_instance_object_magic_648236(self_no_cast_648238, other_648239) {
	var result_648240 = null;

	var F={procname:"typeobject.subPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648238.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_648401 = self_no_cast_648238;
		F.line = 221;
		var magic_name_str_648407 = magic_name_strs_624041[0][chckIndx(1, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_648409 = HEX5BHEX5D_533323(get_type_dict_629304(self_648401), magic_name_str_648407);
		F.line = 223;
		result_648240 = fast_call_611133(fun_648409, [self_648401, other_648239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648240;

}

function mul_py_instance_object_magic_648436(self_no_cast_648438, other_648439) {
	var result_648440 = null;

	var F={procname:"typeobject.mulPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648438.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_648601 = self_no_cast_648438;
		F.line = 221;
		var magic_name_str_648607 = magic_name_strs_624041[0][chckIndx(2, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_648609 = HEX5BHEX5D_533323(get_type_dict_629304(self_648601), magic_name_str_648607);
		F.line = 223;
		result_648440 = fast_call_611133(fun_648609, [self_648601, other_648439]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648440;

}

function truediv_py_instance_object_magic_648636(self_no_cast_648638, other_648639) {
	var result_648640 = null;

	var F={procname:"typeobject.truedivPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648638.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_648801 = self_no_cast_648638;
		F.line = 221;
		var magic_name_str_648807 = magic_name_strs_624041[0][chckIndx(3, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_648809 = HEX5BHEX5D_533323(get_type_dict_629304(self_648801), magic_name_str_648807);
		F.line = 223;
		result_648640 = fast_call_611133(fun_648809, [self_648801, other_648639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648640;

}

function floordiv_py_instance_object_magic_648836(self_no_cast_648838, other_648839) {
	var result_648840 = null;

	var F={procname:"typeobject.floordivPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648838.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649001 = self_no_cast_648838;
		F.line = 221;
		var magic_name_str_649007 = magic_name_strs_624041[0][chckIndx(4, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_649009 = HEX5BHEX5D_533323(get_type_dict_629304(self_649001), magic_name_str_649007);
		F.line = 223;
		result_648840 = fast_call_611133(fun_649009, [self_649001, other_648839]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648840;

}

function mod_py_instance_object_magic_649036(self_no_cast_649038, other_649039) {
	var result_649040 = null;

	var F={procname:"typeobject.modPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649038.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649201 = self_no_cast_649038;
		F.line = 221;
		var magic_name_str_649207 = magic_name_strs_624041[0][chckIndx(5, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_649209 = HEX5BHEX5D_533323(get_type_dict_629304(self_649201), magic_name_str_649207);
		F.line = 223;
		result_649040 = fast_call_611133(fun_649209, [self_649201, other_649039]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649040;

}

function pow_py_instance_object_magic_649236(self_no_cast_649238, other_649239) {
	var result_649240 = null;

	var F={procname:"typeobject.powPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649238.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649401 = self_no_cast_649238;
		F.line = 221;
		var magic_name_str_649407 = magic_name_strs_624041[0][chckIndx(6, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_649409 = HEX5BHEX5D_533323(get_type_dict_629304(self_649401), magic_name_str_649407);
		F.line = 223;
		result_649240 = fast_call_611133(fun_649409, [self_649401, other_649239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649240;

}

function not_py_instance_object_magic_649436(self_no_cast_649438) {
	var result_649439 = null;

	var F={procname:"typeobject.notPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649438.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649601 = self_no_cast_649438;
		F.line = 215;
		var magic_name_str_649607 = magic_name_strs_624041[0][chckIndx(7, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_649609 = HEX5BHEX5D_533323(get_type_dict_629304(self_649601), magic_name_str_649607);
		F.line = 217;
		result_649439 = fast_call_611133(fun_649609, [self_649601]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649439;

}

function negative_py_instance_object_magic_649636(self_no_cast_649638) {
	var result_649639 = null;

	var F={procname:"typeobject.negativePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649638.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649801 = self_no_cast_649638;
		F.line = 215;
		var magic_name_str_649807 = magic_name_strs_624041[0][chckIndx(8, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_649809 = HEX5BHEX5D_533323(get_type_dict_629304(self_649801), magic_name_str_649807);
		F.line = 217;
		result_649639 = fast_call_611133(fun_649809, [self_649801]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649639;

}

function positive_py_instance_object_magic_649836(self_no_cast_649838) {
	var result_649839 = null;

	var F={procname:"typeobject.positivePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649838.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_650001 = self_no_cast_649838;
		F.line = 215;
		var magic_name_str_650007 = magic_name_strs_624041[0][chckIndx(9, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_650009 = HEX5BHEX5D_533323(get_type_dict_629304(self_650001), magic_name_str_650007);
		F.line = 217;
		result_649839 = fast_call_611133(fun_650009, [self_650001]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649839;

}

function abs_py_instance_object_magic_650036(self_no_cast_650038) {
	var result_650039 = null;

	var F={procname:"typeobject.absPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_650038.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_650201 = self_no_cast_650038;
		F.line = 215;
		var magic_name_str_650207 = magic_name_strs_624041[0][chckIndx(10, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_650209 = HEX5BHEX5D_533323(get_type_dict_629304(self_650201), magic_name_str_650207);
		F.line = 217;
		result_650039 = fast_call_611133(fun_650209, [self_650201]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_650039;

}

function index_py_instance_object_magic_650236(self_no_cast_650238) {
	var result_650239 = null;

	var F={procname:"typeobject.indexPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_650238.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_650401 = self_no_cast_650238;
		F.line = 215;
		var magic_name_str_650407 = magic_name_strs_624041[0][chckIndx(11, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_650409 = HEX5BHEX5D_533323(get_type_dict_629304(self_650401), magic_name_str_650407);
		F.line = 217;
		result_650239 = fast_call_611133(fun_650409, [self_650401]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_650239;

}

function bool_py_instance_object_magic_650436(self_no_cast_650438) {
	var result_650439 = null;

	var F={procname:"typeobject.boolPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_650438.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_650601 = self_no_cast_650438;
		F.line = 215;
		var magic_name_str_650607 = magic_name_strs_624041[0][chckIndx(12, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_650609 = HEX5BHEX5D_533323(get_type_dict_629304(self_650601), magic_name_str_650607);
		F.line = 217;
		result_650439 = fast_call_611133(fun_650609, [self_650601]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_650439;

}

function and_py_instance_object_magic_650636(self_no_cast_650638, other_650639) {
	var result_650640 = null;

	var F={procname:"typeobject.andPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_650638.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_650801 = self_no_cast_650638;
		F.line = 221;
		var magic_name_str_650807 = magic_name_strs_624041[0][chckIndx(13, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_650809 = HEX5BHEX5D_533323(get_type_dict_629304(self_650801), magic_name_str_650807);
		F.line = 223;
		result_650640 = fast_call_611133(fun_650809, [self_650801, other_650639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_650640;

}

function xor_py_instance_object_magic_650836(self_no_cast_650838, other_650839) {
	var result_650840 = null;

	var F={procname:"typeobject.xorPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_650838.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_651001 = self_no_cast_650838;
		F.line = 221;
		var magic_name_str_651007 = magic_name_strs_624041[0][chckIndx(14, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_651009 = HEX5BHEX5D_533323(get_type_dict_629304(self_651001), magic_name_str_651007);
		F.line = 223;
		result_650840 = fast_call_611133(fun_651009, [self_651001, other_650839]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_650840;

}

function or_py_instance_object_magic_651036(self_no_cast_651038, other_651039) {
	var result_651040 = null;

	var F={procname:"typeobject.orPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_651038.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_651201 = self_no_cast_651038;
		F.line = 221;
		var magic_name_str_651207 = magic_name_strs_624041[0][chckIndx(15, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_651209 = HEX5BHEX5D_533323(get_type_dict_629304(self_651201), magic_name_str_651207);
		F.line = 223;
		result_651040 = fast_call_611133(fun_651209, [self_651201, other_651039]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_651040;

}

function lt_py_instance_object_magic_651236(self_no_cast_651238, other_651239) {
	var result_651240 = null;

	var F={procname:"typeobject.ltPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_651238.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_651401 = self_no_cast_651238;
		F.line = 221;
		var magic_name_str_651407 = magic_name_strs_624041[0][chckIndx(16, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_651409 = HEX5BHEX5D_533323(get_type_dict_629304(self_651401), magic_name_str_651407);
		F.line = 223;
		result_651240 = fast_call_611133(fun_651409, [self_651401, other_651239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_651240;

}

function le_py_instance_object_magic_651436(self_no_cast_651438, other_651439) {
	var result_651440 = null;

	var F={procname:"typeobject.lePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_651438.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_651601 = self_no_cast_651438;
		F.line = 221;
		var magic_name_str_651607 = magic_name_strs_624041[0][chckIndx(17, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_651609 = HEX5BHEX5D_533323(get_type_dict_629304(self_651601), magic_name_str_651607);
		F.line = 223;
		result_651440 = fast_call_611133(fun_651609, [self_651601, other_651439]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_651440;

}

function eq_py_instance_object_magic_651636(self_no_cast_651638, other_651639) {
	var result_651640 = null;

	var F={procname:"typeobject.eqPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_651638.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_651801 = self_no_cast_651638;
		F.line = 221;
		var magic_name_str_651807 = magic_name_strs_624041[0][chckIndx(18, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_651809 = HEX5BHEX5D_533323(get_type_dict_629304(self_651801), magic_name_str_651807);
		F.line = 223;
		result_651640 = fast_call_611133(fun_651809, [self_651801, other_651639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_651640;

}

function ne_py_instance_object_magic_651836(self_no_cast_651838, other_651839) {
	var result_651840 = null;

	var F={procname:"typeobject.nePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_651838.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_652001 = self_no_cast_651838;
		F.line = 221;
		var magic_name_str_652007 = magic_name_strs_624041[0][chckIndx(19, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_652009 = HEX5BHEX5D_533323(get_type_dict_629304(self_652001), magic_name_str_652007);
		F.line = 223;
		result_651840 = fast_call_611133(fun_652009, [self_652001, other_651839]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_651840;

}

function gt_py_instance_object_magic_652036(self_no_cast_652038, other_652039) {
	var result_652040 = null;

	var F={procname:"typeobject.gtPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_652038.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_652201 = self_no_cast_652038;
		F.line = 221;
		var magic_name_str_652207 = magic_name_strs_624041[0][chckIndx(20, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_652209 = HEX5BHEX5D_533323(get_type_dict_629304(self_652201), magic_name_str_652207);
		F.line = 223;
		result_652040 = fast_call_611133(fun_652209, [self_652201, other_652039]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_652040;

}

function ge_py_instance_object_magic_652236(self_no_cast_652238, other_652239) {
	var result_652240 = null;

	var F={procname:"typeobject.gePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_652238.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_652401 = self_no_cast_652238;
		F.line = 221;
		var magic_name_str_652407 = magic_name_strs_624041[0][chckIndx(21, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_652409 = HEX5BHEX5D_533323(get_type_dict_629304(self_652401), magic_name_str_652407);
		F.line = 223;
		result_652240 = fast_call_611133(fun_652409, [self_652401, other_652239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_652240;

}

function contains_py_instance_object_magic_652436(self_no_cast_652438, other_652439) {
	var result_652440 = null;

	var F={procname:"typeobject.containsPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_652438.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_652601 = self_no_cast_652438;
		F.line = 221;
		var magic_name_str_652607 = magic_name_strs_624041[0][chckIndx(22, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_652609 = HEX5BHEX5D_533323(get_type_dict_629304(self_652601), magic_name_str_652607);
		F.line = 223;
		result_652440 = fast_call_611133(fun_652609, [self_652601, other_652439]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_652440;

}

function len_py_instance_object_magic_652636(self_no_cast_652638) {
	var result_652639 = null;

	var F={procname:"typeobject.lenPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_652638.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_652801 = self_no_cast_652638;
		F.line = 215;
		var magic_name_str_652807 = magic_name_strs_624041[0][chckIndx(23, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_652809 = HEX5BHEX5D_533323(get_type_dict_629304(self_652801), magic_name_str_652807);
		F.line = 217;
		result_652639 = fast_call_611133(fun_652809, [self_652801]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_652639;

}

function str_py_instance_object_magic_652836(self_no_cast_652838) {
	var result_652839 = null;

	var F={procname:"typeobject.strPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_652838.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_653001 = self_no_cast_652838;
		F.line = 215;
		var magic_name_str_653007 = magic_name_strs_624041[0][chckIndx(24, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_653009 = HEX5BHEX5D_533323(get_type_dict_629304(self_653001), magic_name_str_653007);
		F.line = 217;
		result_652839 = fast_call_611133(fun_653009, [self_653001]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_652839;

}

function repr_py_instance_object_magic_653036(self_no_cast_653038) {
	var result_653039 = null;

	var F={procname:"typeobject.reprPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_653038.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_653201 = self_no_cast_653038;
		F.line = 215;
		var magic_name_str_653207 = magic_name_strs_624041[0][chckIndx(25, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_653209 = HEX5BHEX5D_533323(get_type_dict_629304(self_653201), magic_name_str_653207);
		F.line = 217;
		result_653039 = fast_call_611133(fun_653209, [self_653201]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_653039;

}

function init_py_instance_object_magic_653236(self_no_cast_653238, args_653252) {
	var result_653253 = null;

	var F={procname:"typeobject.initPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_653238.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_653401 = self_no_cast_653238;
		F.line = 239;
		var magic_name_str_653407 = magic_name_strs_624041[0][chckIndx(27, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 240;
		var fun_653409 = HEX5BHEX5D_533323(get_type_dict_629304(self_653401), magic_name_str_653407);
		F.line = 241;
		result_653253 = fast_call_611133(fun_653409, HEX26_610015([self_653401], args_653252));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_653253;

}

function getattr_py_instance_object_magic_653447(self_no_cast_653449, other_653450) {
	var result_653451 = null;

	var F={procname:"typeobject.getattrPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_653449.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_653601 = self_no_cast_653449;
		F.line = 221;
		var magic_name_str_653607 = magic_name_strs_624041[0][chckIndx(28, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_653609 = HEX5BHEX5D_533323(get_type_dict_629304(self_653601), magic_name_str_653607);
		F.line = 223;
		result_653451 = fast_call_611133(fun_653609, [self_653601, other_653450]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_653451;

}

function setattr_py_instance_object_magic_653636(self_no_cast_653638, arg1_653639, arg2_653640) {
	var result_653641 = null;

	var F={procname:"typeobject.setattrPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_653638.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_653801 = self_no_cast_653638;
		F.line = 227;
		var magic_name_str_653807 = magic_name_strs_624041[0][chckIndx(29, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 228;
		var fun_653809 = HEX5BHEX5D_533323(get_type_dict_629304(self_653801), magic_name_str_653807);
		F.line = 229;
		result_653641 = fast_call_611133(fun_653809, [self_653801, arg1_653639, arg2_653640]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_653641;

}

function hash_py_instance_object_magic_653836(self_no_cast_653838) {
	var result_653839 = null;

	var F={procname:"typeobject.hashPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_653838.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_654001 = self_no_cast_653838;
		F.line = 215;
		var magic_name_str_654007 = magic_name_strs_624041[0][chckIndx(30, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_654009 = HEX5BHEX5D_533323(get_type_dict_629304(self_654001), magic_name_str_654007);
		F.line = 217;
		result_653839 = fast_call_611133(fun_654009, [self_654001]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_653839;

}

function call_py_instance_object_magic_654036(self_no_cast_654038, args_654052) {
	var result_654053 = null;

	var F={procname:"typeobject.callPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_654038.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_654201 = self_no_cast_654038;
		F.line = 239;
		var magic_name_str_654207 = magic_name_strs_624041[0][chckIndx(31, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 240;
		var fun_654209 = HEX5BHEX5D_533323(get_type_dict_629304(self_654201), magic_name_str_654207);
		F.line = 241;
		result_654053 = fast_call_611133(fun_654209, HEX26_610015([self_654201], args_654052));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_654053;

}

function getitem_py_instance_object_magic_654247(self_no_cast_654249, other_654250) {
	var result_654251 = null;

	var F={procname:"typeobject.getitemPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_654249.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_654401 = self_no_cast_654249;
		F.line = 221;
		var magic_name_str_654407 = magic_name_strs_624041[0][chckIndx(32, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_654409 = HEX5BHEX5D_533323(get_type_dict_629304(self_654401), magic_name_str_654407);
		F.line = 223;
		result_654251 = fast_call_611133(fun_654409, [self_654401, other_654250]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_654251;

}

function setitem_py_instance_object_magic_654436(self_no_cast_654438, arg1_654439, arg2_654440) {
	var result_654441 = null;

	var F={procname:"typeobject.setitemPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_654438.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_654601 = self_no_cast_654438;
		F.line = 227;
		var magic_name_str_654607 = magic_name_strs_624041[0][chckIndx(33, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 228;
		var fun_654609 = HEX5BHEX5D_533323(get_type_dict_629304(self_654601), magic_name_str_654607);
		F.line = 229;
		result_654441 = fast_call_611133(fun_654609, [self_654601, arg1_654439, arg2_654440]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_654441;

}

function get_py_instance_object_magic_654636(self_no_cast_654638, other_654639) {
	var result_654640 = null;

	var F={procname:"typeobject.getPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_654638.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_654801 = self_no_cast_654638;
		F.line = 221;
		var magic_name_str_654807 = magic_name_strs_624041[0][chckIndx(34, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 222;
		var fun_654809 = HEX5BHEX5D_533323(get_type_dict_629304(self_654801), magic_name_str_654807);
		F.line = 223;
		result_654640 = fast_call_611133(fun_654809, [self_654801, other_654639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_654640;

}

function set_py_instance_object_magic_654836(self_no_cast_654838, arg1_654839, arg2_654840) {
	var result_654841 = null;

	var F={procname:"typeobject.setPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_654838.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_655001 = self_no_cast_654838;
		F.line = 227;
		var magic_name_str_655007 = magic_name_strs_624041[0][chckIndx(35, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 228;
		var fun_655009 = HEX5BHEX5D_533323(get_type_dict_629304(self_655001), magic_name_str_655007);
		F.line = 229;
		result_654841 = fast_call_611133(fun_655009, [self_655001, arg1_654839, arg2_654840]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_654841;

}

function iter_py_instance_object_magic_655036(self_no_cast_655038) {
	var result_655039 = null;

	var F={procname:"typeobject.iterPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_655038.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_655201 = self_no_cast_655038;
		F.line = 215;
		var magic_name_str_655207 = magic_name_strs_624041[0][chckIndx(36, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_655209 = HEX5BHEX5D_533323(get_type_dict_629304(self_655201), magic_name_str_655207);
		F.line = 217;
		result_655039 = fast_call_611133(fun_655209, [self_655201]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_655039;

}

function iternext_py_instance_object_magic_655236(self_no_cast_655238) {
	var result_655239 = null;

	var F={procname:"typeobject.iternextPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_655238.m_type, NTI638109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_655401 = self_no_cast_655238;
		F.line = 215;
		var magic_name_str_655407 = magic_name_strs_624041[0][chckIndx(37, 0, magic_name_strs_624041[0].length+0-1)-0];
		F.line = 216;
		var fun_655409 = HEX5BHEX5D_533323(get_type_dict_629304(self_655401), magic_name_str_655407);
		F.line = 217;
		result_655239 = fast_call_611133(fun_655409, [self_655401]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_655239;

}
py_instance_object_type_638113.magicMethods.Field0 = add_py_instance_object_magic_648163;
py_instance_object_type_638113.magicMethods.Field1 = sub_py_instance_object_magic_648236;
py_instance_object_type_638113.magicMethods.Field2 = mul_py_instance_object_magic_648436;
py_instance_object_type_638113.magicMethods.Field3 = truediv_py_instance_object_magic_648636;
py_instance_object_type_638113.magicMethods.Field4 = floordiv_py_instance_object_magic_648836;
py_instance_object_type_638113.magicMethods.Field5 = mod_py_instance_object_magic_649036;
py_instance_object_type_638113.magicMethods.Field6 = pow_py_instance_object_magic_649236;
py_instance_object_type_638113.magicMethods.Field7 = not_py_instance_object_magic_649436;
py_instance_object_type_638113.magicMethods.Field8 = negative_py_instance_object_magic_649636;
py_instance_object_type_638113.magicMethods.Field9 = positive_py_instance_object_magic_649836;
py_instance_object_type_638113.magicMethods.Field10 = abs_py_instance_object_magic_650036;
py_instance_object_type_638113.magicMethods.Field11 = index_py_instance_object_magic_650236;
py_instance_object_type_638113.magicMethods.Field12 = bool_py_instance_object_magic_650436;
py_instance_object_type_638113.magicMethods.Field13 = and_py_instance_object_magic_650636;
py_instance_object_type_638113.magicMethods.Field14 = xor_py_instance_object_magic_650836;
py_instance_object_type_638113.magicMethods.Field15 = or_py_instance_object_magic_651036;
py_instance_object_type_638113.magicMethods.Field16 = lt_py_instance_object_magic_651236;
py_instance_object_type_638113.magicMethods.Field17 = le_py_instance_object_magic_651436;
py_instance_object_type_638113.magicMethods.Field18 = eq_py_instance_object_magic_651636;
py_instance_object_type_638113.magicMethods.Field19 = ne_py_instance_object_magic_651836;
py_instance_object_type_638113.magicMethods.Field20 = gt_py_instance_object_magic_652036;
py_instance_object_type_638113.magicMethods.Field21 = ge_py_instance_object_magic_652236;
py_instance_object_type_638113.magicMethods.Field22 = contains_py_instance_object_magic_652436;
py_instance_object_type_638113.magicMethods.Field23 = len_py_instance_object_magic_652636;
py_instance_object_type_638113.magicMethods.Field24 = str_py_instance_object_magic_652836;
py_instance_object_type_638113.magicMethods.Field25 = repr_py_instance_object_magic_653036;
py_instance_object_type_638113.magicMethods.Field27 = init_py_instance_object_magic_653236;
py_instance_object_type_638113.magicMethods.Field28 = getattr_py_instance_object_magic_653447;
py_instance_object_type_638113.magicMethods.Field29 = setattr_py_instance_object_magic_653636;
py_instance_object_type_638113.magicMethods.Field30 = hash_py_instance_object_magic_653836;
py_instance_object_type_638113.magicMethods.Field31 = call_py_instance_object_magic_654036;
py_instance_object_type_638113.magicMethods.Field32 = getitem_py_instance_object_magic_654247;
py_instance_object_type_638113.magicMethods.Field33 = setitem_py_instance_object_magic_654436;
py_instance_object_type_638113.magicMethods.Field34 = get_py_instance_object_magic_654636;
py_instance_object_type_638113.magicMethods.Field35 = set_py_instance_object_magic_654836;
py_instance_object_type_638113.magicMethods.Field36 = iter_py_instance_object_magic_655036;
py_instance_object_type_638113.magicMethods.Field37 = iternext_py_instance_object_magic_655236;

function len_476533(t_476535) {
	var result_476536 = 0;

	var F={procname:"tupleobject.len",prev:framePtr,filename:"../Objects/tupleobject.nim",line:0};
	framePtr = F;
		F.line = 100;
		result_476536 = (t_476535.items != null ? t_476535.items.length : 0);
	framePtr = F.prev;

	return result_476536;

}

function new_py_type_object_magic_655921(args_655936) {
	var result_655937 = null;

	var F={procname:"typeobject.newPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_655936 != null ? args_655936.length : 0) == 4))) {
		F.line = 190;
		var msg_655949 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_655954 = mnewString(0);
		F.line = 192;
		if (fmt_res_655954 != null) { fmt_res_655954 = (fmt_res_655954).concat(makeNimstrLit(" argument (")); } else { fmt_res_655954 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_655954 != null) { fmt_res_655954 = (fmt_res_655954).concat(cstrToNimstr(((args_655936 != null ? args_655936.length : 0))+"")); } else { fmt_res_655954 = cstrToNimstr(((args_655936 != null ? args_655936.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_655954 != null) { fmt_res_655954 = (fmt_res_655954).concat(makeNimstrLit(" given)")); } else { fmt_res_655954 = makeNimstrLit(" given)"); };
		msg_655949 = nimCopy(null, (makeNimstrLit("New takes exactly 4")).concat(fmt_res_655954), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_656010 = mnewString(0);
			F.line = 194;
			if (fmt_res_656010 != null) { fmt_res_656010 = (fmt_res_656010).concat(makeNimstrLit(" argument (")); } else { fmt_res_656010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_656010 != null) { fmt_res_656010 = (fmt_res_656010).concat(cstrToNimstr(((args_655936 != null ? args_655936.length : 0))+"")); } else { fmt_res_656010 = cstrToNimstr(((args_655936 != null ? args_655936.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_656010 != null) { fmt_res_656010 = (fmt_res_656010).concat(makeNimstrLit(" given)")); } else { fmt_res_656010 = makeNimstrLit(" given)"); };
			msg_655949 = nimCopy(null, (makeNimstrLit("expected 4")).concat(fmt_res_656010), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_656209 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_656209.tk = 3;
		F.line = 108;
		excp_656209.thrown = true;
		F.line = 109;
		excp_656209.msg = new_py_string_176075(msg_655949);
		result_655937 = excp_656209;
		break BeforeRet;
		}
		
		if (!(isObj(args_655936[chckIndx(0, 0, args_655936.length+0-1)-0].m_type, NTI157280))) {
		F.line = 185;
		var expected_656222 = nimCopy(null, py_type_object_type_624361.name, NTI138);
		F.line = 186;
		var got_656223 = nimCopy(null, args_655936[chckIndx(0, 0, args_655936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_656224 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_656228 = mnewString(0);
		F.line = 260;
		if (fmt_res_656228 != null) { fmt_res_656228 = (fmt_res_656228).concat(expected_656222); } else { fmt_res_656228 = expected_656222.slice(); };
		F.line = 188;
		if (fmt_res_656228 != null) { fmt_res_656228 = (fmt_res_656228).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_656228 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_656228 != null) { fmt_res_656228 = (fmt_res_656228).concat(m_name_656224); } else { fmt_res_656228 = m_name_656224.slice(); };
		F.line = 188;
		if (fmt_res_656228 != null) { fmt_res_656228 = (fmt_res_656228).concat(makeNimstrLit(" (got ")); } else { fmt_res_656228 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_656228 != null) { fmt_res_656228 = (fmt_res_656228).concat(got_656223); } else { fmt_res_656228 = got_656223.slice(); };
		F.line = 188;
		if (fmt_res_656228 != null) { fmt_res_656228 = (fmt_res_656228).concat(makeNimstrLit(")")); } else { fmt_res_656228 = makeNimstrLit(")"); };
		var msg_656802 = nimCopy(null, fmt_res_656228, NTI138);
		F.line = 189;
		F.line = 106;
		var excp_656804 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_656804.tk = 3;
		F.line = 108;
		excp_656804.thrown = true;
		F.line = 109;
		excp_656804.msg = new_py_string_176075(msg_656802);
		result_655937 = excp_656804;
		break BeforeRet;
		}
		
		F.line = 237;
		var meta_type_656806 = args_655936[chckIndx(0, 0, args_655936.length+0-1)-0];
		if (!(isObj(args_655936[chckIndx(1, 0, args_655936.length+0-1)-0].m_type, NTI175084))) {
		F.line = 185;
		var expected_656818 = nimCopy(null, py_str_object_type_175090.name, NTI138);
		F.line = 186;
		var got_656819 = nimCopy(null, args_655936[chckIndx(1, 0, args_655936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_656820 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_656824 = mnewString(0);
		F.line = 260;
		if (fmt_res_656824 != null) { fmt_res_656824 = (fmt_res_656824).concat(expected_656818); } else { fmt_res_656824 = expected_656818.slice(); };
		F.line = 188;
		if (fmt_res_656824 != null) { fmt_res_656824 = (fmt_res_656824).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_656824 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_656824 != null) { fmt_res_656824 = (fmt_res_656824).concat(m_name_656820); } else { fmt_res_656824 = m_name_656820.slice(); };
		F.line = 188;
		if (fmt_res_656824 != null) { fmt_res_656824 = (fmt_res_656824).concat(makeNimstrLit(" (got ")); } else { fmt_res_656824 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_656824 != null) { fmt_res_656824 = (fmt_res_656824).concat(got_656819); } else { fmt_res_656824 = got_656819.slice(); };
		F.line = 188;
		if (fmt_res_656824 != null) { fmt_res_656824 = (fmt_res_656824).concat(makeNimstrLit(")")); } else { fmt_res_656824 = makeNimstrLit(")"); };
		var msg_657402 = nimCopy(null, fmt_res_656824, NTI138);
		F.line = 189;
		F.line = 106;
		var excp_657404 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_657404.tk = 3;
		F.line = 108;
		excp_657404.thrown = true;
		F.line = 109;
		excp_657404.msg = new_py_string_176075(msg_657402);
		result_655937 = excp_657404;
		break BeforeRet;
		}
		
		F.line = 237;
		var name_657406 = args_655936[chckIndx(1, 0, args_655936.length+0-1)-0];
		if (!(isObj(args_655936[chckIndx(2, 0, args_655936.length+0-1)-0].m_type, NTI472070))) {
		F.line = 185;
		var expected_657418 = nimCopy(null, py_tuple_object_type_472080.name, NTI138);
		F.line = 186;
		var got_657419 = nimCopy(null, args_655936[chckIndx(2, 0, args_655936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_657420 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_657424 = mnewString(0);
		F.line = 260;
		if (fmt_res_657424 != null) { fmt_res_657424 = (fmt_res_657424).concat(expected_657418); } else { fmt_res_657424 = expected_657418.slice(); };
		F.line = 188;
		if (fmt_res_657424 != null) { fmt_res_657424 = (fmt_res_657424).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_657424 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_657424 != null) { fmt_res_657424 = (fmt_res_657424).concat(m_name_657420); } else { fmt_res_657424 = m_name_657420.slice(); };
		F.line = 188;
		if (fmt_res_657424 != null) { fmt_res_657424 = (fmt_res_657424).concat(makeNimstrLit(" (got ")); } else { fmt_res_657424 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_657424 != null) { fmt_res_657424 = (fmt_res_657424).concat(got_657419); } else { fmt_res_657424 = got_657419.slice(); };
		F.line = 188;
		if (fmt_res_657424 != null) { fmt_res_657424 = (fmt_res_657424).concat(makeNimstrLit(")")); } else { fmt_res_657424 = makeNimstrLit(")"); };
		var msg_658002 = nimCopy(null, fmt_res_657424, NTI138);
		F.line = 189;
		F.line = 106;
		var excp_658004 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_658004.tk = 3;
		F.line = 108;
		excp_658004.thrown = true;
		F.line = 109;
		excp_658004.msg = new_py_string_176075(msg_658002);
		result_655937 = excp_658004;
		break BeforeRet;
		}
		
		F.line = 237;
		var bases_658006 = args_655936[chckIndx(2, 0, args_655936.length+0-1)-0];
		if (!(isObj(args_655936[chckIndx(3, 0, args_655936.length+0-1)-0].m_type, NTI531178))) {
		F.line = 185;
		var expected_658018 = nimCopy(null, pydict_object_type_531222.name, NTI138);
		F.line = 186;
		var got_658019 = nimCopy(null, args_655936[chckIndx(3, 0, args_655936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_658020 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_658024 = mnewString(0);
		F.line = 260;
		if (fmt_res_658024 != null) { fmt_res_658024 = (fmt_res_658024).concat(expected_658018); } else { fmt_res_658024 = expected_658018.slice(); };
		F.line = 188;
		if (fmt_res_658024 != null) { fmt_res_658024 = (fmt_res_658024).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_658024 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_658024 != null) { fmt_res_658024 = (fmt_res_658024).concat(m_name_658020); } else { fmt_res_658024 = m_name_658020.slice(); };
		F.line = 188;
		if (fmt_res_658024 != null) { fmt_res_658024 = (fmt_res_658024).concat(makeNimstrLit(" (got ")); } else { fmt_res_658024 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_658024 != null) { fmt_res_658024 = (fmt_res_658024).concat(got_658019); } else { fmt_res_658024 = got_658019.slice(); };
		F.line = 188;
		if (fmt_res_658024 != null) { fmt_res_658024 = (fmt_res_658024).concat(makeNimstrLit(")")); } else { fmt_res_658024 = makeNimstrLit(")"); };
		var msg_658602 = nimCopy(null, fmt_res_658024, NTI138);
		F.line = 189;
		F.line = 106;
		var excp_658604 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_658604.tk = 3;
		F.line = 108;
		excp_658604.thrown = true;
		F.line = 109;
		excp_658604.msg = new_py_string_176075(msg_658602);
		result_655937 = excp_658604;
		break BeforeRet;
		}
		
		F.line = 237;
		var dict_658606 = args_655936[chckIndx(3, 0, args_655936.length+0-1)-0];
		if (!((meta_type_656806 == py_type_object_type_624361))) {
		F.line = 281;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/typeobject.nim(281, 10) `metaType == pyTypeObjectType` "));
		}
		
		if (!((len_476533(bases_658006) == 0))) {
		F.line = 282;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/typeobject.nim(282, 10) `len(bases) == 0` "));
		}
		
		F.line = 283;
		var tp_659001 = new_py_type_159261(name_657406.str);
		F.line = 284;
		tp_659001.kind = 7;
		F.line = 285;
		tp_659001.magicMethods.Field26 = new_py_instance_object_magic_639046;
		F.line = 267;
		var magic_name_str_659084 = magic_name_strs_624041[0][chckIndx(0, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659084)) {
		F.line = 269;
		tp_659001.magicMethods.Field0 = add_py_instance_object_magic_648163;
		}
		
		F.line = 267;
		var magic_name_str_659090 = magic_name_strs_624041[0][chckIndx(1, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659090)) {
		F.line = 269;
		tp_659001.magicMethods.Field1 = sub_py_instance_object_magic_648236;
		}
		
		F.line = 267;
		var magic_name_str_659096 = magic_name_strs_624041[0][chckIndx(2, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659096)) {
		F.line = 269;
		tp_659001.magicMethods.Field2 = mul_py_instance_object_magic_648436;
		}
		
		F.line = 267;
		var magic_name_str_659102 = magic_name_strs_624041[0][chckIndx(3, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659102)) {
		F.line = 269;
		tp_659001.magicMethods.Field3 = truediv_py_instance_object_magic_648636;
		}
		
		F.line = 267;
		var magic_name_str_659108 = magic_name_strs_624041[0][chckIndx(4, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659108)) {
		F.line = 269;
		tp_659001.magicMethods.Field4 = floordiv_py_instance_object_magic_648836;
		}
		
		F.line = 267;
		var magic_name_str_659114 = magic_name_strs_624041[0][chckIndx(5, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659114)) {
		F.line = 269;
		tp_659001.magicMethods.Field5 = mod_py_instance_object_magic_649036;
		}
		
		F.line = 267;
		var magic_name_str_659120 = magic_name_strs_624041[0][chckIndx(6, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659120)) {
		F.line = 269;
		tp_659001.magicMethods.Field6 = pow_py_instance_object_magic_649236;
		}
		
		F.line = 267;
		var magic_name_str_659126 = magic_name_strs_624041[0][chckIndx(7, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659126)) {
		F.line = 269;
		tp_659001.magicMethods.Field7 = not_py_instance_object_magic_649436;
		}
		
		F.line = 267;
		var magic_name_str_659132 = magic_name_strs_624041[0][chckIndx(8, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659132)) {
		F.line = 269;
		tp_659001.magicMethods.Field8 = negative_py_instance_object_magic_649636;
		}
		
		F.line = 267;
		var magic_name_str_659138 = magic_name_strs_624041[0][chckIndx(9, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659138)) {
		F.line = 269;
		tp_659001.magicMethods.Field9 = positive_py_instance_object_magic_649836;
		}
		
		F.line = 267;
		var magic_name_str_659144 = magic_name_strs_624041[0][chckIndx(10, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659144)) {
		F.line = 269;
		tp_659001.magicMethods.Field10 = abs_py_instance_object_magic_650036;
		}
		
		F.line = 267;
		var magic_name_str_659150 = magic_name_strs_624041[0][chckIndx(11, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659150)) {
		F.line = 269;
		tp_659001.magicMethods.Field11 = index_py_instance_object_magic_650236;
		}
		
		F.line = 267;
		var magic_name_str_659156 = magic_name_strs_624041[0][chckIndx(12, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659156)) {
		F.line = 269;
		tp_659001.magicMethods.Field12 = bool_py_instance_object_magic_650436;
		}
		
		F.line = 267;
		var magic_name_str_659162 = magic_name_strs_624041[0][chckIndx(13, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659162)) {
		F.line = 269;
		tp_659001.magicMethods.Field13 = and_py_instance_object_magic_650636;
		}
		
		F.line = 267;
		var magic_name_str_659168 = magic_name_strs_624041[0][chckIndx(14, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659168)) {
		F.line = 269;
		tp_659001.magicMethods.Field14 = xor_py_instance_object_magic_650836;
		}
		
		F.line = 267;
		var magic_name_str_659174 = magic_name_strs_624041[0][chckIndx(15, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659174)) {
		F.line = 269;
		tp_659001.magicMethods.Field15 = or_py_instance_object_magic_651036;
		}
		
		F.line = 267;
		var magic_name_str_659180 = magic_name_strs_624041[0][chckIndx(16, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659180)) {
		F.line = 269;
		tp_659001.magicMethods.Field16 = lt_py_instance_object_magic_651236;
		}
		
		F.line = 267;
		var magic_name_str_659186 = magic_name_strs_624041[0][chckIndx(17, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659186)) {
		F.line = 269;
		tp_659001.magicMethods.Field17 = le_py_instance_object_magic_651436;
		}
		
		F.line = 267;
		var magic_name_str_659192 = magic_name_strs_624041[0][chckIndx(18, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659192)) {
		F.line = 269;
		tp_659001.magicMethods.Field18 = eq_py_instance_object_magic_651636;
		}
		
		F.line = 267;
		var magic_name_str_659198 = magic_name_strs_624041[0][chckIndx(19, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659198)) {
		F.line = 269;
		tp_659001.magicMethods.Field19 = ne_py_instance_object_magic_651836;
		}
		
		F.line = 267;
		var magic_name_str_659204 = magic_name_strs_624041[0][chckIndx(20, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659204)) {
		F.line = 269;
		tp_659001.magicMethods.Field20 = gt_py_instance_object_magic_652036;
		}
		
		F.line = 267;
		var magic_name_str_659210 = magic_name_strs_624041[0][chckIndx(21, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659210)) {
		F.line = 269;
		tp_659001.magicMethods.Field21 = ge_py_instance_object_magic_652236;
		}
		
		F.line = 267;
		var magic_name_str_659216 = magic_name_strs_624041[0][chckIndx(22, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659216)) {
		F.line = 269;
		tp_659001.magicMethods.Field22 = contains_py_instance_object_magic_652436;
		}
		
		F.line = 267;
		var magic_name_str_659222 = magic_name_strs_624041[0][chckIndx(23, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659222)) {
		F.line = 269;
		tp_659001.magicMethods.Field23 = len_py_instance_object_magic_652636;
		}
		
		F.line = 267;
		var magic_name_str_659228 = magic_name_strs_624041[0][chckIndx(24, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659228)) {
		F.line = 269;
		tp_659001.magicMethods.Field24 = str_py_instance_object_magic_652836;
		}
		
		F.line = 267;
		var magic_name_str_659234 = magic_name_strs_624041[0][chckIndx(25, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659234)) {
		F.line = 269;
		tp_659001.magicMethods.Field25 = repr_py_instance_object_magic_653036;
		}
		
		F.line = 267;
		var magic_name_str_659240 = magic_name_strs_624041[0][chckIndx(26, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659240)) {
		F.line = 269;
		tp_659001.magicMethods.Field26 = new_py_instance_object_magic_639046;
		}
		
		F.line = 267;
		var magic_name_str_659246 = magic_name_strs_624041[0][chckIndx(27, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659246)) {
		F.line = 269;
		tp_659001.magicMethods.Field27 = init_py_instance_object_magic_653236;
		}
		
		F.line = 267;
		var magic_name_str_659252 = magic_name_strs_624041[0][chckIndx(28, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659252)) {
		F.line = 269;
		tp_659001.magicMethods.Field28 = getattr_py_instance_object_magic_653447;
		}
		
		F.line = 267;
		var magic_name_str_659258 = magic_name_strs_624041[0][chckIndx(29, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659258)) {
		F.line = 269;
		tp_659001.magicMethods.Field29 = setattr_py_instance_object_magic_653636;
		}
		
		F.line = 267;
		var magic_name_str_659264 = magic_name_strs_624041[0][chckIndx(30, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659264)) {
		F.line = 269;
		tp_659001.magicMethods.Field30 = hash_py_instance_object_magic_653836;
		}
		
		F.line = 267;
		var magic_name_str_659270 = magic_name_strs_624041[0][chckIndx(31, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659270)) {
		F.line = 269;
		tp_659001.magicMethods.Field31 = call_py_instance_object_magic_654036;
		}
		
		F.line = 267;
		var magic_name_str_659276 = magic_name_strs_624041[0][chckIndx(32, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659276)) {
		F.line = 269;
		tp_659001.magicMethods.Field32 = getitem_py_instance_object_magic_654247;
		}
		
		F.line = 267;
		var magic_name_str_659282 = magic_name_strs_624041[0][chckIndx(33, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659282)) {
		F.line = 269;
		tp_659001.magicMethods.Field33 = setitem_py_instance_object_magic_654436;
		}
		
		F.line = 267;
		var magic_name_str_659288 = magic_name_strs_624041[0][chckIndx(34, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659288)) {
		F.line = 269;
		tp_659001.magicMethods.Field34 = get_py_instance_object_magic_654636;
		}
		
		F.line = 267;
		var magic_name_str_659294 = magic_name_strs_624041[0][chckIndx(35, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659294)) {
		F.line = 269;
		tp_659001.magicMethods.Field35 = set_py_instance_object_magic_654836;
		}
		
		F.line = 267;
		var magic_name_str_659300 = magic_name_strs_624041[0][chckIndx(36, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659300)) {
		F.line = 269;
		tp_659001.magicMethods.Field36 = iter_py_instance_object_magic_655036;
		}
		
		F.line = 267;
		var magic_name_str_659306 = magic_name_strs_624041[0][chckIndx(37, 0, magic_name_strs_624041[0].length+0-1)-0];
		if (has_key_532437(dict_658606, magic_name_str_659306)) {
		F.line = 269;
		tp_659001.magicMethods.Field37 = iternext_py_instance_object_magic_655236;
		}
		
		F.line = 287;
		tp_659001.dict = copy_pydict_object_method_542009(dict_658606, []);
		F.line = 288;
		type_ready_637659(tp_659001);
		result_655937 = tp_659001;
	} while (false);
	framePtr = F.prev;

	return result_655937;

}
py_type_object_type_624361.magicMethods.Field26 = new_py_type_object_magic_655921;

function register_bltin_function_660027(name_660029, fun_660030) {
	var F={procname:"bltinmodule.registerBltinFunction",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
		F.line = 10;
		var name_str_660031 = new_py_string_176075(name_660029);
		if (!(!(has_key_532437(bltin_dict_544014, name_str_660031)))) {
		F.line = 11;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/bltinmodule.nim(11, 3) `not hasKey(bltinDict, nameStr)` "));
		}
		
		F.line = 12;
		HEX5BHEX5DHEX3D_533842(bltin_dict_544014, name_str_660031, new_py_nim_func_559444(fun_660030, name_str_660031));
	framePtr = F.prev;

	
}

function builtin_print_660482(args_660485) {
	var result_660486 = null;

	var F={procname:"bltinmodule.builtinPrint",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 68;
		L1: do {
			F.line = 68;
			var obj_660495 = null;
			F.line = 3911;
			var i_661226 = 0;
			F.line = 3912;
			var l_661228 = (args_660485 != null ? args_660485.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_661226 < l_661228)) break L3;
						F.line = 3914;
						obj_660495 = args_660485[chckIndx(i_661226, 0, args_660485.length+0-1)-0];
						F.line = 69;
						F.line = 45;
						if ((obj_660495.pyType === null)) {
						F.line = 2895;
						var e_660522 = null;
						F.line = 2896;
						e_660522 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_660522.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_660522.parent = null;
						F.line = 26;
						raiseException(e_660522, "InternalError");
						}
						
						F.line = 27;
						var fun_660602 = obj_660495.pyType.magicMethods.Field24;
						if ((fun_660602 === null)) {
						F.line = 29;
						var obj_type_str_660611 = obj_660495.pyType.name;
						F.line = 30;
						var method_str_660613 = makeNimstrLit("str");
						F.line = 31;
						var msg_660615 = (makeNimstrLit("No ")).concat(method_str_660613,makeNimstrLit(" method for "),obj_type_str_660611,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 106;
						var excp_660617 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_660617.tk = 3;
						F.line = 108;
						excp_660617.thrown = true;
						F.line = 109;
						excp_660617.msg = new_py_string_176075(msg_660615);
						var excp_660620 = excp_660617;
						F.line = 36;
						result_660486 = excp_660620;
						break BeforeRet;
						}
						
						var fun_660802 = fun_660602;
						F.line = 46;
						var res_660804 = fun_660802(obj_660495);
						var obj_str_661001 = res_660804;
						if (!(of_py_str_object_175092(obj_str_661001))) {
						F.line = 159;
						var type_name_661004 = nimCopy(null, obj_str_661001.pyType.name, NTI138);
						F.line = 160;
						F.line = 160;
						var fmt_res_661007 = mnewString(0);
						F.line = 160;
						if (fmt_res_661007 != null) { fmt_res_661007 = (fmt_res_661007).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_661007 = makeNimstrLit(" returned non-string (type "); };
						F.line = 260;
						if (fmt_res_661007 != null) { fmt_res_661007 = (fmt_res_661007).concat(type_name_661004); } else { fmt_res_661007 = type_name_661004.slice(); };
						F.line = 160;
						if (fmt_res_661007 != null) { fmt_res_661007 = (fmt_res_661007).concat(makeNimstrLit(")")); } else { fmt_res_661007 = makeNimstrLit(")"); };
						var msg_661202 = (makeNimstrLit("__str__")).concat(fmt_res_661007);
						F.line = 161;
						F.line = 106;
						var excp_661204 = new_py_type_error_simple_360601();
						F.line = 107;
						excp_661204.tk = 3;
						F.line = 108;
						excp_661204.thrown = true;
						F.line = 109;
						excp_661204.msg = new_py_string_176075(msg_661202);
						result_660486 = excp_661204;
						break BeforeRet;
						}
						
						F.line = 14;
						rawEcho(obj_str_661001.str);
						L4: do {
							F.line = 15;
							var line_661212 = null;
							F.line = 597;
							var colontmp__661215 = null;
							F.line = 71;
							colontmp__661215 = obj_str_661001.str;
							F.line = 455;
							var last_661219 = 0;
							F.line = 456;
							var splits_661221 = -1;
							L5: do {
								F.line = 614;
									L6: while (true) {
									if (!(last_661219 <= (colontmp__661215 != null ? colontmp__661215.length : 0))) break L6;
										F.line = 459;
										var first_661223 = last_661219;
										L7: do {
											F.line = 460;
												L8: while (true) {
												if (!((last_661219 < (colontmp__661215 != null ? colontmp__661215.length : 0)) && !(substr_eq_132789(colontmp__661215, last_661219, makeNimstrLit("\x0A"))))) break L8;
													F.line = 461;
													last_661219 = addInt(last_661219, 1);
												}
										} while(false);
										if ((splits_661221 == 0)) {
										F.line = 462;
										last_661219 = (colontmp__661215 != null ? colontmp__661215.length : 0);
										}
										
										F.line = 463;
										line_661212 = substr_23422(colontmp__661215, first_661223, subInt(last_661219, 1));
										F.line = 16;
										log(" ", toJSStr(line_661212));
										if ((splits_661221 == 0)) {
										F.line = 464;
										break L5;
										}
										
										F.line = 465;
										splits_661221 = subInt(splits_661221, 1);
										F.line = 466;
										last_661219 = addInt(last_661219, 1);
									}
							} while(false);
						} while(false);
						F.line = 3915;
						i_661226 = addInt(i_661226, 1);
						if (!(((args_660485 != null ? args_660485.length : 0) == l_661228))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_660486 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_660486;

}

function update_543227(d1_543229, d2_543230) {
	var F={procname:"dictobject.update",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 142;
			var k_543240 = null;
			F.line = 142;
			var v_543241 = null;
			F.line = 270;
			var colontmp__543243 = {data: null, counter: 0};
			F.line = 142;
			nimCopy(colontmp__543243, d2_543230.table, NTI531188);
			L2: do {
				F.line = 272;
				var h_543247 = 0;
				F.line = 2104;
				var colontmp__543249 = 0;
				F.line = 272;
				colontmp__543249 = (colontmp__543243.data != null ? (colontmp__543243.data.length-1) : -1);
				F.line = 2107;
				var res_543251 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_543251 <= colontmp__543249)) break L4;
							F.line = 2109;
							h_543247 = res_543251;
							if (is_filled_146491(colontmp__543243.data[chckIndx(h_543247, 0, colontmp__543243.data.length+0-1)-0].Field0)) {
							F.line = 273;
							k_543240 = colontmp__543243.data[chckIndx(h_543247, 0, colontmp__543243.data.length+0-1)-0].Field1;
							F.line = 273;
							v_543241 = colontmp__543243.data[chckIndx(h_543247, 0, colontmp__543243.data.length+0-1)-0].Field2;
							F.line = 143;
							HEX5BHEX5DHEX3D_533842(d1_543229, k_543240, v_543241);
							}
							
							F.line = 2110;
							res_543251 = addInt(res_543251, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function keys_542653(d_542655) {
								var Tmp5;

	var result_542656 = null;

	var F={procname:"dictobject.keys",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		F.line = 134;
		result_542656 = new_py_list_516257();
		L1: do {
			F.line = 135;
			var key_543140 = null;
			F.line = 281;
			var colontmp__543203 = {data: null, counter: 0};
			F.line = 135;
			nimCopy(colontmp__543203, d_542655.table, NTI531188);
			L2: do {
				F.line = 283;
				var h_543207 = 0;
				F.line = 2104;
				var colontmp__543209 = 0;
				F.line = 283;
				colontmp__543209 = (colontmp__543203.data != null ? (colontmp__543203.data.length-1) : -1);
				F.line = 2107;
				var res_543211 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_543211 <= colontmp__543209)) break L4;
							F.line = 2109;
							h_543207 = res_543211;
							if (is_filled_146491(colontmp__543203.data[chckIndx(h_543207, 0, colontmp__543203.data.length+0-1)-0].Field0)) {
							F.line = 284;
							key_543140 = colontmp__543203.data[chckIndx(h_543207, 0, colontmp__543203.data.length+0-1)-0].Field1;
							F.line = 136;
							var reb_obj_543153 = append_py_list_object_method_518859(result_542656, [key_543140]);
								if (of_py_exception_object_358259(reb_obj_543153)) {
								Tmp5 = reb_obj_543153.thrown;
								}
								else {
								Tmp5 = false;
								}
								
							if (Tmp5) {
							F.line = 2895;
							var e_543159 = null;
							F.line = 2896;
							e_543159 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 138;
							e_543159.message = nimCopy(null, makeNimstrLit("No chance for append to thrown exception"), NTI138);
							F.line = 2891;
							e_543159.parent = null;
							F.line = 138;
							raiseException(e_543159, "InternalError");
							}
							
							}
							
							F.line = 2110;
							res_543211 = addInt(res_543211, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_542656;

}

function bltindir_661243(args_661258) {
	var result_661259 = null;

	var F={procname:"bltinmodule.bltindir",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 75;
		if (!(((args_661258 != null ? args_661258.length : 0) == 1))) {
		F.line = 190;
		var msg_661271 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_661276 = mnewString(0);
		F.line = 192;
		if (fmt_res_661276 != null) { fmt_res_661276 = (fmt_res_661276).concat(makeNimstrLit(" argument (")); } else { fmt_res_661276 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_661276 != null) { fmt_res_661276 = (fmt_res_661276).concat(cstrToNimstr(((args_661258 != null ? args_661258.length : 0))+"")); } else { fmt_res_661276 = cstrToNimstr(((args_661258 != null ? args_661258.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_661276 != null) { fmt_res_661276 = (fmt_res_661276).concat(makeNimstrLit(" given)")); } else { fmt_res_661276 = makeNimstrLit(" given)"); };
		msg_661271 = nimCopy(null, (makeNimstrLit("dir takes exactly 1")).concat(fmt_res_661276), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_661410 = mnewString(0);
			F.line = 194;
			if (fmt_res_661410 != null) { fmt_res_661410 = (fmt_res_661410).concat(makeNimstrLit(" argument (")); } else { fmt_res_661410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_661410 != null) { fmt_res_661410 = (fmt_res_661410).concat(cstrToNimstr(((args_661258 != null ? args_661258.length : 0))+"")); } else { fmt_res_661410 = cstrToNimstr(((args_661258 != null ? args_661258.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_661410 != null) { fmt_res_661410 = (fmt_res_661410).concat(makeNimstrLit(" given)")); } else { fmt_res_661410 = makeNimstrLit(" given)"); };
			msg_661271 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_661410), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_661609 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_661609.tk = 3;
		F.line = 108;
		excp_661609.thrown = true;
		F.line = 109;
		excp_661609.msg = new_py_string_176075(msg_661271);
		result_661259 = excp_661609;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_661611 = args_661258[chckIndx(0, 0, args_661258.length+0-1)-0];
		F.line = 78;
		var merged_dict_661612 = new_py_dict_532257();
		F.line = 79;
		update_543227(merged_dict_661612, get_type_dict_629304(obj_661611));
		if (has_dict_159278(obj_661611)) {
		F.line = 81;
		update_543227(merged_dict_661612, get_dict_159307(obj_661611));
		}
		
		result_661259 = keys_542653(merged_dict_661612);
	} while (false);
	framePtr = F.prev;

	return result_661259;

}

function bltinid_661626(args_661641) {
	var result_661642 = null;

	var F={procname:"bltinmodule.bltinid",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 85;
		if (!(((args_661641 != null ? args_661641.length : 0) == 1))) {
		F.line = 190;
		var msg_661654 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_661659 = mnewString(0);
		F.line = 192;
		if (fmt_res_661659 != null) { fmt_res_661659 = (fmt_res_661659).concat(makeNimstrLit(" argument (")); } else { fmt_res_661659 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_661659 != null) { fmt_res_661659 = (fmt_res_661659).concat(cstrToNimstr(((args_661641 != null ? args_661641.length : 0))+"")); } else { fmt_res_661659 = cstrToNimstr(((args_661641 != null ? args_661641.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_661659 != null) { fmt_res_661659 = (fmt_res_661659).concat(makeNimstrLit(" given)")); } else { fmt_res_661659 = makeNimstrLit(" given)"); };
		msg_661654 = nimCopy(null, (makeNimstrLit("id takes exactly 1")).concat(fmt_res_661659), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_661810 = mnewString(0);
			F.line = 194;
			if (fmt_res_661810 != null) { fmt_res_661810 = (fmt_res_661810).concat(makeNimstrLit(" argument (")); } else { fmt_res_661810 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_661810 != null) { fmt_res_661810 = (fmt_res_661810).concat(cstrToNimstr(((args_661641 != null ? args_661641.length : 0))+"")); } else { fmt_res_661810 = cstrToNimstr(((args_661641 != null ? args_661641.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_661810 != null) { fmt_res_661810 = (fmt_res_661810).concat(makeNimstrLit(" given)")); } else { fmt_res_661810 = makeNimstrLit(" given)"); };
			msg_661654 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_661810), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_662009 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_662009.tk = 3;
		F.line = 108;
		excp_662009.thrown = true;
		F.line = 109;
		excp_662009.msg = new_py_string_176075(msg_661654);
		result_661642 = excp_662009;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_662011 = args_661641[chckIndx(0, 0, args_661641.length+0-1)-0];
		result_661642 = new_py_int_378257(id_157596(obj_662011));
	} while (false);
	framePtr = F.prev;

	return result_661642;

}

function bltinlen_662025(args_662040) {
	var result_662041 = null;

	var F={procname:"bltinmodule.bltinlen",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 88;
		if (!(((args_662040 != null ? args_662040.length : 0) == 1))) {
		F.line = 190;
		var msg_662053 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_662058 = mnewString(0);
		F.line = 192;
		if (fmt_res_662058 != null) { fmt_res_662058 = (fmt_res_662058).concat(makeNimstrLit(" argument (")); } else { fmt_res_662058 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_662058 != null) { fmt_res_662058 = (fmt_res_662058).concat(cstrToNimstr(((args_662040 != null ? args_662040.length : 0))+"")); } else { fmt_res_662058 = cstrToNimstr(((args_662040 != null ? args_662040.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_662058 != null) { fmt_res_662058 = (fmt_res_662058).concat(makeNimstrLit(" given)")); } else { fmt_res_662058 = makeNimstrLit(" given)"); };
		msg_662053 = nimCopy(null, (makeNimstrLit("len takes exactly 1")).concat(fmt_res_662058), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_662210 = mnewString(0);
			F.line = 194;
			if (fmt_res_662210 != null) { fmt_res_662210 = (fmt_res_662210).concat(makeNimstrLit(" argument (")); } else { fmt_res_662210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_662210 != null) { fmt_res_662210 = (fmt_res_662210).concat(cstrToNimstr(((args_662040 != null ? args_662040.length : 0))+"")); } else { fmt_res_662210 = cstrToNimstr(((args_662040 != null ? args_662040.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_662210 != null) { fmt_res_662210 = (fmt_res_662210).concat(makeNimstrLit(" given)")); } else { fmt_res_662210 = makeNimstrLit(" given)"); };
			msg_662053 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_662210), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_662409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_662409.tk = 3;
		F.line = 108;
		excp_662409.thrown = true;
		F.line = 109;
		excp_662409.msg = new_py_string_176075(msg_662053);
		result_662041 = excp_662409;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_662411 = args_662040[chckIndx(0, 0, args_662040.length+0-1)-0];
		F.line = 45;
		if ((obj_662411.pyType === null)) {
		F.line = 2895;
		var e_662438 = null;
		F.line = 2896;
		e_662438 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_662438.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_662438.parent = null;
		F.line = 26;
		raiseException(e_662438, "InternalError");
		}
		
		F.line = 27;
		var fun_662602 = obj_662411.pyType.magicMethods.Field23;
		if ((fun_662602 === null)) {
		F.line = 29;
		var obj_type_str_662611 = obj_662411.pyType.name;
		F.line = 30;
		var method_str_662613 = makeNimstrLit("len");
		F.line = 31;
		var msg_662615 = (makeNimstrLit("No ")).concat(method_str_662613,makeNimstrLit(" method for "),obj_type_str_662611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_662617 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_662617.tk = 3;
		F.line = 108;
		excp_662617.thrown = true;
		F.line = 109;
		excp_662617.msg = new_py_string_176075(msg_662615);
		var excp_662620 = excp_662617;
		F.line = 36;
		result_662041 = excp_662620;
		break BeforeRet;
		}
		
		var fun_662802 = fun_662602;
		F.line = 46;
		var res_662804 = fun_662802(obj_662411);
		result_662041 = res_662804;
	} while (false);
	framePtr = F.prev;

	return result_662041;

}

function bltiniter_663014(args_663029) {
	var result_663030 = null;

	var F={procname:"bltinmodule.bltiniter",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 92;
		if (!(((args_663029 != null ? args_663029.length : 0) == 1))) {
		F.line = 190;
		var msg_663042 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_663047 = mnewString(0);
		F.line = 192;
		if (fmt_res_663047 != null) { fmt_res_663047 = (fmt_res_663047).concat(makeNimstrLit(" argument (")); } else { fmt_res_663047 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_663047 != null) { fmt_res_663047 = (fmt_res_663047).concat(cstrToNimstr(((args_663029 != null ? args_663029.length : 0))+"")); } else { fmt_res_663047 = cstrToNimstr(((args_663029 != null ? args_663029.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_663047 != null) { fmt_res_663047 = (fmt_res_663047).concat(makeNimstrLit(" given)")); } else { fmt_res_663047 = makeNimstrLit(" given)"); };
		msg_663042 = nimCopy(null, (makeNimstrLit("iter takes exactly 1")).concat(fmt_res_663047), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_663210 = mnewString(0);
			F.line = 194;
			if (fmt_res_663210 != null) { fmt_res_663210 = (fmt_res_663210).concat(makeNimstrLit(" argument (")); } else { fmt_res_663210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_663210 != null) { fmt_res_663210 = (fmt_res_663210).concat(cstrToNimstr(((args_663029 != null ? args_663029.length : 0))+"")); } else { fmt_res_663210 = cstrToNimstr(((args_663029 != null ? args_663029.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_663210 != null) { fmt_res_663210 = (fmt_res_663210).concat(makeNimstrLit(" given)")); } else { fmt_res_663210 = makeNimstrLit(" given)"); };
			msg_663042 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_663210), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_663409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_663409.tk = 3;
		F.line = 108;
		excp_663409.thrown = true;
		F.line = 109;
		excp_663409.msg = new_py_string_176075(msg_663042);
		result_663030 = excp_663409;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_663411 = args_663029[chckIndx(0, 0, args_663029.length+0-1)-0];
		F.line = 45;
		if ((obj_663411.pyType === null)) {
		F.line = 2895;
		var e_663438 = null;
		F.line = 2896;
		e_663438 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_663438.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_663438.parent = null;
		F.line = 26;
		raiseException(e_663438, "InternalError");
		}
		
		F.line = 27;
		var fun_663602 = obj_663411.pyType.magicMethods.Field36;
		if ((fun_663602 === null)) {
		F.line = 29;
		var obj_type_str_663611 = obj_663411.pyType.name;
		F.line = 30;
		var method_str_663613 = makeNimstrLit("iter");
		F.line = 31;
		var msg_663615 = (makeNimstrLit("No ")).concat(method_str_663613,makeNimstrLit(" method for "),obj_type_str_663611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_663617 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_663617.tk = 3;
		F.line = 108;
		excp_663617.thrown = true;
		F.line = 109;
		excp_663617.msg = new_py_string_176075(msg_663615);
		var excp_663620 = excp_663617;
		F.line = 36;
		result_663030 = excp_663620;
		break BeforeRet;
		}
		
		var fun_663802 = fun_663602;
		F.line = 46;
		var res_663804 = fun_663802(obj_663411);
		result_663030 = res_663804;
	} while (false);
	framePtr = F.prev;

	return result_663030;

}

function bltinrepr_664014(args_664029) {
	var result_664030 = null;

	var F={procname:"bltinmodule.bltinrepr",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 94;
		if (!(((args_664029 != null ? args_664029.length : 0) == 1))) {
		F.line = 190;
		var msg_664042 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_664047 = mnewString(0);
		F.line = 192;
		if (fmt_res_664047 != null) { fmt_res_664047 = (fmt_res_664047).concat(makeNimstrLit(" argument (")); } else { fmt_res_664047 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_664047 != null) { fmt_res_664047 = (fmt_res_664047).concat(cstrToNimstr(((args_664029 != null ? args_664029.length : 0))+"")); } else { fmt_res_664047 = cstrToNimstr(((args_664029 != null ? args_664029.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_664047 != null) { fmt_res_664047 = (fmt_res_664047).concat(makeNimstrLit(" given)")); } else { fmt_res_664047 = makeNimstrLit(" given)"); };
		msg_664042 = nimCopy(null, (makeNimstrLit("repr takes exactly 1")).concat(fmt_res_664047), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_664210 = mnewString(0);
			F.line = 194;
			if (fmt_res_664210 != null) { fmt_res_664210 = (fmt_res_664210).concat(makeNimstrLit(" argument (")); } else { fmt_res_664210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_664210 != null) { fmt_res_664210 = (fmt_res_664210).concat(cstrToNimstr(((args_664029 != null ? args_664029.length : 0))+"")); } else { fmt_res_664210 = cstrToNimstr(((args_664029 != null ? args_664029.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_664210 != null) { fmt_res_664210 = (fmt_res_664210).concat(makeNimstrLit(" given)")); } else { fmt_res_664210 = makeNimstrLit(" given)"); };
			msg_664042 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_664210), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_664409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_664409.tk = 3;
		F.line = 108;
		excp_664409.thrown = true;
		F.line = 109;
		excp_664409.msg = new_py_string_176075(msg_664042);
		result_664030 = excp_664409;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_664411 = args_664029[chckIndx(0, 0, args_664029.length+0-1)-0];
		F.line = 45;
		if ((obj_664411.pyType === null)) {
		F.line = 2895;
		var e_664438 = null;
		F.line = 2896;
		e_664438 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_664438.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_664438.parent = null;
		F.line = 26;
		raiseException(e_664438, "InternalError");
		}
		
		F.line = 27;
		var fun_664602 = obj_664411.pyType.magicMethods.Field25;
		if ((fun_664602 === null)) {
		F.line = 29;
		var obj_type_str_664611 = obj_664411.pyType.name;
		F.line = 30;
		var method_str_664613 = makeNimstrLit("repr");
		F.line = 31;
		var msg_664615 = (makeNimstrLit("No ")).concat(method_str_664613,makeNimstrLit(" method for "),obj_type_str_664611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 106;
		var excp_664617 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_664617.tk = 3;
		F.line = 108;
		excp_664617.thrown = true;
		F.line = 109;
		excp_664617.msg = new_py_string_176075(msg_664615);
		var excp_664620 = excp_664617;
		F.line = 36;
		result_664030 = excp_664620;
		break BeforeRet;
		}
		
		var fun_664802 = fun_664602;
		F.line = 46;
		var res_664804 = fun_664802(obj_664411);
		result_664030 = res_664804;
	} while (false);
	framePtr = F.prev;

	return result_664030;

}

function new_py_frame_561047(fun_561049) {
			var Tmp1;

	var result_594204 = null;

	var F={procname:"neval.newPyFrame",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 651;
		var obj_594219 = new_py_frame_561050(fun_561049, [], null);
			if (of_py_exception_object_358259(obj_594219)) {
			Tmp1 = obj_594219.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 2895;
		var e_594225 = null;
		F.line = 2896;
		e_594225 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 31;
		e_594225.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_594225.parent = null;
		F.line = 653;
		raiseException(e_594225, "InternalError");
		}
		else {
			F.line = 655;
			result_594204 = obj_594219;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_594204;

}

function HEX5BHEX5D_548234(s_548241, x_548244) {
	var result_548246 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_548401 = x_548244.a;
		F.line = 3707;
		var l_548601 = addInt(subInt(x_548244.b, a_548401), 1);
		F.line = 3708;
		result_548246 = new Array(chckRange(l_548601, 0, 2147483647)); for (var i=0;i<chckRange(l_548601, 0, 2147483647);++i) {result_548246[i]=null;}		L1: do {
			F.line = 3709;
			var i_548621 = 0;
			F.line = 3617;
			var i_548629 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_548629 < l_548601)) break L3;
						F.line = 3619;
						i_548621 = i_548629;
						F.line = 3709;
						result_548246[chckIndx(i_548621, 0, result_548246.length+0-1)-0] = s_548241[chckIndx(addInt(i_548621, a_548401), 0, s_548241.length+0-1)-0];
						F.line = 3620;
						i_548629 = addInt(i_548629, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_548246;

}

function HEX5BHEX5D_548832(s_548839, x_548842) {
	var result_548844 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_549001 = x_548842.a;
		F.line = 3707;
		var l_549207 = addInt(subInt(subInt((s_548839 != null ? s_548839.length : 0), x_548842.b), a_549001), 1);
		F.line = 3708;
		result_548844 = new Array(chckRange(l_549207, 0, 2147483647)); for (var i=0;i<chckRange(l_549207, 0, 2147483647);++i) {result_548844[i]=null;}		L1: do {
			F.line = 3709;
			var i_549227 = 0;
			F.line = 3617;
			var i_549235 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_549235 < l_549207)) break L3;
						F.line = 3619;
						i_549227 = i_549235;
						F.line = 3709;
						result_548844[chckIndx(i_549227, 0, result_548844.length+0-1)-0] = s_548839[chckIndx(addInt(i_549227, a_549001), 0, s_548839.length+0-1)-0];
						F.line = 3620;
						i_549235 = addInt(i_549235, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_548844;

}

function to_py_dict_548073(f_548075) {
	var result_548076 = null;

	var F={procname:"frameobject.toPyDict",prev:framePtr,filename:"../Objects/frameobject.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_548076 = new_py_dict_532257();
		F.line = 29;
		var c_548077 = f_548075.code;
		L1: do {
			F.line = 30;
			var idx_548091 = 0;
			F.line = 30;
			var v_548092 = null;
			F.line = 2352;
			var colontmp__549410 = null;
			F.line = 30;
			colontmp__549410 = f_548075.fastLocals;
			F.line = 2354;
			var i_549413 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_549413 < (colontmp__549410 != null ? colontmp__549410.length : 0))) break L3;
						F.line = 2356;
						idx_548091 = i_549413;
						F.line = 2356;
						v_548092 = colontmp__549410[chckIndx(i_549413, 0, colontmp__549410.length+0-1)-0];
						L4: do {
							if ((v_548092 === null)) {
							F.line = 32;
							break L4;
							}
							
							F.line = 33;
							HEX5BHEX5DHEX3D_533842(result_548076, c_548077.localVars[chckIndx(idx_548091, 0, c_548077.localVars.length+0-1)-0], v_548092);
						} while(false);
						F.line = 2357;
						i_549413 = addInt(i_549413, 1);
					}
			} while(false);
		} while(false);
		F.line = 34;
		var n_548107 = (c_548077.cellVars != null ? c_548077.cellVars.length : 0);
		L5: do {
			F.line = 35;
			var idx_548690 = 0;
			F.line = 35;
			var cell_548691 = null;
			F.line = 2352;
			var colontmp__549416 = null;
			F.line = 35;
			colontmp__549416 = HEX5BHEX5D_548234(f_548075.cellVars, HEX2EHEX2E_48828(0, subInt(n_548107, 1)));
			F.line = 2354;
			var i_549419 = 0;
			L6: do {
				F.line = 2355;
					L7: while (true) {
					if (!(i_549419 < (colontmp__549416 != null ? colontmp__549416.length : 0))) break L7;
						F.line = 2356;
						idx_548690 = i_549419;
						F.line = 2356;
						cell_548691 = colontmp__549416[chckIndx(i_549419, 0, colontmp__549416.length+0-1)-0];
						L8: do {
							if (!(!((cell_548691 === null)))) {
							F.line = 36;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/frameobject.nim(36, 5) `not isNil(cell)` "));
							}
							
							if ((cell_548691.refObj === null)) {
							F.line = 38;
							break L8;
							}
							
							F.line = 39;
							HEX5BHEX5DHEX3D_533842(result_548076, c_548077.cellVars[chckIndx(idx_548690, 0, c_548077.cellVars.length+0-1)-0], cell_548691.refObj);
						} while(false);
						F.line = 2357;
						i_549419 = addInt(i_549419, 1);
					}
			} while(false);
		} while(false);
		L9: do {
			F.line = 40;
			var idx_549263 = 0;
			F.line = 40;
			var cell_549264 = null;
			F.line = 2352;
			var colontmp__549423 = null;
			F.line = 40;
			colontmp__549423 = HEX5BHEX5D_548832(f_548075.cellVars, HEX2EHEX2E_81053(n_548107, 1));
			F.line = 2354;
			var i_549426 = 0;
			L10: do {
				F.line = 2355;
					L11: while (true) {
					if (!(i_549426 < (colontmp__549423 != null ? colontmp__549423.length : 0))) break L11;
						F.line = 2356;
						idx_549263 = i_549426;
						F.line = 2356;
						cell_549264 = colontmp__549423[chckIndx(i_549426, 0, colontmp__549423.length+0-1)-0];
						L12: do {
							if (!(!((cell_549264 === null)))) {
							F.line = 41;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/frameobject.nim(41, 5) `not isNil(cell)` "));
							}
							
							if ((cell_549264.refObj === null)) {
							F.line = 43;
							break L12;
							}
							
							F.line = 44;
							HEX5BHEX5DHEX3D_533842(result_548076, c_548077.freeVars[chckIndx(idx_549263, 0, c_548077.freeVars.length+0-1)-0], cell_549264.refObj);
						} while(false);
						F.line = 2357;
						i_549426 = addInt(i_549426, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_548076;

}

function bltinbuild_class_665018(args_665033) {
			var Tmp1;
			var Tmp2;

	var result_665034 = null;

	var F={procname:"bltinmodule.bltinbuildClass",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 96;
		if (!(((args_665033 != null ? args_665033.length : 0) == 2))) {
		F.line = 190;
		var msg_665046 = null;
		if (true) {
		F.line = 192;
		F.line = 192;
		var fmt_res_665051 = mnewString(0);
		F.line = 192;
		if (fmt_res_665051 != null) { fmt_res_665051 = (fmt_res_665051).concat(makeNimstrLit(" argument (")); } else { fmt_res_665051 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_665051 != null) { fmt_res_665051 = (fmt_res_665051).concat(cstrToNimstr(((args_665033 != null ? args_665033.length : 0))+"")); } else { fmt_res_665051 = cstrToNimstr(((args_665033 != null ? args_665033.length : 0))+"").slice(); };
		F.line = 192;
		if (fmt_res_665051 != null) { fmt_res_665051 = (fmt_res_665051).concat(makeNimstrLit(" given)")); } else { fmt_res_665051 = makeNimstrLit(" given)"); };
		msg_665046 = nimCopy(null, (makeNimstrLit("buildClass takes exactly 2")).concat(fmt_res_665051), NTI138);
		}
		else {
			F.line = 194;
			F.line = 194;
			var fmt_res_665210 = mnewString(0);
			F.line = 194;
			if (fmt_res_665210 != null) { fmt_res_665210 = (fmt_res_665210).concat(makeNimstrLit(" argument (")); } else { fmt_res_665210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_665210 != null) { fmt_res_665210 = (fmt_res_665210).concat(cstrToNimstr(((args_665033 != null ? args_665033.length : 0))+"")); } else { fmt_res_665210 = cstrToNimstr(((args_665033 != null ? args_665033.length : 0))+"").slice(); };
			F.line = 194;
			if (fmt_res_665210 != null) { fmt_res_665210 = (fmt_res_665210).concat(makeNimstrLit(" given)")); } else { fmt_res_665210 = makeNimstrLit(" given)"); };
			msg_665046 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_665210), NTI138);
		}
		
		F.line = 195;
		F.line = 106;
		var excp_665409 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_665409.tk = 3;
		F.line = 108;
		excp_665409.thrown = true;
		F.line = 109;
		excp_665409.msg = new_py_string_176075(msg_665046);
		result_665034 = excp_665409;
		break BeforeRet;
		}
		
		if (!(isObj(args_665033[chckIndx(0, 0, args_665033.length+0-1)-0].m_type, NTI550123))) {
		F.line = 185;
		var expected_665422 = nimCopy(null, py_function_object_type_550135.name, NTI138);
		F.line = 186;
		var got_665423 = nimCopy(null, args_665033[chckIndx(0, 0, args_665033.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_665424 = makeNimstrLit("buildClass");
		F.line = 188;
		F.line = 188;
		var fmt_res_665428 = mnewString(0);
		F.line = 260;
		if (fmt_res_665428 != null) { fmt_res_665428 = (fmt_res_665428).concat(expected_665422); } else { fmt_res_665428 = expected_665422.slice(); };
		F.line = 188;
		if (fmt_res_665428 != null) { fmt_res_665428 = (fmt_res_665428).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_665428 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_665428 != null) { fmt_res_665428 = (fmt_res_665428).concat(m_name_665424); } else { fmt_res_665428 = m_name_665424.slice(); };
		F.line = 188;
		if (fmt_res_665428 != null) { fmt_res_665428 = (fmt_res_665428).concat(makeNimstrLit(" (got ")); } else { fmt_res_665428 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_665428 != null) { fmt_res_665428 = (fmt_res_665428).concat(got_665423); } else { fmt_res_665428 = got_665423.slice(); };
		F.line = 188;
		if (fmt_res_665428 != null) { fmt_res_665428 = (fmt_res_665428).concat(makeNimstrLit(")")); } else { fmt_res_665428 = makeNimstrLit(")"); };
		var msg_666002 = nimCopy(null, fmt_res_665428, NTI138);
		F.line = 189;
		F.line = 106;
		var excp_666004 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_666004.tk = 3;
		F.line = 108;
		excp_666004.thrown = true;
		F.line = 109;
		excp_666004.msg = new_py_string_176075(msg_666002);
		result_665034 = excp_666004;
		break BeforeRet;
		}
		
		F.line = 237;
		var func_obj_666006 = args_665033[chckIndx(0, 0, args_665033.length+0-1)-0];
		if (!(isObj(args_665033[chckIndx(1, 0, args_665033.length+0-1)-0].m_type, NTI175084))) {
		F.line = 185;
		var expected_666018 = nimCopy(null, py_str_object_type_175090.name, NTI138);
		F.line = 186;
		var got_666019 = nimCopy(null, args_665033[chckIndx(1, 0, args_665033.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_666020 = makeNimstrLit("buildClass");
		F.line = 188;
		F.line = 188;
		var fmt_res_666024 = mnewString(0);
		F.line = 260;
		if (fmt_res_666024 != null) { fmt_res_666024 = (fmt_res_666024).concat(expected_666018); } else { fmt_res_666024 = expected_666018.slice(); };
		F.line = 188;
		if (fmt_res_666024 != null) { fmt_res_666024 = (fmt_res_666024).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_666024 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_666024 != null) { fmt_res_666024 = (fmt_res_666024).concat(m_name_666020); } else { fmt_res_666024 = m_name_666020.slice(); };
		F.line = 188;
		if (fmt_res_666024 != null) { fmt_res_666024 = (fmt_res_666024).concat(makeNimstrLit(" (got ")); } else { fmt_res_666024 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_666024 != null) { fmt_res_666024 = (fmt_res_666024).concat(got_666019); } else { fmt_res_666024 = got_666019.slice(); };
		F.line = 188;
		if (fmt_res_666024 != null) { fmt_res_666024 = (fmt_res_666024).concat(makeNimstrLit(")")); } else { fmt_res_666024 = makeNimstrLit(")"); };
		var msg_666602 = nimCopy(null, fmt_res_666024, NTI138);
		F.line = 189;
		F.line = 106;
		var excp_666604 = new_py_type_error_simple_360601();
		F.line = 107;
		excp_666604.tk = 3;
		F.line = 108;
		excp_666604.thrown = true;
		F.line = 109;
		excp_666604.msg = new_py_string_176075(msg_666602);
		result_665034 = excp_666604;
		break BeforeRet;
		}
		
		F.line = 237;
		var name_666606 = args_665033[chckIndx(1, 0, args_665033.length+0-1)-0];
		F.line = 98;
		var f_666607 = new_py_frame_561047(func_obj_666006);
			if (of_py_exception_object_358259(f_666607)) {
			Tmp1 = f_666607.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 2895;
		var e_666613 = null;
		F.line = 2896;
		e_666613 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 100;
		e_666613.message = nimCopy(null, makeNimstrLit("funcObj shouldn\'t have any arg issue"), NTI138);
		F.line = 2891;
		e_666613.parent = null;
		F.line = 100;
		raiseException(e_666613, "InternalError");
		}
		
		F.line = 101;
		var ret_obj_666801 = eval_frame_561056(f_666607);
			if (of_py_exception_object_358259(ret_obj_666801)) {
			Tmp2 = ret_obj_666801.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 103;
		result_665034 = ret_obj_666801;
		break BeforeRet;
		}
		
		result_665034 = new_py_type_object_magic_655921([py_type_object_type_624361, name_666606, new_py_tuple_473057([]), to_py_dict_548073(f_666607)]);
	} while (false);
	framePtr = F.prev;

	return result_665034;

}

function register_bltin_object_660214(name_660216, obj_660217) {
	var F={procname:"bltinmodule.registerBltinObject",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
		F.line = 16;
		var name_str_660218 = new_py_string_176075(name_660216);
		if (!(!(has_key_532437(bltin_dict_544014, name_str_660218)))) {
		F.line = 17;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/bltinmodule.nim(17, 3) `not hasKey(bltinDict, nameStr)` "));
		}
		
		F.line = 18;
		HEX5BHEX5DHEX3D_533842(bltin_dict_544014, name_str_660218, obj_660217);
	framePtr = F.prev;

	
}
register_bltin_function_660027(makeNimstrLit("print"), builtin_print_660482);
register_bltin_function_660027(makeNimstrLit("dir"), bltindir_661243);
register_bltin_function_660027(makeNimstrLit("id"), bltinid_661626);
register_bltin_function_660027(makeNimstrLit("len"), bltinlen_662025);
register_bltin_function_660027(makeNimstrLit("iter"), bltiniter_663014);
register_bltin_function_660027(makeNimstrLit("repr"), bltinrepr_664014);
register_bltin_function_660027(makeNimstrLit("__build_class__"), bltinbuild_class_665018);
register_bltin_object_660214(makeNimstrLit("None"), py_none_356044);
register_bltin_object_660214(makeNimstrLit("type"), py_type_object_type_624361);
register_bltin_object_660214(makeNimstrLit("range"), py_range_object_type_600163);
register_bltin_object_660214(makeNimstrLit("list"), py_list_object_type_515269);
register_bltin_object_660214(makeNimstrLit("tuple"), py_tuple_object_type_472080);
register_bltin_object_660214(makeNimstrLit("dict"), pydict_object_type_531222);
register_bltin_object_660214(makeNimstrLit("int"), py_int_object_type_377313);
register_bltin_object_660214(makeNimstrLit("str"), py_str_object_type_175090);
register_bltin_object_660214(makeNimstrLit("property"), py_property_object_type_616310);
register_bltin_object_660214(makeNimstrLit("NameError"), py_name_error_object_type_358419);
register_bltin_object_660214(makeNimstrLit("NotImplementedError"), py_not_implemented_error_object_type_359505);
register_bltin_object_660214(makeNimstrLit("TypeError"), py_type_error_object_type_360505);
register_bltin_object_660214(makeNimstrLit("AttributeError"), py_attribute_error_object_type_361505);
register_bltin_object_660214(makeNimstrLit("ValueError"), py_value_error_object_type_362505);
register_bltin_object_660214(makeNimstrLit("IndexError"), py_index_error_object_type_363505);
register_bltin_object_660214(makeNimstrLit("StopIterError"), py_stop_iter_error_object_type_364505);
register_bltin_object_660214(makeNimstrLit("LockError"), py_lock_error_object_type_365505);
register_bltin_object_660214(makeNimstrLit("ImportError"), py_import_error_object_type_366505);
register_bltin_object_660214(makeNimstrLit("UnboundLocalError"), py_unbound_local_error_object_type_367505);
register_bltin_object_660214(makeNimstrLit("KeyError"), py_key_error_object_type_368505);
register_bltin_object_660214(makeNimstrLit("AssertionError"), py_assertion_error_object_type_369505);
register_bltin_object_660214(makeNimstrLit("ZeroDivisionError"), py_zero_division_error_object_type_370505);
register_bltin_object_660214(makeNimstrLit("RuntimeError"), py_runtime_error_object_type_371505);
register_bltin_object_660214(makeNimstrLit("SyntaxError"), py_syntax_error_object_type_372505);
register_bltin_object_660214(makeNimstrLit("MemoryError"), py_memory_error_object_type_373505);
register_bltin_object_660214(makeNimstrLit("KeyboardInterruptError"), py_keyboard_interrupt_error_object_type_374505);

function new_668218() {
	var result_668223 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 210;
		var r_668402 = null;
		F.line = 211;
		r_668402 = {m_type: NTI3856, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 212;
		result_668223 = r_668402;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_668223;

}

function out_of_mem_handler_668214() {
	var F={procname:"lifecycle.outOfMemHandler",prev:framePtr,filename:"lifecycle.nim",line:0};
	framePtr = F;
		F.line = 12;
		var e_668424 = new_668218();
		F.line = 13;
		raiseException(e_668424, "OutOfMemError");
	framePtr = F.prev;

	
}
out_of_mem_hook_13426[0] = out_of_mem_handler_668214;

function new_lexer_345814(file_name_345816) {
	var result_345817 = null;

	var F={procname:"lexer.newLexer",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_345817 = {indentLevel: 0, lineNo: 0, tokenNodes: null, fileName: null};
		F.line = 78;
		result_345817.fileName = nimCopy(null, file_name_345816, NTI138);
	framePtr = F.prev;

	return result_345817;

}

function clear_indent_345872(lexer_345874) {
	var F={procname:"lexer.clearIndent",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 87;
		lexer_345874.indentLevel = 0;
	framePtr = F.prev;

	
}

function add_345888(lexer_345890, token_345891) {
	var F={procname:"lexer.add",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 90;
		if (lexer_345890.tokenNodes != null) { lexer_345890.tokenNodes.push(token_345891); } else { lexer_345890.tokenNodes = [token_345891]; };
	framePtr = F.prev;

	
}

function contains_344163(s_344168, key_344170) {
	var result_344171 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_195940(s_344168))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_344401 = [0];
		F.line = 217;
		var index_344432 = raw_get_196221(s_344168, key_344170, hc_344401, 0);
		F.line = 218;
		result_344171 = (0 <= index_344432);
	framePtr = F.prev;

	return result_344171;

}

function new_token_node_343922(token_343924, line_no_343926, col_no_343929, content_343931) {
			var Tmp1;
		var Tmp3;

	var result_343932 = null;

	var F={procname:"lexer.newTokenNode",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 53;
		result_343932 = {token: 0, lineNo: 0, colNo: 0, content: null};
			if (!(token_343924 == 2)) Tmp1 = false; else {				Tmp1 = contains_344163({data: nimCopy(null, [{Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3391160197, Field1: makeNimstrLit("not")}, {Field0: 0, Field1: []}, {Field0: 3200026375, Field1: makeNimstrLit("if")}, {Field0: 0, Field1: []}, {Field0: 1504406153, Field1: makeNimstrLit("True")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1663863439, Field1: makeNimstrLit("break")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3819243934, Field1: makeNimstrLit("with")}, {Field0: 1810735390, Field1: makeNimstrLit("and")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 2881025954, Field1: makeNimstrLit("lambda")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1910074662, Field1: makeNimstrLit("is")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3320302635, Field1: makeNimstrLit("def")}, {Field0: 374286251, Field1: makeNimstrLit("from")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3787514417, Field1: makeNimstrLit("pass")}, {Field0: 136958130, Field1: makeNimstrLit("del")}, {Field0: 0, Field1: []}, {Field0: 3932829108, Field1: makeNimstrLit("False")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 51944888, Field1: makeNimstrLit("finally")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1898487227, Field1: makeNimstrLit("try")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3262150978, Field1: makeNimstrLit("assert")}, {Field0: 2073646403, Field1: makeNimstrLit("async")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3248289094, Field1: makeNimstrLit("yield")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 4019478986, Field1: makeNimstrLit("or")}, {Field0: 1298113611, Field1: makeNimstrLit("in")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1640121937, Field1: makeNimstrLit("None")}, {Field0: 0, Field1: []}, {Field0: 3238048723, Field1: makeNimstrLit("for")}, {Field0: 0, Field1: []}, {Field0: 231505621, Field1: makeNimstrLit("raise")}, {Field0: 3304227413, Field1: makeNimstrLit("nonlocal")}, {Field0: 2733697493, Field1: makeNimstrLit("else")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 810372829, Field1: makeNimstrLit("continue")}, {Field0: 3831236573, Field1: makeNimstrLit("class")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 2568571629, Field1: makeNimstrLit("except")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3054556913, Field1: makeNimstrLit("elif")}, {Field0: 3684180594, Field1: makeNimstrLit("global")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 447930615, Field1: makeNimstrLit("return")}, {Field0: 1878035063, Field1: makeNimstrLit("import")}, {Field0: 1977490809, Field1: makeNimstrLit("while")}, {Field0: 435603066, Field1: makeNimstrLit("as")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 2622086525, Field1: makeNimstrLit("await")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}], NTI195495), counter: 35}, content_343931);			}		if (Tmp1) {
		F.line = 55;
++excHandler;
		try {
		F.line = 56;
		result_343932.token = (Tmp3 = HEX5BHEX5D_212903(str_token_map_208604, content_343931), Tmp3[0])[Tmp3[1]];
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI3854))) {
		F.line = 2895;
		var e_344726 = null;
		F.line = 2896;
		e_344726 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 31;
		e_344726.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_344726.parent = null;
		F.line = 58;
		raiseException(e_344726, "InternalError");
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		}
		else {
			F.line = 60;
			result_343932.token = token_343924;
			F.line = 61;
			switch (token_343924) {
			case 2:
			case 3:
			case 4:
				if (!(!(eqStrings(content_343931, [])))) {
				F.line = 63;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(63, 14) `\x0Anot (content == \"\")` "));
				}
				
				F.line = 64;
				result_343932.content = nimCopy(null, content_343931, NTI138);
				break;
			default: 
				if (!(eqStrings(content_343931, []))) {
				F.line = 66;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(66, 14) `content == \"\"` "));
				}
				
				break;
			}
		}
		
		if (!(!((result_343932.token == 0)))) {
		F.line = 67;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(67, 10) `\x0Anot (result.token == NULLTOKEN)` "));
		}
		
		if (is_terminator_203174(result_343932.token)) {
		if (!(((-1 < line_no_343926) && (-1 < col_no_343929)))) {
		F.line = 69;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(69, 12) `-1 < lineNo and -1 < colNo` "));
		}
		
		F.line = 70;
		result_343932.lineNo = line_no_343926;
		F.line = 71;
		result_343932.colNo = col_no_343929;
		}
		else {
			if (!(((line_no_343926 < 0) && (col_no_343929 < 0)))) {
			F.line = 73;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(73, 12) `lineNo < 0 and colNo < 0` "));
			}
			
		}
		
	framePtr = F.prev;

	return result_343932;

}

function add_345915(lexer_345917, token_345918, col_no_345919) {
	var F={procname:"lexer.add",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		if (!(is_terminator_203174(token_345918))) {
		F.line = 93;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(93, 10) `isTerminator(token)` "));
		}
		
		F.line = 94;
		add_345888(lexer_345917, new_token_node_343922(token_345918, lexer_345917.lineNo, col_no_345919, []));
	framePtr = F.prev;

	
}

function dedent_all_346014(lexer_346016) {
	var F={procname:"lexer.dedentAll",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 98;
				L2: while (true) {
				if (!!((lexer_346016.indentLevel == 0))) break L2;
					F.line = 99;
					add_345915(lexer_346016, 7, mulInt(lexer_346016.indentLevel, 4));
					F.line = 100;
					lexer_346016.indentLevel = subInt(lexer_346016.indentLevel, 1);
				}
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_337400(t_337405, key_337407, hc_337409, hc_337409_Idx) {
						var Tmp3;

	var result_337410 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_337409[hc_337409_Idx] = hash_143900(key_337407);
		if ((hc_337409[hc_337409_Idx] == 0)) {
		F.line = 45;
		hc_337409[hc_337409_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_337422 = (hc_337409[hc_337409_Idx] & (t_337405.data != null ? (t_337405.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_337405.data[chckIndx(h_337422, 0, t_337405.data.length+0-1)-0].Field0)) break L2;
						if (!(t_337405.data[chckIndx(h_337422, 0, t_337405.data.length+0-1)-0].Field0 == hc_337409[hc_337409_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_337405.data[chckIndx(h_337422, 0, t_337405.data.length+0-1)-0].Field1, key_337407);						}					if (Tmp3) {
					F.line = 38;
					result_337410 = h_337422;
					break BeforeRet;
					}
					
					F.line = 39;
					h_337422 = next_try_146614(h_337422, (t_337405.data != null ? (t_337405.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_337410 = subInt(-1, h_337422);
	} while (false);
	framePtr = F.prev;

	return result_337410;

}

function has_key_337388(t_337394, key_337396) {
	var result_337397 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_337398 = [0];
		F.line = 264;
		result_337397 = (0 <= raw_get_337400(t_337394, key_337396, hc_337398, 0));
	framePtr = F.prev;

	return result_337397;

}

function raw_insert_340416(t_340423, data_340427, data_340427_Idx, key_340429, val_340431, hc_340433, h_340435) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_340427[data_340427_Idx][chckIndx(h_340435, 0, data_340427[data_340427_Idx].length+0-1)-0].Field1 = nimCopy(null, key_340429, NTI138);
		F.line = 65;
		data_340427[data_340427_Idx][chckIndx(h_340435, 0, data_340427[data_340427_Idx].length+0-1)-0].Field2 = val_340431;
		F.line = 66;
		data_340427[data_340427_Idx][chckIndx(h_340435, 0, data_340427[data_340427_Idx].length+0-1)-0].Field0 = hc_340433;
	framePtr = F.prev;

	
}

function enlarge_339028(t_339035) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_339043 = null;
		F.line = 314;
		n_339043 = new Array(chckRange(mulInt((t_339035.data != null ? t_339035.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_339035.data != null ? t_339035.data.length : 0), 2), 0, 2147483647);++i) {n_339043[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_339035.data; t_339035.data = n_339043; n_339043 = Tmp1;		L2: do {
			F.line = 316;
			var i_339314 = 0;
			F.line = 2088;
			var colontmp__341253 = 0;
			F.line = 316;
			colontmp__341253 = (n_339043 != null ? (n_339043.length-1) : -1);
			F.line = 2094;
			var res_341256 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_341256 <= colontmp__341253)) break L4;
						F.line = 2096;
						i_339314 = res_341256;
						F.line = 317;
						var eh_339582 = n_339043[chckIndx(i_339314, 0, n_339043.length+0-1)-0].Field0;
						if (is_filled_146491(eh_339582)) {
						F.line = 319;
						var j_339591 = (eh_339582 & (t_339035.data != null ? (t_339035.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_339035.data[chckIndx(j_339591, 0, t_339035.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_339591 = next_try_146614(j_339591, (t_339035.data != null ? (t_339035.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_340416(t_339035, t_339035, "data", n_339043[chckIndx(i_339314, 0, n_339043.length+0-1)-0].Field1, n_339043[chckIndx(i_339314, 0, n_339043.length+0-1)-0].Field2, eh_339582, j_339591);
						}
						
						F.line = 2097;
						res_341256 = addInt(res_341256, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_341274(t_341279, key_341281, hc_341283) {
	var result_341284 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_341293 = (hc_341283 & (t_341279.data != null ? (t_341279.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_341279.data[chckIndx(h_341293, 0, t_341279.data.length+0-1)-0].Field0)) break L2;
					if (((t_341279.data[chckIndx(h_341293, 0, t_341279.data.length+0-1)-0].Field0 == hc_341283) && eqStrings(t_341279.data[chckIndx(h_341293, 0, t_341279.data.length+0-1)-0].Field1, key_341281))) {
					F.line = 38;
					result_341284 = h_341293;
					break BeforeRet;
					}
					
					F.line = 39;
					h_341293 = next_try_146614(h_341293, (t_341279.data != null ? (t_341279.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_341284 = subInt(-1, h_341293);
	} while (false);
	framePtr = F.prev;

	return result_341284;

}

function HEX5BHEX5DHEX3D_338481(t_338488, key_338490, val_338492) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_338493 = [0];
		F.line = 98;
		var index_338506 = raw_get_337400(t_338488, key_338490, hc_338493, 0);
		if ((0 <= index_338506)) {
		F.line = 99;
		t_338488.data[chckIndx(index_338506, 0, t_338488.data.length+0-1)-0].Field2 = val_338492;
		}
		else {
			if (must_rehash_146509((t_338488.data != null ? t_338488.data.length : 0), t_338488.counter)) {
			F.line = 90;
			enlarge_339028(t_338488);
			F.line = 91;
			index_338506 = raw_get_known_hc_341274(t_338488, key_338490, hc_338493[0]);
			}
			
			F.line = 92;
			index_338506 = subInt(-1, index_338506);
			F.line = 93;
			raw_insert_340416(t_338488, t_338488, "data", key_338490, val_338492, hc_338493[0], index_338506);
			F.line = 100;
			t_338488.counter = addInt(t_338488.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function new_338370() {
	var result_338375 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_338401 = null;
		F.line = 211;
		r_338401 = {lines: null};
		F.line = 212;
		result_338375 = r_338401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_338375;

}

function HEX5BHEX5D_342444(t_342451, key_342453) {
	var result_342455 = [null, 0];
	var result_342455_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_342457 = [0];
		F.line = 161;
		var index_342471 = raw_get_337400(t_342451, key_342453, hc_342457, 0);
		if ((0 <= index_342471)) {
		F.line = 162;
		result_342455 = t_342451.data[chckIndx(index_342471, 0, t_342451.data.length+0-1)-0]; result_342455_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_342807 = null;
			F.line = 2896;
			e_342807 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_342807.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(key_342453), NTI138);
			F.line = 2891;
			e_342807.parent = null;
			F.line = 165;
			raiseException(e_342807, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_342455, result_342455_Idx];

}

function add_source_337238(file_path_337240, content_337241) {
		var Tmp1;

	var F={procname:"lexer.addSource",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		if (!(has_key_337388(source_files_337224[0], file_path_337240))) {
		F.line = 33;
		HEX5BHEX5DHEX3D_338481(source_files_337224[0], file_path_337240, new_338370());
		}
		
		F.line = 34;
		var s_342830 = (Tmp1 = HEX5BHEX5D_342444(source_files_337224[0], file_path_337240), Tmp1[0])[Tmp1[1]];
		L2: do {
			F.line = 23;
			var item_342843 = null;
			F.line = 3909;
			var colontmp__342856 = null;
			F.line = 36;
			colontmp__342856 = nsuSplitString(content_337241, makeNimstrLit("\x0A"), -1);
			F.line = 3911;
			var i_342859 = 0;
			F.line = 3912;
			var l_342861 = (colontmp__342856 != null ? colontmp__342856.length : 0);
			L3: do {
				F.line = 3913;
					L4: while (true) {
					if (!(i_342859 < l_342861)) break L4;
						F.line = 3914;
						item_342843 = colontmp__342856[chckIndx(i_342859, 0, colontmp__342856.length+0-1)-0];
						F.line = 24;
						var Tmp5 = nimCopy(null, item_342843, NTI138);
						if (s_342830.lines != null) { s_342830.lines.push(Tmp5); } else { s_342830.lines = [Tmp5]; };
						F.line = 3915;
						i_342859 = addInt(i_342859, 1);
						if (!(((colontmp__342856 != null ? colontmp__342856.length : 0) == l_342861))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function nsuInitSkipTable(a_136262, sub_136263) {
		var m_136264 = (sub_136263 != null ? sub_136263.length : 0);
		var i_136266 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_136266 <= 248)) break L2;
					a_136262[(i_136266 + 0)] = m_136264;
					a_136262[(i_136266 + 1)] = m_136264;
					a_136262[(i_136266 + 2)] = m_136264;
					a_136262[(i_136266 + 3)] = m_136264;
					a_136262[(i_136266 + 4)] = m_136264;
					a_136262[(i_136266 + 5)] = m_136264;
					a_136262[(i_136266 + 6)] = m_136264;
					a_136262[(i_136266 + 7)] = m_136264;
					i_136266 += 8;
				}
		} while(false);
		L3: do {
			var i_136288 = 0;
			var colontmp__136291 = 0;
			colontmp__136291 = (m_136264 - 1);
			var i_136294 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_136294 < colontmp__136291)) break L5;
						i_136288 = i_136294;
						a_136262[sub_136263[i_136288]] = ((m_136264 - 1) - i_136288);
						i_136294 += 1;
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_136311, s_136312, sub_136313, start_136314, last_136315) {
		var Tmp1;

	var result_136317 = 0;

	BeforeRet: do {
		if ((last_136315 == 0)) {
		Tmp1 = (s_136312 != null ? (s_136312.length-1) : -1);
		}
		else {
		Tmp1 = last_136315;
		}
		
		var last_136319 = Tmp1;
		var s_len_136320 = ((last_136319 - start_136314) + 1);
		var sub_last_136321 = ((sub_136313 != null ? sub_136313.length : 0) - 1);
		if ((sub_last_136321 == -1)) {
		result_136317 = start_136314;
		break BeforeRet;
		}
		
		var skip_136323 = start_136314;
		L2: do {
				L3: while (true) {
				if (!(sub_last_136321 <= (last_136319 - skip_136323))) break L3;
					var i_136324 = sub_last_136321;
					L4: do {
							L5: while (true) {
							if (!(s_136312[(skip_136323 + i_136324)] == sub_136313[i_136324])) break L5;
								if ((i_136324 == 0)) {
								result_136317 = skip_136323;
								break BeforeRet;
								}
								
								i_136324 -= 1;
							}
					} while(false);
					skip_136323 += a_136311[s_136312[(skip_136323 + sub_last_136321)]];
				}
		} while(false);
		result_136317 = -1;
		break BeforeRet;
	} while (false);

	return result_136317;

}

function nsuFindStr(s_137035, sub_137036, start_137037, last_137038) {
	var result_137040 = 0;

	BeforeRet: do {
		if (((s_137035 != null ? s_137035.length : 0) < (sub_137036 != null ? sub_137036.length : 0))) {
		result_137040 = -1;
		break BeforeRet;
		}
		
		if (((sub_137036 != null ? sub_137036.length : 0) == 1)) {
		result_137040 = nsuFindChar(s_137035, sub_137036[0], start_137037, last_137038);
		break BeforeRet;
		}
		
		var a_137042 = [new Int32Array(256)];
		nsuInitSkipTable(a_137042[0], sub_137036);
		result_137040 = nsuFindStrA(a_137042[0], s_137035, sub_137036, start_137037, last_137038);
	} while (false);

	return result_137040;

}

function new_syntax_error_156100(msg_156102, file_name_156103, line_no_156104, col_no_156105) {
	var result_156106 = null;

	var F={procname:"utils.newSyntaxError",prev:framePtr,filename:"../Utils/utils.nim",line:0};
	framePtr = F;
		F.line = 20;
		result_156106 = {m_type: NTI156090, fileName: null, lineNo: 0, colNo: 0, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 21;
		result_156106.message = nimCopy(null, msg_156102, NTI138);
		F.line = 22;
		result_156106.fileName = nimCopy(null, file_name_156103, NTI138);
		F.line = 23;
		result_156106.lineNo = line_no_156104;
		F.line = 24;
		result_156106.colNo = col_no_156105;
	framePtr = F.prev;

	return result_156106;

}

function new_seq_324467(len_324471) {
	var result_324473 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_324473 = new Array(len_324471); for (var i=0;i<len_324471;++i) {result_324473[i]=0;}	framePtr = F.prev;

	return result_324473;

}

function init_bit_set_324449(size_324451) {
	var result_324452 = {s: null, key: 0};

	var F={procname:"regex.initBitSet",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2137;
		nimCopy(result_324452, {s: new_seq_324467(chckRange(size_324451, 0, 2147483647)), key: 1}, NTI324445);
	framePtr = F.prev;

	return result_324452;

}

function new_seq_324674(len_324678) {
	var result_324680 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_324680 = new Array(len_324678); for (var i=0;i<len_324678;++i) {result_324680[i]={Field0: 0, Field1: 0, Field2: 0, Field3: 0};}	framePtr = F.prev;

	return result_324680;

}

function init_elastic_seq_324661(size_324665) {
	var result_324667 = {s: null, pos: 0};

	var F={procname:"initElasticSeq.initElasticSeq",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 680;
		nimCopy(result_324667, {s: new_seq_324674(chckRange(size_324665, 0, 2147483647)), pos: 0}, NTI324646);
	framePtr = F.prev;

	return result_324667;

}

function init_states_324655(size_324657) {
	var result_324658 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};

	var F={procname:"regex.initStates",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2157;
		nimCopy(result_324658, {states: init_elastic_seq_324661(16), ids: init_bit_set_324449(size_324657)}, NTI324639);
	framePtr = F.prev;

	return result_324658;

}

function new_seq_329937(len_329941) {
	var result_329943 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_329943 = new Array(len_329941); for (var i=0;i<len_329941;++i) {result_329943[i]={kind: 0, prev: 0, idx: 0, cpIdx: 0};}	framePtr = F.prev;

	return result_329943;

}

function init_elastic_seq_329924(size_329928) {
	var result_329930 = {s: null, pos: 0};

	var F={procname:"initElasticSeq.initElasticSeq",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 680;
		nimCopy(result_329930, {s: new_seq_329937(chckRange(size_329928, 0, 2147483647)), pos: 0}, NTI325984);
	framePtr = F.prev;

	return result_329930;

}

function add_330094(ls_330100, x_330102) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (((ls_330100.s != null ? (ls_330100.s.length-1) : -1) < ls_330100.pos)) {
		F.line = 717;
		if (ls_330100.s.length < chckRange(mulInt((ls_330100.s != null ? ls_330100.s.length : 0), 2), 0, 2147483647)) { for (var i=ls_330100.s.length;i<chckRange(mulInt((ls_330100.s != null ? ls_330100.s.length : 0), 2), 0, 2147483647);++i) ls_330100.s.push({kind: 0, prev: 0, idx: 0, cpIdx: 0}); }
               else { ls_330100.s.length = chckRange(mulInt((ls_330100.s != null ? ls_330100.s.length : 0), 2), 0, 2147483647); };
		}
		
		F.line = 718;
		nimCopy(ls_330100.s[chckIndx(ls_330100.pos, 0, ls_330100.s.length+0-1)-0], x_330102, NTI320466);
		F.line = 719;
		ls_330100.pos = addInt(ls_330100.pos, 1);
	framePtr = F.prev;

	
}

function init_data_sets_329898(size_329900, with_captures_329901) {
	var result_329902 = {Field0: {s: null, key: 0}, Field1: {s: null, pos: 0}, Field2: {s: null, pos: 0}, Field3: {states: {s: null, pos: 0}, ids: {s: null, key: 0}}, Field4: {states: {s: null, pos: 0}, ids: {s: null, key: 0}}};

	var F={procname:"regex.initDataSets",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2259;
		var captured_329907 = {s: null, pos: 0};
		F.line = 2260;
		nimCopy(result_329902, {Field0: init_bit_set_324449(size_329900), Field1: init_elastic_seq_324661(16), Field2: captured_329907, Field3: init_states_324655(size_329900), Field4: init_states_324655(size_329900)}, NTI329872);
		if (with_captures_329901) {
		F.line = 2267;
		nimCopy(result_329902.Field2, init_elastic_seq_329924(16), NTI325984);
		F.line = 2268;
		add_330094(result_329902.Field2, {kind: 0, prev: 0, idx: 0, cpIdx: 0});
		}
		
	framePtr = F.prev;

	return result_329902;

}

function fill_324534(a_324540, value_324542) {
	var F={procname:"fill.fill",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 25;
		var x_324555 = 0;
		L1: do {
			F.line = 36;
				L2: while (true) {
				if (!(x_324555 <= (a_324540 != null ? (a_324540.length-1) : -1))) break L2;
					F.line = 36;
					a_324540[chckIndx(x_324555, 0, a_324540.length+0-1)-0] = value_324542;
					F.line = 28;
					x_324555 = addInt(x_324555, 1);
				}
		} while(false);
	framePtr = F.prev;

	
}

function clear_324519(bss_324522) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if ((bss_324522.key == 2147483647)) {
		F.line = 2141;
		fill_324534(bss_324522.s, 0);
		F.line = 2142;
		bss_324522.key = 0;
		}
		
		F.line = 2143;
		bss_324522.key = addInt(bss_324522.key, 1);
	framePtr = F.prev;

	
}

function clear_325689(ls_325695) {
	var F={procname:"clear.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 713;
		ls_325695.pos = 0;
	framePtr = F.prev;

	
}

function clear_325487(ss_325490) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2168;
		clear_325689(ss_325490.states);
		F.line = 2169;
		clear_324519(ss_325490.ids);
	framePtr = F.prev;

	
}

function len_330600(ls_330605) {
	var result_330606 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 707;
		result_330606 = ls_330605.pos;
	framePtr = F.prev;

	return result_330606;

}

function clear_330819(ls_330825) {
	var F={procname:"clear.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 713;
		ls_330825.pos = 0;
	framePtr = F.prev;

	
}

function clear_330167(ds_330170) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2273;
		clear_324519(ds_330170.Field0);
		F.line = 2274;
		clear_325689(ds_330170.Field1);
		F.line = 2275;
		clear_325487(ds_330170.Field3);
		F.line = 2276;
		clear_325487(ds_330170.Field4);
		if ((0 < len_330600(ds_330170.Field2))) {
		F.line = 2278;
		clear_330819(ds_330170.Field2);
		F.line = 2279;
		add_330094(ds_330170.Field2, {kind: 0, prev: 0, idx: 0, cpIdx: 0});
		}
		
	framePtr = F.prev;

	
}

function len_325454(ls_325459) {
	var result_325460 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 707;
		result_325460 = ls_325459.pos;
	framePtr = F.prev;

	return result_325460;

}

function len_325231(ss_325233) {
	var result_325234 = 0;

	var F={procname:"regex.len",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2165;
		result_325234 = len_325454(ss_325233.states);
	framePtr = F.prev;

	return result_325234;

}

function HEX5BHEX5D_324989(ls_324994, i_324996) {
	var result_324997 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 683;
		if (!((i_324996 < ls_324994.pos))) {
		F.line = 683;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(683, 10) `i < ls.pos` "));
		}
		
		nimCopy(result_324997, ls_324994.s[chckIndx(i_324996, 0, ls_324994.s.length+0-1)-0], NTI320468);
	framePtr = F.prev;

	return result_324997;

}

function HEX5BHEX5D_324732(ss_324734, i_324735) {
	var result_324736 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};

	var F={procname:"regex.[]",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2162;
		nimCopy(result_324736, HEX5BHEX5D_324989(ss_324734.states, i_324735), NTI320468);
	framePtr = F.prev;

	return result_324736;

}

function add_325843(ls_325849, x_325851) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (((ls_325849.s != null ? (ls_325849.s.length-1) : -1) < ls_325849.pos)) {
		F.line = 717;
		if (ls_325849.s.length < chckRange(mulInt((ls_325849.s != null ? ls_325849.s.length : 0), 2), 0, 2147483647)) { for (var i=ls_325849.s.length;i<chckRange(mulInt((ls_325849.s != null ? ls_325849.s.length : 0), 2), 0, 2147483647);++i) ls_325849.s.push({Field0: 0, Field1: 0, Field2: 0, Field3: 0}); }
               else { ls_325849.s.length = chckRange(mulInt((ls_325849.s != null ? ls_325849.s.length : 0), 2), 0, 2147483647); };
		}
		
		F.line = 718;
		nimCopy(ls_325849.s[chckIndx(ls_325849.pos, 0, ls_325849.s.length+0-1)-0], x_325851, NTI320468);
		F.line = 719;
		ls_325849.pos = addInt(ls_325849.pos, 1);
	framePtr = F.prev;

	
}

function pop_331980(ls_331986) {
	var result_331987 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 722;
		F.line = 722;
		ls_331986.pos = subInt(ls_331986.pos, 1);
		nimCopy(result_331987, ls_331986.s[chckIndx(ls_331986.pos, 0, ls_331986.s.length+0-1)-0], NTI320468);
	framePtr = F.prev;

	return result_331987;

}

function contains_324619(bss_324622, x_324623) {
	var result_324624 = false;

	var F={procname:"regex.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2149;
		result_324624 = (bss_324622.s[chckIndx(x_324623, 0, bss_324622.s.length+0-1)-0] == bss_324622.key);
	framePtr = F.prev;

	return result_324624;

}

function incl_324601(bss_324604, x_324605) {
	var F={procname:"regex.incl",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2146;
		bss_324604.s[chckIndx(x_324605, 0, bss_324604.s.length+0-1)-0] = bss_324604.key;
	framePtr = F.prev;

	
}

function add_325724(ss_325727, s_325728) {
	var F={procname:"regex.add",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!(contains_324619(ss_325727.ids, ((s_325728.Field0)|0)))) {
		F.line = 2173;
		add_325843(ss_325727.states, s_325728);
		F.line = 2174;
		incl_324601(ss_325727.ids, ((s_325728.Field0)|0));
		}
		
	framePtr = F.prev;

	
}

function HEX3DHEX3D_41480(a_41482, b_41483) {
	var result_41484 = false;

	var F={procname:"unicode.==",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 25;
		result_41484 = (((a_41482)|0) == ((b_41483)|0));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_41484;

}

function contains_278220(ut_278222, utm_278223) {
	var result_278224 = false;

	var F={procname:"types.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/types.nim",line:0};
	framePtr = F;
		F.line = 36;
		result_278224 = !(((ut_278222 & utm_278223) == 0));
	framePtr = F.prev;

	return result_278224;

}

function unicode_types_278027(cp_278029) {
	var result_278030 = 0;

	var F={procname:"types.unicodeTypes",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/types.nim",line:0};
	framePtr = F;
		if (!((((cp_278029)|0) <= 1114111))) {
		F.line = 23;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/unicodedb-0.6.0/unicodedb/types.nim(23, 10) `int(cp) <= 0x0010FFFF` "));
		}
		
		F.line = 25;
		var block_offset_278201 = mulInt(((types_offsets_277053[chckIndx(divInt(((cp_278029)|0), 128), 0, types_offsets_277053.length+0-1)-0])|0), 128);
		F.line = 26;
		var idx_278202 = types_indices_277234[chckIndx(addInt(block_offset_278201, modInt(((cp_278029)|0), 128)), 0, types_indices_277234.length+0-1)-0];
		F.line = 27;
		result_278030 = ((types_data_277237[chckIndx(idx_278202, 0, types_data_277237.length+0-1)-0])|0);
	framePtr = F.prev;

	return result_278030;

}

function is_alpha_num_282457(r_282459) {
	var result_282460 = false;

	var F={procname:"regex.isAlphaNum",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 371;
		result_282460 = contains_278220(unicode_types_278027(r_282459), 128);
	framePtr = F.prev;

	return result_282460;

}

function is_word_boundary_282547(r_282549, nxt_282550) {
		var Tmp1;
		var Tmp2;

	var result_282551 = false;

	var F={procname:"regex.isWordBoundary",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 392;
		F.line = 386;
		if (!!(HEX3DHEX3D_41480(r_282549, -1))) Tmp1 = false; else {			Tmp1 = is_alpha_num_282457(r_282549);		}		var is_word_282557 = Tmp1;
		F.line = 387;
		if (!!(HEX3DHEX3D_41480(nxt_282550, -1))) Tmp2 = false; else {			Tmp2 = is_alpha_num_282457(nxt_282550);		}		var is_nxt_word_282559 = Tmp2;
		result_282551 = ((is_word_282557 && !(is_nxt_word_282559)) || (!(is_word_282557) && is_nxt_word_282559));
	framePtr = F.prev;

	return result_282551;

}

function is_alpha_num_ascii_282474(r_282476) {
		var Tmp1;

	var result_282477 = false;

	var F={procname:"regex.isAlphaNumAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 374;
		F.line = 376;
		switch (((r_282476)|0)) {
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_282477 = Tmp1;
	framePtr = F.prev;

	return result_282477;

}

function is_word_boundary_ascii_282573(r_282575, nxt_282576) {
		var Tmp1;
		var Tmp2;

	var result_282577 = false;

	var F={procname:"regex.isWordBoundaryAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 397;
		F.line = 386;
		if (!!(HEX3DHEX3D_41480(r_282575, -1))) Tmp1 = false; else {			Tmp1 = is_alpha_num_ascii_282474(r_282575);		}		var is_word_282583 = Tmp1;
		F.line = 387;
		if (!!(HEX3DHEX3D_41480(nxt_282576, -1))) Tmp2 = false; else {			Tmp2 = is_alpha_num_ascii_282474(nxt_282576);		}		var is_nxt_word_282585 = Tmp2;
		result_282577 = ((is_word_282583 && !(is_nxt_word_282585)) || (!(is_word_282583) && is_nxt_word_282585));
	framePtr = F.prev;

	return result_282577;

}

function match_282599(n_282601, r_282602, nxt_282603) {
		var Tmp1;

	var result_282604 = false;

	var F={procname:"regex.match",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 402;
		F.line = 405;
		switch (n_282601.kind) {
		case 14:
		case 10:
			Tmp1 = HEX3DHEX3D_41480(r_282602, -1);
			break;
		case 15:
		case 11:
			Tmp1 = HEX3DHEX3D_41480(nxt_282603, -1);
			break;
		case 12:
			Tmp1 = (HEX3DHEX3D_41480(r_282602, -1) || HEX3DHEX3D_41480(r_282602, 10));
			break;
		case 13:
			Tmp1 = (HEX3DHEX3D_41480(nxt_282603, -1) || HEX3DHEX3D_41480(nxt_282603, 10));
			break;
		case 16:
			Tmp1 = is_word_boundary_282547(r_282602, nxt_282603);
			break;
		case 17:
			Tmp1 = !(is_word_boundary_282547(r_282602, nxt_282603));
			break;
		case 28:
			Tmp1 = is_word_boundary_ascii_282573(r_282602, nxt_282603);
			break;
		case 29:
			Tmp1 = !(is_word_boundary_ascii_282573(r_282602, nxt_282603));
			break;
		case 40:
			Tmp1 = HEX3DHEX3D_41480(n_282601.cp, nxt_282603);
			break;
		case 42:
			Tmp1 = !(HEX3DHEX3D_41480(n_282601.cp, nxt_282603));
			break;
		case 41:
			Tmp1 = HEX3DHEX3D_41480(n_282601.cp, r_282602);
			break;
		case 43:
			Tmp1 = !(HEX3DHEX3D_41480(n_282601.cp, r_282602));
			break;
		default: 
			if (true) {
			F.line = 433;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(433, 12) `false` "));
			}
			
			Tmp1 = false;
			break;
		}
		result_282604 = Tmp1;
	framePtr = F.prev;

	return result_282604;

}

function to_visit_step_330977(result_330984, n_330985, ci_330986, si_330987, ei_330988) {
	var F={procname:"regex.toVisitStep",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!((n_330985.outB == -1))) {
		F.line = 2288;
		add_325843(result_330984, {Field0: n_330985.outB, Field1: ci_330986, Field2: si_330987, Field3: ei_330988});
		}
		
		if (!((n_330985.outA == -1))) {
		F.line = 2290;
		add_325843(result_330984, {Field0: n_330985.outA, Field1: ci_330986, Field2: si_330987, Field3: ei_330988});
		}
		
	framePtr = F.prev;

	
}

function high_332382(ls_332387) {
	var result_332388 = 0;

	var F={procname:"high.high",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 710;
		result_332388 = subInt(ls_332387.pos, 1);
	framePtr = F.prev;

	return result_332388;

}

function step_331258(result_331261, pattern_331262, state_331263, ds_331265, cp_331266, nxt_331267) {
								var Tmp4;
								var Tmp5;

	var F={procname:"regex.step",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!((len_325454(ds_331265.Field1) == 0))) {
		F.line = 2299;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(2299, 10) `len(ds.toVisit) == 0` "));
		}
		
		F.line = 2300;
		add_325843(ds_331265.Field1, state_331263);
		L1: do {
			F.line = 2301;
				L2: while (true) {
				if (!(0 < len_325454(ds_331265.Field1))) break L2;
					L3: do {
						F.line = 2302;
						var s_332015 = pop_331980(ds_331265.Field1);
						if (contains_324619(ds_331265.Field0, ((s_332015.Field0)|0))) {
						F.line = 2304;
						break L3;
						}
						
						F.line = 2305;
						incl_324601(ds_331265.Field0, ((s_332015.Field0)|0));
						F.line = 2306;
						var n_332018 = nimCopy(null, pattern_331262.states[chckIndx(s_332015.Field0, 0, pattern_331262.states.length+0-1)-0], NTI281230);
						F.line = 2307;
						switch (n_332018.kind) {
						case 0:
						case 1:
						case 45:
						case 18:
						case 19:
						case 20:
						case 21:
						case 22:
						case 23:
						case 24:
						case 25:
						case 26:
						case 27:
						case 30:
						case 31:
						case 32:
						case 33:
						case 34:
						case 35:
						case 36:
						case 37:
						case 38:
						case 39:
							F.line = 2309;
							add_325724(result_331261, s_332015);
							break;
						case 10:
						case 11:
						case 12:
						case 13:
						case 14:
						case 15:
						case 16:
						case 17:
						case 28:
						case 29:
						case 40:
						case 41:
						case 42:
						case 43:
							if (match_282599(n_332018, cp_331266, nxt_331267)) {
							F.line = 2312;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							}
							
							break;
						case 3:
								if (!n_332018.isCapturing) Tmp4 = false; else {									Tmp4 = (0 < len_330600(ds_331265.Field2));								}							if (!(Tmp4)) {
							F.line = 2316;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							F.line = 2317;
							break L3;
							}
							
							F.line = 2318;
							add_330094(ds_331265.Field2, {kind: 0, cpIdx: state_331263.Field3, prev: s_332015.Field1, idx: n_332018.idx});
							F.line = 2323;
							to_visit_step_330977(ds_331265.Field1, n_332018, high_332382(ds_331265.Field2), s_332015.Field2, s_332015.Field3);
							break;
						case 4:
								if (!n_332018.isCapturing) Tmp5 = false; else {									Tmp5 = (0 < len_330600(ds_331265.Field2));								}							if (!(Tmp5)) {
							F.line = 2327;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							F.line = 2328;
							break L3;
							}
							
							F.line = 2329;
							add_330094(ds_331265.Field2, {kind: 1, cpIdx: subInt(state_331263.Field3, 1), prev: s_332015.Field1, idx: n_332018.idx});
							F.line = 2334;
							to_visit_step_330977(ds_331265.Field1, n_332018, high_332382(ds_331265.Field2), s_332015.Field2, s_332015.Field3);
							break;
						default: 
							F.line = 2336;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							break;
						}
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function is_decimal_279406(c_279408) {
		var Tmp1;

	var result_279409 = false;

	var F={procname:"unicodeplus.isDecimal",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodeplus-0.4.0/unicodeplus.nim",line:0};
	framePtr = F;
		F.line = 47;
		if ((((c_279408)|0) < 128)) {
		Tmp1 = nums_279349[chckIndx(((c_279408)|0), 0, nums_279349.length+0-1)-0];
		}
		else {
		Tmp1 = contains_278220(unicode_types_278027(c_279408), 1);
		}
		
		result_279409 = Tmp1;
	framePtr = F.prev;

	return result_279409;

}

function is_white_space_283256(r_283258) {
	var result_283259 = false;

	var F={procname:"regex.isWhiteSpace",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 447;
		result_283259 = contains_278220(unicode_types_278027(r_283258), 64);
	framePtr = F.prev;

	return result_283259;

}

function is_valid_283826(s_283831) {
	var result_283832 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_283832 = (0 < (s_283831.data != null ? s_283831.data.length : 0));
	framePtr = F.prev;

	return result_283832;

}

function hash_284235(x_284239) {
	var result_284240 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_284240 = x_284239;
	framePtr = F.prev;

	return result_284240;

}

function raw_get_284221(s_284226, key_284228, hc_284230, hc_284230_Idx) {
						var Tmp3;

	var result_284231 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_284261 = hash_284235(key_284228);
		if ((hc_284261 == 0)) {
		F.line = 164;
		hc_284261 = 314159265;
		}
		
		hc_284230[hc_284230_Idx] = hc_284261;
		F.line = 150;
		var h_284271 = (hc_284230[hc_284230_Idx] & (s_284226.data != null ? (s_284226.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_284226.data[chckIndx(h_284271, 0, s_284226.data.length+0-1)-0].Field0)) break L2;
						if (!(s_284226.data[chckIndx(h_284271, 0, s_284226.data.length+0-1)-0].Field0 == hc_284230[hc_284230_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_41480(s_284226.data[chckIndx(h_284271, 0, s_284226.data.length+0-1)-0].Field1, key_284228);						}					if (Tmp3) {
					F.line = 157;
					result_284231 = h_284271;
					break BeforeRet;
					}
					
					F.line = 158;
					h_284271 = next_try_154431(h_284271, (s_284226.data != null ? (s_284226.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_284231 = subInt(-1, h_284271);
	} while (false);
	framePtr = F.prev;

	return result_284231;

}

function contains_283798(s_283803, key_283805) {
	var result_283806 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_283826(s_283803))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_284201 = [0];
		F.line = 217;
		var index_285001 = raw_get_284221(s_283803, key_283805, hc_284201, 0);
		F.line = 218;
		result_283806 = (0 <= index_285001);
	framePtr = F.prev;

	return result_283806;

}

function HEX3CHEX3D_282814(x_282816, y_282817) {
	var result_282818 = false;

	var F={procname:"regex.<=",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 437;
		result_282818 = (((x_282816)|0) <= ((y_282817)|0));
	framePtr = F.prev;

	return result_282818;

}

function contains_283213(s_283220, value_283222) {
	var result_283223 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1272;
		result_283223 = (HEX3CHEX3D_282814(s_283220.a, value_283222) && HEX3CHEX3D_282814(value_283222, s_283220.b));
	framePtr = F.prev;

	return result_283223;

}

function contains_282834(sr_282841, r_282842) {
	var result_282843 = false;

	var F={procname:"regex.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 440;
		result_282843 = false;
		L1: do {
			F.line = 441;
			var sl_283015 = {a: 0, b: 0};
			F.line = 3911;
			var i_283240 = 0;
			F.line = 3912;
			var l_283242 = (sr_282841 != null ? sr_282841.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_283240 < l_283242)) break L3;
						F.line = 3914;
						nimCopy(sl_283015, sr_282841[chckIndx(i_283240, 0, sr_282841.length+0-1)-0], NTI281333);
						F.line = 442;
						result_282843 = contains_283213(sl_283015, r_282842);
						if (result_282843) {
						F.line = 444;
						break L1;
						}
						
						F.line = 3915;
						i_283240 = addInt(i_283240, 1);
						if (!(((sr_282841 != null ? sr_282841.length : 0) == l_283242))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_282843;

}

function binary_search_51351(c_51353, tab_51355, len_51356, stride_51357) {
			var Tmp3;

	var result_51358 = 0;

	var F={procname:"unicode.binarySearch",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1306;
		var n_51359 = len_51356;
		F.line = 1307;
		var t_51361 = 0;
		L1: do {
			F.line = 1308;
				L2: while (true) {
				if (!(1 < n_51359)) break L2;
					F.line = 1309;
					var m_51364 = divInt(n_51359, 2);
					F.line = 1310;
					var p_51365 = addInt(t_51361, mulInt(m_51364, stride_51357));
					if ((tab_51355[chckIndx(p_51365, 0, tab_51355.length+0-1)-0] <= ((c_51353)|0))) {
					F.line = 1312;
					t_51361 = p_51365;
					F.line = 1313;
					n_51359 = subInt(n_51359, m_51364);
					}
					else {
						F.line = 1315;
						n_51359 = m_51364;
					}
					
				}
		} while(false);
			if (!!((n_51359 == 0))) Tmp3 = false; else {				Tmp3 = (tab_51355[chckIndx(t_51361, 0, tab_51355.length+0-1)-0] <= ((c_51353)|0));			}		if (Tmp3) {
		F.line = 1317;
		result_51358 = t_51361;
		break BeforeRet;
		}
		
		F.line = 1318;
		result_51358 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_51358;

}

function nucisUpper(c_51690) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51691 = false;

	var F={procname:"unicode.isUpper",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1367;
		var c_51692 = c_51690;
		F.line = 1369;
		var p_51722 = binary_search_51351(c_51692, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 398, 399, 702, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1025, 1036, 580, 1038, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 548, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 8544, 8559, 516, 9398, 9423, 526, 65313, 65338, 532], 36, 3);
			if (!(0 <= p_51722)) Tmp2 = false; else {				Tmp2 = (tolower_ranges_50536[chckIndx(p_51722, 0, tolower_ranges_50536.length+0-1)-0] <= ((c_51692)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51692)|0) <= tolower_ranges_50536[chckIndx(addInt(p_51722, 1), 0, tolower_ranges_50536.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1371;
		result_51691 = true;
		break BeforeRet;
		}
		
		F.line = 1372;
		p_51722 = binary_search_51351(c_51692, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 416, 501, 418, 501, 420, 501, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 902, 538, 908, 564, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1217, 501, 1219, 501, 1223, 501, 1227, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1272, 501, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491], 333, 2);
			if (!(0 <= p_51722)) Tmp3 = false; else {				Tmp3 = (((c_51692)|0) == tolower_singlets_50648[chckIndx(p_51722, 0, tolower_singlets_50648.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1374;
		result_51691 = true;
		break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_51691;

}

function nuctoLower(c_51383) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51384 = 0;

	var F={procname:"unicode.toLower",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1323;
		var c_51385 = c_51383;
		F.line = 1324;
		var p_51416 = binary_search_51351(c_51385, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 398, 399, 702, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1025, 1036, 580, 1038, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 548, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 8544, 8559, 516, 9398, 9423, 526, 65313, 65338, 532], 36, 3);
			if (!(0 <= p_51416)) Tmp2 = false; else {				Tmp2 = (tolower_ranges_50536[chckIndx(p_51416, 0, tolower_ranges_50536.length+0-1)-0] <= ((c_51385)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51385)|0) <= tolower_ranges_50536[chckIndx(addInt(p_51416, 1), 0, tolower_ranges_50536.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1326;
		result_51384 = subInt(addInt(((c_51385)|0), tolower_ranges_50536[chckIndx(addInt(p_51416, 2), 0, tolower_ranges_50536.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1327;
		p_51416 = binary_search_51351(c_51385, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 416, 501, 418, 501, 420, 501, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 902, 538, 908, 564, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1217, 501, 1219, 501, 1223, 501, 1227, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1272, 501, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491], 333, 2);
			if (!(0 <= p_51416)) Tmp3 = false; else {				Tmp3 = (((c_51385)|0) == tolower_singlets_50648[chckIndx(p_51416, 0, tolower_singlets_50648.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1329;
		result_51384 = subInt(addInt(((c_51385)|0), tolower_singlets_50648[chckIndx(addInt(p_51416, 1), 0, tolower_singlets_50648.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1330;
		result_51384 = c_51385;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_51384;

}

function nucisLower(c_51609) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51610 = false;

	var F={procname:"unicode.isLower",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1355;
		var c_51611 = c_51609;
		F.line = 1357;
		var p_51641 = binary_search_51351(c_51611, [97, 122, 468, 224, 246, 468, 248, 254, 468, 598, 599, 295, 600, 601, 298, 650, 651, 283, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1105, 1116, 420, 1118, 1119, 420, 1377, 1414, 452, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 8560, 8575, 484, 9424, 9449, 474, 65345, 65370, 468], 35, 3);
			if (!(0 <= p_51641)) Tmp2 = false; else {				Tmp2 = (toupper_ranges_49743[chckIndx(p_51641, 0, toupper_ranges_49743.length+0-1)-0] <= ((c_51611)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51611)|0) <= toupper_ranges_49743[chckIndx(addInt(p_51641, 1), 0, toupper_ranges_49743.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1359;
		result_51610 = true;
		break BeforeRet;
		}
		
		F.line = 1360;
		p_51641 = binary_search_51351(c_51611, [255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 409, 499, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 595, 290, 596, 294, 603, 297, 608, 295, 611, 293, 616, 291, 617, 289, 623, 289, 626, 287, 643, 282, 648, 282, 658, 281, 940, 462, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1224, 499, 1228, 499, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1273, 499, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8131, 509, 8165, 507, 8179, 509], 340, 2);
			if (!(0 <= p_51641)) Tmp3 = false; else {				Tmp3 = (((c_51611)|0) == toupper_singlets_49852[chckIndx(p_51641, 0, toupper_singlets_49852.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1362;
		result_51610 = true;
		break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_51610;

}

function nuctoUpper(c_51470) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51471 = 0;

	var F={procname:"unicode.toUpper",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1335;
		var c_51472 = c_51470;
		F.line = 1336;
		var p_51503 = binary_search_51351(c_51472, [97, 122, 468, 224, 246, 468, 248, 254, 468, 598, 599, 295, 600, 601, 298, 650, 651, 283, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1105, 1116, 420, 1118, 1119, 420, 1377, 1414, 452, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 8560, 8575, 484, 9424, 9449, 474, 65345, 65370, 468], 35, 3);
			if (!(0 <= p_51503)) Tmp2 = false; else {				Tmp2 = (toupper_ranges_49743[chckIndx(p_51503, 0, toupper_ranges_49743.length+0-1)-0] <= ((c_51472)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51472)|0) <= toupper_ranges_49743[chckIndx(addInt(p_51503, 1), 0, toupper_ranges_49743.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1338;
		result_51471 = subInt(addInt(((c_51472)|0), toupper_ranges_49743[chckIndx(addInt(p_51503, 2), 0, toupper_ranges_49743.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1339;
		p_51503 = binary_search_51351(c_51472, [255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 409, 499, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 595, 290, 596, 294, 603, 297, 608, 295, 611, 293, 616, 291, 617, 289, 623, 289, 626, 287, 643, 282, 648, 282, 658, 281, 940, 462, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1224, 499, 1228, 499, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1273, 499, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8131, 509, 8165, 507, 8179, 509], 340, 2);
			if (!(0 <= p_51503)) Tmp3 = false; else {				Tmp3 = (((c_51472)|0) == toupper_singlets_49852[chckIndx(p_51503, 0, toupper_singlets_49852.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1341;
		result_51471 = subInt(addInt(((c_51472)|0), toupper_singlets_49852[chckIndx(addInt(p_51503, 1), 0, toupper_singlets_49852.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1342;
		result_51471 = c_51472;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_51471;

}

function swap_case_283387(r_283389) {
	var result_283390 = 0;

	var F={procname:"regex.swapCase",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (nucisUpper(r_283389)) {
		F.line = 478;
		result_283390 = nuctoLower(r_283389);
		}
		else {
		if (nucisLower(r_283389)) {
		F.line = 480;
		result_283390 = nuctoUpper(r_283389);
		}
		else {
			F.line = 482;
			result_283390 = r_283389;
		}
		}
	framePtr = F.prev;

	return result_283390;

}

function is_digit_ascii_283327(r_283329) {
		var Tmp1;

	var result_283330 = false;

	var F={procname:"regex.isDigitAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 462;
		F.line = 462;
		switch (((r_283329)|0)) {
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_283330 = Tmp1;
	framePtr = F.prev;

	return result_283330;

}

function is_white_space_ascii_283273(r_283275) {
		var Tmp1;

	var result_283276 = false;

	var F={procname:"regex.isWhiteSpaceAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 450;
		F.line = 450;
		switch (((r_283275)|0)) {
		case 32:
		case 9:
		case 10:
		case 13:
		case 12:
		case 11:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_283276 = Tmp1;
	framePtr = F.prev;

	return result_283276;

}

function contains_276029(a_276031, b_276032) {
	var result_276033 = false;

	var F={procname:"properties.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		F.line = 54;
		result_276033 = !(((((b_276032)|0) & ((a_276031)|0)) == 0));
	framePtr = F.prev;

	return result_276033;

}

function unicode_category_276620(props_276622) {
	var result_276623 = 0;

	var F={procname:"properties.unicodeCategory",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		F.line = 205;
		result_276623 = props_276622[chckIndx(0, 0, props_276622.length+0-1)-0];
	framePtr = F.prev;

	return result_276623;

}

function properties_276517(cp_276519) {
	var result_276520 = new Int32Array(4);

	var F={procname:"properties.properties",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		if (!((((cp_276519)|0) <= 1114111))) {
		F.line = 197;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim(197, 10) `int(cp) <= 0x0010FFFF` "));
		}
		
		F.line = 199;
		var block_offset_276601 = mulInt(((props_offsets_260203[chckIndx(divInt(((cp_276519)|0), 128), 0, props_offsets_260203.length+0-1)-0])|0), 128);
		F.line = 200;
		var idx_276602 = props_indices_268070[chckIndx(addInt(block_offset_276601, modInt(((cp_276519)|0), 128)), 0, props_indices_268070.length+0-1)-0];
		F.line = 201;
		nimCopy(result_276520, props_data_275248[chckIndx(idx_276602, 0, props_data_275248.length+0-1)-0], NTI275250);
	framePtr = F.prev;

	return result_276520;

}

function unicode_category_276638(cp_276640) {
	var result_276641 = 0;

	var F={procname:"properties.unicodeCategory",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		F.line = 208;
		result_276641 = unicode_category_276620(properties_276517(cp_276640));
	framePtr = F.prev;

	return result_276641;

}

function is_any_ascii_283357(r_283359) {
		var Tmp1;

	var result_283360 = false;

	var F={procname:"regex.isAnyAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 469;
		if (!(((r_283359)|0) <= 127)) Tmp1 = false; else {			Tmp1 = !(HEX3DHEX3D_41480(r_283359, 10));		}		result_283360 = Tmp1;
	framePtr = F.prev;

	return result_283360;

}

function match_283404(n_283406, r_283407) {
		var Tmp1;

	var result_283408 = false;

	var F={procname:"regex.match",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 485;
		if (!(!(HEX3DHEX3D_41480(r_283407, -1)))) {
		F.line = 488;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(488, 10) `\x0Anot (r == -1)` "));
		}
		
		F.line = 489;
		switch (n_283406.kind) {
		case 45:
			Tmp1 = false;
			break;
		case 18:
			Tmp1 = is_alpha_num_282457(r_283407);
			break;
		case 22:
			Tmp1 = !(is_alpha_num_282457(r_283407));
			break;
		case 19:
			Tmp1 = is_decimal_279406(r_283407);
			break;
		case 23:
			Tmp1 = !(is_decimal_279406(r_283407));
			break;
		case 20:
			Tmp1 = is_white_space_283256(r_283407);
			break;
		case 24:
			Tmp1 = !(is_white_space_283256(r_283407));
			break;
		case 38:
		case 39:
			F.line = 505;
			var matches_285017 = (contains_283798(n_283406.cps, r_283407) || contains_282834(n_283406.ranges, r_283407));
			if (!(matches_285017)) {
			L2: do {
				F.line = 509;
				var nn_285215 = {kind: 0, cp: 0, outA: 0, outB: 0, isGreedy: false, idx: 0, isCapturing: false, name: null, flags: null, min: 0, max: 0, cps: {data: null, counter: 0}, ranges: null, shorthands: null, cc: 0};
				F.line = 3909;
				var colontmp__285402 = null;
				F.line = 509;
				colontmp__285402 = n_283406.shorthands;
				F.line = 3911;
				var i_285405 = 0;
				F.line = 3912;
				var l_285407 = (colontmp__285402 != null ? colontmp__285402.length : 0);
				L3: do {
					F.line = 3913;
						L4: while (true) {
						if (!(i_285405 < l_285407)) break L4;
							F.line = 3914;
							nimCopy(nn_285215, colontmp__285402[chckIndx(i_285405, 0, colontmp__285402.length+0-1)-0], NTI281230);
							F.line = 510;
							matches_285017 = match_283404(nn_285215, r_283407);
							if (matches_285017) {
							F.line = 511;
							break L2;
							}
							
							F.line = 3915;
							i_285405 = addInt(i_285405, 1);
							if (!(((colontmp__285402 != null ? colontmp__285402.length : 0) == l_285407))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			}
			
			Tmp1 = ((matches_285017 && (n_283406.kind == 38)) || (!(matches_285017) && (n_283406.kind == 39)));
			break;
		case 26:
			Tmp1 = !(HEX3DHEX3D_41480(r_283407, 10));
			break;
		case 27:
			Tmp1 = true;
			break;
		case 1:
			Tmp1 = (HEX3DHEX3D_41480(r_283407, n_283406.cp) || HEX3DHEX3D_41480(r_283407, swap_case_283387(n_283406.cp)));
			break;
		case 30:
			Tmp1 = is_alpha_num_ascii_282474(r_283407);
			break;
		case 31:
			Tmp1 = is_digit_ascii_283327(r_283407);
			break;
		case 32:
			Tmp1 = is_white_space_ascii_283273(r_283407);
			break;
		case 21:
			Tmp1 = contains_276029(n_283406.cc, unicode_category_276638(r_283407));
			break;
		case 33:
			Tmp1 = !(is_alpha_num_ascii_282474(r_283407));
			break;
		case 34:
			Tmp1 = !(is_digit_ascii_283327(r_283407));
			break;
		case 35:
			Tmp1 = !(is_white_space_ascii_283273(r_283407));
			break;
		case 25:
			Tmp1 = !(contains_276029(n_283406.cc, unicode_category_276638(r_283407)));
			break;
		case 36:
			Tmp1 = is_any_ascii_283357(r_283407);
			break;
		case 37:
			Tmp1 = (is_any_ascii_283357(r_283407) || HEX3DHEX3D_41480(r_283407, 10));
			break;
		default: 
			if (!((n_283406.kind == 0))) {
			F.line = 541;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(541, 12) `n.kind == reChar` "));
			}
			
			Tmp1 = HEX3DHEX3D_41480(n_283406.cp, r_283407);
			break;
		}
		result_283408 = Tmp1;
	framePtr = F.prev;

	return result_283408;

}

function step_from_332790(result_332793, n_332794, pattern_332795, ds_332797, ci_332798, si_332799, ei_332800, cp_332801, nxt_332802) {
	var F={procname:"regex.stepFrom",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!((n_332794.outA == -1))) {
		F.line = 2350;
		var state_332809 = {Field0: n_332794.outA, Field1: ci_332798, Field2: si_332799, Field3: ei_332800};
		F.line = 2351;
		step_331258(result_332793, pattern_332795, state_332809, ds_332797, cp_332801, nxt_332802);
		}
		
		if (!((n_332794.outB == -1))) {
		F.line = 2353;
		var state_332816 = {Field0: n_332794.outB, Field1: ci_332798, Field2: si_332799, Field3: ei_332800};
		F.line = 2354;
		step_331258(result_332793, pattern_332795, state_332816, ds_332797, cp_332801, nxt_332802);
		}
		
	framePtr = F.prev;

	
}

function clear_320763(t_320770) {
	var F={procname:"clear.clear",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 152;
			var i_321005 = 0;
			F.line = 3616;
			var colontmp__322691 = 0;
			F.line = 152;
			colontmp__322691 = (t_320770.data != null ? t_320770.data.length : 0);
			F.line = 3617;
			var i_322694 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_322694 < colontmp__322691)) break L3;
						F.line = 3619;
						i_321005 = i_322694;
						F.line = 154;
						t_320770.data[chckIndx(i_321005, 0, t_320770.data.length+0-1)-0].Field0 = 0;
						F.line = 155;
						F.line = 120;
						var v_322172 = null;
						t_320770.data[chckIndx(i_321005, 0, t_320770.data.length+0-1)-0].Field1 = nimCopy(null, v_322172, NTI138);
						F.line = 156;
						F.line = 120;
						var v_322689 = 0;
						t_320770.data[chckIndx(i_321005, 0, t_320770.data.length+0-1)-0].Field2 = v_322689;
						F.line = 3620;
						i_322694 = addInt(i_322694, 1);
					}
			} while(false);
		} while(false);
		F.line = 157;
		t_320770.counter = 0;
	framePtr = F.prev;

	
}

function clear_320523(m_320526) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if ((0 < (m_320526.captures != null ? m_320526.captures.length : 0))) {
		F.line = 2031;
		if (m_320526.captures.length < 0) { for (var i=m_320526.captures.length;i<0;++i) m_320526.captures.push({a: 0, b: 0}); }
               else { m_320526.captures.length = 0; };
		}
		
		if ((0 < (m_320526.groups != null ? m_320526.groups.length : 0))) {
		F.line = 2033;
		if (m_320526.groups.length < 0) { for (var i=m_320526.groups.length;i<0;++i) m_320526.groups.push({a: 0, b: 0}); }
               else { m_320526.groups.length = 0; };
		}
		
		F.line = 2034;
		clear_320763(m_320526.namedGroups);
		F.line = 2035;
		nimCopy(m_320526.boundaries, HEX2EHEX2E_48828(0, -1), NTI25907);
	framePtr = F.prev;

	
}

function new_seq_326020(len_326024) {
	var result_326026 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_326026 = new Array(len_326024); for (var i=0;i<len_326024;++i) {result_326026[i]={a: 0, b: 0};}	framePtr = F.prev;

	return result_326026;

}

function HEX5BHEX5D_326322(ls_326327, i_326329) {
	var result_326330 = {kind: 0, prev: 0, idx: 0, cpIdx: 0};

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 683;
		if (!((i_326329 < ls_326327.pos))) {
		F.line = 683;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(683, 10) `i < ls.pos` "));
		}
		
		nimCopy(result_326330, ls_326327.s[chckIndx(i_326329, 0, ls_326327.s.length+0-1)-0], NTI320466);
	framePtr = F.prev;

	return result_326330;

}

function populate_captures_325974(result_325977, captured_325991, c_idx_325992, gc_325993) {
	var F={procname:"regex.populateCaptures",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (((result_325977.groups != null ? result_325977.groups.length : 0) == 0)) {
		F.line = 2190;
		result_325977.groups = nimCopy(null, new_seq_326020(chckRange(gc_325993, 0, 2147483647)), NTI326025);
		}
		else {
			F.line = 2192;
		if (result_325977.groups.length < chckRange(gc_325993, 0, 2147483647)) { for (var i=result_325977.groups.length;i<chckRange(gc_325993, 0, 2147483647);++i) result_325977.groups.push({a: 0, b: 0}); }
               else { result_325977.groups.length = chckRange(gc_325993, 0, 2147483647); };
		}
		
		F.line = 2194;
		var curr_326067 = c_idx_325992;
		F.line = 2195;
		var ci_326069 = 0;
		L1: do {
			F.line = 2196;
				L2: while (true) {
				if (!!((curr_326067 == 0))) break L2;
					F.line = 2197;
					var c_326418 = HEX5BHEX5D_326322(captured_325991, curr_326067);
					F.line = 2198;
					result_325977.groups[chckIndx(c_326418.idx, 0, result_325977.groups.length+0-1)-0].b = addInt(result_325977.groups[chckIndx(c_326418.idx, 0, result_325977.groups.length+0-1)-0].b, 1);
					F.line = 2199;
					ci_326069 = addInt(ci_326069, 1);
					F.line = 2200;
					curr_326067 = c_326418.prev;
				}
		} while(false);
		F.line = 2201;
		var gi_326438 = 0;
		L3: do {
			F.line = 2202;
			var g_326616 = null;
			F.line = 3920;
			var i_327125 = 0;
			F.line = 3921;
			var l_327127 = (result_325977.groups != null ? result_325977.groups.length : 0);
			L4: do {
				F.line = 3922;
					L5: while (true) {
					if (!(i_327125 < l_327127)) break L5;
						F.line = 3923;
						g_326616 = result_325977.groups[chckIndx(i_327125, 0, result_325977.groups.length+0-1)-0];
						if ((0 < g_326616.b)) {
						F.line = 2204;
						gi_326438 = addInt(gi_326438, divInt(g_326616.b, 2));
						F.line = 2205;
						g_326616.a = gi_326438;
						F.line = 2206;
						g_326616.b = subInt(gi_326438, 1);
						}
						else {
							F.line = 2208;
							g_326616.b = -1;
						}
						
						F.line = 3924;
						i_327125 = addInt(i_327125, 1);
						if (!(((result_325977.groups != null ? result_325977.groups.length : 0) == l_327127))) {
						F.line = 3925;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3925, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((modInt(ci_326069, 2) == 0))) {
		F.line = 2209;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(2209, 10) `ci mod 2 == 0` "));
		}
		
		if (((result_325977.captures != null ? result_325977.captures.length : 0) == 0)) {
		F.line = 2211;
		result_325977.captures = nimCopy(null, new_seq_326020(chckRange(divInt(ci_326069, 2), 0, 2147483647)), NTI326025);
		}
		else {
			F.line = 2213;
		if (result_325977.captures.length < chckRange(divInt(ci_326069, 2), 0, 2147483647)) { for (var i=result_325977.captures.length;i<chckRange(divInt(ci_326069, 2), 0, 2147483647);++i) result_325977.captures.push({a: 0, b: 0}); }
               else { result_325977.captures.length = chckRange(divInt(ci_326069, 2), 0, 2147483647); };
		}
		
		F.line = 2214;
		curr_326067 = c_idx_325992;
		L6: do {
			F.line = 2215;
				L7: while (true) {
				if (!!((curr_326067 == 0))) break L7;
					F.line = 2217;
					var c_327110 = HEX5BHEX5D_326322(captured_325991, curr_326067);
					F.line = 2218;
					var g_327111 = nimCopy(null, result_325977.groups[chckIndx(c_327110.idx, 0, result_325977.groups.length+0-1)-0], NTI25907);
					F.line = 2219;
					switch (c_327110.kind) {
					case 1:
						F.line = 2221;
						result_325977.captures[chckIndx(subInt(g_327111.a, 1), 0, result_325977.captures.length+0-1)-0].b = c_327110.cpIdx;
						break;
					case 0:
						F.line = 2223;
						result_325977.captures[chckIndx(subInt(g_327111.a, 1), 0, result_325977.captures.length+0-1)-0].a = c_327110.cpIdx;
						F.line = 2224;
						result_325977.groups[chckIndx(c_327110.idx, 0, result_325977.groups.length+0-1)-0].a = subInt(result_325977.groups[chckIndx(c_327110.idx, 0, result_325977.groups.length+0-1)-0].a, 1);
						break;
					}
					F.line = 2225;
					curr_326067 = c_327110.prev;
				}
		} while(false);
	framePtr = F.prev;

	
}

function set_regex_match_332830(m_332833, pattern_332834, ds_332835) {
	var result_332836 = false;

	var F={procname:"regex.setRegexMatch",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2360;
		result_332836 = false;
		L1: do {
			F.line = 2361;
			var state_332837 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
			F.line = 2176;
			var colontmp__332859 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};
			F.line = 2361;
			nimCopy(colontmp__332859, ds_332835.Field3, NTI324639);
			L2: do {
				F.line = 2177;
				var s_332863 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
				F.line = 725;
				var colontmp__332865 = {s: null, pos: 0};
				F.line = 2177;
				nimCopy(colontmp__332865, colontmp__332859.states, NTI324646);
				F.line = 726;
				var i_332867 = 0;
				L3: do {
					F.line = 727;
						L4: while (true) {
						if (!(i_332867 < colontmp__332865.pos)) break L4;
							F.line = 728;
							nimCopy(s_332863, colontmp__332865.s[chckIndx(i_332867, 0, colontmp__332865.s.length+0-1)-0], NTI320468);
							F.line = 2178;
							nimCopy(state_332837, s_332863, NTI320468);
							if ((pattern_332834.states[chckIndx(state_332837.Field0, 0, pattern_332834.states.length+0-1)-0].kind == 45)) {
							F.line = 2363;
							clear_320523(m_332833);
							F.line = 2364;
							nimCopy(m_332833.boundaries, HEX2EHEX2E_48828(state_332837.Field2, subInt(state_332837.Field3, 1)), NTI25907);
							if ((0 < pattern_332834.groupsCount)) {
							F.line = 2366;
							populate_captures_325974(m_332833, ds_332835.Field2, state_332837.Field1, ((pattern_332834.groupsCount)|0));
							F.line = 2367;
							nimCopy(m_332833.namedGroups, pattern_332834.namedGroups, NTI301986);
							}
							
							F.line = 2368;
							result_332836 = true;
							break BeforeRet;
							}
							
							F.line = 729;
							i_332867 = addInt(i_332867, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_332836;

}

function find_impl_333461(ds_333464, s_333465, pattern_333466, m_333468, start_333469) {
									var Tmp6;
									var Tmp7;
					var Tmp15;
					var Tmp16;

	var result_333471 = false;

	var F={procname:"regex.findImpl",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2465;
		clear_330167(ds_333464);
		F.line = 2466;
		var states_count_333480 = chckRange((pattern_333466.states != null ? (pattern_333466.states.length-1) : -1), -32768, 32767);
		F.line = 2467;
		var si_333481 = start_333469;
		L1: do {
			F.line = 2468;
			var i_333482 = 0;
			F.line = 2468;
			var cp_333483 = 0;
			F.line = 2468;
			var nxt_333484 = 0;
			F.line = 2241;
			var prev_333552 = -1;
			F.line = 2242;
			var j_333554 = 0;
			L2: do {
				F.line = 2243;
				var i_333556 = 0;
				F.line = 2243;
				var r_333558 = 0;
				F.line = 2231;
				var i_333560 = start_333469;
				F.line = 2232;
				var result_333562 = 0;
				L3: do {
					F.line = 2233;
						L4: while (true) {
						if (!(i_333560 < (s_333465 != null ? s_333465.length : 0))) break L4;
							if ((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] <= 127)) {
							F.line = 59;
							result_333562 = s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0];
							F.line = 60;
							i_333560 = addInt(i_333560, 1);
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 5) == 6)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 2))) {
							F.line = 64;
							result_333562 = (((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 31) << 6) | (s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63));
							F.line = 66;
							i_333560 = addInt(i_333560, 2);
							}
							else {
								F.line = 68;
								result_333562 = 65533;
								F.line = 69;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 4) == 14)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 3))) {
							F.line = 74;
							result_333562 = ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 15) << 12) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63));
							F.line = 77;
							i_333560 = addInt(i_333560, 3);
							}
							else {
								F.line = 79;
								result_333562 = 65533;
								F.line = 80;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 3) == 30)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 4))) {
							F.line = 86;
							result_333562 = (((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 7) << 18) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 12)) | ((s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 3), 0, s_333465.length+0-1)-0] & 63));
							F.line = 90;
							i_333560 = addInt(i_333560, 4);
							}
							else {
								F.line = 92;
								result_333562 = 65533;
								F.line = 93;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 2) == 62)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 5))) {
							F.line = 100;
							result_333562 = ((((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 3) << 24) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 18)) | ((s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63) << 12)) | ((s_333465[chckIndx(addInt(i_333560, 3), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 4), 0, s_333465.length+0-1)-0] & 63));
							F.line = 105;
							i_333560 = addInt(i_333560, 5);
							}
							else {
								F.line = 107;
								result_333562 = 65533;
								F.line = 108;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 1) == 126)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 6))) {
							F.line = 116;
							result_333562 = (((((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 1) << 30) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 24)) | ((s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63) << 18)) | ((s_333465[chckIndx(addInt(i_333560, 3), 0, s_333465.length+0-1)-0] & 63) << 12)) | ((s_333465[chckIndx(addInt(i_333560, 4), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 5), 0, s_333465.length+0-1)-0] & 63));
							F.line = 122;
							i_333560 = addInt(i_333560, 6);
							}
							else {
								F.line = 124;
								result_333562 = 65533;
								F.line = 125;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
								F.line = 127;
								result_333562 = s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0];
								F.line = 128;
								i_333560 = addInt(i_333560, 1);
							}
							}}}}}
							F.line = 2235;
							i_333556 = i_333560;
							F.line = 2235;
							r_333558 = result_333562;
							F.line = 2244;
							i_333482 = j_333554;
							F.line = 2244;
							cp_333483 = prev_333552;
							F.line = 2244;
							nxt_333484 = r_333558;
							L5: do {
									if ((len_325231(ds_333464.Field3) == 0)) Tmp6 = true; else {										Tmp6 = !((pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, subInt(len_325231(ds_333464.Field3), 1)).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45));									}								if (Tmp6) {
								F.line = 2472;
								clear_324519(ds_333464.Field0);
								F.line = 2473;
								var state_333500 = {Field0: states_count_333480, Field1: 0, Field2: si_333481, Field3: si_333481};
								F.line = 2474;
								step_331258(ds_333464.Field3, pattern_333466, state_333500, ds_333464, cp_333483, nxt_333484);
								F.line = 2475;
								si_333481 = i_333482;
								}
								
									if (!(0 < len_325231(ds_333464.Field3))) Tmp7 = false; else {										Tmp7 = (pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, 0).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45);									}								if (Tmp7) {
								F.line = 2479;
								break L1;
								}
								
								if (HEX3DHEX3D_41480(cp_333483, -1)) {
								F.line = 2481;
								break L5;
								}
								
								L8: do {
									F.line = 2482;
									var st_333512 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
									F.line = 2176;
									var colontmp__333540 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};
									F.line = 2482;
									nimCopy(colontmp__333540, ds_333464.Field3, NTI324639);
									L9: do {
										F.line = 2177;
										var s_333544 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
										F.line = 725;
										var colontmp__333546 = {s: null, pos: 0};
										F.line = 2177;
										nimCopy(colontmp__333546, colontmp__333540.states, NTI324646);
										F.line = 726;
										var i_333548 = 0;
										L10: do {
											F.line = 727;
												L11: while (true) {
												if (!(i_333548 < colontmp__333546.pos)) break L11;
													F.line = 728;
													nimCopy(s_333544, colontmp__333546.s[chckIndx(i_333548, 0, colontmp__333546.s.length+0-1)-0], NTI320468);
													F.line = 2178;
													nimCopy(st_333512, s_333544, NTI320468);
													L12: do {
														F.line = 2483;
														var n_333513 = nimCopy(null, pattern_333466.states[chckIndx(st_333512.Field0, 0, pattern_333466.states.length+0-1)-0], NTI281230);
														if ((n_333513.kind == 45)) {
														F.line = 2486;
														add_325724(ds_333464.Field4, st_333512);
														F.line = 2487;
														break L8;
														}
														
														if (!(match_283404(n_333513, cp_333483))) {
														F.line = 2489;
														break L12;
														}
														
														F.line = 2490;
														clear_324519(ds_333464.Field0);
														F.line = 2491;
														step_from_332790(ds_333464.Field4, n_333513, pattern_333466, ds_333464, st_333512.Field1, st_333512.Field2, i_333482, cp_333483, nxt_333484);
													} while(false);
													F.line = 729;
													i_333548 = addInt(i_333548, 1);
												}
										} while(false);
									} while(false);
								} while(false);
								F.line = 2493;
								var Tmp13 = ds_333464.Field3; ds_333464.Field3 = ds_333464.Field4; ds_333464.Field4 = Tmp13;								F.line = 2494;
								clear_325487(ds_333464.Field4);
							} while(false);
							F.line = 2245;
							prev_333552 = r_333558;
							F.line = 2246;
							j_333554 = i_333556;
						}
				} while(false);
			} while(false);
			F.line = 2247;
			i_333482 = j_333554;
			F.line = 2247;
			cp_333483 = prev_333552;
			F.line = 2247;
			nxt_333484 = -1;
			L14: do {
					if ((len_325231(ds_333464.Field3) == 0)) Tmp15 = true; else {						Tmp15 = !((pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, subInt(len_325231(ds_333464.Field3), 1)).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45));					}				if (Tmp15) {
				F.line = 2472;
				clear_324519(ds_333464.Field0);
				F.line = 2473;
				var state_333571 = {Field0: states_count_333480, Field1: 0, Field2: si_333481, Field3: si_333481};
				F.line = 2474;
				step_331258(ds_333464.Field3, pattern_333466, state_333571, ds_333464, cp_333483, nxt_333484);
				F.line = 2475;
				si_333481 = i_333482;
				}
				
					if (!(0 < len_325231(ds_333464.Field3))) Tmp16 = false; else {						Tmp16 = (pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, 0).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45);					}				if (Tmp16) {
				F.line = 2479;
				break L1;
				}
				
				if (HEX3DHEX3D_41480(cp_333483, -1)) {
				F.line = 2481;
				break L14;
				}
				
				L17: do {
					F.line = 2482;
					var st_333573 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
					F.line = 2176;
					var colontmp__333575 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};
					F.line = 2482;
					nimCopy(colontmp__333575, ds_333464.Field3, NTI324639);
					L18: do {
						F.line = 2177;
						var s_333577 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
						F.line = 725;
						var colontmp__333579 = {s: null, pos: 0};
						F.line = 2177;
						nimCopy(colontmp__333579, colontmp__333575.states, NTI324646);
						F.line = 726;
						var i_333581 = 0;
						L19: do {
							F.line = 727;
								L20: while (true) {
								if (!(i_333581 < colontmp__333579.pos)) break L20;
									F.line = 728;
									nimCopy(s_333577, colontmp__333579.s[chckIndx(i_333581, 0, colontmp__333579.s.length+0-1)-0], NTI320468);
									F.line = 2178;
									nimCopy(st_333573, s_333577, NTI320468);
									L21: do {
										F.line = 2483;
										var n_333583 = nimCopy(null, pattern_333466.states[chckIndx(st_333573.Field0, 0, pattern_333466.states.length+0-1)-0], NTI281230);
										if ((n_333583.kind == 45)) {
										F.line = 2486;
										add_325724(ds_333464.Field4, st_333573);
										F.line = 2487;
										break L17;
										}
										
										if (!(match_283404(n_333583, cp_333483))) {
										F.line = 2489;
										break L21;
										}
										
										F.line = 2490;
										clear_324519(ds_333464.Field0);
										F.line = 2491;
										step_from_332790(ds_333464.Field4, n_333583, pattern_333466, ds_333464, st_333573.Field1, st_333573.Field2, i_333482, cp_333483, nxt_333484);
									} while(false);
									F.line = 729;
									i_333581 = addInt(i_333581, 1);
								}
						} while(false);
					} while(false);
				} while(false);
				F.line = 2493;
				var Tmp22 = ds_333464.Field3; ds_333464.Field3 = ds_333464.Field4; ds_333464.Field4 = Tmp22;				F.line = 2494;
				clear_325487(ds_333464.Field4);
			} while(false);
		} while(false);
		F.line = 2495;
		result_333471 = set_regex_match_332830(m_333468, pattern_333466, ds_333464);
	framePtr = F.prev;

	return result_333471;

}

function find_333597(s_333599, pattern_333600, m_333602, start_333603) {
	var result_333605 = false;

	var F={procname:"regex.find",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2512;
		var ds_333615 = [init_data_sets_329898((pattern_333600.states != null ? pattern_333600.states.length : 0), (0 < pattern_333600.groupsCount))];
		F.line = 2515;
		result_333605 = find_impl_333461(ds_333615[0], s_333599, pattern_333600, m_333602, start_333603);
	framePtr = F.prev;

	return result_333605;

}

function get_next_token_346041(lexer_346043, line_346044, idx_346046, idx_346046_Idx) {
				var Tmp1;
				var Tmp2;
				var Tmp3;
				var Tmp4;
				var Tmp5;
				var Tmp6;
				var Tmp7;
				var Tmp8;
				var Tmp9;
				var Tmp10;
				var Tmp11;
				var Tmp12;
				var Tmp13;
				var Tmp14;
				var Tmp15;
				var Tmp16;
				var Tmp17;
				var Tmp18;
				var Tmp19;
				var Tmp20;
				var Tmp21;
				var Tmp22;
				var Tmp23;

	var result_346047 = null;

	var F={procname:"lexer.getNextToken",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 139;
		switch (line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0]) {
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 95:
			F.line = 114;
			var m_346105 = [{captures: null, groups: null, namedGroups: {data: null, counter: 0}, boundaries: {a: 0, b: 0}}];
			if (!(find_333597(line_346044, regex_name_343885[0], m_346105[0], idx_346046[idx_346046_Idx]))) {
			F.line = 116;
			raiseException(new_syntax_error_156100(makeNimstrLit("Invalid identifier"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			F.line = 117;
			var first_346108 = m_346105[0].boundaries.a;
			F.line = 118;
			var last_346110 = m_346105[0].boundaries.b;
			F.line = 119;
			idx_346046[idx_346046_Idx] = addInt(last_346110, 1);
			F.line = 120;
			result_346047 = new_token_node_343922(2, lexer_346043.lineNo, first_346108, HEX5BHEX5D_48874(line_346044, HEX2EHEX2E_48828(first_346108, last_346110)));
			break;
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			F.line = 114;
			var m_346161 = [{captures: null, groups: null, namedGroups: {data: null, counter: 0}, boundaries: {a: 0, b: 0}}];
			if (!(find_333597(line_346044, regex_number_343908[0], m_346161[0], idx_346046[idx_346046_Idx]))) {
			F.line = 116;
			raiseException(new_syntax_error_156100(makeNimstrLit("Invalid number"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			F.line = 117;
			var first_346164 = m_346161[0].boundaries.a;
			F.line = 118;
			var last_346166 = m_346161[0].boundaries.b;
			F.line = 119;
			idx_346046[idx_346046_Idx] = addInt(last_346166, 1);
			F.line = 120;
			result_346047 = new_token_node_343922(3, lexer_346043.lineNo, first_346164, HEX5BHEX5D_48874(line_346044, HEX2EHEX2E_48828(first_346164, last_346166)));
			break;
		case 34:
		case 39:
			F.line = 145;
			var pairing_char_346210 = line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0];
			if ((idx_346046[idx_346046_Idx] == subInt((line_346044 != null ? line_346044.length : 0), 1))) {
			F.line = 148;
			raiseException(new_syntax_error_156100(makeNimstrLit("Invalid string syntax"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			F.line = 149;
			var l_346211 = skip_until_38050(line_346044, pairing_char_346210, addInt(idx_346046[idx_346046_Idx], 1));
			if ((addInt(addInt(idx_346046[idx_346046_Idx], l_346211), 1) == (line_346044 != null ? line_346044.length : 0))) {
			F.line = 151;
			raiseException(new_syntax_error_156100(makeNimstrLit("Invalid string syntax"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			else {
				F.line = 153;
				result_346047 = new_token_node_343922(4, lexer_346043.lineNo, idx_346046[idx_346046_Idx], HEX5BHEX5D_48874(line_346044, HEX2EHEX2E_48828(addInt(idx_346046[idx_346046_Idx], 1), addInt(idx_346046[idx_346046_Idx], l_346211))));
				F.line = 154;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], addInt(l_346211, 2));
			}
			
			break;
		case 10:
			F.line = 157;
			result_346047 = new_token_node_343922(5, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 158;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 40:
			F.line = 123;
			result_346047 = new_token_node_343922(8, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 160;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 41:
			F.line = 123;
			result_346047 = new_token_node_343922(9, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 162;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 91:
			F.line = 123;
			result_346047 = new_token_node_343922(10, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 164;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 93:
			F.line = 123;
			result_346047 = new_token_node_343922(11, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 166;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 58:
			F.line = 123;
			result_346047 = new_token_node_343922(12, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 168;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 44:
			F.line = 123;
			result_346047 = new_token_node_343922(13, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 170;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 59:
			F.line = 123;
			result_346047 = new_token_node_343922(14, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 172;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 43:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp1 = false; else {					Tmp1 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp1) {
			F.line = 131;
			result_346047 = new_token_node_343922(37, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(15, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 45:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp2 = false; else {					Tmp2 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp2) {
			F.line = 177;
			result_346047 = new_token_node_343922(38, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 178;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp3 = false; else {					Tmp3 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 62);				}			if (Tmp3) {
			F.line = 180;
			result_346047 = new_token_node_343922(52, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 181;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(16, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 183;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			}
			break;
		case 42:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp4 = false; else {					Tmp4 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 42);				}			if (Tmp4) {
			F.line = 186;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp5 = false; else {					Tmp5 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp5) {
			F.line = 188;
			result_346047 = new_token_node_343922(47, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 189;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 191;
				result_346047 = new_token_node_343922(36, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 192;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(17, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 194;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 47:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp6 = false; else {					Tmp6 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 47);				}			if (Tmp6) {
			F.line = 197;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp7 = false; else {					Tmp7 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp7) {
			F.line = 199;
			result_346047 = new_token_node_343922(49, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 200;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 202;
				result_346047 = new_token_node_343922(48, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 203;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(18, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 205;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 124:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp8 = false; else {					Tmp8 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp8) {
			F.line = 131;
			result_346047 = new_token_node_343922(43, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(19, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 38:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp9 = false; else {					Tmp9 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp9) {
			F.line = 131;
			result_346047 = new_token_node_343922(42, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(20, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 60:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp10 = false; else {					Tmp10 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp10) {
			F.line = 212;
			result_346047 = new_token_node_343922(30, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 213;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp11 = false; else {					Tmp11 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 60);				}			if (Tmp11) {
			F.line = 215;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp12 = false; else {					Tmp12 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp12) {
			F.line = 217;
			result_346047 = new_token_node_343922(45, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 218;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 220;
				result_346047 = new_token_node_343922(34, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 221;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp13 = false; else {					Tmp13 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 62);				}			if (Tmp13) {
			F.line = 223;
			raiseException(new_syntax_error_156100(makeNimstrLit("<> in PEP401 not implemented"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(21, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 225;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			}}
			break;
		case 62:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp14 = false; else {					Tmp14 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp14) {
			F.line = 228;
			result_346047 = new_token_node_343922(31, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 229;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp15 = false; else {					Tmp15 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 62);				}			if (Tmp15) {
			F.line = 231;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp16 = false; else {					Tmp16 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp16) {
			F.line = 233;
			result_346047 = new_token_node_343922(46, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 234;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 236;
				result_346047 = new_token_node_343922(35, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 237;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(22, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 239;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			}
			break;
		case 61:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp17 = false; else {					Tmp17 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp17) {
			F.line = 131;
			result_346047 = new_token_node_343922(28, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(23, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 46:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 2))) Tmp19 = false; else {					Tmp19 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 46);				}				if (!Tmp19) Tmp18 = false; else {					Tmp18 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 2), 0, line_346044.length+0-1)-0] == 46);				}			if (Tmp18) {
			F.line = 244;
			result_346047 = new_token_node_343922(53, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 245;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 3);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(24, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 247;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 37:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp20 = false; else {					Tmp20 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp20) {
			F.line = 131;
			result_346047 = new_token_node_343922(41, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(25, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 123:
			F.line = 123;
			result_346047 = new_token_node_343922(26, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 251;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 125:
			F.line = 123;
			result_346047 = new_token_node_343922(27, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 253;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 33:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp21 = false; else {					Tmp21 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp21) {
			F.line = 256;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			F.line = 123;
			result_346047 = new_token_node_343922(29, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 257;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			else {
				F.line = 259;
				raiseException(new_syntax_error_156100(makeNimstrLit("Single ! not allowed"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			break;
		case 126:
			F.line = 123;
			result_346047 = new_token_node_343922(32, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 261;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 94:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp22 = false; else {					Tmp22 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp22) {
			F.line = 131;
			result_346047 = new_token_node_343922(44, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(33, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 64:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp23 = false; else {					Tmp23 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp23) {
			F.line = 131;
			result_346047 = new_token_node_343922(51, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(50, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		default: 
			F.line = 267;
			var fmt_res_346845 = mnewString(0);
			F.line = 267;
			if (fmt_res_346845 != null) { fmt_res_346845 = (fmt_res_346845).concat(makeNimstrLit("Unknown character ")); } else { fmt_res_346845 = makeNimstrLit("Unknown character "); };
			F.line = 268;
			if (fmt_res_346845 != null) { addChar(fmt_res_346845, line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0]); } else { fmt_res_346845 = [line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0]]; };
			F.line = 267;
			raiseException(new_syntax_error_156100(fmt_res_346845, [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			break;
		}
		if (!(!((result_346047 == null)))) {
		F.line = 268;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(268, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_346047;

}

function lex_one_line_347214(lexer_347216, line_347217) {
	var F={procname:"lexer.lexOneLine",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((nsuFindStr(line_347217, makeNimstrLit("\x0A"), 0, 0) == -1))) {
		F.line = 273;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(273, 10) `find(line, \"\\n\", 0, 0) == -1` "));
		}
		
		F.line = 275;
		var idx_347402 = [0];
		L1: do {
			F.line = 277;
				L2: while (true) {
				if (!((idx_347402[0] < (line_347217 != null ? line_347217.length : 0)) && (line_347217[chckIndx(idx_347402[0], 0, line_347217.length+0-1)-0] == 32))) break L2;
					F.line = 278;
					idx_347402[0] = addInt(idx_347402[0], 1);
				}
		} while(false);
		if (((idx_347402[0] == (line_347217 != null ? line_347217.length : 0)) || (line_347217[chckIndx(idx_347402[0], 0, line_347217.length+0-1)-0] == 35))) {
		F.line = 280;
		break BeforeRet;
		}
		
		if (!((modInt(idx_347402[0], 4) == 0))) {
		F.line = 283;
		raiseException(new_syntax_error_156100(makeNimstrLit("Indentation must be 4 spaces."), [], lexer_347216.lineNo, 0), "SyntaxError:ObjectType");
		}
		
		F.line = 284;
		var indent_level_347412 = divInt(idx_347402[0], 4);
		F.line = 285;
		var diff_347413 = subInt(indent_level_347412, lexer_347216.indentLevel);
		if ((diff_347413 < 0)) {
		L3: do {
			F.line = 287;
			var i_347422 = 0;
			F.line = 3617;
			var i_347450 = diff_347413;
			L4: do {
				F.line = 3618;
					L5: while (true) {
					if (!(i_347450 < 0)) break L5;
						F.line = 3619;
						i_347422 = i_347450;
						F.line = 288;
						add_345915(lexer_347216, 7, mulInt(addInt(lexer_347216.indentLevel, i_347422), 4));
						F.line = 3620;
						i_347450 = addInt(i_347450, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L6: do {
				F.line = 290;
				var i_347433 = 0;
				F.line = 3617;
				var i_347455 = 0;
				L7: do {
					F.line = 3618;
						L8: while (true) {
						if (!(i_347455 < diff_347413)) break L8;
							F.line = 3619;
							i_347433 = i_347455;
							F.line = 291;
							add_345915(lexer_347216, 6, mulInt(addInt(lexer_347216.indentLevel, i_347433), 4));
							F.line = 3620;
							i_347455 = addInt(i_347455, 1);
						}
				} while(false);
			} while(false);
		}
		
		F.line = 292;
		lexer_347216.indentLevel = indent_level_347412;
		L9: do {
			F.line = 294;
				L10: while (true) {
				if (!(idx_347402[0] < (line_347217 != null ? line_347217.length : 0))) break L10;
					F.line = 295;
					switch (line_347217[chckIndx(idx_347402[0], 0, line_347217.length+0-1)-0]) {
					case 32:
						F.line = 297;
						idx_347402[0] = addInt(idx_347402[0], 1);
						break;
					case 35:
						F.line = 299;
						break L9;
						break;
					default: 
						F.line = 301;
						add_345888(lexer_347216, get_next_token_346041(lexer_347216, line_347217, idx_347402, 0));
						break;
					}
				}
		} while(false);
		F.line = 302;
		add_345915(lexer_347216, 5, idx_347402[0]);
	} while (false);
	framePtr = F.prev;

	
}

function lex_string_347471(lexer_347473, input_347474, mode_347476) {
	var F={procname:"lexer.lexString",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(!((mode_347476 == 2)))) {
		F.line = 306;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(306, 10) `\x0Anot (mode == Eval)` "));
		}
		
		if (((mode_347476 == 0) && ((input_347474 != null ? input_347474.length : 0) == 0))) {
		F.line = 310;
		dedent_all_346014(lexer_347473);
		F.line = 311;
		add_345915(lexer_347473, 5, 0);
		F.line = 312;
		lexer_347473.lineNo = addInt(lexer_347473.lineNo, 1);
		F.line = 313;
		add_source_337238(lexer_347473.fileName, input_347474);
		F.line = 314;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 316;
			var line_347620 = null;
			F.line = 455;
			var last_347810 = 0;
			F.line = 456;
			var splits_347812 = -1;
			L2: do {
				F.line = 614;
					L3: while (true) {
					if (!(last_347810 <= (input_347474 != null ? input_347474.length : 0))) break L3;
						F.line = 459;
						var first_347814 = last_347810;
						L4: do {
							F.line = 460;
								L5: while (true) {
								if (!((last_347810 < (input_347474 != null ? input_347474.length : 0)) && !(substr_eq_132789(input_347474, last_347810, makeNimstrLit("\x0A"))))) break L5;
									F.line = 461;
									last_347810 = addInt(last_347810, 1);
								}
						} while(false);
						if ((splits_347812 == 0)) {
						F.line = 462;
						last_347810 = (input_347474 != null ? input_347474.length : 0);
						}
						
						F.line = 463;
						line_347620 = substr_23422(input_347474, first_347814, subInt(last_347810, 1));
						F.line = 318;
						lexer_347473.lineNo = addInt(lexer_347473.lineNo, 1);
						F.line = 319;
						add_source_337238(lexer_347473.fileName, input_347474);
						F.line = 320;
						lex_one_line_347214(lexer_347473, line_347620);
						if ((splits_347812 == 0)) {
						F.line = 464;
						break L2;
						}
						
						F.line = 465;
						splits_347812 = subInt(splits_347812, 1);
						F.line = 466;
						last_347810 = addInt(last_347810, 1);
					}
			} while(false);
		} while(false);
		F.line = 325;
		switch (mode_347476) {
		case 1:
			F.line = 327;
			dedent_all_346014(lexer_347473);
			F.line = 328;
			add_345915(lexer_347473, 1, 0);
			break;
		case 0:
			break;
		case 2:
			F.line = 332;
			add_345915(lexer_347473, 1, 0);
			break;
		}
	} while (false);
	framePtr = F.prev;

	
}

function match_token_212497(node_212499, token_212500) {
			var Tmp1;

	var result_259271 = false;

	var F={procname:"grammar.matchToken",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (is_terminator_203174(node_212499.token)) {
		if ((node_212499 == success_grammar_node_212501)) {
		F.line = 604;
		result_259271 = true;
		break BeforeRet;
		}
		else {
			F.line = 606;
			result_259271 = (node_212499.token == token_212500);
			break BeforeRet;
		}
		
		}
		else {
			F.line = 608;
			result_259271 = ((Tmp1 = HEX5BHEX5D_255063(grammar_set_212224[0], node_212499.token), Tmp1[0])[Tmp1[1]].firstSet[token_212500] != undefined);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_259271;

}

function new_parse_node_348061(token_node_348063) {
	var result_348064 = null;

	var F={procname:"parser.newParseNode",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
		if (!(is_terminator_203174(token_node_348063.token))) {
		F.line = 27;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(27, 10) `isTerminator(tokenNode.token)` "));
		}
		
		F.line = 28;
		result_348064 = {tokenNode: null, children: null, grammarNodeSeq: null};
		F.line = 29;
		result_348064.tokenNode = token_node_348063;
	framePtr = F.prev;

	return result_348064;

}

function new_parse_node_348222(token_node_348224, first_token_348225) {
			var Tmp1;
		var Tmp2;

	var result_348226 = null;

	var F={procname:"parser.newParseNode",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
		if (!(((Tmp1 = HEX5BHEX5D_255063(grammar_set_212224[0], token_node_348224.token), Tmp1[0])[Tmp1[1]].firstSet[first_token_348225.token] != undefined))) {
		F.line = 33;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(33, 3) `contains(grammarSet[tokenNode.token].firstSet, firstToken.token)` "));
		}
		
		F.line = 34;
		result_348226 = {tokenNode: null, children: null, grammarNodeSeq: null};
		F.line = 35;
		result_348226.tokenNode = token_node_348224;
		F.line = 36;
		var g_node_348885 = (Tmp2 = HEX5BHEX5D_255063(grammar_set_212224[0], token_node_348224.token), Tmp2[0])[Tmp2[1]].rootNode;
		F.line = 37;
		var to_add_348886 = null;
		L3: do {
			F.line = 38;
			var child_348894 = null;
			F.line = 100;
			var colontmp__349412 = {data: null, counter: 0};
			F.line = 38;
			nimCopy(colontmp__349412, g_node_348885.epsilonSet, NTI212034);
			if (!(is_valid_214572(colontmp__349412))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L4: do {
				F.line = 120;
				var h_349416 = 0;
				F.line = 2104;
				var colontmp__349418 = 0;
				F.line = 120;
				colontmp__349418 = (colontmp__349412.data != null ? (colontmp__349412.data.length-1) : -1);
				F.line = 2107;
				var res_349420 = 0;
				L5: do {
					F.line = 2108;
						L6: while (true) {
						if (!(res_349420 <= colontmp__349418)) break L6;
							F.line = 2109;
							h_349416 = res_349420;
							if (is_filled_154282(colontmp__349412.data[chckIndx(h_349416, 0, colontmp__349412.data.length+0-1)-0].Field0)) {
							F.line = 121;
							child_348894 = colontmp__349412.data[chckIndx(h_349416, 0, colontmp__349412.data.length+0-1)-0].Field1;
							if (match_token_212497(child_348894, first_token_348225.token)) {
							F.line = 40;
							if (result_348226.grammarNodeSeq != null) { result_348226.grammarNodeSeq.push(child_348894); } else { result_348226.grammarNodeSeq = [child_348894]; };
							if (is_terminator_203174(child_348894.token)) {
							if ((to_add_348886 === null)) {
							F.line = 43;
							to_add_348886 = new_parse_node_348061(first_token_348225);
							}
							else {
								if (!((to_add_348886.tokenNode.token == child_348894.token))) {
								F.line = 45;
								failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(45, 18) `toAdd.tokenNode.token == child.token` "));
								}
								
							}
							
							}
							else {
								if ((to_add_348886 === null)) {
								F.line = 48;
								to_add_348886 = new_parse_node_348222(new_token_node_343922(child_348894.token, -1, -1, []), first_token_348225);
								}
								else {
									if (!((to_add_348886.tokenNode.token == child_348894.token))) {
									F.line = 50;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(50, 18) `toAdd.tokenNode.token == child.token` "));
									}
									
								}
								
							}
							
							}
							
							}
							
							F.line = 2110;
							res_349420 = addInt(res_349420, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		if (!(!((to_add_348886 === null)))) {
		F.line = 51;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(51, 3) `not isNil(toAdd)` "));
		}
		
		F.line = 52;
		if (result_348226.children != null) { result_348226.children.push(to_add_348886); } else { result_348226.children = [to_add_348886]; };
	framePtr = F.prev;

	return result_348226;

}

function HEX5BHEX5D_351593(s_351600, x_351603) {
	var result_351605 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_351801 = x_351603.a;
		F.line = 3707;
		var l_352007 = addInt(subInt(subInt((s_351600 != null ? s_351600.length : 0), x_351603.b), a_351801), 1);
		F.line = 3708;
		result_351605 = new Array(chckRange(l_352007, 0, 2147483647)); for (var i=0;i<chckRange(l_352007, 0, 2147483647);++i) {result_351605[i]=null;}		L1: do {
			F.line = 3709;
			var i_352027 = 0;
			F.line = 3617;
			var i_352035 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_352035 < l_352007)) break L3;
						F.line = 3619;
						i_352027 = i_352035;
						F.line = 3709;
						result_351605[chckIndx(i_352027, 0, result_351605.length+0-1)-0] = s_351600[chckIndx(addInt(i_352027, a_351801), 0, s_351600.length+0-1)-0];
						F.line = 3620;
						i_352035 = addInt(i_352035, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_351605;

}

function HEX5BHEX5D_350330(s_350336, i_350338) {
	var result_350340 = [null, 0];
	var result_350340_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_350340 = s_350336; result_350340_Idx = chckIndx(subInt((s_350336 != null ? s_350336.length : 0), i_350338), 0, s_350336.length+0-1)-0;
	framePtr = F.prev;

	return [result_350340, result_350340_Idx];

}

function apply_token_350383(node_350385, token_350386) {

							function add_nexts_350392(gn_350394) {
																var Tmp6;

								var F={procname:"applyToken.addNexts",prev:framePtr,filename:"../Parser/parser.nim",line:0};
								framePtr = F;
									L1: do {
										F.line = 79;
										var next_gn_350403 = null;
										F.line = 100;
										var colontmp__350626 = {data: null, counter: 0};
										F.line = 79;
										nimCopy(colontmp__350626, gn_350394.nextSet, NTI212034);
										if (!(is_valid_214572(colontmp__350626))) {
										F.line = 119;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
										}
										
										L2: do {
											F.line = 120;
											var h_350630 = 0;
											F.line = 2104;
											var colontmp__350632 = 0;
											F.line = 120;
											colontmp__350632 = (colontmp__350626.data != null ? (colontmp__350626.data.length-1) : -1);
											F.line = 2107;
											var res_350634 = 0;
											L3: do {
												F.line = 2108;
													L4: while (true) {
													if (!(res_350634 <= colontmp__350632)) break L4;
														F.line = 2109;
														h_350630 = res_350634;
														if (is_filled_154282(colontmp__350626.data[chckIndx(h_350630, 0, colontmp__350626.data.length+0-1)-0].Field0)) {
														F.line = 121;
														next_gn_350403 = colontmp__350626.data[chckIndx(h_350630, 0, colontmp__350626.data.length+0-1)-0].Field1;
														L5: do {
															if (match_token_212497(next_gn_350403, token_350386.token)) {
															F.line = 81;
															if (new_gn_seq_350390 != null) { new_gn_seq_350390.push(next_gn_350403); } else { new_gn_seq_350390 = [next_gn_350403]; };
															if ((next_gn_350403 == success_grammar_node_212501)) {
															F.line = 83;
															break L5;
															}
															
															if (this_layer_350391) {
															if (!(((Tmp6 = HEX5BHEX5D_350330(node_350385.children, 1), Tmp6[0])[Tmp6[1]].tokenNode.token == next_gn_350403.token))) {
															F.line = 86;
															failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(86, 18) `node.children[BackwardsIndex(1)].tokenNode.token == nextGn.token` "));
															}
															
															}
															else {
																F.line = 88;
																this_layer_350391 = true;
																if (is_terminator_203174(next_gn_350403.token)) {
																F.line = 90;
																if (node_350385.children != null) { node_350385.children.push(new_parse_node_348061(token_350386)); } else { node_350385.children = [new_parse_node_348061(token_350386)]; };
																}
																else {
																	F.line = 92;
																if (node_350385.children != null) { node_350385.children.push(new_parse_node_348222(new_token_node_343922(next_gn_350403.token, -1, -1, []), token_350386)); } else { node_350385.children = [new_parse_node_348222(new_token_node_343922(next_gn_350403.token, -1, -1, []), token_350386)]; };
																}
																
															}
															
															}
															
														} while(false);
														}
														
														F.line = 2110;
														res_350634 = addInt(res_350634, 1);
													}
											} while(false);
										} while(false);
									} while(false);
								framePtr = F.prev;

								
							}
								var Tmp4;
		var Tmp5;
			var Tmp6;

	var result_350387 = 0;

	var F={procname:"parser.applyToken",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 75;
		F.line = 75;
		var g_node_seq_350388 = nimCopy(null, node_350385.grammarNodeSeq, NTI348051);
		F.line = 76;
		var new_gn_seq_350390 = null;
		F.line = 77;
		var this_layer_350391 = false;
		F.line = 94;
		var non_terminator_token_appeared_350650 = false;
		F.line = 95;
		var child_status_350651 = 0;
		L1: do {
			F.line = 96;
			var gn_350660 = null;
			F.line = 3911;
			var i_351232 = 0;
			F.line = 3912;
			var l_351234 = (g_node_seq_350388 != null ? g_node_seq_350388.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_351232 < l_351234)) break L3;
						F.line = 3914;
						gn_350660 = g_node_seq_350388[chckIndx(i_351232, 0, g_node_seq_350388.length+0-1)-0];
						F.line = 97;
						switch (gn_350660.kind) {
						case 97:
							if (is_terminator_203174(gn_350660.token)) {
							F.line = 100;
							add_nexts_350392(gn_350660);
							}
							else {
								if (!(non_terminator_token_appeared_350650)) {
								F.line = 103;
								child_status_350651 = apply_token_350383((Tmp4 = HEX5BHEX5D_350330(node_350385.children, 1), Tmp4[0])[Tmp4[1]], token_350386);
								F.line = 104;
								non_terminator_token_appeared_350650 = true;
								}
								
								F.line = 105;
								switch (child_status_350651) {
								case 0:
									F.line = 107;
									if (new_gn_seq_350390 != null) { new_gn_seq_350390.push(gn_350660); } else { new_gn_seq_350390 = [gn_350660]; };
									break;
								case 2:
									break;
								case 1:
									F.line = 111;
									add_nexts_350392(gn_350660);
									break;
								}
							}
							
							break;
						case 115:
							break;
						default: 
							F.line = 115;
							F.line = 115;
							var fmt_res_350692 = mnewString(0);
							F.line = 115;
							if (fmt_res_350692 != null) { fmt_res_350692 = (fmt_res_350692).concat(makeNimstrLit("Grammar Node of ")); } else { fmt_res_350692 = makeNimstrLit("Grammar Node of "); };
							F.line = 270;
							if (fmt_res_350692 != null) { fmt_res_350692 = (fmt_res_350692).concat(HEX24_212438(gn_350660)); } else { fmt_res_350692 = HEX24_212438(gn_350660).slice(); };
							F.line = 115;
							if (fmt_res_350692 != null) { fmt_res_350692 = (fmt_res_350692).concat(makeNimstrLit(" has kind ")); } else { fmt_res_350692 = makeNimstrLit(" has kind "); };
							F.line = 268;
							if (fmt_res_350692 != null) { addChar(fmt_res_350692, gn_350660.kind); } else { fmt_res_350692 = [gn_350660.kind]; };
							var msg_351001 = nimCopy(null, fmt_res_350692, NTI138);
							F.line = 116;
							rawEcho(msg_351001);
							if (true) {
							F.line = 117;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(117, 14) `false` "));
							}
							
							break;
						}
						F.line = 3915;
						i_351232 = addInt(i_351232, 1);
						if (!(((g_node_seq_350388 != null ? g_node_seq_350388.length : 0) == l_351234))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (((new_gn_seq_350390 != null ? new_gn_seq_350390.length : 0) == 0)) {
		F.line = 120;
		result_350387 = 2;
		break BeforeRet;
		}
		else {
			F.line = 122;
			node_350385.grammarNodeSeq = nimCopy(null, new_gn_seq_350390, NTI350389);
		}
		
			if (!((node_350385.grammarNodeSeq != null ? node_350385.grammarNodeSeq.length : 0) == 1)) Tmp6 = false; else {				Tmp6 = (node_350385.grammarNodeSeq[chckIndx(0, 0, node_350385.grammarNodeSeq.length+0-1)-0] == success_grammar_node_212501);			}		if (Tmp6) {
		Tmp5 = 1;
		}
		else {
		Tmp5 = 0;
		}
		
		result_350387 = Tmp5;
	} while (false);
	framePtr = F.prev;

	return result_350387;

}

function clear_tokens_345839(lexer_345841) {
	var F={procname:"lexer.clearTokens",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		if (!(((lexer_345841.tokenNodes != null ? lexer_345841.tokenNodes.length : 0) == 0))) {
		F.line = 84;
		if (lexer_345841.tokenNodes.length < 0) { for (var i=lexer_345841.tokenNodes.length;i<0;++i) lexer_345841.tokenNodes.push(null); }
               else { lexer_345841.tokenNodes.length = 0; };
		}
		
	framePtr = F.prev;

	
}

function parse_with_state_351248(input_351250, lexer_351251, mode_351253, parse_node_arg_351254) {
		var Tmp1;
			var Tmp3;

	var result_351255 = null;

	var F={procname:"parser.parseWithState",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 136;
		F.line = 136;
		lex_string_347471(lexer_351251, input_351250, mode_351253);
		F.line = 137;
		try {
		F.line = 138;
		var token_seq_351256 = nimCopy(null, lexer_351251.tokenNodes, NTI337147);
		if (((token_seq_351256 != null ? token_seq_351256.length : 0) == 0)) {
		F.line = 140;
		break BeforeRet;
		}
		
		F.line = 141;
		var parse_node_351264 = null;
		F.line = 142;
		var start_351266 = 0;
		if ((parse_node_arg_351254 === null)) {
		F.line = 146;
		var first_token_351274 = token_seq_351256[chckIndx(0, 0, token_seq_351256.length+0-1)-0];
		F.line = 147;
		start_351266 = 1;
		F.line = 148;
		var root_token_351275 = 0;
		F.line = 149;
		switch (mode_351253) {
		case 0:
			F.line = 151;
			root_token_351275 = 91;
			break;
		case 1:
			F.line = 153;
			root_token_351275 = 92;
			break;
		case 2:
			F.line = 155;
			root_token_351275 = 93;
			break;
		}
		if (!(((Tmp3 = HEX5BHEX5D_255063(grammar_set_212224[0], root_token_351275), Tmp3[0])[Tmp3[1]].firstSet[first_token_351274.token] != undefined))) {
		F.line = 157;
		raiseException(new_syntax_error_156100(makeNimstrLit("SyntaxError"), [], first_token_351274.lineNo, first_token_351274.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 158;
		parse_node_351264 = new_parse_node_348222(new_token_node_343922(root_token_351275, -1, -1, []), first_token_351274);
		}
		else {
			F.line = 160;
			parse_node_351264 = parse_node_arg_351254;
		}
		
		L4: do {
			F.line = 161;
			var token_352058 = null;
			F.line = 3909;
			var colontmp__352207 = null;
			F.line = 161;
			colontmp__352207 = HEX5BHEX5D_351593(token_seq_351256, HEX2EHEX2E_81053(start_351266, 1));
			F.line = 3911;
			var i_352210 = 0;
			F.line = 3912;
			var l_352212 = (colontmp__352207 != null ? colontmp__352207.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_352210 < l_352212)) break L6;
						F.line = 3914;
						token_352058 = colontmp__352207[chckIndx(i_352210, 0, colontmp__352207.length+0-1)-0];
						L7: do {
							F.line = 162;
							var status_352059 = apply_token_350383(parse_node_351264, token_352058);
							F.line = 165;
							switch (status_352059) {
							case 0:
								F.line = 167;
								break L7;
								break;
							default: 
								F.line = 169;
								raiseException(new_syntax_error_156100(makeNimstrLit("SyntaxError"), [], token_352058.lineNo, token_352058.colNo), "SyntaxError:ObjectType");
								break;
							}
						} while(false);
						F.line = 3915;
						i_352210 = addInt(i_352210, 1);
						if (!(((colontmp__352207 != null ? colontmp__352207.length : 0) == l_352212))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		Tmp1 = parse_node_351264;
		} finally {
		framePtr = F;
		F.line = 173;
		clear_tokens_345839(lexer_351251);
		}
		result_351255 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_351255;

}

function getCurrentException() {
	var result_15296 = null;

		if (is_nim_exception_15277()) {
		result_15296 = lastJSError;
		}
		

	return result_15296;

}

function from_bltin_syntax_error_496349(e_496351, file_name_496352) {
	var result_496353 = null;

	var F={procname:"exceptionsImpl.fromBltinSyntaxError",prev:framePtr,filename:"../Objects/exceptionsImpl.nim",line:0};
	framePtr = F;
		F.line = 73;
		F.line = 73;
		F.line = 106;
		var excp_496355 = new_py_syntax_error_simple_372601();
		F.line = 107;
		excp_496355.tk = 15;
		F.line = 108;
		excp_496355.thrown = true;
		F.line = 109;
		excp_496355.msg = new_py_string_176075(e_496351.message);
		var excp_obj_496357 = excp_496355;
		F.line = 75;
		if (excp_obj_496357.traceBacks != null) { excp_obj_496357.traceBacks.push({Field0: file_name_496352, Field1: null, Field2: e_496351.lineNo, Field3: e_496351.colNo}); } else { excp_obj_496357.traceBacks = [{Field0: file_name_496352, Field1: null, Field2: e_496351.lineNo, Field3: e_496351.colNo}]; };
		result_496353 = excp_obj_496357;
	framePtr = F.prev;

	return result_496353;

}

function new_seq_608405(len_608409) {
	var result_608411 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_608411 = new Array(len_608409); for (var i=0;i<len_608409;++i) {result_608411[i]={Field0: null, Field1: null, Field2: 0, Field3: 0};}	framePtr = F.prev;

	return result_608411;

}

function reversed_608260(a_608265, first_608267, last_608269) {
	var result_608271 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		if (!((subInt(first_608267, 1) <= last_608269))) {
		F.line = 54;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(54, 10) `\x0Afirst - 1 <= last` "));
		}
		
		F.line = 55;
		var i_608401 = subInt(last_608269, first_608267);
		F.line = 56;
		var x_608402 = first_608267;
		F.line = 57;
		result_608271 = nimCopy(null, new_seq_608405(chckRange(addInt(i_608401, 1), 0, 2147483647)), NTI608410);
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!(0 <= i_608401)) break L2;
					F.line = 59;
					nimCopy(result_608271[chckIndx(i_608401, 0, result_608271.length+0-1)-0], a_608265[chckIndx(x_608402, 0, a_608265.length+0-1)-0], NTI357180);
					F.line = 60;
					i_608401 = subInt(i_608401, 1);
					F.line = 61;
					x_608402 = addInt(x_608402, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_608271;

}

function reversed_608244(a_608249) {
	var result_608251 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_608251 = nimCopy(null, reversed_608260(a_608249, 0, (a_608249 != null ? (a_608249.length-1) : -1)), NTI608270);
	framePtr = F.prev;

	return result_608251;

}

function nsuStrip(s_132637, leading_132638, trailing_132639, chars_132641) {
					var Tmp5;

	var result_132642 = null;

		var first_132644 = 0;
		var last_132645 = ((s_132637 != null ? s_132637.length : 0) - 1);
		if (leading_132638) {
		L1: do {
				L2: while (true) {
				if (!((first_132644 <= last_132645) && (chars_132641[s_132637[first_132644]] != undefined))) break L2;
					first_132644 += 1;
				}
		} while(false);
		}
		
		if (trailing_132639) {
		L3: do {
				L4: while (true) {
					if (!(0 <= last_132645)) Tmp5 = false; else {						Tmp5 = (chars_132641[s_132637[last_132645]] != undefined);					}				if (!Tmp5) break L4;
					last_132645 -= 1;
				}
		} while(false);
		}
		
		result_132642 = nimCopy(null, substr_23422(s_132637, first_132644, last_132645), NTI138);

	return result_132642;

}

function get_source_342875(file_path_342877, line_no_342878) {
		var Tmp1;

	var result_342879 = null;

	var F={procname:"lexer.getSource",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 40;
		result_342879 = nimCopy(null, (Tmp1 = HEX5BHEX5D_342444(source_files_337224[0], file_path_342877), Tmp1[0])[Tmp1[1]].lines[chckIndx(subInt(line_no_342878, 1), 0, (Tmp1 = HEX5BHEX5D_342444(source_files_337224[0], file_path_342877), Tmp1[0])[Tmp1[1]].lines.length+0-1)-0], NTI138);
	framePtr = F.prev;

	return result_342879;

}

function nsuIndent(s_135663, count_135664, padding_135665) {
						var Tmp6;

	var result_135666 = null;

		result_135666 = nimCopy(null, [], NTI138);
		var i_135668 = 0;
		L1: do {
			var line_135669 = null;
			var first_135703 = 0;
			var last_135705 = 0;
			var eolpos_135707 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!((last_135705 < (s_135663 != null ? s_135663.length : 0)) && !((ConstSet19[s_135663[last_135705]] != undefined)))) break L5;
									last_135705 += 1;
								}
						} while(false);
						eolpos_135707 = last_135705;
						if ((last_135705 < (s_135663 != null ? s_135663.length : 0))) {
						if ((s_135663[last_135705] == 10)) {
						last_135705 += 1;
						}
						else {
						if ((s_135663[last_135705] == 13)) {
						last_135705 += 1;
						if (((last_135705 < (s_135663 != null ? s_135663.length : 0)) && (s_135663[last_135705] == 10))) {
						last_135705 += 1;
						}
						
						}
						}
						}
						
						if (false) {
						Tmp6 = (last_135705 - 1);
						}
						else {
						Tmp6 = (eolpos_135707 - 1);
						}
						
						line_135669 = substr_23422(s_135663, first_135703, Tmp6);
						if (!((i_135668 == 0))) {
						if (result_135666 != null) { result_135666 = (result_135666).concat(makeNimstrLit("\x0A")); } else { result_135666 = makeNimstrLit("\x0A"); };
						}
						
						L7: do {
							var j_135681 = 0;
							var colontmp__135693 = 0;
							colontmp__135693 = count_135664;
							var res_135696 = 1;
							L8: do {
									L9: while (true) {
									if (!(res_135696 <= colontmp__135693)) break L9;
										j_135681 = res_135696;
										if (result_135666 != null) { result_135666 = (result_135666).concat(padding_135665); } else { result_135666 = padding_135665.slice(); };
										res_135696 += 1;
									}
							} while(false);
						} while(false);
						if (result_135666 != null) { result_135666 = (result_135666).concat(line_135669); } else { result_135666 = line_135669.slice(); };
						i_135668 += 1;
						if ((eolpos_135707 == last_135705)) {
						break L2;
						}
						
						first_135703 = last_135705;
					}
			} while(false);
		} while(false);

	return result_135666;

}

function fmt_trace_back_607040(tb_607042) {
	var result_607043 = null;

	var F={procname:"traceback.fmtTraceBack",prev:framePtr,filename:"traceback.nim",line:0};
	framePtr = F;
		if (!(of_py_str_object_175092(tb_607042.Field0))) {
		F.line = 11;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/traceback.nim(11, 10) `ofPyStrObject(tb.fileName)` "));
		}
		
		if (!(!((tb_607042.Field2 == 0)))) {
		F.line = 13;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/traceback.nim(13, 10) `\x0Anot (tb.lineNo == 0)` "));
		}
		
		F.line = 14;
		var file_name_607401 = nimCopy(null, tb_607042.Field0.str, NTI138);
		F.line = 15;
		var at_where_607402 = null;
		if ((tb_607042.Field1 === null)) {
		F.line = 17;
		at_where_607402 = nimCopy(null, [], NTI138);
		}
		else {
			if (!(of_py_str_object_175092(tb_607042.Field1))) {
			F.line = 19;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/traceback.nim(19, 12) `ofPyStrObject(tb.funName)` "));
			}
			
			F.line = 20;
			at_where_607402 = nimCopy(null, (makeNimstrLit(", in ")).concat(tb_607042.Field1.str), NTI138);
		}
		
		F.line = 21;
		F.line = 21;
		var fmt_res_607604 = mnewString(0);
		F.line = 21;
		if (fmt_res_607604 != null) { fmt_res_607604 = (fmt_res_607604).concat(makeNimstrLit("  File \"")); } else { fmt_res_607604 = makeNimstrLit("  File \""); };
		F.line = 260;
		if (fmt_res_607604 != null) { fmt_res_607604 = (fmt_res_607604).concat(file_name_607401); } else { fmt_res_607604 = file_name_607401.slice(); };
		F.line = 21;
		if (fmt_res_607604 != null) { fmt_res_607604 = (fmt_res_607604).concat(makeNimstrLit("\", line ")); } else { fmt_res_607604 = makeNimstrLit("\", line "); };
		F.line = 270;
		if (fmt_res_607604 != null) { fmt_res_607604 = (fmt_res_607604).concat(cstrToNimstr((tb_607042.Field2)+"")); } else { fmt_res_607604 = cstrToNimstr((tb_607042.Field2)+"").slice(); };
		F.line = 260;
		if (fmt_res_607604 != null) { fmt_res_607604 = (fmt_res_607604).concat(at_where_607402); } else { fmt_res_607604 = at_where_607402.slice(); };
		F.line = 21;
		if (fmt_res_607604 != null) { fmt_res_607604 = (fmt_res_607604).concat(makeNimstrLit("\x0A")); } else { fmt_res_607604 = makeNimstrLit("\x0A"); };
		if (result_607043 != null) { result_607043 = (result_607043).concat(fmt_res_607604); } else { result_607043 = fmt_res_607604.slice(); };
		F.line = 22;
		if (result_607043 != null) { result_607043 = (result_607043).concat((makeNimstrLit("    ")).concat(nsuStrip(get_source_342875(file_name_607401, tb_607042.Field2), true, true, ConstSet18))); } else { result_607043 = (makeNimstrLit("    ")).concat(nsuStrip(get_source_342875(file_name_607401, tb_607042.Field2), true, true, ConstSet18)).slice(); };
		if (!((tb_607042.Field3 == -1))) {
		F.line = 24;
		if (result_607043 != null) { result_607043 = (result_607043).concat((makeNimstrLit("\x0A    ")).concat(nsuIndent(makeNimstrLit("^"), chckRange(tb_607042.Field3, 0, 2147483647), makeNimstrLit(" ")))); } else { result_607043 = (makeNimstrLit("\x0A    ")).concat(nsuIndent(makeNimstrLit("^"), chckRange(tb_607042.Field3, 0, 2147483647), makeNimstrLit(" "))).slice(); };
		}
		
	framePtr = F.prev;

	return result_607043;

}

function reversed_381352(a_381357, first_381359, last_381361) {
	var result_381363 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		if (!((subInt(first_381359, 1) <= last_381361))) {
		F.line = 54;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(54, 10) `\x0Afirst - 1 <= last` "));
		}
		
		F.line = 55;
		var i_381401 = subInt(last_381361, first_381359);
		F.line = 56;
		var x_381402 = first_381359;
		F.line = 57;
		result_381363 = nimCopy(null, new_seq_178023(chckRange(addInt(i_381401, 1), 0, 2147483647)), NTI178028);
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!(0 <= i_381401)) break L2;
					F.line = 59;
					result_381363[chckIndx(i_381401, 0, result_381363.length+0-1)-0] = nimCopy(null, a_381357[chckIndx(x_381402, 0, a_381357.length+0-1)-0], NTI138);
					F.line = 60;
					i_381401 = subInt(i_381401, 1);
					F.line = 61;
					x_381402 = addInt(x_381402, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_381363;

}

function reversed_381336(a_381341) {
	var result_381343 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_381343 = nimCopy(null, reversed_381352(a_381341, 0, (a_381341 != null ? (a_381341.length-1) : -1)), NTI381362);
	framePtr = F.prev;

	return result_381343;

}

function print_tb_608216(excp_608218) {
	var F={procname:"traceback.printTb",prev:framePtr,filename:"traceback.nim",line:0};
	framePtr = F;
		F.line = 28;
		var cur_608219 = excp_608218;
		F.line = 29;
		var excp_strs_608221 = null;
		L1: do {
			F.line = 30;
				L2: while (true) {
				if (!!((cur_608219 === null))) break L2;
					F.line = 31;
					var single_excp_strs_608230 = null;
					F.line = 32;
					if (single_excp_strs_608230 != null) { single_excp_strs_608230.push(makeNimstrLit("Traceback (most recent call last):")); } else { single_excp_strs_608230 = [makeNimstrLit("Traceback (most recent call last):")]; };
					L3: do {
						F.line = 33;
						var tb_608615 = {Field0: null, Field1: null, Field2: 0, Field3: 0};
						F.line = 3909;
						var colontmp__608666 = null;
						F.line = 33;
						colontmp__608666 = reversed_608244(cur_608219.traceBacks);
						F.line = 3911;
						var i_608669 = 0;
						F.line = 3912;
						var l_608671 = (colontmp__608666 != null ? colontmp__608666.length : 0);
						L4: do {
							F.line = 3913;
								L5: while (true) {
								if (!(i_608669 < l_608671)) break L5;
									F.line = 3914;
									nimCopy(tb_608615, colontmp__608666[chckIndx(i_608669, 0, colontmp__608666.length+0-1)-0], NTI357180);
									F.line = 34;
									if (single_excp_strs_608230 != null) { single_excp_strs_608230.push(fmt_trace_back_607040(tb_608615)); } else { single_excp_strs_608230 = [fmt_trace_back_607040(tb_608615)]; };
									F.line = 3915;
									i_608669 = addInt(i_608669, 1);
									if (!(((colontmp__608666 != null ? colontmp__608666.length : 0) == l_608671))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 35;
					var Tmp6 = nimCopy(null, repr_py_base_error_object_magic_481826(cur_608219).str, NTI138);
					if (single_excp_strs_608230 != null) { single_excp_strs_608230.push(Tmp6); } else { single_excp_strs_608230 = [Tmp6]; };
					F.line = 36;
					if (excp_strs_608221 != null) { excp_strs_608221.push(nsuJoinSep(single_excp_strs_608230, makeNimstrLit("\x0A"))); } else { excp_strs_608221 = [nsuJoinSep(single_excp_strs_608230, makeNimstrLit("\x0A"))]; };
					F.line = 37;
					cur_608219 = cur_608219.context;
				}
		} while(false);
		F.line = 38;
		var join_msg_608646 = makeNimstrLit("\x0A\x0ADuring handling of the above exception, another exception occured\x0A\x0A");
		F.line = 14;
		rawEcho(nsuJoinSep(reversed_381336(excp_strs_608221), join_msg_608646));
		L7: do {
			F.line = 15;
			var line_608663 = null;
			F.line = 597;
			var colontmp__608673 = null;
			F.line = 39;
			colontmp__608673 = nsuJoinSep(reversed_381336(excp_strs_608221), join_msg_608646);
			F.line = 455;
			var last_608677 = 0;
			F.line = 456;
			var splits_608679 = -1;
			L8: do {
				F.line = 614;
					L9: while (true) {
					if (!(last_608677 <= (colontmp__608673 != null ? colontmp__608673.length : 0))) break L9;
						F.line = 459;
						var first_608681 = last_608677;
						L10: do {
							F.line = 460;
								L11: while (true) {
								if (!((last_608677 < (colontmp__608673 != null ? colontmp__608673.length : 0)) && !(substr_eq_132789(colontmp__608673, last_608677, makeNimstrLit("\x0A"))))) break L11;
									F.line = 461;
									last_608677 = addInt(last_608677, 1);
								}
						} while(false);
						if ((splits_608679 == 0)) {
						F.line = 462;
						last_608677 = (colontmp__608673 != null ? colontmp__608673.length : 0);
						}
						
						F.line = 463;
						line_608663 = substr_23422(colontmp__608673, first_608681, subInt(last_608677, 1));
						F.line = 16;
						log(" ", toJSStr(line_608663));
						if ((splits_608679 == 0)) {
						F.line = 464;
						break L8;
						}
						
						F.line = 465;
						splits_608679 = subInt(splits_608679, 1);
						F.line = 466;
						last_608677 = addInt(last_608677, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function finished_350088(node_350090) {
							var Tmp4;
							var Tmp5;

	var result_350091 = false;

	var F={procname:"parser.finished",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 63;
		var non_terminator_token_appeared_350092 = false;
		L1: do {
			F.line = 64;
			var gn_350101 = null;
			F.line = 3909;
			var colontmp__350364 = null;
			F.line = 64;
			colontmp__350364 = node_350090.grammarNodeSeq;
			F.line = 3911;
			var i_350367 = 0;
			F.line = 3912;
			var l_350369 = (colontmp__350364 != null ? colontmp__350364.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_350367 < l_350369)) break L3;
						F.line = 3914;
						gn_350101 = colontmp__350364[chckIndx(i_350367, 0, colontmp__350364.length+0-1)-0];
						if (!(contains_224741(gn_350101.nextSet, success_grammar_node_212501))) {
						F.line = 66;
						result_350091 = false;
						break BeforeRet;
						}
						
							if (!!(non_terminator_token_appeared_350092)) Tmp4 = false; else {								Tmp4 = !(is_terminator_203174(gn_350101.token));							}						if (Tmp4) {
						F.line = 68;
						non_terminator_token_appeared_350092 = true;
						if (!(finished_350088((Tmp5 = HEX5BHEX5D_350330(node_350090.children, 1), Tmp5[0])[Tmp5[1]]))) {
						F.line = 70;
						result_350091 = false;
						break BeforeRet;
						}
						
						}
						
						F.line = 3915;
						i_350367 = addInt(i_350367, 1);
						if (!(((colontmp__350364 != null ? colontmp__350364.length : 0) == l_350369))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 71;
		result_350091 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_350091;

}

function new_ast_module_178845() {
	var result_178847 = null;

	var F={procname:"asdl.newAstModule",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_178847 = {m_type: NTI178837, body: null, kind: 0};
		F.line = 111;
		result_178847.kind = 0;
	framePtr = F.prev;

	return result_178847;

}

function new_ast_unary_op_180010() {
	var result_180012 = null;

	var F={procname:"asdl.newAstUnaryOp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180012 = {m_type: NTI180002, op: null, operand: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180012.kind = 2;
	framePtr = F.prev;

	return result_180012;

}

function new_unary_op_409475(op_409477, operand_409478) {
	var result_409479 = null;

	var F={procname:"ast.newUnaryOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 67;
		result_409479 = new_ast_unary_op_180010();
		F.line = 68;
		result_409479.op = op_409477;
		F.line = 69;
		result_409479.operand = operand_409478;
	framePtr = F.prev;

	return result_409479;

}

function new_ast_not_181628() {
	var result_181630 = null;

	var F={procname:"asdl.newAstNot",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181630 = {m_type: NTI181624, kind: 0};
		F.line = 111;
		result_181630.kind = 1;
	framePtr = F.prev;

	return result_181630;

}

function new_int_409060(value_409062) {
	var result_409063 = null;

	var F={procname:"ast.newInt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 33;
		result_409063 = {m_type: NTI177024, value: 0};
		F.line = 34;
		result_409063.value = value_409062;
	framePtr = F.prev;

	return result_409063;

}

function new_ast_tuple_180810() {
	var result_180812 = null;

	var F={procname:"asdl.newAstTuple",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180812 = {m_type: NTI180800, elts: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180812.kind = 24;
	framePtr = F.prev;

	return result_180812;

}

function new_ast_load_180841() {
	var result_180843 = null;

	var F={procname:"asdl.newAstLoad",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180843 = {m_type: NTI180837, kind: 0};
		F.line = 111;
		result_180843.kind = 0;
	framePtr = F.prev;

	return result_180843;

}

function new_tuple_409511(elts_409514) {
	var result_409515 = null;

	var F={procname:"ast.newTuple",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 78;
		result_409515 = new_ast_tuple_180810();
		F.line = 79;
		result_409515.elts = nimCopy(null, elts_409514, NTI409513);
		F.line = 80;
		result_409515.ctx = new_ast_load_180841();
	framePtr = F.prev;

	return result_409515;

}

function new_ast_list_comp_180193() {
	var result_180195 = null;

	var F={procname:"asdl.newAstListComp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180195 = {m_type: NTI180183, elt: null, generators: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180195.kind = 7;
	framePtr = F.prev;

	return result_180195;

}

function new_ast_comprehension_182041() {
	var result_182043 = null;

	var F={procname:"asdl.newAstComprehension",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182043 = {m_type: NTI182027, target: null, iter: null, ifs: null, is_async: null, kind: 0};
		F.line = 111;
		result_182043.kind = 0;
	framePtr = F.prev;

	return result_182043;

}

function ast_expr_list_409710(parse_node_409712) {
	var result_432224 = null;

	var F={procname:"ast.astExprList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1129;
		if (!((parse_node_409712.tokenNode.token == 165))) {
		F.line = 1129;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1129, 3) `parseNode.tokenNode.token == exprlist` "));
		}
		
		if (!(((parse_node_409712.children != null ? parse_node_409712.children.length : 0) == 1))) {
		F.line = 1130;
		raiseException(new_syntax_error_156100(makeNimstrLit("unpacking in for loop not implemented"), [], parse_node_409712.children[chckIndx(1, 0, parse_node_409712.children.length+0-1)-0].tokenNode.lineNo, parse_node_409712.children[chckIndx(1, 0, parse_node_409712.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1131;
		var child_432410 = parse_node_409712.children[chckIndx(0, 0, parse_node_409712.children.length+0-1)-0];
		if (!((child_432410.tokenNode.token == 150))) {
		F.line = 1133;
		raiseException(new_syntax_error_156100(makeNimstrLit("unpacking in for loop not implemented"), [], child_432410.tokenNode.lineNo, child_432410.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		result_432224 = ast_expr_409666(child_432410);
	framePtr = F.prev;

	return result_432224;

}

function ast_sync_comp_for_409729(parse_node_409731) {
	var result_433818 = null;

	var F={procname:"ast.astSyncCompFor",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409731.tokenNode.token == 172))) {
		F.line = 1206;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1206, 3) `parseNode.tokenNode.token == sync_comp_for` "));
		}
		
		if (((parse_node_409731.children != null ? parse_node_409731.children.length : 0) == 5)) {
		F.line = 1207;
		raiseException(new_syntax_error_156100(makeNimstrLit("Complex comprehension not implemented"), [], parse_node_409731.children[chckIndx(5, 0, parse_node_409731.children.length+0-1)-0].tokenNode.lineNo, parse_node_409731.children[chckIndx(5, 0, parse_node_409731.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1208;
		var comp_434010 = new_ast_comprehension_182041();
		F.line = 1209;
		comp_434010.target = ast_expr_list_409710(parse_node_409731.children[chckIndx(1, 0, parse_node_409731.children.length+0-1)-0]);
		F.line = 1210;
		set_store_410278(comp_434010.target);
		F.line = 1211;
		comp_434010.iter = ast_or_test_409651(parse_node_409731.children[chckIndx(3, 0, parse_node_409731.children.length+0-1)-0]);
		F.line = 1212;
		if (result_433818 != null) { result_433818.push(comp_434010); } else { result_433818 = [comp_434010]; };
	framePtr = F.prev;

	return result_433818;

}

function ast_comp_for_409733(parse_node_409735) {
	var result_434038 = null;

	var F={procname:"ast.astCompFor",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_409735.tokenNode.token == 173))) {
		F.line = 1217;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1217, 3) `parseNode.tokenNode.token == comp_for` "));
		}
		
		if (((parse_node_409735.children != null ? parse_node_409735.children.length : 0) == 2)) {
		F.line = 1218;
		raiseException(new_syntax_error_156100(makeNimstrLit("Async comprehension not implemented"), [], parse_node_409735.children[chckIndx(0, 0, parse_node_409735.children.length+0-1)-0].tokenNode.lineNo, parse_node_409735.children[chckIndx(0, 0, parse_node_409735.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1219;
		result_434038 = nimCopy(null, ast_sync_comp_for_409729(parse_node_409735.children[chckIndx(0, 0, parse_node_409735.children.length+0-1)-0]), NTI409732);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_434038;

}

function HEX5BHEX5D_422235(s_422242, x_422245) {
	var result_422247 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_422401 = x_422245.a;
		F.line = 3707;
		var l_422607 = addInt(subInt(subInt((s_422242 != null ? s_422242.length : 0), x_422245.b), a_422401), 1);
		F.line = 3708;
		result_422247 = new Array(chckRange(l_422607, 0, 2147483647)); for (var i=0;i<chckRange(l_422607, 0, 2147483647);++i) {result_422247[i]=null;}		L1: do {
			F.line = 3709;
			var i_422627 = 0;
			F.line = 3617;
			var i_422635 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_422635 < l_422607)) break L3;
						F.line = 3619;
						i_422627 = i_422635;
						F.line = 3709;
						result_422247[chckIndx(i_422627, 0, result_422247.length+0-1)-0] = s_422242[chckIndx(addInt(i_422627, a_422401), 0, s_422242.length+0-1)-0];
						F.line = 3620;
						i_422635 = addInt(i_422635, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_422247;

}

function ast_testlist_comp_409696(parse_node_409698) {
			var Tmp1;

	var result_430434 = null;

	var F={procname:"ast.astTestlistComp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_409698.tokenNode.token == 160))) {
		F.line = 1029;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1029, 3) `parseNode.tokenNode.token == testlist_comp` "));
		}
		
		F.line = 1029;
		var child1_430601 = parse_node_409698.children[chckIndx(0, 0, parse_node_409698.children.length+0-1)-0];
		if ((child1_430601.tokenNode.token == 149)) {
		F.line = 1031;
		raiseException(new_syntax_error_156100(makeNimstrLit("Star expression not implemented"), [], child1_430601.tokenNode.lineNo, child1_430601.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1032;
		var test1_430613 = ast_test_409648(child1_430601);
			if (!((parse_node_409698.children != null ? parse_node_409698.children.length : 0) == 2)) Tmp1 = false; else {				Tmp1 = (parse_node_409698.children[chckIndx(1, 0, parse_node_409698.children.length+0-1)-0].tokenNode.token == 173);			}		if (Tmp1) {
		F.line = 1036;
		var list_comp_430630 = new_ast_list_comp_180193();
		F.line = 1038;
		list_comp_430630.elt = test1_430613;
		F.line = 1039;
		list_comp_430630.generators = nimCopy(null, ast_comp_for_409733(parse_node_409698.children[chckIndx(1, 0, parse_node_409698.children.length+0-1)-0]), NTI409736);
		F.line = 1040;
		if (result_430434 != null) { result_430434.push(list_comp_430630); } else { result_430434 = [list_comp_430630]; };
		F.line = 1041;
		break BeforeRet;
		}
		
		F.line = 1043;
		if (result_430434 != null) { result_430434.push(test1_430613); } else { result_430434 = [test1_430613]; };
		L2: do {
			F.line = 1044;
			var child_430697 = null;
			F.line = 3909;
			var colontmp__430803 = null;
			F.line = 1044;
			colontmp__430803 = HEX5BHEX5D_422235(parse_node_409698.children, HEX2EHEX2E_81053(1, 1));
			F.line = 3911;
			var i_430806 = 0;
			F.line = 3912;
			var l_430808 = (colontmp__430803 != null ? colontmp__430803.length : 0);
			L3: do {
				F.line = 3913;
					L4: while (true) {
					if (!(i_430806 < l_430808)) break L4;
						F.line = 3914;
						child_430697 = colontmp__430803[chckIndx(i_430806, 0, colontmp__430803.length+0-1)-0];
						F.line = 1045;
						switch (child_430697.tokenNode.token) {
						case 13:
							break;
						case 140:
							F.line = 1049;
							if (result_430434 != null) { result_430434.push(ast_test_409648(child_430697)); } else { result_430434 = [ast_test_409648(child_430697)]; };
							break;
						case 149:
							F.line = 1051;
							raiseException(new_syntax_error_156100(makeNimstrLit("Star expression not implemented"), [], child_430697.tokenNode.lineNo, child_430697.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						default: 
							F.line = 2895;
							var e_430718 = null;
							F.line = 2896;
							e_430718 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 31;
							e_430718.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
							F.line = 2891;
							e_430718.parent = null;
							F.line = 1053;
							raiseException(e_430718, "InternalError");
							break;
						}
						F.line = 3915;
						i_430806 = addInt(i_430806, 1);
						if (!(((colontmp__430803 != null ? colontmp__430803.length : 0) == l_430808))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_430434;

}

function new_ast_list_180773() {
	var result_180775 = null;

	var F={procname:"asdl.newAstList",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180775 = {m_type: NTI180763, elts: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180775.kind = 23;
	framePtr = F.prev;

	return result_180775;

}

function new_list_409493(elts_409496) {
	var result_409497 = null;

	var F={procname:"ast.newList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 73;
		result_409497 = new_ast_list_180773();
		F.line = 74;
		result_409497.elts = nimCopy(null, elts_409496, NTI409495);
		F.line = 75;
		result_409497.ctx = new_ast_load_180841();
	framePtr = F.prev;

	return result_409497;

}

function new_ast_dict_180121() {
	var result_180123 = null;

	var F={procname:"asdl.newAstDict",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180123 = {m_type: NTI180109, keys: null, values: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180123.kind = 5;
	framePtr = F.prev;

	return result_180123;

}

function ast_dict_or_set_maker_409716(parse_node_409718) {
	var result_432823 = null;

	var F={procname:"ast.astDictOrSetMaker",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409718.tokenNode.token == 167))) {
		F.line = 1155;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1155, 3) `parseNode.tokenNode.token == dictorsetmaker` "));
		}
		
		F.line = 1155;
		var children_433001 = nimCopy(null, parse_node_409718.children, NTI348049);
		F.line = 1156;
		var d_433002 = new_ast_dict_180121();
		L1: do {
			F.line = 1158;
			var idx_433020 = 0;
			F.line = 3616;
			var colontmp__433087 = 0;
			F.line = 1158;
			colontmp__433087 = divInt(addInt((children_433001 != null ? children_433001.length : 0), 1), 4);
			F.line = 3617;
			var i_433090 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_433090 < colontmp__433087)) break L3;
						F.line = 3619;
						idx_433020 = i_433090;
						F.line = 1159;
						var i_433021 = mulInt(idx_433020, 4);
						if (((children_433001 != null ? children_433001.length : 0) < addInt(i_433021, 3))) {
						F.line = 1161;
						raiseException(new_syntax_error_156100(makeNimstrLit("dict definition too complex (no set, no comprehension)"), [], parse_node_409718.tokenNode.lineNo, parse_node_409718.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1162;
						var c1_433031 = children_433001[chckIndx(i_433021, 0, children_433001.length+0-1)-0];
						if (!((c1_433031.tokenNode.token == 140))) {
						F.line = 1164;
						raiseException(new_syntax_error_156100(makeNimstrLit("dict definition too complex (no set, no comprehension)"), [], c1_433031.tokenNode.lineNo, c1_433031.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1165;
						if (d_433002.keys != null) { d_433002.keys.push(ast_test_409648(c1_433031)); } else { d_433002.keys = [ast_test_409648(c1_433031)]; };
						if (!((children_433001[chckIndx(addInt(i_433021, 1), 0, children_433001.length+0-1)-0].tokenNode.token == 12))) {
						F.line = 1167;
						raiseException(new_syntax_error_156100(makeNimstrLit("dict definition too complex (no set, no comprehension)"), [], parse_node_409718.tokenNode.lineNo, parse_node_409718.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1168;
						var c3_433064 = children_433001[chckIndx(addInt(i_433021, 2), 0, children_433001.length+0-1)-0];
						if (!((c3_433064.tokenNode.token == 140))) {
						F.line = 1170;
						raiseException(new_syntax_error_156100(makeNimstrLit("dict definition too complex (no set, no comprehension)"), [], c3_433064.tokenNode.lineNo, c3_433064.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1171;
						if (d_433002.values != null) { d_433002.values.push(ast_test_409648(c3_433064)); } else { d_433002.values = [ast_test_409648(c3_433064)]; };
						F.line = 3620;
						i_433090 = addInt(i_433090, 1);
					}
			} while(false);
		} while(false);
		F.line = 1172;
		result_432823 = d_433002;
	framePtr = F.prev;

	return result_432823;

}

function new_ast_name_180736() {
	var result_180738 = null;

	var F={procname:"asdl.newAstName",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180738 = {m_type: NTI180728, id: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180738.kind = 22;
	framePtr = F.prev;

	return result_180738;

}

function new_identifier_409085(value_409087) {
	var result_409088 = null;

	var F={procname:"ast.newIdentifier",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 38;
		result_409088 = {m_type: NTI177027, value: null};
		F.line = 39;
		result_409088.value = new_py_string_176075(value_409087);
	framePtr = F.prev;

	return result_409088;

}

function new_ast_name_409110(token_node_409112) {
	var result_409113 = null;

	var F={procname:"ast.newAstName",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((ConstSet20[token_node_409112.token] != undefined))) {
		F.line = 43;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(43, 10) `contains({Token.Name, Token.Number, Token.String}, tokenNode.token)` "));
		}
		
		F.line = 44;
		result_409113 = new_ast_name_180736();
		F.line = 45;
		result_409113.id = new_identifier_409085(token_node_409112.content);
		F.line = 48;
		result_409113.ctx = new_ast_load_180841();
	framePtr = F.prev;

	return result_409113;

}

function contains_195428(s_195435, value_195437) {
	var result_195438 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1272;
		result_195438 = ((s_195435.a <= value_195437) && (value_195437 <= s_195435.b));
	framePtr = F.prev;

	return result_195438;

}

function HEX2EHEX2E_195202(a_195207, b_195209) {
	var result_195217 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_195217.a = a_195207;
		F.line = 399;
		result_195217.b = b_195209;
	framePtr = F.prev;

	return result_195217;

}

function new_ast_constant_180592() {
	var result_180594 = null;

	var F={procname:"asdl.newAstConstant",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180594 = {m_type: NTI180586, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180594.kind = 18;
	framePtr = F.prev;

	return result_180594;

}

function new_409221() {
	var result_409226 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_409401 = null;
		F.line = 211;
		r_409401 = {m_type: NTI177030, value: null};
		F.line = 212;
		result_409226 = r_409401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_409226;

}

function new_ast_constant_409215(obj_409217) {
	var result_409218 = null;

	var F={procname:"ast.newAstConstant",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 51;
		result_409218 = new_ast_constant_180592();
		F.line = 52;
		result_409218.value = new_409221();
		F.line = 53;
		result_409218.value.value = obj_409217;
	framePtr = F.prev;

	return result_409218;

}

function ast_atom_409693(parse_node_409695) {
					var Tmp1;

	var result_429150 = null;

	var F={procname:"ast.astAtom",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409695.tokenNode.token == 159))) {
		F.line = 939;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(939, 3) `parseNode.tokenNode.token == atom` "));
		}
		
		F.line = 939;
		var child1_429201 = parse_node_409695.children[chckIndx(0, 0, parse_node_409695.children.length+0-1)-0];
		F.line = 940;
		switch (child1_429201.tokenNode.token) {
		case 8:
			F.line = 942;
			switch ((parse_node_409695.children != null ? parse_node_409695.children.length : 0)) {
			case 2:
				F.line = 944;
				result_429150 = new_tuple_409511([]);
				break;
			case 3:
				F.line = 946;
				var child_429224 = parse_node_409695.children[chckIndx(1, 0, parse_node_409695.children.length+0-1)-0];
				F.line = 947;
				switch (child_429224.tokenNode.token) {
				case 176:
					F.line = 949;
					raiseException(new_syntax_error_156100(makeNimstrLit("Yield expression not implemented"), [], child_429224.tokenNode.lineNo, child_429224.tokenNode.colNo), "SyntaxError:ObjectType");
					break;
				case 160:
					F.line = 951;
					var test_list_comp_429229 = ast_testlist_comp_409696(child_429224);
					if (((test_list_comp_429229 != null ? test_list_comp_429229.length : 0) == 1)) {
					if ((test_list_comp_429229[chckIndx(0, 0, test_list_comp_429229.length+0-1)-0].kind == 7)) {
					F.line = 955;
					raiseException(new_syntax_error_156100(makeNimstrLit("generator expression not implemented"), [], child_429224.tokenNode.lineNo, child_429224.tokenNode.colNo), "SyntaxError:ObjectType");
					}
					
					F.line = 956;
					result_429150 = test_list_comp_429229[chckIndx(0, 0, test_list_comp_429229.length+0-1)-0];
					}
					else {
						F.line = 958;
						result_429150 = new_tuple_409511(test_list_comp_429229);
					}
					
					break;
				default: 
					F.line = 2895;
					var e_429253 = null;
					F.line = 2896;
					e_429253 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
					F.line = 31;
					e_429253.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
					F.line = 2891;
					e_429253.parent = null;
					F.line = 960;
					raiseException(e_429253, "InternalError");
					break;
				}
				break;
			default: 
				F.line = 2895;
				var e_429406 = null;
				F.line = 2896;
				e_429406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 31;
				e_429406.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_429406.parent = null;
				F.line = 962;
				raiseException(e_429406, "InternalError");
				break;
			}
			break;
		case 10:
			F.line = 965;
			switch ((parse_node_409695.children != null ? parse_node_409695.children.length : 0)) {
			case 2:
				F.line = 967;
				result_429150 = new_list_409493([]);
				break;
			case 3:
				F.line = 969;
				var contents_429623 = ast_testlist_comp_409696(parse_node_409695.children[chckIndx(1, 0, parse_node_409695.children.length+0-1)-0]);
					if (!((contents_429623 != null ? contents_429623.length : 0) == 1)) Tmp1 = false; else {						Tmp1 = (contents_429623[chckIndx(0, 0, contents_429623.length+0-1)-0].kind == 7);					}				if (Tmp1) {
				F.line = 971;
				result_429150 = contents_429623[chckIndx(0, 0, contents_429623.length+0-1)-0];
				}
				else {
					F.line = 973;
					result_429150 = new_list_409493(contents_429623);
				}
				
				break;
			default: 
				F.line = 2895;
				var e_429645 = null;
				F.line = 2896;
				e_429645 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 31;
				e_429645.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_429645.parent = null;
				F.line = 975;
				raiseException(e_429645, "InternalError");
				break;
			}
			break;
		case 26:
			F.line = 978;
			switch ((parse_node_409695.children != null ? parse_node_409695.children.length : 0)) {
			case 2:
				F.line = 980;
				result_429150 = new_ast_dict_180121();
				break;
			case 3:
				F.line = 982;
				result_429150 = ast_dict_or_set_maker_409716(parse_node_409695.children[chckIndx(1, 0, parse_node_409695.children.length+0-1)-0]);
				break;
			default: 
				F.line = 2895;
				var e_429814 = null;
				F.line = 2896;
				e_429814 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 31;
				e_429814.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_429814.parent = null;
				F.line = 984;
				raiseException(e_429814, "InternalError");
				break;
			}
			break;
		case 2:
			F.line = 987;
			result_429150 = new_ast_name_409110(child1_429201.tokenNode);
			break;
		case 3:
			L2: do {
				F.line = 991;
				var c_430005 = 0;
				F.line = 3927;
				var colontmp__430404 = null;
				F.line = 991;
				colontmp__430404 = child1_429201.tokenNode.content;
				F.line = 3929;
				var i_430407 = 0;
				F.line = 3930;
				var l_430409 = (colontmp__430404 != null ? colontmp__430404.length : 0);
				L3: do {
					F.line = 3931;
						L4: while (true) {
						if (!(i_430407 < l_430409)) break L4;
							F.line = 3932;
							c_430005 = colontmp__430404[chckIndx(i_430407, 0, colontmp__430404.length+0-1)-0];
							if (!(contains_195428(HEX2EHEX2E_195202(48, 57), c_430005))) {
							F.line = 993;
							var f_430182 = nsuParseFloat(child1_429201.tokenNode.content);
							F.line = 994;
							var py_float_430183 = new_py_float_382860(f_430182);
							F.line = 995;
							result_429150 = new_ast_constant_409215(py_float_430183);
							}
							
							F.line = 3933;
							i_430407 = addInt(i_430407, 1);
							if (!(((colontmp__430404 != null ? colontmp__430404.length : 0) == l_430409))) {
							F.line = 3934;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3934, 11) `len(a) == L` string modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			if ((result_429150 === null)) {
			F.line = 998;
			var py_int_430192 = new_py_int_382786(child1_429201.tokenNode.content);
			F.line = 999;
			result_429150 = new_ast_constant_409215(py_int_430192);
			}
			
			break;
		case 4:
			F.line = 1002;
			var str_seq_430195 = null;
			L5: do {
				F.line = 1003;
				var child_430204 = null;
				F.line = 3909;
				var colontmp__430411 = null;
				F.line = 1003;
				colontmp__430411 = parse_node_409695.children;
				F.line = 3911;
				var i_430414 = 0;
				F.line = 3912;
				var l_430416 = (colontmp__430411 != null ? colontmp__430411.length : 0);
				L6: do {
					F.line = 3913;
						L7: while (true) {
						if (!(i_430414 < l_430416)) break L7;
							F.line = 3914;
							child_430204 = colontmp__430411[chckIndx(i_430414, 0, colontmp__430411.length+0-1)-0];
							F.line = 1004;
							var Tmp8 = nimCopy(null, child_430204.tokenNode.content, NTI138);
							if (str_seq_430195 != null) { str_seq_430195.push(Tmp8); } else { str_seq_430195 = [Tmp8]; };
							F.line = 3915;
							i_430414 = addInt(i_430414, 1);
							if (!(((colontmp__430411 != null ? colontmp__430411.length : 0) == l_430416))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			F.line = 1005;
			var py_string_430216 = new_py_string_176075(nsuJoinSep(str_seq_430195, []));
			F.line = 1006;
			result_429150 = new_ast_constant_409215(py_string_430216);
			break;
		case 57:
			F.line = 1009;
			result_429150 = new_ast_constant_409215(py_true_obj_354074);
			break;
		case 67:
			F.line = 1012;
			result_429150 = new_ast_constant_409215(py_false_obj_354075);
			break;
		case 75:
			F.line = 1015;
			result_429150 = new_ast_constant_409215(py_none_356044);
			break;
		default: 
			F.line = 1018;
			raiseException(new_syntax_error_156100(makeNimstrLit("ellipsis not implemented"), [], parse_node_409695.tokenNode.lineNo, parse_node_409695.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
		if (!(!((result_429150 == null)))) {
		F.line = 1020;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1020, 10) `\x0Anot (result == nil)` "));
		}
		
		F.line = 83;
		result_429150.lineno = new_int_409060(parse_node_409695.children[chckIndx(0, 0, parse_node_409695.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_429150.col_offset = new_int_409060(parse_node_409695.children[chckIndx(0, 0, parse_node_409695.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_429150;

}

function new_ast_call_180487() {
	var result_180489 = null;

	var F={procname:"asdl.newAstCall",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180489 = {m_type: NTI180473, fun: null, args: null, keywords: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180489.kind = 15;
	framePtr = F.prev;

	return result_180489;

}

function ast_argument_409726(parse_node_409728) {
	var result_433452 = null;

	var F={procname:"ast.astArgument",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409728.tokenNode.token == 170))) {
		F.line = 1194;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1194, 3) `parseNode.tokenNode.token == argument` "));
		}
		
		if (!(((parse_node_409728.children != null ? parse_node_409728.children.length : 0) == 1))) {
		F.line = 1195;
		raiseException(new_syntax_error_156100(makeNimstrLit("Only simple identifiers for function argument"), [], parse_node_409728.children[chckIndx(1, 0, parse_node_409728.children.length+0-1)-0].tokenNode.lineNo, parse_node_409728.children[chckIndx(1, 0, parse_node_409728.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1197;
		var child_433610 = parse_node_409728.children[chckIndx(0, 0, parse_node_409728.children.length+0-1)-0];
		F.line = 1198;
		result_433452 = ast_test_409648(child_433610);
		if (!(!((result_433452 == null)))) {
		F.line = 1199;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1199, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_433452;

}

function ast_arglist_409722(parse_node_409724, call_node_409725) {
	var result_433246 = null;

	var F={procname:"ast.astArglist",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1187;
		if (!((parse_node_409724.tokenNode.token == 169))) {
		F.line = 1187;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1187, 3) `parseNode.tokenNode.token == arglist` "));
		}
		
		L1: do {
			F.line = 1187;
			var child_433409 = null;
			F.line = 3909;
			var colontmp__433430 = null;
			F.line = 1187;
			colontmp__433430 = parse_node_409724.children;
			F.line = 3911;
			var i_433433 = 0;
			F.line = 3912;
			var l_433435 = (colontmp__433430 != null ? colontmp__433430.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_433433 < l_433435)) break L3;
						F.line = 3914;
						child_433409 = colontmp__433430[chckIndx(i_433433, 0, colontmp__433430.length+0-1)-0];
						if ((child_433409.tokenNode.token == 170)) {
						F.line = 1189;
						if (call_node_409725.args != null) { call_node_409725.args.push(ast_argument_409726(child_433409)); } else { call_node_409725.args = [ast_argument_409726(child_433409)]; };
						}
						
						F.line = 3915;
						i_433433 = addInt(i_433433, 1);
						if (!(((colontmp__433430 != null ? colontmp__433430.length : 0) == l_433435))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_433246 = call_node_409725;
	framePtr = F.prev;

	return result_433246;

}

function new_ast_subscript_180666() {
	var result_180668 = null;

	var F={procname:"asdl.newAstSubscript",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180668 = {m_type: NTI180656, value: null, slice: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180668.kind = 20;
	framePtr = F.prev;

	return result_180668;

}

function new_ast_index_181101() {
	var result_181103 = null;

	var F={procname:"asdl.newAstIndex",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181103 = {m_type: NTI181095, value: null, kind: 0};
		F.line = 111;
		result_181103.kind = 2;
	framePtr = F.prev;

	return result_181103;

}

function new_ast_slice_181033() {
	var result_181035 = null;

	var F={procname:"asdl.newAstSlice",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181035 = {m_type: NTI181023, lower: null, upper: null, step: null, kind: 0};
		F.line = 111;
		result_181035.kind = 0;
	framePtr = F.prev;

	return result_181035;

}

function ast_subscript_409707(parse_node_409709) {
			var Tmp1;

	var result_431626 = null;

	var F={procname:"ast.astSubscript",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1093;
		if (!((parse_node_409709.tokenNode.token == 163))) {
		F.line = 1093;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1093, 3) `parseNode.tokenNode.token == subscript` "));
		}
		
		F.line = 1093;
		var child1_431801 = parse_node_409709.children[chckIndx(0, 0, parse_node_409709.children.length+0-1)-0];
			if (!(child1_431801.tokenNode.token == 140)) Tmp1 = false; else {				Tmp1 = ((parse_node_409709.children != null ? parse_node_409709.children.length : 0) == 1);			}		if (Tmp1) {
		F.line = 1095;
		var index_431818 = new_ast_index_181101();
		F.line = 1096;
		index_431818.value = ast_test_409648(child1_431801);
		F.line = 1097;
		result_431626 = index_431818;
		break BeforeRet;
		}
		
		F.line = 1099;
		var slice_431819 = new_ast_slice_181033();
		F.line = 1101;
		var idx_431821 = 0;
		F.line = 1102;
		var child_431822 = parse_node_409709.children[chckIndx(idx_431821, 0, parse_node_409709.children.length+0-1)-0];
		if ((child_431822.tokenNode.token == 140)) {
		F.line = 1104;
		slice_431819.lower = ast_test_409648(child_431822);
		F.line = 1105;
		idx_431821 = addInt(idx_431821, 2);
		}
		else {
			if (!((child_431822.tokenNode.token == 12))) {
			F.line = 1107;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1107, 12) `child.tokenNode.token == Colon` "));
			}
			
			F.line = 1108;
			idx_431821 = addInt(idx_431821, 1);
		}
		
		if ((idx_431821 == (parse_node_409709.children != null ? parse_node_409709.children.length : 0))) {
		F.line = 1110;
		result_431626 = slice_431819;
		break BeforeRet;
		}
		
		F.line = 1112;
		child_431822 = parse_node_409709.children[chckIndx(idx_431821, 0, parse_node_409709.children.length+0-1)-0];
		if ((child_431822.tokenNode.token == 140)) {
		F.line = 1114;
		slice_431819.upper = ast_test_409648(child_431822);
		F.line = 1115;
		idx_431821 = addInt(idx_431821, 1);
		}
		
		if ((idx_431821 == (parse_node_409709.children != null ? parse_node_409709.children.length : 0))) {
		F.line = 1117;
		result_431626 = slice_431819;
		break BeforeRet;
		}
		
		F.line = 1118;
		child_431822 = parse_node_409709.children[chckIndx(idx_431821, 0, parse_node_409709.children.length+0-1)-0];
		if (!((child_431822.tokenNode.token == 164))) {
		F.line = 1120;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1120, 10) `child.tokenNode.token == sliceop` "));
		}
		
		if (((child_431822.children != null ? child_431822.children.length : 0) == 2)) {
		F.line = 1122;
		slice_431819.step = ast_test_409648(child_431822.children[chckIndx(1, 0, child_431822.children.length+0-1)-0]);
		}
		
		result_431626 = slice_431819;
	} while (false);
	framePtr = F.prev;

	return result_431626;

}

function ast_subscriptlist_409704(parse_node_409706) {
	var result_431419 = null;

	var F={procname:"ast.astSubscriptlist",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1086;
		if (!((parse_node_409706.tokenNode.token == 162))) {
		F.line = 1086;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1086, 3) `parseNode.tokenNode.token == subscriptlist` "));
		}
		
		if ((~((parse_node_409706.children != null ? parse_node_409706.children.length : 0)) == 1)) {
		F.line = 1087;
		raiseException(new_syntax_error_156100(makeNimstrLit("subscript only support one index"), [], parse_node_409706.children[chckIndx(1, 0, parse_node_409706.children.length+0-1)-0].tokenNode.lineNo, parse_node_409706.children[chckIndx(1, 0, parse_node_409706.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		result_431419 = ast_subscript_409707(parse_node_409706.children[chckIndx(0, 0, parse_node_409706.children.length+0-1)-0]);
	framePtr = F.prev;

	return result_431419;

}

function new_ast_attribute_180629() {
	var result_180631 = null;

	var F={procname:"asdl.newAstAttribute",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180631 = {m_type: NTI180619, value: null, attr: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180631.kind = 19;
	framePtr = F.prev;

	return result_180631;

}

function ast_trailer_409700(parse_node_409702, left_expr_409703) {
	var result_430826 = null;

	var F={procname:"ast.astTrailer",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409702.tokenNode.token == 161))) {
		F.line = 1057;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1057, 3) `parseNode.tokenNode.token == trailer` "));
		}
		
		F.line = 1057;
		switch (parse_node_409702.children[chckIndx(0, 0, parse_node_409702.children.length+0-1)-0].tokenNode.token) {
		case 8:
			F.line = 1059;
			var call_node_431002 = new_ast_call_180487();
			F.line = 1060;
			call_node_431002.fun = left_expr_409703;
			F.line = 1061;
			switch ((parse_node_409702.children != null ? parse_node_409702.children.length : 0)) {
			case 2:
				F.line = 1063;
				result_430826 = call_node_431002;
				break;
			case 3:
				F.line = 1065;
				result_430826 = ast_arglist_409722(parse_node_409702.children[chckIndx(1, 0, parse_node_409702.children.length+0-1)-0], call_node_431002);
				break;
			default: 
				F.line = 2895;
				var e_431015 = null;
				F.line = 2896;
				e_431015 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 31;
				e_431015.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_431015.parent = null;
				F.line = 1067;
				raiseException(e_431015, "InternalError");
				break;
			}
			break;
		case 10:
			F.line = 1069;
			var sub_431202 = new_ast_subscript_180666();
			F.line = 1070;
			sub_431202.value = left_expr_409703;
			F.line = 1071;
			sub_431202.slice = ast_subscriptlist_409704(parse_node_409702.children[chckIndx(1, 0, parse_node_409702.children.length+0-1)-0]);
			F.line = 1072;
			sub_431202.ctx = new_ast_load_180841();
			F.line = 1073;
			result_430826 = sub_431202;
			break;
		case 24:
			F.line = 1075;
			var attr_431204 = new_ast_attribute_180629();
			F.line = 1076;
			attr_431204.value = left_expr_409703;
			F.line = 1077;
			attr_431204.attr = new_identifier_409085(parse_node_409702.children[chckIndx(1, 0, parse_node_409702.children.length+0-1)-0].tokenNode.content);
			F.line = 1078;
			attr_431204.ctx = new_ast_load_180841();
			F.line = 1079;
			result_430826 = attr_431204;
			break;
		default: 
			F.line = 2895;
			var e_431211 = null;
			F.line = 2896;
			e_431211 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_431211.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_431211.parent = null;
			F.line = 1081;
			raiseException(e_431211, "InternalError");
			break;
		}
		F.line = 83;
		result_430826.lineno = new_int_409060(parse_node_409702.children[chckIndx(0, 0, parse_node_409702.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_430826.col_offset = new_int_409060(parse_node_409702.children[chckIndx(0, 0, parse_node_409702.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_430826;

}

function ast_atom_expr_409690(parse_node_409692) {
	var result_429059 = null;

	var F={procname:"ast.astAtomExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 925;
		var child_429060 = parse_node_409692.children[chckIndx(0, 0, parse_node_409692.children.length+0-1)-0];
		if ((child_429060.tokenNode.token == 89)) {
		F.line = 927;
		raiseException(new_syntax_error_156100(makeNimstrLit("Await not implemented"), [], child_429060.tokenNode.lineNo, child_429060.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 928;
		result_429059 = ast_atom_409693(child_429060);
		if (((parse_node_409692.children != null ? parse_node_409692.children.length : 0) == 1)) {
		F.line = 930;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 931;
			var trailer_child_429125 = null;
			F.line = 3909;
			var colontmp__429128 = null;
			F.line = 931;
			colontmp__429128 = HEX5BHEX5D_422235(parse_node_409692.children, HEX2EHEX2E_81053(1, 1));
			F.line = 3911;
			var i_429131 = 0;
			F.line = 3912;
			var l_429133 = (colontmp__429128 != null ? colontmp__429128.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_429131 < l_429133)) break L3;
						F.line = 3914;
						trailer_child_429125 = colontmp__429128[chckIndx(i_429131, 0, colontmp__429128.length+0-1)-0];
						F.line = 932;
						result_429059 = ast_trailer_409700(trailer_child_429125, result_429059);
						F.line = 3915;
						i_429131 = addInt(i_429131, 1);
						if (!(((colontmp__429128 != null ? colontmp__429128.length : 0) == l_429133))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_429059;

}

function new_ast_bin_op_179975() {
	var result_179977 = null;

	var F={procname:"asdl.newAstBinOp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179977 = {m_type: NTI179965, left: null, op: null, right: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179977.kind = 1;
	framePtr = F.prev;

	return result_179977;

}

function new_bin_op_409456(left_409458, op_409459, right_409460) {
	var result_409461 = null;

	var F={procname:"ast.newBinOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 61;
		result_409461 = new_ast_bin_op_179975();
		F.line = 62;
		result_409461.left = left_409458;
		F.line = 63;
		result_409461.op = op_409459;
		F.line = 64;
		result_409461.right = right_409460;
	framePtr = F.prev;

	return result_409461;

}

function new_ast_pow_181380() {
	var result_181382 = null;

	var F={procname:"asdl.newAstPow",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181382 = {m_type: NTI181376, kind: 0};
		F.line = 111;
		result_181382.kind = 6;
	framePtr = F.prev;

	return result_181382;

}

function ast_power_409687(parse_node_409689) {
	var result_429030 = null;

	var F={procname:"ast.astPower",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 914;
		var child_429031 = parse_node_409689.children[chckIndx(0, 0, parse_node_409689.children.length+0-1)-0];
		F.line = 915;
		var base_429032 = ast_atom_expr_409690(child_429031);
		if (((parse_node_409689.children != null ? parse_node_409689.children.length : 0) == 1)) {
		F.line = 917;
		result_429030 = base_429032;
		}
		else {
			F.line = 919;
			var exp_429040 = ast_factor_409684(parse_node_409689.children[chckIndx(2, 0, parse_node_409689.children.length+0-1)-0]);
			F.line = 920;
			result_429030 = new_bin_op_409456(base_429032, new_ast_pow_181380(), exp_429040);
			F.line = 83;
			result_429030.lineno = new_int_409060(parse_node_409689.children[chckIndx(1, 0, parse_node_409689.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			result_429030.col_offset = new_int_409060(parse_node_409689.children[chckIndx(1, 0, parse_node_409689.children.length+0-1)-0].tokenNode.colNo);
		}
		
	framePtr = F.prev;

	return result_429030;

}

function new_ast_uadd_181659() {
	var result_181661 = null;

	var F={procname:"asdl.newAstUAdd",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181661 = {m_type: NTI181655, kind: 0};
		F.line = 111;
		result_181661.kind = 2;
	framePtr = F.prev;

	return result_181661;

}

function new_ast_usub_181690() {
	var result_181692 = null;

	var F={procname:"asdl.newAstUSub",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181692 = {m_type: NTI181686, kind: 0};
		F.line = 111;
		result_181692.kind = 3;
	framePtr = F.prev;

	return result_181692;

}

function ast_factor_409684(parse_node_409686) {
	var result_428694 = null;

	var F={procname:"ast.astFactor",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409686.tokenNode.token == 156))) {
		F.line = 894;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(894, 3) `parseNode.tokenNode.token == factor` "));
		}
		
		F.line = 894;
		switch ((parse_node_409686.children != null ? parse_node_409686.children.length : 0)) {
		case 1:
			F.line = 896;
			var child_428808 = parse_node_409686.children[chckIndx(0, 0, parse_node_409686.children.length+0-1)-0];
			F.line = 897;
			result_428694 = ast_power_409687(child_428808);
			break;
		case 2:
			F.line = 899;
			var child1_428809 = parse_node_409686.children[chckIndx(0, 0, parse_node_409686.children.length+0-1)-0];
			F.line = 900;
			var factor_428810 = ast_factor_409684(parse_node_409686.children[chckIndx(1, 0, parse_node_409686.children.length+0-1)-0]);
			F.line = 901;
			switch (child1_428809.tokenNode.token) {
			case 15:
				F.line = 903;
				result_428694 = new_unary_op_409475(new_ast_uadd_181659(), factor_428810);
				break;
			case 16:
				F.line = 905;
				result_428694 = new_unary_op_409475(new_ast_usub_181690(), factor_428810);
				break;
			default: 
				F.line = 907;
				raiseException(new_syntax_error_156100(makeNimstrLit("Unary ~ not implemented"), [], child1_428809.tokenNode.lineNo, child1_428809.tokenNode.colNo), "SyntaxError:ObjectType");
				break;
			}
			F.line = 83;
			result_428694.lineno = new_int_409060(parse_node_409686.children[chckIndx(0, 0, parse_node_409686.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			result_428694.col_offset = new_int_409060(parse_node_409686.children[chckIndx(0, 0, parse_node_409686.children.length+0-1)-0].tokenNode.colNo);
			break;
		default: 
			F.line = 2895;
			var e_428822 = null;
			F.line = 2896;
			e_428822 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_428822.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_428822.parent = null;
			F.line = 910;
			raiseException(e_428822, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_428694;

}

function new_ast_add_181194() {
	var result_181196 = null;

	var F={procname:"asdl.newAstAdd",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181196 = {m_type: NTI181190, kind: 0};
		F.line = 111;
		result_181196.kind = 0;
	framePtr = F.prev;

	return result_181196;

}

function new_ast_sub_181225() {
	var result_181227 = null;

	var F={procname:"asdl.newAstSub",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181227 = {m_type: NTI181221, kind: 0};
		F.line = 111;
		result_181227.kind = 1;
	framePtr = F.prev;

	return result_181227;

}

function new_ast_mult_181256() {
	var result_181258 = null;

	var F={procname:"asdl.newAstMult",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181258 = {m_type: NTI181252, kind: 0};
		F.line = 111;
		result_181258.kind = 2;
	framePtr = F.prev;

	return result_181258;

}

function new_ast_div_181318() {
	var result_181320 = null;

	var F={procname:"asdl.newAstDiv",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181320 = {m_type: NTI181314, kind: 0};
		F.line = 111;
		result_181320.kind = 4;
	framePtr = F.prev;

	return result_181320;

}

function new_ast_mod_181349() {
	var result_181351 = null;

	var F={procname:"asdl.newAstMod",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181351 = {m_type: NTI181345, kind: 0};
		F.line = 111;
		result_181351.kind = 5;
	framePtr = F.prev;

	return result_181351;

}

function new_ast_floor_div_181566() {
	var result_181568 = null;

	var F={procname:"asdl.newAstFloorDiv",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181568 = {m_type: NTI181562, kind: 0};
		F.line = 111;
		result_181568.kind = 12;
	framePtr = F.prev;

	return result_181568;

}

function ast_term_409681(parse_node_409683) {
	var result_428294 = null;

	var F={procname:"ast.astTerm",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409683.tokenNode.token == 155))) {
		F.line = 890;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(890, 3) `parseNode.tokenNode.token == term` "));
		}
		
		if (!((modInt((parse_node_409683.children != null ? parse_node_409683.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_428606 = parse_node_409683.children[chckIndx(0, 0, parse_node_409683.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_428608 = ast_factor_409684(first_child_428606);
		F.line = 840;
		result_428294 = first_ast_node_428608;
		L1: do {
			F.line = 841;
			var idx_428628 = 0;
			F.line = 2104;
			var colontmp__428671 = 0;
			F.line = 841;
			colontmp__428671 = divInt((parse_node_409683.children != null ? parse_node_409683.children.length : 0), 2);
			F.line = 2107;
			var res_428674 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_428674 <= colontmp__428671)) break L3;
						F.line = 2109;
						idx_428628 = res_428674;
						F.line = 842;
						var op_parse_node_428635 = parse_node_409683.children[chckIndx(subInt(mulInt(2, idx_428628), 1), 0, parse_node_409683.children.length+0-1)-0];
						F.line = 843;
						var op_428637 = null;
						F.line = 844;
						var token_428639 = op_parse_node_428635.tokenNode.token;
						F.line = 845;
						switch (token_428639) {
						case 15:
							F.line = 847;
							op_428637 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_428637 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_428637 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_428637 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_428637 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_428637 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_428648 = mnewString(0);
							F.line = 859;
							if (fmt_res_428648 != null) { fmt_res_428648 = (fmt_res_428648).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_428648 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_428656 = (fmt_res_428648).concat(reprEnum(token_428639, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156100(msg_428656, [], parse_node_409683.tokenNode.lineNo, parse_node_409683.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_428665 = parse_node_409683.children[chckIndx(mulInt(2, idx_428628), 0, parse_node_409683.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_428667 = ast_factor_409684(second_child_428665);
						F.line = 864;
						result_428294 = new_bin_op_409456(result_428294, op_428637, second_ast_node_428667);
						F.line = 83;
						result_428294.lineno = new_int_409060(op_parse_node_428635.tokenNode.lineNo);
						F.line = 84;
						result_428294.col_offset = new_int_409060(op_parse_node_428635.tokenNode.colNo);
						F.line = 2110;
						res_428674 = addInt(res_428674, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_428294;

}

function ast_arith_expr_409678(parse_node_409680) {
	var result_427894 = null;

	var F={procname:"ast.astArithExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409680.tokenNode.token == 154))) {
		F.line = 886;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(886, 3) `parseNode.tokenNode.token == arith_expr` "));
		}
		
		if (!((modInt((parse_node_409680.children != null ? parse_node_409680.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_428206 = parse_node_409680.children[chckIndx(0, 0, parse_node_409680.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_428208 = ast_term_409681(first_child_428206);
		F.line = 840;
		result_427894 = first_ast_node_428208;
		L1: do {
			F.line = 841;
			var idx_428228 = 0;
			F.line = 2104;
			var colontmp__428271 = 0;
			F.line = 841;
			colontmp__428271 = divInt((parse_node_409680.children != null ? parse_node_409680.children.length : 0), 2);
			F.line = 2107;
			var res_428274 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_428274 <= colontmp__428271)) break L3;
						F.line = 2109;
						idx_428228 = res_428274;
						F.line = 842;
						var op_parse_node_428235 = parse_node_409680.children[chckIndx(subInt(mulInt(2, idx_428228), 1), 0, parse_node_409680.children.length+0-1)-0];
						F.line = 843;
						var op_428237 = null;
						F.line = 844;
						var token_428239 = op_parse_node_428235.tokenNode.token;
						F.line = 845;
						switch (token_428239) {
						case 15:
							F.line = 847;
							op_428237 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_428237 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_428237 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_428237 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_428237 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_428237 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_428248 = mnewString(0);
							F.line = 859;
							if (fmt_res_428248 != null) { fmt_res_428248 = (fmt_res_428248).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_428248 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_428256 = (fmt_res_428248).concat(reprEnum(token_428239, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156100(msg_428256, [], parse_node_409680.tokenNode.lineNo, parse_node_409680.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_428265 = parse_node_409680.children[chckIndx(mulInt(2, idx_428228), 0, parse_node_409680.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_428267 = ast_term_409681(second_child_428265);
						F.line = 864;
						result_427894 = new_bin_op_409456(result_427894, op_428237, second_ast_node_428267);
						F.line = 83;
						result_427894.lineno = new_int_409060(op_parse_node_428235.tokenNode.lineNo);
						F.line = 84;
						result_427894.col_offset = new_int_409060(op_parse_node_428235.tokenNode.colNo);
						F.line = 2110;
						res_428274 = addInt(res_428274, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_427894;

}

function ast_shift_expr_409675(parse_node_409677) {
	var result_427494 = null;

	var F={procname:"ast.astShiftExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409677.tokenNode.token == 153))) {
		F.line = 882;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(882, 3) `parseNode.tokenNode.token == shift_expr` "));
		}
		
		if (!((modInt((parse_node_409677.children != null ? parse_node_409677.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_427806 = parse_node_409677.children[chckIndx(0, 0, parse_node_409677.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_427808 = ast_arith_expr_409678(first_child_427806);
		F.line = 840;
		result_427494 = first_ast_node_427808;
		L1: do {
			F.line = 841;
			var idx_427828 = 0;
			F.line = 2104;
			var colontmp__427871 = 0;
			F.line = 841;
			colontmp__427871 = divInt((parse_node_409677.children != null ? parse_node_409677.children.length : 0), 2);
			F.line = 2107;
			var res_427874 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_427874 <= colontmp__427871)) break L3;
						F.line = 2109;
						idx_427828 = res_427874;
						F.line = 842;
						var op_parse_node_427835 = parse_node_409677.children[chckIndx(subInt(mulInt(2, idx_427828), 1), 0, parse_node_409677.children.length+0-1)-0];
						F.line = 843;
						var op_427837 = null;
						F.line = 844;
						var token_427839 = op_parse_node_427835.tokenNode.token;
						F.line = 845;
						switch (token_427839) {
						case 15:
							F.line = 847;
							op_427837 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_427837 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_427837 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_427837 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_427837 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_427837 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_427848 = mnewString(0);
							F.line = 859;
							if (fmt_res_427848 != null) { fmt_res_427848 = (fmt_res_427848).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_427848 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_427856 = (fmt_res_427848).concat(reprEnum(token_427839, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156100(msg_427856, [], parse_node_409677.tokenNode.lineNo, parse_node_409677.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_427865 = parse_node_409677.children[chckIndx(mulInt(2, idx_427828), 0, parse_node_409677.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_427867 = ast_arith_expr_409678(second_child_427865);
						F.line = 864;
						result_427494 = new_bin_op_409456(result_427494, op_427837, second_ast_node_427867);
						F.line = 83;
						result_427494.lineno = new_int_409060(op_parse_node_427835.tokenNode.lineNo);
						F.line = 84;
						result_427494.col_offset = new_int_409060(op_parse_node_427835.tokenNode.colNo);
						F.line = 2110;
						res_427874 = addInt(res_427874, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_427494;

}

function ast_and_expr_409672(parse_node_409674) {
	var result_427094 = null;

	var F={procname:"ast.astAndExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409674.tokenNode.token == 152))) {
		F.line = 878;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(878, 3) `parseNode.tokenNode.token == and_expr` "));
		}
		
		if (!((modInt((parse_node_409674.children != null ? parse_node_409674.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_427406 = parse_node_409674.children[chckIndx(0, 0, parse_node_409674.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_427408 = ast_shift_expr_409675(first_child_427406);
		F.line = 840;
		result_427094 = first_ast_node_427408;
		L1: do {
			F.line = 841;
			var idx_427428 = 0;
			F.line = 2104;
			var colontmp__427471 = 0;
			F.line = 841;
			colontmp__427471 = divInt((parse_node_409674.children != null ? parse_node_409674.children.length : 0), 2);
			F.line = 2107;
			var res_427474 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_427474 <= colontmp__427471)) break L3;
						F.line = 2109;
						idx_427428 = res_427474;
						F.line = 842;
						var op_parse_node_427435 = parse_node_409674.children[chckIndx(subInt(mulInt(2, idx_427428), 1), 0, parse_node_409674.children.length+0-1)-0];
						F.line = 843;
						var op_427437 = null;
						F.line = 844;
						var token_427439 = op_parse_node_427435.tokenNode.token;
						F.line = 845;
						switch (token_427439) {
						case 15:
							F.line = 847;
							op_427437 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_427437 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_427437 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_427437 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_427437 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_427437 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_427448 = mnewString(0);
							F.line = 859;
							if (fmt_res_427448 != null) { fmt_res_427448 = (fmt_res_427448).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_427448 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_427456 = (fmt_res_427448).concat(reprEnum(token_427439, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156100(msg_427456, [], parse_node_409674.tokenNode.lineNo, parse_node_409674.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_427465 = parse_node_409674.children[chckIndx(mulInt(2, idx_427428), 0, parse_node_409674.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_427467 = ast_shift_expr_409675(second_child_427465);
						F.line = 864;
						result_427094 = new_bin_op_409456(result_427094, op_427437, second_ast_node_427467);
						F.line = 83;
						result_427094.lineno = new_int_409060(op_parse_node_427435.tokenNode.lineNo);
						F.line = 84;
						result_427094.col_offset = new_int_409060(op_parse_node_427435.tokenNode.colNo);
						F.line = 2110;
						res_427474 = addInt(res_427474, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_427094;

}

function ast_xor_expr_409669(parse_node_409671) {
	var result_426694 = null;

	var F={procname:"ast.astXorExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409671.tokenNode.token == 151))) {
		F.line = 874;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(874, 3) `parseNode.tokenNode.token == xor_expr` "));
		}
		
		if (!((modInt((parse_node_409671.children != null ? parse_node_409671.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_427006 = parse_node_409671.children[chckIndx(0, 0, parse_node_409671.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_427008 = ast_and_expr_409672(first_child_427006);
		F.line = 840;
		result_426694 = first_ast_node_427008;
		L1: do {
			F.line = 841;
			var idx_427028 = 0;
			F.line = 2104;
			var colontmp__427071 = 0;
			F.line = 841;
			colontmp__427071 = divInt((parse_node_409671.children != null ? parse_node_409671.children.length : 0), 2);
			F.line = 2107;
			var res_427074 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_427074 <= colontmp__427071)) break L3;
						F.line = 2109;
						idx_427028 = res_427074;
						F.line = 842;
						var op_parse_node_427035 = parse_node_409671.children[chckIndx(subInt(mulInt(2, idx_427028), 1), 0, parse_node_409671.children.length+0-1)-0];
						F.line = 843;
						var op_427037 = null;
						F.line = 844;
						var token_427039 = op_parse_node_427035.tokenNode.token;
						F.line = 845;
						switch (token_427039) {
						case 15:
							F.line = 847;
							op_427037 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_427037 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_427037 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_427037 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_427037 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_427037 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_427048 = mnewString(0);
							F.line = 859;
							if (fmt_res_427048 != null) { fmt_res_427048 = (fmt_res_427048).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_427048 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_427056 = (fmt_res_427048).concat(reprEnum(token_427039, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156100(msg_427056, [], parse_node_409671.tokenNode.lineNo, parse_node_409671.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_427065 = parse_node_409671.children[chckIndx(mulInt(2, idx_427028), 0, parse_node_409671.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_427067 = ast_and_expr_409672(second_child_427065);
						F.line = 864;
						result_426694 = new_bin_op_409456(result_426694, op_427037, second_ast_node_427067);
						F.line = 83;
						result_426694.lineno = new_int_409060(op_parse_node_427035.tokenNode.lineNo);
						F.line = 84;
						result_426694.col_offset = new_int_409060(op_parse_node_427035.tokenNode.colNo);
						F.line = 2110;
						res_427074 = addInt(res_427074, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_426694;

}

function ast_expr_409666(parse_node_409668) {
	var result_426273 = null;

	var F={procname:"ast.astExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409668.tokenNode.token == 150))) {
		F.line = 870;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(870, 3) `parseNode.tokenNode.token == expr` "));
		}
		
		if (!((modInt((parse_node_409668.children != null ? parse_node_409668.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_426606 = parse_node_409668.children[chckIndx(0, 0, parse_node_409668.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_426608 = ast_xor_expr_409669(first_child_426606);
		F.line = 840;
		result_426273 = first_ast_node_426608;
		L1: do {
			F.line = 841;
			var idx_426628 = 0;
			F.line = 2104;
			var colontmp__426671 = 0;
			F.line = 841;
			colontmp__426671 = divInt((parse_node_409668.children != null ? parse_node_409668.children.length : 0), 2);
			F.line = 2107;
			var res_426674 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_426674 <= colontmp__426671)) break L3;
						F.line = 2109;
						idx_426628 = res_426674;
						F.line = 842;
						var op_parse_node_426635 = parse_node_409668.children[chckIndx(subInt(mulInt(2, idx_426628), 1), 0, parse_node_409668.children.length+0-1)-0];
						F.line = 843;
						var op_426637 = null;
						F.line = 844;
						var token_426639 = op_parse_node_426635.tokenNode.token;
						F.line = 845;
						switch (token_426639) {
						case 15:
							F.line = 847;
							op_426637 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_426637 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_426637 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_426637 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_426637 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_426637 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_426648 = mnewString(0);
							F.line = 859;
							if (fmt_res_426648 != null) { fmt_res_426648 = (fmt_res_426648).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_426648 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_426656 = (fmt_res_426648).concat(reprEnum(token_426639, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156100(msg_426656, [], parse_node_409668.tokenNode.lineNo, parse_node_409668.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_426665 = parse_node_409668.children[chckIndx(mulInt(2, idx_426628), 0, parse_node_409668.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_426667 = ast_xor_expr_409669(second_child_426665);
						F.line = 864;
						result_426273 = new_bin_op_409456(result_426273, op_426637, second_ast_node_426667);
						F.line = 83;
						result_426273.lineno = new_int_409060(op_parse_node_426635.tokenNode.lineNo);
						F.line = 84;
						result_426273.col_offset = new_int_409060(op_parse_node_426635.tokenNode.colNo);
						F.line = 2110;
						res_426674 = addInt(res_426674, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_426273;

}

function new_ast_lt_181783() {
	var result_181785 = null;

	var F={procname:"asdl.newAstLt",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181785 = {m_type: NTI181779, kind: 0};
		F.line = 111;
		result_181785.kind = 2;
	framePtr = F.prev;

	return result_181785;

}

function new_ast_gt_181845() {
	var result_181847 = null;

	var F={procname:"asdl.newAstGt",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181847 = {m_type: NTI181841, kind: 0};
		F.line = 111;
		result_181847.kind = 4;
	framePtr = F.prev;

	return result_181847;

}

function new_ast_eq_181721() {
	var result_181723 = null;

	var F={procname:"asdl.newAstEq",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181723 = {m_type: NTI181717, kind: 0};
		F.line = 111;
		result_181723.kind = 0;
	framePtr = F.prev;

	return result_181723;

}

function new_ast_gt_e_181876() {
	var result_181878 = null;

	var F={procname:"asdl.newAstGtE",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181878 = {m_type: NTI181872, kind: 0};
		F.line = 111;
		result_181878.kind = 5;
	framePtr = F.prev;

	return result_181878;

}

function new_ast_lt_e_181814() {
	var result_181816 = null;

	var F={procname:"asdl.newAstLtE",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181816 = {m_type: NTI181810, kind: 0};
		F.line = 111;
		result_181816.kind = 3;
	framePtr = F.prev;

	return result_181816;

}

function new_ast_not_eq_181752() {
	var result_181754 = null;

	var F={procname:"asdl.newAstNotEq",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181754 = {m_type: NTI181748, kind: 0};
		F.line = 111;
		result_181754.kind = 1;
	framePtr = F.prev;

	return result_181754;

}

function new_ast_in_181969() {
	var result_181971 = null;

	var F={procname:"asdl.newAstIn",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181971 = {m_type: NTI181965, kind: 0};
		F.line = 111;
		result_181971.kind = 8;
	framePtr = F.prev;

	return result_181971;

}

function new_ast_not_in_182000() {
	var result_182002 = null;

	var F={procname:"asdl.newAstNotIn",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182002 = {m_type: NTI181996, kind: 0};
		F.line = 111;
		result_182002.kind = 9;
	framePtr = F.prev;

	return result_182002;

}

function ast_comp_op_409663(parse_node_409665) {
	var result_425817 = null;

	var F={procname:"ast.astCompOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409665.tokenNode.token == 148))) {
		F.line = 811;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(811, 3) `parseNode.tokenNode.token == comp_op` "));
		}
		
		F.line = 811;
		var token_426001 = parse_node_409665.children[chckIndx(0, 0, parse_node_409665.children.length+0-1)-0].tokenNode.token;
		F.line = 812;
		switch (token_426001) {
		case 21:
			F.line = 814;
			result_425817 = new_ast_lt_181783();
			break;
		case 22:
			F.line = 816;
			result_425817 = new_ast_gt_181845();
			break;
		case 28:
			F.line = 818;
			result_425817 = new_ast_eq_181721();
			break;
		case 31:
			F.line = 820;
			result_425817 = new_ast_gt_e_181876();
			break;
		case 30:
			F.line = 822;
			result_425817 = new_ast_lt_e_181814();
			break;
		case 29:
			F.line = 824;
			result_425817 = new_ast_not_eq_181752();
			break;
		case 74:
			F.line = 826;
			result_425817 = new_ast_in_181969();
			break;
		case 55:
			F.line = 828;
			result_425817 = new_ast_not_in_182000();
			break;
		default: 
			F.line = 830;
			var fmt_res_426012 = mnewString(0);
			F.line = 830;
			if (fmt_res_426012 != null) { fmt_res_426012 = (fmt_res_426012).concat(makeNimstrLit("Complex comparison operation ")); } else { fmt_res_426012 = makeNimstrLit("Complex comparison operation "); };
			F.line = 270;
			if (fmt_res_426012 != null) { fmt_res_426012 = (fmt_res_426012).concat(reprEnum(token_426001, NTI202995)); } else { fmt_res_426012 = reprEnum(token_426001, NTI202995).slice(); };
			F.line = 830;
			if (fmt_res_426012 != null) { fmt_res_426012 = (fmt_res_426012).concat(makeNimstrLit(" not implemented")); } else { fmt_res_426012 = makeNimstrLit(" not implemented"); };
			F.line = 830;
			raiseException(new_syntax_error_156100(fmt_res_426012, [], parse_node_409665.tokenNode.lineNo, parse_node_409665.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
	framePtr = F.prev;

	return result_425817;

}

function new_ast_compare_180446() {
	var result_180448 = null;

	var F={procname:"asdl.newAstCompare",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180448 = {m_type: NTI180432, left: null, ops: null, comparators: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180448.kind = 14;
	framePtr = F.prev;

	return result_180448;

}

function ast_comparison_409660(parse_node_409662) {
	var result_425217 = null;

	var F={procname:"ast.astComparison",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_409662.tokenNode.token == 147))) {
		F.line = 792;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(792, 3) `parseNode.tokenNode.token == comparison` "));
		}
		
		F.line = 792;
		var expr1_425401 = ast_expr_409666(parse_node_409662.children[chckIndx(0, 0, parse_node_409662.children.length+0-1)-0]);
		if (((parse_node_409662.children != null ? parse_node_409662.children.length : 0) == 1)) {
		F.line = 794;
		result_425217 = expr1_425401;
		if (!(!((result_425217 == null)))) {
		F.line = 795;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(795, 12) `\x0Anot (result == nil)` "));
		}
		
		F.line = 796;
		break BeforeRet;
		}
		
		if (!(((parse_node_409662.children != null ? parse_node_409662.children.length : 0) == 3))) {
		F.line = 798;
		raiseException(new_syntax_error_156100(makeNimstrLit("Chained comparison not implemented"), [], parse_node_409662.children[chckIndx(2, 0, parse_node_409662.children.length+0-1)-0].tokenNode.lineNo, parse_node_409662.children[chckIndx(2, 0, parse_node_409662.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 799;
		var op_425610 = ast_comp_op_409663(parse_node_409662.children[chckIndx(1, 0, parse_node_409662.children.length+0-1)-0]);
		F.line = 800;
		var expr2_425611 = ast_expr_409666(parse_node_409662.children[chckIndx(2, 0, parse_node_409662.children.length+0-1)-0]);
		F.line = 801;
		var cmp_425612 = new_ast_compare_180446();
		F.line = 802;
		cmp_425612.left = expr1_425401;
		F.line = 803;
		if (cmp_425612.ops != null) { cmp_425612.ops.push(op_425610); } else { cmp_425612.ops = [op_425610]; };
		F.line = 804;
		if (cmp_425612.comparators != null) { cmp_425612.comparators.push(expr2_425611); } else { cmp_425612.comparators = [expr2_425611]; };
		F.line = 87;
		cmp_425612.lineno = expr1_425401.lineno;
		F.line = 88;
		cmp_425612.col_offset = expr1_425401.col_offset;
		F.line = 806;
		result_425217 = cmp_425612;
		if (!(!((result_425217 == null)))) {
		F.line = 807;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(807, 10) `\x0Anot (result == nil)` "));
		}
		
	} while (false);
	framePtr = F.prev;

	return result_425217;

}

function ast_not_test_409657(parse_node_409659) {
	var result_424678 = null;

	var F={procname:"ast.astNotTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409659.tokenNode.token == 146))) {
		F.line = 779;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(779, 3) `parseNode.tokenNode.token == not_test` "));
		}
		
		F.line = 779;
		var child_424801 = parse_node_409659.children[chckIndx(0, 0, parse_node_409659.children.length+0-1)-0];
		F.line = 780;
		switch (child_424801.tokenNode.token) {
		case 55:
			F.line = 782;
			result_424678 = new_unary_op_409475(new_ast_not_181628(), ast_not_test_409657(parse_node_409659.children[chckIndx(1, 0, parse_node_409659.children.length+0-1)-0]));
			F.line = 83;
			result_424678.lineno = new_int_409060(parse_node_409659.children[chckIndx(0, 0, parse_node_409659.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			result_424678.col_offset = new_int_409060(parse_node_409659.children[chckIndx(0, 0, parse_node_409659.children.length+0-1)-0].tokenNode.colNo);
			break;
		case 147:
			F.line = 785;
			result_424678 = ast_comparison_409660(child_424801);
			break;
		default: 
			F.line = 2895;
			var e_424811 = null;
			F.line = 2896;
			e_424811 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_424811.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_424811.parent = null;
			F.line = 787;
			raiseException(e_424811, "InternalError");
			break;
		}
		if (!(!((result_424678 == null)))) {
		F.line = 788;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(788, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_424678;

}

function new_ast_and_181132() {
	var result_181134 = null;

	var F={procname:"asdl.newAstAnd",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181134 = {m_type: NTI181128, kind: 0};
		F.line = 111;
		result_181134.kind = 0;
	framePtr = F.prev;

	return result_181134;

}

function new_ast_or_181163() {
	var result_181165 = null;

	var F={procname:"asdl.newAstOr",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181165 = {m_type: NTI181159, kind: 0};
		F.line = 111;
		result_181165.kind = 1;
	framePtr = F.prev;

	return result_181165;

}

function new_ast_bool_op_179938() {
	var result_179940 = null;

	var F={procname:"asdl.newAstBoolOp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179940 = {m_type: NTI179928, op: null, values: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179940.kind = 0;
	framePtr = F.prev;

	return result_179940;

}

function new_bool_op_409437(op_409439, values_409441) {
	var result_409442 = null;

	var F={procname:"ast.newBoolOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 56;
		result_409442 = new_ast_bool_op_179938();
		F.line = 57;
		result_409442.op = op_409439;
		F.line = 58;
		result_409442.values = nimCopy(null, values_409441, NTI409440);
	framePtr = F.prev;

	return result_409442;

}

function ast_and_test_409654(parse_node_409656) {
	var result_424078 = null;

	var F={procname:"ast.astAndTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_409656.tokenNode.token == 145))) {
		F.line = 775;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(775, 3) `parseNode.tokenNode.token == and_test` "));
		}
		
		if (!((modInt((parse_node_409656.children != null ? parse_node_409656.children.length : 0), 2) == 1))) {
		F.line = 747;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(747, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 748;
		var first_child_424406 = parse_node_409656.children[chckIndx(0, 0, parse_node_409656.children.length+0-1)-0];
		F.line = 749;
		var first_ast_node_424408 = ast_not_test_409657(first_child_424406);
		if (((parse_node_409656.children != null ? parse_node_409656.children.length : 0) == 1)) {
		F.line = 751;
		result_424078 = first_ast_node_424408;
		break BeforeRet;
		}
		
		F.line = 752;
		var token_424421 = parse_node_409656.children[chckIndx(1, 0, parse_node_409656.children.length+0-1)-0].tokenNode.token;
		F.line = 753;
		var op_424423 = null;
		F.line = 754;
		switch (token_424421) {
		case 60:
			F.line = 756;
			op_424423 = new_ast_and_181132();
			break;
		case 73:
			F.line = 758;
			op_424423 = new_ast_or_181163();
			break;
		default: 
			F.line = 2895;
			var e_424431 = null;
			F.line = 2896;
			e_424431 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_424431.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_424431.parent = null;
			F.line = 760;
			raiseException(e_424431, "InternalError");
			break;
		}
		F.line = 761;
		var node_seq_424614 = [first_ast_node_424408];
		L1: do {
			F.line = 762;
			var idx_424634 = 0;
			F.line = 2104;
			var colontmp__424655 = 0;
			F.line = 762;
			colontmp__424655 = divInt((parse_node_409656.children != null ? parse_node_409656.children.length : 0), 2);
			F.line = 2107;
			var res_424658 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_424658 <= colontmp__424655)) break L3;
						F.line = 2109;
						idx_424634 = res_424658;
						F.line = 763;
						var next_child_424641 = parse_node_409656.children[chckIndx(mulInt(2, idx_424634), 0, parse_node_409656.children.length+0-1)-0];
						F.line = 764;
						var next_ast_node_424643 = ast_not_test_409657(next_child_424641);
						F.line = 765;
						if (node_seq_424614 != null) { node_seq_424614.push(next_ast_node_424643); } else { node_seq_424614 = [next_ast_node_424643]; };
						F.line = 2110;
						res_424658 = addInt(res_424658, 1);
					}
			} while(false);
		} while(false);
		F.line = 766;
		result_424078 = new_bool_op_409437(op_424423, node_seq_424614);
		F.line = 87;
		result_424078.lineno = first_ast_node_424408.lineno;
		F.line = 88;
		result_424078.col_offset = first_ast_node_424408.col_offset;
	} while (false);
	framePtr = F.prev;

	return result_424078;

}

function ast_or_test_409651(parse_node_409653) {
	var result_423461 = null;

	var F={procname:"ast.astOrTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_409653.tokenNode.token == 144))) {
		F.line = 771;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(771, 3) `parseNode.tokenNode.token == or_test` "));
		}
		
		if (!((modInt((parse_node_409653.children != null ? parse_node_409653.children.length : 0), 2) == 1))) {
		F.line = 747;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(747, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 748;
		var first_child_423806 = parse_node_409653.children[chckIndx(0, 0, parse_node_409653.children.length+0-1)-0];
		F.line = 749;
		var first_ast_node_423808 = ast_and_test_409654(first_child_423806);
		if (((parse_node_409653.children != null ? parse_node_409653.children.length : 0) == 1)) {
		F.line = 751;
		result_423461 = first_ast_node_423808;
		break BeforeRet;
		}
		
		F.line = 752;
		var token_423821 = parse_node_409653.children[chckIndx(1, 0, parse_node_409653.children.length+0-1)-0].tokenNode.token;
		F.line = 753;
		var op_423823 = null;
		F.line = 754;
		switch (token_423821) {
		case 60:
			F.line = 756;
			op_423823 = new_ast_and_181132();
			break;
		case 73:
			F.line = 758;
			op_423823 = new_ast_or_181163();
			break;
		default: 
			F.line = 2895;
			var e_423831 = null;
			F.line = 2896;
			e_423831 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_423831.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_423831.parent = null;
			F.line = 760;
			raiseException(e_423831, "InternalError");
			break;
		}
		F.line = 761;
		var node_seq_424014 = [first_ast_node_423808];
		L1: do {
			F.line = 762;
			var idx_424034 = 0;
			F.line = 2104;
			var colontmp__424055 = 0;
			F.line = 762;
			colontmp__424055 = divInt((parse_node_409653.children != null ? parse_node_409653.children.length : 0), 2);
			F.line = 2107;
			var res_424058 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_424058 <= colontmp__424055)) break L3;
						F.line = 2109;
						idx_424034 = res_424058;
						F.line = 763;
						var next_child_424041 = parse_node_409653.children[chckIndx(mulInt(2, idx_424034), 0, parse_node_409653.children.length+0-1)-0];
						F.line = 764;
						var next_ast_node_424043 = ast_and_test_409654(next_child_424041);
						F.line = 765;
						if (node_seq_424014 != null) { node_seq_424014.push(next_ast_node_424043); } else { node_seq_424014 = [next_ast_node_424043]; };
						F.line = 2110;
						res_424058 = addInt(res_424058, 1);
					}
			} while(false);
		} while(false);
		F.line = 766;
		result_423461 = new_bool_op_409437(op_423823, node_seq_424014);
		F.line = 87;
		result_423461.lineno = first_ast_node_423808.lineno;
		F.line = 88;
		result_423461.col_offset = first_ast_node_423808.col_offset;
	} while (false);
	framePtr = F.prev;

	return result_423461;

}

function ast_test_409648(parse_node_409650) {
	var result_423038 = null;

	var F={procname:"ast.astTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409650.tokenNode.token == 140))) {
		F.line = 725;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(725, 3) `parseNode.tokenNode.token == test` "));
		}
		
		if (!(((parse_node_409650.children != null ? parse_node_409650.children.length : 0) == 1))) {
		F.line = 726;
		raiseException(new_syntax_error_156100(makeNimstrLit("Inline if else not implemented"), [], parse_node_409650.children[chckIndx(1, 0, parse_node_409650.children.length+0-1)-0].tokenNode.lineNo, parse_node_409650.children[chckIndx(1, 0, parse_node_409650.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 727;
		var child_423210 = parse_node_409650.children[chckIndx(0, 0, parse_node_409650.children.length+0-1)-0];
		if (!((child_423210.tokenNode.token == 144))) {
		F.line = 729;
		raiseException(new_syntax_error_156100(makeNimstrLit("lambda not implemented"), [], parse_node_409650.tokenNode.lineNo, parse_node_409650.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 730;
		result_423038 = ast_or_test_409651(child_423210);
		if (!(!((result_423038 == null)))) {
		F.line = 731;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(731, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_423038;

}

function ast_testlist_star_expr_409568(parse_node_409570) {
	var result_416017 = null;

	var F={procname:"ast.astTestlistStarExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409570.tokenNode.token == 109))) {
		F.line = 477;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(477, 3) `parseNode.tokenNode.token == testlist_star_expr` "));
		}
		
		F.line = 477;
		var elms_416202 = null;
		L1: do {
			F.line = 478;
			var i_416220 = 0;
			F.line = 3616;
			var colontmp__416402 = 0;
			F.line = 478;
			colontmp__416402 = divInt(addInt((parse_node_409570.children != null ? parse_node_409570.children.length : 0), 1), 2);
			F.line = 3617;
			var i_416405 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_416405 < colontmp__416402)) break L3;
						F.line = 3619;
						i_416220 = i_416405;
						F.line = 479;
						var child_416222 = parse_node_409570.children[chckIndx(mulInt(2, i_416220), 0, parse_node_409570.children.length+0-1)-0];
						if (!((child_416222.tokenNode.token == 140))) {
						F.line = 481;
						raiseException(new_syntax_error_156100(makeNimstrLit("Star expression not implemented"), [], child_416222.tokenNode.lineNo, child_416222.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 482;
						if (elms_416202 != null) { elms_416202.push(ast_test_409648(child_416222)); } else { elms_416202 = [ast_test_409648(child_416222)]; };
						F.line = 3620;
						i_416405 = addInt(i_416405, 1);
					}
			} while(false);
		} while(false);
		if (((parse_node_409570.children != null ? parse_node_409570.children.length : 0) == 1)) {
		F.line = 484;
		result_416017 = elms_416202[chckIndx(0, 0, elms_416202.length+0-1)-0];
		}
		else {
			F.line = 486;
			result_416017 = new_tuple_409511(elms_416202);
		}
		
		F.line = 87;
		result_416017.lineno = elms_416202[chckIndx(0, 0, elms_416202.length+0-1)-0].lineno;
		F.line = 88;
		result_416017.col_offset = elms_416202[chckIndx(0, 0, elms_416202.length+0-1)-0].col_offset;
		if (!(!((result_416017 == null)))) {
		F.line = 488;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(488, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_416017;

}

function new_ast_expr_179808() {
	var result_179810 = null;

	var F={procname:"asdl.newAstExpr",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179810 = {m_type: NTI179802, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179810.kind = 21;
	framePtr = F.prev;

	return result_179810;

}

function new_ast_expr_409043(expr_409045) {
	var result_409046 = null;

	var F={procname:"ast.newAstExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_409046 = new_ast_expr_179808();
		F.line = 29;
		result_409046.value = expr_409045;
	framePtr = F.prev;

	return result_409046;

}

function new_ast_assign_179192() {
	var result_179194 = null;

	var F={procname:"asdl.newAstAssign",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179194 = {m_type: NTI179182, targets: null, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179194.kind = 5;
	framePtr = F.prev;

	return result_179194;

}

function ast_expr_stmt_409565(parse_node_409567) {
	var result_415617 = null;

	var F={procname:"ast.astExprStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_409567.tokenNode.token == 107))) {
		F.line = 447;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(447, 3) `parseNode.tokenNode.token == expr_stmt` "));
		}
		
		F.line = 447;
		var testlist_star_expr1_415801 = ast_testlist_star_expr_409568(parse_node_409567.children[chckIndx(0, 0, parse_node_409567.children.length+0-1)-0]);
		if (((parse_node_409567.children != null ? parse_node_409567.children.length : 0) == 1)) {
		F.line = 449;
		result_415617 = new_ast_expr_409043(testlist_star_expr1_415801);
		break BeforeRet;
		}
		
		F.line = 451;
		var middle_child_415809 = parse_node_409567.children[chckIndx(1, 0, parse_node_409567.children.length+0-1)-0];
		F.line = 452;
		switch (middle_child_415809.tokenNode.token) {
		case 23:
			if (!(((parse_node_409567.children != null ? parse_node_409567.children.length : 0) == 3))) {
			F.line = 455;
			raiseException(new_syntax_error_156100(makeNimstrLit("Only support simple assign like x=1"), [], middle_child_415809.tokenNode.lineNo, middle_child_415809.tokenNode.colNo), "SyntaxError:ObjectType");
			}
			
			F.line = 456;
			var testlist_star_expr2_415820 = ast_testlist_star_expr_409568(parse_node_409567.children[chckIndx(2, 0, parse_node_409567.children.length+0-1)-0]);
			F.line = 457;
			var node_415821 = new_ast_assign_179192();
			F.line = 83;
			node_415821.lineno = new_int_409060(middle_child_415809.tokenNode.lineNo);
			F.line = 84;
			node_415821.col_offset = new_int_409060(middle_child_415809.tokenNode.colNo);
			F.line = 459;
			set_store_410278(testlist_star_expr1_415801);
			F.line = 460;
			if (node_415821.targets != null) { node_415821.targets.push(testlist_star_expr1_415801); } else { node_415821.targets = [testlist_star_expr1_415801]; };
			if (!(((node_415821.targets != null ? node_415821.targets.length : 0) == 1))) {
			F.line = 462;
			raiseException(new_syntax_error_156100(makeNimstrLit("Assign to multiple target not supported"), [], parse_node_409567.tokenNode.lineNo, parse_node_409567.tokenNode.colNo), "SyntaxError:ObjectType");
			}
			
			F.line = 463;
			node_415821.value = testlist_star_expr2_415820;
			F.line = 464;
			result_415617 = node_415821;
			break;
		case 110:
			F.line = 466;
			raiseException(new_syntax_error_156100(makeNimstrLit("Inplace operation not implemented"), [], middle_child_415809.tokenNode.lineNo, middle_child_415809.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		default: 
			F.line = 468;
			raiseException(new_syntax_error_156100(makeNimstrLit("Only support simple assignment like a=1"), [], middle_child_415809.tokenNode.lineNo, middle_child_415809.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
		if (!(!((result_415617 == null)))) {
		F.line = 469;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(469, 10) `\x0Anot (result == nil)` "));
		}
		
	} while (false);
	framePtr = F.prev;

	return result_415617;

}

function ast_del_stmt_409574(parse_node_409576) {
	var result_416632 = null;

	var F={procname:"ast.astDelStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 497;
		raiseException(new_syntax_error_156100(makeNimstrLit("del not implemented"), [], parse_node_409576.tokenNode.lineNo, parse_node_409576.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_416632;

}

function new_ast_pass_179839() {
	var result_179841 = null;

	var F={procname:"asdl.newAstPass",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179841 = {m_type: NTI179835, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179841.kind = 22;
	framePtr = F.prev;

	return result_179841;

}

function ast_pass_stmt_409577(parse_node_409579) {
	var result_416651 = null;

	var F={procname:"ast.astPassStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409579.tokenNode.token == 112))) {
		F.line = 501;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(501, 3) `parseNode.tokenNode.token == pass_stmt` "));
		}
		
		F.line = 501;
		result_416651 = new_ast_pass_179839();
		F.line = 83;
		result_416651.lineno = new_int_409060(parse_node_409579.children[chckIndx(0, 0, parse_node_409579.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_416651.col_offset = new_int_409060(parse_node_409579.children[chckIndx(0, 0, parse_node_409579.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_416651;

}

function new_ast_break_179870() {
	var result_179872 = null;

	var F={procname:"asdl.newAstBreak",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179872 = {m_type: NTI179866, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179872.kind = 23;
	framePtr = F.prev;

	return result_179872;

}

function ast_break_stmt_409583(parse_node_409585) {
	var result_417417 = null;

	var F={procname:"ast.astBreakStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409585.tokenNode.token == 114))) {
		F.line = 518;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(518, 3) `parseNode.tokenNode.token == break_stmt` "));
		}
		
		F.line = 518;
		result_417417 = new_ast_break_179870();
		F.line = 83;
		result_417417.lineno = new_int_409060(parse_node_409585.children[chckIndx(0, 0, parse_node_409585.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_417417.col_offset = new_int_409060(parse_node_409585.children[chckIndx(0, 0, parse_node_409585.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_417417;

}

function new_ast_continue_179901() {
	var result_179903 = null;

	var F={procname:"asdl.newAstContinue",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179903 = {m_type: NTI179897, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179903.kind = 24;
	framePtr = F.prev;

	return result_179903;

}

function ast_continue_stmt_409586(parse_node_409588) {
	var result_417619 = null;

	var F={procname:"ast.astContinueStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409588.tokenNode.token == 115))) {
		F.line = 522;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(522, 3) `parseNode.tokenNode.token == continue_stmt` "));
		}
		
		F.line = 522;
		result_417619 = new_ast_continue_179901();
		F.line = 83;
		result_417619.lineno = new_int_409060(parse_node_409588.children[chckIndx(0, 0, parse_node_409588.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_417619.col_offset = new_int_409060(parse_node_409588.children[chckIndx(0, 0, parse_node_409588.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_417619;

}

function new_ast_return_179120() {
	var result_179122 = null;

	var F={procname:"asdl.newAstReturn",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179122 = {m_type: NTI179114, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179122.kind = 3;
	framePtr = F.prev;

	return result_179122;

}

function ast_test_list_409713(parse_node_409715) {
	var result_432438 = null;

	var F={procname:"ast.astTestList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409715.tokenNode.token == 166))) {
		F.line = 1138;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1138, 3) `parseNode.tokenNode.token == testlist` "));
		}
		
		F.line = 1138;
		var elms_432602 = null;
		L1: do {
			F.line = 1139;
			var i_432620 = 0;
			F.line = 3616;
			var colontmp__432802 = 0;
			F.line = 1139;
			colontmp__432802 = divInt(addInt((parse_node_409715.children != null ? parse_node_409715.children.length : 0), 1), 2);
			F.line = 3617;
			var i_432805 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_432805 < colontmp__432802)) break L3;
						F.line = 3619;
						i_432620 = i_432805;
						F.line = 1140;
						var child_432622 = parse_node_409715.children[chckIndx(mulInt(2, i_432620), 0, parse_node_409715.children.length+0-1)-0];
						F.line = 1141;
						if (elms_432602 != null) { elms_432602.push(ast_test_409648(child_432622)); } else { elms_432602 = [ast_test_409648(child_432622)]; };
						F.line = 3620;
						i_432805 = addInt(i_432805, 1);
					}
			} while(false);
		} while(false);
		if (((parse_node_409715.children != null ? parse_node_409715.children.length : 0) == 1)) {
		F.line = 1143;
		result_432438 = elms_432602[chckIndx(0, 0, elms_432602.length+0-1)-0];
		}
		else {
			F.line = 1145;
			result_432438 = new_tuple_409511(elms_432602);
			F.line = 87;
			result_432438.lineno = elms_432602[chckIndx(0, 0, elms_432602.length+0-1)-0].lineno;
			F.line = 88;
			result_432438.col_offset = elms_432602[chckIndx(0, 0, elms_432602.length+0-1)-0].col_offset;
		}
		
		if (!(!((result_432438 == null)))) {
		F.line = 1147;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1147, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_432438;

}

function ast_return_stmt_409589(parse_node_409591) {
	var result_417819 = null;

	var F={procname:"ast.astReturnStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 527;
		if (!((parse_node_409591.tokenNode.token == 116))) {
		F.line = 527;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(527, 3) `parseNode.tokenNode.token == return_stmt` "));
		}
		
		F.line = 527;
		var node_418001 = new_ast_return_179120();
		F.line = 83;
		node_418001.lineno = new_int_409060(parse_node_409591.children[chckIndx(0, 0, parse_node_409591.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		node_418001.col_offset = new_int_409060(parse_node_409591.children[chckIndx(0, 0, parse_node_409591.children.length+0-1)-0].tokenNode.colNo);
		if (((parse_node_409591.children != null ? parse_node_409591.children.length : 0) == 1)) {
		F.line = 530;
		result_417819 = node_418001;
		break BeforeRet;
		}
		
		F.line = 531;
		node_418001.value = ast_test_list_409713(parse_node_409591.children[chckIndx(1, 0, parse_node_409591.children.length+0-1)-0]);
		result_417819 = node_418001;
	} while (false);
	framePtr = F.prev;

	return result_417819;

}

function new_ast_raise_179549() {
	var result_179551 = null;

	var F={procname:"asdl.newAstRaise",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179551 = {m_type: NTI179541, exc: null, cause: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179551.kind = 14;
	framePtr = F.prev;

	return result_179551;

}

function ast_raise_stmt_409595(parse_node_409597) {
	var result_418219 = null;

	var F={procname:"ast.astRaiseStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409597.tokenNode.token == 118))) {
		F.line = 539;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(539, 3) `parseNode.tokenNode.token == raise_stmt` "));
		}
		
		F.line = 539;
		result_418219 = new_ast_raise_179549();
		F.line = 83;
		result_418219.lineno = new_int_409060(parse_node_409597.children[chckIndx(0, 0, parse_node_409597.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_418219.col_offset = new_int_409060(parse_node_409597.children[chckIndx(0, 0, parse_node_409597.children.length+0-1)-0].tokenNode.colNo);
		F.line = 541;
		switch ((parse_node_409597.children != null ? parse_node_409597.children.length : 0)) {
		case 1:
			break;
		case 2:
			F.line = 545;
			result_418219.exc = ast_test_409648(parse_node_409597.children[chckIndx(1, 0, parse_node_409597.children.length+0-1)-0]);
			break;
		default: 
			F.line = 547;
			raiseException(new_syntax_error_156100(makeNimstrLit("Fancy raise not implemented"), [], parse_node_409597.children[chckIndx(2, 0, parse_node_409597.children.length+0-1)-0].tokenNode.lineNo, parse_node_409597.children[chckIndx(2, 0, parse_node_409597.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
	framePtr = F.prev;

	return result_418219;

}

function ast_yield_stmt_409592(parse_node_409594) {
	var result_418027 = null;

	var F={procname:"ast.astYieldStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409594.tokenNode.token == 117))) {
		F.line = 535;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(535, 3) `parseNode.tokenNode.token == yield_stmt` "));
		}
		
		F.line = 535;
		raiseException(new_syntax_error_156100(makeNimstrLit("Yield not implemented"), [], parse_node_409594.tokenNode.lineNo, parse_node_409594.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_418027;

}

function ast_flow_stmt_409580(parse_node_409582) {
	var result_416819 = null;

	var F={procname:"ast.astFlowStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409582.tokenNode.token == 113))) {
		F.line = 506;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(506, 3) `parseNode.tokenNode.token == flow_stmt` "));
		}
		
		F.line = 506;
		var child_417001 = parse_node_409582.children[chckIndx(0, 0, parse_node_409582.children.length+0-1)-0];
		F.line = 507;
		switch (child_417001.tokenNode.token) {
		case 114:
			F.line = 508;
			result_416819 = ast_break_stmt_409583(child_417001);
			break;
		case 115:
			F.line = 509;
			result_416819 = ast_continue_stmt_409586(child_417001);
			break;
		case 116:
			F.line = 510;
			result_416819 = ast_return_stmt_409589(child_417001);
			break;
		case 118:
			F.line = 511;
			result_416819 = ast_raise_stmt_409595(child_417001);
			break;
		case 117:
			F.line = 512;
			result_416819 = ast_yield_stmt_409592(child_417001);
			break;
		default: 
			if (true) {
			F.line = 512;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(512, 5) `false` "));
			}
			
			break;
		}
		if (!(!((result_416819 == null)))) {
		F.line = 514;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(514, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_416819;

}

function new_ast_import_179666() {
	var result_179668 = null;

	var F={procname:"asdl.newAstImport",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179668 = {m_type: NTI179658, names: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179668.kind = 17;
	framePtr = F.prev;

	return result_179668;

}

function new_ast_alias_182236() {
	var result_182238 = null;

	var F={procname:"asdl.newAstAlias",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182238 = {m_type: NTI182228, name: null, asname: null, kind: 0};
		F.line = 111;
		result_182238.kind = 0;
	framePtr = F.prev;

	return result_182238;

}

function ast_dotted_name_409608(parse_node_409610) {
	var result_419636 = null;

	var F={procname:"ast.astDottedName",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409610.tokenNode.token == 126))) {
		F.line = 597;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(597, 3) `parseNode.tokenNode.token == dotted_name` "));
		}
		
		if (!(((parse_node_409610.children != null ? parse_node_409610.children.length : 0) == 1))) {
		F.line = 598;
		raiseException(new_syntax_error_156100(makeNimstrLit("dotted import name not supported"), [], parse_node_409610.children[chckIndx(1, 0, parse_node_409610.children.length+0-1)-0].tokenNode.lineNo, parse_node_409610.children[chckIndx(1, 0, parse_node_409610.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 599;
		result_419636 = new_ast_alias_182236();
		F.line = 600;
		result_419636.name = new_identifier_409085(parse_node_409610.children[chckIndx(0, 0, parse_node_409610.children.length+0-1)-0].tokenNode.content);
	framePtr = F.prev;

	return result_419636;

}

function ast_dotted_as_name_419246(parse_node_419248) {
	var result_419249 = null;

	var F={procname:"ast.ast_dotted_as_name",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 579;
		if (!((parse_node_419248.tokenNode.token == 123))) {
		F.line = 579;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(579, 3) `parseNode.tokenNode.token == dotted_as_name` "));
		}
		
		if (!(((parse_node_419248.children != null ? parse_node_419248.children.length : 0) == 1))) {
		F.line = 580;
		raiseException(new_syntax_error_156100(makeNimstrLit("import alias not implemented"), [], parse_node_419248.tokenNode.lineNo, parse_node_419248.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		result_419249 = ast_dotted_name_409608(parse_node_419248.children[chckIndx(0, 0, parse_node_419248.children.length+0-1)-0]);
	framePtr = F.prev;

	return result_419249;

}

function ast_dotted_as_names_409604(parse_node_409606) {
	var result_419427 = null;

	var F={procname:"ast.astDottedAsNames",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409606.tokenNode.token == 125))) {
		F.line = 590;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(590, 3) `parseNode.tokenNode.token == dotted_as_names` "));
		}
		
		if (!(((parse_node_409606.children != null ? parse_node_409606.children.length : 0) == 1))) {
		F.line = 591;
		raiseException(new_syntax_error_156100(makeNimstrLit("import multiple modules in one line not implemented"), [], parse_node_409606.children[chckIndx(1, 0, parse_node_409606.children.length+0-1)-0].tokenNode.lineNo, parse_node_409606.children[chckIndx(1, 0, parse_node_409606.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 593;
		if (result_419427 != null) { result_419427.push(ast_dotted_as_name_419246(parse_node_409606.children[chckIndx(0, 0, parse_node_409606.children.length+0-1)-0])); } else { result_419427 = [ast_dotted_as_name_419246(parse_node_409606.children[chckIndx(0, 0, parse_node_409606.children.length+0-1)-0])]; };
	framePtr = F.prev;

	return result_419427;

}

function ast_import_name_409601(parse_node_409603) {
	var result_418817 = null;

	var F={procname:"ast.astImportName",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 563;
		if (!((parse_node_409603.tokenNode.token == 120))) {
		F.line = 563;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(563, 3) `parseNode.tokenNode.token == import_name` "));
		}
		
		F.line = 563;
		var node_419001 = new_ast_import_179666();
		F.line = 83;
		node_419001.lineno = new_int_409060(parse_node_409603.children[chckIndx(0, 0, parse_node_409603.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		node_419001.col_offset = new_int_409060(parse_node_409603.children[chckIndx(0, 0, parse_node_409603.children.length+0-1)-0].tokenNode.colNo);
		L1: do {
			F.line = 565;
			var c_419215 = null;
			F.line = 3909;
			var colontmp__419227 = null;
			F.line = 565;
			colontmp__419227 = ast_dotted_as_names_409604(parse_node_409603.children[chckIndx(1, 0, parse_node_409603.children.length+0-1)-0]);
			F.line = 3911;
			var i_419230 = 0;
			F.line = 3912;
			var l_419232 = (colontmp__419227 != null ? colontmp__419227.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_419230 < l_419232)) break L3;
						F.line = 3914;
						c_419215 = colontmp__419227[chckIndx(i_419230, 0, colontmp__419227.length+0-1)-0];
						F.line = 566;
						if (node_419001.names != null) { node_419001.names.push(c_419215); } else { node_419001.names = [c_419215]; };
						F.line = 3915;
						i_419230 = addInt(i_419230, 1);
						if (!(((colontmp__419227 != null ? colontmp__419227.length : 0) == l_419232))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_418817 = node_419001;
	framePtr = F.prev;

	return result_418817;

}

function ast_import_stmt_409598(parse_node_409600) {
	var result_418428 = null;

	var F={procname:"ast.astImportStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409600.tokenNode.token == 119))) {
		F.line = 552;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(552, 3) `parseNode.tokenNode.token == import_stmt` "));
		}
		
		F.line = 552;
		var child_418601 = parse_node_409600.children[chckIndx(0, 0, parse_node_409600.children.length+0-1)-0];
		F.line = 553;
		switch (child_418601.tokenNode.token) {
		case 120:
			F.line = 555;
			result_418428 = ast_import_name_409601(child_418601);
			break;
		case 121:
			F.line = 557;
			raiseException(new_syntax_error_156100(makeNimstrLit("Import from not implemented"), [], parse_node_409600.tokenNode.lineNo, parse_node_409600.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		default: 
			F.line = 2895;
			var e_418611 = null;
			F.line = 2896;
			e_418611 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 559;
			e_418611.message = nimCopy(null, makeNimstrLit("wrong import_stmt"), NTI138);
			F.line = 2891;
			e_418611.parent = null;
			F.line = 559;
			raiseException(e_418611, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_418428;

}

function ast_global_stmt_409611(parse_node_409613) {
	var result_419840 = null;

	var F={procname:"ast.astGlobalStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 603;
		raiseException(new_syntax_error_156100(makeNimstrLit("global stmt not implemented"), [], parse_node_409613.tokenNode.lineNo, parse_node_409613.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_419840;

}

function ast_nonlocal_stmt_409614(parse_node_409616) {
	var result_419859 = null;

	var F={procname:"ast.astNonlocalStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 606;
		raiseException(new_syntax_error_156100(makeNimstrLit("nonlocal stmt not implemented"), [], parse_node_409616.tokenNode.lineNo, parse_node_409616.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_419859;

}

function new_ast_assert_179631() {
	var result_179633 = null;

	var F={procname:"asdl.newAstAssert",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179633 = {m_type: NTI179623, test: null, msg: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179633.kind = 16;
	framePtr = F.prev;

	return result_179633;

}

function ast_assert_stmt_409617(parse_node_409619) {
	var result_419878 = null;

	var F={procname:"ast.astAssertStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409619.tokenNode.token == 129))) {
		F.line = 610;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(610, 3) `parseNode.tokenNode.token == assert_stmt` "));
		}
		
		F.line = 610;
		result_419878 = new_ast_assert_179631();
		F.line = 83;
		result_419878.lineno = new_int_409060(parse_node_409619.children[chckIndx(0, 0, parse_node_409619.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_419878.col_offset = new_int_409060(parse_node_409619.children[chckIndx(0, 0, parse_node_409619.children.length+0-1)-0].tokenNode.colNo);
		F.line = 612;
		result_419878.test = ast_test_409648(parse_node_409619.children[chckIndx(1, 0, parse_node_409619.children.length+0-1)-0]);
		if (((parse_node_409619.children != null ? parse_node_409619.children.length : 0) == 4)) {
		F.line = 614;
		result_419878.msg = ast_test_409648(parse_node_409619.children[chckIndx(3, 0, parse_node_409619.children.length+0-1)-0]);
		}
		
	framePtr = F.prev;

	return result_419878;

}

function ast_small_stmt_409562(parse_node_409564) {
	var result_415030 = null;

	var F={procname:"ast.astSmallStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409564.tokenNode.token == 106))) {
		F.line = 432;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(432, 3) `parseNode.tokenNode.token == small_stmt` "));
		}
		
		F.line = 432;
		var child_415201 = parse_node_409564.children[chckIndx(0, 0, parse_node_409564.children.length+0-1)-0];
		F.line = 433;
		switch (child_415201.tokenNode.token) {
		case 107:
			F.line = 434;
			result_415030 = ast_expr_stmt_409565(child_415201);
			break;
		case 111:
			F.line = 435;
			result_415030 = ast_del_stmt_409574(child_415201);
			break;
		case 112:
			F.line = 436;
			result_415030 = ast_pass_stmt_409577(child_415201);
			break;
		case 113:
			F.line = 437;
			result_415030 = ast_flow_stmt_409580(child_415201);
			break;
		case 119:
			F.line = 438;
			result_415030 = ast_import_stmt_409598(child_415201);
			break;
		case 127:
			F.line = 439;
			result_415030 = ast_global_stmt_409611(child_415201);
			break;
		case 128:
			F.line = 440;
			result_415030 = ast_nonlocal_stmt_409614(child_415201);
			break;
		case 129:
			F.line = 441;
			result_415030 = ast_assert_stmt_409617(child_415201);
			break;
		default: 
			if (true) {
			F.line = 441;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(441, 5) `false` "));
			}
			
			break;
		}
		if (!(!((result_415030 == null)))) {
		F.line = 442;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(442, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_415030;

}

function ast_simple_stmt_409558(parse_node_409560) {
	var result_414424 = null;

	var F={procname:"ast.astSimpleStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409560.tokenNode.token == 105))) {
		F.line = 422;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(422, 3) `parseNode.tokenNode.token == simple_stmt` "));
		}
		
		L1: do {
			F.line = 422;
			var child_414609 = null;
			F.line = 3909;
			var colontmp__415002 = null;
			F.line = 422;
			colontmp__415002 = parse_node_409560.children;
			F.line = 3911;
			var i_415005 = 0;
			F.line = 3912;
			var l_415007 = (colontmp__415002 != null ? colontmp__415002.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_415005 < l_415007)) break L3;
						F.line = 3914;
						child_414609 = colontmp__415002[chckIndx(i_415005, 0, colontmp__415002.length+0-1)-0];
						if ((child_414609.tokenNode.token == 106)) {
						F.line = 424;
						if (result_414424 != null) { result_414424.push(ast_small_stmt_409562(child_414609)); } else { result_414424 = [ast_small_stmt_409562(child_414609)]; };
						}
						
						F.line = 3915;
						i_415005 = addInt(i_415005, 1);
						if (!(((colontmp__415002 != null ? colontmp__415002.length : 0) == l_415007))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((0 < (result_414424 != null ? result_414424.length : 0)))) {
		F.line = 425;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(425, 10) `0 < len(result)` "));
		}
		
		L4: do {
			F.line = 426;
			var child_414809 = null;
			F.line = 3911;
			var i_415011 = 0;
			F.line = 3912;
			var l_415013 = (result_414424 != null ? result_414424.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_415011 < l_415013)) break L6;
						F.line = 3914;
						child_414809 = result_414424[chckIndx(i_415011, 0, result_414424.length+0-1)-0];
						if (!(!((child_414809 == null)))) {
						F.line = 427;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(427, 12) `\x0Anot (child == nil)` "));
						}
						
						F.line = 3915;
						i_415011 = addInt(i_415011, 1);
						if (!(((result_414424 != null ? result_414424.length : 0) == l_415013))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_414424;

}

function new_ast_if_179436() {
	var result_179438 = null;

	var F={procname:"asdl.newAstIf",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179438 = {m_type: NTI179422, test: null, body: null, orelse: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179438.kind = 11;
	framePtr = F.prev;

	return result_179438;

}

function ast_suite_409644(parse_node_409646) {
	var result_422029 = null;

	var F={procname:"ast.astSuite",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409646.tokenNode.token == 139))) {
		F.line = 712;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(712, 3) `parseNode.tokenNode.token == suite` "));
		}
		
		F.line = 712;
		switch ((parse_node_409646.children != null ? parse_node_409646.children.length : 0)) {
		case 1:
			F.line = 714;
			var child_422208 = parse_node_409646.children[chckIndx(0, 0, parse_node_409646.children.length+0-1)-0];
			F.line = 715;
			result_422029 = nimCopy(null, ast_simple_stmt_409558(child_422208), NTI409561);
			break;
		default: 
			L1: do {
				F.line = 717;
				var child_422658 = null;
				F.line = 3909;
				var colontmp__423010 = null;
				F.line = 717;
				colontmp__423010 = HEX5BHEX5D_422235(parse_node_409646.children, HEX2EHEX2E_81053(2, 2));
				F.line = 3911;
				var i_423013 = 0;
				F.line = 3912;
				var l_423015 = (colontmp__423010 != null ? colontmp__423010.length : 0);
				L2: do {
					F.line = 3913;
						L3: while (true) {
						if (!(i_423013 < l_423015)) break L3;
							F.line = 3914;
							child_422658 = colontmp__423010[chckIndx(i_423013, 0, colontmp__423010.length+0-1)-0];
							L4: do {
								F.line = 23;
								var item_422671 = null;
								F.line = 3909;
								var colontmp__423003 = null;
								F.line = 718;
								colontmp__423003 = ast_stmt_409554(child_422658);
								F.line = 3911;
								var i_423006 = 0;
								F.line = 3912;
								var l_423008 = (colontmp__423003 != null ? colontmp__423003.length : 0);
								L5: do {
									F.line = 3913;
										L6: while (true) {
										if (!(i_423006 < l_423008)) break L6;
											F.line = 3914;
											item_422671 = colontmp__423003[chckIndx(i_423006, 0, colontmp__423003.length+0-1)-0];
											F.line = 24;
											if (result_422029 != null) { result_422029.push(item_422671); } else { result_422029 = [item_422671]; };
											F.line = 3915;
											i_423006 = addInt(i_423006, 1);
											if (!(((colontmp__423003 != null ? colontmp__423003.length : 0) == l_423008))) {
											F.line = 3916;
											failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							F.line = 3915;
							i_423013 = addInt(i_423013, 1);
							if (!(((colontmp__423010 != null ? colontmp__423010.length : 0) == l_423015))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			break;
		}
		if (!(!(((result_422029 != null ? result_422029.length : 0) == 0)))) {
		F.line = 719;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(719, 10) `\x0Anot (len(result) == 0)` "));
		}
		
		L7: do {
			F.line = 720;
			var child_422809 = null;
			F.line = 3911;
			var i_423019 = 0;
			F.line = 3912;
			var l_423021 = (result_422029 != null ? result_422029.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_423019 < l_423021)) break L9;
						F.line = 3914;
						child_422809 = result_422029[chckIndx(i_423019, 0, result_422029.length+0-1)-0];
						if (!(!((child_422809 == null)))) {
						F.line = 721;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(721, 12) `\x0Anot (child == nil)` "));
						}
						
						F.line = 3915;
						i_423019 = addInt(i_423019, 1);
						if (!(((result_422029 != null ? result_422029.length : 0) == l_423021))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_422029;

}

function ast_if_stmt_409626(parse_node_409628) {
		var Tmp1;

	var result_420817 = null;

	var F={procname:"ast.astIfStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_409628.tokenNode.token == 132))) {
		F.line = 637;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(637, 3) `parseNode.tokenNode.token == if_stmt` "));
		}
		
		F.line = 637;
		result_420817 = new_ast_if_179436();
		F.line = 83;
		result_420817.lineno = new_int_409060(parse_node_409628.children[chckIndx(0, 0, parse_node_409628.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_420817.col_offset = new_int_409060(parse_node_409628.children[chckIndx(0, 0, parse_node_409628.children.length+0-1)-0].tokenNode.colNo);
		F.line = 639;
		result_420817.test = ast_test_409648(parse_node_409628.children[chckIndx(1, 0, parse_node_409628.children.length+0-1)-0]);
		F.line = 640;
		result_420817.body = nimCopy(null, ast_suite_409644(parse_node_409628.children[chckIndx(3, 0, parse_node_409628.children.length+0-1)-0]), NTI409647);
		if (((parse_node_409628.children != null ? parse_node_409628.children.length : 0) == 4)) {
		F.line = 642;
		break BeforeRet;
		}
		
		if (!(((parse_node_409628.children != null ? parse_node_409628.children.length : 0) == 7))) {
		F.line = 644;
		raiseException(new_syntax_error_156100(makeNimstrLit("elif not implemented"), [], parse_node_409628.children[chckIndx(4, 0, parse_node_409628.children.length+0-1)-0].tokenNode.lineNo, parse_node_409628.children[chckIndx(4, 0, parse_node_409628.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 645;
		result_420817.orelse = nimCopy(null, ast_suite_409644((Tmp1 = HEX5BHEX5D_350330(parse_node_409628.children, 1), Tmp1[0])[Tmp1[1]]), NTI409647);
	} while (false);
	framePtr = F.prev;

	return result_420817;

}

function new_ast_while_179395() {
	var result_179397 = null;

	var F={procname:"asdl.newAstWhile",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179397 = {m_type: NTI179381, test: null, body: null, orelse: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179397.kind = 10;
	framePtr = F.prev;

	return result_179397;

}

function ast_while_stmt_409629(parse_node_409631) {
	var result_421051 = null;

	var F={procname:"ast.astWhileStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409631.tokenNode.token == 133))) {
		F.line = 649;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(649, 3) `parseNode.tokenNode.token == while_stmt` "));
		}
		
		F.line = 649;
		result_421051 = new_ast_while_179395();
		F.line = 83;
		result_421051.lineno = new_int_409060(parse_node_409631.children[chckIndx(0, 0, parse_node_409631.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_421051.col_offset = new_int_409060(parse_node_409631.children[chckIndx(0, 0, parse_node_409631.children.length+0-1)-0].tokenNode.colNo);
		F.line = 651;
		result_421051.test = ast_test_409648(parse_node_409631.children[chckIndx(1, 0, parse_node_409631.children.length+0-1)-0]);
		F.line = 652;
		result_421051.body = nimCopy(null, ast_suite_409644(parse_node_409631.children[chckIndx(3, 0, parse_node_409631.children.length+0-1)-0]), NTI409647);
		if (!(((parse_node_409631.children != null ? parse_node_409631.children.length : 0) == 4))) {
		F.line = 654;
		raiseException(new_syntax_error_156100(makeNimstrLit("Else clause in while not implemented"), [], parse_node_409631.children[chckIndx(4, 0, parse_node_409631.children.length+0-1)-0].tokenNode.lineNo, parse_node_409631.children[chckIndx(4, 0, parse_node_409631.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
	framePtr = F.prev;

	return result_421051;

}

function new_ast_for_179311() {
	var result_179313 = null;

	var F={procname:"asdl.newAstFor",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179313 = {m_type: NTI179295, target: null, iter: null, body: null, orelse: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179313.kind = 8;
	framePtr = F.prev;

	return result_179313;

}

function ast_for_stmt_409632(parse_node_409634) {
	var result_421228 = null;

	var F={procname:"ast.astForStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409634.tokenNode.token == 134))) {
		F.line = 658;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(658, 3) `parseNode.tokenNode.token == for_stmt` "));
		}
		
		if (!(((parse_node_409634.children != null ? parse_node_409634.children.length : 0) == 6))) {
		F.line = 659;
		raiseException(new_syntax_error_156100(makeNimstrLit("for with else not implemented"), [], parse_node_409634.children[chckIndx(6, 0, parse_node_409634.children.length+0-1)-0].tokenNode.lineNo, parse_node_409634.children[chckIndx(6, 0, parse_node_409634.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 660;
		var for_node_421410 = new_ast_for_179311();
		F.line = 83;
		for_node_421410.lineno = new_int_409060(parse_node_409634.children[chckIndx(0, 0, parse_node_409634.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		for_node_421410.col_offset = new_int_409060(parse_node_409634.children[chckIndx(0, 0, parse_node_409634.children.length+0-1)-0].tokenNode.colNo);
		F.line = 662;
		for_node_421410.target = ast_expr_list_409710(parse_node_409634.children[chckIndx(1, 0, parse_node_409634.children.length+0-1)-0]);
		F.line = 663;
		set_store_410278(for_node_421410.target);
		F.line = 664;
		for_node_421410.iter = ast_test_list_409713(parse_node_409634.children[chckIndx(3, 0, parse_node_409634.children.length+0-1)-0]);
		F.line = 665;
		for_node_421410.body = nimCopy(null, ast_suite_409644(parse_node_409634.children[chckIndx(5, 0, parse_node_409634.children.length+0-1)-0]), NTI409647);
		F.line = 666;
		result_421228 = for_node_421410;
	framePtr = F.prev;

	return result_421228;

}

function new_ast_try_179596() {
	var result_179598 = null;

	var F={procname:"asdl.newAstTry",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179598 = {m_type: NTI179576, body: null, handlers: null, orelse: null, finalbody: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179598.kind = 15;
	framePtr = F.prev;

	return result_179598;

}

function new_ast_except_handler_182080() {
	var result_182082 = null;

	var F={procname:"asdl.newAstExceptHandler",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182082 = {m_type: NTI182068, type: null, name: null, body: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_182082.kind = 0;
	framePtr = F.prev;

	return result_182082;

}

function ast_except_clause_409638(parse_node_409640) {
	var result_421819 = null;

	var F={procname:"ast.astExceptClause",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_409640.tokenNode.token == 138))) {
		F.line = 697;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(697, 3) `parseNode.tokenNode.token == except_clause` "));
		}
		
		F.line = 697;
		result_421819 = new_ast_except_handler_182080();
		F.line = 83;
		result_421819.lineno = new_int_409060(parse_node_409640.children[chckIndx(0, 0, parse_node_409640.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_421819.col_offset = new_int_409060(parse_node_409640.children[chckIndx(0, 0, parse_node_409640.children.length+0-1)-0].tokenNode.colNo);
		F.line = 699;
		switch ((parse_node_409640.children != null ? parse_node_409640.children.length : 0)) {
		case 1:
			F.line = 701;
			break BeforeRet;
			break;
		case 2:
			F.line = 703;
			result_421819.type = ast_test_409648(parse_node_409640.children[chckIndx(1, 0, parse_node_409640.children.length+0-1)-0]);
			break;
		default: 
			F.line = 705;
			raiseException(new_syntax_error_156100(makeNimstrLit("\'except\' with name not implemented"), [], parse_node_409640.children[chckIndx(2, 0, parse_node_409640.children.length+0-1)-0].tokenNode.lineNo, parse_node_409640.children[chckIndx(2, 0, parse_node_409640.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_421819;

}

function ast_try_stmt_409635(parse_node_409637) {
	var result_421429 = null;

	var F={procname:"ast.astTryStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409637.tokenNode.token == 135))) {
		F.line = 674;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(674, 3) `parseNode.tokenNode.token == try_stmt` "));
		}
		
		F.line = 674;
		result_421429 = new_ast_try_179596();
		F.line = 83;
		result_421429.lineno = new_int_409060(parse_node_409637.children[chckIndx(0, 0, parse_node_409637.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_421429.col_offset = new_int_409060(parse_node_409637.children[chckIndx(0, 0, parse_node_409637.children.length+0-1)-0].tokenNode.colNo);
		F.line = 676;
		result_421429.body = nimCopy(null, ast_suite_409644(parse_node_409637.children[chckIndx(2, 0, parse_node_409637.children.length+0-1)-0]), NTI409647);
		L1: do {
			F.line = 677;
			var i_421621 = 0;
			F.line = 2104;
			var colontmp__421647 = 0;
			F.line = 677;
			colontmp__421647 = divInt(subInt((parse_node_409637.children != null ? parse_node_409637.children.length : 0), 1), 3);
			F.line = 2107;
			var res_421650 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_421650 <= colontmp__421647)) break L3;
						F.line = 2109;
						i_421621 = res_421650;
						F.line = 678;
						var child1_421622 = parse_node_409637.children[chckIndx(mulInt(i_421621, 3), 0, parse_node_409637.children.length+0-1)-0];
						if (!((child1_421622.tokenNode.token == 138))) {
						F.line = 680;
						raiseException(new_syntax_error_156100(makeNimstrLit("else/finally in try not implemented"), [], child1_421622.tokenNode.lineNo, child1_421622.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 681;
						var handler_421634 = ast_except_clause_409638(child1_421622);
						F.line = 682;
						var child3_421635 = parse_node_409637.children[chckIndx(addInt(mulInt(i_421621, 3), 2), 0, parse_node_409637.children.length+0-1)-0];
						F.line = 683;
						handler_421634.body = nimCopy(null, ast_suite_409644(child3_421635), NTI409647);
						F.line = 684;
						if (result_421429.handlers != null) { result_421429.handlers.push(handler_421634); } else { result_421429.handlers = [handler_421634]; };
						F.line = 2110;
						res_421650 = addInt(res_421650, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_421429;

}

function ast_with_stmt_409641(parse_node_409643) {
	var result_421670 = null;

	var F={procname:"ast.astWithStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409643.tokenNode.token == 136))) {
		F.line = 688;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(688, 3) `parseNode.tokenNode.token == with_stmt` "));
		}
		
		F.line = 688;
		raiseException(new_syntax_error_156100(makeNimstrLit("with not implemented"), [], parse_node_409643.tokenNode.lineNo, parse_node_409643.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_421670;

}

function new_ast_function_def_178993() {
	var result_178995 = null;

	var F={procname:"asdl.newAstFunctionDef",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_178995 = {m_type: NTI178975, name: null, args: null, body: null, decorator_list: null, returns: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_178995.kind = 0;
	framePtr = F.prev;

	return result_178995;

}

function new_ast_arguments_182131() {
	var result_182133 = null;

	var F={procname:"asdl.newAstArguments",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182133 = {m_type: NTI182107, args: null, vararg: null, kwonlyargs: null, kw_defaults: null, kwarg: null, defaults: null, kind: 0};
		F.line = 111;
		result_182133.kind = 0;
	framePtr = F.prev;

	return result_182133;

}

function new_ast_arg_182166() {
	var result_182168 = null;

	var F={procname:"asdl.newAstArg",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182168 = {m_type: NTI182158, arg: null, annotation: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_182168.kind = 0;
	framePtr = F.prev;

	return result_182168;

}

function ast_tfpdef_409551(parse_node_409553) {
	var result_413474 = null;

	var F={procname:"ast.astTfpdef",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409553.tokenNode.token == 101))) {
		F.line = 391;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(391, 3) `parseNode.tokenNode.token == tfpdef` "));
		}
		
		F.line = 391;
		result_413474 = new_ast_arg_182166();
		F.line = 392;
		result_413474.arg = new_identifier_409085(parse_node_409553.children[chckIndx(0, 0, parse_node_409553.children.length+0-1)-0].tokenNode.content);
		F.line = 83;
		result_413474.lineno = new_int_409060(parse_node_409553.children[chckIndx(0, 0, parse_node_409553.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_413474.col_offset = new_int_409060(parse_node_409553.children[chckIndx(0, 0, parse_node_409553.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_413474;

}

function ast_typed_args_list_409548(parse_node_409550) {
	var result_413217 = null;

	var F={procname:"ast.astTypedArgsList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409550.tokenNode.token == 100))) {
		F.line = 378;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(378, 3) `parseNode.tokenNode.token == typedargslist` "));
		}
		
		F.line = 378;
		result_413217 = new_ast_arguments_182131();
		L1: do {
			F.line = 379;
			var i_413418 = 0;
			F.line = 3616;
			var colontmp__413453 = 0;
			F.line = 379;
			colontmp__413453 = (parse_node_409550.children != null ? parse_node_409550.children.length : 0);
			F.line = 3617;
			var i_413456 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_413456 < colontmp__413453)) break L3;
						F.line = 3619;
						i_413418 = i_413456;
						F.line = 380;
						var child_413419 = parse_node_409550.children[chckIndx(i_413418, 0, parse_node_409550.children.length+0-1)-0];
						if ((modInt(i_413418, 2) == 1)) {
						if (!((child_413419.tokenNode.token == 13))) {
						F.line = 383;
						raiseException(new_syntax_error_156100(makeNimstrLit("Only support simple function arguments like foo(a,b)"), [], child_413419.tokenNode.lineNo, child_413419.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						}
						else {
							if (!((child_413419.tokenNode.token == 101))) {
							F.line = 386;
							raiseException(new_syntax_error_156100(makeNimstrLit("Only support simple function arguments like foo(a,b)"), [], child_413419.tokenNode.lineNo, child_413419.tokenNode.colNo), "SyntaxError:ObjectType");
							}
							
							F.line = 387;
							if (result_413217.args != null) { result_413217.args.push(ast_tfpdef_409551(child_413419)); } else { result_413217.args = [ast_tfpdef_409551(child_413419)]; };
						}
						
						F.line = 3620;
						i_413456 = addInt(i_413456, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_413217;

}

function ast_parameters_409545(parse_node_409547) {
	var result_412818 = null;

	var F={procname:"ast.astParameters",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409547.tokenNode.token == 99))) {
		F.line = 361;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(361, 3) `parseNode.tokenNode.token == parameters` "));
		}
		
		F.line = 361;
		switch ((parse_node_409547.children != null ? parse_node_409547.children.length : 0)) {
		case 2:
			F.line = 363;
			result_412818 = new_ast_arguments_182131();
			break;
		case 3:
			F.line = 365;
			result_412818 = ast_typed_args_list_409548(parse_node_409547.children[chckIndx(1, 0, parse_node_409547.children.length+0-1)-0]);
			break;
		default: 
			F.line = 2895;
			var e_413013 = null;
			F.line = 2896;
			e_413013 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_413013.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_413013.parent = null;
			F.line = 367;
			raiseException(e_413013, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_412818;

}

function ast_funcdef_409542(parse_node_409544) {
		var Tmp1;

	var result_412419 = null;

	var F={procname:"ast.astFuncdef",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409544.tokenNode.token == 98))) {
		F.line = 350;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(350, 3) `parseNode.tokenNode.token == funcdef` "));
		}
		
		F.line = 350;
		result_412419 = new_ast_function_def_178993();
		F.line = 83;
		result_412419.lineno = new_int_409060(parse_node_409544.children[chckIndx(0, 0, parse_node_409544.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_412419.col_offset = new_int_409060(parse_node_409544.children[chckIndx(0, 0, parse_node_409544.children.length+0-1)-0].tokenNode.colNo);
		F.line = 352;
		result_412419.name = new_identifier_409085(parse_node_409544.children[chckIndx(1, 0, parse_node_409544.children.length+0-1)-0].tokenNode.content);
		F.line = 353;
		result_412419.args = ast_parameters_409545(parse_node_409544.children[chckIndx(2, 0, parse_node_409544.children.length+0-1)-0]);
		if (!(((parse_node_409544.children != null ? parse_node_409544.children.length : 0) == 5))) {
		F.line = 355;
		raiseException(new_syntax_error_156100(makeNimstrLit("Return type annotation not implemented"), [], parse_node_409544.tokenNode.lineNo, parse_node_409544.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 356;
		result_412419.body = nimCopy(null, ast_suite_409644((Tmp1 = HEX5BHEX5D_350330(parse_node_409544.children, 1), Tmp1[0])[Tmp1[1]]), NTI409647);
		if (!(!((result_412419 == null)))) {
		F.line = 357;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(357, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_412419;

}

function new_ast_class_def_179087() {
	var result_179089 = null;

	var F={procname:"asdl.newAstClassDef",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179089 = {m_type: NTI179065, name: null, bases: null, keywords: null, body: null, decorator_list: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179089.kind = 2;
	framePtr = F.prev;

	return result_179089;

}

function ast_class_def_409719(parse_node_409721) {
		var Tmp1;

	var result_433108 = null;

	var F={procname:"ast.astClassDef",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409721.tokenNode.token == 168))) {
		F.line = 1176;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1176, 3) `parseNode.tokenNode.token == classdef` "));
		}
		
		if (!(((parse_node_409721.children != null ? parse_node_409721.children.length : 0) == 4))) {
		F.line = 1177;
		raiseException(new_syntax_error_156100(makeNimstrLit("inherit not implemented"), [], parse_node_409721.children[chckIndx(4, 0, parse_node_409721.children.length+0-1)-0].tokenNode.lineNo, parse_node_409721.children[chckIndx(4, 0, parse_node_409721.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1178;
		result_433108 = new_ast_class_def_179087();
		F.line = 83;
		result_433108.lineno = new_int_409060(parse_node_409721.children[chckIndx(0, 0, parse_node_409721.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_433108.col_offset = new_int_409060(parse_node_409721.children[chckIndx(0, 0, parse_node_409721.children.length+0-1)-0].tokenNode.colNo);
		F.line = 1180;
		result_433108.name = new_identifier_409085(parse_node_409721.children[chckIndx(1, 0, parse_node_409721.children.length+0-1)-0].tokenNode.content);
		F.line = 1181;
		result_433108.body = nimCopy(null, ast_suite_409644((Tmp1 = HEX5BHEX5D_350330(parse_node_409721.children, 1), Tmp1[0])[Tmp1[1]]), NTI409647);
	framePtr = F.prev;

	return result_433108;

}

function ast_decorator_411269(parse_node_411271) {
	var result_411272 = null;

	var F={procname:"ast.ast_decorator",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_411271.tokenNode.token == 94))) {
		F.line = 297;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(297, 3) `parseNode.tokenNode.token == decorator` "));
		}
		
		F.line = 297;
		var dotted_name_411401 = parse_node_411271.children[chckIndx(1, 0, parse_node_411271.children.length+0-1)-0];
		F.line = 298;
		switch ((dotted_name_411401.children != null ? dotted_name_411401.children.length : 0)) {
		case 1:
			F.line = 300;
			var name_411409 = dotted_name_411401.children[chckIndx(0, 0, dotted_name_411401.children.length+0-1)-0];
			F.line = 301;
			result_411272 = new_ast_name_409110(name_411409.tokenNode);
			F.line = 83;
			result_411272.lineno = new_int_409060(name_411409.tokenNode.lineNo);
			F.line = 84;
			result_411272.col_offset = new_int_409060(name_411409.tokenNode.colNo);
			break;
		default: 
			F.line = 304;
			raiseException(new_syntax_error_156100(makeNimstrLit("dotted name in decorators not implemented"), [], dotted_name_411401.tokenNode.lineNo, dotted_name_411401.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
		F.line = 306;
		switch ((parse_node_411271.children != null ? parse_node_411271.children.length : 0)) {
		case 3:
			break;
		default: 
			F.line = 310;
			var call_node_411421 = new_ast_call_180487();
			F.line = 311;
			call_node_411421.fun = result_411272;
			F.line = 83;
			call_node_411421.lineno = new_int_409060(dotted_name_411401.children[chckIndx(0, 0, dotted_name_411401.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			call_node_411421.col_offset = new_int_409060(dotted_name_411401.children[chckIndx(0, 0, dotted_name_411401.children.length+0-1)-0].tokenNode.colNo);
			F.line = 313;
			switch ((parse_node_411271.children != null ? parse_node_411271.children.length : 0)) {
			case 5:
				F.line = 315;
				result_411272 = call_node_411421;
				break;
			case 6:
				F.line = 317;
				result_411272 = ast_arglist_409722(parse_node_411271.children[chckIndx(3, 0, parse_node_411271.children.length+0-1)-0], call_node_411421);
				break;
			default: 
				F.line = 2895;
				var e_411436 = null;
				F.line = 2896;
				e_411436 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 31;
				e_411436.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_411436.parent = null;
				F.line = 319;
				raiseException(e_411436, "InternalError");
				break;
			}
			break;
		}
	framePtr = F.prev;

	return result_411272;

}

function ast_decorators_411614(parse_node_411616) {
	var result_411618 = null;

	var F={procname:"ast.ast_decorators",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_411616.tokenNode.token == 95))) {
		F.line = 323;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(323, 3) `parseNode.tokenNode.token == decorators` "));
		}
		
		L1: do {
			F.line = 323;
			var child_411809 = null;
			F.line = 3909;
			var colontmp__411821 = null;
			F.line = 323;
			colontmp__411821 = parse_node_411616.children;
			F.line = 3911;
			var i_411824 = 0;
			F.line = 3912;
			var l_411826 = (colontmp__411821 != null ? colontmp__411821.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_411824 < l_411826)) break L3;
						F.line = 3914;
						child_411809 = colontmp__411821[chckIndx(i_411824, 0, colontmp__411821.length+0-1)-0];
						F.line = 324;
						if (result_411618 != null) { result_411618.push(ast_decorator_411269(child_411809)); } else { result_411618 = [ast_decorator_411269(child_411809)]; };
						F.line = 3915;
						i_411824 = addInt(i_411824, 1);
						if (!(((colontmp__411821 != null ? colontmp__411821.length : 0) == l_411826))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_411618;

}

function ast_decorated_409539(parse_node_409541) {
	var result_411843 = null;

	var F={procname:"ast.astDecorated",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_409541.tokenNode.token == 96))) {
		F.line = 328;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(328, 3) `parseNode.tokenNode.token == decorated` "));
		}
		
		F.line = 328;
		var decorators_412001 = ast_decorators_411614(parse_node_409541.children[chckIndx(0, 0, parse_node_409541.children.length+0-1)-0]);
		F.line = 329;
		var child2_412002 = parse_node_409541.children[chckIndx(1, 0, parse_node_409541.children.length+0-1)-0];
		F.line = 330;
		switch (child2_412002.tokenNode.token) {
		case 168:
			F.line = 332;
			var class_def_412004 = ast_class_def_409719(child2_412002);
			F.line = 333;
			class_def_412004.decorator_list = nimCopy(null, decorators_412001, NTI411617);
			F.line = 334;
			result_411843 = class_def_412004;
			break BeforeRet;
			break;
		case 98:
			F.line = 336;
			var func_def_412006 = ast_funcdef_409542(child2_412002);
			F.line = 337;
			func_def_412006.decorator_list = nimCopy(null, decorators_412001, NTI411617);
			F.line = 338;
			result_411843 = func_def_412006;
			break BeforeRet;
			break;
		case 97:
			F.line = 340;
			raiseException(new_syntax_error_156100(makeNimstrLit("async function not implemented"), [], child2_412002.tokenNode.lineNo, child2_412002.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		default: 
			F.line = 2895;
			var e_412015 = null;
			F.line = 2896;
			e_412015 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_412015.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_412015.parent = null;
			F.line = 342;
			raiseException(e_412015, "InternalError");
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_411843;

}

function ast_async_stmt_409623(parse_node_409625) {
	var result_420617 = null;

	var F={procname:"ast.astAsyncStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409625.tokenNode.token == 131))) {
		F.line = 633;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(633, 3) `parseNode.tokenNode.token == async_stmt` "));
		}
		
	framePtr = F.prev;

	return result_420617;

}

function ast_compound_stmt_409620(parse_node_409622) {
	var result_420026 = null;

	var F={procname:"ast.astCompoundStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409622.tokenNode.token == 130))) {
		F.line = 618;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(618, 3) `parseNode.tokenNode.token == compound_stmt` "));
		}
		
		F.line = 618;
		var child_420201 = parse_node_409622.children[chckIndx(0, 0, parse_node_409622.children.length+0-1)-0];
		F.line = 619;
		switch (child_420201.tokenNode.token) {
		case 132:
			F.line = 620;
			result_420026 = ast_if_stmt_409626(child_420201);
			break;
		case 133:
			F.line = 621;
			result_420026 = ast_while_stmt_409629(child_420201);
			break;
		case 134:
			F.line = 622;
			result_420026 = ast_for_stmt_409632(child_420201);
			break;
		case 135:
			F.line = 623;
			result_420026 = ast_try_stmt_409635(child_420201);
			break;
		case 136:
			F.line = 624;
			result_420026 = ast_with_stmt_409641(child_420201);
			break;
		case 98:
			F.line = 625;
			result_420026 = ast_funcdef_409542(child_420201);
			break;
		case 168:
			F.line = 626;
			result_420026 = ast_class_def_409719(child_420201);
			break;
		case 96:
			F.line = 627;
			result_420026 = ast_decorated_409539(child_420201);
			break;
		case 131:
			F.line = 628;
			result_420026 = ast_async_stmt_409623(child_420201);
			break;
		default: 
			if (true) {
			F.line = 628;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(628, 5) `false` "));
			}
			
			break;
		}
		if (!(!((result_420026 == null)))) {
		F.line = 630;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(630, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_420026;

}

function ast_stmt_409554(parse_node_409556) {
	var result_413621 = null;

	var F={procname:"ast.astStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_409556.tokenNode.token == 104))) {
		F.line = 407;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(407, 3) `parseNode.tokenNode.token == stmt` "));
		}
		
		F.line = 407;
		var child_413801 = parse_node_409556.children[chckIndx(0, 0, parse_node_409556.children.length+0-1)-0];
		F.line = 408;
		switch (child_413801.tokenNode.token) {
		case 105:
			F.line = 410;
			result_413621 = nimCopy(null, ast_simple_stmt_409558(child_413801), NTI409561);
			break;
		case 130:
			F.line = 412;
			if (result_413621 != null) { result_413621.push(ast_compound_stmt_409620(child_413801)); } else { result_413621 = [ast_compound_stmt_409620(child_413801)]; };
			break;
		default: 
			F.line = 2895;
			var e_413819 = null;
			F.line = 2896;
			e_413819 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_413819.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_413819.parent = null;
			F.line = 414;
			raiseException(e_413819, "InternalError");
			break;
		}
		if (!((0 < (result_413621 != null ? result_413621.length : 0)))) {
		F.line = 415;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(415, 10) `0 < len(result)` "));
		}
		
		L1: do {
			F.line = 416;
			var child_414209 = null;
			F.line = 3911;
			var i_414404 = 0;
			F.line = 3912;
			var l_414406 = (result_413621 != null ? result_413621.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_414404 < l_414406)) break L3;
						F.line = 3914;
						child_414209 = result_413621[chckIndx(i_414404, 0, result_413621.length+0-1)-0];
						if (!(!((child_414209 == null)))) {
						F.line = 417;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(417, 12) `\x0Anot (child == nil)` "));
						}
						
						F.line = 3915;
						i_414404 = addInt(i_414404, 1);
						if (!(((result_413621 != null ? result_413621.length : 0) == l_414406))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_413621;

}

function ast_file_input_411014(parse_node_411016) {
	var result_411017 = null;

	var F={procname:"ast.ast_file_input",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_411016.tokenNode.token == 92))) {
		F.line = 284;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(284, 3) `parseNode.tokenNode.token == file_input` "));
		}
		
		F.line = 284;
		result_411017 = new_ast_module_178845();
		L1: do {
			F.line = 285;
			var child_411209 = null;
			F.line = 3909;
			var colontmp__411250 = null;
			F.line = 285;
			colontmp__411250 = parse_node_411016.children;
			F.line = 3911;
			var i_411253 = 0;
			F.line = 3912;
			var l_411255 = (colontmp__411250 != null ? colontmp__411250.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_411253 < l_411255)) break L3;
						F.line = 3914;
						child_411209 = colontmp__411250[chckIndx(i_411253, 0, colontmp__411250.length+0-1)-0];
						if ((child_411209.tokenNode.token == 104)) {
						L4: do {
							F.line = 23;
							var item_411231 = null;
							F.line = 3909;
							var colontmp__411244 = null;
							F.line = 287;
							colontmp__411244 = ast_stmt_409554(child_411209);
							F.line = 3911;
							var i_411247 = 0;
							F.line = 3912;
							var l_411249 = (colontmp__411244 != null ? colontmp__411244.length : 0);
							L5: do {
								F.line = 3913;
									L6: while (true) {
									if (!(i_411247 < l_411249)) break L6;
										F.line = 3914;
										item_411231 = colontmp__411244[chckIndx(i_411247, 0, colontmp__411244.length+0-1)-0];
										F.line = 24;
										if (result_411017.body != null) { result_411017.body.push(item_411231); } else { result_411017.body = [item_411231]; };
										F.line = 3915;
										i_411247 = addInt(i_411247, 1);
										if (!(((colontmp__411244 != null ? colontmp__411244.length : 0) == l_411249))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						}
						
						F.line = 3915;
						i_411253 = addInt(i_411253, 1);
						if (!(((colontmp__411250 != null ? colontmp__411250.length : 0) == l_411255))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_411017;

}

function new_ast_interactive_178880() {
	var result_178882 = null;

	var F={procname:"asdl.newAstInteractive",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_178882 = {m_type: NTI178872, body: null, kind: 0};
		F.line = 111;
		result_178882.kind = 1;
	framePtr = F.prev;

	return result_178882;

}

function ast_single_input_410495(parse_node_410497) {
	var result_410498 = null;

	var F={procname:"ast.ast_single_input",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_410497.tokenNode.token == 91))) {
		F.line = 266;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(266, 3) `parseNode.tokenNode.token == single_input` "));
		}
		
		F.line = 266;
		result_410498 = new_ast_interactive_178880();
		F.line = 267;
		var child_410601 = parse_node_410497.children[chckIndx(0, 0, parse_node_410497.children.length+0-1)-0];
		F.line = 268;
		switch ((parse_node_410497.children != null ? parse_node_410497.children.length : 0)) {
		case 1:
			F.line = 270;
			switch (child_410601.tokenNode.token) {
			case 5:
				break;
			case 105:
				F.line = 274;
				result_410498.body = nimCopy(null, ast_simple_stmt_409558(child_410601), NTI409561);
				break;
			default: 
				F.line = 2895;
				var e_410616 = null;
				F.line = 2896;
				e_410616 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 31;
				e_410616.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_410616.parent = null;
				F.line = 276;
				raiseException(e_410616, "InternalError");
				break;
			}
			break;
		case 2:
			F.line = 278;
			if (result_410498.body != null) { result_410498.body.push(ast_compound_stmt_409620(child_410601)); } else { result_410498.body = [ast_compound_stmt_409620(child_410601)]; };
			break;
		default: 
			F.line = 2895;
			var e_410816 = null;
			F.line = 2896;
			e_410816 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_410816.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_410816.parent = null;
			F.line = 280;
			raiseException(e_410816, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_410498;

}

function ast_434236(root_434238) {
	var result_434239 = null;

	var F={procname:"ast.ast",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1237;
		switch (root_434238.tokenNode.token) {
		case 92:
			F.line = 1239;
			result_434239 = ast_file_input_411014(root_434238);
			break;
		case 91:
			F.line = 1241;
			result_434239 = ast_single_input_410495(root_434238);
			break;
		case 93:
			F.line = 2895;
			var e_434248 = null;
			F.line = 2896;
			e_434248 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_434248.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_434248.parent = null;
			F.line = 1243;
			raiseException(e_434248, "InternalError");
			break;
		default: 
			F.line = 2895;
			var e_434406 = null;
			F.line = 2896;
			e_434406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_434406.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_434406.parent = null;
			F.line = 1245;
			raiseException(e_434406, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_434239;

}

function new_504654() {
	var result_504659 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_504801 = null;
		F.line = 211;
		r_504801 = {units: null, st: null, interactive: false, fileName: null};
		F.line = 212;
		result_504659 = r_504801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_504659;

}

function init_table_466558(initial_size_466563) {
	var result_466565 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_466563))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_466565.counter = 0;
		F.line = 354;
		result_466565.data = new Array(chckRange(initial_size_466563, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_466563, 0, 2147483647);++i) {result_466565.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_466565;

}

function pop_451422(s_451428, s_451428_Idx) {
	var result_451429 = {Field0: null, Field1: null};

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_451437 = subInt((s_451428[s_451428_Idx] != null ? s_451428[s_451428_Idx].length : 0), 1);
		F.line = 2525;
		nimCopy(result_451429, s_451428[s_451428_Idx][chckIndx(l_451437, 0, s_451428[s_451428_Idx].length+0-1)-0], NTI451401);
		F.line = 2526;
		if (s_451428[s_451428_Idx].length < chckRange(l_451437, 0, 2147483647)) { for (var i=s_451428[s_451428_Idx].length;i<chckRange(l_451437, 0, 2147483647);++i) s_451428[s_451428_Idx].push({Field0: null, Field1: null}); }
               else { s_451428[s_451428_Idx].length = chckRange(l_451437, 0, 2147483647); };
	framePtr = F.prev;

	return result_451429;

}

function new_435371() {
	var result_435376 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_435401 = null;
		F.line = 211;
		r_435401 = {parent: null, children: null, argVars: {data: null, counter: 0}, declaredVars: {data: null, counter: 0}, usedVars: {data: null, counter: 0}, scopes: {data: null, counter: 0}, names: {data: null, counter: 0}, localVars: {data: null, counter: 0}, cellVars: {data: null, counter: 0}, freeVars: {data: null, counter: 0}};
		F.line = 212;
		result_435376 = r_435401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_435376;

}

function init_table_435443(initial_size_435448) {
	var result_435450 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_435448))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_435450.counter = 0;
		F.line = 354;
		result_435450.data = new Array(chckRange(initial_size_435448, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_435448, 0, 2147483647);++i) {result_435450.data[i]={Field0: 0, Field1: null, Field2: 0};}	framePtr = F.prev;

	return result_435450;

}

function init_435652(s_435658, initial_size_435660) {
	var F={procname:"init.init",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_435660))) {
		F.line = 400;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(400, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 401;
		s_435658.counter = 0;
		F.line = 402;
		s_435658.data = new Array(chckRange(initial_size_435660, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_435660, 0, 2147483647);++i) {s_435658.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_435626(initial_size_435630) {
	var result_435632 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 414;
		init_435652(result_435632[0], initial_size_435630);
	framePtr = F.prev;

	return result_435632[0];

}

function init_table_435849(initial_size_435854) {
	var result_435856 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_435854))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_435856.counter = 0;
		F.line = 354;
		result_435856.data = new Array(chckRange(initial_size_435854, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_435854, 0, 2147483647);++i) {result_435856.data[i]={Field0: 0, Field1: null, Field2: 0};}	framePtr = F.prev;

	return result_435856;

}

function new_sym_table_entry_435365(parent_435367) {
	var result_435368 = null;

	var F={procname:"symtable.newSymTableEntry",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 55;
		result_435368 = new_435371();
		F.line = 56;
		result_435368.parent = parent_435367;
		if (!((parent_435367 === null))) {
		F.line = 58;
		if (parent_435367.children != null) { parent_435367.children.push(result_435368); } else { parent_435367.children = [result_435368]; };
		}
		
		F.line = 59;
		nimCopy(result_435368.argVars, init_table_435443(64), NTI435186);
		F.line = 60;
		nimCopy(result_435368.declaredVars, init_set_435626(64), NTI435211);
		F.line = 61;
		nimCopy(result_435368.usedVars, init_set_435626(64), NTI435211);
		F.line = 62;
		nimCopy(result_435368.scopes, init_table_435849(64), NTI435242);
		F.line = 63;
		nimCopy(result_435368.names, init_table_435443(64), NTI435186);
		F.line = 64;
		nimCopy(result_435368.localVars, init_table_435443(64), NTI435186);
		F.line = 65;
		nimCopy(result_435368.cellVars, init_table_435443(64), NTI435186);
		F.line = 66;
		nimCopy(result_435368.freeVars, init_table_435443(64), NTI435186);
	framePtr = F.prev;

	return result_435368;

}

function raw_get_436330(t_436335, key_436337, hc_436339, hc_436339_Idx) {
						var Tmp3;

	var result_436340 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_436339[hc_436339_Idx] = hash_177049(key_436337);
		if ((hc_436339[hc_436339_Idx] == 0)) {
		F.line = 45;
		hc_436339[hc_436339_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_436350 = (hc_436339[hc_436339_Idx] & (t_436335.data != null ? (t_436335.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_436335.data[chckIndx(h_436350, 0, t_436335.data.length+0-1)-0].Field0)) break L2;
						if (!(t_436335.data[chckIndx(h_436350, 0, t_436335.data.length+0-1)-0].Field0 == hc_436339[hc_436339_Idx])) Tmp3 = false; else {							Tmp3 = (t_436335.data[chckIndx(h_436350, 0, t_436335.data.length+0-1)-0].Field1 == key_436337);						}					if (Tmp3) {
					F.line = 38;
					result_436340 = h_436350;
					break BeforeRet;
					}
					
					F.line = 39;
					h_436350 = next_try_146614(h_436350, (t_436335.data != null ? (t_436335.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_436340 = subInt(-1, h_436350);
	} while (false);
	framePtr = F.prev;

	return result_436340;

}

function raw_insert_453354(t_453361, data_453365, data_453365_Idx, key_453367, val_453369, hc_453371, h_453373) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_453365[data_453365_Idx][chckIndx(h_453373, 0, data_453365[data_453365_Idx].length+0-1)-0].Field1 = key_453367;
		F.line = 65;
		data_453365[data_453365_Idx][chckIndx(h_453373, 0, data_453365[data_453365_Idx].length+0-1)-0].Field2 = val_453369;
		F.line = 66;
		data_453365[data_453365_Idx][chckIndx(h_453373, 0, data_453365[data_453365_Idx].length+0-1)-0].Field0 = hc_453371;
	framePtr = F.prev;

	
}

function enlarge_452110(t_452117) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_452125 = null;
		F.line = 314;
		n_452125 = new Array(chckRange(mulInt((t_452117.data != null ? t_452117.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_452117.data != null ? t_452117.data.length : 0), 2), 0, 2147483647);++i) {n_452125[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_452117.data; t_452117.data = n_452125; n_452125 = Tmp1;		L2: do {
			F.line = 316;
			var i_452380 = 0;
			F.line = 2088;
			var colontmp__454095 = 0;
			F.line = 316;
			colontmp__454095 = (n_452125 != null ? (n_452125.length-1) : -1);
			F.line = 2094;
			var res_454098 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_454098 <= colontmp__454095)) break L4;
						F.line = 2096;
						i_452380 = res_454098;
						F.line = 317;
						var eh_452616 = n_452125[chckIndx(i_452380, 0, n_452125.length+0-1)-0].Field0;
						if (is_filled_146491(eh_452616)) {
						F.line = 319;
						var j_452625 = (eh_452616 & (t_452117.data != null ? (t_452117.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_452117.data[chckIndx(j_452625, 0, t_452117.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_452625 = next_try_146614(j_452625, (t_452117.data != null ? (t_452117.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_453354(t_452117, t_452117, "data", n_452125[chckIndx(i_452380, 0, n_452125.length+0-1)-0].Field1, n_452125[chckIndx(i_452380, 0, n_452125.length+0-1)-0].Field2, eh_452616, j_452625);
						}
						
						F.line = 2097;
						res_454098 = addInt(res_454098, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_454116(t_454121, key_454123, hc_454125) {
	var result_454126 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_454135 = (hc_454125 & (t_454121.data != null ? (t_454121.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_454121.data[chckIndx(h_454135, 0, t_454121.data.length+0-1)-0].Field0)) break L2;
					if (((t_454121.data[chckIndx(h_454135, 0, t_454121.data.length+0-1)-0].Field0 == hc_454125) && (t_454121.data[chckIndx(h_454135, 0, t_454121.data.length+0-1)-0].Field1 == key_454123))) {
					F.line = 38;
					result_454126 = h_454135;
					break BeforeRet;
					}
					
					F.line = 39;
					h_454135 = next_try_146614(h_454135, (t_454121.data != null ? (t_454121.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_454126 = subInt(-1, h_454135);
	} while (false);
	framePtr = F.prev;

	return result_454126;

}

function HEX5BHEX5DHEX3D_451611(t_451618, key_451620, val_451622) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_451623 = [0];
		F.line = 98;
		var index_451636 = raw_get_436330(t_451618, key_451620, hc_451623, 0);
		if ((0 <= index_451636)) {
		F.line = 99;
		t_451618.data[chckIndx(index_451636, 0, t_451618.data.length+0-1)-0].Field2 = val_451622;
		}
		else {
			if (must_rehash_146509((t_451618.data != null ? t_451618.data.length : 0), t_451618.counter)) {
			F.line = 90;
			enlarge_452110(t_451618);
			F.line = 91;
			index_451636 = raw_get_known_hc_454116(t_451618, key_451620, hc_451623[0]);
			}
			
			F.line = 92;
			index_451636 = subInt(-1, index_451636);
			F.line = 93;
			raw_insert_453354(t_451618, t_451618, "data", key_451620, val_451622, hc_451623[0], index_451636);
			F.line = 100;
			t_451618.counter = addInt(t_451618.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function is_valid_437696(s_437701) {
	var result_437702 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_437702 = (0 < (s_437701.data != null ? s_437701.data.length : 0));
	framePtr = F.prev;

	return result_437702;

}

function HEX3DHEX3D_406059(self_406061, other_406062) {
	var result_406063 = false;

	var F={procname:"stringobjectImpl.==",prev:framePtr,filename:"../Objects/stringobjectImpl.nim",line:0};
	framePtr = F;
		F.line = 14;
		result_406063 = eqStrings(self_406061.str, other_406062.str);
	framePtr = F.prev;

	return result_406063;

}

function raw_get_438021(s_438026, key_438028, hc_438030, hc_438030_Idx) {
						var Tmp3;

	var result_438031 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_438035 = hash_406040(key_438028);
		if ((hc_438035 == 0)) {
		F.line = 164;
		hc_438035 = 314159265;
		}
		
		hc_438030[hc_438030_Idx] = hc_438035;
		F.line = 150;
		var h_438045 = (hc_438030[hc_438030_Idx] & (s_438026.data != null ? (s_438026.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_438026.data[chckIndx(h_438045, 0, s_438026.data.length+0-1)-0].Field0)) break L2;
						if (!(s_438026.data[chckIndx(h_438045, 0, s_438026.data.length+0-1)-0].Field0 == hc_438030[hc_438030_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_406059(s_438026.data[chckIndx(h_438045, 0, s_438026.data.length+0-1)-0].Field1, key_438028);						}					if (Tmp3) {
					F.line = 157;
					result_438031 = h_438045;
					break BeforeRet;
					}
					
					F.line = 158;
					h_438045 = next_try_154431(h_438045, (s_438026.data != null ? (s_438026.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_438031 = subInt(-1, h_438045);
	} while (false);
	framePtr = F.prev;

	return result_438031;

}

function raw_get_known_hc_441659(s_441664, key_441666, hc_441668) {
	var result_441669 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_441678 = (hc_441668 & (s_441664.data != null ? (s_441664.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_441664.data[chckIndx(h_441678, 0, s_441664.data.length+0-1)-0].Field0)) break L2;
					if (((s_441664.data[chckIndx(h_441678, 0, s_441664.data.length+0-1)-0].Field0 == hc_441668) && HEX3DHEX3D_406059(s_441664.data[chckIndx(h_441678, 0, s_441664.data.length+0-1)-0].Field1, key_441666))) {
					F.line = 157;
					result_441669 = h_441678;
					break BeforeRet;
					}
					
					F.line = 158;
					h_441678 = next_try_154431(h_441678, (s_441664.data != null ? (s_441664.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_441669 = subInt(-1, h_441678);
	} while (false);
	framePtr = F.prev;

	return result_441669;

}

function raw_insert_442898(s_442904, data_442908, data_442908_Idx, key_442910, hc_442912, h_442914) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 172;
		data_442908[data_442908_Idx][chckIndx(h_442914, 0, data_442908[data_442908_Idx].length+0-1)-0].Field1 = key_442910;
		F.line = 173;
		data_442908[data_442908_Idx][chckIndx(h_442914, 0, data_442908[data_442908_Idx].length+0-1)-0].Field0 = hc_442912;
	framePtr = F.prev;

	
}

function enlarge_440667(s_440673) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 225;
		var n_440678 = null;
		F.line = 226;
		n_440678 = new Array(chckRange(mulInt((s_440673.data != null ? s_440673.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_440673.data != null ? s_440673.data.length : 0), 2), 0, 2147483647);++i) {n_440678[i]={Field0: 0, Field1: null};}		F.line = 227;
		var Tmp1 = s_440673.data; s_440673.data = n_440678; n_440678 = Tmp1;		L2: do {
			F.line = 228;
			var i_440933 = 0;
			F.line = 2088;
			var colontmp__443400 = 0;
			F.line = 228;
			colontmp__443400 = (n_440678 != null ? (n_440678.length-1) : -1);
			F.line = 2094;
			var res_443403 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_443403 <= colontmp__443400)) break L4;
						F.line = 2096;
						i_440933 = res_443403;
						if (is_filled_154282(n_440678[chckIndx(i_440933, 0, n_440678.length+0-1)-0].Field0)) {
						F.line = 230;
						var j_442407 = subInt(-1, raw_get_known_hc_441659(s_440673, n_440678[chckIndx(i_440933, 0, n_440678.length+0-1)-0].Field1, n_440678[chckIndx(i_440933, 0, n_440678.length+0-1)-0].Field0));
						F.line = 231;
						raw_insert_442898(s_440673, s_440673, "data", n_440678[chckIndx(i_440933, 0, n_440678.length+0-1)-0].Field1, n_440678[chckIndx(i_440933, 0, n_440678.length+0-1)-0].Field0, j_442407);
						}
						
						F.line = 2097;
						res_443403 = addInt(res_443403, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_440325(s_440331, key_440333) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_437696(s_440331))) {
		F.line = 265;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(265, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 234;
		var hc_440401 = [0];
		F.line = 235;
		var index_440432 = raw_get_438021(s_440331, key_440333, hc_440401, 0);
		if ((index_440432 < 0)) {
		if (must_rehash_154361((s_440331.data != null ? s_440331.data.length : 0), s_440331.counter)) {
		F.line = 238;
		enlarge_440667(s_440331);
		F.line = 239;
		index_440432 = raw_get_known_hc_441659(s_440331, key_440333, hc_440401[0]);
		}
		
		F.line = 240;
		raw_insert_442898(s_440331, s_440331, "data", key_440333, hc_440401[0], subInt(-1, index_440432));
		F.line = 241;
		s_440331.counter = addInt(s_440331.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function add_declaration_440242(ste_440244, name_440245) {
	var F={procname:"symtable.addDeclaration",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 83;
		incl_440325(ste_440244.declaredVars, name_440245);
	framePtr = F.prev;

	
}

function add_declaration_443524(ste_443526, name_443527) {
	var F={procname:"symtable.addDeclaration",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 86;
		var name_str_443528 = name_443527.value;
		F.line = 87;
		add_declaration_440242(ste_443526, name_str_443528);
	framePtr = F.prev;

	
}

function raw_get_443918(t_443923, key_443925, hc_443927, hc_443927_Idx) {
						var Tmp3;

	var result_443928 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_443927[hc_443927_Idx] = hash_406040(key_443925);
		if ((hc_443927[hc_443927_Idx] == 0)) {
		F.line = 45;
		hc_443927[hc_443927_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_443938 = (hc_443927[hc_443927_Idx] & (t_443923.data != null ? (t_443923.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_443923.data[chckIndx(h_443938, 0, t_443923.data.length+0-1)-0].Field0)) break L2;
						if (!(t_443923.data[chckIndx(h_443938, 0, t_443923.data.length+0-1)-0].Field0 == hc_443927[hc_443927_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_406059(t_443923.data[chckIndx(h_443938, 0, t_443923.data.length+0-1)-0].Field1, key_443925);						}					if (Tmp3) {
					F.line = 38;
					result_443928 = h_443938;
					break BeforeRet;
					}
					
					F.line = 39;
					h_443938 = next_try_146614(h_443938, (t_443923.data != null ? (t_443923.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_443928 = subInt(-1, h_443938);
	} while (false);
	framePtr = F.prev;

	return result_443928;

}

function raw_insert_447593(t_447600, data_447604, data_447604_Idx, key_447606, val_447608, hc_447610, h_447612) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_447604[data_447604_Idx][chckIndx(h_447612, 0, data_447604[data_447604_Idx].length+0-1)-0].Field1 = key_447606;
		F.line = 65;
		data_447604[data_447604_Idx][chckIndx(h_447612, 0, data_447604[data_447604_Idx].length+0-1)-0].Field2 = val_447608;
		F.line = 66;
		data_447604[data_447604_Idx][chckIndx(h_447612, 0, data_447604[data_447604_Idx].length+0-1)-0].Field0 = hc_447610;
	framePtr = F.prev;

	
}

function enlarge_446349(t_446356) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_446364 = null;
		F.line = 314;
		n_446364 = new Array(chckRange(mulInt((t_446356.data != null ? t_446356.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_446356.data != null ? t_446356.data.length : 0), 2), 0, 2147483647);++i) {n_446364[i]={Field0: 0, Field1: null, Field2: 0};}		F.line = 315;
		var Tmp1 = t_446356.data; t_446356.data = n_446364; n_446364 = Tmp1;		L2: do {
			F.line = 316;
			var i_446619 = 0;
			F.line = 2088;
			var colontmp__448334 = 0;
			F.line = 316;
			colontmp__448334 = (n_446364 != null ? (n_446364.length-1) : -1);
			F.line = 2094;
			var res_448337 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_448337 <= colontmp__448334)) break L4;
						F.line = 2096;
						i_446619 = res_448337;
						F.line = 317;
						var eh_446855 = n_446364[chckIndx(i_446619, 0, n_446364.length+0-1)-0].Field0;
						if (is_filled_146491(eh_446855)) {
						F.line = 319;
						var j_446864 = (eh_446855 & (t_446356.data != null ? (t_446356.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_446356.data[chckIndx(j_446864, 0, t_446356.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_446864 = next_try_146614(j_446864, (t_446356.data != null ? (t_446356.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_447593(t_446356, t_446356, "data", n_446364[chckIndx(i_446619, 0, n_446364.length+0-1)-0].Field1, n_446364[chckIndx(i_446619, 0, n_446364.length+0-1)-0].Field2, eh_446855, j_446864);
						}
						
						F.line = 2097;
						res_448337 = addInt(res_448337, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_448355(t_448360, key_448362, hc_448364) {
	var result_448365 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_448374 = (hc_448364 & (t_448360.data != null ? (t_448360.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_448360.data[chckIndx(h_448374, 0, t_448360.data.length+0-1)-0].Field0)) break L2;
					if (((t_448360.data[chckIndx(h_448374, 0, t_448360.data.length+0-1)-0].Field0 == hc_448364) && HEX3DHEX3D_406059(t_448360.data[chckIndx(h_448374, 0, t_448360.data.length+0-1)-0].Field1, key_448362))) {
					F.line = 38;
					result_448365 = h_448374;
					break BeforeRet;
					}
					
					F.line = 39;
					h_448374 = next_try_146614(h_448374, (t_448360.data != null ? (t_448360.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_448365 = subInt(-1, h_448374);
	} while (false);
	framePtr = F.prev;

	return result_448365;

}

function HEX5BHEX5DHEX3D_445850(t_445857, key_445859, val_445861) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_445862 = [0];
		F.line = 98;
		var index_445875 = raw_get_443918(t_445857, key_445859, hc_445862, 0);
		if ((0 <= index_445875)) {
		F.line = 99;
		t_445857.data[chckIndx(index_445875, 0, t_445857.data.length+0-1)-0].Field2 = val_445861;
		}
		else {
			if (must_rehash_146509((t_445857.data != null ? t_445857.data.length : 0), t_445857.counter)) {
			F.line = 90;
			enlarge_446349(t_445857);
			F.line = 91;
			index_445875 = raw_get_known_hc_448355(t_445857, key_445859, hc_445862[0]);
			}
			
			F.line = 92;
			index_445875 = subInt(-1, index_445875);
			F.line = 93;
			raw_insert_447593(t_445857, t_445857, "data", key_445859, val_445861, hc_445862[0], index_445875);
			F.line = 100;
			t_445857.counter = addInt(t_445857.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function pop_455809(s_455815, s_455815_Idx) {
	var result_455816 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_455824 = subInt((s_455815[s_455815_Idx] != null ? s_455815[s_455815_Idx].length : 0), 1);
		F.line = 2525;
		result_455816 = s_455815[s_455815_Idx][chckIndx(l_455824, 0, s_455815[s_455815_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_455815[s_455815_Idx].length < chckRange(l_455824, 0, 2147483647)) { for (var i=s_455815[s_455815_Idx].length;i<chckRange(l_455824, 0, 2147483647);++i) s_455815[s_455815_Idx].push(null); }
               else { s_455815[s_455815_Idx].length = chckRange(l_455824, 0, 2147483647); };
	framePtr = F.prev;

	return result_455816;

}

function add_used_443542(ste_443544, name_443545) {
	var F={procname:"symtable.addUsed",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 90;
		incl_440325(ste_443544.usedVars, name_443545);
	framePtr = F.prev;

	
}

function add_used_443648(ste_443650, name_443651) {
	var F={procname:"symtable.addUsed",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 93;
		var name_str_443652 = name_443651.value;
		F.line = 94;
		add_used_443542(ste_443650, name_str_443652);
	framePtr = F.prev;

	
}

function collect_declaration_451396(st_451398, ast_root_451399) {
	var F={procname:"symtable.collectDeclaration",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 148;
		var to_visit_451402 = [null];
		F.line = 149;
		if (to_visit_451402[0] != null) { to_visit_451402[0].push({Field0: ast_root_451399, Field1: null}); } else { to_visit_451402[0] = [{Field0: ast_root_451399, Field1: null}]; };
		L1: do {
			F.line = 150;
				L2: while (true) {
				if (!!(((to_visit_451402[0] != null ? to_visit_451402[0].length : 0) == 0))) break L2;
					F.line = 151;
					var colontmp__670614 = {Field0: null, Field1: null};
					F.line = 151;
					var ast_node_451462 = null;
					F.line = 151;
					var parent_ste_451463 = null;
					F.line = 151;
					nimCopy(colontmp__670614, pop_451422(to_visit_451402, 0), NTI451401);
					F.line = 151;
					ast_node_451462 = colontmp__670614["Field0"];
					F.line = 151;
					parent_ste_451463 = colontmp__670614["Field1"];
					F.line = 152;
					var ste_451464 = new_sym_table_entry_435365(parent_ste_451463);
					F.line = 153;
					HEX5BHEX5DHEX3D_451611(st_451398.entries, ast_node_451462, ste_451464);
					F.line = 154;
					var to_visit_per_ste_454935 = [null];
					if (isObj(ast_node_451462.m_type, NTI178837)) {
					L3: do {
						F.line = 163;
						var node_454980 = null;
						F.line = 3909;
						var colontmp__459404 = null;
						F.line = 163;
						colontmp__459404 = ast_node_451462.body;
						F.line = 3911;
						var i_459407 = 0;
						F.line = 3912;
						var l_459409 = (colontmp__459404 != null ? colontmp__459404.length : 0);
						L4: do {
							F.line = 3913;
								L5: while (true) {
								if (!(i_459407 < l_459409)) break L5;
									F.line = 3914;
									node_454980 = colontmp__459404[chckIndx(i_459407, 0, colontmp__459404.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(node_454980); } else { to_visit_per_ste_454935[0] = [node_454980]; };
									F.line = 3915;
									i_459407 = addInt(i_459407, 1);
									if (!(((colontmp__459404 != null ? colontmp__459404.length : 0) == l_459409))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_451462.m_type, NTI178872)) {
					L6: do {
						F.line = 163;
						var node_455013 = null;
						F.line = 3909;
						var colontmp__459412 = null;
						F.line = 163;
						colontmp__459412 = ast_node_451462.body;
						F.line = 3911;
						var i_459415 = 0;
						F.line = 3912;
						var l_459417 = (colontmp__459412 != null ? colontmp__459412.length : 0);
						L7: do {
							F.line = 3913;
								L8: while (true) {
								if (!(i_459415 < l_459417)) break L8;
									F.line = 3914;
									node_455013 = colontmp__459412[chckIndx(i_459415, 0, colontmp__459412.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(node_455013); } else { to_visit_per_ste_454935[0] = [node_455013]; };
									F.line = 3915;
									i_459415 = addInt(i_459415, 1);
									if (!(((colontmp__459412 != null ? colontmp__459412.length : 0) == l_459417))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_451462.m_type, NTI178975)) {
					L9: do {
						F.line = 163;
						var node_455046 = null;
						F.line = 3909;
						var colontmp__459420 = null;
						F.line = 163;
						colontmp__459420 = ast_node_451462.body;
						F.line = 3911;
						var i_459423 = 0;
						F.line = 3912;
						var l_459425 = (colontmp__459420 != null ? colontmp__459420.length : 0);
						L10: do {
							F.line = 3913;
								L11: while (true) {
								if (!(i_459423 < l_459425)) break L11;
									F.line = 3914;
									node_455046 = colontmp__459420[chckIndx(i_459423, 0, colontmp__459420.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(node_455046); } else { to_visit_per_ste_454935[0] = [node_455046]; };
									F.line = 3915;
									i_459423 = addInt(i_459423, 1);
									if (!(((colontmp__459420 != null ? colontmp__459420.length : 0) == l_459425))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 173;
					var f_455057 = ast_node_451462;
					F.line = 174;
					var args_455058 = nimCopy(null, f_455057.args.args, NTI182108);
					L12: do {
						F.line = 175;
						var idx_455105 = 0;
						F.line = 175;
						var arg_455106 = null;
						F.line = 2354;
						var i_459430 = 0;
						L13: do {
							F.line = 2355;
								L14: while (true) {
								if (!(i_459430 < (args_455058 != null ? args_455058.length : 0))) break L14;
									F.line = 2356;
									idx_455105 = i_459430;
									F.line = 2356;
									arg_455106 = args_455058[chckIndx(i_459430, 0, args_455058.length+0-1)-0];
									if (!(isObj(arg_455106.m_type, NTI182158))) {
									F.line = 176;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(176, 16) `arg of AstArg` "));
									}
									
									F.line = 177;
									add_declaration_443524(ste_451464, arg_455106.arg);
									F.line = 178;
									HEX5BHEX5DHEX3D_445850(ste_451464.argVars, arg_455106.arg.value, idx_455105);
									F.line = 2357;
									i_459430 = addInt(i_459430, 1);
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_451462.m_type, NTI179065)) {
					L15: do {
						F.line = 163;
						var node_455382 = null;
						F.line = 3909;
						var colontmp__459433 = null;
						F.line = 163;
						colontmp__459433 = ast_node_451462.body;
						F.line = 3911;
						var i_459436 = 0;
						F.line = 3912;
						var l_459438 = (colontmp__459433 != null ? colontmp__459433.length : 0);
						L16: do {
							F.line = 3913;
								L17: while (true) {
								if (!(i_459436 < l_459438)) break L17;
									F.line = 3914;
									node_455382 = colontmp__459433[chckIndx(i_459436, 0, colontmp__459433.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(node_455382); } else { to_visit_per_ste_454935[0] = [node_455382]; };
									F.line = 3915;
									i_459436 = addInt(i_459436, 1);
									if (!(((colontmp__459433 != null ? colontmp__459433.length : 0) == l_459438))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_451462.m_type, NTI180183)) {
					F.line = 182;
					var comp_node_455404 = ast_node_451462;
					F.line = 183;
					if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(comp_node_455404.elt); } else { to_visit_per_ste_454935[0] = [comp_node_455404.elt]; };
					L18: do {
						F.line = 184;
						var gen_455423 = null;
						F.line = 3909;
						var colontmp__459441 = null;
						F.line = 184;
						colontmp__459441 = comp_node_455404.generators;
						F.line = 3911;
						var i_459444 = 0;
						F.line = 3912;
						var l_459446 = (colontmp__459441 != null ? colontmp__459441.length : 0);
						L19: do {
							F.line = 3913;
								L20: while (true) {
								if (!(i_459444 < l_459446)) break L20;
									F.line = 3914;
									gen_455423 = colontmp__459441[chckIndx(i_459444, 0, colontmp__459441.length+0-1)-0];
									F.line = 185;
									var gen_node_455424 = gen_455423;
									F.line = 186;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(gen_node_455424.target); } else { to_visit_per_ste_454935[0] = [gen_node_455424.target]; };
									F.line = 3915;
									i_459444 = addInt(i_459444, 1);
									if (!(((colontmp__459441 != null ? colontmp__459441.length : 0) == l_459446))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 188;
					add_declaration_440242(ste_451464, new_py_string_176075(makeNimstrLit(".0")));
					F.line = 189;
					HEX5BHEX5DHEX3D_445850(ste_451464.argVars, new_py_string_176075(makeNimstrLit(".0")), 0);
					}
					else {
						F.line = 2895;
						var e_455599 = null;
						F.line = 2896;
						e_455599 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 31;
						e_455599.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
						F.line = 2891;
						e_455599.parent = null;
						F.line = 191;
						raiseException(e_455599, "InternalError");
					}
					}}}}
					L21: do {
						F.line = 193;
							L22: while (true) {
							if (!!(((to_visit_per_ste_454935[0] != null ? to_visit_per_ste_454935[0].length : 0) == 0))) break L22;
								F.line = 194;
								var ast_node_455849 = pop_455809(to_visit_per_ste_454935, 0);
								if (isObj(ast_node_455849.m_type, NTI178726)) {
								F.line = 196;
								switch (ast_node_455849.kind) {
								case 0:
									F.line = 199;
									var func_node_455862 = ast_node_455849;
									F.line = 200;
									add_declaration_443524(ste_451464, func_node_455862.name);
									F.line = 201;
									if (to_visit_451402[0] != null) { to_visit_451402[0].push({Field0: ast_node_455849, Field1: ste_451464}); } else { to_visit_451402[0] = [{Field0: ast_node_455849, Field1: ste_451464}]; };
									L23: do {
										F.line = 159;
										var ast_node_455885 = null;
										F.line = 3909;
										var colontmp__459450 = null;
										F.line = 202;
										colontmp__459450 = func_node_455862.decorator_list;
										F.line = 3911;
										var i_459453 = 0;
										F.line = 3912;
										var l_459455 = (colontmp__459450 != null ? colontmp__459450.length : 0);
										L24: do {
											F.line = 3913;
												L25: while (true) {
												if (!(i_459453 < l_459455)) break L25;
													F.line = 3914;
													ast_node_455885 = colontmp__459450[chckIndx(i_459453, 0, colontmp__459450.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_455885); } else { to_visit_per_ste_454935[0] = [ast_node_455885]; };
													F.line = 3915;
													i_459453 = addInt(i_459453, 1);
													if (!(((colontmp__459450 != null ? colontmp__459450.length : 0) == l_459455))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 2:
									F.line = 205;
									var class_node_455897 = ast_node_455849;
									if (!(((class_node_455897.bases != null ? class_node_455897.bases.length : 0) == 0))) {
									F.line = 206;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(206, 18) `len(classNode.bases) == 0` "));
									}
									
									if (!(((class_node_455897.keywords != null ? class_node_455897.keywords.length : 0) == 0))) {
									F.line = 207;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(207, 18) `len(classNode.keywords) == 0` "));
									}
									
									if (!(((class_node_455897.decorator_list != null ? class_node_455897.decorator_list.length : 0) == 0))) {
									F.line = 208;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(208, 18) `len(classNode.decorator_list) == 0` "));
									}
									
									F.line = 209;
									add_declaration_443524(ste_451464, class_node_455897.name);
									F.line = 210;
									if (to_visit_451402[0] != null) { to_visit_451402[0].push({Field0: ast_node_455849, Field1: ste_451464}); } else { to_visit_451402[0] = [{Field0: ast_node_455849, Field1: ste_451464}]; };
									break;
								case 3:
									if (!((ast_node_455849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_455849.value); } else { to_visit_per_ste_454935[0] = [ast_node_455849.value]; };
									}
									
									break;
								case 5:
									F.line = 216;
									var assign_node_456431 = ast_node_455849;
									if (!(((assign_node_456431.targets != null ? assign_node_456431.targets.length : 0) == 1))) {
									F.line = 217;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(217, 18) `len(assignNode.targets) == 1` "));
									}
									
									if (!((assign_node_456431.targets[chckIndx(0, 0, assign_node_456431.targets.length+0-1)-0] === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(assign_node_456431.targets[chckIndx(0, 0, assign_node_456431.targets.length+0-1)-0]); } else { to_visit_per_ste_454935[0] = [assign_node_456431.targets[chckIndx(0, 0, assign_node_456431.targets.length+0-1)-0]]; };
									}
									
									if (!((assign_node_456431.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(assign_node_456431.value); } else { to_visit_per_ste_454935[0] = [assign_node_456431.value]; };
									}
									
									break;
								case 8:
									F.line = 222;
									var for_node_456636 = ast_node_455849;
									if (!((for_node_456636.target.kind == 22))) {
									F.line = 224;
									raiseException(new_syntax_error_156100(makeNimstrLit("only name as loop variable"), [], for_node_456636.target.lineno.value, for_node_456636.target.col_offset.value), "SyntaxError:ObjectType");
									}
									
									if (!((for_node_456636.target === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(for_node_456636.target); } else { to_visit_per_ste_454935[0] = [for_node_456636.target]; };
									}
									
									if (!((for_node_456636.iter === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(for_node_456636.iter); } else { to_visit_per_ste_454935[0] = [for_node_456636.iter]; };
									}
									
									L26: do {
										F.line = 159;
										var ast_node_456691 = null;
										F.line = 3909;
										var colontmp__459457 = null;
										F.line = 227;
										colontmp__459457 = for_node_456636.body;
										F.line = 3911;
										var i_459460 = 0;
										F.line = 3912;
										var l_459462 = (colontmp__459457 != null ? colontmp__459457.length : 0);
										L27: do {
											F.line = 3913;
												L28: while (true) {
												if (!(i_459460 < l_459462)) break L28;
													F.line = 3914;
													ast_node_456691 = colontmp__459457[chckIndx(i_459460, 0, colontmp__459457.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_456691); } else { to_visit_per_ste_454935[0] = [ast_node_456691]; };
													F.line = 3915;
													i_459460 = addInt(i_459460, 1);
													if (!(((colontmp__459457 != null ? colontmp__459457.length : 0) == l_459462))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									if (!(((for_node_456636.orelse != null ? for_node_456636.orelse.length : 0) == 0))) {
									F.line = 228;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(228, 18) `len(forNode.orelse) == 0` "));
									}
									
									break;
								case 10:
									F.line = 231;
									var while_node_456802 = ast_node_455849;
									if (!((while_node_456802.test === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(while_node_456802.test); } else { to_visit_per_ste_454935[0] = [while_node_456802.test]; };
									}
									
									L29: do {
										F.line = 159;
										var ast_node_456831 = null;
										F.line = 3909;
										var colontmp__459464 = null;
										F.line = 233;
										colontmp__459464 = while_node_456802.body;
										F.line = 3911;
										var i_459467 = 0;
										F.line = 3912;
										var l_459469 = (colontmp__459464 != null ? colontmp__459464.length : 0);
										L30: do {
											F.line = 3913;
												L31: while (true) {
												if (!(i_459467 < l_459469)) break L31;
													F.line = 3914;
													ast_node_456831 = colontmp__459464[chckIndx(i_459467, 0, colontmp__459464.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_456831); } else { to_visit_per_ste_454935[0] = [ast_node_456831]; };
													F.line = 3915;
													i_459467 = addInt(i_459467, 1);
													if (!(((colontmp__459464 != null ? colontmp__459464.length : 0) == l_459469))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									if (!(((while_node_456802.orelse != null ? while_node_456802.orelse.length : 0) == 0))) {
									F.line = 234;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(234, 18) `len(whileNode.orelse) == 0` "));
									}
									
									break;
								case 11:
									F.line = 237;
									var if_node_457002 = ast_node_455849;
									if (!((if_node_457002.test === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(if_node_457002.test); } else { to_visit_per_ste_454935[0] = [if_node_457002.test]; };
									}
									
									L32: do {
										F.line = 159;
										var ast_node_457031 = null;
										F.line = 3909;
										var colontmp__459471 = null;
										F.line = 239;
										colontmp__459471 = if_node_457002.body;
										F.line = 3911;
										var i_459474 = 0;
										F.line = 3912;
										var l_459476 = (colontmp__459471 != null ? colontmp__459471.length : 0);
										L33: do {
											F.line = 3913;
												L34: while (true) {
												if (!(i_459474 < l_459476)) break L34;
													F.line = 3914;
													ast_node_457031 = colontmp__459471[chckIndx(i_459474, 0, colontmp__459471.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457031); } else { to_visit_per_ste_454935[0] = [ast_node_457031]; };
													F.line = 3915;
													i_459474 = addInt(i_459474, 1);
													if (!(((colontmp__459471 != null ? colontmp__459471.length : 0) == l_459476))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L35: do {
										F.line = 159;
										var ast_node_457053 = null;
										F.line = 3909;
										var colontmp__459478 = null;
										F.line = 240;
										colontmp__459478 = if_node_457002.orelse;
										F.line = 3911;
										var i_459481 = 0;
										F.line = 3912;
										var l_459483 = (colontmp__459478 != null ? colontmp__459478.length : 0);
										L36: do {
											F.line = 3913;
												L37: while (true) {
												if (!(i_459481 < l_459483)) break L37;
													F.line = 3914;
													ast_node_457053 = colontmp__459478[chckIndx(i_459481, 0, colontmp__459478.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457053); } else { to_visit_per_ste_454935[0] = [ast_node_457053]; };
													F.line = 3915;
													i_459481 = addInt(i_459481, 1);
													if (!(((colontmp__459478 != null ? colontmp__459478.length : 0) == l_459483))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 14:
									F.line = 243;
									var raise_node_457065 = ast_node_455849;
									if (!((raise_node_457065.exc === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(raise_node_457065.exc); } else { to_visit_per_ste_454935[0] = [raise_node_457065.exc]; };
									}
									
									if (!((raise_node_457065.cause === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(raise_node_457065.cause); } else { to_visit_per_ste_454935[0] = [raise_node_457065.cause]; };
									}
									
									break;
								case 16:
									F.line = 248;
									var assert_node_457101 = ast_node_455849;
									F.line = 249;
									add_used_443542(ste_451464, new_py_string_176075(makeNimstrLit("AssertionError")));
									if (!((assert_node_457101.test === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(assert_node_457101.test); } else { to_visit_per_ste_454935[0] = [assert_node_457101.test]; };
									}
									
									if (!((assert_node_457101.msg === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(assert_node_457101.msg); } else { to_visit_per_ste_454935[0] = [assert_node_457101.msg]; };
									}
									
									break;
								case 15:
									F.line = 254;
									var try_node_457137 = ast_node_455849;
									L38: do {
										F.line = 159;
										var ast_node_457149 = null;
										F.line = 3909;
										var colontmp__459485 = null;
										F.line = 255;
										colontmp__459485 = try_node_457137.body;
										F.line = 3911;
										var i_459488 = 0;
										F.line = 3912;
										var l_459490 = (colontmp__459485 != null ? colontmp__459485.length : 0);
										L39: do {
											F.line = 3913;
												L40: while (true) {
												if (!(i_459488 < l_459490)) break L40;
													F.line = 3914;
													ast_node_457149 = colontmp__459485[chckIndx(i_459488, 0, colontmp__459485.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457149); } else { to_visit_per_ste_454935[0] = [ast_node_457149]; };
													F.line = 3915;
													i_459488 = addInt(i_459488, 1);
													if (!(((colontmp__459485 != null ? colontmp__459485.length : 0) == l_459490))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L41: do {
										F.line = 159;
										var ast_node_457171 = null;
										F.line = 3909;
										var colontmp__459492 = null;
										F.line = 256;
										colontmp__459492 = try_node_457137.handlers;
										F.line = 3911;
										var i_459495 = 0;
										F.line = 3912;
										var l_459497 = (colontmp__459492 != null ? colontmp__459492.length : 0);
										L42: do {
											F.line = 3913;
												L43: while (true) {
												if (!(i_459495 < l_459497)) break L43;
													F.line = 3914;
													ast_node_457171 = colontmp__459492[chckIndx(i_459495, 0, colontmp__459492.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457171); } else { to_visit_per_ste_454935[0] = [ast_node_457171]; };
													F.line = 3915;
													i_459495 = addInt(i_459495, 1);
													if (!(((colontmp__459492 != null ? colontmp__459492.length : 0) == l_459497))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L44: do {
										F.line = 159;
										var ast_node_457193 = null;
										F.line = 3909;
										var colontmp__459499 = null;
										F.line = 257;
										colontmp__459499 = try_node_457137.orelse;
										F.line = 3911;
										var i_459502 = 0;
										F.line = 3912;
										var l_459504 = (colontmp__459499 != null ? colontmp__459499.length : 0);
										L45: do {
											F.line = 3913;
												L46: while (true) {
												if (!(i_459502 < l_459504)) break L46;
													F.line = 3914;
													ast_node_457193 = colontmp__459499[chckIndx(i_459502, 0, colontmp__459499.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457193); } else { to_visit_per_ste_454935[0] = [ast_node_457193]; };
													F.line = 3915;
													i_459502 = addInt(i_459502, 1);
													if (!(((colontmp__459499 != null ? colontmp__459499.length : 0) == l_459504))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L47: do {
										F.line = 159;
										var ast_node_457215 = null;
										F.line = 3909;
										var colontmp__459506 = null;
										F.line = 258;
										colontmp__459506 = try_node_457137.finalbody;
										F.line = 3911;
										var i_459509 = 0;
										F.line = 3912;
										var l_459511 = (colontmp__459506 != null ? colontmp__459506.length : 0);
										L48: do {
											F.line = 3913;
												L49: while (true) {
												if (!(i_459509 < l_459511)) break L49;
													F.line = 3914;
													ast_node_457215 = colontmp__459506[chckIndx(i_459509, 0, colontmp__459506.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457215); } else { to_visit_per_ste_454935[0] = [ast_node_457215]; };
													F.line = 3915;
													i_459509 = addInt(i_459509, 1);
													if (!(((colontmp__459506 != null ? colontmp__459506.length : 0) == l_459511))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 17:
									if (!(((ast_node_455849.names != null ? ast_node_455849.names.length : 0) == 1))) {
									F.line = 261;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(261, 18) `len(AstImport(astNode).names) == 1` "));
									}
									
									F.line = 262;
									add_declaration_443524(ste_451464, ast_node_455849.names[chckIndx(0, 0, ast_node_455849.names.length+0-1)-0].name);
									break;
								case 21:
									if (!((ast_node_455849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_455849.value); } else { to_visit_per_ste_454935[0] = [ast_node_455849.value]; };
									}
									
									break;
								case 22:
								case 23:
								case 24:
									break;
								default: 
									F.line = 2895;
									var e_457433 = null;
									F.line = 2896;
									e_457433 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 270;
									e_457433.message = nimCopy(null, reprEnum(ast_node_455849.kind, NTI178567), NTI138);
									F.line = 2891;
									e_457433.parent = null;
									F.line = 270;
									raiseException(e_457433, "InternalError");
									break;
								}
								}
								else {
								if (isObj(ast_node_455849.m_type, NTI178731)) {
								F.line = 272;
								switch (ast_node_455849.kind) {
								case 0:
									L50: do {
										F.line = 159;
										var ast_node_457624 = null;
										F.line = 3909;
										var colontmp__459514 = null;
										F.line = 275;
										colontmp__459514 = ast_node_455849.values;
										F.line = 3911;
										var i_459517 = 0;
										F.line = 3912;
										var l_459519 = (colontmp__459514 != null ? colontmp__459514.length : 0);
										L51: do {
											F.line = 3913;
												L52: while (true) {
												if (!(i_459517 < l_459519)) break L52;
													F.line = 3914;
													ast_node_457624 = colontmp__459514[chckIndx(i_459517, 0, colontmp__459514.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457624); } else { to_visit_per_ste_454935[0] = [ast_node_457624]; };
													F.line = 3915;
													i_459517 = addInt(i_459517, 1);
													if (!(((colontmp__459514 != null ? colontmp__459514.length : 0) == l_459519))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 1:
									F.line = 278;
									var bin_op_node_457636 = ast_node_455849;
									if (!((bin_op_node_457636.left === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(bin_op_node_457636.left); } else { to_visit_per_ste_454935[0] = [bin_op_node_457636.left]; };
									}
									
									if (!((bin_op_node_457636.right === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(bin_op_node_457636.right); } else { to_visit_per_ste_454935[0] = [bin_op_node_457636.right]; };
									}
									
									break;
								case 2:
									if (!((ast_node_455849.operand === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_455849.operand); } else { to_visit_per_ste_454935[0] = [ast_node_455849.operand]; };
									}
									
									break;
								case 5:
									F.line = 286;
									var dict_node_457690 = ast_node_455849;
									L53: do {
										F.line = 159;
										var ast_node_457702 = null;
										F.line = 3909;
										var colontmp__459521 = null;
										F.line = 287;
										colontmp__459521 = dict_node_457690.keys;
										F.line = 3911;
										var i_459524 = 0;
										F.line = 3912;
										var l_459526 = (colontmp__459521 != null ? colontmp__459521.length : 0);
										L54: do {
											F.line = 3913;
												L55: while (true) {
												if (!(i_459524 < l_459526)) break L55;
													F.line = 3914;
													ast_node_457702 = colontmp__459521[chckIndx(i_459524, 0, colontmp__459521.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457702); } else { to_visit_per_ste_454935[0] = [ast_node_457702]; };
													F.line = 3915;
													i_459524 = addInt(i_459524, 1);
													if (!(((colontmp__459521 != null ? colontmp__459521.length : 0) == l_459526))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L56: do {
										F.line = 159;
										var ast_node_457724 = null;
										F.line = 3909;
										var colontmp__459528 = null;
										F.line = 288;
										colontmp__459528 = dict_node_457690.values;
										F.line = 3911;
										var i_459531 = 0;
										F.line = 3912;
										var l_459533 = (colontmp__459528 != null ? colontmp__459528.length : 0);
										L57: do {
											F.line = 3913;
												L58: while (true) {
												if (!(i_459531 < l_459533)) break L58;
													F.line = 3914;
													ast_node_457724 = colontmp__459528[chckIndx(i_459531, 0, colontmp__459528.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457724); } else { to_visit_per_ste_454935[0] = [ast_node_457724]; };
													F.line = 3915;
													i_459531 = addInt(i_459531, 1);
													if (!(((colontmp__459528 != null ? colontmp__459528.length : 0) == l_459533))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 6:
									F.line = 291;
									var set_node_457736 = ast_node_455849;
									L59: do {
										F.line = 159;
										var ast_node_457748 = null;
										F.line = 3909;
										var colontmp__459535 = null;
										F.line = 292;
										colontmp__459535 = set_node_457736.elts;
										F.line = 3911;
										var i_459538 = 0;
										F.line = 3912;
										var l_459540 = (colontmp__459535 != null ? colontmp__459535.length : 0);
										L60: do {
											F.line = 3913;
												L61: while (true) {
												if (!(i_459538 < l_459540)) break L61;
													F.line = 3914;
													ast_node_457748 = colontmp__459535[chckIndx(i_459538, 0, colontmp__459535.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457748); } else { to_visit_per_ste_454935[0] = [ast_node_457748]; };
													F.line = 3915;
													i_459538 = addInt(i_459538, 1);
													if (!(((colontmp__459535 != null ? colontmp__459535.length : 0) == l_459540))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 7:
									F.line = 296;
									if (to_visit_451402[0] != null) { to_visit_451402[0].push({Field0: ast_node_455849, Field1: ste_451464}); } else { to_visit_451402[0] = [{Field0: ast_node_455849, Field1: ste_451464}]; };
									F.line = 297;
									var comp_node_457771 = ast_node_455849;
									L62: do {
										F.line = 298;
										var gen_457780 = null;
										F.line = 3909;
										var colontmp__459542 = null;
										F.line = 298;
										colontmp__459542 = comp_node_457771.generators;
										F.line = 3911;
										var i_459545 = 0;
										F.line = 3912;
										var l_459547 = (colontmp__459542 != null ? colontmp__459542.length : 0);
										L63: do {
											F.line = 3913;
												L64: while (true) {
												if (!(i_459545 < l_459547)) break L64;
													F.line = 3914;
													gen_457780 = colontmp__459542[chckIndx(i_459545, 0, colontmp__459542.length+0-1)-0];
													F.line = 299;
													var gen_node_457781 = gen_457780;
													if (!((gen_node_457781.iter === null))) {
													F.line = 157;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(gen_node_457781.iter); } else { to_visit_per_ste_454935[0] = [gen_node_457781.iter]; };
													}
													
													F.line = 3915;
													i_459545 = addInt(i_459545, 1);
													if (!(((colontmp__459542 != null ? colontmp__459542.length : 0) == l_459547))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 14:
									F.line = 303;
									var compare_node_457800 = ast_node_455849;
									if (!((compare_node_457800.left === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(compare_node_457800.left); } else { to_visit_per_ste_454935[0] = [compare_node_457800.left]; };
									}
									
									L65: do {
										F.line = 159;
										var ast_node_457829 = null;
										F.line = 3909;
										var colontmp__459549 = null;
										F.line = 305;
										colontmp__459549 = compare_node_457800.comparators;
										F.line = 3911;
										var i_459552 = 0;
										F.line = 3912;
										var l_459554 = (colontmp__459549 != null ? colontmp__459549.length : 0);
										L66: do {
											F.line = 3913;
												L67: while (true) {
												if (!(i_459552 < l_459554)) break L67;
													F.line = 3914;
													ast_node_457829 = colontmp__459549[chckIndx(i_459552, 0, colontmp__459549.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457829); } else { to_visit_per_ste_454935[0] = [ast_node_457829]; };
													F.line = 3915;
													i_459552 = addInt(i_459552, 1);
													if (!(((colontmp__459549 != null ? colontmp__459549.length : 0) == l_459554))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 15:
									F.line = 308;
									var call_node_457841 = ast_node_455849;
									if (!((call_node_457841.fun === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(call_node_457841.fun); } else { to_visit_per_ste_454935[0] = [call_node_457841.fun]; };
									}
									
									L68: do {
										F.line = 159;
										var ast_node_457870 = null;
										F.line = 3909;
										var colontmp__459556 = null;
										F.line = 310;
										colontmp__459556 = call_node_457841.args;
										F.line = 3911;
										var i_459559 = 0;
										F.line = 3912;
										var l_459561 = (colontmp__459556 != null ? colontmp__459556.length : 0);
										L69: do {
											F.line = 3913;
												L70: while (true) {
												if (!(i_459559 < l_459561)) break L70;
													F.line = 3914;
													ast_node_457870 = colontmp__459556[chckIndx(i_459559, 0, colontmp__459556.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_457870); } else { to_visit_per_ste_454935[0] = [ast_node_457870]; };
													F.line = 3915;
													i_459559 = addInt(i_459559, 1);
													if (!(((colontmp__459556 != null ? colontmp__459556.length : 0) == l_459561))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									if (!(((call_node_457841.keywords != null ? call_node_457841.keywords.length : 0) == 0))) {
									F.line = 311;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(311, 18) `len(callNode.keywords) == 0` "));
									}
									
									break;
								case 19:
									if (!((ast_node_455849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_455849.value); } else { to_visit_per_ste_454935[0] = [ast_node_455849.value]; };
									}
									
									break;
								case 20:
									F.line = 317;
									var subs_node_458020 = ast_node_455849;
									if (!((subs_node_458020.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(subs_node_458020.value); } else { to_visit_per_ste_454935[0] = [subs_node_458020.value]; };
									}
									
									if (!((subs_node_458020.slice === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(subs_node_458020.slice); } else { to_visit_per_ste_454935[0] = [subs_node_458020.slice]; };
									}
									
									break;
								case 22:
									F.line = 322;
									var name_node_458056 = ast_node_455849;
									F.line = 323;
									switch (name_node_458056.ctx.kind) {
									case 1:
										F.line = 325;
										add_declaration_443524(ste_451464, name_node_458056.id);
										break;
									case 0:
										F.line = 327;
										add_used_443648(ste_451464, name_node_458056.id);
										break;
									default: 
										F.line = 2895;
										var e_458064 = null;
										F.line = 2896;
										e_458064 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 31;
										e_458064.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_458064.parent = null;
										F.line = 329;
										raiseException(e_458064, "InternalError");
										break;
									}
									break;
								case 23:
									F.line = 332;
									var list_node_458202 = ast_node_455849;
									F.line = 333;
									switch (list_node_458202.ctx.kind) {
									case 1:
									case 0:
										L71: do {
											F.line = 159;
											var ast_node_458216 = null;
											F.line = 3909;
											var colontmp__459563 = null;
											F.line = 335;
											colontmp__459563 = list_node_458202.elts;
											F.line = 3911;
											var i_459566 = 0;
											F.line = 3912;
											var l_459568 = (colontmp__459563 != null ? colontmp__459563.length : 0);
											L72: do {
												F.line = 3913;
													L73: while (true) {
													if (!(i_459566 < l_459568)) break L73;
														F.line = 3914;
														ast_node_458216 = colontmp__459563[chckIndx(i_459566, 0, colontmp__459563.length+0-1)-0];
														F.line = 160;
														if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_458216); } else { to_visit_per_ste_454935[0] = [ast_node_458216]; };
														F.line = 3915;
														i_459566 = addInt(i_459566, 1);
														if (!(((colontmp__459563 != null ? colontmp__459563.length : 0) == l_459568))) {
														F.line = 3916;
														failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
														}
														
													}
											} while(false);
										} while(false);
										break;
									default: 
										F.line = 2895;
										var e_458232 = null;
										F.line = 2896;
										e_458232 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 31;
										e_458232.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_458232.parent = null;
										F.line = 337;
										raiseException(e_458232, "InternalError");
										break;
									}
									break;
								case 24:
									F.line = 340;
									var tuple_node_458402 = ast_node_455849;
									F.line = 341;
									switch (tuple_node_458402.ctx.kind) {
									case 1:
									case 0:
										L74: do {
											F.line = 159;
											var ast_node_458416 = null;
											F.line = 3909;
											var colontmp__459570 = null;
											F.line = 343;
											colontmp__459570 = tuple_node_458402.elts;
											F.line = 3911;
											var i_459573 = 0;
											F.line = 3912;
											var l_459575 = (colontmp__459570 != null ? colontmp__459570.length : 0);
											L75: do {
												F.line = 3913;
													L76: while (true) {
													if (!(i_459573 < l_459575)) break L76;
														F.line = 3914;
														ast_node_458416 = colontmp__459570[chckIndx(i_459573, 0, colontmp__459570.length+0-1)-0];
														F.line = 160;
														if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_458416); } else { to_visit_per_ste_454935[0] = [ast_node_458416]; };
														F.line = 3915;
														i_459573 = addInt(i_459573, 1);
														if (!(((colontmp__459570 != null ? colontmp__459570.length : 0) == l_459575))) {
														F.line = 3916;
														failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
														}
														
													}
											} while(false);
										} while(false);
										break;
									default: 
										F.line = 2895;
										var e_458432 = null;
										F.line = 2896;
										e_458432 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 31;
										e_458432.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_458432.parent = null;
										F.line = 345;
										raiseException(e_458432, "InternalError");
										break;
									}
									break;
								case 18:
									break;
								default: 
									F.line = 2895;
									var e_458607 = null;
									F.line = 2896;
									e_458607 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 31;
									e_458607.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
									F.line = 2891;
									e_458607.parent = null;
									F.line = 351;
									raiseException(e_458607, "InternalError");
									break;
								}
								}
								else {
								if (isObj(ast_node_455849.m_type, NTI178739)) {
								F.line = 354;
								switch (ast_node_455849.kind) {
								case 0:
									F.line = 357;
									var slice_node_458813 = ast_node_455849;
									if (!((slice_node_458813.lower === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(slice_node_458813.lower); } else { to_visit_per_ste_454935[0] = [slice_node_458813.lower]; };
									}
									
									if (!((slice_node_458813.upper === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(slice_node_458813.upper); } else { to_visit_per_ste_454935[0] = [slice_node_458813.upper]; };
									}
									
									if (!((slice_node_458813.step === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(slice_node_458813.step); } else { to_visit_per_ste_454935[0] = [slice_node_458813.step]; };
									}
									
									break;
								case 1:
									F.line = 2895;
									var e_458871 = null;
									F.line = 2896;
									e_458871 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 31;
									e_458871.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
									F.line = 2891;
									e_458871.parent = null;
									F.line = 363;
									raiseException(e_458871, "InternalError");
									break;
								case 2:
									if (!((ast_node_455849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_455849.value); } else { to_visit_per_ste_454935[0] = [ast_node_455849.value]; };
									}
									
									break;
								}
								}
								else {
								if (isObj(ast_node_455849.m_type, NTI178757)) {
								F.line = 369;
								var excp_node_459030 = ast_node_455849;
								if (!((excp_node_459030.name === null))) {
								F.line = 370;
								failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(370, 16) `isNil(excpNode.name)` "));
								}
								
								L77: do {
									F.line = 159;
									var ast_node_459212 = null;
									F.line = 3909;
									var colontmp__459579 = null;
									F.line = 371;
									colontmp__459579 = excp_node_459030.body;
									F.line = 3911;
									var i_459582 = 0;
									F.line = 3912;
									var l_459584 = (colontmp__459579 != null ? colontmp__459579.length : 0);
									L78: do {
										F.line = 3913;
											L79: while (true) {
											if (!(i_459582 < l_459584)) break L79;
												F.line = 3914;
												ast_node_459212 = colontmp__459579[chckIndx(i_459582, 0, colontmp__459579.length+0-1)-0];
												F.line = 160;
												if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(ast_node_459212); } else { to_visit_per_ste_454935[0] = [ast_node_459212]; };
												F.line = 3915;
												i_459582 = addInt(i_459582, 1);
												if (!(((colontmp__459579 != null ? colontmp__459579.length : 0) == l_459584))) {
												F.line = 3916;
												failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
												}
												
											}
									} while(false);
								} while(false);
								if (!((excp_node_459030.type === null))) {
								F.line = 157;
								if (to_visit_per_ste_454935[0] != null) { to_visit_per_ste_454935[0].push(excp_node_459030.type); } else { to_visit_per_ste_454935[0] = [excp_node_459030.type]; };
								}
								
								}
								else {
									F.line = 2895;
									var e_459245 = null;
									F.line = 2896;
									e_459245 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 31;
									e_459245.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
									F.line = 2891;
									e_459245.parent = null;
									F.line = 374;
									raiseException(e_459245, "InternalError");
								}
								}}}
							}
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_436315(t_436322, key_436324) {
	var result_436326 = [null, 0];
	var result_436326_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_436328 = [0];
		F.line = 161;
		var index_437091 = raw_get_436330(t_436322, key_436324, hc_436328, 0);
		if ((0 <= index_437091)) {
		F.line = 162;
		result_436326 = t_436322.data[chckIndx(index_437091, 0, t_436322.data.length+0-1)-0]; result_436326_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_437406 = null;
			F.line = 2896;
			e_437406 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_437406.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_177554(key_436324)), NTI138);
			F.line = 2891;
			e_437406.parent = null;
			F.line = 165;
			raiseException(e_437406, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_436326, result_436326_Idx];

}

function get_ste_436078(st_436080, key_436081) {
		var Tmp1;

	var result_436082 = null;

	var F={procname:"symtable.getSte",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 71;
		result_436082 = (Tmp1 = HEX5BHEX5D_436315(st_436080.entries, key_436081), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_436082;

}

function raw_get_439055(t_439060, key_439062, hc_439064, hc_439064_Idx) {
						var Tmp3;

	var result_439065 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_439064[hc_439064_Idx] = hash_406040(key_439062);
		if ((hc_439064[hc_439064_Idx] == 0)) {
		F.line = 45;
		hc_439064[hc_439064_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_439075 = (hc_439064[hc_439064_Idx] & (t_439060.data != null ? (t_439060.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_439060.data[chckIndx(h_439075, 0, t_439060.data.length+0-1)-0].Field0)) break L2;
						if (!(t_439060.data[chckIndx(h_439075, 0, t_439060.data.length+0-1)-0].Field0 == hc_439064[hc_439064_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_406059(t_439060.data[chckIndx(h_439075, 0, t_439060.data.length+0-1)-0].Field1, key_439062);						}					if (Tmp3) {
					F.line = 38;
					result_439065 = h_439075;
					break BeforeRet;
					}
					
					F.line = 39;
					h_439075 = next_try_146614(h_439075, (t_439060.data != null ? (t_439060.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_439065 = subInt(-1, h_439075);
	} while (false);
	framePtr = F.prev;

	return result_439065;

}

function has_key_459748(t_459754, key_459756) {
	var result_459757 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_459758 = [0];
		F.line = 264;
		result_459757 = (0 <= raw_get_439055(t_459754, key_459756, hc_459758, 0));
	framePtr = F.prev;

	return result_459757;

}

function is_root_ste_437442(ste_437444) {
	var result_437445 = false;

	var F={procname:"symtable.isRootSte",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 74;
		result_437445 = (ste_437444.parent === null);
	framePtr = F.prev;

	return result_437445;

}

function raw_insert_461675(t_461682, data_461686, data_461686_Idx, key_461688, val_461690, hc_461692, h_461694) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_461686[data_461686_Idx][chckIndx(h_461694, 0, data_461686[data_461686_Idx].length+0-1)-0].Field1 = key_461688;
		F.line = 65;
		data_461686[data_461686_Idx][chckIndx(h_461694, 0, data_461686[data_461686_Idx].length+0-1)-0].Field2 = val_461690;
		F.line = 66;
		data_461686[data_461686_Idx][chckIndx(h_461694, 0, data_461686[data_461686_Idx].length+0-1)-0].Field0 = hc_461692;
	framePtr = F.prev;

	
}

function enlarge_460431(t_460438) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_460446 = null;
		F.line = 314;
		n_460446 = new Array(chckRange(mulInt((t_460438.data != null ? t_460438.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_460438.data != null ? t_460438.data.length : 0), 2), 0, 2147483647);++i) {n_460446[i]={Field0: 0, Field1: null, Field2: 0};}		F.line = 315;
		var Tmp1 = t_460438.data; t_460438.data = n_460446; n_460446 = Tmp1;		L2: do {
			F.line = 316;
			var i_460701 = 0;
			F.line = 2088;
			var colontmp__462416 = 0;
			F.line = 316;
			colontmp__462416 = (n_460446 != null ? (n_460446.length-1) : -1);
			F.line = 2094;
			var res_462419 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_462419 <= colontmp__462416)) break L4;
						F.line = 2096;
						i_460701 = res_462419;
						F.line = 317;
						var eh_460937 = n_460446[chckIndx(i_460701, 0, n_460446.length+0-1)-0].Field0;
						if (is_filled_146491(eh_460937)) {
						F.line = 319;
						var j_460946 = (eh_460937 & (t_460438.data != null ? (t_460438.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_460438.data[chckIndx(j_460946, 0, t_460438.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_460946 = next_try_146614(j_460946, (t_460438.data != null ? (t_460438.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_461675(t_460438, t_460438, "data", n_460446[chckIndx(i_460701, 0, n_460446.length+0-1)-0].Field1, n_460446[chckIndx(i_460701, 0, n_460446.length+0-1)-0].Field2, eh_460937, j_460946);
						}
						
						F.line = 2097;
						res_462419 = addInt(res_462419, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_462437(t_462442, key_462444, hc_462446) {
	var result_462447 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_462456 = (hc_462446 & (t_462442.data != null ? (t_462442.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_462442.data[chckIndx(h_462456, 0, t_462442.data.length+0-1)-0].Field0)) break L2;
					if (((t_462442.data[chckIndx(h_462456, 0, t_462442.data.length+0-1)-0].Field0 == hc_462446) && HEX3DHEX3D_406059(t_462442.data[chckIndx(h_462456, 0, t_462442.data.length+0-1)-0].Field1, key_462444))) {
					F.line = 38;
					result_462447 = h_462456;
					break BeforeRet;
					}
					
					F.line = 39;
					h_462456 = next_try_146614(h_462456, (t_462442.data != null ? (t_462442.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_462447 = subInt(-1, h_462456);
	} while (false);
	framePtr = F.prev;

	return result_462447;

}

function HEX5BHEX5DHEX3D_459932(t_459939, key_459941, val_459943) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_459944 = [0];
		F.line = 98;
		var index_459957 = raw_get_439055(t_459939, key_459941, hc_459944, 0);
		if ((0 <= index_459957)) {
		F.line = 99;
		t_459939.data[chckIndx(index_459957, 0, t_459939.data.length+0-1)-0].Field2 = val_459943;
		}
		else {
			if (must_rehash_146509((t_459939.data != null ? t_459939.data.length : 0), t_459939.counter)) {
			F.line = 90;
			enlarge_460431(t_459939);
			F.line = 91;
			index_459957 = raw_get_known_hc_462437(t_459939, key_459941, hc_459944[0]);
			}
			
			F.line = 92;
			index_459957 = subInt(-1, index_459957);
			F.line = 93;
			raw_insert_461675(t_459939, t_459939, "data", key_459941, val_459943, hc_459944[0], index_459957);
			F.line = 100;
			t_459939.counter = addInt(t_459939.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function contains_437668(s_437673, key_437675) {
	var result_437676 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_437696(s_437673))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_438001 = [0];
		F.line = 217;
		var index_438775 = raw_get_438021(s_437673, key_437675, hc_438001, 0);
		F.line = 218;
		result_437676 = (0 <= index_438775);
	framePtr = F.prev;

	return result_437676;

}

function declared_437466(ste_437468, local_name_437469) {
	var result_437470 = false;

	var F={procname:"symtable.declared",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_437470 = contains_437668(ste_437468.declaredVars, local_name_437469);
	framePtr = F.prev;

	return result_437470;

}

function HEX5BHEX5D_463424(s_463430, i_463432) {
	var result_463434 = [null, 0];
	var result_463434_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_463434 = s_463430; result_463434_Idx = chckIndx(subInt((s_463430 != null ? s_463430.length : 0), i_463432), 0, s_463430.length+0-1)-0;
	framePtr = F.prev;

	return [result_463434, result_463434_Idx];

}

function HEX5BHEX5D_463827(s_463834, x_463837) {
	var result_463839 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_464001 = x_463837.a;
		F.line = 3707;
		var l_464207 = addInt(subInt(subInt((s_463834 != null ? s_463834.length : 0), x_463837.b), a_464001), 1);
		F.line = 3708;
		result_463839 = new Array(chckRange(l_464207, 0, 2147483647)); for (var i=0;i<chckRange(l_464207, 0, 2147483647);++i) {result_463839[i]=null;}		L1: do {
			F.line = 3709;
			var i_464227 = 0;
			F.line = 3617;
			var i_464235 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_464235 < l_464207)) break L3;
						F.line = 3619;
						i_464227 = i_464235;
						F.line = 3709;
						result_463839[chckIndx(i_464227, 0, result_463839.length+0-1)-0] = s_463834[chckIndx(addInt(i_464227, a_464001), 0, s_463834.length+0-1)-0];
						F.line = 3620;
						i_464235 = addInt(i_464235, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_463839;

}

function determine_scope_459598(ste_459600, name_459601) {
					var Tmp3;
		var Tmp4;

	var F={procname:"symtable.determineScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (has_key_459748(ste_459600.scopes, name_459601)) {
		F.line = 378;
		break BeforeRet;
		}
		
		if (is_root_ste_437442(ste_459600)) {
		F.line = 380;
		HEX5BHEX5DHEX3D_459932(ste_459600.scopes, name_459601, 3);
		F.line = 381;
		break BeforeRet;
		}
		
		if (declared_437466(ste_459600, name_459601)) {
		F.line = 383;
		HEX5BHEX5DHEX3D_459932(ste_459600.scopes, name_459601, 0);
		F.line = 384;
		break BeforeRet;
		}
		
		F.line = 385;
		var traceback_463417 = [ste_459600, ste_459600.parent];
		F.line = 386;
		var scope_463418 = 0;
		L1: do {
			F.line = 387;
				L2: while (true) {
				if (!true) break L2;
					F.line = 388;
					var cur_ste_463456 = (Tmp3 = HEX5BHEX5D_463424(traceback_463417, 1), Tmp3[0])[Tmp3[1]];
					if (is_root_ste_437442(cur_ste_463456)) {
					F.line = 390;
					scope_463418 = 3;
					F.line = 391;
					break L1;
					}
					
					if (declared_437466(cur_ste_463456, name_459601)) {
					F.line = 393;
					scope_463418 = 1;
					F.line = 394;
					break L1;
					}
					
					F.line = 395;
					if (traceback_463417 != null) { traceback_463417.push(cur_ste_463456.parent); } else { traceback_463417 = [cur_ste_463456.parent]; };
				}
		} while(false);
		F.line = 396;
		HEX5BHEX5DHEX3D_459932((Tmp4 = HEX5BHEX5D_463424(traceback_463417, 1), Tmp4[0])[Tmp4[1]].scopes, name_459601, scope_463418);
		F.line = 397;
		switch (scope_463418) {
		case 1:
			F.line = 399;
			scope_463418 = 2;
			break;
		case 3:
			break;
		default: 
			F.line = 2895;
			var e_463651 = null;
			F.line = 2896;
			e_463651 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_463651.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_463651.parent = null;
			F.line = 403;
			raiseException(e_463651, "InternalError");
			break;
		}
		L5: do {
			F.line = 404;
			var cur_ste_464415 = null;
			F.line = 3909;
			var colontmp__464580 = null;
			F.line = 404;
			colontmp__464580 = HEX5BHEX5D_463827(traceback_463417, HEX2EHEX2E_81053(0, 2));
			F.line = 3911;
			var i_464583 = 0;
			F.line = 3912;
			var l_464585 = (colontmp__464580 != null ? colontmp__464580.length : 0);
			L6: do {
				F.line = 3913;
					L7: while (true) {
					if (!(i_464583 < l_464585)) break L7;
						F.line = 3914;
						cur_ste_464415 = colontmp__464580[chckIndx(i_464583, 0, colontmp__464580.length+0-1)-0];
						F.line = 405;
						HEX5BHEX5DHEX3D_459932(cur_ste_464415.scopes, name_459601, scope_463418);
						F.line = 3915;
						i_464583 = addInt(i_464583, 1);
						if (!(((colontmp__464580 != null ? colontmp__464580.length : 0) == l_464585))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function len_445683(t_445689) {
	var result_445690 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 154;
		result_445690 = t_445689.counter;
	framePtr = F.prev;

	return result_445690;

}

function determine_scope_464599(ste_464601) {
	var F={procname:"symtable.determineScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 409;
			var child_464610 = null;
			F.line = 3909;
			var colontmp__466472 = null;
			F.line = 409;
			colontmp__466472 = ste_464601.children;
			F.line = 3911;
			var i_466475 = 0;
			F.line = 3912;
			var l_466477 = (colontmp__466472 != null ? colontmp__466472.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_466475 < l_466477)) break L3;
						F.line = 3914;
						child_464610 = colontmp__466472[chckIndx(i_466475, 0, colontmp__466472.length+0-1)-0];
						F.line = 410;
						determine_scope_464599(child_464610);
						F.line = 3915;
						i_466475 = addInt(i_466475, 1);
						if (!(((colontmp__466472 != null ? colontmp__466472.length : 0) == l_466477))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 411;
			var name_465312 = null;
			F.line = 100;
			var colontmp__466479 = {data: null, counter: 0};
			F.line = 411;
			nimCopy(colontmp__466479, ste_464601.usedVars, NTI435211);
			if (!(is_valid_437696(colontmp__466479))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L5: do {
				F.line = 120;
				var h_466483 = 0;
				F.line = 2104;
				var colontmp__466485 = 0;
				F.line = 120;
				colontmp__466485 = (colontmp__466479.data != null ? (colontmp__466479.data.length-1) : -1);
				F.line = 2107;
				var res_466487 = 0;
				L6: do {
					F.line = 2108;
						L7: while (true) {
						if (!(res_466487 <= colontmp__466485)) break L7;
							F.line = 2109;
							h_466483 = res_466487;
							if (is_filled_154282(colontmp__466479.data[chckIndx(h_466483, 0, colontmp__466479.data.length+0-1)-0].Field0)) {
							F.line = 121;
							name_465312 = colontmp__466479.data[chckIndx(h_466483, 0, colontmp__466479.data.length+0-1)-0].Field1;
							F.line = 412;
							determine_scope_459598(ste_464601, name_465312);
							}
							
							F.line = 2110;
							res_466487 = addInt(res_466487, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		L8: do {
			F.line = 414;
			var name_465320 = null;
			F.line = 100;
			var colontmp__466491 = {data: null, counter: 0};
			F.line = 414;
			nimCopy(colontmp__466491, ste_464601.declaredVars, NTI435211);
			if (!(is_valid_437696(colontmp__466491))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L9: do {
				F.line = 120;
				var h_466495 = 0;
				F.line = 2104;
				var colontmp__466497 = 0;
				F.line = 120;
				colontmp__466497 = (colontmp__466491.data != null ? (colontmp__466491.data.length-1) : -1);
				F.line = 2107;
				var res_466499 = 0;
				L10: do {
					F.line = 2108;
						L11: while (true) {
						if (!(res_466499 <= colontmp__466497)) break L11;
							F.line = 2109;
							h_466495 = res_466499;
							if (is_filled_154282(colontmp__466491.data[chckIndx(h_466495, 0, colontmp__466491.data.length+0-1)-0].Field0)) {
							F.line = 121;
							name_465320 = colontmp__466491.data[chckIndx(h_466495, 0, colontmp__466491.data.length+0-1)-0].Field1;
							F.line = 415;
							determine_scope_459598(ste_464601, name_465320);
							}
							
							F.line = 2110;
							res_466499 = addInt(res_466499, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		L12: do {
			F.line = 417;
			var name_466077 = null;
			F.line = 417;
			var scope_466078 = 0;
			F.line = 270;
			var colontmp__466503 = {data: null, counter: 0};
			F.line = 417;
			nimCopy(colontmp__466503, ste_464601.scopes, NTI435242);
			L13: do {
				F.line = 272;
				var h_466507 = 0;
				F.line = 2104;
				var colontmp__466509 = 0;
				F.line = 272;
				colontmp__466509 = (colontmp__466503.data != null ? (colontmp__466503.data.length-1) : -1);
				F.line = 2107;
				var res_466511 = 0;
				L14: do {
					F.line = 2108;
						L15: while (true) {
						if (!(res_466511 <= colontmp__466509)) break L15;
							F.line = 2109;
							h_466507 = res_466511;
							if (is_filled_146491(colontmp__466503.data[chckIndx(h_466507, 0, colontmp__466503.data.length+0-1)-0].Field0)) {
							F.line = 273;
							name_466077 = colontmp__466503.data[chckIndx(h_466507, 0, colontmp__466503.data.length+0-1)-0].Field1;
							F.line = 273;
							scope_466078 = colontmp__466503.data[chckIndx(h_466507, 0, colontmp__466503.data.length+0-1)-0].Field2;
							F.line = 418;
							var d_466087 = null;
							F.line = 419;
							switch (scope_466078) {
							case 0:
								F.line = 421;
								d_466087 = ste_464601.localVars;
								break;
							case 3:
								F.line = 423;
								d_466087 = ste_464601.names;
								break;
							case 1:
								F.line = 425;
								d_466087 = ste_464601.cellVars;
								break;
							case 2:
								F.line = 427;
								d_466087 = ste_464601.freeVars;
								break;
							}
							F.line = 428;
							HEX5BHEX5DHEX3D_445850(d_466087, name_466077, len_445683(d_466087));
							}
							
							F.line = 2110;
							res_466511 = addInt(res_466511, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function determine_scope_466527(st_466529) {
	var F={procname:"symtable.determineScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 431;
		determine_scope_464599(st_466529.root);
	framePtr = F.prev;

	
}

function new_sym_table_466543(ast_root_466545) {
	var result_466546 = null;

	var F={procname:"symtable.newSymTable",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 434;
		result_466546 = {entries: {data: null, counter: 0}, root: null};
		F.line = 435;
		nimCopy(result_466546.entries, init_table_466558(64), NTI435152);
		F.line = 438;
		collect_declaration_451396(result_466546, ast_root_466545);
		F.line = 439;
		result_466546.root = get_ste_436078(result_466546, ast_root_466545);
		F.line = 441;
		determine_scope_466527(result_466546);
	framePtr = F.prev;

	return result_466546;

}

function new_504445() {
	var result_504450 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_504601 = null;
		F.line = 211;
		r_504601 = {ste: null, blocks: null, constants: null, codeName: null};
		F.line = 212;
		result_504450 = r_504601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_504450;

}

function new_504245() {
	var result_504250 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_504401 = null;
		F.line = 211;
		r_504401 = {instrSeq: null, tp: 0, next: null, seenReturn: false, offset: 0};
		F.line = 212;
		result_504250 = r_504401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_504250;

}

function new_basic_block_504238(tp_504241) {
	var result_504242 = null;

	var F={procname:"compile.newBasicBlock",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 82;
		result_504242 = new_504245();
		F.line = 83;
		result_504242.seenReturn = false;
		F.line = 84;
		result_504242.tp = tp_504241;
	framePtr = F.prev;

	return result_504242;

}

function new_compiler_unit_504437(st_504439, node_504440, code_name_504441) {
	var result_504442 = null;

	var F={procname:"compile.newCompilerUnit",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 89;
		result_504442 = new_504445();
		F.line = 90;
		result_504442.ste = get_ste_436078(st_504439, node_504440);
		F.line = 91;
		if (result_504442.blocks != null) { result_504442.blocks.push(new_basic_block_504238(0)); } else { result_504442.blocks = [new_basic_block_504238(0)]; };
		F.line = 92;
		result_504442.codeName = code_name_504441;
	framePtr = F.prev;

	return result_504442;

}

function new_compiler_504647(root_504649, file_name_504650) {
	var result_504651 = null;

	var F={procname:"compile.newCompiler",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 96;
		result_504651 = new_504654();
		F.line = 97;
		result_504651.st = new_sym_table_466543(root_504649);
		F.line = 98;
		if (result_504651.units != null) { result_504651.units.push(new_compiler_unit_504437(result_504651.st, root_504649, new_py_str_176092(makeNimstrLit("<module>")))); } else { result_504651.units = [new_compiler_unit_504437(result_504651.st, root_504649, new_py_str_176092(makeNimstrLit("<module>")))]; };
		F.line = 99;
		result_504651.fileName = file_name_504650;
	framePtr = F.prev;

	return result_504651;

}

function len_505130(cb_505132) {
	var result_505133 = 0;

	var F={procname:"compile.len",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 137;
		result_505133 = (cb_505132.instrSeq != null ? cb_505132.instrSeq.length : 0);
	framePtr = F.prev;

	return result_505133;

}

function HEX5BHEX5D_505067(s_505073, i_505075) {
	var result_505077 = [null, 0];
	var result_505077_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_505077 = s_505073; result_505077_Idx = chckIndx(subInt((s_505073 != null ? s_505073.length : 0), i_505075), 0, s_505073.length+0-1)-0;
	framePtr = F.prev;

	return [result_505077, result_505077_Idx];

}

function tcb_505058(cu_505060) {
		var Tmp1;

	var result_505061 = null;

	var F={procname:"compile.tcb",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 131;
		result_505061 = (Tmp1 = HEX5BHEX5D_505067(cu_505060.blocks, 1), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_505061;

}

function find_504898(a_504903, item_504905) {
	var result_504906 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_504915 = null;
			F.line = 3911;
			var i_504939 = 0;
			F.line = 3912;
			var l_504941 = (a_504903 != null ? a_504903.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_504939 < l_504941)) break L3;
						F.line = 3914;
						i_504915 = a_504903[chckIndx(i_504939, 0, a_504903.length+0-1)-0];
						if ((i_504915 == item_504905)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_504906 = addInt(result_504906, 1);
						F.line = 3915;
						i_504939 = addInt(i_504939, 1);
						if (!(((a_504903 != null ? a_504903.length : 0) == l_504941))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_504906 = -1;
	} while (false);
	framePtr = F.prev;

	return result_504906;

}

function constant_id_504892(cu_504894, py_object_504895) {
	var result_504896 = 0;

	var F={procname:"compile.constantId",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 112;
		result_504896 = find_504898(cu_504894.constants, py_object_504895);
		if (!((result_504896 == -1))) {
		F.line = 114;
		break BeforeRet;
		}
		
		F.line = 115;
		result_504896 = (cu_504894.constants != null ? cu_504894.constants.length : 0);
		F.line = 116;
		if (cu_504894.constants != null) { cu_504894.constants.push(py_object_504895); } else { cu_504894.constants = [py_object_504895]; };
	} while (false);
	framePtr = F.prev;

	return result_504896;

}

function new_503603() {
	var result_503608 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_503801 = null;
		F.line = 211;
		r_503801 = {m_type: NTI503045, opArg: 0, opCode: 0, lineNo: 0};
		F.line = 212;
		result_503608 = r_503801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_503608;

}

function new_arg_instr_503437(op_code_503439, op_arg_503440, line_no_503441) {
	var result_503442 = null;

	var F={procname:"compile.newArgInstr",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!((ConstSet21[op_code_503439] != undefined))) {
		F.line = 67;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(67, 10) `contains({OpCode.STORE_NAME, OpCode.DELETE_NAME, OpCode.UNPACK_SEQUENCE,\x0A          OpCode.FOR_ITER, OpCode.UNPACK_EX, OpCode.STORE_ATTR, OpCode.DELETE_ATTR,\x0A          OpCode.STORE_GLOBAL, OpCode.DELETE_GLOBAL, OpCode.LOAD_CONST,\x0A          OpCode.LOAD_NAME, OpCode.BUILD_TUPLE, OpCode.BUILD_LIST,\x0A          OpCode.BUILD_SET, OpCode.BUILD_MAP, OpCode.LOAD_ATTR, OpCode.COMPARE_OP,\x0A          OpCode.IMPORT_NAME, OpCode.IMPORT_FROM, OpCode.JUMP_FORWARD,\x0A          OpCode.JUMP_IF_FALSE_OR_POP, OpCode.JUMP_IF_TRUE_OR_POP,\x0A          OpCode.JUMP_ABSOLUTE, OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE,\x0A          OpCode.LOAD_GLOBAL, OpCode.SETUP_FINALLY, OpCode.LOAD_FAST,\x0A          OpCode.STORE_FAST, OpCode.DELETE_FAST, OpCode.RAISE_VARARGS,\x0A          OpCode.CALL_FUNCTION, OpCode.MAKE_FUNCTION, OpCode.BUILD_SLICE,\x0A          OpCode.LOAD_CLOSURE, OpCode.LOAD_DEREF, OpCode.STORE_DEREF,\x0A          OpCode.DELETE_DEREF, OpCode.CALL_FUNCTION_KW, OpCode.CALL_FUNCTION_EX,\x0A          OpCode.SETUP_WITH, OpCode.EXTENDED_ARG, OpCode.LIST_APPEND,\x0A          OpCode.SET_ADD, OpCode.MAP_ADD, OpCode.LOAD_CLASSDEREF,\x0A          OpCode.BUILD_LIST_UNPACK, OpCode.BUILD_MAP_UNPACK,\x0A          OpCode.BUILD_MAP_UNPACK_WITH_CALL, OpCode.BUILD_TUPLE_UNPACK,\x0A          OpCode.BUILD_SET_UNPACK, OpCode.SETUP_ASYNC_WITH, OpCode.FORMAT_VALUE,\x0A          OpCode.BUILD_CONST_KEY_MAP, OpCode.BUILD_STRING,\x0A          OpCode.BUILD_TUPLE_UNPACK_WITH_CALL, OpCode.LOAD_METHOD,\x0A          OpCode.CALL_METHOD, OpCode.CALL_FINALLY, OpCode.POP_FINALLY,\x0A          OpCode.EXCEPT_HANDLER}, opCode)` "));
		}
		
		F.line = 68;
		result_503442 = new_503603();
		F.line = 69;
		result_503442.opCode = op_code_503439;
		F.line = 70;
		result_503442.opArg = op_arg_503440;
		F.line = 71;
		result_503442.lineNo = line_no_503441;
	framePtr = F.prev;

	return result_503442;

}

function add_op_505445(cu_505447, instr_505448) {
		var Tmp1;

	var F={procname:"compile.addOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 156;
		if ((Tmp1 = HEX5BHEX5D_505067(cu_505447.blocks, 1), Tmp1[0])[Tmp1[1]].instrSeq != null) { (Tmp1 = HEX5BHEX5D_505067(cu_505447.blocks, 1), Tmp1[0])[Tmp1[1]].instrSeq.push(instr_505448); } else { (Tmp1 = HEX5BHEX5D_505067(cu_505447.blocks, 1), Tmp1[0])[Tmp1[1]].instrSeq = [instr_505448]; };
	framePtr = F.prev;

	
}

function add_load_const_505641(cu_505643, py_object_505644, line_no_505645) {
	var F={procname:"compile.addLoadConst",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 172;
		var arg_505646 = constant_id_504892(cu_505643, py_object_505644);
		F.line = 173;
		var instr_505648 = new_arg_instr_503437(71, arg_505646, line_no_505645);
		F.line = 174;
		add_op_505445(cu_505643, instr_505648);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_505212(s_505218, i_505220) {
	var result_505222 = [null, 0];
	var result_505222_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_505222 = s_505218; result_505222_Idx = chckIndx(subInt((s_505218 != null ? s_505218.length : 0), i_505220), 0, s_505218.length+0-1)-0;
	framePtr = F.prev;

	return [result_505222, result_505222_Idx];

}

function last_line_no_505154(cu_505156) {
							var Tmp5;
								var Tmp6;
								var Tmp7;

	var result_505157 = 0;

	var F={procname:"compile.lastLineNo",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 141;
			var i_505176 = 0;
			F.line = 2104;
			var colontmp__505249 = 0;
			F.line = 141;
			colontmp__505249 = (cu_505156.blocks != null ? cu_505156.blocks.length : 0);
			F.line = 2107;
			var res_505252 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_505252 <= colontmp__505249)) break L3;
						F.line = 2109;
						i_505176 = res_505252;
						L4: do {
							F.line = 142;
							switch (len_505130((Tmp5 = HEX5BHEX5D_505067(cu_505156.blocks, i_505176), Tmp5[0])[Tmp5[1]])) {
							case 0:
								F.line = 144;
								break L4;
								break;
							default: 
								F.line = 146;
								result_505157 = (Tmp7 = HEX5BHEX5D_505212((Tmp6 = HEX5BHEX5D_505067(cu_505156.blocks, i_505176), Tmp6[0])[Tmp6[1]].instrSeq, 1), Tmp7[0])[Tmp7[1]].lineNo;
								break BeforeRet;
								break;
							}
						} while(false);
						F.line = 2110;
						res_505252 = addInt(res_505252, 1);
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_505157;

}

function new_503203() {
	var result_503208 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_503401 = null;
		F.line = 211;
		r_503401 = {m_type: NTI503041, opCode: 0, lineNo: 0};
		F.line = 212;
		result_503208 = r_503401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_503208;

}

function new_instr_503133(op_code_503135, line_no_503136) {
	var result_503137 = null;

	var F={procname:"compile.newInstr",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(!((ConstSet22[op_code_503135] != undefined)))) {
		F.line = 61;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(61, 9) `not contains({OpCode.STORE_NAME, OpCode.DELETE_NAME, OpCode.UNPACK_SEQUENCE,\x0A             OpCode.FOR_ITER, OpCode.UNPACK_EX, OpCode.STORE_ATTR,\x0A             OpCode.DELETE_ATTR, OpCode.STORE_GLOBAL, OpCode.DELETE_GLOBAL,\x0A             OpCode.LOAD_CONST, OpCode.LOAD_NAME, OpCode.BUILD_TUPLE,\x0A             OpCode.BUILD_LIST, OpCode.BUILD_SET, OpCode.BUILD_MAP,\x0A             OpCode.LOAD_ATTR, OpCode.COMPARE_OP, OpCode.IMPORT_NAME,\x0A             OpCode.IMPORT_FROM, OpCode.JUMP_FORWARD, OpCode.JUMP_IF_FALSE_OR_POP,\x0A             OpCode.JUMP_IF_TRUE_OR_POP, OpCode.JUMP_ABSOLUTE,\x0A             OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE,\x0A             OpCode.LOAD_GLOBAL, OpCode.SETUP_FINALLY, OpCode.LOAD_FAST,\x0A             OpCode.STORE_FAST, OpCode.DELETE_FAST, OpCode.RAISE_VARARGS,\x0A             OpCode.CALL_FUNCTION, OpCode.MAKE_FUNCTION, OpCode.BUILD_SLICE,\x0A             OpCode.LOAD_CLOSURE, OpCode.LOAD_DEREF, OpCode.STORE_DEREF,\x0A             OpCode.DELETE_DEREF, OpCode.CALL_FUNCTION_KW,\x0A             OpCode.CALL_FUNCTION_EX, OpCode.SETUP_WITH, OpCode.EXTENDED_ARG,\x0A             OpCode.LIST_APPEND, OpCode.SET_ADD, OpCode.MAP_ADD,\x0A             OpCode.LOAD_CLASSDEREF, OpCode.BUILD_LIST_UNPACK,\x0A             OpCode.BUILD_MAP_UNPACK, OpCode.BUILD_MAP_UNPACK_WITH_CALL,\x0A             OpCode.BUILD_TUPLE_UNPACK, OpCode.BUILD_SET_UNPACK,\x0A             OpCode.SETUP_ASYNC_WITH, OpCode.FORMAT_VALUE,\x0A             OpCode.BUILD_CONST_KEY_MAP, OpCode.BUILD_STRING,\x0A             OpCode.BUILD_TUPLE_UNPACK_WITH_CALL, OpCode.LOAD_METHOD,\x0A             OpCode.CALL_METHOD, OpCode.CALL_FINALLY, OpCode.POP_FINALLY,\x0A             OpCode.EXCEPT_HANDLER}, opCode)` "));
		}
		
		F.line = 62;
		result_503137 = new_503203();
		F.line = 63;
		result_503137.opCode = op_code_503135;
		F.line = 64;
		result_503137.lineNo = line_no_503136;
	framePtr = F.prev;

	return result_503137;

}

function new_py_code_498257(code_name_498259, file_name_498260, length_498261) {
	var result_498262 = null;

	var F={procname:"codeobject.newPyCode",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 36;
		result_498262 = new_py_code_simple_497401();
		F.line = 45;
		result_498262.codeName = code_name_498259;
		F.line = 46;
		result_498262.fileName = file_name_498260;
	framePtr = F.prev;

	return result_498262;

}

function num_codes_505286(cu_505288) {
	var result_505289 = 0;

	var F={procname:"compile.numCodes",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 152;
			var b_505415 = null;
			F.line = 3909;
			var colontmp__505426 = null;
			F.line = 152;
			colontmp__505426 = cu_505288.blocks;
			F.line = 3911;
			var i_505429 = 0;
			F.line = 3912;
			var l_505431 = (colontmp__505426 != null ? colontmp__505426.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_505429 < l_505431)) break L3;
						F.line = 3914;
						b_505415 = colontmp__505426[chckIndx(i_505429, 0, colontmp__505426.length+0-1)-0];
						F.line = 153;
						result_505289 = addInt(result_505289, len_505130(b_505415));
						F.line = 3915;
						i_505429 = addInt(i_505429, 1);
						if (!(((colontmp__505426 != null ? colontmp__505426.length : 0) == l_505431))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_505289;

}

function len_498414(code_498416) {
	var result_498417 = 0;

	var F={procname:"codeobject.len",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 49;
		result_498417 = (code_498416.code != null ? code_498416.code.length : 0);
	framePtr = F.prev;

	return result_498417;

}

function add_op_code_498490(code_498492, instr_498497) {
	var F={procname:"codeobject.addOpCode",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 65;
		addInt(code_498492.opCodes, mulInt(len_498414(code_498492), 1))[0] = instr_498497.Field0;
		F.line = 66;
		addInt(code_498492.opArgs, mulInt(len_498414(code_498492), 4))[0] = instr_498497.Field1;
		F.line = 67;
		if (code_498492.code != null) { code_498492.code.push({Field0: instr_498497.Field0, Field1: instr_498497.Field1}); } else { code_498492.code = [{Field0: instr_498497.Field0, Field1: instr_498497.Field1}]; };
		F.line = 68;
		var Tmp1 = nimCopy(null, instr_498497.Field2, NTI104);
		if (code_498492.lineNos != null) { code_498492.lineNos.push(Tmp1); } else { code_498492.lineNos = [Tmp1]; };
	framePtr = F.prev;

	
}

function new_seq_450278(len_450282) {
	var result_450284 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_450284 = new Array(len_450282); for (var i=0;i<len_450282;++i) {result_450284[i]=null;}	framePtr = F.prev;

	return result_450284;

}

function to_inverse_seq_450262(t_450271) {
	var result_450273 = null;

	var F={procname:"symtable.toInverseSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 121;
		result_450273 = nimCopy(null, new_seq_450278(chckRange(len_445683(t_450271), 0, 2147483647)), NTI450283);
		L1: do {
			F.line = 122;
			var name_451298 = null;
			F.line = 122;
			var id_451299 = 0;
			L2: do {
				F.line = 272;
				var h_451304 = 0;
				F.line = 2104;
				var colontmp__451306 = 0;
				F.line = 272;
				colontmp__451306 = (t_450271.data != null ? (t_450271.data.length-1) : -1);
				F.line = 2107;
				var res_451308 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_451308 <= colontmp__451306)) break L4;
							F.line = 2109;
							h_451304 = res_451308;
							if (is_filled_146491(t_450271.data[chckIndx(h_451304, 0, t_450271.data.length+0-1)-0].Field0)) {
							F.line = 273;
							name_451298 = t_450271.data[chckIndx(h_451304, 0, t_450271.data.length+0-1)-0].Field1;
							F.line = 273;
							id_451299 = t_450271.data[chckIndx(h_451304, 0, t_450271.data.length+0-1)-0].Field2;
							F.line = 123;
							result_450273[chckIndx(id_451299, 0, result_450273.length+0-1)-0] = name_451298;
							}
							
							F.line = 2110;
							res_451308 = addInt(res_451308, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_450273;

}

function names_to_seq_451324(ste_451326) {
	var result_451328 = null;

	var F={procname:"symtable.namesToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 126;
		result_451328 = nimCopy(null, to_inverse_seq_450262(ste_451326.names), NTI450272);
	framePtr = F.prev;

	return result_451328;

}

function local_vars_to_seq_451342(ste_451344) {
	var result_451346 = null;

	var F={procname:"symtable.localVarsToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 129;
		result_451346 = nimCopy(null, to_inverse_seq_450262(ste_451344.localVars), NTI450272);
	framePtr = F.prev;

	return result_451346;

}

function cell_vars_to_seq_451360(ste_451362) {
	var result_451364 = null;

	var F={procname:"symtable.cellVarsToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 132;
		result_451364 = nimCopy(null, to_inverse_seq_450262(ste_451362.cellVars), NTI450272);
	framePtr = F.prev;

	return result_451364;

}

function free_vars_to_seq_451378(ste_451380) {
	var result_451382 = null;

	var F={procname:"symtable.freeVarsToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 135;
		result_451382 = nimCopy(null, to_inverse_seq_450262(ste_451380.freeVars), NTI450272);
	framePtr = F.prev;

	return result_451382;

}

function new_seq_506257(len_506261) {
	var result_506263 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_506263 = new Array(len_506261); for (var i=0;i<len_506261;++i) {result_506263[i]={Field0: 0, Field1: 0};}	framePtr = F.prev;

	return result_506263;

}

function HEX5BHEX5D_439040(t_439047, key_439049) {
	var result_439051 = [null, 0];
	var result_439051_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_439053 = [0];
		F.line = 161;
		var index_439806 = raw_get_439055(t_439047, key_439049, hc_439053, 0);
		if ((0 <= index_439806)) {
		F.line = 162;
		result_439051 = t_439047.data[chckIndx(index_439806, 0, t_439047.data.length+0-1)-0]; result_439051_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_440206 = null;
			F.line = 2896;
			e_440206 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_440206.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_157579(key_439049)), NTI138);
			F.line = 2891;
			e_440206.parent = null;
			F.line = 165;
			raiseException(e_440206, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_439051, result_439051_Idx];

}

function get_scope_438803(ste_438805, name_438806) {
		var Tmp1;

	var result_438807 = 0;

	var F={procname:"symtable.getScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 80;
		result_438807 = (Tmp1 = HEX5BHEX5D_439040(ste_438805.scopes, name_438806), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_438807;

}

function HEX5BHEX5D_443903(t_443910, key_443912) {
	var result_443914 = [null, 0];
	var result_443914_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_443916 = [0];
		F.line = 161;
		var index_444669 = raw_get_443918(t_443910, key_443912, hc_443916, 0);
		if ((0 <= index_444669)) {
		F.line = 162;
		result_443914 = t_443910.data[chckIndx(index_444669, 0, t_443910.data.length+0-1)-0]; result_443914_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_445006 = null;
			F.line = 2896;
			e_445006 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_445006.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_157579(key_443912)), NTI138);
			F.line = 2891;
			e_445006.parent = null;
			F.line = 165;
			raiseException(e_445006, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_443914, result_443914_Idx];

}

function local_id_443666(ste_443668, local_name_443669) {
		var Tmp1;

	var result_443670 = 0;

	var F={procname:"symtable.localId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 97;
		result_443670 = (Tmp1 = HEX5BHEX5D_443903(ste_443668.localVars, local_name_443669), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_443670;

}

function has_key_445193(t_445199, key_445201) {
	var result_445202 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_445203 = [0];
		F.line = 264;
		result_445202 = (0 <= raw_get_443918(t_445199, key_445201, hc_445203, 0));
	framePtr = F.prev;

	return result_445202;

}

function name_id_445042(ste_445044, name_str_445045) {
		var Tmp1;

	var result_445046 = 0;

	var F={procname:"symtable.nameId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (has_key_445193(ste_445044.names, name_str_445045)) {
		F.line = 102;
		result_445046 = (Tmp1 = HEX5BHEX5D_443903(ste_445044.names, name_str_445045), Tmp1[0])[Tmp1[1]];
		break BeforeRet;
		}
		else {
			F.line = 104;
			result_445046 = len_445683(ste_445044.names);
			F.line = 105;
			HEX5BHEX5DHEX3D_445850(ste_445044.names, name_str_445045, result_445046);
		}
		
	} while (false);
	framePtr = F.prev;

	return result_445046;

}

function cell_id_449176(ste_449178, name_str_449179) {
		var Tmp1;

	var result_449180 = 0;

	var F={procname:"symtable.cellId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 108;
		result_449180 = (Tmp1 = HEX5BHEX5D_443903(ste_449178.cellVars, name_str_449179), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_449180;

}

function assemble_505778(cu_505780, file_name_505781) {
	var result_505782 = null;

	var F={procname:"compile.assemble",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 243;
			var i_505800 = 0;
			F.line = 3616;
			var colontmp__506603 = 0;
			F.line = 243;
			colontmp__506603 = subInt((cu_505780.blocks != null ? cu_505780.blocks.length : 0), 1);
			F.line = 3617;
			var i_506606 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_506606 < colontmp__506603)) break L3;
						F.line = 3619;
						i_505800 = i_506606;
						F.line = 244;
						var last_block_505801 = cu_505780.blocks[chckIndx(i_505800, 0, cu_505780.blocks.length+0-1)-0];
						F.line = 245;
						var this_block_505802 = cu_505780.blocks[chckIndx(addInt(i_505800, 1), 0, cu_505780.blocks.length+0-1)-0];
						F.line = 246;
						this_block_505802.offset = addInt(last_block_505801.offset, len_505130(last_block_505801));
						F.line = 3620;
						i_506606 = addInt(i_506606, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 248;
			var cb_505811 = null;
			F.line = 3909;
			var colontmp__506617 = null;
			F.line = 248;
			colontmp__506617 = cu_505780.blocks;
			F.line = 3911;
			var i_506620 = 0;
			F.line = 3912;
			var l_506622 = (colontmp__506617 != null ? colontmp__506617.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_506620 < l_506622)) break L6;
						F.line = 3914;
						cb_505811 = colontmp__506617[chckIndx(i_506620, 0, colontmp__506617.length+0-1)-0];
						L7: do {
							F.line = 249;
							var instr_506015 = null;
							F.line = 3909;
							var colontmp__506611 = null;
							F.line = 249;
							colontmp__506611 = cb_505811.instrSeq;
							F.line = 3911;
							var i_506614 = 0;
							F.line = 3912;
							var l_506616 = (colontmp__506611 != null ? colontmp__506611.length : 0);
							L8: do {
								F.line = 3913;
									L9: while (true) {
									if (!(i_506614 < l_506616)) break L9;
										F.line = 3914;
										instr_506015 = colontmp__506611[chckIndx(i_506614, 0, colontmp__506611.length+0-1)-0];
										if (isObj(instr_506015.m_type, NTI503048)) {
										F.line = 251;
										var jump_instr_506027 = instr_506015;
										F.line = 252;
										jump_instr_506027.opArg = jump_instr_506027.target.offset;
										}
										
										F.line = 3915;
										i_506614 = addInt(i_506614, 1);
										if (!(((colontmp__506611 != null ? colontmp__506611.length : 0) == l_506616))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 3915;
						i_506620 = addInt(i_506620, 1);
						if (!(((colontmp__506617 != null ? colontmp__506617.length : 0) == l_506622))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!(tcb_505058(cu_505780).seenReturn)) {
		F.line = 256;
		add_load_const_505641(cu_505780, py_none_356044, last_line_no_505154(cu_505780));
		F.line = 257;
		add_op_505445(cu_505780, new_instr_503133(54, last_line_no_505154(cu_505780)));
		}
		
		F.line = 259;
		result_505782 = new_py_code_498257(cu_505780.codeName, file_name_505781, num_codes_505286(cu_505780));
		L10: do {
			F.line = 260;
			var cb_506037 = null;
			F.line = 3909;
			var colontmp__506631 = null;
			F.line = 260;
			colontmp__506631 = cu_505780.blocks;
			F.line = 3911;
			var i_506634 = 0;
			F.line = 3912;
			var l_506636 = (colontmp__506631 != null ? colontmp__506631.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_506634 < l_506636)) break L12;
						F.line = 3914;
						cb_506037 = colontmp__506631[chckIndx(i_506634, 0, colontmp__506631.length+0-1)-0];
						L13: do {
							F.line = 261;
							var instr_506046 = null;
							F.line = 3909;
							var colontmp__506625 = null;
							F.line = 261;
							colontmp__506625 = cb_506037.instrSeq;
							F.line = 3911;
							var i_506628 = 0;
							F.line = 3912;
							var l_506630 = (colontmp__506625 != null ? colontmp__506625.length : 0);
							L14: do {
								F.line = 3913;
									L15: while (true) {
									if (!(i_506628 < l_506630)) break L15;
										F.line = 3914;
										instr_506046 = colontmp__506625[chckIndx(i_506628, 0, colontmp__506625.length+0-1)-0];
										F.line = 262;
										add_op_code_498490(result_505782, to_tuple_504853(instr_506046));
										F.line = 3915;
										i_506628 = addInt(i_506628, 1);
										if (!(((colontmp__506625 != null ? colontmp__506625.length : 0) == l_506630))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 3915;
						i_506634 = addInt(i_506634, 1);
						if (!(((colontmp__506631 != null ? colontmp__506631.length : 0) == l_506636))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 263;
		result_505782.constants = nimCopy(null, cu_505780.constants, NTI503066);
		F.line = 264;
		result_505782.names = nimCopy(null, names_to_seq_451324(cu_505780.ste), NTI451327);
		F.line = 265;
		result_505782.localVars = nimCopy(null, local_vars_to_seq_451342(cu_505780.ste), NTI451345);
		F.line = 267;
		result_505782.cellVars = nimCopy(null, cell_vars_to_seq_451360(cu_505780.ste), NTI451363);
		F.line = 268;
		result_505782.freeVars = nimCopy(null, free_vars_to_seq_451378(cu_505780.ste), NTI451381);
		F.line = 269;
		result_505782.argNames = nimCopy(null, new_seq_450278(chckRange(len_445683(cu_505780.ste.argVars), 0, 2147483647)), NTI450283);
		F.line = 270;
		result_505782.argScopes = nimCopy(null, new_seq_506257(chckRange(len_445683(cu_505780.ste.argVars), 0, 2147483647)), NTI506262);
		L16: do {
			F.line = 271;
			var arg_name_506487 = null;
			F.line = 271;
			var arg_idx_506488 = 0;
			F.line = 270;
			var colontmp__506638 = {data: null, counter: 0};
			F.line = 271;
			nimCopy(colontmp__506638, cu_505780.ste.argVars, NTI435186);
			L17: do {
				F.line = 272;
				var h_506642 = 0;
				F.line = 2104;
				var colontmp__506644 = 0;
				F.line = 272;
				colontmp__506644 = (colontmp__506638.data != null ? (colontmp__506638.data.length-1) : -1);
				F.line = 2107;
				var res_506646 = 0;
				L18: do {
					F.line = 2108;
						L19: while (true) {
						if (!(res_506646 <= colontmp__506644)) break L19;
							F.line = 2109;
							h_506642 = res_506646;
							if (is_filled_146491(colontmp__506638.data[chckIndx(h_506642, 0, colontmp__506638.data.length+0-1)-0].Field0)) {
							F.line = 273;
							arg_name_506487 = colontmp__506638.data[chckIndx(h_506642, 0, colontmp__506638.data.length+0-1)-0].Field1;
							F.line = 273;
							arg_idx_506488 = colontmp__506638.data[chckIndx(h_506642, 0, colontmp__506638.data.length+0-1)-0].Field2;
							F.line = 272;
							var scope_506489 = get_scope_438803(cu_505780.ste, arg_name_506487);
							F.line = 273;
							var scope_idx_506490 = 0;
							F.line = 274;
							switch (scope_506489) {
							case 0:
								F.line = 276;
								scope_idx_506490 = local_id_443666(cu_505780.ste, arg_name_506487);
								break;
							case 3:
								F.line = 278;
								scope_idx_506490 = name_id_445042(cu_505780.ste, arg_name_506487);
								break;
							case 1:
								F.line = 280;
								scope_idx_506490 = cell_id_449176(cu_505780.ste, arg_name_506487);
								break;
							case 2:
								F.line = 2895;
								var e_506500 = null;
								F.line = 2896;
								e_506500 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
								F.line = 282;
								e_506500.message = nimCopy(null, makeNimstrLit("arguments can\'t be free"), NTI138);
								F.line = 2891;
								e_506500.parent = null;
								F.line = 282;
								raiseException(e_506500, "InternalError");
								break;
							}
							F.line = 283;
							result_505782.argNames[chckIndx(arg_idx_506488, 0, result_505782.argNames.length+0-1)-0] = arg_name_506487;
							F.line = 284;
							nimCopy(result_505782.argScopes[chckIndx(arg_idx_506488, 0, result_505782.argScopes.length+0-1)-0], {Field0: scope_506489, Field1: scope_idx_506490}, NTI497148);
							}
							
							F.line = 2110;
							res_506646 = addInt(res_506646, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_505782;

}

function HEX5BHEX5D_504995(s_505001, i_505003) {
	var result_505005 = [null, 0];
	var result_505005_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_505005 = s_505001; result_505005_Idx = chckIndx(subInt((s_505001 != null ? s_505001.length : 0), i_505003), 0, s_505001.length+0-1)-0;
	framePtr = F.prev;

	return [result_505005, result_505005_Idx];

}

function tcu_504986(c_504988) {
		var Tmp1;

	var result_504989 = null;

	var F={procname:"compile.tcu",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 121;
		result_504989 = (Tmp1 = HEX5BHEX5D_504995(c_504988.units, 1), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_504989;

}

function compile_513014(ast_root_513016, file_name_513017) {
	var result_513018 = null;

	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 843;
		F.line = 843;
		var c_513019 = new_compiler_504647(ast_root_513016, new_py_str_176092(file_name_513017));
		F.line = 844;
++excHandler;
		try {
		F.line = 845;
		compile_507538(c_513019, ast_root_513016);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156090))) {
		F.line = 847;
		var e_513020 = getCurrentException();
		F.line = 848;
		result_513018 = from_bltin_syntax_error_496349(e_513020, new_py_str_176092(file_name_513017));
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		result_513018 = assemble_505778(tcu_504986(c_513019), c_513019.fileName);
	} while (false);
	framePtr = F.prev;

	return result_513018;

}

function compile_513054(input_513056, file_name_513057) {
	var result_513058 = null;

	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 860;
++excHandler;
		try {
		F.line = 861;
		var ast_root_513059 = ast_434236(input_513056);
		F.line = 862;
		result_513058 = compile_513014(ast_root_513059, file_name_513057);
		break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156090))) {
		F.line = 864;
		var e_513060 = getCurrentException();
		F.line = 865;
		result_513058 = from_bltin_syntax_error_496349(e_513060, new_py_str_176092(file_name_513057));
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
	} while (false);
	framePtr = F.prev;

	return result_513058;

}

function interactivePython(input_670007) {
			var Tmp2;
			var Tmp3;

	var result_670008 = false;

	var F={procname:"python.interactivePython",prev:framePtr,filename:"jspython.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 16;
		F.line = 16;
		rawEcho(cstrToNimstr(input_670007));
		if (finished_670001[0]) {
		F.line = 18;
		root_cst_670002[0] = null;
		F.line = 19;
		clear_indent_345872(lexer_inst_670003);
		}
		else {
			if (!(!((root_cst_670002[0] === null)))) {
			F.line = 21;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/jspython.nim(21, 5) `not isNil(rootCst)` "));
			}
			
		}
		
		F.line = 23;
++excHandler;
		try {
		F.line = 24;
		root_cst_670002[0] = parse_with_state_351248(cstrToNimstr(input_670007), lexer_inst_670003, 0, root_cst_670002[0]);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156090))) {
		F.line = 26;
		var e_670202 = getCurrentException();
		F.line = 27;
		var excp_obj_670203 = from_bltin_syntax_error_496349(e_670202, new_py_str_176092(makeNimstrLit("<stdin>")));
		F.line = 28;
		print_tb_608216(excp_obj_670203);
		F.line = 29;
		finished_670001[0] = true;
		F.line = 30;
		result_670008 = true;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		if ((root_cst_670002[0] === null)) {
		F.line = 33;
		result_670008 = true;
		break BeforeRet;
		}
		
		F.line = 34;
		finished_670001[0] = finished_350088(root_cst_670002[0]);
		if (!(finished_670001[0])) {
		F.line = 36;
		result_670008 = false;
		break BeforeRet;
		}
		
		F.line = 38;
		var compile_res_670211 = compile_513054(root_cst_670002[0], makeNimstrLit("<stdin>"));
			if (of_py_exception_object_358259(compile_res_670211)) {
			Tmp2 = compile_res_670211.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 40;
		print_tb_608216(compile_res_670211);
		F.line = 41;
		result_670008 = true;
		break BeforeRet;
		}
		
		F.line = 42;
		var co_670212 = compile_res_670211;
		F.line = 47;
		var globals_670401 = null;
		if (!((prev_f_670004[0] == null))) {
		F.line = 49;
		globals_670401 = prev_f_670004[0].globals;
		}
		else {
			F.line = 51;
			globals_670401 = new_py_dict_532257();
		}
		
		F.line = 52;
		var fun_670413 = new_py_func_552057(new_py_string_176075(makeNimstrLit("Bla")), co_670212, globals_670401, null);
		F.line = 53;
		var f_670414 = new_py_frame_561047(fun_670413);
		F.line = 54;
		var ret_obj_670415 = eval_frame_561056(f_670414);
			if (of_py_exception_object_358259(ret_obj_670415)) {
			Tmp3 = ret_obj_670415.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 56;
		print_tb_608216(ret_obj_670415);
		}
		else {
			F.line = 58;
			prev_f_670004[0] = f_670414;
		}
		
		result_670008 = true;
	} while (false);
	framePtr = F.prev;

	return result_670008;

}

function py_init_668614(args_668617) {
	var F={procname:"lifecycle.pyInit",prev:framePtr,filename:"lifecycle.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 24;
			var t_668815 = null;
			F.line = 3911;
			var i_669004 = 0;
			F.line = 3912;
			var l_669006 = (bltin_types_158717[0] != null ? bltin_types_158717[0].length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_669004 < l_669006)) break L3;
						F.line = 3914;
						t_668815 = bltin_types_158717[0][chckIndx(i_669004, 0, bltin_types_158717[0].length+0-1)-0];
						F.line = 25;
						type_ready_637659(t_668815);
						F.line = 3915;
						i_669004 = addInt(i_669004, 1);
						if (!(((bltin_types_158717[0] != null ? bltin_types_158717[0].length : 0) == l_669006))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}
var finished_670001 = [true];
var root_cst_670002 = [null];
var lexer_inst_670003 = new_lexer_345814(makeNimstrLit("<stdin>"));
var prev_f_670004 = [null];
py_init_668614([]);

function sys_fatal_16979(message_16985) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_16987 = null;
		F.line = 2916;
		e_16987 = {m_type: NTI3886, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_16987.message = nimCopy(null, message_16985, NTI138);
		F.line = 2918;
		raiseException(e_16987, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_16976, p_16976_Idx) {
		if ((p_16976_Idx == 0)) {
		sys_fatal_16979(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function HEX24_375898(e_375900) {
	var result_375901 = null;

	var F={procname:"exceptions.$",prev:framePtr,filename:"../Objects/exceptions.nim",line:0};
	framePtr = F;
		F.line = 144;
		result_375901 = nimCopy(null, (makeNimstrLit("Error: ")).concat(reprEnum(e_375900.tk, NTI357160),makeNimstrLit(" ")), NTI138);
		if (!((e_375900.msg === null))) {
		F.line = 146;
		if (result_375901 != null) { result_375901 = (result_375901).concat(HEX24_157579(e_375900.msg)); } else { result_375901 = HEX24_157579(e_375900.msg).slice(); };
		}
		
	framePtr = F.prev;

	return result_375901;

}

function HEX24_176057(str_obj_176059) {
	var result_176060 = null;

	var F={procname:"stringobject.$",prev:framePtr,filename:"../Objects/stringobject.nim",line:0};
	framePtr = F;
		F.line = 10;
		result_176060 = nimCopy(null, (makeNimstrLit("\"")).concat(str_obj_176059.str,makeNimstrLit("\"")), NTI138);
	framePtr = F.prev;

	return result_176060;

}

function HEX24_381297(i_381299) {
	var result_381300 = null;

	var F={procname:"numobjects.$",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 467;
		F.line = 467;
		var str_seq_381302 = null;
		if (zero_378388(i_381299)) {
		F.line = 469;
		result_381300 = nimCopy(null, makeNimstrLit("0"), NTI138);
		break BeforeRet;
		}
		
		F.line = 470;
		var ii_381303 = copy_378438(i_381299);
		F.line = 471;
		var r_381304 = null;
		L1: do {
			F.line = 472;
				L2: while (true) {
				if (!true) break L2;
					F.line = 473;
					var __381305 = do_div_380243(ii_381303, py_int_ten_378349);
					F.line = 473;
					ii_381303 = __381305["Field0"];
					F.line = 473;
					r_381304 = __381305["Field1"];
					F.line = 474;
					if (str_seq_381302 != null) { str_seq_381302.push(cstrToNimstr((((r_381304.digits[chckIndx(0, 0, r_381304.digits.length+0-1)-0])|0))+"")); } else { str_seq_381302 = [cstrToNimstr((((r_381304.digits[chckIndx(0, 0, r_381304.digits.length+0-1)-0])|0))+"")]; };
					if (((ii_381303.digits != null ? ii_381303.digits.length : 0) == 0)) {
					F.line = 476;
					break L1;
					}
					
				}
		} while(false);
		if (negative_378363(i_381299)) {
		F.line = 479;
		if (str_seq_381302 != null) { str_seq_381302.push(makeNimstrLit("-")); } else { str_seq_381302 = [makeNimstrLit("-")]; };
		}
		
		result_381300 = nimCopy(null, nsuJoinSep(reversed_381336(str_seq_381302), []), NTI138);
	} while (false);
	framePtr = F.prev;

	return result_381300;

}

function nucruneLen(s_41507) {
	var result_41508 = 0;

	var F={procname:"unicode.runeLen",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
		F.line = 31;
		var i_41510 = 0;
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!(i_41510 < (s_41507 != null ? s_41507.length : 0))) break L2;
					if ((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] <= 127)) {
					F.line = 33;
					i_41510 = addInt(i_41510, 1);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					F.line = 34;
					i_41510 = addInt(i_41510, 2);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 4) == 14)) {
					F.line = 35;
					i_41510 = addInt(i_41510, 3);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 3) == 30)) {
					F.line = 36;
					i_41510 = addInt(i_41510, 4);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 2) == 62)) {
					F.line = 37;
					i_41510 = addInt(i_41510, 5);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 1) == 126)) {
					F.line = 38;
					i_41510 = addInt(i_41510, 6);
					}
					else {
						F.line = 39;
					i_41510 = addInt(i_41510, 1);
					}
					}}}}}
					F.line = 40;
					result_41508 = addInt(result_41508, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_41508;

}

function rune_len_at_41696(s_41698, i_41699) {
	var result_41700 = 0;

	var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
		if ((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] <= 127)) {
		F.line = 44;
		result_41700 = 1;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 5) == 6)) {
		F.line = 45;
		result_41700 = 2;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 4) == 14)) {
		F.line = 46;
		result_41700 = 3;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 3) == 30)) {
		F.line = 47;
		result_41700 = 4;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 2) == 62)) {
		F.line = 48;
		result_41700 = 5;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 1) == 126)) {
		F.line = 49;
		result_41700 = 6;
		}
		else {
			F.line = 50;
			result_41700 = 1;
		}
		}}}}}
	framePtr = F.prev;

	return result_41700;

}

function rune_offset_46235(s_46237, pos_46238, start_46239) {
	var result_46240 = 0;

	var F={procname:"unicode.runeOffset",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 234;
		var i_46242 = 0;
		F.line = 235;
		var o_46243 = start_46239;
		L1: do {
			F.line = 236;
				L2: while (true) {
				if (!(i_46242 < pos_46238)) break L2;
					F.line = 237;
					o_46243 = addInt(o_46243, chckRange(rune_len_at_41696(s_46237, o_46243), 0, 2147483647));
					if (((s_46237 != null ? s_46237.length : 0) <= o_46243)) {
					F.line = 239;
					result_46240 = -1;
					break BeforeRet;
					}
					
					F.line = 240;
					i_46242 = addInt(i_46242, 1);
				}
		} while(false);
		F.line = 241;
		result_46240 = o_46243;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_46240;

}

function validate_utf8_41958(s_41960) {
	var result_41961 = 0;

	var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 133;
		var i_41963 = 0;
		F.line = 134;
		var l_41964 = (s_41960 != null ? s_41960.length : 0);
		L1: do {
			F.line = 135;
				L2: while (true) {
				if (!(i_41963 < l_41964)) break L2;
					if ((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] <= 127)) {
					F.line = 137;
					i_41963 = addInt(i_41963, 1);
					}
					else {
					if ((((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] < 194)) {
					F.line = 139;
					result_41961 = i_41963;
					break BeforeRet;
					}
					
					if (((addInt(i_41963, 1) < l_41964) && (((s_41960[chckIndx(addInt(i_41963, 1), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2))) {
					F.line = 140;
					i_41963 = addInt(i_41963, 2);
					}
					else {
						F.line = 141;
						result_41961 = i_41963;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] >>> 0) >>> 4) == 14)) {
					if ((((addInt(i_41963, 2) < l_41964) && (((s_41960[chckIndx(addInt(i_41963, 1), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2)) && (((s_41960[chckIndx(addInt(i_41963, 2), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2))) {
					F.line = 144;
					i_41963 = addInt(i_41963, 3);
					}
					else {
						F.line = 145;
						result_41961 = i_41963;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] >>> 0) >>> 3) == 30)) {
					if (((((addInt(i_41963, 3) < l_41964) && (((s_41960[chckIndx(addInt(i_41963, 1), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2)) && (((s_41960[chckIndx(addInt(i_41963, 2), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2)) && (((s_41960[chckIndx(addInt(i_41963, 3), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2))) {
					F.line = 150;
					i_41963 = addInt(i_41963, 4);
					}
					else {
						F.line = 151;
						result_41961 = i_41963;
						break BeforeRet;
					}
					
					}
					else {
						F.line = 153;
						result_41961 = i_41963;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		F.line = 154;
		result_41961 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_41961;

}

function align_string_141827(s_141829, minimum_width_141830, align_141831, fill_141832) {
			var Tmp1;

	var result_141833 = null;

	var F={procname:"strformat.alignString",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		if ((minimum_width_141830 == 0)) {
		F.line = 353;
		result_141833 = nimCopy(null, s_141829, NTI138);
		}
		else {
			F.line = 355;
			if ((validate_utf8_41958(s_141829) == -1)) {
			Tmp1 = nucruneLen(s_141829);
			}
			else {
			Tmp1 = (s_141829 != null ? s_141829.length : 0);
			}
			
			var s_rune_len_141835 = Tmp1;
			F.line = 356;
			var to_fill_141836 = subInt(minimum_width_141830, s_rune_len_141835);
			if ((to_fill_141836 <= 0)) {
			F.line = 358;
			result_141833 = nimCopy(null, s_141829, NTI138);
			}
			else {
			if (((align_141831 == 60) || (align_141831 == 0))) {
			F.line = 360;
			result_141833 = nimCopy(null, (s_141829).concat(nsuRepeatChar(fill_141832, chckRange(to_fill_141836, 0, 2147483647))), NTI138);
			}
			else {
			if ((align_141831 == 94)) {
			F.line = 362;
			var half_141837 = divInt(to_fill_141836, 2);
			F.line = 363;
			result_141833 = nimCopy(null, (nsuRepeatChar(fill_141832, chckRange(half_141837, 0, 2147483647))).concat(s_141829,nsuRepeatChar(fill_141832, chckRange(subInt(to_fill_141836, half_141837), 0, 2147483647))), NTI138);
			}
			else {
				F.line = 365;
				result_141833 = nimCopy(null, (nsuRepeatChar(fill_141832, chckRange(to_fill_141836, 0, 2147483647))).concat(s_141829), NTI138);
			}
			}}
		}
		
	framePtr = F.prev;

	return result_141833;

}

function format_142201(value_142203, specifier_142204, res_142206, res_142206_Idx) {
	var F={procname:"strformat.format",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 567;
		var spec_142207 = parse_standard_format_specifier_141928(specifier_142204, 0, false);
		F.line = 568;
		var value_142208 = nimCopy(null, value_142203, NTI138);
		F.line = 569;
		switch (spec_142207.typ) {
		case 115:
		case 0:
			break;
		default: 
			F.line = 2895;
			var e_142215 = null;
			F.line = 2896;
			e_142215 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 573;
			e_142215.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ")).concat([spec_142207.typ]), NTI138);
			F.line = 2891;
			e_142215.parent = null;
			F.line = 572;
			raiseException(e_142215, "ValueError");
			break;
		}
		if (!((spec_142207.precision == -1))) {
		if ((spec_142207.precision < nucruneLen(value_142208))) {
		F.line = 577;
		value_142208.length = chckRange(rune_offset_46235(value_142208, chckRange(spec_142207.precision, 0, 2147483647), 0), 0, 2147483647);
		}
		
		}
		
		F.line = 578;
		if (res_142206[res_142206_Idx] != null) { res_142206[res_142206_Idx] = (res_142206[res_142206_Idx]).concat(align_string_141827(value_142208, spec_142207.minimumWidth, spec_142207.align, spec_142207.fill)); } else { res_142206[res_142206_Idx] = align_string_141827(value_142208, spec_142207.minimumWidth, spec_142207.align, spec_142207.fill).slice(); };
	framePtr = F.prev;

	
}

function of_py_code_object_497183(obj_497070) {
	var result_497185 = false;

	var F={procname:"codeobject.ofPyCodeObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_497185 = (obj_497070.pyType.kind == 11);
	framePtr = F.prev;

	return result_497185;

}

function HEX24_499229(code_499231) {
	var result_499232 = null;

	var F={procname:"codeobject.$",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 77;
		var s_499234 = null;
		F.line = 78;
		if (s_499234 != null) { s_499234.push((makeNimstrLit("Names: ")).concat(HEX24_499237(code_499231.names))); } else { s_499234 = [(makeNimstrLit("Names: ")).concat(HEX24_499237(code_499231.names))]; };
		F.line = 79;
		if (s_499234 != null) { s_499234.push((makeNimstrLit("Local variables: ")).concat(HEX24_499237(code_499231.localVars))); } else { s_499234 = [(makeNimstrLit("Local variables: ")).concat(HEX24_499237(code_499231.localVars))]; };
		F.line = 80;
		if (s_499234 != null) { s_499234.push((makeNimstrLit("Cell variables: ")).concat(HEX24_499237(code_499231.cellVars))); } else { s_499234 = [(makeNimstrLit("Cell variables: ")).concat(HEX24_499237(code_499231.cellVars))]; };
		F.line = 81;
		if (s_499234 != null) { s_499234.push((makeNimstrLit("Free variables: ")).concat(HEX24_499237(code_499231.freeVars))); } else { s_499234 = [(makeNimstrLit("Free variables: ")).concat(HEX24_499237(code_499231.freeVars))]; };
		F.line = 83;
		var other_codes_499912 = null;
		L1: do {
			F.line = 84;
			var idx_499959 = 0;
			F.line = 84;
			var op_array_499960 = {Field0: 0, Field1: 0};
			F.line = 2352;
			var colontmp__502418 = null;
			F.line = 84;
			colontmp__502418 = code_499231.code;
			F.line = 2354;
			var i_502421 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_502421 < (colontmp__502418 != null ? colontmp__502418.length : 0))) break L3;
						F.line = 2356;
						idx_499959 = i_502421;
						F.line = 2356;
						nimCopy(op_array_499960, colontmp__502418[chckIndx(i_502421, 0, colontmp__502418.length+0-1)-0], NTI497127);
						F.line = 85;
						var op_code_499961 = op_array_499960["Field0"];
						F.line = 86;
						var op_arg_499962 = op_array_499960["Field1"];
						F.line = 87;
						F.line = 87;
						var fmt_res_499965 = [mnewString(0)];
						F.line = 274;
						format_158402(idx_499959, makeNimstrLit(">10"), fmt_res_499965, 0);
						F.line = 87;
						if (fmt_res_499965[0] != null) { fmt_res_499965[0] = (fmt_res_499965[0]).concat(makeNimstrLit(" ")); } else { fmt_res_499965[0] = makeNimstrLit(" "); };
						F.line = 278;
						format_142201(reprEnum(op_code_499961, NTI467016), makeNimstrLit("<30"), fmt_res_499965, 0);
						var line_500612 = nimCopy(null, fmt_res_499965[0], NTI138);
						if ((ConstSet23[op_code_499961] != undefined)) {
						F.line = 89;
						F.line = 89;
						var fmt_res_500624 = [mnewString(0)];
						F.line = 274;
						format_158402(op_arg_499962, makeNimstrLit("<4"), fmt_res_500624, 0);
						if (line_500612 != null) { line_500612 = (line_500612).concat(fmt_res_500624[0]); } else { line_500612 = fmt_res_500624[0].slice(); };
						F.line = 90;
						switch (op_code_499961) {
						case 72:
						case 62:
						case 77:
						case 87:
						case 69:
							F.line = 93;
							F.line = 93;
							var fmt_res_501019 = mnewString(0);
							F.line = 93;
							if (fmt_res_501019 != null) { fmt_res_501019 = (fmt_res_501019).concat(makeNimstrLit(" (")); } else { fmt_res_501019 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_501019 != null) { fmt_res_501019 = (fmt_res_501019).concat(HEX24_157579(code_499231.names[chckIndx(op_arg_499962, 0, code_499231.names.length+0-1)-0])); } else { fmt_res_501019 = HEX24_157579(code_499231.names[chckIndx(op_arg_499962, 0, code_499231.names.length+0-1)-0]).slice(); };
							F.line = 93;
							if (fmt_res_501019 != null) { fmt_res_501019 = (fmt_res_501019).concat(makeNimstrLit(")")); } else { fmt_res_501019 = makeNimstrLit(")"); };
							if (line_500612 != null) { line_500612 = (line_500612).concat(fmt_res_501019); } else { line_500612 = fmt_res_501019.slice(); };
							break;
						case 71:
							F.line = 95;
							var const_obj_501202 = code_499231.constants[chckIndx(op_arg_499962, 0, code_499231.constants.length+0-1)-0];
							if (of_py_code_object_497183(const_obj_501202)) {
							F.line = 97;
							var other_code_501203 = const_obj_501202;
							F.line = 98;
							if (other_codes_499912 != null) { other_codes_499912.push(other_code_501203); } else { other_codes_499912 = [other_code_501203]; };
							F.line = 99;
							var repr_str_501214 = repr_py_code_object_magic_498552(other_code_501203);
							F.line = 100;
							F.line = 100;
							var fmt_res_501217 = mnewString(0);
							F.line = 100;
							if (fmt_res_501217 != null) { fmt_res_501217 = (fmt_res_501217).concat(makeNimstrLit(" (")); } else { fmt_res_501217 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_501217 != null) { fmt_res_501217 = (fmt_res_501217).concat(HEX24_157579(repr_str_501214)); } else { fmt_res_501217 = HEX24_157579(repr_str_501214).slice(); };
							F.line = 100;
							if (fmt_res_501217 != null) { fmt_res_501217 = (fmt_res_501217).concat(makeNimstrLit(")")); } else { fmt_res_501217 = makeNimstrLit(")"); };
							if (line_500612 != null) { line_500612 = (line_500612).concat(fmt_res_501217); } else { line_500612 = fmt_res_501217.slice(); };
							}
							else {
								F.line = 102;
								F.line = 102;
								var fmt_res_501403 = mnewString(0);
								F.line = 102;
								if (fmt_res_501403 != null) { fmt_res_501403 = (fmt_res_501403).concat(makeNimstrLit(" (")); } else { fmt_res_501403 = makeNimstrLit(" ("); };
								F.line = 270;
								if (fmt_res_501403 != null) { fmt_res_501403 = (fmt_res_501403).concat(HEX24_157579(code_499231.constants[chckIndx(op_arg_499962, 0, code_499231.constants.length+0-1)-0])); } else { fmt_res_501403 = HEX24_157579(code_499231.constants[chckIndx(op_arg_499962, 0, code_499231.constants.length+0-1)-0]).slice(); };
								F.line = 102;
								if (fmt_res_501403 != null) { fmt_res_501403 = (fmt_res_501403).concat(makeNimstrLit(")")); } else { fmt_res_501403 = makeNimstrLit(")"); };
							if (line_500612 != null) { line_500612 = (line_500612).concat(fmt_res_501403); } else { line_500612 = fmt_res_501403.slice(); };
							}
							
							break;
						case 89:
						case 90:
							F.line = 104;
							F.line = 104;
							var fmt_res_501605 = mnewString(0);
							F.line = 104;
							if (fmt_res_501605 != null) { fmt_res_501605 = (fmt_res_501605).concat(makeNimstrLit(" (")); } else { fmt_res_501605 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_501605 != null) { fmt_res_501605 = (fmt_res_501605).concat(HEX24_157579(code_499231.localVars[chckIndx(op_arg_499962, 0, code_499231.localVars.length+0-1)-0])); } else { fmt_res_501605 = HEX24_157579(code_499231.localVars[chckIndx(op_arg_499962, 0, code_499231.localVars.length+0-1)-0]).slice(); };
							F.line = 104;
							if (fmt_res_501605 != null) { fmt_res_501605 = (fmt_res_501605).concat(makeNimstrLit(")")); } else { fmt_res_501605 = makeNimstrLit(")"); };
							if (line_500612 != null) { line_500612 = (line_500612).concat(fmt_res_501605); } else { line_500612 = fmt_res_501605.slice(); };
							break;
						case 97:
						case 98:
							if ((op_arg_499962 < (code_499231.cellVars != null ? code_499231.cellVars.length : 0))) {
							F.line = 107;
							F.line = 107;
							var fmt_res_501812 = mnewString(0);
							F.line = 107;
							if (fmt_res_501812 != null) { fmt_res_501812 = (fmt_res_501812).concat(makeNimstrLit(" (")); } else { fmt_res_501812 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_501812 != null) { fmt_res_501812 = (fmt_res_501812).concat(HEX24_157579(code_499231.cellVars[chckIndx(op_arg_499962, 0, code_499231.cellVars.length+0-1)-0])); } else { fmt_res_501812 = HEX24_157579(code_499231.cellVars[chckIndx(op_arg_499962, 0, code_499231.cellVars.length+0-1)-0]).slice(); };
							F.line = 107;
							if (fmt_res_501812 != null) { fmt_res_501812 = (fmt_res_501812).concat(makeNimstrLit(")")); } else { fmt_res_501812 = makeNimstrLit(")"); };
							if (line_500612 != null) { line_500612 = (line_500612).concat(fmt_res_501812); } else { line_500612 = fmt_res_501812.slice(); };
							}
							else {
								F.line = 109;
								F.line = 109;
								var fmt_res_502003 = mnewString(0);
								F.line = 109;
								if (fmt_res_502003 != null) { fmt_res_502003 = (fmt_res_502003).concat(makeNimstrLit(" (")); } else { fmt_res_502003 = makeNimstrLit(" ("); };
								F.line = 270;
								if (fmt_res_502003 != null) { fmt_res_502003 = (fmt_res_502003).concat(HEX24_157579(code_499231.freeVars[chckIndx(subInt(op_arg_499962, (code_499231.cellVars != null ? code_499231.cellVars.length : 0)), 0, code_499231.freeVars.length+0-1)-0])); } else { fmt_res_502003 = HEX24_157579(code_499231.freeVars[chckIndx(subInt(op_arg_499962, (code_499231.cellVars != null ? code_499231.cellVars.length : 0)), 0, code_499231.freeVars.length+0-1)-0]).slice(); };
								F.line = 109;
								if (fmt_res_502003 != null) { fmt_res_502003 = (fmt_res_502003).concat(makeNimstrLit(")")); } else { fmt_res_502003 = makeNimstrLit(")"); };
							if (line_500612 != null) { line_500612 = (line_500612).concat(fmt_res_502003); } else { line_500612 = fmt_res_502003.slice(); };
							}
							
							break;
						case 93:
						case 65:
						case 74:
						case 73:
						case 64:
						case 94:
						case 92:
						case 81:
						case 82:
						case 83:
						case 84:
						case 85:
						case 86:
						case 88:
							break;
						default: 
							F.line = 115;
							if (line_500612 != null) { line_500612 = (line_500612).concat(makeNimstrLit(" (Unknown OpCode)")); } else { line_500612 = makeNimstrLit(" (Unknown OpCode)"); };
							break;
						}
						}
						
						F.line = 116;
						var Tmp4 = nimCopy(null, line_500612, NTI138);
						if (s_499234 != null) { s_499234.push(Tmp4); } else { s_499234 = [Tmp4]; };
						F.line = 2357;
						i_502421 = addInt(i_502421, 1);
					}
			} while(false);
		} while(false);
		F.line = 117;
		if (s_499234 != null) { s_499234.push(makeNimstrLit("\x0A")); } else { s_499234 = [makeNimstrLit("\x0A")]; };
		F.line = 118;
		result_499232 = nimCopy(null, nsuJoinSep(s_499234, makeNimstrLit("\x0A")), NTI138);
		L5: do {
			F.line = 119;
			var other_code_502415 = null;
			F.line = 3911;
			var i_502425 = 0;
			F.line = 3912;
			var l_502427 = (other_codes_499912 != null ? other_codes_499912.length : 0);
			L6: do {
				F.line = 3913;
					L7: while (true) {
					if (!(i_502425 < l_502427)) break L7;
						F.line = 3914;
						other_code_502415 = other_codes_499912[chckIndx(i_502425, 0, other_codes_499912.length+0-1)-0];
						F.line = 120;
						if (result_499232 != null) { result_499232 = (result_499232).concat(HEX24_157579(other_code_502415)); } else { result_499232 = HEX24_157579(other_code_502415).slice(); };
						F.line = 3915;
						i_502425 = addInt(i_502425, 1);
						if (!(((other_codes_499912 != null ? other_codes_499912.length : 0) == l_502427))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_499232;

}

function HEX24_399119(obj_399121) {
	var result_399122 = null;

	var F={procname:"boolobjectImpl.$",prev:framePtr,filename:"../Objects/boolobjectImpl.nim",line:0};
	framePtr = F;
		F.line = 14;
		result_399122 = nimCopy(null, nimBoolToStr(obj_399121.b), NTI138);
	framePtr = F.prev;

	return result_399122;

}

function HEX24_382657(f_382659) {
	var result_382660 = null;

	var F={procname:"numobjects.$",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 491;
		result_382660 = nimCopy(null, cstrToNimstr((f_382659.v)+""), NTI138);
	framePtr = F.prev;

	return result_382660;

}

function HEX24_157574(obj_157576) {
	var result_157577 = null;

	var F={procname:"pyobjectBase.$",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 163;
		result_157577 = nimCopy(null, makeNimstrLit("Python object"), NTI138);
	framePtr = F.prev;

	return result_157577;

}

function HEX24_157579(obj_157576) {
	var result_157582 = null;

	var F={procname:"pyobjectBase.$",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(obj_157576);
		if (isObj(obj_157576.m_type, NTI357246)) {
		F.line = 162;
		result_157582 = HEX24_375898(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI175084)) {
		F.line = 162;
		result_157582 = HEX24_176057(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI377303)) {
		F.line = 162;
		result_157582 = HEX24_381297(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI497125)) {
		F.line = 162;
		result_157582 = HEX24_499229(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI353098)) {
		F.line = 162;
		result_157582 = HEX24_399119(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI381718)) {
		F.line = 162;
		result_157582 = HEX24_382657(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI157273)) {
		F.line = 162;
		result_157582 = HEX24_157574(obj_157576);
		break BeforeRet;
		}
		}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_157582;

}

function hash_143801(x_143803) {
	var result_143804 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 108;
		result_143804 = x_143803;
	framePtr = F.prev;

	return result_143804;

}

function hash_177044(node_177046) {
	var result_177047 = 0;

	var F={procname:"asdl.hash",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 23;
		result_177047 = hash_143801(node_177046);
	framePtr = F.prev;

	return result_177047;

}

function hash_177049(node_177046) {
	var result_177052 = 0;

	var F={procname:"asdl.hash",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 22;
		result_177052 = hash_177044(node_177046);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_177052;

}

function add_182829(x_182835, x_182835_Idx, y_182838) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1612;
		var xl_182846 = (x_182835[x_182835_Idx] != null ? x_182835[x_182835_Idx].length : 0);
		F.line = 1613;
		if (x_182835[x_182835_Idx].length < chckRange(addInt(xl_182846, (y_182838 != null ? y_182838.length : 0)), 0, 2147483647)) { for (var i=x_182835[x_182835_Idx].length;i<chckRange(addInt(xl_182846, (y_182838 != null ? y_182838.length : 0)), 0, 2147483647);++i) x_182835[x_182835_Idx].push(null); }
               else { x_182835[x_182835_Idx].length = chckRange(addInt(xl_182846, (y_182838 != null ? y_182838.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1614;
			var i_182881 = 0;
			F.line = 2104;
			var colontmp__182883 = 0;
			F.line = 1614;
			colontmp__182883 = (y_182838 != null ? (y_182838.length-1) : -1);
			F.line = 2107;
			var res_182886 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_182886 <= colontmp__182883)) break L3;
						F.line = 2109;
						i_182881 = res_182886;
						F.line = 1614;
						x_182835[x_182835_Idx][chckIndx(addInt(xl_182846, i_182881), 0, x_182835[x_182835_Idx].length+0-1)-0] = nimCopy(null, y_182838[chckIndx(i_182881, 0, y_182838.length+0-1)-0], NTI138);
						F.line = 2110;
						res_182886 = addInt(res_182886, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function indent_177636(str_177638, level_177639) {
	var result_177642 = null;

	var F={procname:"asdl.indent",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 136;
		F.line = 136;
		var indent_177643 = [];
		L1: do {
			F.line = 137;
			var i_177654 = 0;
			F.line = 3617;
			var i_178078 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_178078 < level_177639)) break L3;
						F.line = 3619;
						i_177654 = i_178078;
						F.line = 138;
						if (indent_177643 != null) { indent_177643 = (indent_177643).concat(makeNimstrLit("   ")); } else { indent_177643 = makeNimstrLit("   "); };
						F.line = 3620;
						i_178078 = addInt(i_178078, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 139;
			var HEX3Atmp_178009 = nsuSplitString(str_177638, makeNimstrLit("\x0A"), -1);
			F.line = 687;
			var i_178013 = 0;
			F.line = 688;
			var result_178054 = new_seq_178023(chckRange((HEX3Atmp_178009 != null ? HEX3Atmp_178009.length : 0), 0, 2147483647));
			L5: do {
				F.line = 689;
				var it_178063 = null;
				F.line = 3911;
				var i_178084 = 0;
				F.line = 3912;
				var l_178086 = (HEX3Atmp_178009 != null ? HEX3Atmp_178009.length : 0);
				L6: do {
					F.line = 3913;
						L7: while (true) {
						if (!(i_178084 < l_178086)) break L7;
							F.line = 3914;
							it_178063 = HEX3Atmp_178009[chckIndx(i_178084, 0, HEX3Atmp_178009.length+0-1)-0];
							F.line = 139;
							result_178054[chckIndx(i_178013, 0, result_178054.length+0-1)-0] = nimCopy(null, (indent_177643).concat(it_178063), NTI138);
							F.line = 691;
							i_178013 = addInt(i_178013, 1);
							F.line = 3915;
							i_178084 = addInt(i_178084, 1);
							if (!(((HEX3Atmp_178009 != null ? HEX3Atmp_178009.length : 0) == l_178086))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		} while(false);
		result_177642 = nimCopy(null, result_178054, NTI178028);
	framePtr = F.prev;

	return result_177642;

}

function HEX24_182365(node_182367) {
	var result_186913 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 374;
		var string_seq_186926 = [nimCopy(null, [makeNimstrLit("Import")], NTI182673)];
		F.line = 374;
		if (string_seq_186926[0] != null) { string_seq_186926[0].push(makeNimstrLit("   names")); } else { string_seq_186926[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187015 = null;
			F.line = 3909;
			var colontmp__187054 = null;
			F.line = 374;
			colontmp__187054 = node_182367.names;
			F.line = 3911;
			var i_187057 = 0;
			F.line = 3912;
			var l_187059 = (colontmp__187054 != null ? colontmp__187054.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187057 < l_187059)) break L3;
						F.line = 3914;
						child_187015 = colontmp__187054[chckIndx(i_187057, 0, colontmp__187054.length+0-1)-0];
						if ((child_187015 == null)) {
						F.line = 374;
						add_182829(string_seq_186926, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 374;
						add_182829(string_seq_186926, 0, indent_177636(HEX24_177554(child_187015), 2));
						}
						
						F.line = 3915;
						i_187057 = addInt(i_187057, 1);
						if (!(((colontmp__187054 != null ? colontmp__187054.length : 0) == l_187059))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_186913 = nimCopy(null, nsuJoinSep(string_seq_186926[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186913;

}

function HEX24_182371(node_182373) {
	var result_187243 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 377;
		var string_seq_187256 = [nimCopy(null, [makeNimstrLit("Global")], NTI182673)];
		F.line = 377;
		if (string_seq_187256[0] != null) { string_seq_187256[0].push(makeNimstrLit("   names")); } else { string_seq_187256[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187415 = null;
			F.line = 3909;
			var colontmp__187454 = null;
			F.line = 377;
			colontmp__187454 = node_182373.names;
			F.line = 3911;
			var i_187457 = 0;
			F.line = 3912;
			var l_187459 = (colontmp__187454 != null ? colontmp__187454.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187457 < l_187459)) break L3;
						F.line = 3914;
						child_187415 = colontmp__187454[chckIndx(i_187457, 0, colontmp__187454.length+0-1)-0];
						if ((child_187415 == null)) {
						F.line = 377;
						add_182829(string_seq_187256, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 377;
						add_182829(string_seq_187256, 0, indent_177636(HEX24_177554(child_187415), 2));
						}
						
						F.line = 3915;
						i_187457 = addInt(i_187457, 1);
						if (!(((colontmp__187454 != null ? colontmp__187454.length : 0) == l_187459))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_187243 = nimCopy(null, nsuJoinSep(string_seq_187256[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187243;

}

function HEX24_182368(node_182370) {
	var result_187076 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 375;
		var string_seq_187089 = [nimCopy(null, [makeNimstrLit("ImportFrom")], NTI182673)];
		if ((node_182370.module == null)) {
		F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(HEX24_177554(node_182370.module), 1));
		}
		
		F.line = 375;
		if (string_seq_187089[0] != null) { string_seq_187089[0].push(makeNimstrLit("   names")); } else { string_seq_187089[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187145 = null;
			F.line = 3909;
			var colontmp__187221 = null;
			F.line = 375;
			colontmp__187221 = node_182370.names;
			F.line = 3911;
			var i_187224 = 0;
			F.line = 3912;
			var l_187226 = (colontmp__187221 != null ? colontmp__187221.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187224 < l_187226)) break L3;
						F.line = 3914;
						child_187145 = colontmp__187221[chckIndx(i_187224, 0, colontmp__187221.length+0-1)-0];
						if ((child_187145 == null)) {
						F.line = 375;
						add_182829(string_seq_187089, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 375;
						add_182829(string_seq_187089, 0, indent_177636(HEX24_177554(child_187145), 2));
						}
						
						F.line = 3915;
						i_187224 = addInt(i_187224, 1);
						if (!(((colontmp__187221 != null ? colontmp__187221.length : 0) == l_187226))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182370.level == null)) {
		F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(HEX24_177554(node_182370.level), 1));
		}
		
		F.line = 476;
		result_187076 = nimCopy(null, nsuJoinSep(string_seq_187089[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187076;

}

function HEX24_182377(node_182379) {
	var result_187569 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 379;
		var string_seq_187582 = [nimCopy(null, [makeNimstrLit("Expr")], NTI182673)];
		if ((node_182379.value == null)) {
		F.line = 379;
		add_182829(string_seq_187582, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 379;
		add_182829(string_seq_187582, 0, indent_177636(HEX24_177554(node_182379.value), 1));
		}
		
		F.line = 476;
		result_187569 = nimCopy(null, nsuJoinSep(string_seq_187582[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187569;

}

function HEX24_182383(node_182385) {
	var result_187653 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 381;
		result_187653 = nimCopy(null, makeNimstrLit("Break"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187653;

}

function HEX24_182380(node_182382) {
	var result_187636 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 380;
		result_187636 = nimCopy(null, makeNimstrLit("Pass"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187636;

}

function HEX24_182350(node_182352) {
	var result_185864 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 367;
		var string_seq_185877 = [nimCopy(null, [makeNimstrLit("With")], NTI182673)];
		F.line = 367;
		if (string_seq_185877[0] != null) { string_seq_185877[0].push(makeNimstrLit("   items")); } else { string_seq_185877[0] = [makeNimstrLit("   items")]; };
		L1: do {
			F.line = 215;
			var child_186015 = null;
			F.line = 3909;
			var colontmp__186110 = null;
			F.line = 367;
			colontmp__186110 = node_182352.items;
			F.line = 3911;
			var i_186113 = 0;
			F.line = 3912;
			var l_186115 = (colontmp__186110 != null ? colontmp__186110.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_186113 < l_186115)) break L3;
						F.line = 3914;
						child_186015 = colontmp__186110[chckIndx(i_186113, 0, colontmp__186110.length+0-1)-0];
						if ((child_186015 == null)) {
						F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(HEX24_177554(child_186015), 2));
						}
						
						F.line = 3915;
						i_186113 = addInt(i_186113, 1);
						if (!(((colontmp__186110 != null ? colontmp__186110.length : 0) == l_186115))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 367;
		if (string_seq_185877[0] != null) { string_seq_185877[0].push(makeNimstrLit("   body")); } else { string_seq_185877[0] = [makeNimstrLit("   body")]; };
		L4: do {
			F.line = 215;
			var child_186071 = null;
			F.line = 3909;
			var colontmp__186117 = null;
			F.line = 367;
			colontmp__186117 = node_182352.body;
			F.line = 3911;
			var i_186120 = 0;
			F.line = 3912;
			var l_186122 = (colontmp__186117 != null ? colontmp__186117.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_186120 < l_186122)) break L6;
						F.line = 3914;
						child_186071 = colontmp__186117[chckIndx(i_186120, 0, colontmp__186117.length+0-1)-0];
						if ((child_186071 == null)) {
						F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(HEX24_177554(child_186071), 2));
						}
						
						F.line = 3915;
						i_186120 = addInt(i_186120, 1);
						if (!(((colontmp__186117 != null ? colontmp__186117.length : 0) == l_186122))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185864 = nimCopy(null, nsuJoinSep(string_seq_185877[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185864;

}

function HEX24_182374(node_182376) {
	var result_187476 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 378;
		var string_seq_187489 = [nimCopy(null, [makeNimstrLit("Nonlocal")], NTI182673)];
		F.line = 378;
		if (string_seq_187489[0] != null) { string_seq_187489[0].push(makeNimstrLit("   names")); } else { string_seq_187489[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187508 = null;
			F.line = 3909;
			var colontmp__187547 = null;
			F.line = 378;
			colontmp__187547 = node_182376.names;
			F.line = 3911;
			var i_187550 = 0;
			F.line = 3912;
			var l_187552 = (colontmp__187547 != null ? colontmp__187547.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187550 < l_187552)) break L3;
						F.line = 3914;
						child_187508 = colontmp__187547[chckIndx(i_187550, 0, colontmp__187547.length+0-1)-0];
						if ((child_187508 == null)) {
						F.line = 378;
						add_182829(string_seq_187489, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 378;
						add_182829(string_seq_187489, 0, indent_177636(HEX24_177554(child_187508), 2));
						}
						
						F.line = 3915;
						i_187550 = addInt(i_187550, 1);
						if (!(((colontmp__187547 != null ? colontmp__187547.length : 0) == l_187552))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_187476 = nimCopy(null, nsuJoinSep(string_seq_187489[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187476;

}

function HEX24_182395(node_182397) {
	var result_187921 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 389;
		var string_seq_187934 = [nimCopy(null, [makeNimstrLit("BinOp")], NTI182673)];
		if ((node_182397.left == null)) {
		F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(HEX24_177554(node_182397.left), 1));
		}
		
		if ((node_182397.op == null)) {
		F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(HEX24_177554(node_182397.op), 1));
		}
		
		if ((node_182397.right == null)) {
		F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(HEX24_177554(node_182397.right), 1));
		}
		
		F.line = 476;
		result_187921 = nimCopy(null, nsuJoinSep(string_seq_187934[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187921;

}

function HEX24_182401(node_182403) {
	var result_188166 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 391;
		var string_seq_188179 = [nimCopy(null, [makeNimstrLit("Lambda")], NTI182673)];
		if ((node_182403.args == null)) {
		F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(HEX24_177554(node_182403.args), 1));
		}
		
		if ((node_182403.body == null)) {
		F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(HEX24_177554(node_182403.body), 1));
		}
		
		F.line = 476;
		result_188166 = nimCopy(null, nsuJoinSep(string_seq_188179[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188166;

}

function HEX24_182386(node_182388) {
	var result_187670 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 382;
		result_187670 = nimCopy(null, makeNimstrLit("Continue"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187670;

}

function HEX24_182329(node_182331) {
	var result_184569 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 357;
		var string_seq_184582 = [nimCopy(null, [makeNimstrLit("Assign")], NTI182673)];
		F.line = 357;
		if (string_seq_184582[0] != null) { string_seq_184582[0].push(makeNimstrLit("   targets")); } else { string_seq_184582[0] = [makeNimstrLit("   targets")]; };
		L1: do {
			F.line = 215;
			var child_184601 = null;
			F.line = 3909;
			var colontmp__184677 = null;
			F.line = 357;
			colontmp__184677 = node_182331.targets;
			F.line = 3911;
			var i_184680 = 0;
			F.line = 3912;
			var l_184682 = (colontmp__184677 != null ? colontmp__184677.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_184680 < l_184682)) break L3;
						F.line = 3914;
						child_184601 = colontmp__184677[chckIndx(i_184680, 0, colontmp__184677.length+0-1)-0];
						if ((child_184601 == null)) {
						F.line = 357;
						add_182829(string_seq_184582, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 357;
						add_182829(string_seq_184582, 0, indent_177636(HEX24_177554(child_184601), 2));
						}
						
						F.line = 3915;
						i_184680 = addInt(i_184680, 1);
						if (!(((colontmp__184677 != null ? colontmp__184677.length : 0) == l_184682))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182331.value == null)) {
		F.line = 357;
		add_182829(string_seq_184582, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 357;
		add_182829(string_seq_184582, 0, indent_177636(HEX24_177554(node_182331.value), 1));
		}
		
		F.line = 476;
		result_184569 = nimCopy(null, nsuJoinSep(string_seq_184582[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184569;

}

function HEX24_182392(node_182394) {
	var result_187791 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 388;
		var string_seq_187804 = [nimCopy(null, [makeNimstrLit("BoolOp")], NTI182673)];
		if ((node_182394.op == null)) {
		F.line = 388;
		add_182829(string_seq_187804, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 388;
		add_182829(string_seq_187804, 0, indent_177636(HEX24_177554(node_182394.op), 1));
		}
		
		F.line = 388;
		if (string_seq_187804[0] != null) { string_seq_187804[0].push(makeNimstrLit("   values")); } else { string_seq_187804[0] = [makeNimstrLit("   values")]; };
		L1: do {
			F.line = 215;
			var child_187860 = null;
			F.line = 3909;
			var colontmp__187899 = null;
			F.line = 388;
			colontmp__187899 = node_182394.values;
			F.line = 3911;
			var i_187902 = 0;
			F.line = 3912;
			var l_187904 = (colontmp__187899 != null ? colontmp__187899.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187902 < l_187904)) break L3;
						F.line = 3914;
						child_187860 = colontmp__187899[chckIndx(i_187902, 0, colontmp__187899.length+0-1)-0];
						if ((child_187860 == null)) {
						F.line = 388;
						add_182829(string_seq_187804, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 388;
						add_182829(string_seq_187804, 0, indent_177636(HEX24_177554(child_187860), 2));
						}
						
						F.line = 3915;
						i_187902 = addInt(i_187902, 1);
						if (!(((colontmp__187899 != null ? colontmp__187899.length : 0) == l_187904))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_187791 = nimCopy(null, nsuJoinSep(string_seq_187804[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187791;

}

function HEX24_182335(node_182337) {
	var result_184840 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 360;
		var string_seq_184853 = [nimCopy(null, [makeNimstrLit("AnnAssign")], NTI182673)];
		if ((node_182337.target == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.target), 1));
		}
		
		if ((node_182337.annotation == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.annotation), 1));
		}
		
		if ((node_182337.value == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.value), 1));
		}
		
		if ((node_182337.simple == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.simple), 1));
		}
		
		F.line = 476;
		result_184840 = nimCopy(null, nsuJoinSep(string_seq_184853[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184840;

}

function HEX24_182341(node_182343) {
	var result_185248 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 364;
		var string_seq_185261 = [nimCopy(null, [makeNimstrLit("AsyncFor")], NTI182673)];
		if ((node_182343.target == null)) {
		F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(node_182343.target), 1));
		}
		
		if ((node_182343.iter == null)) {
		F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(node_182343.iter), 1));
		}
		
		F.line = 364;
		if (string_seq_185261[0] != null) { string_seq_185261[0].push(makeNimstrLit("   body")); } else { string_seq_185261[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185354 = null;
			F.line = 3909;
			var colontmp__185449 = null;
			F.line = 364;
			colontmp__185449 = node_182343.body;
			F.line = 3911;
			var i_185452 = 0;
			F.line = 3912;
			var l_185454 = (colontmp__185449 != null ? colontmp__185449.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185452 < l_185454)) break L3;
						F.line = 3914;
						child_185354 = colontmp__185449[chckIndx(i_185452, 0, colontmp__185449.length+0-1)-0];
						if ((child_185354 == null)) {
						F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(child_185354), 2));
						}
						
						F.line = 3915;
						i_185452 = addInt(i_185452, 1);
						if (!(((colontmp__185449 != null ? colontmp__185449.length : 0) == l_185454))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 364;
		if (string_seq_185261[0] != null) { string_seq_185261[0].push(makeNimstrLit("   orelse")); } else { string_seq_185261[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185410 = null;
			F.line = 3909;
			var colontmp__185456 = null;
			F.line = 364;
			colontmp__185456 = node_182343.orelse;
			F.line = 3911;
			var i_185459 = 0;
			F.line = 3912;
			var l_185461 = (colontmp__185456 != null ? colontmp__185456.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185459 < l_185461)) break L6;
						F.line = 3914;
						child_185410 = colontmp__185456[chckIndx(i_185459, 0, colontmp__185456.length+0-1)-0];
						if ((child_185410 == null)) {
						F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(child_185410), 2));
						}
						
						F.line = 3915;
						i_185459 = addInt(i_185459, 1);
						if (!(((colontmp__185456 != null ? colontmp__185456.length : 0) == l_185461))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185248 = nimCopy(null, nsuJoinSep(string_seq_185261[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185248;

}

function HEX24_182326(node_182328) {
	var result_184476 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 356;
		var string_seq_184489 = [nimCopy(null, [makeNimstrLit("Delete")], NTI182673)];
		F.line = 356;
		if (string_seq_184489[0] != null) { string_seq_184489[0].push(makeNimstrLit("   targets")); } else { string_seq_184489[0] = [makeNimstrLit("   targets")]; };
		L1: do {
			F.line = 215;
			var child_184508 = null;
			F.line = 3909;
			var colontmp__184547 = null;
			F.line = 356;
			colontmp__184547 = node_182328.targets;
			F.line = 3911;
			var i_184550 = 0;
			F.line = 3912;
			var l_184552 = (colontmp__184547 != null ? colontmp__184547.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_184550 < l_184552)) break L3;
						F.line = 3914;
						child_184508 = colontmp__184547[chckIndx(i_184550, 0, colontmp__184547.length+0-1)-0];
						if ((child_184508 == null)) {
						F.line = 356;
						add_182829(string_seq_184489, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 356;
						add_182829(string_seq_184489, 0, indent_177636(HEX24_177554(child_184508), 2));
						}
						
						F.line = 3915;
						i_184550 = addInt(i_184550, 1);
						if (!(((colontmp__184547 != null ? colontmp__184547.length : 0) == l_184552))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_184476 = nimCopy(null, nsuJoinSep(string_seq_184489[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184476;

}

function HEX24_182347(node_182349) {
	var result_185671 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 366;
		var string_seq_185684 = [nimCopy(null, [makeNimstrLit("If")], NTI182673)];
		if ((node_182349.test == null)) {
		F.line = 366;
		add_182829(string_seq_185684, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 366;
		add_182829(string_seq_185684, 0, indent_177636(HEX24_177554(node_182349.test), 1));
		}
		
		F.line = 366;
		if (string_seq_185684[0] != null) { string_seq_185684[0].push(makeNimstrLit("   body")); } else { string_seq_185684[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185740 = null;
			F.line = 3909;
			var colontmp__185835 = null;
			F.line = 366;
			colontmp__185835 = node_182349.body;
			F.line = 3911;
			var i_185838 = 0;
			F.line = 3912;
			var l_185840 = (colontmp__185835 != null ? colontmp__185835.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185838 < l_185840)) break L3;
						F.line = 3914;
						child_185740 = colontmp__185835[chckIndx(i_185838, 0, colontmp__185835.length+0-1)-0];
						if ((child_185740 == null)) {
						F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(HEX24_177554(child_185740), 2));
						}
						
						F.line = 3915;
						i_185838 = addInt(i_185838, 1);
						if (!(((colontmp__185835 != null ? colontmp__185835.length : 0) == l_185840))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 366;
		if (string_seq_185684[0] != null) { string_seq_185684[0].push(makeNimstrLit("   orelse")); } else { string_seq_185684[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185796 = null;
			F.line = 3909;
			var colontmp__185842 = null;
			F.line = 366;
			colontmp__185842 = node_182349.orelse;
			F.line = 3911;
			var i_185845 = 0;
			F.line = 3912;
			var l_185847 = (colontmp__185842 != null ? colontmp__185842.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185845 < l_185847)) break L6;
						F.line = 3914;
						child_185796 = colontmp__185842[chckIndx(i_185845, 0, colontmp__185842.length+0-1)-0];
						if ((child_185796 == null)) {
						F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(HEX24_177554(child_185796), 2));
						}
						
						F.line = 3915;
						i_185845 = addInt(i_185845, 1);
						if (!(((colontmp__185842 != null ? colontmp__185842.length : 0) == l_185847))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185671 = nimCopy(null, nsuJoinSep(string_seq_185684[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185671;

}

function HEX24_182398(node_182400) {
	var result_188062 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 390;
		var string_seq_188075 = [nimCopy(null, [makeNimstrLit("UnaryOp")], NTI182673)];
		if ((node_182400.op == null)) {
		F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(HEX24_177554(node_182400.op), 1));
		}
		
		if ((node_182400.operand == null)) {
		F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(HEX24_177554(node_182400.operand), 1));
		}
		
		F.line = 476;
		result_188062 = nimCopy(null, nsuJoinSep(string_seq_188075[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188062;

}

function HEX24_182353(node_182355) {
	var result_186139 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 368;
		var string_seq_186152 = [nimCopy(null, [makeNimstrLit("AsyncWith")], NTI182673)];
		F.line = 368;
		if (string_seq_186152[0] != null) { string_seq_186152[0].push(makeNimstrLit("   items")); } else { string_seq_186152[0] = [makeNimstrLit("   items")]; };
		L1: do {
			F.line = 215;
			var child_186171 = null;
			F.line = 3909;
			var colontmp__186266 = null;
			F.line = 368;
			colontmp__186266 = node_182355.items;
			F.line = 3911;
			var i_186269 = 0;
			F.line = 3912;
			var l_186271 = (colontmp__186266 != null ? colontmp__186266.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_186269 < l_186271)) break L3;
						F.line = 3914;
						child_186171 = colontmp__186266[chckIndx(i_186269, 0, colontmp__186266.length+0-1)-0];
						if ((child_186171 == null)) {
						F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(HEX24_177554(child_186171), 2));
						}
						
						F.line = 3915;
						i_186269 = addInt(i_186269, 1);
						if (!(((colontmp__186266 != null ? colontmp__186266.length : 0) == l_186271))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 368;
		if (string_seq_186152[0] != null) { string_seq_186152[0].push(makeNimstrLit("   body")); } else { string_seq_186152[0] = [makeNimstrLit("   body")]; };
		L4: do {
			F.line = 215;
			var child_186227 = null;
			F.line = 3909;
			var colontmp__186273 = null;
			F.line = 368;
			colontmp__186273 = node_182355.body;
			F.line = 3911;
			var i_186276 = 0;
			F.line = 3912;
			var l_186278 = (colontmp__186273 != null ? colontmp__186273.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_186276 < l_186278)) break L6;
						F.line = 3914;
						child_186227 = colontmp__186273[chckIndx(i_186276, 0, colontmp__186273.length+0-1)-0];
						if ((child_186227 == null)) {
						F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(HEX24_177554(child_186227), 2));
						}
						
						F.line = 3915;
						i_186276 = addInt(i_186276, 1);
						if (!(((colontmp__186273 != null ? colontmp__186273.length : 0) == l_186278))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_186139 = nimCopy(null, nsuJoinSep(string_seq_186152[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186139;

}

function HEX24_182338(node_182340) {
	var result_185018 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 363;
		var string_seq_185031 = [nimCopy(null, [makeNimstrLit("For")], NTI182673)];
		if ((node_182340.target == null)) {
		F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(node_182340.target), 1));
		}
		
		if ((node_182340.iter == null)) {
		F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(node_182340.iter), 1));
		}
		
		F.line = 363;
		if (string_seq_185031[0] != null) { string_seq_185031[0].push(makeNimstrLit("   body")); } else { string_seq_185031[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185124 = null;
			F.line = 3909;
			var colontmp__185219 = null;
			F.line = 363;
			colontmp__185219 = node_182340.body;
			F.line = 3911;
			var i_185222 = 0;
			F.line = 3912;
			var l_185224 = (colontmp__185219 != null ? colontmp__185219.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185222 < l_185224)) break L3;
						F.line = 3914;
						child_185124 = colontmp__185219[chckIndx(i_185222, 0, colontmp__185219.length+0-1)-0];
						if ((child_185124 == null)) {
						F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(child_185124), 2));
						}
						
						F.line = 3915;
						i_185222 = addInt(i_185222, 1);
						if (!(((colontmp__185219 != null ? colontmp__185219.length : 0) == l_185224))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 363;
		if (string_seq_185031[0] != null) { string_seq_185031[0].push(makeNimstrLit("   orelse")); } else { string_seq_185031[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185180 = null;
			F.line = 3909;
			var colontmp__185226 = null;
			F.line = 363;
			colontmp__185226 = node_182340.orelse;
			F.line = 3911;
			var i_185229 = 0;
			F.line = 3912;
			var l_185231 = (colontmp__185226 != null ? colontmp__185226.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185229 < l_185231)) break L6;
						F.line = 3914;
						child_185180 = colontmp__185226[chckIndx(i_185229, 0, colontmp__185226.length+0-1)-0];
						if ((child_185180 == null)) {
						F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(child_185180), 2));
						}
						
						F.line = 3915;
						i_185229 = addInt(i_185229, 1);
						if (!(((colontmp__185226 != null ? colontmp__185226.length : 0) == l_185231))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185018 = nimCopy(null, nsuJoinSep(string_seq_185031[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185018;

}

function HEX24_182359(node_182361) {
	var result_186399 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 371;
		var string_seq_186412 = [nimCopy(null, [makeNimstrLit("Try")], NTI182673)];
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   body")); } else { string_seq_186412[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_186431 = null;
			F.line = 3909;
			var colontmp__186766 = null;
			F.line = 371;
			colontmp__186766 = node_182361.body;
			F.line = 3911;
			var i_186769 = 0;
			F.line = 3912;
			var l_186771 = (colontmp__186766 != null ? colontmp__186766.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_186769 < l_186771)) break L3;
						F.line = 3914;
						child_186431 = colontmp__186766[chckIndx(i_186769, 0, colontmp__186766.length+0-1)-0];
						if ((child_186431 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186431), 2));
						}
						
						F.line = 3915;
						i_186769 = addInt(i_186769, 1);
						if (!(((colontmp__186766 != null ? colontmp__186766.length : 0) == l_186771))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   handlers")); } else { string_seq_186412[0] = [makeNimstrLit("   handlers")]; };
		L4: do {
			F.line = 215;
			var child_186615 = null;
			F.line = 3909;
			var colontmp__186773 = null;
			F.line = 371;
			colontmp__186773 = node_182361.handlers;
			F.line = 3911;
			var i_186776 = 0;
			F.line = 3912;
			var l_186778 = (colontmp__186773 != null ? colontmp__186773.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_186776 < l_186778)) break L6;
						F.line = 3914;
						child_186615 = colontmp__186773[chckIndx(i_186776, 0, colontmp__186773.length+0-1)-0];
						if ((child_186615 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186615), 2));
						}
						
						F.line = 3915;
						i_186776 = addInt(i_186776, 1);
						if (!(((colontmp__186773 != null ? colontmp__186773.length : 0) == l_186778))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   orelse")); } else { string_seq_186412[0] = [makeNimstrLit("   orelse")]; };
		L7: do {
			F.line = 215;
			var child_186671 = null;
			F.line = 3909;
			var colontmp__186780 = null;
			F.line = 371;
			colontmp__186780 = node_182361.orelse;
			F.line = 3911;
			var i_186783 = 0;
			F.line = 3912;
			var l_186785 = (colontmp__186780 != null ? colontmp__186780.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_186783 < l_186785)) break L9;
						F.line = 3914;
						child_186671 = colontmp__186780[chckIndx(i_186783, 0, colontmp__186780.length+0-1)-0];
						if ((child_186671 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186671), 2));
						}
						
						F.line = 3915;
						i_186783 = addInt(i_186783, 1);
						if (!(((colontmp__186780 != null ? colontmp__186780.length : 0) == l_186785))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   finalbody")); } else { string_seq_186412[0] = [makeNimstrLit("   finalbody")]; };
		L10: do {
			F.line = 215;
			var child_186727 = null;
			F.line = 3909;
			var colontmp__186787 = null;
			F.line = 371;
			colontmp__186787 = node_182361.finalbody;
			F.line = 3911;
			var i_186790 = 0;
			F.line = 3912;
			var l_186792 = (colontmp__186787 != null ? colontmp__186787.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_186790 < l_186792)) break L12;
						F.line = 3914;
						child_186727 = colontmp__186787[chckIndx(i_186790, 0, colontmp__186787.length+0-1)-0];
						if ((child_186727 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186727), 2));
						}
						
						F.line = 3915;
						i_186790 = addInt(i_186790, 1);
						if (!(((colontmp__186787 != null ? colontmp__186787.length : 0) == l_186792))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_186399 = nimCopy(null, nsuJoinSep(string_seq_186412[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186399;

}

function HEX24_182413(node_182415) {
	var result_188660 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 395;
		var string_seq_188673 = [nimCopy(null, [makeNimstrLit("ListComp")], NTI182673)];
		if ((node_182415.elt == null)) {
		F.line = 395;
		add_182829(string_seq_188673, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 395;
		add_182829(string_seq_188673, 0, indent_177636(HEX24_177554(node_182415.elt), 1));
		}
		
		F.line = 395;
		if (string_seq_188673[0] != null) { string_seq_188673[0].push(makeNimstrLit("   generators")); } else { string_seq_188673[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_188815 = null;
			F.line = 3909;
			var colontmp__188854 = null;
			F.line = 395;
			colontmp__188854 = node_182415.generators;
			F.line = 3911;
			var i_188857 = 0;
			F.line = 3912;
			var l_188859 = (colontmp__188854 != null ? colontmp__188854.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188857 < l_188859)) break L3;
						F.line = 3914;
						child_188815 = colontmp__188854[chckIndx(i_188857, 0, colontmp__188854.length+0-1)-0];
						if ((child_188815 == null)) {
						F.line = 395;
						add_182829(string_seq_188673, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 395;
						add_182829(string_seq_188673, 0, indent_177636(HEX24_177554(child_188815), 2));
						}
						
						F.line = 3915;
						i_188857 = addInt(i_188857, 1);
						if (!(((colontmp__188854 != null ? colontmp__188854.length : 0) == l_188859))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188660 = nimCopy(null, nsuJoinSep(string_seq_188673[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188660;

}

function HEX24_182407(node_182409) {
	var result_188411 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 393;
		var string_seq_188424 = [nimCopy(null, [makeNimstrLit("Dict")], NTI182673)];
		F.line = 393;
		if (string_seq_188424[0] != null) { string_seq_188424[0].push(makeNimstrLit("   keys")); } else { string_seq_188424[0] = [makeNimstrLit("   keys")]; };
		L1: do {
			F.line = 215;
			var child_188443 = null;
			F.line = 3909;
			var colontmp__188538 = null;
			F.line = 393;
			colontmp__188538 = node_182409.keys;
			F.line = 3911;
			var i_188541 = 0;
			F.line = 3912;
			var l_188543 = (colontmp__188538 != null ? colontmp__188538.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188541 < l_188543)) break L3;
						F.line = 3914;
						child_188443 = colontmp__188538[chckIndx(i_188541, 0, colontmp__188538.length+0-1)-0];
						if ((child_188443 == null)) {
						F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(HEX24_177554(child_188443), 2));
						}
						
						F.line = 3915;
						i_188541 = addInt(i_188541, 1);
						if (!(((colontmp__188538 != null ? colontmp__188538.length : 0) == l_188543))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 393;
		if (string_seq_188424[0] != null) { string_seq_188424[0].push(makeNimstrLit("   values")); } else { string_seq_188424[0] = [makeNimstrLit("   values")]; };
		L4: do {
			F.line = 215;
			var child_188499 = null;
			F.line = 3909;
			var colontmp__188545 = null;
			F.line = 393;
			colontmp__188545 = node_182409.values;
			F.line = 3911;
			var i_188548 = 0;
			F.line = 3912;
			var l_188550 = (colontmp__188545 != null ? colontmp__188545.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_188548 < l_188550)) break L6;
						F.line = 3914;
						child_188499 = colontmp__188545[chckIndx(i_188548, 0, colontmp__188545.length+0-1)-0];
						if ((child_188499 == null)) {
						F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(HEX24_177554(child_188499), 2));
						}
						
						F.line = 3915;
						i_188548 = addInt(i_188548, 1);
						if (!(((colontmp__188545 != null ? colontmp__188545.length : 0) == l_188550))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188411 = nimCopy(null, nsuJoinSep(string_seq_188424[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188411;

}

function HEX24_182512(node_182514) {
	var result_191811 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191811 = nimCopy(null, makeNimstrLit("Add"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191811;

}

function HEX24_182344(node_182346) {
	var result_185478 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 365;
		var string_seq_185491 = [nimCopy(null, [makeNimstrLit("While")], NTI182673)];
		if ((node_182346.test == null)) {
		F.line = 365;
		add_182829(string_seq_185491, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 365;
		add_182829(string_seq_185491, 0, indent_177636(HEX24_177554(node_182346.test), 1));
		}
		
		F.line = 365;
		if (string_seq_185491[0] != null) { string_seq_185491[0].push(makeNimstrLit("   body")); } else { string_seq_185491[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185547 = null;
			F.line = 3909;
			var colontmp__185642 = null;
			F.line = 365;
			colontmp__185642 = node_182346.body;
			F.line = 3911;
			var i_185645 = 0;
			F.line = 3912;
			var l_185647 = (colontmp__185642 != null ? colontmp__185642.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185645 < l_185647)) break L3;
						F.line = 3914;
						child_185547 = colontmp__185642[chckIndx(i_185645, 0, colontmp__185642.length+0-1)-0];
						if ((child_185547 == null)) {
						F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(HEX24_177554(child_185547), 2));
						}
						
						F.line = 3915;
						i_185645 = addInt(i_185645, 1);
						if (!(((colontmp__185642 != null ? colontmp__185642.length : 0) == l_185647))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 365;
		if (string_seq_185491[0] != null) { string_seq_185491[0].push(makeNimstrLit("   orelse")); } else { string_seq_185491[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185603 = null;
			F.line = 3909;
			var colontmp__185649 = null;
			F.line = 365;
			colontmp__185649 = node_182346.orelse;
			F.line = 3911;
			var i_185652 = 0;
			F.line = 3912;
			var l_185654 = (colontmp__185649 != null ? colontmp__185649.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185652 < l_185654)) break L6;
						F.line = 3914;
						child_185603 = colontmp__185649[chckIndx(i_185652, 0, colontmp__185649.length+0-1)-0];
						if ((child_185603 == null)) {
						F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(HEX24_177554(child_185603), 2));
						}
						
						F.line = 3915;
						i_185652 = addInt(i_185652, 1);
						if (!(((colontmp__185649 != null ? colontmp__185649.length : 0) == l_185654))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185478 = nimCopy(null, nsuJoinSep(string_seq_185491[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185478;

}

function HEX24_182419(node_182421) {
	var result_189006 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 397;
		var string_seq_189019 = [nimCopy(null, [makeNimstrLit("DictComp")], NTI182673)];
		if ((node_182421.key == null)) {
		F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(HEX24_177554(node_182421.key), 1));
		}
		
		if ((node_182421.value == null)) {
		F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(HEX24_177554(node_182421.value), 1));
		}
		
		F.line = 397;
		if (string_seq_189019[0] != null) { string_seq_189019[0].push(makeNimstrLit("   generators")); } else { string_seq_189019[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_189112 = null;
			F.line = 3909;
			var colontmp__189151 = null;
			F.line = 397;
			colontmp__189151 = node_182421.generators;
			F.line = 3911;
			var i_189154 = 0;
			F.line = 3912;
			var l_189156 = (colontmp__189151 != null ? colontmp__189151.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_189154 < l_189156)) break L3;
						F.line = 3914;
						child_189112 = colontmp__189151[chckIndx(i_189154, 0, colontmp__189151.length+0-1)-0];
						if ((child_189112 == null)) {
						F.line = 397;
						add_182829(string_seq_189019, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 397;
						add_182829(string_seq_189019, 0, indent_177636(HEX24_177554(child_189112), 2));
						}
						
						F.line = 3915;
						i_189154 = addInt(i_189154, 1);
						if (!(((colontmp__189151 != null ? colontmp__189151.length : 0) == l_189156))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189006 = nimCopy(null, nsuJoinSep(string_seq_189019[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189006;

}

function HEX24_182362(node_182364) {
	var result_186809 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 372;
		var string_seq_186822 = [nimCopy(null, [makeNimstrLit("Assert")], NTI182673)];
		if ((node_182364.test == null)) {
		F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(HEX24_177554(node_182364.test), 1));
		}
		
		if ((node_182364.msg == null)) {
		F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(HEX24_177554(node_182364.msg), 1));
		}
		
		F.line = 476;
		result_186809 = nimCopy(null, nsuJoinSep(string_seq_186822[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186809;

}

function HEX24_182494(node_182496) {
	var result_191460 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 424;
		var string_seq_191473 = [nimCopy(null, [makeNimstrLit("ExtSlice")], NTI182673)];
		F.line = 424;
		if (string_seq_191473[0] != null) { string_seq_191473[0].push(makeNimstrLit("   dims")); } else { string_seq_191473[0] = [makeNimstrLit("   dims")]; };
		L1: do {
			F.line = 215;
			var child_191615 = null;
			F.line = 3909;
			var colontmp__191654 = null;
			F.line = 424;
			colontmp__191654 = node_182496.dims;
			F.line = 3911;
			var i_191657 = 0;
			F.line = 3912;
			var l_191659 = (colontmp__191654 != null ? colontmp__191654.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_191657 < l_191659)) break L3;
						F.line = 3914;
						child_191615 = colontmp__191654[chckIndx(i_191657, 0, colontmp__191654.length+0-1)-0];
						if ((child_191615 == null)) {
						F.line = 424;
						add_182829(string_seq_191473, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 424;
						add_182829(string_seq_191473, 0, indent_177636(HEX24_177554(child_191615), 2));
						}
						
						F.line = 3915;
						i_191657 = addInt(i_191657, 1);
						if (!(((colontmp__191654 != null ? colontmp__191654.length : 0) == l_191659))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_191460 = nimCopy(null, nsuJoinSep(string_seq_191473[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191460;

}

function HEX24_182356(node_182358) {
	var result_186295 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 370;
		var string_seq_186308 = [nimCopy(null, [makeNimstrLit("Raise")], NTI182673)];
		if ((node_182358.exc == null)) {
		F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(HEX24_177554(node_182358.exc), 1));
		}
		
		if ((node_182358.cause == null)) {
		F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(HEX24_177554(node_182358.cause), 1));
		}
		
		F.line = 476;
		result_186295 = nimCopy(null, nsuJoinSep(string_seq_186308[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186295;

}

function HEX24_182473(node_182475) {
	var result_191217 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191217 = nimCopy(null, makeNimstrLit("Store"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191217;

}

function HEX24_182416(node_182418) {
	var result_188876 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 396;
		var string_seq_188889 = [nimCopy(null, [makeNimstrLit("SetComp")], NTI182673)];
		if ((node_182418.elt == null)) {
		F.line = 396;
		add_182829(string_seq_188889, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 396;
		add_182829(string_seq_188889, 0, indent_177636(HEX24_177554(node_182418.elt), 1));
		}
		
		F.line = 396;
		if (string_seq_188889[0] != null) { string_seq_188889[0].push(makeNimstrLit("   generators")); } else { string_seq_188889[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_188945 = null;
			F.line = 3909;
			var colontmp__188984 = null;
			F.line = 396;
			colontmp__188984 = node_182418.generators;
			F.line = 3911;
			var i_188987 = 0;
			F.line = 3912;
			var l_188989 = (colontmp__188984 != null ? colontmp__188984.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188987 < l_188989)) break L3;
						F.line = 3914;
						child_188945 = colontmp__188984[chckIndx(i_188987, 0, colontmp__188984.length+0-1)-0];
						if ((child_188945 == null)) {
						F.line = 396;
						add_182829(string_seq_188889, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 396;
						add_182829(string_seq_188889, 0, indent_177636(HEX24_177554(child_188945), 2));
						}
						
						F.line = 3915;
						i_188987 = addInt(i_188987, 1);
						if (!(((colontmp__188984 != null ? colontmp__188984.length : 0) == l_188989))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188876 = nimCopy(null, nsuJoinSep(string_seq_188889[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188876;

}

function HEX24_182506(node_182508) {
	var result_191777 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 428;
		result_191777 = nimCopy(null, makeNimstrLit("Or"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191777;

}

function HEX24_182323(node_182325) {
	var result_184409 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 354;
		var string_seq_184422 = [nimCopy(null, [makeNimstrLit("Return")], NTI182673)];
		if ((node_182325.value == null)) {
		F.line = 354;
		add_182829(string_seq_184422, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 354;
		add_182829(string_seq_184422, 0, indent_177636(HEX24_177554(node_182325.value), 1));
		}
		
		F.line = 476;
		result_184409 = nimCopy(null, nsuJoinSep(string_seq_184422[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184409;

}

function HEX24_182317(node_182319) {
	var result_183720 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 347;
		var string_seq_183733 = [nimCopy(null, [makeNimstrLit("AsyncFunctionDef")], NTI182673)];
		if ((node_182319.name == null)) {
		F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(node_182319.name), 1));
		}
		
		if ((node_182319.args == null)) {
		F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(node_182319.args), 1));
		}
		
		F.line = 349;
		if (string_seq_183733[0] != null) { string_seq_183733[0].push(makeNimstrLit("   body")); } else { string_seq_183733[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_183826 = null;
			F.line = 3909;
			var colontmp__183958 = null;
			F.line = 349;
			colontmp__183958 = node_182319.body;
			F.line = 3911;
			var i_183961 = 0;
			F.line = 3912;
			var l_183963 = (colontmp__183958 != null ? colontmp__183958.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183961 < l_183963)) break L3;
						F.line = 3914;
						child_183826 = colontmp__183958[chckIndx(i_183961, 0, colontmp__183958.length+0-1)-0];
						if ((child_183826 == null)) {
						F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(child_183826), 2));
						}
						
						F.line = 3915;
						i_183961 = addInt(i_183961, 1);
						if (!(((colontmp__183958 != null ? colontmp__183958.length : 0) == l_183963))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 349;
		if (string_seq_183733[0] != null) { string_seq_183733[0].push(makeNimstrLit("   decorator_list")); } else { string_seq_183733[0] = [makeNimstrLit("   decorator_list")]; };
		L4: do {
			F.line = 215;
			var child_183882 = null;
			F.line = 3909;
			var colontmp__183965 = null;
			F.line = 349;
			colontmp__183965 = node_182319.decorator_list;
			F.line = 3911;
			var i_183968 = 0;
			F.line = 3912;
			var l_183970 = (colontmp__183965 != null ? colontmp__183965.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_183968 < l_183970)) break L6;
						F.line = 3914;
						child_183882 = colontmp__183965[chckIndx(i_183968, 0, colontmp__183965.length+0-1)-0];
						if ((child_183882 == null)) {
						F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(child_183882), 2));
						}
						
						F.line = 3915;
						i_183968 = addInt(i_183968, 1);
						if (!(((colontmp__183965 != null ? colontmp__183965.length : 0) == l_183970))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182319.returns == null)) {
		F.line = 349;
		add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 349;
		add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(node_182319.returns), 1));
		}
		
		F.line = 476;
		result_183720 = nimCopy(null, nsuJoinSep(string_seq_183733[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183720;

}

function HEX24_182491(node_182493) {
	var result_191319 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 423;
		var string_seq_191332 = [nimCopy(null, [makeNimstrLit("Slice")], NTI182673)];
		if ((node_182493.lower == null)) {
		F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(HEX24_177554(node_182493.lower), 1));
		}
		
		if ((node_182493.upper == null)) {
		F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(HEX24_177554(node_182493.upper), 1));
		}
		
		if ((node_182493.step == null)) {
		F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(HEX24_177554(node_182493.step), 1));
		}
		
		F.line = 476;
		result_191319 = nimCopy(null, nsuJoinSep(string_seq_191332[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191319;

}

function HEX24_182497(node_182499) {
	var result_191676 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 425;
		var string_seq_191689 = [nimCopy(null, [makeNimstrLit("Index")], NTI182673)];
		if ((node_182499.value == null)) {
		F.line = 425;
		add_182829(string_seq_191689, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 425;
		add_182829(string_seq_191689, 0, indent_177636(HEX24_177554(node_182499.value), 1));
		}
		
		F.line = 476;
		result_191676 = nimCopy(null, nsuJoinSep(string_seq_191689[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191676;

}

function HEX24_182332(node_182334) {
	var result_184699 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 358;
		var string_seq_184712 = [nimCopy(null, [makeNimstrLit("AugAssign")], NTI182673)];
		if ((node_182334.target == null)) {
		F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(HEX24_177554(node_182334.target), 1));
		}
		
		if ((node_182334.op == null)) {
		F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(HEX24_177554(node_182334.op), 1));
		}
		
		if ((node_182334.value == null)) {
		F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(HEX24_177554(node_182334.value), 1));
		}
		
		F.line = 476;
		result_184699 = nimCopy(null, nsuJoinSep(string_seq_184712[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184699;

}

function HEX24_182302(node_182304) {
	var result_182940 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 335;
		var string_seq_182953 = [nimCopy(null, [makeNimstrLit("Interactive")], NTI182673)];
		F.line = 335;
		if (string_seq_182953[0] != null) { string_seq_182953[0].push(makeNimstrLit("   body")); } else { string_seq_182953[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_182972 = null;
			F.line = 3909;
			var colontmp__183011 = null;
			F.line = 335;
			colontmp__183011 = node_182304.body;
			F.line = 3911;
			var i_183014 = 0;
			F.line = 3912;
			var l_183016 = (colontmp__183011 != null ? colontmp__183011.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183014 < l_183016)) break L3;
						F.line = 3914;
						child_182972 = colontmp__183011[chckIndx(i_183014, 0, colontmp__183011.length+0-1)-0];
						if ((child_182972 == null)) {
						F.line = 335;
						add_182829(string_seq_182953, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 335;
						add_182829(string_seq_182953, 0, indent_177636(HEX24_177554(child_182972), 2));
						}
						
						F.line = 3915;
						i_183014 = addInt(i_183014, 1);
						if (!(((colontmp__183011 != null ? colontmp__183011.length : 0) == l_183016))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_182940 = nimCopy(null, nsuJoinSep(string_seq_182953[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_182940;

}

function HEX24_182470(node_182472) {
	var result_191200 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191200 = nimCopy(null, makeNimstrLit("Load"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191200;

}

function HEX24_182308(node_182310) {
	var result_183100 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 337;
		var string_seq_183113 = [nimCopy(null, [makeNimstrLit("Suite")], NTI182673)];
		F.line = 337;
		if (string_seq_183113[0] != null) { string_seq_183113[0].push(makeNimstrLit("   body")); } else { string_seq_183113[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_183132 = null;
			F.line = 3909;
			var colontmp__183171 = null;
			F.line = 337;
			colontmp__183171 = node_182310.body;
			F.line = 3911;
			var i_183174 = 0;
			F.line = 3912;
			var l_183176 = (colontmp__183171 != null ? colontmp__183171.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183174 < l_183176)) break L3;
						F.line = 3914;
						child_183132 = colontmp__183171[chckIndx(i_183174, 0, colontmp__183171.length+0-1)-0];
						if ((child_183132 == null)) {
						F.line = 337;
						add_182829(string_seq_183113, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 337;
						add_182829(string_seq_183113, 0, indent_177636(HEX24_177554(child_183132), 2));
						}
						
						F.line = 3915;
						i_183174 = addInt(i_183174, 1);
						if (!(((colontmp__183171 != null ? colontmp__183171.length : 0) == l_183176))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_183100 = nimCopy(null, nsuJoinSep(string_seq_183113[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183100;

}

function HEX24_182503(node_182505) {
	var result_191760 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 428;
		result_191760 = nimCopy(null, makeNimstrLit("And"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191760;

}

function HEX24_182314(node_182316) {
	var result_183297 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 343;
		var string_seq_183310 = [nimCopy(null, [makeNimstrLit("FunctionDef")], NTI182673)];
		if ((node_182316.name == null)) {
		F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(node_182316.name), 1));
		}
		
		if ((node_182316.args == null)) {
		F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(node_182316.args), 1));
		}
		
		F.line = 345;
		if (string_seq_183310[0] != null) { string_seq_183310[0].push(makeNimstrLit("   body")); } else { string_seq_183310[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_183403 = null;
			F.line = 3909;
			var colontmp__183691 = null;
			F.line = 345;
			colontmp__183691 = node_182316.body;
			F.line = 3911;
			var i_183694 = 0;
			F.line = 3912;
			var l_183696 = (colontmp__183691 != null ? colontmp__183691.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183694 < l_183696)) break L3;
						F.line = 3914;
						child_183403 = colontmp__183691[chckIndx(i_183694, 0, colontmp__183691.length+0-1)-0];
						if ((child_183403 == null)) {
						F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(child_183403), 2));
						}
						
						F.line = 3915;
						i_183694 = addInt(i_183694, 1);
						if (!(((colontmp__183691 != null ? colontmp__183691.length : 0) == l_183696))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 345;
		if (string_seq_183310[0] != null) { string_seq_183310[0].push(makeNimstrLit("   decorator_list")); } else { string_seq_183310[0] = [makeNimstrLit("   decorator_list")]; };
		L4: do {
			F.line = 215;
			var child_183615 = null;
			F.line = 3909;
			var colontmp__183698 = null;
			F.line = 345;
			colontmp__183698 = node_182316.decorator_list;
			F.line = 3911;
			var i_183701 = 0;
			F.line = 3912;
			var l_183703 = (colontmp__183698 != null ? colontmp__183698.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_183701 < l_183703)) break L6;
						F.line = 3914;
						child_183615 = colontmp__183698[chckIndx(i_183701, 0, colontmp__183698.length+0-1)-0];
						if ((child_183615 == null)) {
						F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(child_183615), 2));
						}
						
						F.line = 3915;
						i_183701 = addInt(i_183701, 1);
						if (!(((colontmp__183698 != null ? colontmp__183698.length : 0) == l_183703))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182316.returns == null)) {
		F.line = 345;
		add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 345;
		add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(node_182316.returns), 1));
		}
		
		F.line = 476;
		result_183297 = nimCopy(null, nsuJoinSep(string_seq_183310[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183297;

}

function HEX24_182521(node_182523) {
	var result_191862 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191862 = nimCopy(null, makeNimstrLit("MatMult"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191862;

}

function HEX24_182320(node_182322) {
	var result_183987 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 352;
		var string_seq_184000 = [nimCopy(null, [makeNimstrLit("ClassDef")], NTI182673)];
		if ((node_182322.name == null)) {
		F.line = 352;
		add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 352;
		add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(node_182322.name), 1));
		}
		
		F.line = 352;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   bases")); } else { string_seq_184000[0] = [makeNimstrLit("   bases")]; };
		L1: do {
			F.line = 215;
			var child_184056 = null;
			F.line = 3909;
			var colontmp__184366 = null;
			F.line = 352;
			colontmp__184366 = node_182322.bases;
			F.line = 3911;
			var i_184369 = 0;
			F.line = 3912;
			var l_184371 = (colontmp__184366 != null ? colontmp__184366.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_184369 < l_184371)) break L3;
						F.line = 3914;
						child_184056 = colontmp__184366[chckIndx(i_184369, 0, colontmp__184366.length+0-1)-0];
						if ((child_184056 == null)) {
						F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184056), 2));
						}
						
						F.line = 3915;
						i_184369 = addInt(i_184369, 1);
						if (!(((colontmp__184366 != null ? colontmp__184366.length : 0) == l_184371))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 352;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   keywords")); } else { string_seq_184000[0] = [makeNimstrLit("   keywords")]; };
		L4: do {
			F.line = 215;
			var child_184215 = null;
			F.line = 3909;
			var colontmp__184373 = null;
			F.line = 352;
			colontmp__184373 = node_182322.keywords;
			F.line = 3911;
			var i_184376 = 0;
			F.line = 3912;
			var l_184378 = (colontmp__184373 != null ? colontmp__184373.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_184376 < l_184378)) break L6;
						F.line = 3914;
						child_184215 = colontmp__184373[chckIndx(i_184376, 0, colontmp__184373.length+0-1)-0];
						if ((child_184215 == null)) {
						F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184215), 2));
						}
						
						F.line = 3915;
						i_184376 = addInt(i_184376, 1);
						if (!(((colontmp__184373 != null ? colontmp__184373.length : 0) == l_184378))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 353;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   body")); } else { string_seq_184000[0] = [makeNimstrLit("   body")]; };
		L7: do {
			F.line = 215;
			var child_184271 = null;
			F.line = 3909;
			var colontmp__184380 = null;
			F.line = 353;
			colontmp__184380 = node_182322.body;
			F.line = 3911;
			var i_184383 = 0;
			F.line = 3912;
			var l_184385 = (colontmp__184380 != null ? colontmp__184380.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_184383 < l_184385)) break L9;
						F.line = 3914;
						child_184271 = colontmp__184380[chckIndx(i_184383, 0, colontmp__184380.length+0-1)-0];
						if ((child_184271 == null)) {
						F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184271), 2));
						}
						
						F.line = 3915;
						i_184383 = addInt(i_184383, 1);
						if (!(((colontmp__184380 != null ? colontmp__184380.length : 0) == l_184385))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 353;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   decorator_list")); } else { string_seq_184000[0] = [makeNimstrLit("   decorator_list")]; };
		L10: do {
			F.line = 215;
			var child_184327 = null;
			F.line = 3909;
			var colontmp__184387 = null;
			F.line = 353;
			colontmp__184387 = node_182322.decorator_list;
			F.line = 3911;
			var i_184390 = 0;
			F.line = 3912;
			var l_184392 = (colontmp__184387 != null ? colontmp__184387.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_184390 < l_184392)) break L12;
						F.line = 3914;
						child_184327 = colontmp__184387[chckIndx(i_184390, 0, colontmp__184387.length+0-1)-0];
						if ((child_184327 == null)) {
						F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184327), 2));
						}
						
						F.line = 3915;
						i_184390 = addInt(i_184390, 1);
						if (!(((colontmp__184387 != null ? colontmp__184387.length : 0) == l_184392))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_183987 = nimCopy(null, nsuJoinSep(string_seq_184000[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183987;

}

function HEX24_182536(node_182538) {
	var result_191947 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191947 = nimCopy(null, makeNimstrLit("RShift"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191947;

}

function HEX24_182455(node_182457) {
	var result_190715 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 414;
		var string_seq_190728 = [nimCopy(null, [makeNimstrLit("Starred")], NTI182673)];
		if ((node_182457.value == null)) {
		F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(HEX24_177554(node_182457.value), 1));
		}
		
		if ((node_182457.ctx == null)) {
		F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(HEX24_177554(node_182457.ctx), 1));
		}
		
		F.line = 476;
		result_190715 = nimCopy(null, nsuJoinSep(string_seq_190728[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190715;

}

function HEX24_182515(node_182517) {
	var result_191828 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191828 = nimCopy(null, makeNimstrLit("Sub"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191828;

}

function HEX24_182434(node_182436) {
	var result_189504 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 405;
		var string_seq_189517 = [nimCopy(null, [makeNimstrLit("Compare")], NTI182673)];
		if ((node_182436.left == null)) {
		F.line = 405;
		add_182829(string_seq_189517, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 405;
		add_182829(string_seq_189517, 0, indent_177636(HEX24_177554(node_182436.left), 1));
		}
		
		F.line = 405;
		if (string_seq_189517[0] != null) { string_seq_189517[0].push(makeNimstrLit("   ops")); } else { string_seq_189517[0] = [makeNimstrLit("   ops")]; };
		L1: do {
			F.line = 215;
			var child_189815 = null;
			F.line = 3909;
			var colontmp__189910 = null;
			F.line = 405;
			colontmp__189910 = node_182436.ops;
			F.line = 3911;
			var i_189913 = 0;
			F.line = 3912;
			var l_189915 = (colontmp__189910 != null ? colontmp__189910.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_189913 < l_189915)) break L3;
						F.line = 3914;
						child_189815 = colontmp__189910[chckIndx(i_189913, 0, colontmp__189910.length+0-1)-0];
						if ((child_189815 == null)) {
						F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(HEX24_177554(child_189815), 2));
						}
						
						F.line = 3915;
						i_189913 = addInt(i_189913, 1);
						if (!(((colontmp__189910 != null ? colontmp__189910.length : 0) == l_189915))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 405;
		if (string_seq_189517[0] != null) { string_seq_189517[0].push(makeNimstrLit("   comparators")); } else { string_seq_189517[0] = [makeNimstrLit("   comparators")]; };
		L4: do {
			F.line = 215;
			var child_189871 = null;
			F.line = 3909;
			var colontmp__189917 = null;
			F.line = 405;
			colontmp__189917 = node_182436.comparators;
			F.line = 3911;
			var i_189920 = 0;
			F.line = 3912;
			var l_189922 = (colontmp__189917 != null ? colontmp__189917.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_189920 < l_189922)) break L6;
						F.line = 3914;
						child_189871 = colontmp__189917[chckIndx(i_189920, 0, colontmp__189917.length+0-1)-0];
						if ((child_189871 == null)) {
						F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(HEX24_177554(child_189871), 2));
						}
						
						F.line = 3915;
						i_189920 = addInt(i_189920, 1);
						if (!(((colontmp__189917 != null ? colontmp__189917.length : 0) == l_189922))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189504 = nimCopy(null, nsuJoinSep(string_seq_189517[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189504;

}

function HEX24_182428(node_182430) {
	var result_189370 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 401;
		var string_seq_189383 = [nimCopy(null, [makeNimstrLit("Yield")], NTI182673)];
		if ((node_182430.value == null)) {
		F.line = 401;
		add_182829(string_seq_189383, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 401;
		add_182829(string_seq_189383, 0, indent_177636(HEX24_177554(node_182430.value), 1));
		}
		
		F.line = 476;
		result_189370 = nimCopy(null, nsuJoinSep(string_seq_189383[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189370;

}

function HEX24_182449(node_182451) {
	var result_190433 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 412;
		var string_seq_190446 = [nimCopy(null, [makeNimstrLit("Attribute")], NTI182673)];
		if ((node_182451.value == null)) {
		F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(HEX24_177554(node_182451.value), 1));
		}
		
		if ((node_182451.attr == null)) {
		F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(HEX24_177554(node_182451.attr), 1));
		}
		
		if ((node_182451.ctx == null)) {
		F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(HEX24_177554(node_182451.ctx), 1));
		}
		
		F.line = 476;
		result_190433 = nimCopy(null, nsuJoinSep(string_seq_190446[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190433;

}

function HEX24_182404(node_182406) {
	var result_188270 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 392;
		var string_seq_188283 = [nimCopy(null, [makeNimstrLit("IfExp")], NTI182673)];
		if ((node_182406.test == null)) {
		F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(HEX24_177554(node_182406.test), 1));
		}
		
		if ((node_182406.body == null)) {
		F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(HEX24_177554(node_182406.body), 1));
		}
		
		if ((node_182406.orelse == null)) {
		F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(HEX24_177554(node_182406.orelse), 1));
		}
		
		F.line = 476;
		result_188270 = nimCopy(null, nsuJoinSep(string_seq_188283[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188270;

}

function HEX24_182479(node_182481) {
	var result_191251 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191251 = nimCopy(null, makeNimstrLit("AugLoad"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191251;

}

function HEX24_182518(node_182520) {
	var result_191845 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191845 = nimCopy(null, makeNimstrLit("Mult"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191845;

}

function HEX24_182461(node_182463) {
	var result_190923 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 416;
		var string_seq_190936 = [nimCopy(null, [makeNimstrLit("List")], NTI182673)];
		F.line = 416;
		if (string_seq_190936[0] != null) { string_seq_190936[0].push(makeNimstrLit("   elts")); } else { string_seq_190936[0] = [makeNimstrLit("   elts")]; };
		L1: do {
			F.line = 215;
			var child_190955 = null;
			F.line = 3909;
			var colontmp__191031 = null;
			F.line = 416;
			colontmp__191031 = node_182463.elts;
			F.line = 3911;
			var i_191034 = 0;
			F.line = 3912;
			var l_191036 = (colontmp__191031 != null ? colontmp__191031.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_191034 < l_191036)) break L3;
						F.line = 3914;
						child_190955 = colontmp__191031[chckIndx(i_191034, 0, colontmp__191031.length+0-1)-0];
						if ((child_190955 == null)) {
						F.line = 416;
						add_182829(string_seq_190936, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 416;
						add_182829(string_seq_190936, 0, indent_177636(HEX24_177554(child_190955), 2));
						}
						
						F.line = 3915;
						i_191034 = addInt(i_191034, 1);
						if (!(((colontmp__191031 != null ? colontmp__191031.length : 0) == l_191036))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182463.ctx == null)) {
		F.line = 416;
		add_182829(string_seq_190936, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 416;
		add_182829(string_seq_190936, 0, indent_177636(HEX24_177554(node_182463.ctx), 1));
		}
		
		F.line = 476;
		result_190923 = nimCopy(null, nsuJoinSep(string_seq_190936[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190923;

}

function HEX24_182458(node_182460) {
	var result_190819 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 415;
		var string_seq_190832 = [nimCopy(null, [makeNimstrLit("Name")], NTI182673)];
		if ((node_182460.id == null)) {
		F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(HEX24_177554(node_182460.id), 1));
		}
		
		if ((node_182460.ctx == null)) {
		F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(HEX24_177554(node_182460.ctx), 1));
		}
		
		F.line = 476;
		result_190819 = nimCopy(null, nsuJoinSep(string_seq_190832[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190819;

}

function HEX24_182533(node_182535) {
	var result_191930 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191930 = nimCopy(null, makeNimstrLit("LShift"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191930;

}

function HEX24_182431(node_182433) {
	var result_189437 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 402;
		var string_seq_189450 = [nimCopy(null, [makeNimstrLit("YieldFrom")], NTI182673)];
		if ((node_182433.value == null)) {
		F.line = 402;
		add_182829(string_seq_189450, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 402;
		add_182829(string_seq_189450, 0, indent_177636(HEX24_177554(node_182433.value), 1));
		}
		
		F.line = 476;
		result_189437 = nimCopy(null, nsuJoinSep(string_seq_189450[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189437;

}

function HEX24_182614(node_182616) {
	var result_192813 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 442;
		var string_seq_192826 = [nimCopy(null, [makeNimstrLit("Arguments")], NTI182673)];
		F.line = 442;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   args")); } else { string_seq_192826[0] = [makeNimstrLit("   args")]; };
		L1: do {
			F.line = 215;
			var child_193015 = null;
			F.line = 3909;
			var colontmp__193296 = null;
			F.line = 442;
			colontmp__193296 = node_182616.args;
			F.line = 3911;
			var i_193299 = 0;
			F.line = 3912;
			var l_193301 = (colontmp__193296 != null ? colontmp__193296.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_193299 < l_193301)) break L3;
						F.line = 3914;
						child_193015 = colontmp__193296[chckIndx(i_193299, 0, colontmp__193296.length+0-1)-0];
						if ((child_193015 == null)) {
						F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193015), 2));
						}
						
						F.line = 3915;
						i_193299 = addInt(i_193299, 1);
						if (!(((colontmp__193296 != null ? colontmp__193296.length : 0) == l_193301))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182616.vararg == null)) {
		F.line = 442;
		add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 442;
		add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(node_182616.vararg), 1));
		}
		
		F.line = 442;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   kwonlyargs")); } else { string_seq_192826[0] = [makeNimstrLit("   kwonlyargs")]; };
		L4: do {
			F.line = 215;
			var child_193108 = null;
			F.line = 3909;
			var colontmp__193303 = null;
			F.line = 442;
			colontmp__193303 = node_182616.kwonlyargs;
			F.line = 3911;
			var i_193306 = 0;
			F.line = 3912;
			var l_193308 = (colontmp__193303 != null ? colontmp__193303.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_193306 < l_193308)) break L6;
						F.line = 3914;
						child_193108 = colontmp__193303[chckIndx(i_193306, 0, colontmp__193303.length+0-1)-0];
						if ((child_193108 == null)) {
						F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193108), 2));
						}
						
						F.line = 3915;
						i_193306 = addInt(i_193306, 1);
						if (!(((colontmp__193303 != null ? colontmp__193303.length : 0) == l_193308))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 443;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   kw_defaults")); } else { string_seq_192826[0] = [makeNimstrLit("   kw_defaults")]; };
		L7: do {
			F.line = 215;
			var child_193164 = null;
			F.line = 3909;
			var colontmp__193310 = null;
			F.line = 443;
			colontmp__193310 = node_182616.kw_defaults;
			F.line = 3911;
			var i_193313 = 0;
			F.line = 3912;
			var l_193315 = (colontmp__193310 != null ? colontmp__193310.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_193313 < l_193315)) break L9;
						F.line = 3914;
						child_193164 = colontmp__193310[chckIndx(i_193313, 0, colontmp__193310.length+0-1)-0];
						if ((child_193164 == null)) {
						F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193164), 2));
						}
						
						F.line = 3915;
						i_193313 = addInt(i_193313, 1);
						if (!(((colontmp__193310 != null ? colontmp__193310.length : 0) == l_193315))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182616.kwarg == null)) {
		F.line = 443;
		add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 443;
		add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(node_182616.kwarg), 1));
		}
		
		F.line = 443;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   defaults")); } else { string_seq_192826[0] = [makeNimstrLit("   defaults")]; };
		L10: do {
			F.line = 215;
			var child_193257 = null;
			F.line = 3909;
			var colontmp__193317 = null;
			F.line = 443;
			colontmp__193317 = node_182616.defaults;
			F.line = 3911;
			var i_193320 = 0;
			F.line = 3912;
			var l_193322 = (colontmp__193317 != null ? colontmp__193317.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_193320 < l_193322)) break L12;
						F.line = 3914;
						child_193257 = colontmp__193317[chckIndx(i_193320, 0, colontmp__193317.length+0-1)-0];
						if ((child_193257 == null)) {
						F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193257), 2));
						}
						
						F.line = 3915;
						i_193320 = addInt(i_193320, 1);
						if (!(((colontmp__193317 != null ? colontmp__193317.length : 0) == l_193322))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_192813 = nimCopy(null, nsuJoinSep(string_seq_192826[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192813;

}

function HEX24_182464(node_182466) {
	var result_191053 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 417;
		var string_seq_191066 = [nimCopy(null, [makeNimstrLit("Tuple")], NTI182673)];
		F.line = 417;
		if (string_seq_191066[0] != null) { string_seq_191066[0].push(makeNimstrLit("   elts")); } else { string_seq_191066[0] = [makeNimstrLit("   elts")]; };
		L1: do {
			F.line = 215;
			var child_191085 = null;
			F.line = 3909;
			var colontmp__191161 = null;
			F.line = 417;
			colontmp__191161 = node_182466.elts;
			F.line = 3911;
			var i_191164 = 0;
			F.line = 3912;
			var l_191166 = (colontmp__191161 != null ? colontmp__191161.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_191164 < l_191166)) break L3;
						F.line = 3914;
						child_191085 = colontmp__191161[chckIndx(i_191164, 0, colontmp__191161.length+0-1)-0];
						if ((child_191085 == null)) {
						F.line = 417;
						add_182829(string_seq_191066, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 417;
						add_182829(string_seq_191066, 0, indent_177636(HEX24_177554(child_191085), 2));
						}
						
						F.line = 3915;
						i_191164 = addInt(i_191164, 1);
						if (!(((colontmp__191161 != null ? colontmp__191161.length : 0) == l_191166))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182466.ctx == null)) {
		F.line = 417;
		add_182829(string_seq_191066, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 417;
		add_182829(string_seq_191066, 0, indent_177636(HEX24_177554(node_182466.ctx), 1));
		}
		
		F.line = 476;
		result_191053 = nimCopy(null, nsuJoinSep(string_seq_191066[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191053;

}

function HEX24_182485(node_182487) {
	var result_191285 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191285 = nimCopy(null, makeNimstrLit("Param"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191285;

}

function HEX24_182305(node_182307) {
	var result_183033 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 336;
		var string_seq_183046 = [nimCopy(null, [makeNimstrLit("Expression")], NTI182673)];
		if ((node_182307.body == null)) {
		F.line = 336;
		add_182829(string_seq_183046, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 336;
		add_182829(string_seq_183046, 0, indent_177636(HEX24_177554(node_182307.body), 1));
		}
		
		F.line = 476;
		result_183033 = nimCopy(null, nsuJoinSep(string_seq_183046[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183033;

}

function HEX24_182476(node_182478) {
	var result_191234 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191234 = nimCopy(null, makeNimstrLit("Del"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191234;

}

function HEX24_182539(node_182541) {
	var result_191964 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191964 = nimCopy(null, makeNimstrLit("BitOr"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191964;

}

function HEX24_182482(node_182484) {
	var result_191268 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191268 = nimCopy(null, makeNimstrLit("AugStore"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191268;

}

function HEX24_182437(node_182439) {
	var result_189939 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 406;
		var string_seq_189952 = [nimCopy(null, [makeNimstrLit("Call")], NTI182673)];
		if ((node_182439.fun == null)) {
		F.line = 406;
		add_182829(string_seq_189952, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 406;
		add_182829(string_seq_189952, 0, indent_177636(HEX24_177554(node_182439.fun), 1));
		}
		
		F.line = 406;
		if (string_seq_189952[0] != null) { string_seq_189952[0].push(makeNimstrLit("   args")); } else { string_seq_189952[0] = [makeNimstrLit("   args")]; };
		L1: do {
			F.line = 215;
			var child_190008 = null;
			F.line = 3909;
			var colontmp__190103 = null;
			F.line = 406;
			colontmp__190103 = node_182439.args;
			F.line = 3911;
			var i_190106 = 0;
			F.line = 3912;
			var l_190108 = (colontmp__190103 != null ? colontmp__190103.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_190106 < l_190108)) break L3;
						F.line = 3914;
						child_190008 = colontmp__190103[chckIndx(i_190106, 0, colontmp__190103.length+0-1)-0];
						if ((child_190008 == null)) {
						F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(HEX24_177554(child_190008), 2));
						}
						
						F.line = 3915;
						i_190106 = addInt(i_190106, 1);
						if (!(((colontmp__190103 != null ? colontmp__190103.length : 0) == l_190108))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 406;
		if (string_seq_189952[0] != null) { string_seq_189952[0].push(makeNimstrLit("   keywords")); } else { string_seq_189952[0] = [makeNimstrLit("   keywords")]; };
		L4: do {
			F.line = 215;
			var child_190064 = null;
			F.line = 3909;
			var colontmp__190110 = null;
			F.line = 406;
			colontmp__190110 = node_182439.keywords;
			F.line = 3911;
			var i_190113 = 0;
			F.line = 3912;
			var l_190115 = (colontmp__190110 != null ? colontmp__190110.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_190113 < l_190115)) break L6;
						F.line = 3914;
						child_190064 = colontmp__190110[chckIndx(i_190113, 0, colontmp__190110.length+0-1)-0];
						if ((child_190064 == null)) {
						F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(HEX24_177554(child_190064), 2));
						}
						
						F.line = 3915;
						i_190113 = addInt(i_190113, 1);
						if (!(((colontmp__190110 != null ? colontmp__190110.length : 0) == l_190115))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189939 = nimCopy(null, nsuJoinSep(string_seq_189952[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189939;

}

function HEX24_182410(node_182412) {
	var result_188567 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 394;
		var string_seq_188580 = [nimCopy(null, [makeNimstrLit("Set")], NTI182673)];
		F.line = 394;
		if (string_seq_188580[0] != null) { string_seq_188580[0].push(makeNimstrLit("   elts")); } else { string_seq_188580[0] = [makeNimstrLit("   elts")]; };
		L1: do {
			F.line = 215;
			var child_188599 = null;
			F.line = 3909;
			var colontmp__188638 = null;
			F.line = 394;
			colontmp__188638 = node_182412.elts;
			F.line = 3911;
			var i_188641 = 0;
			F.line = 3912;
			var l_188643 = (colontmp__188638 != null ? colontmp__188638.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188641 < l_188643)) break L3;
						F.line = 3914;
						child_188599 = colontmp__188638[chckIndx(i_188641, 0, colontmp__188638.length+0-1)-0];
						if ((child_188599 == null)) {
						F.line = 394;
						add_182829(string_seq_188580, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 394;
						add_182829(string_seq_188580, 0, indent_177636(HEX24_177554(child_188599), 2));
						}
						
						F.line = 3915;
						i_188641 = addInt(i_188641, 1);
						if (!(((colontmp__188638 != null ? colontmp__188638.length : 0) == l_188643))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188567 = nimCopy(null, nsuJoinSep(string_seq_188580[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188567;

}

function HEX24_182632(node_182634) {
	var result_193685 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 451;
		var string_seq_193698 = [nimCopy(null, [makeNimstrLit("Alias")], NTI182673)];
		if ((node_182634.name == null)) {
		F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(HEX24_177554(node_182634.name), 1));
		}
		
		if ((node_182634.asname == null)) {
		F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(HEX24_177554(node_182634.asname), 1));
		}
		
		F.line = 476;
		result_193685 = nimCopy(null, nsuJoinSep(string_seq_193698[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193685;

}

function HEX24_182422(node_182424) {
	var result_189173 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 398;
		var string_seq_189186 = [nimCopy(null, [makeNimstrLit("GeneratorExp")], NTI182673)];
		if ((node_182424.elt == null)) {
		F.line = 398;
		add_182829(string_seq_189186, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 398;
		add_182829(string_seq_189186, 0, indent_177636(HEX24_177554(node_182424.elt), 1));
		}
		
		F.line = 398;
		if (string_seq_189186[0] != null) { string_seq_189186[0].push(makeNimstrLit("   generators")); } else { string_seq_189186[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_189242 = null;
			F.line = 3909;
			var colontmp__189281 = null;
			F.line = 398;
			colontmp__189281 = node_182424.generators;
			F.line = 3911;
			var i_189284 = 0;
			F.line = 3912;
			var l_189286 = (colontmp__189281 != null ? colontmp__189281.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_189284 < l_189286)) break L3;
						F.line = 3914;
						child_189242 = colontmp__189281[chckIndx(i_189284, 0, colontmp__189281.length+0-1)-0];
						if ((child_189242 == null)) {
						F.line = 398;
						add_182829(string_seq_189186, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 398;
						add_182829(string_seq_189186, 0, indent_177636(HEX24_177554(child_189242), 2));
						}
						
						F.line = 3915;
						i_189284 = addInt(i_189284, 1);
						if (!(((colontmp__189281 != null ? colontmp__189281.length : 0) == l_189286))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189173 = nimCopy(null, nsuJoinSep(string_seq_189186[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189173;

}

function HEX24_182443(node_182445) {
	var result_190273 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 408;
		var string_seq_190286 = [nimCopy(null, [makeNimstrLit("JoinedStr")], NTI182673)];
		F.line = 408;
		if (string_seq_190286[0] != null) { string_seq_190286[0].push(makeNimstrLit("   values")); } else { string_seq_190286[0] = [makeNimstrLit("   values")]; };
		L1: do {
			F.line = 215;
			var child_190305 = null;
			F.line = 3909;
			var colontmp__190344 = null;
			F.line = 408;
			colontmp__190344 = node_182445.values;
			F.line = 3911;
			var i_190347 = 0;
			F.line = 3912;
			var l_190349 = (colontmp__190344 != null ? colontmp__190344.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_190347 < l_190349)) break L3;
						F.line = 3914;
						child_190305 = colontmp__190344[chckIndx(i_190347, 0, colontmp__190344.length+0-1)-0];
						if ((child_190305 == null)) {
						F.line = 408;
						add_182829(string_seq_190286, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 408;
						add_182829(string_seq_190286, 0, indent_177636(HEX24_177554(child_190305), 2));
						}
						
						F.line = 3915;
						i_190347 = addInt(i_190347, 1);
						if (!(((colontmp__190344 != null ? colontmp__190344.length : 0) == l_190349))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_190273 = nimCopy(null, nsuJoinSep(string_seq_190286[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190273;

}

function HEX24_182557(node_182559) {
	var result_192066 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192066 = nimCopy(null, makeNimstrLit("Not"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192066;

}

function HEX24_182578(node_182580) {
	var result_192185 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192185 = nimCopy(null, makeNimstrLit("LtE"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192185;

}

function HEX24_182440(node_182442) {
	var result_190132 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 407;
		var string_seq_190145 = [nimCopy(null, [makeNimstrLit("FormattedValue")], NTI182673)];
		if ((node_182442.value == null)) {
		F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(HEX24_177554(node_182442.value), 1));
		}
		
		if ((node_182442.conversion == null)) {
		F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(HEX24_177554(node_182442.conversion), 1));
		}
		
		if ((node_182442.format_spec == null)) {
		F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(HEX24_177554(node_182442.format_spec), 1));
		}
		
		F.line = 476;
		result_190132 = nimCopy(null, nsuJoinSep(string_seq_190145[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190132;

}

function HEX24_182527(node_182529) {
	var result_191896 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191896 = nimCopy(null, makeNimstrLit("Mod"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191896;

}

function HEX24_182596(node_182598) {
	var result_192287 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192287 = nimCopy(null, makeNimstrLit("NotIn"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192287;

}

function HEX24_182590(node_182592) {
	var result_192253 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192253 = nimCopy(null, makeNimstrLit("IsNot"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192253;

}

function HEX24_182581(node_182583) {
	var result_192202 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192202 = nimCopy(null, makeNimstrLit("Gt"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192202;

}

function HEX24_182446(node_182448) {
	var result_190366 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 409;
		var string_seq_190379 = [nimCopy(null, [makeNimstrLit("Constant")], NTI182673)];
		if ((node_182448.value == null)) {
		F.line = 409;
		add_182829(string_seq_190379, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 409;
		add_182829(string_seq_190379, 0, indent_177636(HEX24_177554(node_182448.value), 1));
		}
		
		F.line = 476;
		result_190366 = nimCopy(null, nsuJoinSep(string_seq_190379[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190366;

}

function HEX24_182575(node_182577) {
	var result_192168 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192168 = nimCopy(null, makeNimstrLit("Lt"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192168;

}

function HEX24_182554(node_182556) {
	var result_192049 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192049 = nimCopy(null, makeNimstrLit("Invert"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192049;

}

function HEX24_182620(node_182622) {
	var result_193443 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 445;
		var string_seq_193456 = [nimCopy(null, [makeNimstrLit("Arg")], NTI182673)];
		if ((node_182622.arg == null)) {
		F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(HEX24_177554(node_182622.arg), 1));
		}
		
		if ((node_182622.annotation == null)) {
		F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(HEX24_177554(node_182622.annotation), 1));
		}
		
		F.line = 476;
		result_193443 = nimCopy(null, nsuJoinSep(string_seq_193456[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193443;

}

function HEX24_182602(node_182604) {
	var result_192321 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 437;
		var string_seq_192334 = [nimCopy(null, [makeNimstrLit("Comprehension")], NTI182673)];
		if ((node_182604.target == null)) {
		F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(node_182604.target), 1));
		}
		
		if ((node_182604.iter == null)) {
		F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(node_182604.iter), 1));
		}
		
		F.line = 437;
		if (string_seq_192334[0] != null) { string_seq_192334[0].push(makeNimstrLit("   ifs")); } else { string_seq_192334[0] = [makeNimstrLit("   ifs")]; };
		L1: do {
			F.line = 215;
			var child_192427 = null;
			F.line = 3909;
			var colontmp__192503 = null;
			F.line = 437;
			colontmp__192503 = node_182604.ifs;
			F.line = 3911;
			var i_192506 = 0;
			F.line = 3912;
			var l_192508 = (colontmp__192503 != null ? colontmp__192503.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_192506 < l_192508)) break L3;
						F.line = 3914;
						child_192427 = colontmp__192503[chckIndx(i_192506, 0, colontmp__192503.length+0-1)-0];
						if ((child_192427 == null)) {
						F.line = 437;
						add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 437;
						add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(child_192427), 2));
						}
						
						F.line = 3915;
						i_192506 = addInt(i_192506, 1);
						if (!(((colontmp__192503 != null ? colontmp__192503.length : 0) == l_192508))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182604.is_async == null)) {
		F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(node_182604.is_async), 1));
		}
		
		F.line = 476;
		result_192321 = nimCopy(null, nsuJoinSep(string_seq_192334[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192321;

}

function HEX24_182593(node_182595) {
	var result_192270 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192270 = nimCopy(null, makeNimstrLit("In"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192270;

}

function HEX24_182626(node_182628) {
	var result_193564 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 448;
		var string_seq_193577 = [nimCopy(null, [makeNimstrLit("Keyword")], NTI182673)];
		if ((node_182628.arg == null)) {
		F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(HEX24_177554(node_182628.arg), 1));
		}
		
		if ((node_182628.value == null)) {
		F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(HEX24_177554(node_182628.value), 1));
		}
		
		F.line = 476;
		result_193564 = nimCopy(null, nsuJoinSep(string_seq_193577[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193564;

}

function HEX24_182524(node_182526) {
	var result_191879 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191879 = nimCopy(null, makeNimstrLit("Div"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191879;

}

function HEX24_182638(node_182640) {
	var result_193806 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 453;
		var string_seq_193819 = [nimCopy(null, [makeNimstrLit("Withitem")], NTI182673)];
		if ((node_182640.context_expr == null)) {
		F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(HEX24_177554(node_182640.context_expr), 1));
		}
		
		if ((node_182640.optional_vars == null)) {
		F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(HEX24_177554(node_182640.optional_vars), 1));
		}
		
		F.line = 476;
		result_193806 = nimCopy(null, nsuJoinSep(string_seq_193819[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193806;

}

function HEX24_182635(node_182637) {
	var result_193789 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 453;
		result_193789 = nimCopy(null, makeNimstrLit("withitem"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193789;

}

function HEX24_182548(node_182550) {
	var result_192015 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_192015 = nimCopy(null, makeNimstrLit("FloorDiv"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192015;

}

function HEX24_182452(node_182454) {
	var result_190574 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 413;
		var string_seq_190587 = [nimCopy(null, [makeNimstrLit("Subscript")], NTI182673)];
		if ((node_182454.value == null)) {
		F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(HEX24_177554(node_182454.value), 1));
		}
		
		if ((node_182454.slice == null)) {
		F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(HEX24_177554(node_182454.slice), 1));
		}
		
		if ((node_182454.ctx == null)) {
		F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(HEX24_177554(node_182454.ctx), 1));
		}
		
		F.line = 476;
		result_190574 = nimCopy(null, nsuJoinSep(string_seq_190587[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190574;

}

function HEX24_182623(node_182625) {
	var result_193547 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 448;
		result_193547 = nimCopy(null, makeNimstrLit("keyword"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193547;

}

function HEX24_182425(node_182427) {
	var result_189303 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 400;
		var string_seq_189316 = [nimCopy(null, [makeNimstrLit("Await")], NTI182673)];
		if ((node_182427.value == null)) {
		F.line = 400;
		add_182829(string_seq_189316, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 400;
		add_182829(string_seq_189316, 0, indent_177636(HEX24_177554(node_182427.value), 1));
		}
		
		F.line = 476;
		result_189303 = nimCopy(null, nsuJoinSep(string_seq_189316[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189303;

}

function HEX24_182584(node_182586) {
	var result_192219 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192219 = nimCopy(null, makeNimstrLit("GtE"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192219;

}

function HEX24_182563(node_182565) {
	var result_192100 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192100 = nimCopy(null, makeNimstrLit("USub"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192100;

}

function HEX24_182569(node_182571) {
	var result_192134 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192134 = nimCopy(null, makeNimstrLit("Eq"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192134;

}

function HEX24_182608(node_182610) {
	var result_192629 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 440;
		var string_seq_192642 = [nimCopy(null, [makeNimstrLit("ExceptHandler")], NTI182673)];
		if ((node_182610.type == null)) {
		F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(HEX24_177554(node_182610.type), 1));
		}
		
		if ((node_182610.name == null)) {
		F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(HEX24_177554(node_182610.name), 1));
		}
		
		F.line = 440;
		if (string_seq_192642[0] != null) { string_seq_192642[0].push(makeNimstrLit("   body")); } else { string_seq_192642[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_192735 = null;
			F.line = 3909;
			var colontmp__192774 = null;
			F.line = 440;
			colontmp__192774 = node_182610.body;
			F.line = 3911;
			var i_192777 = 0;
			F.line = 3912;
			var l_192779 = (colontmp__192774 != null ? colontmp__192774.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_192777 < l_192779)) break L3;
						F.line = 3914;
						child_192735 = colontmp__192774[chckIndx(i_192777, 0, colontmp__192774.length+0-1)-0];
						if ((child_192735 == null)) {
						F.line = 440;
						add_182829(string_seq_192642, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 440;
						add_182829(string_seq_192642, 0, indent_177636(HEX24_177554(child_192735), 2));
						}
						
						F.line = 3915;
						i_192777 = addInt(i_192777, 1);
						if (!(((colontmp__192774 != null ? colontmp__192774.length : 0) == l_192779))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_192629 = nimCopy(null, nsuJoinSep(string_seq_192642[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192629;

}

function HEX24_182560(node_182562) {
	var result_192083 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192083 = nimCopy(null, makeNimstrLit("UAdd"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192083;

}

function HEX24_182542(node_182544) {
	var result_191981 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191981 = nimCopy(null, makeNimstrLit("BitXor"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191981;

}

function HEX24_182587(node_182589) {
	var result_192236 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192236 = nimCopy(null, makeNimstrLit("Is"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192236;

}

function HEX24_182299(node_182301) {
	var result_182661 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 334;
		var string_seq_182674 = [nimCopy(null, [makeNimstrLit("Module")], NTI182673)];
		F.line = 334;
		if (string_seq_182674[0] != null) { string_seq_182674[0].push(makeNimstrLit("   body")); } else { string_seq_182674[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_182815 = null;
			F.line = 3909;
			var colontmp__182918 = null;
			F.line = 334;
			colontmp__182918 = node_182301.body;
			F.line = 3911;
			var i_182921 = 0;
			F.line = 3912;
			var l_182923 = (colontmp__182918 != null ? colontmp__182918.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_182921 < l_182923)) break L3;
						F.line = 3914;
						child_182815 = colontmp__182918[chckIndx(i_182921, 0, colontmp__182918.length+0-1)-0];
						if ((child_182815 == null)) {
						F.line = 334;
						add_182829(string_seq_182674, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 334;
						add_182829(string_seq_182674, 0, indent_177636(HEX24_177554(child_182815), 2));
						}
						
						F.line = 3915;
						i_182921 = addInt(i_182921, 1);
						if (!(((colontmp__182918 != null ? colontmp__182918.length : 0) == l_182923))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_182661 = nimCopy(null, nsuJoinSep(string_seq_182674[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_182661;

}

function HEX24_182572(node_182574) {
	var result_192151 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192151 = nimCopy(null, makeNimstrLit("NotEq"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192151;

}

function HEX24_177605(node_177607) {
	var result_177608 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 131;
		result_177608 = nimCopy(null, HEX24_157579(node_177607.value), NTI138);
	framePtr = F.prev;

	return result_177608;

}

function HEX24_182545(node_182547) {
	var result_191998 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191998 = nimCopy(null, makeNimstrLit("BitAnd"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191998;

}

function HEX24_177588(node_177590) {
	var result_177591 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_177591 = nimCopy(null, HEX24_157579(node_177590.value), NTI138);
	framePtr = F.prev;

	return result_177591;

}

function HEX24_182530(node_182532) {
	var result_191913 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191913 = nimCopy(null, makeNimstrLit("Pow"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191913;

}

function HEX24_182488(node_182490) {
	var result_191302 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 422;
		result_191302 = nimCopy(null, makeNimstrLit("slice"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191302;

}

function HEX24_182296(node_182298) {
	var result_182644 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 333;
		result_182644 = nimCopy(null, makeNimstrLit("modl"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_182644;

}

function HEX24_177571(node_177573) {
	var result_177574 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 125;
		result_177574 = nimCopy(null, cstrToNimstr((node_177573.value)+""), NTI138);
	framePtr = F.prev;

	return result_177574;

}

function HEX24_182311(node_182313) {
	var result_183193 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 342;
		var string_seq_183206 = [nimCopy(null, [makeNimstrLit("stmt")], NTI182673)];
		if ((node_182313.lineno == null)) {
		F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(HEX24_177554(node_182313.lineno), 1));
		}
		
		if ((node_182313.col_offset == null)) {
		F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(HEX24_177554(node_182313.col_offset), 1));
		}
		
		F.line = 476;
		result_183193 = nimCopy(null, nsuJoinSep(string_seq_183206[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183193;

}

function HEX24_182467(node_182469) {
	var result_191183 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191183 = nimCopy(null, makeNimstrLit("expr_context"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191183;

}

function HEX24_182617(node_182619) {
	var result_193339 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 445;
		var string_seq_193352 = [nimCopy(null, [makeNimstrLit("arg")], NTI182673)];
		if ((node_182619.lineno == null)) {
		F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(HEX24_177554(node_182619.lineno), 1));
		}
		
		if ((node_182619.col_offset == null)) {
		F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(HEX24_177554(node_182619.col_offset), 1));
		}
		
		F.line = 476;
		result_193339 = nimCopy(null, nsuJoinSep(string_seq_193352[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193339;

}

function HEX24_182605(node_182607) {
	var result_192525 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 439;
		var string_seq_192538 = [nimCopy(null, [makeNimstrLit("excepthandler")], NTI182673)];
		if ((node_182607.lineno == null)) {
		F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(HEX24_177554(node_182607.lineno), 1));
		}
		
		if ((node_182607.col_offset == null)) {
		F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(HEX24_177554(node_182607.col_offset), 1));
		}
		
		F.line = 476;
		result_192525 = nimCopy(null, nsuJoinSep(string_seq_192538[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192525;

}

function HEX24_182599(node_182601) {
	var result_192304 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 437;
		result_192304 = nimCopy(null, makeNimstrLit("comprehension"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192304;

}

function HEX24_182611(node_182613) {
	var result_192796 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 442;
		result_192796 = nimCopy(null, makeNimstrLit("arguments"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192796;

}

function HEX24_182629(node_182631) {
	var result_193668 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 451;
		result_193668 = nimCopy(null, makeNimstrLit("alias"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193668;

}

function HEX24_182500(node_182502) {
	var result_191743 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 428;
		result_191743 = nimCopy(null, makeNimstrLit("boolop"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191743;

}

function HEX24_182389(node_182391) {
	var result_187687 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 386;
		var string_seq_187700 = [nimCopy(null, [makeNimstrLit("expr")], NTI182673)];
		if ((node_182391.lineno == null)) {
		F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(HEX24_177554(node_182391.lineno), 1));
		}
		
		if ((node_182391.col_offset == null)) {
		F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(HEX24_177554(node_182391.col_offset), 1));
		}
		
		F.line = 476;
		result_187687 = nimCopy(null, nsuJoinSep(string_seq_187700[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187687;

}

function HEX24_182566(node_182568) {
	var result_192117 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192117 = nimCopy(null, makeNimstrLit("cmpop"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192117;

}

function HEX24_182509(node_182511) {
	var result_191794 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191794 = nimCopy(null, makeNimstrLit("operator"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191794;

}

function HEX24_182551(node_182553) {
	var result_192032 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192032 = nimCopy(null, makeNimstrLit("unaryop"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192032;

}

function HEX24_177549(node_177551) {
	var result_177552 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 122;
		result_177552 = nimCopy(null, makeNimstrLit("!!!DUMMY!!!"), NTI138);
	framePtr = F.prev;

	return result_177552;

}

function HEX24_177554(node_177551) {
	var result_177557 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(node_177551);
		if (isObj(node_177551.m_type, NTI179658)) {
		F.line = 119;
		result_177557 = HEX24_182365(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179732)) {
		F.line = 119;
		result_177557 = HEX24_182371(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179693)) {
		F.line = 119;
		result_177557 = HEX24_182368(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179802)) {
		F.line = 119;
		result_177557 = HEX24_182377(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179866)) {
		F.line = 119;
		result_177557 = HEX24_182383(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179835)) {
		F.line = 119;
		result_177557 = HEX24_182380(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179463)) {
		F.line = 119;
		result_177557 = HEX24_182350(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179767)) {
		F.line = 119;
		result_177557 = HEX24_182374(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179965)) {
		F.line = 119;
		result_177557 = HEX24_182395(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180037)) {
		F.line = 119;
		result_177557 = HEX24_182401(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179897)) {
		F.line = 119;
		result_177557 = HEX24_182386(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179182)) {
		F.line = 119;
		result_177557 = HEX24_182329(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179928)) {
		F.line = 119;
		result_177557 = HEX24_182392(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179256)) {
		F.line = 119;
		result_177557 = HEX24_182335(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179338)) {
		F.line = 119;
		result_177557 = HEX24_182341(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179147)) {
		F.line = 119;
		result_177557 = HEX24_182326(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179422)) {
		F.line = 119;
		result_177557 = HEX24_182347(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180002)) {
		F.line = 119;
		result_177557 = HEX24_182398(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179502)) {
		F.line = 119;
		result_177557 = HEX24_182353(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179295)) {
		F.line = 119;
		result_177557 = HEX24_182338(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179576)) {
		F.line = 119;
		result_177557 = HEX24_182359(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180183)) {
		F.line = 119;
		result_177557 = HEX24_182413(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180109)) {
		F.line = 119;
		result_177557 = HEX24_182407(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181190)) {
		F.line = 119;
		result_177557 = HEX24_182512(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179381)) {
		F.line = 119;
		result_177557 = HEX24_182344(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180257)) {
		F.line = 119;
		result_177557 = HEX24_182419(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179623)) {
		F.line = 119;
		result_177557 = HEX24_182362(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181060)) {
		F.line = 119;
		result_177557 = HEX24_182494(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179541)) {
		F.line = 119;
		result_177557 = HEX24_182356(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180868)) {
		F.line = 119;
		result_177557 = HEX24_182473(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180220)) {
		F.line = 119;
		result_177557 = HEX24_182416(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181159)) {
		F.line = 119;
		result_177557 = HEX24_182506(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179114)) {
		F.line = 119;
		result_177557 = HEX24_182323(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179020)) {
		F.line = 119;
		result_177557 = HEX24_182317(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181023)) {
		F.line = 119;
		result_177557 = HEX24_182491(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181095)) {
		F.line = 119;
		result_177557 = HEX24_182497(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179219)) {
		F.line = 119;
		result_177557 = HEX24_182332(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178872)) {
		F.line = 119;
		result_177557 = HEX24_182302(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180837)) {
		F.line = 119;
		result_177557 = HEX24_182470(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178940)) {
		F.line = 119;
		result_177557 = HEX24_182308(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181128)) {
		F.line = 119;
		result_177557 = HEX24_182503(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178975)) {
		F.line = 119;
		result_177557 = HEX24_182314(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181283)) {
		F.line = 119;
		result_177557 = HEX24_182521(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179065)) {
		F.line = 119;
		result_177557 = HEX24_182320(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181438)) {
		F.line = 119;
		result_177557 = HEX24_182536(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180693)) {
		F.line = 119;
		result_177557 = HEX24_182455(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181221)) {
		F.line = 119;
		result_177557 = HEX24_182515(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180432)) {
		F.line = 119;
		result_177557 = HEX24_182434(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180366)) {
		F.line = 119;
		result_177557 = HEX24_182428(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180619)) {
		F.line = 119;
		result_177557 = HEX24_182449(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180072)) {
		F.line = 119;
		result_177557 = HEX24_182404(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180930)) {
		F.line = 119;
		result_177557 = HEX24_182479(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181252)) {
		F.line = 119;
		result_177557 = HEX24_182518(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180763)) {
		F.line = 119;
		result_177557 = HEX24_182461(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180728)) {
		F.line = 119;
		result_177557 = HEX24_182458(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181407)) {
		F.line = 119;
		result_177557 = HEX24_182533(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180399)) {
		F.line = 119;
		result_177557 = HEX24_182431(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182107)) {
		F.line = 119;
		result_177557 = HEX24_182614(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180800)) {
		F.line = 119;
		result_177557 = HEX24_182464(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180992)) {
		F.line = 119;
		result_177557 = HEX24_182485(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178907)) {
		F.line = 119;
		result_177557 = HEX24_182305(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180899)) {
		F.line = 119;
		result_177557 = HEX24_182476(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181469)) {
		F.line = 119;
		result_177557 = HEX24_182539(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180961)) {
		F.line = 119;
		result_177557 = HEX24_182482(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180473)) {
		F.line = 119;
		result_177557 = HEX24_182437(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180148)) {
		F.line = 119;
		result_177557 = HEX24_182410(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182228)) {
		F.line = 119;
		result_177557 = HEX24_182632(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180296)) {
		F.line = 119;
		result_177557 = HEX24_182422(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180551)) {
		F.line = 119;
		result_177557 = HEX24_182443(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181624)) {
		F.line = 119;
		result_177557 = HEX24_182557(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181810)) {
		F.line = 119;
		result_177557 = HEX24_182578(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180514)) {
		F.line = 119;
		result_177557 = HEX24_182440(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181345)) {
		F.line = 119;
		result_177557 = HEX24_182527(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181996)) {
		F.line = 119;
		result_177557 = HEX24_182596(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181934)) {
		F.line = 119;
		result_177557 = HEX24_182590(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181841)) {
		F.line = 119;
		result_177557 = HEX24_182581(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180586)) {
		F.line = 119;
		result_177557 = HEX24_182446(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181779)) {
		F.line = 119;
		result_177557 = HEX24_182575(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181593)) {
		F.line = 119;
		result_177557 = HEX24_182554(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182158)) {
		F.line = 119;
		result_177557 = HEX24_182620(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182027)) {
		F.line = 119;
		result_177557 = HEX24_182602(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181965)) {
		F.line = 119;
		result_177557 = HEX24_182593(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182193)) {
		F.line = 119;
		result_177557 = HEX24_182626(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179065)) {
		F.line = 119;
		result_177557 = HEX24_182320(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181314)) {
		F.line = 119;
		result_177557 = HEX24_182524(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182263)) {
		F.line = 119;
		result_177557 = HEX24_182638(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182263)) {
		F.line = 119;
		result_177557 = HEX24_182638(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178776)) {
		F.line = 119;
		result_177557 = HEX24_182635(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178776)) {
		F.line = 119;
		result_177557 = HEX24_182635(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179732)) {
		F.line = 119;
		result_177557 = HEX24_182371(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179576)) {
		F.line = 119;
		result_177557 = HEX24_182359(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181562)) {
		F.line = 119;
		result_177557 = HEX24_182548(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180656)) {
		F.line = 119;
		result_177557 = HEX24_182452(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182193)) {
		F.line = 119;
		result_177557 = HEX24_182626(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178770)) {
		F.line = 119;
		result_177557 = HEX24_182623(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178770)) {
		F.line = 119;
		result_177557 = HEX24_182623(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180333)) {
		F.line = 119;
		result_177557 = HEX24_182425(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181872)) {
		F.line = 119;
		result_177557 = HEX24_182584(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179020)) {
		F.line = 119;
		result_177557 = HEX24_182317(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181686)) {
		F.line = 119;
		result_177557 = HEX24_182563(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179295)) {
		F.line = 119;
		result_177557 = HEX24_182338(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179802)) {
		F.line = 119;
		result_177557 = HEX24_182377(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179182)) {
		F.line = 119;
		result_177557 = HEX24_182329(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179541)) {
		F.line = 119;
		result_177557 = HEX24_182356(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181717)) {
		F.line = 119;
		result_177557 = HEX24_182569(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182068)) {
		F.line = 119;
		result_177557 = HEX24_182608(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179835)) {
		F.line = 119;
		result_177557 = HEX24_182380(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179693)) {
		F.line = 119;
		result_177557 = HEX24_182368(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179623)) {
		F.line = 119;
		result_177557 = HEX24_182362(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178975)) {
		F.line = 119;
		result_177557 = HEX24_182314(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181655)) {
		F.line = 119;
		result_177557 = HEX24_182560(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179256)) {
		F.line = 119;
		result_177557 = HEX24_182335(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181500)) {
		F.line = 119;
		result_177557 = HEX24_182542(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181903)) {
		F.line = 119;
		result_177557 = HEX24_182587(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179502)) {
		F.line = 119;
		result_177557 = HEX24_182353(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179422)) {
		F.line = 119;
		result_177557 = HEX24_182347(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179767)) {
		F.line = 119;
		result_177557 = HEX24_182374(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178837)) {
		F.line = 119;
		result_177557 = HEX24_182299(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179658)) {
		F.line = 119;
		result_177557 = HEX24_182365(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178837)) {
		F.line = 119;
		result_177557 = HEX24_182299(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181748)) {
		F.line = 119;
		result_177557 = HEX24_182572(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179463)) {
		F.line = 119;
		result_177557 = HEX24_182350(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177030)) {
		F.line = 119;
		result_177557 = HEX24_177605(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179219)) {
		F.line = 119;
		result_177557 = HEX24_182332(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181531)) {
		F.line = 119;
		result_177557 = HEX24_182545(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179114)) {
		F.line = 119;
		result_177557 = HEX24_182323(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179381)) {
		F.line = 119;
		result_177557 = HEX24_182344(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180002)) {
		F.line = 119;
		result_177557 = HEX24_182398(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181095)) {
		F.line = 119;
		result_177557 = HEX24_182497(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178940)) {
		F.line = 119;
		result_177557 = HEX24_182308(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180930)) {
		F.line = 119;
		result_177557 = HEX24_182479(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177027)) {
		F.line = 119;
		result_177557 = HEX24_177588(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181376)) {
		F.line = 119;
		result_177557 = HEX24_182530(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181060)) {
		F.line = 119;
		result_177557 = HEX24_182494(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181023)) {
		F.line = 119;
		result_177557 = HEX24_182491(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178739)) {
		F.line = 119;
		result_177557 = HEX24_182488(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178739)) {
		F.line = 119;
		result_177557 = HEX24_182488(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179338)) {
		F.line = 119;
		result_177557 = HEX24_182341(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180961)) {
		F.line = 119;
		result_177557 = HEX24_182482(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178907)) {
		F.line = 119;
		result_177557 = HEX24_182305(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178872)) {
		F.line = 119;
		result_177557 = HEX24_182302(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178723)) {
		F.line = 119;
		result_177557 = HEX24_182296(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178723)) {
		F.line = 119;
		result_177557 = HEX24_182296(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179965)) {
		F.line = 119;
		result_177557 = HEX24_182395(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180693)) {
		F.line = 119;
		result_177557 = HEX24_182455(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180514)) {
		F.line = 119;
		result_177557 = HEX24_182440(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180899)) {
		F.line = 119;
		result_177557 = HEX24_182476(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177024)) {
		F.line = 119;
		result_177557 = HEX24_177571(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179897)) {
		F.line = 119;
		result_177557 = HEX24_182386(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180656)) {
		F.line = 119;
		result_177557 = HEX24_182452(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180296)) {
		F.line = 119;
		result_177557 = HEX24_182422(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180763)) {
		F.line = 119;
		result_177557 = HEX24_182461(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180037)) {
		F.line = 119;
		result_177557 = HEX24_182401(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179866)) {
		F.line = 119;
		result_177557 = HEX24_182383(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180868)) {
		F.line = 119;
		result_177557 = HEX24_182473(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179928)) {
		F.line = 119;
		result_177557 = HEX24_182392(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180183)) {
		F.line = 119;
		result_177557 = HEX24_182413(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180473)) {
		F.line = 119;
		result_177557 = HEX24_182437(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179147)) {
		F.line = 119;
		result_177557 = HEX24_182326(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178726)) {
		F.line = 119;
		result_177557 = HEX24_182311(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178726)) {
		F.line = 119;
		result_177557 = HEX24_182311(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180992)) {
		F.line = 119;
		result_177557 = HEX24_182485(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180800)) {
		F.line = 119;
		result_177557 = HEX24_182464(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180619)) {
		F.line = 119;
		result_177557 = HEX24_182449(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180257)) {
		F.line = 119;
		result_177557 = HEX24_182419(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180728)) {
		F.line = 119;
		result_177557 = HEX24_182458(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181252)) {
		F.line = 119;
		result_177557 = HEX24_182518(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180432)) {
		F.line = 119;
		result_177557 = HEX24_182434(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180399)) {
		F.line = 119;
		result_177557 = HEX24_182431(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180837)) {
		F.line = 119;
		result_177557 = HEX24_182470(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178736)) {
		F.line = 119;
		result_177557 = HEX24_182467(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178736)) {
		F.line = 119;
		result_177557 = HEX24_182467(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180148)) {
		F.line = 119;
		result_177557 = HEX24_182410(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180109)) {
		F.line = 119;
		result_177557 = HEX24_182407(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180072)) {
		F.line = 119;
		result_177557 = HEX24_182404(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180551)) {
		F.line = 119;
		result_177557 = HEX24_182443(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181128)) {
		F.line = 119;
		result_177557 = HEX24_182503(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182158)) {
		F.line = 119;
		result_177557 = HEX24_182620(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178765)) {
		F.line = 119;
		result_177557 = HEX24_182617(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178765)) {
		F.line = 119;
		result_177557 = HEX24_182617(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180220)) {
		F.line = 119;
		result_177557 = HEX24_182416(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181221)) {
		F.line = 119;
		result_177557 = HEX24_182515(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181190)) {
		F.line = 119;
		result_177557 = HEX24_182512(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180366)) {
		F.line = 119;
		result_177557 = HEX24_182428(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182068)) {
		F.line = 119;
		result_177557 = HEX24_182608(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178757)) {
		F.line = 119;
		result_177557 = HEX24_182605(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178757)) {
		F.line = 119;
		result_177557 = HEX24_182605(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182027)) {
		F.line = 119;
		result_177557 = HEX24_182602(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178754)) {
		F.line = 119;
		result_177557 = HEX24_182599(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182107)) {
		F.line = 119;
		result_177557 = HEX24_182614(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178762)) {
		F.line = 119;
		result_177557 = HEX24_182611(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178762)) {
		F.line = 119;
		result_177557 = HEX24_182611(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181841)) {
		F.line = 119;
		result_177557 = HEX24_182581(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181810)) {
		F.line = 119;
		result_177557 = HEX24_182578(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181779)) {
		F.line = 119;
		result_177557 = HEX24_182575(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180333)) {
		F.line = 119;
		result_177557 = HEX24_182425(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181965)) {
		F.line = 119;
		result_177557 = HEX24_182593(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182228)) {
		F.line = 119;
		result_177557 = HEX24_182632(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178773)) {
		F.line = 119;
		result_177557 = HEX24_182629(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178773)) {
		F.line = 119;
		result_177557 = HEX24_182629(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181159)) {
		F.line = 119;
		result_177557 = HEX24_182506(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178742)) {
		F.line = 119;
		result_177557 = HEX24_182500(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178754)) {
		F.line = 119;
		result_177557 = HEX24_182599(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180586)) {
		F.line = 119;
		result_177557 = HEX24_182446(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178731)) {
		F.line = 119;
		result_177557 = HEX24_182389(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178731)) {
		F.line = 119;
		result_177557 = HEX24_182389(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181686)) {
		F.line = 119;
		result_177557 = HEX24_182563(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181655)) {
		F.line = 119;
		result_177557 = HEX24_182560(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178742)) {
		F.line = 119;
		result_177557 = HEX24_182500(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181469)) {
		F.line = 119;
		result_177557 = HEX24_182539(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181903)) {
		F.line = 119;
		result_177557 = HEX24_182587(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181748)) {
		F.line = 119;
		result_177557 = HEX24_182572(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181717)) {
		F.line = 119;
		result_177557 = HEX24_182569(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181934)) {
		F.line = 119;
		result_177557 = HEX24_182590(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181283)) {
		F.line = 119;
		result_177557 = HEX24_182521(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181872)) {
		F.line = 119;
		result_177557 = HEX24_182584(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181500)) {
		F.line = 119;
		result_177557 = HEX24_182542(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181314)) {
		F.line = 119;
		result_177557 = HEX24_182524(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181407)) {
		F.line = 119;
		result_177557 = HEX24_182533(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181996)) {
		F.line = 119;
		result_177557 = HEX24_182596(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178751)) {
		F.line = 119;
		result_177557 = HEX24_182566(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178751)) {
		F.line = 119;
		result_177557 = HEX24_182566(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181345)) {
		F.line = 119;
		result_177557 = HEX24_182527(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181438)) {
		F.line = 119;
		result_177557 = HEX24_182536(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181531)) {
		F.line = 119;
		result_177557 = HEX24_182545(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181376)) {
		F.line = 119;
		result_177557 = HEX24_182530(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181562)) {
		F.line = 119;
		result_177557 = HEX24_182548(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178745)) {
		F.line = 119;
		result_177557 = HEX24_182509(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178745)) {
		F.line = 119;
		result_177557 = HEX24_182509(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181624)) {
		F.line = 119;
		result_177557 = HEX24_182557(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181593)) {
		F.line = 119;
		result_177557 = HEX24_182554(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178748)) {
		F.line = 119;
		result_177557 = HEX24_182551(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178748)) {
		F.line = 119;
		result_177557 = HEX24_182551(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177022)) {
		F.line = 119;
		result_177557 = HEX24_177549(node_177551);
		break BeforeRet;
		}
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_177557;

}

function new_ast_store_180872() {
	var result_180874 = null;

	var F={procname:"asdl.newAstStore",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180874 = {m_type: NTI180868, kind: 0};
		F.line = 111;
		result_180874.kind = 1;
	framePtr = F.prev;

	return result_180874;

}

function set_store_410447(ast_node_410449) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 257;
		ast_node_410449.ctx = new_ast_store_180872();
	framePtr = F.prev;

	
}

function set_store_410431(ast_node_410433) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 254;
		ast_node_410433.ctx = new_ast_store_180872();
	framePtr = F.prev;

	
}

function set_store_410415(ast_node_410417) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 251;
		ast_node_410417.ctx = new_ast_store_180872();
	framePtr = F.prev;

	
}

function set_store_410463(ast_node_410465) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 260;
		ast_node_410465.ctx = new_ast_store_180872();
		L1: do {
			F.line = 261;
			var elm_410474 = null;
			F.line = 3909;
			var colontmp__410476 = null;
			F.line = 261;
			colontmp__410476 = ast_node_410465.elts;
			F.line = 3911;
			var i_410479 = 0;
			F.line = 3912;
			var l_410481 = (colontmp__410476 != null ? colontmp__410476.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_410479 < l_410481)) break L3;
						F.line = 3914;
						elm_410474 = colontmp__410476[chckIndx(i_410479, 0, colontmp__410476.length+0-1)-0];
						F.line = 262;
						set_store_410278(elm_410474);
						F.line = 3915;
						i_410479 = addInt(i_410479, 1);
						if (!(((colontmp__410476 != null ? colontmp__410476.length : 0) == l_410481))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function set_store_410274(ast_node_410276) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!(isObj(ast_node_410276.m_type, NTI178731))) {
		F.line = 2895;
		var e_410296 = null;
		F.line = 2896;
		e_410296 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 31;
		e_410296.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_410296.parent = null;
		F.line = 247;
		raiseException(e_410296, "InternalError");
		}
		
		F.line = 248;
		raiseException(new_syntax_error_156100(makeNimstrLit("can\'t assign"), [], ast_node_410276.lineno.value, ast_node_410276.col_offset.value), "SyntaxError:ObjectType");
	framePtr = F.prev;

	
}

function set_store_410278(ast_node_410276) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(ast_node_410276);
		if (isObj(ast_node_410276.m_type, NTI180656)) {
		F.line = 245;
		set_store_410447(ast_node_410276);
		}
		else {
		if (isObj(ast_node_410276.m_type, NTI180619)) {
		F.line = 245;
		set_store_410431(ast_node_410276);
		}
		else {
		if (isObj(ast_node_410276.m_type, NTI180728)) {
		F.line = 245;
		set_store_410415(ast_node_410276);
		}
		else {
		if (isObj(ast_node_410276.m_type, NTI180800)) {
		F.line = 245;
		set_store_410463(ast_node_410276);
		}
		else {
		if (isObj(ast_node_410276.m_type, NTI177022)) {
		F.line = 245;
		set_store_410274(ast_node_410276);
		}
		}}}}
	framePtr = F.prev;

	
}

function to_tuple_504873(instr_504875) {
	var result_504877 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"compile.toTuple",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 107;
		nimCopy(result_504877, {Field0: instr_504875.opCode, Field1: instr_504875.opArg, Field2: instr_504875.lineNo}, NTI504876);
	framePtr = F.prev;

	return result_504877;

}

function to_tuple_504847(instr_504849) {
	var result_504851 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"compile.toTuple",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 103;
		nimCopy(result_504851, {Field0: instr_504849.opCode, Field1: -1, Field2: instr_504849.lineNo}, NTI504850);
	framePtr = F.prev;

	return result_504851;

}

function to_tuple_504853(instr_504849) {
	var result_504856 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"compile.toTuple",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(instr_504849);
		if (isObj(instr_504849.m_type, NTI503045)) {
		F.line = 102;
		nimCopy(result_504856, to_tuple_504873(instr_504849), NTI504850);
		break BeforeRet;
		}
		else {
		if (isObj(instr_504849.m_type, NTI503041)) {
		F.line = 102;
		nimCopy(result_504856, to_tuple_504847(instr_504849), NTI504850);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_504856;

}

function to_op_code_507250(ast_node_507252) {
	var result_507253 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 356;
		result_507253 = 15;
	framePtr = F.prev;

	return result_507253;

}

function to_op_code_507232(ast_node_507234) {
	var result_507235 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 355;
		result_507235 = 18;
	framePtr = F.prev;

	return result_507235;

}

function to_op_code_507214(ast_node_507216) {
	var result_507217 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 354;
		result_507217 = 17;
	framePtr = F.prev;

	return result_507217;

}

function to_op_code_507322(ast_node_507324) {
	var result_507325 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 360;
		result_507325 = 20;
	framePtr = F.prev;

	return result_507325;

}

function to_op_code_507304(ast_node_507306) {
	var result_507307 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 359;
		result_507307 = 14;
	framePtr = F.prev;

	return result_507307;

}

function to_op_code_507286(ast_node_507288) {
	var result_507289 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 358;
		result_507289 = 16;
	framePtr = F.prev;

	return result_507289;

}

function to_op_code_507268(ast_node_507270) {
	var result_507271 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 357;
		result_507271 = 21;
	framePtr = F.prev;

	return result_507271;

}

function to_op_code_507082(op_507084) {
	var result_507085 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 348;
		rawEcho(HEX24_177554(op_507084));
		if (true) {
		F.line = 349;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(349, 10) `false` "));
		}
		
	framePtr = F.prev;

	return result_507085;

}

function to_op_code_507087(op_507084) {
	var result_507090 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(op_507084);
		if (isObj(op_507084.m_type, NTI181252)) {
		F.line = 347;
		result_507090 = to_op_code_507250(op_507084);
		break BeforeRet;
		}
		else {
		if (isObj(op_507084.m_type, NTI181221)) {
		F.line = 347;
		result_507090 = to_op_code_507232(op_507084);
		break BeforeRet;
		}
		else {
		if (isObj(op_507084.m_type, NTI181190)) {
		F.line = 347;
		result_507090 = to_op_code_507214(op_507084);
		break BeforeRet;
		}
		else {
		if (isObj(op_507084.m_type, NTI181562)) {
		F.line = 347;
		result_507090 = to_op_code_507322(op_507084);
		break BeforeRet;
		}
		else {
		if (isObj(op_507084.m_type, NTI181376)) {
		F.line = 347;
		result_507090 = to_op_code_507304(op_507084);
		break BeforeRet;
		}
		else {
		if (isObj(op_507084.m_type, NTI181345)) {
		F.line = 347;
		result_507090 = to_op_code_507286(op_507084);
		break BeforeRet;
		}
		else {
		if (isObj(op_507084.m_type, NTI181314)) {
		F.line = 347;
		result_507090 = to_op_code_507268(op_507084);
		break BeforeRet;
		}
		else {
		if (isObj(op_507084.m_type, NTI178745)) {
		F.line = 347;
		result_507090 = to_op_code_507082(op_507084);
		break BeforeRet;
		}
		}}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_507090;

}

function to_op_code_507450(ast_node_507452) {
	var result_507453 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 372;
		result_507453 = 8;
	framePtr = F.prev;

	return result_507453;

}

function to_op_code_507432(ast_node_507434) {
	var result_507435 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 371;
		result_507435 = 10;
	framePtr = F.prev;

	return result_507435;

}

function to_op_code_507414(ast_node_507416) {
	var result_507417 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 370;
		result_507417 = 11;
	framePtr = F.prev;

	return result_507417;

}

function to_op_code_507468(ast_node_507470) {
	var result_507471 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 373;
		result_507471 = 9;
	framePtr = F.prev;

	return result_507471;

}

function to_op_code_507353(op_507355) {
	var result_507356 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_507367 = null;
		F.line = 2896;
		e_507367 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 31;
		e_507367.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_507367.parent = null;
		F.line = 365;
		raiseException(e_507367, "InternalError");
	framePtr = F.prev;

	return result_507356;

}

function to_op_code_507358(op_507355) {
	var result_507361 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(op_507355);
		if (isObj(op_507355.m_type, NTI181655)) {
		F.line = 364;
		result_507361 = to_op_code_507450(op_507355);
		break BeforeRet;
		}
		else {
		if (isObj(op_507355.m_type, NTI181624)) {
		F.line = 364;
		result_507361 = to_op_code_507432(op_507355);
		break BeforeRet;
		}
		else {
		if (isObj(op_507355.m_type, NTI181593)) {
		F.line = 364;
		result_507361 = to_op_code_507414(op_507355);
		break BeforeRet;
		}
		else {
		if (isObj(op_507355.m_type, NTI181686)) {
		F.line = 364;
		result_507361 = to_op_code_507468(op_507355);
		break BeforeRet;
		}
		else {
		if (isObj(op_507355.m_type, NTI178748)) {
		F.line = 364;
		result_507361 = to_op_code_507353(op_507355);
		break BeforeRet;
		}
		}}}}
	} while (false);
	framePtr = F.prev;

	return result_507361;

}

function add_op_505505(c_505507, op_code_505508, line_no_505509) {
	var F={procname:"compile.addOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(!((ConstSet24[op_code_505508] != undefined)))) {
		F.line = 164;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(164, 3) `not contains({OpCode.STORE_NAME, OpCode.DELETE_NAME, OpCode.UNPACK_SEQUENCE,\x0A             OpCode.FOR_ITER, OpCode.UNPACK_EX, OpCode.STORE_ATTR,\x0A             OpCode.DELETE_ATTR, OpCode.STORE_GLOBAL, OpCode.DELETE_GLOBAL,\x0A             OpCode.LOAD_CONST, OpCode.LOAD_NAME, OpCode.BUILD_TUPLE,\x0A             OpCode.BUILD_LIST, OpCode.BUILD_SET, OpCode.BUILD_MAP,\x0A             OpCode.LOAD_ATTR, OpCode.COMPARE_OP, OpCode.IMPORT_NAME,\x0A             OpCode.IMPORT_FROM, OpCode.JUMP_FORWARD, OpCode.JUMP_IF_FALSE_OR_POP,\x0A             OpCode.JUMP_IF_TRUE_OR_POP, OpCode.JUMP_ABSOLUTE,\x0A             OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE,\x0A             OpCode.LOAD_GLOBAL, OpCode.SETUP_FINALLY, OpCode.LOAD_FAST,\x0A             OpCode.STORE_FAST, OpCode.DELETE_FAST, OpCode.RAISE_VARARGS,\x0A             OpCode.CALL_FUNCTION, OpCode.MAKE_FUNCTION, OpCode.BUILD_SLICE,\x0A             OpCode.LOAD_CLOSURE, OpCode.LOAD_DEREF, OpCode.STORE_DEREF,\x0A             OpCode.DELETE_DEREF, OpCode.CALL_FUNCTION_KW,\x0A             OpCode.CALL_FUNCTION_EX, OpCode.SETUP_WITH, OpCode.EXTENDED_ARG,\x0A             OpCode.LIST_APPEND, OpCode.SET_ADD, OpCode.MAP_ADD,\x0A             OpCode.LOAD_CLASSDEREF, OpCode.BUILD_LIST_UNPACK,\x0A             OpCode.BUILD_MAP_UNPACK, OpCode.BUILD_MAP_UNPACK_WITH_CALL,\x0A             OpCode.BUILD_TUPLE_UNPACK, OpCode.BUILD_SET_UNPACK,\x0A             OpCode.SETUP_ASYNC_WITH, OpCode.FORMAT_VALUE,\x0A             OpCode.BUILD_CONST_KEY_MAP, OpCode.BUILD_STRING,\x0A             OpCode.BUILD_TUPLE_UNPACK_WITH_CALL, OpCode.LOAD_METHOD,\x0A             OpCode.CALL_METHOD, OpCode.CALL_FINALLY, OpCode.POP_FINALLY,\x0A             OpCode.EXCEPT_HANDLER}, opCode)` "));
		}
		
		F.line = 165;
		add_op_505445(tcu_504986(c_505507), new_instr_503133(op_code_505508, line_no_505509));
	framePtr = F.prev;

	
}

function compile_512216(c_512218, ast_node_512219) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 755;
		var line_no_512220 = ast_node_512219.lineno.value;
		if (isObj(ast_node_512219.ctx.m_type, NTI180837)) {
		F.line = 757;
		compile_507538(c_512218, ast_node_512219.value);
		F.line = 758;
		compile_507538(c_512218, ast_node_512219.slice);
		F.line = 759;
		add_op_505505(c_512218, 19, line_no_512220);
		}
		else {
		if (isObj(ast_node_512219.ctx.m_type, NTI180868)) {
		F.line = 761;
		compile_507538(c_512218, ast_node_512219.value);
		F.line = 762;
		compile_507538(c_512218, ast_node_512219.slice);
		F.line = 763;
		add_op_505505(c_512218, 33, line_no_512220);
		}
		else {
			F.line = 2895;
			var e_512250 = null;
			F.line = 2896;
			e_512250 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_512250.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_512250.parent = null;
			F.line = 765;
			raiseException(e_512250, "InternalError");
		}
		}
	framePtr = F.prev;

	
}

function tste_505041(c_505043) {
	var result_505044 = null;

	var F={procname:"compile.tste",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 126;
		result_505044 = tcu_504986(c_505043).ste;
	framePtr = F.prev;

	return result_505044;

}

function add_op_505488(c_505490, instr_505491) {
	var F={procname:"compile.addOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 160;
		add_op_505445(tcu_504986(c_505490), instr_505491);
	framePtr = F.prev;

	
}

function compile_512029(c_512031, ast_node_512032) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 744;
		var line_no_512033 = ast_node_512032.lineno.value;
		F.line = 745;
		compile_507538(c_512031, ast_node_512032.value);
		F.line = 746;
		var op_arg_512034 = name_id_445042(tste_505041(c_512031), ast_node_512032.attr.value);
		if (isObj(ast_node_512032.ctx.m_type, NTI180837)) {
		F.line = 748;
		add_op_505488(c_512031, new_arg_instr_503437(77, op_arg_512034, line_no_512033));
		}
		else {
		if (isObj(ast_node_512032.ctx.m_type, NTI180868)) {
		F.line = 750;
		add_op_505488(c_512031, new_arg_instr_503437(67, op_arg_512034, line_no_512033));
		}
		else {
			F.line = 2895;
			var e_512064 = null;
			F.line = 2896;
			e_512064 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_512064.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_512064.parent = null;
			F.line = 752;
			raiseException(e_512064, "InternalError");
		}
		}
	framePtr = F.prev;

	
}

function free_id_449438(ste_449440, name_str_449441) {
		var Tmp1;

	var result_449442 = 0;

	var F={procname:"symtable.freeId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 112;
		result_449442 = addInt((Tmp1 = HEX5BHEX5D_443903(ste_449440.freeVars, name_str_449441), Tmp1[0])[Tmp1[1]], len_445683(ste_449440.cellVars));
	framePtr = F.prev;

	return result_449442;

}

function add_load_op_505680(c_505682, name_str_505683, line_no_505684) {
	var F={procname:"compile.addLoadOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 182;
		var scope_505685 = get_scope_438803(tste_505041(c_505682), name_str_505683);
		F.line = 185;
		var op_arg_505686 = 0;
		F.line = 186;
		var op_code_505687 = 0;
		F.line = 188;
		switch (scope_505685) {
		case 0:
			F.line = 190;
			op_arg_505686 = local_id_443666(tste_505041(c_505682), name_str_505683);
			F.line = 191;
			op_code_505687 = 89;
			break;
		case 3:
			F.line = 193;
			op_arg_505686 = name_id_445042(tste_505041(c_505682), name_str_505683);
			F.line = 194;
			op_code_505687 = 87;
			break;
		case 1:
			F.line = 196;
			op_arg_505686 = cell_id_449176(tste_505041(c_505682), name_str_505683);
			F.line = 197;
			op_code_505687 = 97;
			break;
		case 2:
			F.line = 199;
			op_arg_505686 = free_id_449438(tste_505041(c_505682), name_str_505683);
			F.line = 200;
			op_code_505687 = 97;
			break;
		}
		F.line = 202;
		var instr_505696 = new_arg_instr_503437(op_code_505687, op_arg_505686, line_no_505684);
		F.line = 203;
		add_op_505488(c_505682, instr_505696);
	framePtr = F.prev;

	
}

function add_load_op_505710(c_505712, name_505713, line_no_505714) {
	var F={procname:"compile.addLoadOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 207;
		var name_str_505715 = name_505713.value;
		F.line = 208;
		add_load_op_505680(c_505712, name_str_505715, line_no_505714);
	framePtr = F.prev;

	
}

function add_store_op_505729(c_505731, name_str_505732, line_no_505733) {
	var F={procname:"compile.addStoreOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 212;
		var scope_505734 = get_scope_438803(tste_505041(c_505731), name_str_505732);
		F.line = 215;
		var op_arg_505735 = 0;
		F.line = 216;
		var op_code_505736 = 0;
		F.line = 218;
		switch (scope_505734) {
		case 0:
			F.line = 220;
			op_arg_505735 = local_id_443666(tste_505041(c_505731), name_str_505732);
			F.line = 221;
			op_code_505736 = 90;
			break;
		case 3:
			F.line = 223;
			op_arg_505735 = name_id_445042(tste_505041(c_505731), name_str_505732);
			F.line = 224;
			op_code_505736 = 69;
			break;
		case 1:
			F.line = 226;
			op_arg_505735 = cell_id_449176(tste_505041(c_505731), name_str_505732);
			F.line = 227;
			op_code_505736 = 98;
			break;
		case 2:
			F.line = 229;
			op_arg_505735 = free_id_449438(tste_505041(c_505731), name_str_505732);
			F.line = 230;
			op_code_505736 = 98;
			break;
		}
		F.line = 232;
		var instr_505745 = new_arg_instr_503437(op_code_505736, op_arg_505735, line_no_505733);
		F.line = 233;
		add_op_505488(c_505731, instr_505745);
	framePtr = F.prev;

	
}

function add_store_op_505759(c_505761, name_505762, line_no_505763) {
	var F={procname:"compile.addStoreOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 237;
		var name_str_505764 = name_505762.value;
		F.line = 238;
		add_store_op_505729(c_505761, name_str_505764, line_no_505763);
	framePtr = F.prev;

	
}

function compile_512433(c_512435, ast_node_512436) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 773;
		var line_no_512437 = ast_node_512436.lineno.value;
		if (isObj(ast_node_512436.ctx.m_type, NTI180837)) {
		F.line = 775;
		add_load_op_505710(c_512435, ast_node_512436.id, line_no_512437);
		}
		else {
		if (isObj(ast_node_512436.ctx.m_type, NTI180868)) {
		F.line = 777;
		add_store_op_505759(c_512435, ast_node_512436.id, line_no_512437);
		}
		else {
			F.line = 2895;
			var e_512465 = null;
			F.line = 2896;
			e_512465 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_512465.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_512465.parent = null;
			F.line = 779;
			raiseException(e_512465, "InternalError");
		}
		}
	framePtr = F.prev;

	
}

function compile_512416(c_512418, ast_node_512419) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 769;
		add_load_const_505641(tcu_504986(c_512418), ast_node_512419.value.value, ast_node_512419.lineno.value);
	framePtr = F.prev;

	
}

function last_line_no_505269(c_505271) {
	var result_505272 = 0;

	var F={procname:"compile.lastLineNo",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 149;
		result_505272 = last_line_no_505154(tcu_504986(c_505271));
	framePtr = F.prev;

	return result_505272;

}

function compile_512665(c_512667, ast_node_512668) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 793;
		switch (ast_node_512668.ctx.kind) {
		case 0:
			L1: do {
				F.line = 795;
				var elt_512678 = null;
				F.line = 3909;
				var colontmp__512802 = null;
				F.line = 795;
				colontmp__512802 = ast_node_512668.elts;
				F.line = 3911;
				var i_512805 = 0;
				F.line = 3912;
				var l_512807 = (colontmp__512802 != null ? colontmp__512802.length : 0);
				L2: do {
					F.line = 3913;
						L3: while (true) {
						if (!(i_512805 < l_512807)) break L3;
							F.line = 3914;
							elt_512678 = colontmp__512802[chckIndx(i_512805, 0, colontmp__512802.length+0-1)-0];
							F.line = 796;
							compile_507538(c_512667, elt_512678);
							F.line = 3915;
							i_512805 = addInt(i_512805, 1);
							if (!(((colontmp__512802 != null ? colontmp__512802.length : 0) == l_512807))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			F.line = 797;
			var line_no_512679 = 0;
			if (((ast_node_512668.elts != null ? ast_node_512668.elts.length : 0) == 0)) {
			F.line = 799;
			line_no_512679 = ast_node_512668.lineno.value;
			}
			else {
				F.line = 801;
				line_no_512679 = last_line_no_505269(c_512667);
			}
			
			F.line = 802;
			add_op_505488(c_512667, new_arg_instr_503437(73, (ast_node_512668.elts != null ? ast_node_512668.elts.length : 0), line_no_512679));
			break;
		case 1:
			F.line = 804;
			add_op_505488(c_512667, new_arg_instr_503437(64, (ast_node_512668.elts != null ? ast_node_512668.elts.length : 0), ast_node_512668.lineno.value));
			L4: do {
				F.line = 805;
				var elt_512712 = null;
				F.line = 3909;
				var colontmp__512809 = null;
				F.line = 805;
				colontmp__512809 = ast_node_512668.elts;
				F.line = 3911;
				var i_512812 = 0;
				F.line = 3912;
				var l_512814 = (colontmp__512809 != null ? colontmp__512809.length : 0);
				L5: do {
					F.line = 3913;
						L6: while (true) {
						if (!(i_512812 < l_512814)) break L6;
							F.line = 3914;
							elt_512712 = colontmp__512809[chckIndx(i_512812, 0, colontmp__512809.length+0-1)-0];
							F.line = 806;
							compile_507538(c_512667, elt_512712);
							F.line = 3915;
							i_512812 = addInt(i_512812, 1);
							if (!(((colontmp__512809 != null ? colontmp__512809.length : 0) == l_512814))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			break;
		default: 
			F.line = 2895;
			var e_512718 = null;
			F.line = 2896;
			e_512718 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_512718.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_512718.parent = null;
			F.line = 808;
			raiseException(e_512718, "InternalError");
			break;
		}
	framePtr = F.prev;

	
}

function compile_512616(c_512618, ast_node_512619) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 783;
			var elt_512628 = null;
			F.line = 3909;
			var colontmp__512646 = null;
			F.line = 783;
			colontmp__512646 = ast_node_512619.elts;
			F.line = 3911;
			var i_512649 = 0;
			F.line = 3912;
			var l_512651 = (colontmp__512646 != null ? colontmp__512646.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_512649 < l_512651)) break L3;
						F.line = 3914;
						elt_512628 = colontmp__512646[chckIndx(i_512649, 0, colontmp__512646.length+0-1)-0];
						F.line = 784;
						compile_507538(c_512618, elt_512628);
						F.line = 3915;
						i_512649 = addInt(i_512649, 1);
						if (!(((colontmp__512646 != null ? colontmp__512646.length : 0) == l_512651))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 785;
		var line_no_512629 = 0;
		if (((ast_node_512619.elts != null ? ast_node_512619.elts.length : 0) == 0)) {
		F.line = 787;
		line_no_512629 = ast_node_512619.lineno.value;
		}
		else {
			F.line = 789;
			line_no_512629 = last_line_no_505269(c_512618);
		}
		
		F.line = 790;
		add_op_505488(c_512618, new_arg_instr_503437(74, (ast_node_512619.elts != null ? ast_node_512619.elts.length : 0), line_no_512629));
	framePtr = F.prev;

	
}

function compile_512879(c_512881, ast_node_512882) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 831;
		compile_507538(c_512881, ast_node_512882.value);
	framePtr = F.prev;

	
}

function add_load_const_505662(c_505664, py_object_505665, line_no_505666) {
	var F={procname:"compile.addLoadConst",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 177;
		add_load_const_505641(tcu_504986(c_505664), py_object_505665, line_no_505666);
	framePtr = F.prev;

	
}

function compile_512828(c_512830, ast_node_512831) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 811;
		var line_no_512832 = last_line_no_505269(c_512830);
		F.line = 812;
		var n_512834 = 2;
		if ((ast_node_512831.lower === null)) {
		F.line = 815;
		add_load_const_505662(c_512830, py_none_356044, line_no_512832);
		}
		else {
			F.line = 817;
		compile_507538(c_512830, ast_node_512831.lower);
		}
		
		if ((ast_node_512831.upper === null)) {
		F.line = 820;
		add_load_const_505662(c_512830, py_none_356044, line_no_512832);
		}
		else {
			F.line = 822;
		compile_507538(c_512830, ast_node_512831.upper);
		}
		
		if (!((ast_node_512831.step === null))) {
		F.line = 825;
		compile_507538(c_512830, ast_node_512831.step);
		F.line = 826;
		n_512834 = addInt(n_512834, 1);
		}
		
		F.line = 828;
		add_op_505488(c_512830, new_arg_instr_503437(95, n_512834, line_no_512832));
	framePtr = F.prev;

	
}

function compile_511068(c_511070, ast_node_511071) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 669;
		var n_511079 = (ast_node_511071.values != null ? ast_node_511071.values.length : 0);
		L1: do {
			F.line = 670;
			var i_511097 = 0;
			F.line = 3616;
			var colontmp__511108 = 0;
			F.line = 670;
			colontmp__511108 = (ast_node_511071.keys != null ? ast_node_511071.keys.length : 0);
			F.line = 3617;
			var i_511111 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_511111 < colontmp__511108)) break L3;
						F.line = 3619;
						i_511097 = i_511111;
						F.line = 671;
						compile_507538(c_511070, ast_node_511071.values[chckIndx(i_511097, 0, ast_node_511071.values.length+0-1)-0]);
						F.line = 672;
						compile_507538(c_511070, ast_node_511071.keys[chckIndx(i_511097, 0, ast_node_511071.keys.length+0-1)-0]);
						F.line = 3620;
						i_511111 = addInt(i_511111, 1);
					}
			} while(false);
		} while(false);
		F.line = 673;
		var line_no_511098 = 0;
		if (((ast_node_511071.keys != null ? ast_node_511071.keys.length : 0) == 0)) {
		F.line = 675;
		line_no_511098 = ast_node_511071.lineno.value;
		}
		else {
			F.line = 677;
			line_no_511098 = last_line_no_505269(c_511070);
		}
		
		F.line = 678;
		add_op_505488(c_511070, new_arg_instr_503437(76, n_511079, line_no_511098));
	framePtr = F.prev;

	
}

function compile_512919(c_512921, ast_node_512922) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_512928 = null;
		F.line = 2896;
		e_512928 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 31;
		e_512928.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_512928.parent = null;
		F.line = 840;
		raiseException(e_512928, "InternalError");
	framePtr = F.prev;

	
}

function compile_511243(c_511245, ast_node_511246) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_511246.ops != null ? ast_node_511246.ops.length : 0) == 1))) {
		F.line = 708;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(708, 10) `len(astNode.ops) == 1` "));
		}
		
		if (!(((ast_node_511246.comparators != null ? ast_node_511246.comparators.length : 0) == 1))) {
		F.line = 709;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(709, 10) `len(astNode.comparators) == 1` "));
		}
		
		F.line = 710;
		compile_507538(c_511245, ast_node_511246.left);
		F.line = 711;
		compile_507538(c_511245, ast_node_511246.comparators[chckIndx(0, 0, ast_node_511246.comparators.length+0-1)-0]);
		F.line = 714;
		switch (ast_node_511246.ops[chckIndx(0, 0, ast_node_511246.ops.length+0-1)-0].kind) {
		case 2:
			F.line = 716;
			add_op_505488(c_511245, new_arg_instr_503437(78, 0, ast_node_511246.lineno.value));
			break;
		case 3:
			F.line = 718;
			add_op_505488(c_511245, new_arg_instr_503437(78, 1, ast_node_511246.lineno.value));
			break;
		case 4:
			F.line = 720;
			add_op_505488(c_511245, new_arg_instr_503437(78, 4, ast_node_511246.lineno.value));
			break;
		case 5:
			F.line = 722;
			add_op_505488(c_511245, new_arg_instr_503437(78, 5, ast_node_511246.lineno.value));
			break;
		case 0:
			F.line = 724;
			add_op_505488(c_511245, new_arg_instr_503437(78, 2, ast_node_511246.lineno.value));
			break;
		case 1:
			F.line = 726;
			add_op_505488(c_511245, new_arg_instr_503437(78, 3, ast_node_511246.lineno.value));
			break;
		case 8:
			F.line = 728;
			add_op_505488(c_511245, new_arg_instr_503437(78, 6, ast_node_511246.lineno.value));
			break;
		case 9:
			F.line = 730;
			add_op_505488(c_511245, new_arg_instr_503437(78, 7, ast_node_511246.lineno.value));
			break;
		default: 
			F.line = 2895;
			var e_511639 = null;
			F.line = 2896;
			e_511639 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_511639.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_511639.parent = null;
			F.line = 732;
			raiseException(e_511639, "InternalError");
			break;
		}
	framePtr = F.prev;

	
}

function add_block_505614(c_505616, cb_505617) {
	var F={procname:"compile.addBlock",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 169;
		if (tcu_504986(c_505616).blocks != null) { tcu_504986(c_505616).blocks.push(cb_505617); } else { tcu_504986(c_505616).blocks = [cb_505617]; };
	framePtr = F.prev;

	
}

function new_504003() {
	var result_504008 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_504201 = null;
		F.line = 211;
		r_504201 = {m_type: NTI503048, target: null, opArg: 0, opCode: 0, lineNo: 0};
		F.line = 212;
		result_504008 = r_504201;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_504008;

}

function new_jump_instr_503837(op_code_503839, target_503840, line_no_503841) {
	var result_503842 = null;

	var F={procname:"compile.newJumpInstr",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!((ConstSet25[op_code_503839] != undefined))) {
		F.line = 74;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(74, 10) `contains({OpCode.JUMP_FORWARD, OpCode.JUMP_IF_FALSE_OR_POP,\x0A          OpCode.JUMP_IF_TRUE_OR_POP, OpCode.JUMP_ABSOLUTE,\x0A          OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE, OpCode.FOR_ITER,\x0A          OpCode.SETUP_FINALLY}, opCode)` "));
		}
		
		F.line = 75;
		result_503842 = new_504003();
		F.line = 76;
		result_503842.opCode = op_code_503839;
		F.line = 77;
		result_503842.opArg = -1;
		F.line = 78;
		result_503842.target = target_503840;
		F.line = 79;
		result_503842.lineNo = line_no_503841;
	framePtr = F.prev;

	return result_503842;

}

function has_cell_449916(ste_449918, name_str_449919) {
	var result_449920 = false;

	var F={procname:"symtable.hasCell",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 115;
		result_449920 = has_key_445193(ste_449918.cellVars, name_str_449919);
	framePtr = F.prev;

	return result_449920;

}

function has_free_450089(ste_450091, name_str_450092) {
	var result_450093 = false;

	var F={procname:"symtable.hasFree",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 118;
		result_450093 = has_key_445193(ste_450091.freeVars, name_str_450092);
	framePtr = F.prev;

	return result_450093;

}

function make_function_506662(c_506664, cu_506665, function_name_506666, line_no_506667) {
	var F={procname:"compile.makeFunction",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(!((cu_506665.codeName === null)))) {
		F.line = 289;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(289, 3) `not isNil(cu.codeName)` "));
		}
		
		F.line = 291;
		var co_506801 = assemble_505778(cu_506665, c_506664.fileName);
		F.line = 293;
		var flag_506802 = 0;
		if (!(((co_506801.freeVars != null ? co_506801.freeVars.length : 0) == 0))) {
		L1: do {
			F.line = 308;
			var name_506818 = null;
			F.line = 3909;
			var colontmp__507011 = null;
			F.line = 308;
			colontmp__507011 = co_506801.freeVars;
			F.line = 3911;
			var i_507014 = 0;
			F.line = 3912;
			var l_507016 = (colontmp__507011 != null ? colontmp__507011.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_507014 < l_507016)) break L3;
						F.line = 3914;
						name_506818 = colontmp__507011[chckIndx(i_507014, 0, colontmp__507011.length+0-1)-0];
						if (has_cell_449916(tste_505041(c_506664), name_506818)) {
						F.line = 310;
						add_op_505488(c_506664, new_arg_instr_503437(96, cell_id_449176(tste_505041(c_506664), name_506818), line_no_506667));
						}
						else {
						if (has_free_450089(tste_505041(c_506664), name_506818)) {
						F.line = 312;
						add_op_505488(c_506664, new_arg_instr_503437(96, free_id_449438(tste_505041(c_506664), name_506818), line_no_506667));
						}
						else {
							F.line = 2895;
							var e_506826 = null;
							F.line = 2896;
							e_506826 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 31;
							e_506826.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
							F.line = 2891;
							e_506826.parent = null;
							F.line = 314;
							raiseException(e_506826, "InternalError");
						}
						}
						F.line = 3915;
						i_507014 = addInt(i_507014, 1);
						if (!(((colontmp__507011 != null ? colontmp__507011.length : 0) == l_507016))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 315;
		add_op_505488(c_506664, new_arg_instr_503437(73, (co_506801.freeVars != null ? co_506801.freeVars.length : 0), line_no_506667));
		F.line = 316;
		flag_506802 = (flag_506802 | 8);
		}
		
		F.line = 318;
		add_load_const_505641(tcu_504986(c_506664), co_506801, line_no_506667);
		F.line = 319;
		add_load_const_505641(tcu_504986(c_506664), function_name_506666, line_no_506667);
		F.line = 321;
		add_op_505488(c_506664, new_arg_instr_503437(94, flag_506802, line_no_506667));
	framePtr = F.prev;

	
}

function pop_508014(s_508020, s_508020_Idx) {
	var result_508021 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_508029 = subInt((s_508020[s_508020_Idx] != null ? s_508020[s_508020_Idx].length : 0), 1);
		F.line = 2525;
		result_508021 = s_508020[s_508020_Idx][chckIndx(l_508029, 0, s_508020[s_508020_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_508020[s_508020_Idx].length < chckRange(l_508029, 0, 2147483647)) { for (var i=s_508020[s_508020_Idx].length;i<chckRange(l_508029, 0, 2147483647);++i) s_508020[s_508020_Idx].push(null); }
               else { s_508020[s_508020_Idx].length = chckRange(l_508029, 0, 2147483647); };
	framePtr = F.prev;

	return result_508021;

}

function compile_511126(c_511128, ast_node_511129) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 681;
		var line_no_511130 = ast_node_511129.lineno.value;
		if (!(((ast_node_511129.generators != null ? ast_node_511129.generators.length : 0) == 1))) {
		F.line = 682;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(682, 10) `len(astNode.generators) == 1` "));
		}
		
		F.line = 683;
		var gen_node_511201 = ast_node_511129.generators[chckIndx(0, 0, ast_node_511129.generators.length+0-1)-0];
		F.line = 684;
		if (c_511128.units != null) { c_511128.units.push(new_compiler_unit_504437(c_511128.st, ast_node_511129, new_py_str_176092(makeNimstrLit("<listcomp>")))); } else { c_511128.units = [new_compiler_unit_504437(c_511128.st, ast_node_511129, new_py_str_176092(makeNimstrLit("<listcomp>")))]; };
		F.line = 686;
		var body_511212 = new_basic_block_504238(0);
		F.line = 687;
		var ending_511213 = new_basic_block_504238(0);
		F.line = 688;
		add_op_505488(c_511128, new_arg_instr_503437(74, 0, line_no_511130));
		F.line = 689;
		add_load_op_505680(c_511128, new_py_string_176075(makeNimstrLit(".0")), ast_node_511129.lineno.value);
		F.line = 690;
		add_block_505614(c_511128, body_511212);
		F.line = 691;
		add_op_505488(c_511128, new_jump_instr_503837(65, ending_511213, line_no_511130));
		F.line = 692;
		compile_507538(c_511128, gen_node_511201.target);
		F.line = 693;
		compile_507538(c_511128, ast_node_511129.elt);
		F.line = 695;
		add_op_505488(c_511128, new_arg_instr_503437(104, 2, line_no_511130));
		F.line = 696;
		add_op_505488(c_511128, new_jump_instr_503837(84, body_511212, line_no_511130));
		F.line = 697;
		add_block_505614(c_511128, ending_511213);
		F.line = 698;
		add_op_505505(c_511128, 54, line_no_511130);
		F.line = 700;
		make_function_506662(c_511128, pop_508014(c_511128, "units"), new_py_string_176075(makeNimstrLit("listcomp")), line_no_511130);
		F.line = 702;
		compile_507538(c_511128, gen_node_511201.iter);
		F.line = 703;
		add_op_505505(c_511128, 41, line_no_511130);
		F.line = 704;
		add_op_505488(c_511128, new_arg_instr_503437(93, 1, line_no_511130));
	framePtr = F.prev;

	
}

function compile_510067(c_510069, ast_node_510070) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 583;
		var line_no_510071 = ast_node_510070.lineno.value;
		F.line = 584;
		var ending_510072 = new_basic_block_504238(0);
		F.line = 585;
		compile_507538(c_510069, ast_node_510070.test);
		F.line = 586;
		add_op_505488(c_510069, new_jump_instr_503837(86, ending_510072, line_no_510071));
		F.line = 587;
		add_load_op_505680(c_510069, new_py_string_176075(makeNimstrLit("AssertionError")), line_no_510071);
		if (!((ast_node_510070.msg === null))) {
		F.line = 589;
		compile_507538(c_510069, ast_node_510070.msg);
		F.line = 590;
		add_op_505488(c_510069, new_arg_instr_503437(93, 1, line_no_510071));
		}
		
		F.line = 591;
		add_op_505488(c_510069, new_arg_instr_503437(92, 1, line_no_510071));
		F.line = 592;
		add_block_505614(c_510069, ending_510072);
	framePtr = F.prev;

	
}

function compile_511822(c_511824, ast_node_511825) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 736;
		compile_507538(c_511824, ast_node_511825.fun);
		L1: do {
			F.line = 737;
			var arg_511834 = null;
			F.line = 3909;
			var colontmp__512010 = null;
			F.line = 737;
			colontmp__512010 = ast_node_511825.args;
			F.line = 3911;
			var i_512013 = 0;
			F.line = 3912;
			var l_512015 = (colontmp__512010 != null ? colontmp__512010.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_512013 < l_512015)) break L3;
						F.line = 3914;
						arg_511834 = colontmp__512010[chckIndx(i_512013, 0, colontmp__512010.length+0-1)-0];
						F.line = 738;
						compile_507538(c_511824, arg_511834);
						F.line = 3915;
						i_512013 = addInt(i_512013, 1);
						if (!(((colontmp__512010 != null ? colontmp__512010.length : 0) == l_512015))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!(((ast_node_511825.keywords != null ? ast_node_511825.keywords.length : 0) == 0))) {
		F.line = 739;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(739, 10) `len(astNode.keywords) == 0` "));
		}
		
		F.line = 740;
		add_op_505488(c_511824, new_arg_instr_503437(93, (ast_node_511825.args != null ? ast_node_511825.args.length : 0), ast_node_511825.lineno.value));
	framePtr = F.prev;

	
}

function compile_510216(c_510218, ast_node_510219) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 606;
		var line_no_510220 = ast_node_510219.value.lineno.value;
		F.line = 607;
		compile_507538(c_510218, ast_node_510219.value);
		if (c_510218.interactive) {
		F.line = 609;
		add_op_505488(c_510218, new_instr_503133(43, line_no_510220));
		}
		else {
			F.line = 611;
		add_op_505488(c_510218, new_instr_503133(1, line_no_510220));
		}
		
	framePtr = F.prev;

	
}

function compile_510096(c_510098, ast_node_510099) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 596;
		var line_no_510100 = ast_node_510099.lineno.value;
		if ((~((ast_node_510099.names != null ? ast_node_510099.names.length : 0)) == 1)) {
		F.line = 2895;
		var e_510113 = null;
		F.line = 2896;
		e_510113 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 31;
		e_510113.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_510113.parent = null;
		F.line = 598;
		raiseException(e_510113, "InternalError");
		}
		
		F.line = 599;
		var name_510201 = ast_node_510099.names[chckIndx(0, 0, ast_node_510099.names.length+0-1)-0].name;
		F.line = 600;
		add_op_505488(c_510098, new_arg_instr_503437(79, name_id_445042(tste_505041(c_510098), name_510201.value), line_no_510100));
		F.line = 601;
		add_store_op_505759(c_510098, name_510201, line_no_510100);
	framePtr = F.prev;

	
}

function new_seq_510405(len_510409) {
	var result_510411 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_510411 = new Array(len_510409); for (var i=0;i<len_510409;++i) {result_510411[i]=null;}	framePtr = F.prev;

	return result_510411;

}

function reversed_510304(a_510309, first_510311, last_510313) {
	var result_510315 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		if (!((subInt(first_510311, 1) <= last_510313))) {
		F.line = 54;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(54, 10) `\x0Afirst - 1 <= last` "));
		}
		
		F.line = 55;
		var i_510401 = subInt(last_510313, first_510311);
		F.line = 56;
		var x_510402 = first_510311;
		F.line = 57;
		result_510315 = nimCopy(null, new_seq_510405(chckRange(addInt(i_510401, 1), 0, 2147483647)), NTI510410);
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!(0 <= i_510401)) break L2;
					F.line = 59;
					result_510315[chckIndx(i_510401, 0, result_510315.length+0-1)-0] = a_510309[chckIndx(x_510402, 0, a_510309.length+0-1)-0];
					F.line = 60;
					i_510401 = subInt(i_510401, 1);
					F.line = 61;
					x_510402 = addInt(x_510402, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_510315;

}

function reversed_510288(a_510293) {
	var result_510295 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_510295 = nimCopy(null, reversed_510304(a_510293, 0, (a_510293 != null ? (a_510293.length-1) : -1)), NTI510314);
	framePtr = F.prev;

	return result_510295;

}

function compile_510278(c_510280, ast_node_510281) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 626;
		var loop_block_510282 = null;
		L1: do {
			F.line = 617;
			var basic_block_510493 = null;
			F.line = 3909;
			var colontmp__510515 = null;
			F.line = 617;
			colontmp__510515 = reversed_510288(tcu_504986(c_510280).blocks);
			F.line = 3911;
			var i_510518 = 0;
			F.line = 3912;
			var l_510520 = (colontmp__510515 != null ? colontmp__510515.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_510518 < l_510520)) break L3;
						F.line = 3914;
						basic_block_510493 = colontmp__510515[chckIndx(i_510518, 0, colontmp__510515.length+0-1)-0];
						if ((ConstSet26[basic_block_510493.tp] != undefined)) {
						F.line = 619;
						loop_block_510282 = basic_block_510493;
						F.line = 620;
						break L1;
						}
						
						F.line = 3915;
						i_510518 = addInt(i_510518, 1);
						if (!(((colontmp__510515 != null ? colontmp__510515.length : 0) == l_510520))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((loop_block_510282 === null)) {
		F.line = 622;
		raiseException(new_syntax_error_156100(makeNimstrLit("\'break\' outside loop"), [], ast_node_510281.lineno.value, ast_node_510281.col_offset.value), "SyntaxError:ObjectType");
		}
		
		F.line = 628;
		add_op_505488(c_510280, new_jump_instr_503837(84, loop_block_510282.next, ast_node_510281.lineno.value));
	framePtr = F.prev;

	
}

function compile_510236(c_510238, ast_node_510239) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 614;
		add_op_505505(c_510238, 7, ast_node_510239.lineno.value);
	framePtr = F.prev;

	
}

function compile_510601(c_510603, ast_node_510604) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 638;
		var ending_510605 = new_basic_block_504238(0);
		F.line = 639;
		var num_values_510613 = (ast_node_510604.values != null ? ast_node_510604.values.length : 0);
		F.line = 640;
		var op_510614 = 0;
		if (isObj(ast_node_510604.op.m_type, NTI181128)) {
		F.line = 642;
		op_510614 = 82;
		}
		else {
		if (isObj(ast_node_510604.op.m_type, NTI181159)) {
		F.line = 644;
		op_510614 = 83;
		}
		else {
			F.line = 2895;
			var e_510644 = null;
			F.line = 2896;
			e_510644 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 31;
			e_510644.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_510644.parent = null;
			F.line = 646;
			raiseException(e_510644, "InternalError");
		}
		}
		if (!((1 < num_values_510613))) {
		F.line = 647;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(647, 10) `1 < numValues` "));
		}
		
		L1: do {
			F.line = 648;
			var i_511011 = 0;
			F.line = 3617;
			var i_511017 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_511017 < num_values_510613)) break L3;
						F.line = 3619;
						i_511011 = i_511017;
						F.line = 649;
						compile_507538(c_510603, ast_node_510604.values[chckIndx(i_511011, 0, ast_node_510604.values.length+0-1)-0]);
						if (!((i_511011 == subInt(num_values_510613, 1)))) {
						F.line = 651;
						add_op_505488(c_510603, new_jump_instr_503837(op_510614, ending_510605, last_line_no_505269(c_510603)));
						}
						
						F.line = 3620;
						i_511017 = addInt(i_511017, 1);
					}
			} while(false);
		} while(false);
		F.line = 652;
		add_block_505614(c_510603, ending_510605);
	framePtr = F.prev;

	
}

function compile_510534(c_510536, ast_node_510537) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 632;
		var loop_block_510538 = null;
		L1: do {
			F.line = 617;
			var basic_block_510560 = null;
			F.line = 3909;
			var colontmp__510582 = null;
			F.line = 617;
			colontmp__510582 = reversed_510288(tcu_504986(c_510536).blocks);
			F.line = 3911;
			var i_510585 = 0;
			F.line = 3912;
			var l_510587 = (colontmp__510582 != null ? colontmp__510582.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_510585 < l_510587)) break L3;
						F.line = 3914;
						basic_block_510560 = colontmp__510582[chckIndx(i_510585, 0, colontmp__510582.length+0-1)-0];
						if ((ConstSet27[basic_block_510560.tp] != undefined)) {
						F.line = 619;
						loop_block_510538 = basic_block_510560;
						F.line = 620;
						break L1;
						}
						
						F.line = 3915;
						i_510585 = addInt(i_510585, 1);
						if (!(((colontmp__510582 != null ? colontmp__510582.length : 0) == l_510587))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((loop_block_510538 === null)) {
		F.line = 622;
		raiseException(new_syntax_error_156100(makeNimstrLit("\'break\' outside loop"), [], ast_node_510537.lineno.value, ast_node_510537.col_offset.value), "SyntaxError:ObjectType");
		}
		
		F.line = 634;
		add_op_505488(c_510536, new_jump_instr_503837(84, loop_block_510538, ast_node_510537.lineno.value));
	framePtr = F.prev;

	
}

function compile_511050(c_511052, ast_node_511053) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 664;
		compile_507538(c_511052, ast_node_511053.operand);
		F.line = 665;
		var op_code_511054 = to_op_code_507358(ast_node_511053.op);
		F.line = 666;
		add_op_505488(c_511052, new_instr_503133(op_code_511054, ast_node_511053.lineno.value));
	framePtr = F.prev;

	
}

function compile_511032(c_511034, ast_node_511035) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 656;
		compile_507538(c_511034, ast_node_511035.left);
		F.line = 657;
		compile_507538(c_511034, ast_node_511035.right);
		F.line = 658;
		var op_code_511036 = to_op_code_507087(ast_node_511035.op);
		F.line = 659;
		add_op_505488(c_511034, new_instr_503133(op_code_511036, ast_node_511035.lineno.value));
	framePtr = F.prev;

	
}

function compile_509038(c_509040, ast_node_509041) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 504;
		var has_or_else_509051 = (0 < (ast_node_509041.orelse != null ? ast_node_509041.orelse.length : 0));
		F.line = 505;
		var next_509052 = null;
		F.line = 505;
		var ending_509053 = null;
		F.line = 506;
		ending_509053 = new_basic_block_504238(0);
		if (has_or_else_509051) {
		F.line = 508;
		next_509052 = new_basic_block_504238(0);
		}
		else {
			F.line = 510;
			next_509052 = ending_509053;
		}
		
		F.line = 512;
		compile_507538(c_509040, ast_node_509041.test);
		F.line = 513;
		add_op_505488(c_509040, new_jump_instr_503837(85, next_509052, ast_node_509041.lineno.value));
		L1: do {
			F.line = 401;
			var ast_node_509066 = null;
			F.line = 3909;
			var colontmp__509081 = null;
			F.line = 514;
			colontmp__509081 = ast_node_509041.body;
			F.line = 3911;
			var i_509084 = 0;
			F.line = 3912;
			var l_509086 = (colontmp__509081 != null ? colontmp__509081.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_509084 < l_509086)) break L3;
						F.line = 3914;
						ast_node_509066 = colontmp__509081[chckIndx(i_509084, 0, colontmp__509081.length+0-1)-0];
						F.line = 402;
						compile_507538(c_509040, ast_node_509066);
						F.line = 3915;
						i_509084 = addInt(i_509084, 1);
						if (!(((colontmp__509081 != null ? colontmp__509081.length : 0) == l_509086))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (has_or_else_509051) {
		F.line = 521;
		add_op_505488(c_509040, new_jump_instr_503837(81, ending_509053, last_line_no_505269(c_509040)));
		F.line = 522;
		add_block_505614(c_509040, next_509052);
		L4: do {
			F.line = 401;
			var ast_node_509079 = null;
			F.line = 3909;
			var colontmp__509088 = null;
			F.line = 523;
			colontmp__509088 = ast_node_509041.orelse;
			F.line = 3911;
			var i_509091 = 0;
			F.line = 3912;
			var l_509093 = (colontmp__509088 != null ? colontmp__509088.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_509091 < l_509093)) break L6;
						F.line = 3914;
						ast_node_509079 = colontmp__509088[chckIndx(i_509091, 0, colontmp__509088.length+0-1)-0];
						F.line = 402;
						compile_507538(c_509040, ast_node_509079);
						F.line = 3915;
						i_509091 = addInt(i_509091, 1);
						if (!(((colontmp__509088 != null ? colontmp__509088.length : 0) == l_509093))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 524;
		add_block_505614(c_509040, ending_509053);
	framePtr = F.prev;

	
}

function compile_508839(c_508841, ast_node_508842) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_508842.orelse != null ? ast_node_508842.orelse.length : 0) == 0))) {
		F.line = 490;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(490, 10) `len(astNode.orelse) == 0` "));
		}
		
		F.line = 491;
		var loop_509002 = new_basic_block_504238(1);
		F.line = 492;
		var ending_509003 = new_basic_block_504238(0);
		F.line = 494;
		loop_509002.next = ending_509003;
		F.line = 495;
		add_block_505614(c_508841, loop_509002);
		F.line = 496;
		compile_507538(c_508841, ast_node_508842.test);
		F.line = 497;
		add_op_505488(c_508841, new_jump_instr_503837(85, ending_509003, ast_node_508842.lineno.value));
		L1: do {
			F.line = 401;
			var ast_node_509016 = null;
			F.line = 3909;
			var colontmp__509019 = null;
			F.line = 498;
			colontmp__509019 = ast_node_508842.body;
			F.line = 3911;
			var i_509022 = 0;
			F.line = 3912;
			var l_509024 = (colontmp__509019 != null ? colontmp__509019.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_509022 < l_509024)) break L3;
						F.line = 3914;
						ast_node_509016 = colontmp__509019[chckIndx(i_509022, 0, colontmp__509019.length+0-1)-0];
						F.line = 402;
						compile_507538(c_508841, ast_node_509016);
						F.line = 3915;
						i_509022 = addInt(i_509022, 1);
						if (!(((colontmp__509019 != null ? colontmp__509019.length : 0) == l_509024))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 499;
		add_op_505488(c_508841, new_jump_instr_503837(84, loop_509002, last_line_no_505269(c_508841)));
		F.line = 500;
		add_block_505614(c_508841, ending_509003);
	framePtr = F.prev;

	
}

function compile_509223(c_509225, ast_node_509226) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_509226.orelse != null ? ast_node_509226.orelse.length : 0) == 0))) {
		F.line = 536;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(536, 10) `len(astNode.orelse) == 0` "));
		}
		
		if (!(((ast_node_509226.finalbody != null ? ast_node_509226.finalbody.length : 0) == 0))) {
		F.line = 537;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(537, 10) `len(astNode.finalbody) == 0` "));
		}
		
		if (!((0 < (ast_node_509226.handlers != null ? ast_node_509226.handlers.length : 0)))) {
		F.line = 538;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(538, 10) `0 < len(astNode.handlers)` "));
		}
		
		F.line = 540;
		var body_509801 = new_basic_block_504238(0);
		F.line = 541;
		var excp_blocks_509803 = null;
		L1: do {
			F.line = 542;
			var i_509821 = 0;
			F.line = 3616;
			var colontmp__510029 = 0;
			F.line = 542;
			colontmp__510029 = (ast_node_509226.handlers != null ? ast_node_509226.handlers.length : 0);
			F.line = 3617;
			var i_510032 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_510032 < colontmp__510029)) break L3;
						F.line = 3619;
						i_509821 = i_510032;
						F.line = 543;
						if (excp_blocks_509803 != null) { excp_blocks_509803.push(new_basic_block_504238(0)); } else { excp_blocks_509803 = [new_basic_block_504238(0)]; };
						F.line = 3620;
						i_510032 = addInt(i_510032, 1);
					}
			} while(false);
		} while(false);
		F.line = 544;
		var ending_509832 = new_basic_block_504238(0);
		F.line = 546;
		add_block_505614(c_509225, body_509801);
		F.line = 548;
		add_op_505488(c_509225, new_jump_instr_503837(88, excp_blocks_509803[chckIndx(0, 0, excp_blocks_509803.length+0-1)-0], ast_node_509226.lineno.value));
		L4: do {
			F.line = 401;
			var ast_node_509845 = null;
			F.line = 3909;
			var colontmp__510035 = null;
			F.line = 549;
			colontmp__510035 = ast_node_509226.body;
			F.line = 3911;
			var i_510038 = 0;
			F.line = 3912;
			var l_510040 = (colontmp__510035 != null ? colontmp__510035.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_510038 < l_510040)) break L6;
						F.line = 3914;
						ast_node_509845 = colontmp__510035[chckIndx(i_510038, 0, colontmp__510035.length+0-1)-0];
						F.line = 402;
						compile_507538(c_509225, ast_node_509845);
						F.line = 3915;
						i_510038 = addInt(i_510038, 1);
						if (!(((colontmp__510035 != null ? colontmp__510035.length : 0) == l_510040))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 551;
		add_op_505488(c_509225, new_jump_instr_503837(84, ending_509832, last_line_no_505269(c_509225)));
		L7: do {
			F.line = 553;
			var idx_509893 = 0;
			F.line = 553;
			var handler_obj_509894 = null;
			F.line = 2352;
			var colontmp__510050 = null;
			F.line = 553;
			colontmp__510050 = ast_node_509226.handlers;
			F.line = 2354;
			var i_510053 = 0;
			L8: do {
				F.line = 2355;
					L9: while (true) {
					if (!(i_510053 < (colontmp__510050 != null ? colontmp__510050.length : 0))) break L9;
						F.line = 2356;
						idx_509893 = i_510053;
						F.line = 2356;
						handler_obj_509894 = colontmp__510050[chckIndx(i_510053, 0, colontmp__510050.length+0-1)-0];
						F.line = 554;
						var is_last_509902 = (idx_509893 == subInt((ast_node_509226.handlers != null ? ast_node_509226.handlers.length : 0), 1));
						F.line = 556;
						var handler_509903 = handler_obj_509894;
						if (!((handler_509903.name === null))) {
						F.line = 557;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(557, 12) `isNil(handler.name)` "));
						}
						
						F.line = 558;
						add_block_505614(c_509225, excp_blocks_509803[chckIndx(idx_509893, 0, excp_blocks_509803.length+0-1)-0]);
						if (!((handler_509903.type === null))) {
						F.line = 564;
						compile_507538(c_509225, handler_509903.type);
						F.line = 565;
						add_op_505488(c_509225, new_arg_instr_503437(78, 10, handler_509903.lineno.value));
						if (is_last_509902) {
						F.line = 567;
						add_op_505488(c_509225, new_jump_instr_503837(85, ending_509832, last_line_no_505269(c_509225)));
						}
						else {
							F.line = 569;
						add_op_505488(c_509225, new_jump_instr_503837(85, excp_blocks_509803[chckIndx(addInt(idx_509893, 1), 0, excp_blocks_509803.length+0-1)-0], last_line_no_505269(c_509225)));
						}
						
						}
						
						F.line = 571;
						add_op_505505(c_509225, 1, handler_509903.lineno.value);
						L10: do {
							F.line = 401;
							var ast_node_510024 = null;
							F.line = 3909;
							var colontmp__510044 = null;
							F.line = 572;
							colontmp__510044 = handler_509903.body;
							F.line = 3911;
							var i_510047 = 0;
							F.line = 3912;
							var l_510049 = (colontmp__510044 != null ? colontmp__510044.length : 0);
							L11: do {
								F.line = 3913;
									L12: while (true) {
									if (!(i_510047 < l_510049)) break L12;
										F.line = 3914;
										ast_node_510024 = colontmp__510044[chckIndx(i_510047, 0, colontmp__510044.length+0-1)-0];
										F.line = 402;
										compile_507538(c_509225, ast_node_510024);
										F.line = 3915;
										i_510047 = addInt(i_510047, 1);
										if (!(((colontmp__510044 != null ? colontmp__510044.length : 0) == l_510049))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						if (!(is_last_509902)) {
						F.line = 575;
						add_op_505488(c_509225, new_jump_instr_503837(84, ending_509832, last_line_no_505269(c_509225)));
						}
						
						F.line = 2357;
						i_510053 = addInt(i_510053, 1);
					}
			} while(false);
		} while(false);
		F.line = 577;
		var last_line_no_510026 = last_line_no_505269(c_509225);
		F.line = 578;
		add_block_505614(c_509225, ending_509832);
		F.line = 579;
		add_op_505505(c_509225, 58, last_line_no_510026);
	framePtr = F.prev;

	
}

function compile_509107(c_509109, ast_node_509110) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!((ast_node_509110.cause === null))) {
		F.line = 528;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(528, 10) `isNil(astNode.cause)` "));
		}
		
		if ((ast_node_509110.exc === null)) {
		F.line = 530;
		add_op_505488(c_509109, new_arg_instr_503437(92, 0, ast_node_509110.lineno.value));
		}
		else {
			F.line = 532;
			compile_507538(c_509109, ast_node_509110.exc);
			F.line = 533;
			add_op_505488(c_509109, new_arg_instr_503437(92, 1, ast_node_509110.lineno.value));
		}
		
	framePtr = F.prev;

	
}

function compile_507561(c_507563, ast_node_507564) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 401;
			var ast_node_507576 = null;
			F.line = 3909;
			var colontmp__507578 = null;
			F.line = 413;
			colontmp__507578 = ast_node_507564.body;
			F.line = 3911;
			var i_507581 = 0;
			F.line = 3912;
			var l_507583 = (colontmp__507578 != null ? colontmp__507578.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_507581 < l_507583)) break L3;
						F.line = 3914;
						ast_node_507576 = colontmp__507578[chckIndx(i_507581, 0, colontmp__507578.length+0-1)-0];
						F.line = 402;
						compile_507538(c_507563, ast_node_507576);
						F.line = 3915;
						i_507581 = addInt(i_507581, 1);
						if (!(((colontmp__507578 != null ? colontmp__507578.length : 0) == l_507583))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function compile_508098(c_508100, ast_node_508101) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 436;
			var deco_508110 = null;
			F.line = 3909;
			var colontmp__508156 = null;
			F.line = 436;
			colontmp__508156 = ast_node_508101.decorator_list;
			F.line = 3911;
			var i_508159 = 0;
			F.line = 3912;
			var l_508161 = (colontmp__508156 != null ? colontmp__508156.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_508159 < l_508161)) break L3;
						F.line = 3914;
						deco_508110 = colontmp__508156[chckIndx(i_508159, 0, colontmp__508156.length+0-1)-0];
						F.line = 437;
						compile_507538(c_508100, deco_508110);
						F.line = 3915;
						i_508159 = addInt(i_508159, 1);
						if (!(((colontmp__508156 != null ? colontmp__508156.length : 0) == l_508161))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 438;
		var line_no_508111 = ast_node_508101.lineno.value;
		F.line = 439;
		add_op_505505(c_508100, 44, line_no_508111);
		F.line = 442;
		if (c_508100.units != null) { c_508100.units.push(new_compiler_unit_504437(c_508100.st, ast_node_508101, ast_node_508101.name.value)); } else { c_508100.units = [new_compiler_unit_504437(c_508100.st, ast_node_508101, ast_node_508101.name.value)]; };
		L4: do {
			F.line = 401;
			var ast_node_508134 = null;
			F.line = 3909;
			var colontmp__508163 = null;
			F.line = 443;
			colontmp__508163 = ast_node_508101.body;
			F.line = 3911;
			var i_508166 = 0;
			F.line = 3912;
			var l_508168 = (colontmp__508163 != null ? colontmp__508163.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_508166 < l_508168)) break L6;
						F.line = 3914;
						ast_node_508134 = colontmp__508163[chckIndx(i_508166, 0, colontmp__508163.length+0-1)-0];
						F.line = 402;
						compile_507538(c_508100, ast_node_508134);
						F.line = 3915;
						i_508166 = addInt(i_508166, 1);
						if (!(((colontmp__508163 != null ? colontmp__508163.length : 0) == l_508168))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 444;
		make_function_506662(c_508100, pop_508014(c_508100, "units"), ast_node_508101.name.value, line_no_508111);
		F.line = 446;
		add_load_const_505662(c_508100, ast_node_508101.name.value, ast_node_508101.lineno.value);
		F.line = 448;
		add_op_505488(c_508100, new_arg_instr_503437(93, 2, line_no_508111));
		L7: do {
			F.line = 449;
			var deco_508153 = null;
			F.line = 3909;
			var colontmp__508170 = null;
			F.line = 449;
			colontmp__508170 = ast_node_508101.decorator_list;
			F.line = 3911;
			var i_508173 = 0;
			F.line = 3912;
			var l_508175 = (colontmp__508170 != null ? colontmp__508170.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_508173 < l_508175)) break L9;
						F.line = 3914;
						deco_508153 = colontmp__508170[chckIndx(i_508173, 0, colontmp__508170.length+0-1)-0];
						F.line = 450;
						add_op_505488(c_508100, new_arg_instr_503437(93, 1, deco_508153.lineno.value));
						F.line = 3915;
						i_508173 = addInt(i_508173, 1);
						if (!(((colontmp__508170 != null ? colontmp__508170.length : 0) == l_508175))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 451;
		add_store_op_505729(c_508100, ast_node_508101.name.value, line_no_508111);
	framePtr = F.prev;

	
}

function compile_507633(c_507635, ast_node_507636) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 422;
			var deco_507645 = null;
			F.line = 3909;
			var colontmp__508065 = null;
			F.line = 422;
			colontmp__508065 = ast_node_507636.decorator_list;
			F.line = 3911;
			var i_508068 = 0;
			F.line = 3912;
			var l_508070 = (colontmp__508065 != null ? colontmp__508065.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_508068 < l_508070)) break L3;
						F.line = 3914;
						deco_507645 = colontmp__508065[chckIndx(i_508068, 0, colontmp__508065.length+0-1)-0];
						F.line = 423;
						compile_507538(c_507635, deco_507645);
						F.line = 3915;
						i_508068 = addInt(i_508068, 1);
						if (!(((colontmp__508065 != null ? colontmp__508065.length : 0) == l_508070))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ast_node_507636.returns == null))) {
		F.line = 424;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(424, 10) `astNode.returns == nil` "));
		}
		
		F.line = 425;
		if (c_507635.units != null) { c_507635.units.push(new_compiler_unit_504437(c_507635.st, ast_node_507636, ast_node_507636.name.value)); } else { c_507635.units = [new_compiler_unit_504437(c_507635.st, ast_node_507636, ast_node_507636.name.value)]; };
		if (!(!((tcu_504986(c_507635).codeName === null)))) {
		F.line = 426;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(426, 3) `not isNil(tcu(c).codeName)` "));
		}
		
		L4: do {
			F.line = 401;
			var ast_node_508012 = null;
			F.line = 3909;
			var colontmp__508072 = null;
			F.line = 428;
			colontmp__508072 = ast_node_507636.body;
			F.line = 3911;
			var i_508075 = 0;
			F.line = 3912;
			var l_508077 = (colontmp__508072 != null ? colontmp__508072.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_508075 < l_508077)) break L6;
						F.line = 3914;
						ast_node_508012 = colontmp__508072[chckIndx(i_508075, 0, colontmp__508072.length+0-1)-0];
						F.line = 402;
						compile_507538(c_507635, ast_node_508012);
						F.line = 3915;
						i_508075 = addInt(i_508075, 1);
						if (!(((colontmp__508072 != null ? colontmp__508072.length : 0) == l_508077))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 429;
		make_function_506662(c_507635, pop_508014(c_507635, "units"), ast_node_507636.name.value, ast_node_507636.lineno.value);
		L7: do {
			F.line = 430;
			var deco_508062 = null;
			F.line = 3909;
			var colontmp__508079 = null;
			F.line = 430;
			colontmp__508079 = ast_node_507636.decorator_list;
			F.line = 3911;
			var i_508082 = 0;
			F.line = 3912;
			var l_508084 = (colontmp__508079 != null ? colontmp__508079.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_508082 < l_508084)) break L9;
						F.line = 3914;
						deco_508062 = colontmp__508079[chckIndx(i_508082, 0, colontmp__508079.length+0-1)-0];
						F.line = 431;
						add_op_505488(c_507635, new_arg_instr_503437(93, 1, deco_508062.lineno.value));
						F.line = 3915;
						i_508082 = addInt(i_508082, 1);
						if (!(((colontmp__508079 != null ? colontmp__508079.length : 0) == l_508084))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 432;
		add_store_op_505729(c_507635, ast_node_507636.name.value, ast_node_507636.lineno.value);
	framePtr = F.prev;

	
}

function compile_507597(c_507599, ast_node_507600) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 417;
		c_507599.interactive = true;
		L1: do {
			F.line = 401;
			var ast_node_507612 = null;
			F.line = 3909;
			var colontmp__507614 = null;
			F.line = 418;
			colontmp__507614 = ast_node_507600.body;
			F.line = 3911;
			var i_507617 = 0;
			F.line = 3912;
			var l_507619 = (colontmp__507614 != null ? colontmp__507614.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_507617 < l_507619)) break L3;
						F.line = 3914;
						ast_node_507612 = colontmp__507614[chckIndx(i_507617, 0, colontmp__507614.length+0-1)-0];
						F.line = 402;
						compile_507538(c_507599, ast_node_507612);
						F.line = 3915;
						i_507617 = addInt(i_507617, 1);
						if (!(((colontmp__507614 != null ? colontmp__507614.length : 0) == l_507619))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function tcb_505113(c_505115) {
	var result_505116 = null;

	var F={procname:"compile.tcb",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 134;
		result_505116 = tcb_505058(tcu_504986(c_505115));
	framePtr = F.prev;

	return result_505116;

}

function compile_508189(c_508191, ast_node_508192) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if ((ast_node_508192.value === null)) {
		F.line = 456;
		add_load_const_505662(c_508191, py_none_356044, ast_node_508192.lineno.value);
		}
		else {
			F.line = 458;
		compile_507538(c_508191, ast_node_508192.value);
		}
		
		F.line = 459;
		add_op_505488(c_508191, new_instr_503133(54, ast_node_508192.lineno.value));
		F.line = 460;
		tcb_505113(c_508191).seenReturn = true;
	framePtr = F.prev;

	
}

function compile_508614(c_508616, ast_node_508617) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_508617.orelse != null ? ast_node_508617.orelse.length : 0) == 0))) {
		F.line = 475;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(475, 10) `len(astNode.orelse) == 0` "));
		}
		
		F.line = 476;
		var start_508802 = new_basic_block_504238(2);
		F.line = 477;
		var ending_508803 = new_basic_block_504238(0);
		F.line = 479;
		start_508802.next = ending_508803;
		F.line = 480;
		compile_507538(c_508616, ast_node_508617.iter);
		F.line = 481;
		add_op_505505(c_508616, 41, ast_node_508617.iter.lineno.value);
		F.line = 482;
		add_block_505614(c_508616, start_508802);
		F.line = 483;
		add_op_505488(c_508616, new_jump_instr_503837(65, ending_508803, ast_node_508617.lineno.value));
		F.line = 484;
		compile_507538(c_508616, ast_node_508617.target);
		L1: do {
			F.line = 401;
			var ast_node_508817 = null;
			F.line = 3909;
			var colontmp__508820 = null;
			F.line = 485;
			colontmp__508820 = ast_node_508617.body;
			F.line = 3911;
			var i_508823 = 0;
			F.line = 3912;
			var l_508825 = (colontmp__508820 != null ? colontmp__508820.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_508823 < l_508825)) break L3;
						F.line = 3914;
						ast_node_508817 = colontmp__508820[chckIndx(i_508823, 0, colontmp__508820.length+0-1)-0];
						F.line = 402;
						compile_507538(c_508616, ast_node_508817);
						F.line = 3915;
						i_508823 = addInt(i_508823, 1);
						if (!(((colontmp__508820 != null ? colontmp__508820.length : 0) == l_508825))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 486;
		add_op_505488(c_508616, new_jump_instr_503837(84, start_508802, last_line_no_505269(c_508616)));
		F.line = 487;
		add_block_505614(c_508616, ending_508803);
	framePtr = F.prev;

	
}

function compile_508414(c_508416, ast_node_508417) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_508423 = null;
		F.line = 2896;
		e_508423 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 31;
		e_508423.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_508423.parent = null;
		F.line = 471;
		raiseException(e_508423, "InternalError");
	framePtr = F.prev;

	
}

function compile_508214(c_508216, ast_node_508217) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_508217.targets != null ? ast_node_508217.targets.length : 0) == 1))) {
		F.line = 464;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(464, 10) `len(astNode.targets) == 1` "));
		}
		
		F.line = 465;
		compile_507538(c_508216, ast_node_508217.value);
		F.line = 466;
		compile_507538(c_508216, ast_node_508217.targets[chckIndx(0, 0, ast_node_508217.targets.length+0-1)-0]);
	framePtr = F.prev;

	
}

function compile_507533(c_507535, ast_node_507536) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 406;
		rawEcho(makeNimstrLit("!!!WARNING, ast node compile method not implemented"));
		F.line = 407;
		rawEcho(HEX24_177554(ast_node_507536));
		F.line = 408;
		rawEcho(makeNimstrLit("###WARNING, ast node compile method not implemented"));
	framePtr = F.prev;

	
}

function compile_507538(c_507535, ast_node_507536) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(ast_node_507536);
		if (isObj(ast_node_507536.m_type, NTI180656)) {
		F.line = 405;
		compile_512216(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180619)) {
		F.line = 405;
		compile_512029(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180728)) {
		F.line = 405;
		compile_512433(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180586)) {
		F.line = 405;
		compile_512416(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180800)) {
		F.line = 405;
		compile_512665(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180763)) {
		F.line = 405;
		compile_512616(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI181095)) {
		F.line = 405;
		compile_512879(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI181023)) {
		F.line = 405;
		compile_512828(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180109)) {
		F.line = 405;
		compile_511068(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI182107)) {
		F.line = 405;
		compile_512919(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180432)) {
		F.line = 405;
		compile_511243(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180183)) {
		F.line = 405;
		compile_511126(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179623)) {
		F.line = 405;
		compile_510067(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180473)) {
		F.line = 405;
		compile_511822(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179802)) {
		F.line = 405;
		compile_510216(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179658)) {
		F.line = 405;
		compile_510096(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179866)) {
		F.line = 405;
		compile_510278(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179835)) {
		F.line = 405;
		compile_510236(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179928)) {
		F.line = 405;
		compile_510601(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179897)) {
		F.line = 405;
		compile_510534(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI180002)) {
		F.line = 405;
		compile_511050(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179965)) {
		F.line = 405;
		compile_511032(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179422)) {
		F.line = 405;
		compile_509038(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179381)) {
		F.line = 405;
		compile_508839(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179576)) {
		F.line = 405;
		compile_509223(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179541)) {
		F.line = 405;
		compile_509107(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI178837)) {
		F.line = 405;
		compile_507561(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179065)) {
		F.line = 405;
		compile_508098(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI178975)) {
		F.line = 405;
		compile_507633(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI178872)) {
		F.line = 405;
		compile_507597(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179114)) {
		F.line = 405;
		compile_508189(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179295)) {
		F.line = 405;
		compile_508614(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179219)) {
		F.line = 405;
		compile_508414(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI179182)) {
		F.line = 405;
		compile_508214(c_507535, ast_node_507536);
		}
		else {
		if (isObj(ast_node_507536.m_type, NTI177022)) {
		F.line = 405;
		compile_507533(c_507535, ast_node_507536);
		}
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	framePtr = F.prev;

	
}
