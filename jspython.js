/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI505314 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI505410 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI499850 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI499876 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI181531 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181903 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181500 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180333 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182263 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182193 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181593 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181934 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180514 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180552 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180551 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180298 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180296 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180149 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180148 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180961 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181469 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180899 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178907 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180992 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180399 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181407 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180930 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180072 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180366 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180693 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178941 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178940 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179025 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179023 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179020 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180222 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180220 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180868 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181061 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI181060 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180260 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180257 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179505 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179503 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179502 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179148 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179147 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179343 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179341 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179338 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179256 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180037 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179768 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179767 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179466 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178689 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178776 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178722 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179464 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179463 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179695 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179693 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179733 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179732 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182673 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3886 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI501254 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI501262 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI448381 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI448363 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI448345 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI448327 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI447272 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI447283 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI498066 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI498045 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI498034 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI498041 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI498028 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI498055 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI498054 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI498036 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI498048 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI448401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI432248 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI432245 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI432242 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI432217 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI432214 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI432211 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI432192 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI432189 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI432186 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI432175 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI432173 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI432141 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI177015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI432158 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI432155 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI432152 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI178873 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178872 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI408617 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179073 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179067 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179065 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182158 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182116 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182113 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182111 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178680 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178765 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178716 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI182108 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182107 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178980 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178978 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178677 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178762 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178975 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182068 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179583 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179581 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178674 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178757 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178712 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179579 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179577 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179576 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179300 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179298 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179295 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179385 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179383 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179381 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI406647 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179426 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179424 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179422 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI406561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179623 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182228 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178686 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178773 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178720 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179659 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179541 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179897 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179866 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179835 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179183 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179182 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179802 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI406440 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179930 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178702 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179928 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181159 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178634 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178742 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180436 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180434 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180432 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181996 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181965 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181748 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181810 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181872 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181717 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181841 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178659 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181779 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181562 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181345 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181314 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181252 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181190 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181686 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181655 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181376 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178638 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178704 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179965 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181023 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181095 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178629 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178739 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178700 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178683 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178770 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178718 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180477 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180475 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180473 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177030 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177021 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180586 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177027 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177019 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180728 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI348047 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI348043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI348049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180112 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180110 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180109 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI406495 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180764 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180763 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI406736 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI406732 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182027 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178671 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178754 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178710 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180185 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180837 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI406513 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178621 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178736 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178698 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180801 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180800 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181624 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178594 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178731 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178696 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178653 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178748 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180002 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178561 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178723 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178567 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI177022 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177024 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178726 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178694 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178838 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178837 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI378362 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI603270 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI603410 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI350389 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI348051 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI208887 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI208886 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI337147 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI326025 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI25907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI275250 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI275249 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI268071 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI260204 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI50534 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI49853 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI49850 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI49744 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI51316 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI50649 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI50646 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI50537 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI279086 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI277238 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI106 = {size: 0,kind: 32,base: null,node: null,finalizer: null};
var NTI277235 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI116 = {size: 0,kind: 41,base: null,node: null,finalizer: null};
var NTI277054 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI320464 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI320466 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI325988 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI325984 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI329872 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI324639 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI320468 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI324650 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI324646 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI324446 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI324445 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI156088 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI633109 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157559 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI614110 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI611304 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI609891 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI607083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI511275 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI556408 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI592857 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI568859 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI597677 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI595151 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI552081 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI552143 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI550084 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI547672 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI545122 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI546100 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI469069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI545123 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI540149 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI542089 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI542087 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI526177 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI492124 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI542082 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI542083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI540150 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI156085 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI526194 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI526191 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI526188 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI526178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI510256 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI510255 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI432133 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI492148 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI492147 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI492145 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI492143 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI492141 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI492139 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI175083 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI492137 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI492135 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI492133 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI492131 = {size: 0,kind: 21,base: null,node: null,finalizer: null};
var NTI492129 = {size: 0,kind: 21,base: null,node: null,finalizer: null};
var NTI492068 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI464016 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI492127 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI492126 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI492125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI470059 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI466650 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI469071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI469070 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI467097 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI465191 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI465190 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134017 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3866 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI156087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI375280 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI374302 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI377247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI376353 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI156081 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI378718 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI374054 = {size: 0,kind: 42,base: null,node: null,finalizer: null};
var NTI374305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI374242 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI374303 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI372501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI371501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI370501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI369501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI368501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI367501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI366501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI365501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI364501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI363501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI362501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI361501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI360501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI359501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI358415 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI357178 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI357249 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI357243 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI357160 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI357244 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI355070 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI353098 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI301986 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI320460 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI301992 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI301989 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI320469 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI110 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI281307 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI108 = {size: 0,kind: 33,base: null,node: null,finalizer: null};
var NTI281228 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI281230 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI281339 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI281333 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI281324 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI41402 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI281313 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI281310 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI281226 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI281297 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI257479 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI249258 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI195498 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI195495 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI195492 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI241189 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178028 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI220231 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI220227 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI250866 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI212058 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI136 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI212015 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI212024 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI212017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI212040 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI212037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI212034 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3854 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI133824 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI202995 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI203987 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI203984 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI203981 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3844 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI175084 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157273 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157214 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI157277 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157318 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157332 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157329 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI157326 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI143056 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI157300 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157297 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI157294 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157353 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157362 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157358 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157346 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157349 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157212 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157081 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI157218 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI157280 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
NTI157218.base = NTI157280;
var NNI157081 = {kind: 2, offset: 0, typ: null, name: null, len: 17, sons: {"0": {kind: 1, offset: 0, typ: NTI157081, name: "NULL", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI157081, name: "Object", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI157081, name: "None", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI157081, name: "BaseError", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI157081, name: "Int", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI157081, name: "Float", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI157081, name: "Bool", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI157081, name: "Type", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI157081, name: "Tuple", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI157081, name: "List", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI157081, name: "Str", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI157081, name: "Code", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI157081, name: "NimFunc", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI157081, name: "Function", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI157081, name: "BoundMethod", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI157081, name: "Slice", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI157081, name: "Cell", len: 0, sons: null}}};
NTI157081.node = NNI157081;
var NNI157212 = {kind: 2, len: 38, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157349, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157349, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157349, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI157349, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI157349, name: "Field4", sons: null}, 
{kind: 1, offset: "Field5", len: 0, typ: NTI157349, name: "Field5", sons: null}, 
{kind: 1, offset: "Field6", len: 0, typ: NTI157349, name: "Field6", sons: null}, 
{kind: 1, offset: "Field7", len: 0, typ: NTI157346, name: "Field7", sons: null}, 
{kind: 1, offset: "Field8", len: 0, typ: NTI157346, name: "Field8", sons: null}, 
{kind: 1, offset: "Field9", len: 0, typ: NTI157346, name: "Field9", sons: null}, 
{kind: 1, offset: "Field10", len: 0, typ: NTI157346, name: "Field10", sons: null}, 
{kind: 1, offset: "Field11", len: 0, typ: NTI157346, name: "Field11", sons: null}, 
{kind: 1, offset: "Field12", len: 0, typ: NTI157346, name: "Field12", sons: null}, 
{kind: 1, offset: "Field13", len: 0, typ: NTI157349, name: "Field13", sons: null}, 
{kind: 1, offset: "Field14", len: 0, typ: NTI157349, name: "Field14", sons: null}, 
{kind: 1, offset: "Field15", len: 0, typ: NTI157349, name: "Field15", sons: null}, 
{kind: 1, offset: "Field16", len: 0, typ: NTI157349, name: "Field16", sons: null}, 
{kind: 1, offset: "Field17", len: 0, typ: NTI157349, name: "Field17", sons: null}, 
{kind: 1, offset: "Field18", len: 0, typ: NTI157349, name: "Field18", sons: null}, 
{kind: 1, offset: "Field19", len: 0, typ: NTI157349, name: "Field19", sons: null}, 
{kind: 1, offset: "Field20", len: 0, typ: NTI157349, name: "Field20", sons: null}, 
{kind: 1, offset: "Field21", len: 0, typ: NTI157349, name: "Field21", sons: null}, 
{kind: 1, offset: "Field22", len: 0, typ: NTI157349, name: "Field22", sons: null}, 
{kind: 1, offset: "Field23", len: 0, typ: NTI157346, name: "Field23", sons: null}, 
{kind: 1, offset: "Field24", len: 0, typ: NTI157346, name: "Field24", sons: null}, 
{kind: 1, offset: "Field25", len: 0, typ: NTI157346, name: "Field25", sons: null}, 
{kind: 1, offset: "Field26", len: 0, typ: NTI157358, name: "Field26", sons: null}, 
{kind: 1, offset: "Field27", len: 0, typ: NTI157362, name: "Field27", sons: null}, 
{kind: 1, offset: "Field28", len: 0, typ: NTI157349, name: "Field28", sons: null}, 
{kind: 1, offset: "Field29", len: 0, typ: NTI157353, name: "Field29", sons: null}, 
{kind: 1, offset: "Field30", len: 0, typ: NTI157346, name: "Field30", sons: null}, 
{kind: 1, offset: "Field31", len: 0, typ: NTI157362, name: "Field31", sons: null}, 
{kind: 1, offset: "Field32", len: 0, typ: NTI157349, name: "Field32", sons: null}, 
{kind: 1, offset: "Field33", len: 0, typ: NTI157353, name: "Field33", sons: null}, 
{kind: 1, offset: "Field34", len: 0, typ: NTI157349, name: "Field34", sons: null}, 
{kind: 1, offset: "Field35", len: 0, typ: NTI157353, name: "Field35", sons: null}, 
{kind: 1, offset: "Field36", len: 0, typ: NTI157346, name: "Field36", sons: null}, 
{kind: 1, offset: "Field37", len: 0, typ: NTI157346, name: "Field37", sons: null}]};
NTI157212.node = NNI157212;
var NNI157300 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157362, name: "Field2", sons: null}]};
NTI157300.node = NNI157300;
NTI157297.base = NTI157300;
var NNI157294 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI157297, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI157294.node = NNI157294;
var NNI157318 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157346, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157349, name: "Field1", sons: null}]};
NTI157318.node = NNI157318;
var NNI157332 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157318, name: "Field2", sons: null}]};
NTI157332.node = NNI157332;
NTI157329.base = NTI157332;
var NNI157326 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI157329, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI157326.node = NNI157326;
var NNI157280 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "base", len: 0, typ: NTI157218, name: "base", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI157081, name: "kind", sons: null}, 
{kind: 1, offset: "magicMethods", len: 0, typ: NTI157212, name: "magicMethods", sons: null}, 
{kind: 1, offset: "bltinMethods", len: 0, typ: NTI157294, name: "bltinMethods", sons: null}, 
{kind: 1, offset: "getsetDescr", len: 0, typ: NTI157326, name: "getsetDescr", sons: null}]};
NTI157280.node = NNI157280;
var NNI157273 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI104, name: "id", sons: null}, 
{kind: 1, offset: "pyType", len: 0, typ: NTI157218, name: "pyType", sons: null}]};
NTI157273.node = NNI157273;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI157273.base = NTI3808;
NTI157214.base = NTI157273;
var NNI157277 = {kind: 1, offset: "dict", len: 0, typ: NTI157214, name: "dict", sons: null};
NTI157277.node = NNI157277;
NTI157277.base = NTI157273;
NTI157280.base = NTI157277;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
var NNI175084 = {kind: 1, offset: "str", len: 0, typ: NTI138, name: "str", sons: null};
NTI175084.node = NNI175084;
NTI175084.base = NTI157273;
var NNI3844 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3844.node = NNI3844;
NTI3844.base = NTI3842;
var NNI202995 = {kind: 2, offset: 0, typ: null, name: null, len: 178, sons: {"0": {kind: 1, offset: 0, typ: NTI202995, name: "NULLTOKEN", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI202995, name: "Endmarker", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI202995, name: "Name", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI202995, name: "Number", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI202995, name: "String", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI202995, name: "Newline", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI202995, name: "Indent", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI202995, name: "Dedent", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI202995, name: "Lpar", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI202995, name: "Rpar", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI202995, name: "Lsqb", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI202995, name: "Rsqb", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI202995, name: "Colon", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI202995, name: "Comma", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI202995, name: "Semi", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI202995, name: "Plus", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI202995, name: "Minus", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI202995, name: "Star", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI202995, name: "Slash", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI202995, name: "Vbar", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI202995, name: "Amper", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI202995, name: "Less", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI202995, name: "Greater", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI202995, name: "Equal", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI202995, name: "Dot", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI202995, name: "Percent", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI202995, name: "Lbrace", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI202995, name: "Rbrace", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI202995, name: "Eqequal", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI202995, name: "Notequal", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI202995, name: "Lessequal", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI202995, name: "Greaterequal", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI202995, name: "Tilde", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI202995, name: "Circumflex", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI202995, name: "Leftshift", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI202995, name: "Rightshift", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI202995, name: "Doublestar", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI202995, name: "Plusequal", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI202995, name: "Minequal", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI202995, name: "Starequal", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI202995, name: "Slashequal", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI202995, name: "Percentequal", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI202995, name: "Amperequal", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI202995, name: "Vbarequal", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI202995, name: "Circumflexequal", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI202995, name: "Leftshiftequal", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI202995, name: "Rightshiftequal", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI202995, name: "Doublestarequal", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI202995, name: "Doubleslash", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI202995, name: "Doubleslashequal", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI202995, name: "At", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI202995, name: "Atequal", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI202995, name: "Rarrow", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI202995, name: "Ellipsis", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI202995, name: "PEP401", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI202995, name: "not", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI202995, name: "if", len: 0, sons: null}, 
"57": {kind: 1, offset: 57, typ: NTI202995, name: "True", len: 0, sons: null}, 
"58": {kind: 1, offset: 58, typ: NTI202995, name: "break", len: 0, sons: null}, 
"59": {kind: 1, offset: 59, typ: NTI202995, name: "with", len: 0, sons: null}, 
"60": {kind: 1, offset: 60, typ: NTI202995, name: "and", len: 0, sons: null}, 
"61": {kind: 1, offset: 61, typ: NTI202995, name: "lambda", len: 0, sons: null}, 
"62": {kind: 1, offset: 62, typ: NTI202995, name: "is", len: 0, sons: null}, 
"63": {kind: 1, offset: 63, typ: NTI202995, name: "def", len: 0, sons: null}, 
"64": {kind: 1, offset: 64, typ: NTI202995, name: "from", len: 0, sons: null}, 
"65": {kind: 1, offset: 65, typ: NTI202995, name: "pass", len: 0, sons: null}, 
"66": {kind: 1, offset: 66, typ: NTI202995, name: "del", len: 0, sons: null}, 
"67": {kind: 1, offset: 67, typ: NTI202995, name: "False", len: 0, sons: null}, 
"68": {kind: 1, offset: 68, typ: NTI202995, name: "finally", len: 0, sons: null}, 
"69": {kind: 1, offset: 69, typ: NTI202995, name: "try", len: 0, sons: null}, 
"70": {kind: 1, offset: 70, typ: NTI202995, name: "assert", len: 0, sons: null}, 
"71": {kind: 1, offset: 71, typ: NTI202995, name: "async", len: 0, sons: null}, 
"72": {kind: 1, offset: 72, typ: NTI202995, name: "yield", len: 0, sons: null}, 
"73": {kind: 1, offset: 73, typ: NTI202995, name: "or", len: 0, sons: null}, 
"74": {kind: 1, offset: 74, typ: NTI202995, name: "in", len: 0, sons: null}, 
"75": {kind: 1, offset: 75, typ: NTI202995, name: "None", len: 0, sons: null}, 
"76": {kind: 1, offset: 76, typ: NTI202995, name: "for", len: 0, sons: null}, 
"77": {kind: 1, offset: 77, typ: NTI202995, name: "raise", len: 0, sons: null}, 
"78": {kind: 1, offset: 78, typ: NTI202995, name: "nonlocal", len: 0, sons: null}, 
"79": {kind: 1, offset: 79, typ: NTI202995, name: "else", len: 0, sons: null}, 
"80": {kind: 1, offset: 80, typ: NTI202995, name: "continue", len: 0, sons: null}, 
"81": {kind: 1, offset: 81, typ: NTI202995, name: "class", len: 0, sons: null}, 
"82": {kind: 1, offset: 82, typ: NTI202995, name: "except", len: 0, sons: null}, 
"83": {kind: 1, offset: 83, typ: NTI202995, name: "elif", len: 0, sons: null}, 
"84": {kind: 1, offset: 84, typ: NTI202995, name: "global", len: 0, sons: null}, 
"85": {kind: 1, offset: 85, typ: NTI202995, name: "return", len: 0, sons: null}, 
"86": {kind: 1, offset: 86, typ: NTI202995, name: "import", len: 0, sons: null}, 
"87": {kind: 1, offset: 87, typ: NTI202995, name: "while", len: 0, sons: null}, 
"88": {kind: 1, offset: 88, typ: NTI202995, name: "as", len: 0, sons: null}, 
"89": {kind: 1, offset: 89, typ: NTI202995, name: "await", len: 0, sons: null}, 
"90": {kind: 1, offset: 90, typ: NTI202995, name: "boundary", len: 0, sons: null}, 
"91": {kind: 1, offset: 91, typ: NTI202995, name: "single_input", len: 0, sons: null}, 
"92": {kind: 1, offset: 92, typ: NTI202995, name: "file_input", len: 0, sons: null}, 
"93": {kind: 1, offset: 93, typ: NTI202995, name: "eval_input", len: 0, sons: null}, 
"94": {kind: 1, offset: 94, typ: NTI202995, name: "decorator", len: 0, sons: null}, 
"95": {kind: 1, offset: 95, typ: NTI202995, name: "decorators", len: 0, sons: null}, 
"96": {kind: 1, offset: 96, typ: NTI202995, name: "decorated", len: 0, sons: null}, 
"97": {kind: 1, offset: 97, typ: NTI202995, name: "async_funcdef", len: 0, sons: null}, 
"98": {kind: 1, offset: 98, typ: NTI202995, name: "funcdef", len: 0, sons: null}, 
"99": {kind: 1, offset: 99, typ: NTI202995, name: "parameters", len: 0, sons: null}, 
"100": {kind: 1, offset: 100, typ: NTI202995, name: "typedargslist", len: 0, sons: null}, 
"101": {kind: 1, offset: 101, typ: NTI202995, name: "tfpdef", len: 0, sons: null}, 
"102": {kind: 1, offset: 102, typ: NTI202995, name: "varargslist", len: 0, sons: null}, 
"103": {kind: 1, offset: 103, typ: NTI202995, name: "vfpdef", len: 0, sons: null}, 
"104": {kind: 1, offset: 104, typ: NTI202995, name: "stmt", len: 0, sons: null}, 
"105": {kind: 1, offset: 105, typ: NTI202995, name: "simple_stmt", len: 0, sons: null}, 
"106": {kind: 1, offset: 106, typ: NTI202995, name: "small_stmt", len: 0, sons: null}, 
"107": {kind: 1, offset: 107, typ: NTI202995, name: "expr_stmt", len: 0, sons: null}, 
"108": {kind: 1, offset: 108, typ: NTI202995, name: "annassign", len: 0, sons: null}, 
"109": {kind: 1, offset: 109, typ: NTI202995, name: "testlist_star_expr", len: 0, sons: null}, 
"110": {kind: 1, offset: 110, typ: NTI202995, name: "augassign", len: 0, sons: null}, 
"111": {kind: 1, offset: 111, typ: NTI202995, name: "del_stmt", len: 0, sons: null}, 
"112": {kind: 1, offset: 112, typ: NTI202995, name: "pass_stmt", len: 0, sons: null}, 
"113": {kind: 1, offset: 113, typ: NTI202995, name: "flow_stmt", len: 0, sons: null}, 
"114": {kind: 1, offset: 114, typ: NTI202995, name: "break_stmt", len: 0, sons: null}, 
"115": {kind: 1, offset: 115, typ: NTI202995, name: "continue_stmt", len: 0, sons: null}, 
"116": {kind: 1, offset: 116, typ: NTI202995, name: "return_stmt", len: 0, sons: null}, 
"117": {kind: 1, offset: 117, typ: NTI202995, name: "yield_stmt", len: 0, sons: null}, 
"118": {kind: 1, offset: 118, typ: NTI202995, name: "raise_stmt", len: 0, sons: null}, 
"119": {kind: 1, offset: 119, typ: NTI202995, name: "import_stmt", len: 0, sons: null}, 
"120": {kind: 1, offset: 120, typ: NTI202995, name: "import_name", len: 0, sons: null}, 
"121": {kind: 1, offset: 121, typ: NTI202995, name: "import_from", len: 0, sons: null}, 
"122": {kind: 1, offset: 122, typ: NTI202995, name: "import_as_name", len: 0, sons: null}, 
"123": {kind: 1, offset: 123, typ: NTI202995, name: "dotted_as_name", len: 0, sons: null}, 
"124": {kind: 1, offset: 124, typ: NTI202995, name: "import_as_names", len: 0, sons: null}, 
"125": {kind: 1, offset: 125, typ: NTI202995, name: "dotted_as_names", len: 0, sons: null}, 
"126": {kind: 1, offset: 126, typ: NTI202995, name: "dotted_name", len: 0, sons: null}, 
"127": {kind: 1, offset: 127, typ: NTI202995, name: "global_stmt", len: 0, sons: null}, 
"128": {kind: 1, offset: 128, typ: NTI202995, name: "nonlocal_stmt", len: 0, sons: null}, 
"129": {kind: 1, offset: 129, typ: NTI202995, name: "assert_stmt", len: 0, sons: null}, 
"130": {kind: 1, offset: 130, typ: NTI202995, name: "compound_stmt", len: 0, sons: null}, 
"131": {kind: 1, offset: 131, typ: NTI202995, name: "async_stmt", len: 0, sons: null}, 
"132": {kind: 1, offset: 132, typ: NTI202995, name: "if_stmt", len: 0, sons: null}, 
"133": {kind: 1, offset: 133, typ: NTI202995, name: "while_stmt", len: 0, sons: null}, 
"134": {kind: 1, offset: 134, typ: NTI202995, name: "for_stmt", len: 0, sons: null}, 
"135": {kind: 1, offset: 135, typ: NTI202995, name: "try_stmt", len: 0, sons: null}, 
"136": {kind: 1, offset: 136, typ: NTI202995, name: "with_stmt", len: 0, sons: null}, 
"137": {kind: 1, offset: 137, typ: NTI202995, name: "with_item", len: 0, sons: null}, 
"138": {kind: 1, offset: 138, typ: NTI202995, name: "except_clause", len: 0, sons: null}, 
"139": {kind: 1, offset: 139, typ: NTI202995, name: "suite", len: 0, sons: null}, 
"140": {kind: 1, offset: 140, typ: NTI202995, name: "test", len: 0, sons: null}, 
"141": {kind: 1, offset: 141, typ: NTI202995, name: "test_nocond", len: 0, sons: null}, 
"142": {kind: 1, offset: 142, typ: NTI202995, name: "lambdef", len: 0, sons: null}, 
"143": {kind: 1, offset: 143, typ: NTI202995, name: "lambdef_nocond", len: 0, sons: null}, 
"144": {kind: 1, offset: 144, typ: NTI202995, name: "or_test", len: 0, sons: null}, 
"145": {kind: 1, offset: 145, typ: NTI202995, name: "and_test", len: 0, sons: null}, 
"146": {kind: 1, offset: 146, typ: NTI202995, name: "not_test", len: 0, sons: null}, 
"147": {kind: 1, offset: 147, typ: NTI202995, name: "comparison", len: 0, sons: null}, 
"148": {kind: 1, offset: 148, typ: NTI202995, name: "comp_op", len: 0, sons: null}, 
"149": {kind: 1, offset: 149, typ: NTI202995, name: "star_expr", len: 0, sons: null}, 
"150": {kind: 1, offset: 150, typ: NTI202995, name: "expr", len: 0, sons: null}, 
"151": {kind: 1, offset: 151, typ: NTI202995, name: "xor_expr", len: 0, sons: null}, 
"152": {kind: 1, offset: 152, typ: NTI202995, name: "and_expr", len: 0, sons: null}, 
"153": {kind: 1, offset: 153, typ: NTI202995, name: "shift_expr", len: 0, sons: null}, 
"154": {kind: 1, offset: 154, typ: NTI202995, name: "arith_expr", len: 0, sons: null}, 
"155": {kind: 1, offset: 155, typ: NTI202995, name: "term", len: 0, sons: null}, 
"156": {kind: 1, offset: 156, typ: NTI202995, name: "factor", len: 0, sons: null}, 
"157": {kind: 1, offset: 157, typ: NTI202995, name: "power", len: 0, sons: null}, 
"158": {kind: 1, offset: 158, typ: NTI202995, name: "atom_expr", len: 0, sons: null}, 
"159": {kind: 1, offset: 159, typ: NTI202995, name: "atom", len: 0, sons: null}, 
"160": {kind: 1, offset: 160, typ: NTI202995, name: "testlist_comp", len: 0, sons: null}, 
"161": {kind: 1, offset: 161, typ: NTI202995, name: "trailer", len: 0, sons: null}, 
"162": {kind: 1, offset: 162, typ: NTI202995, name: "subscriptlist", len: 0, sons: null}, 
"163": {kind: 1, offset: 163, typ: NTI202995, name: "subscript", len: 0, sons: null}, 
"164": {kind: 1, offset: 164, typ: NTI202995, name: "sliceop", len: 0, sons: null}, 
"165": {kind: 1, offset: 165, typ: NTI202995, name: "exprlist", len: 0, sons: null}, 
"166": {kind: 1, offset: 166, typ: NTI202995, name: "testlist", len: 0, sons: null}, 
"167": {kind: 1, offset: 167, typ: NTI202995, name: "dictorsetmaker", len: 0, sons: null}, 
"168": {kind: 1, offset: 168, typ: NTI202995, name: "classdef", len: 0, sons: null}, 
"169": {kind: 1, offset: 169, typ: NTI202995, name: "arglist", len: 0, sons: null}, 
"170": {kind: 1, offset: 170, typ: NTI202995, name: "argument", len: 0, sons: null}, 
"171": {kind: 1, offset: 171, typ: NTI202995, name: "comp_iter", len: 0, sons: null}, 
"172": {kind: 1, offset: 172, typ: NTI202995, name: "sync_comp_for", len: 0, sons: null}, 
"173": {kind: 1, offset: 173, typ: NTI202995, name: "comp_for", len: 0, sons: null}, 
"174": {kind: 1, offset: 174, typ: NTI202995, name: "comp_if", len: 0, sons: null}, 
"175": {kind: 1, offset: 175, typ: NTI202995, name: "encoding_decl", len: 0, sons: null}, 
"176": {kind: 1, offset: 176, typ: NTI202995, name: "yield_expr", len: 0, sons: null}, 
"177": {kind: 1, offset: 177, typ: NTI202995, name: "yield_arg", len: 0, sons: null}}};
NTI202995.node = NNI202995;
var NNI203987 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI202995, name: "Field2", sons: null}]};
NTI203987.node = NNI203987;
NTI203984.base = NTI203987;
var NNI203981 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI203984, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI203981.node = NNI203981;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
NTI133824.base = NTI138;
var NNI3854 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3854.node = NNI3854;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
NTI3852.base = NTI3828;
NTI3854.base = NTI3852;
var NNI212015 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI212015, name: "None", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI212015, name: "Star", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI212015, name: "Plus", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI212015, name: "Query", len: 0, sons: null}}};
NTI212015.node = NNI212015;
NTI212058.base = NTI212017;
var NNI212024 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI104, name: "id", sons: null}, 
{kind: 1, offset: "father", len: 0, typ: NTI212017, name: "father", sons: null}, 
{kind: 1, offset: "repeat", len: 0, typ: NTI212015, name: "repeat", sons: null}, 
{kind: 1, offset: "epsilonSet", len: 0, typ: NTI212034, name: "epsilonSet", sons: null}, 
{kind: 3, offset: "kind", len: 256, typ: NTI136, name: "kind", sons: [[setConstr(97, 115), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "token", len: 0, typ: NTI202995, name: "token", sons: null}, 
{kind: 1, offset: "nextSet", len: 0, typ: NTI212034, name: "nextSet", sons: null}]}], 
[setConstr([65, 72]), {kind: 1, offset: "children", len: 0, typ: NTI212058, name: "children", sons: null}], 
[setConstr(256), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}]};
NTI212024.node = NNI212024;
NTI212017.base = NTI212024;
var NNI212040 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI212017, name: "Field1", sons: null}]};
NTI212040.node = NNI212040;
NTI212037.base = NTI212040;
var NNI212034 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI212037, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI212034.node = NNI212034;
NTI250866.base = NTI212017;
NTI220231.base = NTI212017;
var NNI220227 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI220231, name: "data", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI104, name: "head", sons: null}, 
{kind: 1, offset: "tail", len: 0, typ: NTI104, name: "tail", sons: null}, 
{kind: 1, offset: "count", len: 0, typ: NTI104, name: "count", sons: null}, 
{kind: 1, offset: "mask", len: 0, typ: NTI104, name: "mask", sons: null}]};
NTI220227.node = NNI220227;
NTI178028.base = NTI138;
NTI241189.base = NTI138;
var NNI195498 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}]};
NTI195498.node = NNI195498;
NTI195495.base = NTI195498;
var NNI195492 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI195495, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI195492.node = NNI195492;
NTI249258.base = NTI138;
NTI257479.base = NTI202995;
var NNI281226 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"0": {kind: 1, offset: 0, typ: NTI281226, name: "flagCaseInsensitive", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI281226, name: "flagNotCaseInsensitive", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI281226, name: "flagMultiLine", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI281226, name: "flagNotMultiLine", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI281226, name: "flagAnyMatchNewLine", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI281226, name: "flagNotAnyMatchNewLine", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI281226, name: "flagUnGreedy", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI281226, name: "flagNotUnGreedy", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI281226, name: "flagUnicode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI281226, name: "flagNotUnicode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI281226, name: "flagVerbose", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI281226, name: "flagNotVerbose", len: 0, sons: null}}};
NTI281226.node = NNI281226;
NTI281297.base = NTI281226;
var NNI281313 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI41402, name: "Field1", sons: null}]};
NTI281313.node = NNI281313;
NTI281310.base = NTI281313;
var NNI281333 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI41402, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI41402, name: "b", sons: null}]};
NTI281333.node = NNI281333;
NTI281324.base = NTI281333;
var NNI281228 = {kind: 2, offset: 0, typ: null, name: null, len: 46, sons: {"0": {kind: 1, offset: 0, typ: NTI281228, name: "reChar", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI281228, name: "reCharCI", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI281228, name: "reJoiner", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI281228, name: "reGroupStart", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI281228, name: "reGroupEnd", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI281228, name: "reOr", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI281228, name: "reZeroOrMore", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI281228, name: "reOneOrMore", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI281228, name: "reZeroOrOne", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI281228, name: "reRepRange", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI281228, name: "reStartSym", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI281228, name: "reEndSym", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI281228, name: "reStartSymML", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI281228, name: "reEndSymML", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI281228, name: "reStart", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI281228, name: "reEnd", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI281228, name: "reWordBoundary", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI281228, name: "reNotWordBoundary", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI281228, name: "reAlphaNum", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI281228, name: "reDigit", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI281228, name: "reWhiteSpace", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI281228, name: "reUCC", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI281228, name: "reNotAlphaNum", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI281228, name: "reNotDigit", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI281228, name: "reNotWhiteSpace", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI281228, name: "reNotUCC", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI281228, name: "reAny", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI281228, name: "reAnyNL", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI281228, name: "reWordBoundaryAscii", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI281228, name: "reNotWordBoundaryAscii", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI281228, name: "reAlphaNumAscii", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI281228, name: "reDigitAscii", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI281228, name: "reWhiteSpaceAscii", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI281228, name: "reNotAlphaNumAscii", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI281228, name: "reNotDigitAscii", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI281228, name: "reNotWhiteSpaceAscii", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI281228, name: "reAnyAscii", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI281228, name: "reAnyNLAscii", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI281228, name: "reSet", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI281228, name: "reNotSet", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI281228, name: "reLookahead", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI281228, name: "reLookbehind", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI281228, name: "reNotLookahead", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI281228, name: "reNotLookbehind", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI281228, name: "reSkip", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI281228, name: "reEOE", len: 0, sons: null}}};
NTI281228.node = NNI281228;
var NNI281307 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI281310, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI281307.node = NNI281307;
var NNI281230 = {kind: 2, len: 15, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI281228, name: "kind", sons: null}, 
{kind: 1, offset: "cp", len: 0, typ: NTI41402, name: "cp", sons: null}, 
{kind: 1, offset: "outA", len: 0, typ: NTI108, name: "outA", sons: null}, 
{kind: 1, offset: "outB", len: 0, typ: NTI108, name: "outB", sons: null}, 
{kind: 1, offset: "isGreedy", len: 0, typ: NTI130, name: "isGreedy", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI108, name: "idx", sons: null}, 
{kind: 1, offset: "isCapturing", len: 0, typ: NTI130, name: "isCapturing", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "flags", len: 0, typ: NTI281297, name: "flags", sons: null}, 
{kind: 1, offset: "min", len: 0, typ: NTI108, name: "min", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI108, name: "max", sons: null}, 
{kind: 1, offset: "cps", len: 0, typ: NTI281307, name: "cps", sons: null}, 
{kind: 1, offset: "ranges", len: 0, typ: NTI281324, name: "ranges", sons: null}, 
{kind: 1, offset: "shorthands", len: 0, typ: NTI281339, name: "shorthands", sons: null}, 
{kind: 1, offset: "cc", len: 0, typ: NTI110, name: "cc", sons: null}]};
NTI281230.node = NNI281230;
NTI281339.base = NTI281230;
NTI320469.base = NTI281230;
var NNI301992 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI108, name: "Field2", sons: null}]};
NTI301992.node = NNI301992;
NTI301989.base = NTI301992;
var NNI301986 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI301989, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI301986.node = NNI301986;
var NNI320460 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "states", len: 0, typ: NTI320469, name: "states", sons: null}, 
{kind: 1, offset: "groupsCount", len: 0, typ: NTI108, name: "groupsCount", sons: null}, 
{kind: 1, offset: "namedGroups", len: 0, typ: NTI301986, name: "namedGroups", sons: null}]};
NTI320460.node = NNI320460;
var NNI353098 = {kind: 1, offset: "b", len: 0, typ: NTI130, name: "b", sons: null};
NTI353098.node = NNI353098;
NTI353098.base = NTI157273;
var NNI355070 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI355070.node = NNI355070;
NTI355070.base = NTI157273;
var NNI357160 = {kind: 2, offset: 0, typ: null, name: null, len: 16, sons: {"0": {kind: 1, offset: 0, typ: NTI357160, name: "Base", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI357160, name: "Name", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI357160, name: "NotImplemented", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI357160, name: "Type", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI357160, name: "Attribute", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI357160, name: "Value", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI357160, name: "Index", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI357160, name: "StopIter", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI357160, name: "Lock", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI357160, name: "Import", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI357160, name: "UnboundLocal", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI357160, name: "Key", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI357160, name: "Assertion", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI357160, name: "ZeroDivision", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI357160, name: "Runtime", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI357160, name: "Syntax", len: 0, sons: null}}};
NTI357160.node = NNI357160;
NTI357243.base = NTI357244;
var NNI357178 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157214, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157214, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI357178.node = NNI357178;
NTI357249.base = NTI357178;
var NNI357244 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tk", len: 0, typ: NTI357160, name: "tk", sons: null}, 
{kind: 1, offset: "thrown", len: 0, typ: NTI130, name: "thrown", sons: null}, 
{kind: 1, offset: "msg", len: 0, typ: NTI157214, name: "msg", sons: null}, 
{kind: 1, offset: "context", len: 0, typ: NTI357243, name: "context", sons: null}, 
{kind: 1, offset: "traceBacks", len: 0, typ: NTI357249, name: "traceBacks", sons: null}]};
NTI357244.node = NNI357244;
NTI357244.base = NTI157273;
var NNI358415 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI358415.node = NNI358415;
NTI358415.base = NTI357244;
var NNI359501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI359501.node = NNI359501;
NTI359501.base = NTI357244;
var NNI360501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI360501.node = NNI360501;
NTI360501.base = NTI357244;
var NNI361501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI361501.node = NNI361501;
NTI361501.base = NTI357244;
var NNI362501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI362501.node = NNI362501;
NTI362501.base = NTI357244;
var NNI363501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI363501.node = NNI363501;
NTI363501.base = NTI357244;
var NNI364501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI364501.node = NNI364501;
NTI364501.base = NTI357244;
var NNI365501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI365501.node = NNI365501;
NTI365501.base = NTI357244;
var NNI366501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI366501.node = NNI366501;
NTI366501.base = NTI357244;
var NNI367501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI367501.node = NNI367501;
NTI367501.base = NTI357244;
var NNI368501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI368501.node = NNI368501;
NTI368501.base = NTI357244;
var NNI369501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI369501.node = NNI369501;
NTI369501.base = NTI357244;
var NNI370501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI370501.node = NNI370501;
NTI370501.base = NTI357244;
var NNI371501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI371501.node = NNI371501;
NTI371501.base = NTI357244;
var NNI372501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI372501.node = NNI372501;
NTI372501.base = NTI357244;
var NNI374242 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"-1": {kind: 1, offset: -1, typ: NTI374242, name: "Negative", len: 0, sons: null}, 
"0": {kind: 1, offset: 0, typ: NTI374242, name: "Zero", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI374242, name: "Positive", len: 0, sons: null}}};
NTI374242.node = NNI374242;
NTI374305.base = NTI374054;
var NNI374303 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "sign", len: 0, typ: NTI374242, name: "sign", sons: null}, 
{kind: 1, offset: "digits", len: 0, typ: NTI374305, name: "digits", sons: null}]};
NTI374303.node = NNI374303;
NTI374303.base = NTI157273;
var NNI378718 = {kind: 1, offset: "v", len: 0, typ: NTI124, name: "v", sons: null};
NTI378718.node = NNI378718;
NTI378718.base = NTI157273;
var NNI156081 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156081.node = NNI156081;
NTI156081.base = NTI3826;
NTI376353.base = NTI374054;
NTI374302.base = NTI374303;
var NNI377247 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI374302, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI374302, name: "Field1", sons: null}]};
NTI377247.node = NNI377247;
NTI375280.base = NTI374054;
var NNI156087 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156087.node = NNI156087;
NTI156087.base = NTI3826;
var NNI3866 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3866.node = NNI3866;
NTI3866.base = NTI3828;
NTI134017.base = NTI138;
NTI465191.base = NTI157214;
var NNI465190 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI465191, name: "items", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI104, name: "idx", sons: null}]};
NTI465190.node = NNI465190;
NTI465190.base = NTI157273;
var NNI467097 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI157214, name: "start", sons: null}, 
{kind: 1, offset: "stop", len: 0, typ: NTI157214, name: "stop", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI157214, name: "step", sons: null}]};
NTI467097.node = NNI467097;
NTI467097.base = NTI157273;
NTI469071.base = NTI157214;
var NNI469070 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI469071, name: "items", sons: null}, 
{kind: 1, offset: "reprLock", len: 0, typ: NTI130, name: "reprLock", sons: null}]};
NTI469070.node = NNI469070;
NTI469070.base = NTI157273;
NTI466650.base = NTI157214;
NTI470059.base = NTI157214;
var NNI464016 = {kind: 2, offset: 0, typ: null, name: null, len: 123, sons: {"0": {kind: 1, offset: 0, typ: NTI464016, name: "NULLCODE", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI464016, name: "POP_TOP", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI464016, name: "ROT_TWO", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI464016, name: "ROT_THREE", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI464016, name: "DUP_TOP", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI464016, name: "DUP_TOP_TWO", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI464016, name: "ROT_FOUR", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI464016, name: "NOP", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI464016, name: "UNARY_POSITIVE", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI464016, name: "UNARY_NEGATIVE", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI464016, name: "UNARY_NOT", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI464016, name: "UNARY_INVERT", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI464016, name: "BINARY_MATRIX_MULTIPLY", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI464016, name: "INPLACE_MATRIX_MULTIPLY", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI464016, name: "BINARY_POWER", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI464016, name: "BINARY_MULTIPLY", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI464016, name: "BINARY_MODULO", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI464016, name: "BINARY_ADD", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI464016, name: "BINARY_SUBTRACT", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI464016, name: "BINARY_SUBSCR", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI464016, name: "BINARY_FLOOR_DIVIDE", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI464016, name: "BINARY_TRUE_DIVIDE", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI464016, name: "INPLACE_FLOOR_DIVIDE", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI464016, name: "INPLACE_TRUE_DIVIDE", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI464016, name: "GET_AITER", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI464016, name: "GET_ANEXT", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI464016, name: "BEFORE_ASYNC_WITH", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI464016, name: "BEGIN_FINALLY", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI464016, name: "END_ASYNC_FOR", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI464016, name: "INPLACE_ADD", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI464016, name: "INPLACE_SUBTRACT", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI464016, name: "INPLACE_MULTIPLY", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI464016, name: "INPLACE_MODULO", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI464016, name: "STORE_SUBSCR", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI464016, name: "DELETE_SUBSCR", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI464016, name: "BINARY_LSHIFT", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI464016, name: "BINARY_RSHIFT", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI464016, name: "BINARY_AND", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI464016, name: "BINARY_XOR", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI464016, name: "BINARY_OR", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI464016, name: "INPLACE_POWER", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI464016, name: "GET_ITER", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI464016, name: "GET_YIELD_FROM_ITER", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI464016, name: "PRINT_EXPR", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI464016, name: "LOAD_BUILD_CLASS", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI464016, name: "YIELD_FROM", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI464016, name: "GET_AWAITABLE", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI464016, name: "INPLACE_LSHIFT", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI464016, name: "INPLACE_RSHIFT", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI464016, name: "INPLACE_AND", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI464016, name: "INPLACE_XOR", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI464016, name: "INPLACE_OR", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI464016, name: "WITH_CLEANUP_START", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI464016, name: "WITH_CLEANUP_FINISH", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI464016, name: "RETURN_VALUE", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI464016, name: "IMPORT_STAR", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI464016, name: "SETUP_ANNOTATIONS", len: 0, sons: null}, 
"57": {kind: 1, offset: 57, typ: NTI464016, name: "YIELD_VALUE", len: 0, sons: null}, 
"58": {kind: 1, offset: 58, typ: NTI464016, name: "POP_BLOCK", len: 0, sons: null}, 
"59": {kind: 1, offset: 59, typ: NTI464016, name: "END_FINALLY", len: 0, sons: null}, 
"60": {kind: 1, offset: 60, typ: NTI464016, name: "POP_EXCEPT", len: 0, sons: null}, 
"61": {kind: 1, offset: 61, typ: NTI464016, name: "HAVE_ARGUMENT", len: 0, sons: null}, 
"62": {kind: 1, offset: 62, typ: NTI464016, name: "STORE_NAME", len: 0, sons: null}, 
"63": {kind: 1, offset: 63, typ: NTI464016, name: "DELETE_NAME", len: 0, sons: null}, 
"64": {kind: 1, offset: 64, typ: NTI464016, name: "UNPACK_SEQUENCE", len: 0, sons: null}, 
"65": {kind: 1, offset: 65, typ: NTI464016, name: "FOR_ITER", len: 0, sons: null}, 
"66": {kind: 1, offset: 66, typ: NTI464016, name: "UNPACK_EX", len: 0, sons: null}, 
"67": {kind: 1, offset: 67, typ: NTI464016, name: "STORE_ATTR", len: 0, sons: null}, 
"68": {kind: 1, offset: 68, typ: NTI464016, name: "DELETE_ATTR", len: 0, sons: null}, 
"69": {kind: 1, offset: 69, typ: NTI464016, name: "STORE_GLOBAL", len: 0, sons: null}, 
"70": {kind: 1, offset: 70, typ: NTI464016, name: "DELETE_GLOBAL", len: 0, sons: null}, 
"71": {kind: 1, offset: 71, typ: NTI464016, name: "LOAD_CONST", len: 0, sons: null}, 
"72": {kind: 1, offset: 72, typ: NTI464016, name: "LOAD_NAME", len: 0, sons: null}, 
"73": {kind: 1, offset: 73, typ: NTI464016, name: "BUILD_TUPLE", len: 0, sons: null}, 
"74": {kind: 1, offset: 74, typ: NTI464016, name: "BUILD_LIST", len: 0, sons: null}, 
"75": {kind: 1, offset: 75, typ: NTI464016, name: "BUILD_SET", len: 0, sons: null}, 
"76": {kind: 1, offset: 76, typ: NTI464016, name: "BUILD_MAP", len: 0, sons: null}, 
"77": {kind: 1, offset: 77, typ: NTI464016, name: "LOAD_ATTR", len: 0, sons: null}, 
"78": {kind: 1, offset: 78, typ: NTI464016, name: "COMPARE_OP", len: 0, sons: null}, 
"79": {kind: 1, offset: 79, typ: NTI464016, name: "IMPORT_NAME", len: 0, sons: null}, 
"80": {kind: 1, offset: 80, typ: NTI464016, name: "IMPORT_FROM", len: 0, sons: null}, 
"81": {kind: 1, offset: 81, typ: NTI464016, name: "JUMP_FORWARD", len: 0, sons: null}, 
"82": {kind: 1, offset: 82, typ: NTI464016, name: "JUMP_IF_FALSE_OR_POP", len: 0, sons: null}, 
"83": {kind: 1, offset: 83, typ: NTI464016, name: "JUMP_IF_TRUE_OR_POP", len: 0, sons: null}, 
"84": {kind: 1, offset: 84, typ: NTI464016, name: "JUMP_ABSOLUTE", len: 0, sons: null}, 
"85": {kind: 1, offset: 85, typ: NTI464016, name: "POP_JUMP_IF_FALSE", len: 0, sons: null}, 
"86": {kind: 1, offset: 86, typ: NTI464016, name: "POP_JUMP_IF_TRUE", len: 0, sons: null}, 
"87": {kind: 1, offset: 87, typ: NTI464016, name: "LOAD_GLOBAL", len: 0, sons: null}, 
"88": {kind: 1, offset: 88, typ: NTI464016, name: "SETUP_FINALLY", len: 0, sons: null}, 
"89": {kind: 1, offset: 89, typ: NTI464016, name: "LOAD_FAST", len: 0, sons: null}, 
"90": {kind: 1, offset: 90, typ: NTI464016, name: "STORE_FAST", len: 0, sons: null}, 
"91": {kind: 1, offset: 91, typ: NTI464016, name: "DELETE_FAST", len: 0, sons: null}, 
"92": {kind: 1, offset: 92, typ: NTI464016, name: "RAISE_VARARGS", len: 0, sons: null}, 
"93": {kind: 1, offset: 93, typ: NTI464016, name: "CALL_FUNCTION", len: 0, sons: null}, 
"94": {kind: 1, offset: 94, typ: NTI464016, name: "MAKE_FUNCTION", len: 0, sons: null}, 
"95": {kind: 1, offset: 95, typ: NTI464016, name: "BUILD_SLICE", len: 0, sons: null}, 
"96": {kind: 1, offset: 96, typ: NTI464016, name: "LOAD_CLOSURE", len: 0, sons: null}, 
"97": {kind: 1, offset: 97, typ: NTI464016, name: "LOAD_DEREF", len: 0, sons: null}, 
"98": {kind: 1, offset: 98, typ: NTI464016, name: "STORE_DEREF", len: 0, sons: null}, 
"99": {kind: 1, offset: 99, typ: NTI464016, name: "DELETE_DEREF", len: 0, sons: null}, 
"100": {kind: 1, offset: 100, typ: NTI464016, name: "CALL_FUNCTION_KW", len: 0, sons: null}, 
"101": {kind: 1, offset: 101, typ: NTI464016, name: "CALL_FUNCTION_EX", len: 0, sons: null}, 
"102": {kind: 1, offset: 102, typ: NTI464016, name: "SETUP_WITH", len: 0, sons: null}, 
"103": {kind: 1, offset: 103, typ: NTI464016, name: "EXTENDED_ARG", len: 0, sons: null}, 
"104": {kind: 1, offset: 104, typ: NTI464016, name: "LIST_APPEND", len: 0, sons: null}, 
"105": {kind: 1, offset: 105, typ: NTI464016, name: "SET_ADD", len: 0, sons: null}, 
"106": {kind: 1, offset: 106, typ: NTI464016, name: "MAP_ADD", len: 0, sons: null}, 
"107": {kind: 1, offset: 107, typ: NTI464016, name: "LOAD_CLASSDEREF", len: 0, sons: null}, 
"108": {kind: 1, offset: 108, typ: NTI464016, name: "BUILD_LIST_UNPACK", len: 0, sons: null}, 
"109": {kind: 1, offset: 109, typ: NTI464016, name: "BUILD_MAP_UNPACK", len: 0, sons: null}, 
"110": {kind: 1, offset: 110, typ: NTI464016, name: "BUILD_MAP_UNPACK_WITH_CALL", len: 0, sons: null}, 
"111": {kind: 1, offset: 111, typ: NTI464016, name: "BUILD_TUPLE_UNPACK", len: 0, sons: null}, 
"112": {kind: 1, offset: 112, typ: NTI464016, name: "BUILD_SET_UNPACK", len: 0, sons: null}, 
"113": {kind: 1, offset: 113, typ: NTI464016, name: "SETUP_ASYNC_WITH", len: 0, sons: null}, 
"114": {kind: 1, offset: 114, typ: NTI464016, name: "FORMAT_VALUE", len: 0, sons: null}, 
"115": {kind: 1, offset: 115, typ: NTI464016, name: "BUILD_CONST_KEY_MAP", len: 0, sons: null}, 
"116": {kind: 1, offset: 116, typ: NTI464016, name: "BUILD_STRING", len: 0, sons: null}, 
"117": {kind: 1, offset: 117, typ: NTI464016, name: "BUILD_TUPLE_UNPACK_WITH_CALL", len: 0, sons: null}, 
"118": {kind: 1, offset: 118, typ: NTI464016, name: "LOAD_METHOD", len: 0, sons: null}, 
"119": {kind: 1, offset: 119, typ: NTI464016, name: "CALL_METHOD", len: 0, sons: null}, 
"120": {kind: 1, offset: 120, typ: NTI464016, name: "CALL_FINALLY", len: 0, sons: null}, 
"121": {kind: 1, offset: 121, typ: NTI464016, name: "POP_FINALLY", len: 0, sons: null}, 
"122": {kind: 1, offset: 122, typ: NTI464016, name: "EXCEPT_HANDLER", len: 0, sons: null}}};
NTI464016.node = NNI464016;
var NNI492127 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI464016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI492068, name: "Field1", sons: null}]};
NTI492127.node = NNI492127;
NTI492126.base = NTI492127;
NTI492129.base = NTI464016;
NTI492131.base = NTI492068;
NTI492133.base = NTI104;
NTI492135.base = NTI157214;
NTI175083.base = NTI175084;
NTI492137.base = NTI175083;
NTI492139.base = NTI175083;
NTI492141.base = NTI175083;
NTI492143.base = NTI175083;
NTI492145.base = NTI175083;
var NNI432133 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI432133, name: "Local", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI432133, name: "Cell", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI432133, name: "Free", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI432133, name: "Global", len: 0, sons: null}}};
NTI432133.node = NNI432133;
var NNI492148 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI432133, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI492148.node = NNI492148;
NTI492147.base = NTI492148;
var NNI492125 = {kind: 2, len: 13, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "code", len: 0, typ: NTI492126, name: "code", sons: null}, 
{kind: 1, offset: "opCodes", len: 0, typ: NTI492129, name: "opCodes", sons: null}, 
{kind: 1, offset: "opArgs", len: 0, typ: NTI492131, name: "opArgs", sons: null}, 
{kind: 1, offset: "lineNos", len: 0, typ: NTI492133, name: "lineNos", sons: null}, 
{kind: 1, offset: "constants", len: 0, typ: NTI492135, name: "constants", sons: null}, 
{kind: 1, offset: "names", len: 0, typ: NTI492137, name: "names", sons: null}, 
{kind: 1, offset: "localVars", len: 0, typ: NTI492139, name: "localVars", sons: null}, 
{kind: 1, offset: "cellVars", len: 0, typ: NTI492141, name: "cellVars", sons: null}, 
{kind: 1, offset: "freeVars", len: 0, typ: NTI492143, name: "freeVars", sons: null}, 
{kind: 1, offset: "argNames", len: 0, typ: NTI492145, name: "argNames", sons: null}, 
{kind: 1, offset: "argScopes", len: 0, typ: NTI492147, name: "argScopes", sons: null}, 
{kind: 1, offset: "codeName", len: 0, typ: NTI175083, name: "codeName", sons: null}, 
{kind: 1, offset: "fileName", len: 0, typ: NTI175083, name: "fileName", sons: null}]};
NTI492125.node = NNI492125;
NTI492125.base = NTI157273;
NTI510256.base = NTI157214;
var NNI510255 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI510256, name: "items", sons: null}, 
{kind: 1, offset: "reprLock", len: 0, typ: NTI130, name: "reprLock", sons: null}, 
{kind: 1, offset: "readNum", len: 0, typ: NTI104, name: "readNum", sons: null}, 
{kind: 1, offset: "writeLock", len: 0, typ: NTI130, name: "writeLock", sons: null}]};
NTI510255.node = NNI510255;
NTI510255.base = NTI157273;
var NNI526194 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157214, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157214, name: "Field2", sons: null}]};
NTI526194.node = NNI526194;
NTI526191.base = NTI526194;
var NNI526188 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI526191, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI526188.node = NNI526188;
var NNI526178 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "table", len: 0, typ: NTI526188, name: "table", sons: null}, 
{kind: 1, offset: "reprLock", len: 0, typ: NTI130, name: "reprLock", sons: null}, 
{kind: 1, offset: "readNum", len: 0, typ: NTI104, name: "readNum", sons: null}, 
{kind: 1, offset: "writeLock", len: 0, typ: NTI130, name: "writeLock", sons: null}]};
NTI526178.node = NNI526178;
NTI526178.base = NTI157273;
var NNI156085 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156085.node = NNI156085;
NTI156085.base = NTI3826;
var NNI540150 = {kind: 1, offset: "refObj", len: 0, typ: NTI157214, name: "refObj", sons: null};
NTI540150.node = NNI540150;
NTI540150.base = NTI157273;
NTI542082.base = NTI542083;
NTI492124.base = NTI492125;
NTI526177.base = NTI526178;
NTI542087.base = NTI157214;
NTI540149.base = NTI540150;
NTI542089.base = NTI540149;
var NNI542083 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "back", len: 0, typ: NTI542082, name: "back", sons: null}, 
{kind: 1, offset: "code", len: 0, typ: NTI492124, name: "code", sons: null}, 
{kind: 1, offset: "globals", len: 0, typ: NTI526177, name: "globals", sons: null}, 
{kind: 1, offset: "fastLocals", len: 0, typ: NTI542087, name: "fastLocals", sons: null}, 
{kind: 1, offset: "cellVars", len: 0, typ: NTI542089, name: "cellVars", sons: null}]};
NTI542083.node = NNI542083;
NTI542083.base = NTI157273;
NTI469069.base = NTI469070;
var NNI545123 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null}, 
{kind: 1, offset: "code", len: 0, typ: NTI492124, name: "code", sons: null}, 
{kind: 1, offset: "globals", len: 0, typ: NTI526177, name: "globals", sons: null}, 
{kind: 1, offset: "closure", len: 0, typ: NTI469069, name: "closure", sons: null}]};
NTI545123.node = NNI545123;
NTI545123.base = NTI157273;
NTI545122.base = NTI545123;
var NNI546100 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fun", len: 0, typ: NTI545122, name: "fun", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI157214, name: "self", sons: null}]};
NTI546100.node = NNI546100;
NTI546100.base = NTI157273;
var NNI547672 = {kind: 1, offset: "callable", len: 0, typ: NTI157214, name: "callable", sons: null};
NTI547672.node = NNI547672;
NTI547672.base = NTI157273;
var NNI550084 = {kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null};
NTI550084.node = NNI550084;
NTI550084.base = NTI157277;
var NNI552081 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI552081, name: "BltinFunc", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI552081, name: "UnaryMethod", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI552081, name: "BinaryMethod", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI552081, name: "TernaryMethod", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI552081, name: "BltinMethod", len: 0, sons: null}}};
NTI552081.node = NNI552081;
var NNI552143 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI157214, name: "self", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI552081, name: "kind", sons: null}, 
{kind: 1, offset: "fun", len: 0, typ: NTI104, name: "fun", sons: null}]};
NTI552143.node = NNI552143;
NTI552143.base = NTI157273;
var NNI595151 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI374302, name: "start", sons: null}, 
{kind: 1, offset: "ending", len: 0, typ: NTI374302, name: "ending", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI374302, name: "step", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI374302, name: "length", sons: null}]};
NTI595151.node = NNI595151;
NTI595151.base = NTI157273;
var NNI597677 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI374302, name: "start", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI374302, name: "step", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI374302, name: "length", sons: null}, 
{kind: 1, offset: "index", len: 0, typ: NTI374302, name: "index", sons: null}]};
NTI597677.node = NNI597677;
NTI597677.base = NTI157273;
NTI568859.base = NTI157214;
NTI592857.base = NTI540149;
var NNI556408 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI464016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI492068, name: "Field1", sons: null}]};
NTI556408.node = NNI556408;
NTI511275.base = NTI157214;
var NNI607083 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null}, 
{kind: 1, offset: "dType", len: 0, typ: NTI157218, name: "dType", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI552081, name: "kind", sons: null}, 
{kind: 1, offset: "meth", len: 0, typ: NTI104, name: "meth", sons: null}]};
NTI607083.node = NNI607083;
NTI607083.base = NTI157273;
var NNI609891 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "getter", len: 0, typ: NTI157346, name: "getter", sons: null}, 
{kind: 1, offset: "setter", len: 0, typ: NTI157349, name: "setter", sons: null}]};
NTI609891.node = NNI609891;
NTI609891.base = NTI157273;
var NNI611304 = {kind: 1, offset: "getter", len: 0, typ: NTI157214, name: "getter", sons: null};
NTI611304.node = NNI611304;
NTI611304.base = NTI157273;
var NNI614110 = {kind: 1, offset: "dict", len: 0, typ: NTI157214, name: "dict", sons: null};
NTI614110.node = NNI614110;
NTI614110.base = NTI157273;
NTI157559.base = NTI138;
var NNI633109 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI633109.node = NNI633109;
NTI633109.base = NTI157277;
var NNI156088 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fileName", len: 0, typ: NTI138, name: "fileName", sons: null}, 
{kind: 1, offset: "lineNo", len: 0, typ: NTI104, name: "lineNo", sons: null}, 
{kind: 1, offset: "colNo", len: 0, typ: NTI104, name: "colNo", sons: null}]};
NTI156088.node = NNI156088;
NTI156088.base = NTI3826;
NTI324446.base = NTI110;
var NNI324445 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI324446, name: "s", sons: null}, 
{kind: 1, offset: "key", len: 0, typ: NTI110, name: "key", sons: null}]};
NTI324445.node = NNI324445;
var NNI320468 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI108, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI320468.node = NNI320468;
NTI324650.base = NTI320468;
var NNI324646 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI324650, name: "s", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}]};
NTI324646.node = NNI324646;
var NNI324639 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "states", len: 0, typ: NTI324646, name: "states", sons: null}, 
{kind: 1, offset: "ids", len: 0, typ: NTI324445, name: "ids", sons: null}]};
NTI324639.node = NNI324639;
var NNI320464 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI320464, name: "captStart", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI320464, name: "captEnd", len: 0, sons: null}}};
NTI320464.node = NNI320464;
var NNI320466 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI320464, name: "kind", sons: null}, 
{kind: 1, offset: "prev", len: 0, typ: NTI104, name: "prev", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI108, name: "idx", sons: null}, 
{kind: 1, offset: "cpIdx", len: 0, typ: NTI104, name: "cpIdx", sons: null}]};
NTI320466.node = NNI320466;
NTI325988.base = NTI320466;
var NNI325984 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI325988, name: "s", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}]};
NTI325984.node = NNI325984;
var NNI329872 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI324445, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI324646, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI325984, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI324639, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI324639, name: "Field4", sons: null}]};
NTI329872.node = NNI329872;
NTI277054.base = NTI116;
NTI277235.base = NTI106;
NTI277238.base = NTI108;
NTI279086.base = NTI130;
NTI50537.base = NTI50646;
NTI50649.base = NTI51316;
NTI49744.base = NTI49850;
NTI49853.base = NTI50534;
NTI260204.base = NTI116;
NTI268071.base = NTI116;
NTI275250.base = NTI110;
NTI275249.base = NTI275250;
var NNI25907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI104, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI25907.node = NNI25907;
NTI326025.base = NTI25907;
var NNI208887 = {kind: 3, offset: "token", len: 178, typ: NTI202995, name: "token", sons: [[setConstr([0, 89]), {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineNo", len: 0, typ: NTI104, name: "lineNo", sons: null}, 
{kind: 1, offset: "colNo", len: 0, typ: NTI104, name: "colNo", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI138, name: "content", sons: null}]}], 
[setConstr(178), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]};
NTI208887.node = NNI208887;
NTI208886.base = NTI208887;
NTI337147.base = NTI208886;
NTI348051.base = NTI212017;
NTI350389.base = NTI212017;
NTI603410.base = NTI357178;
NTI603270.base = NTI357178;
NTI378362.base = NTI138;
var NNI177024 = {kind: 1, offset: "value", len: 0, typ: NTI104, name: "value", sons: null};
NTI177024.node = NNI177024;
var NNI177022 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI177022.node = NNI177022;
NTI177022.base = NTI3808;
NTI177024.base = NTI177022;
NTI177017.base = NTI177024;
var NNI178567 = {kind: 2, offset: 0, typ: null, name: null, len: 25, sons: {"0": {kind: 1, offset: 0, typ: NTI178567, name: "FunctionDef", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178567, name: "AsyncFunctionDef", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178567, name: "ClassDef", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178567, name: "Return", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178567, name: "Delete", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178567, name: "Assign", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178567, name: "AugAssign", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178567, name: "AnnAssign", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178567, name: "For", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178567, name: "AsyncFor", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI178567, name: "While", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI178567, name: "If", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI178567, name: "With", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI178567, name: "AsyncWith", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI178567, name: "Raise", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI178567, name: "Try", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI178567, name: "Assert", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI178567, name: "Import", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI178567, name: "ImportFrom", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI178567, name: "Global", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI178567, name: "Nonlocal", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI178567, name: "Expr", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI178567, name: "Pass", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI178567, name: "Break", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI178567, name: "Continue", len: 0, sons: null}}};
NTI178567.node = NNI178567;
var NNI178726 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178567, name: "kind", sons: null}]};
NTI178726.node = NNI178726;
NTI178726.base = NTI177022;
NTI178694.base = NTI178726;
NTI178838.base = NTI178694;
var NNI178837 = {kind: 1, offset: "body", len: 0, typ: NTI178838, name: "body", sons: null};
NTI178837.node = NNI178837;
var NNI178561 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI178561, name: "Module", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178561, name: "Interactive", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178561, name: "Expression", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178561, name: "Suite", len: 0, sons: null}}};
NTI178561.node = NNI178561;
var NNI178723 = {kind: 1, offset: "kind", len: 0, typ: NTI178561, name: "kind", sons: null};
NTI178723.node = NNI178723;
NTI178723.base = NTI177022;
NTI178837.base = NTI178723;
var NNI178653 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI178653, name: "Invert", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178653, name: "Not", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178653, name: "UAdd", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178653, name: "USub", len: 0, sons: null}}};
NTI178653.node = NNI178653;
var NNI178748 = {kind: 1, offset: "kind", len: 0, typ: NTI178653, name: "kind", sons: null};
NTI178748.node = NNI178748;
NTI178748.base = NTI177022;
NTI178706.base = NTI178748;
var NNI178594 = {kind: 2, offset: 0, typ: null, name: null, len: 25, sons: {"0": {kind: 1, offset: 0, typ: NTI178594, name: "BoolOp", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178594, name: "BinOp", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178594, name: "UnaryOp", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178594, name: "Lambda", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178594, name: "IfExp", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178594, name: "Dict", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178594, name: "Set", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178594, name: "ListComp", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178594, name: "SetComp", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178594, name: "DictComp", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI178594, name: "GeneratorExp", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI178594, name: "Await", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI178594, name: "Yield", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI178594, name: "YieldFrom", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI178594, name: "Compare", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI178594, name: "Call", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI178594, name: "FormattedValue", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI178594, name: "JoinedStr", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI178594, name: "Constant", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI178594, name: "Attribute", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI178594, name: "Subscript", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI178594, name: "Starred", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI178594, name: "Name", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI178594, name: "List", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI178594, name: "Tuple", len: 0, sons: null}}};
NTI178594.node = NNI178594;
var NNI178731 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178594, name: "kind", sons: null}]};
NTI178731.node = NNI178731;
NTI178731.base = NTI177022;
NTI178696.base = NTI178731;
var NNI180002 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "op", len: 0, typ: NTI178706, name: "op", sons: null}, 
{kind: 1, offset: "operand", len: 0, typ: NTI178696, name: "operand", sons: null}]};
NTI180002.node = NNI180002;
NTI180002.base = NTI178731;
var NNI181624 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181624.node = NNI181624;
NTI181624.base = NTI178748;
NTI180801.base = NTI178696;
var NNI178621 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI178621, name: "Load", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178621, name: "Store", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178621, name: "Del", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178621, name: "AugLoad", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178621, name: "AugStore", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178621, name: "Param", len: 0, sons: null}}};
NTI178621.node = NNI178621;
var NNI178736 = {kind: 1, offset: "kind", len: 0, typ: NTI178621, name: "kind", sons: null};
NTI178736.node = NNI178736;
NTI178736.base = NTI177022;
NTI178698.base = NTI178736;
var NNI180800 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elts", len: 0, typ: NTI180801, name: "elts", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180800.node = NNI180800;
NTI180800.base = NTI178731;
NTI406513.base = NTI178696;
var NNI180837 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180837.node = NNI180837;
NTI180837.base = NTI178736;
var NNI178671 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178671, name: "Comprehension", len: 0, sons: null}}};
NTI178671.node = NNI178671;
var NNI178754 = {kind: 1, offset: "kind", len: 0, typ: NTI178671, name: "kind", sons: null};
NTI178754.node = NNI178754;
NTI178754.base = NTI177022;
NTI178710.base = NTI178754;
NTI180185.base = NTI178710;
var NNI180183 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elt", len: 0, typ: NTI178696, name: "elt", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180185, name: "generators", sons: null}]};
NTI180183.node = NNI180183;
NTI180183.base = NTI178731;
NTI182030.base = NTI178696;
var NNI182027 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI178696, name: "iter", sons: null}, 
{kind: 1, offset: "ifs", len: 0, typ: NTI182030, name: "ifs", sons: null}, 
{kind: 1, offset: "is_async", len: 0, typ: NTI177017, name: "is_async", sons: null}]};
NTI182027.node = NNI182027;
NTI182027.base = NTI178754;
NTI406732.base = NTI178710;
NTI406736.base = NTI178710;
NTI180764.base = NTI178696;
var NNI180763 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elts", len: 0, typ: NTI180764, name: "elts", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180763.node = NNI180763;
NTI180763.base = NTI178731;
NTI406495.base = NTI178696;
NTI180110.base = NTI178696;
NTI180112.base = NTI178696;
var NNI180109 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "keys", len: 0, typ: NTI180110, name: "keys", sons: null}, 
{kind: 1, offset: "values", len: 0, typ: NTI180112, name: "values", sons: null}]};
NTI180109.node = NNI180109;
NTI180109.base = NTI178731;
var NNI348047 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tokenNode", len: 0, typ: NTI208886, name: "tokenNode", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI348049, name: "children", sons: null}, 
{kind: 1, offset: "grammarNodeSeq", len: 0, typ: NTI348051, name: "grammarNodeSeq", sons: null}]};
NTI348047.node = NNI348047;
NTI348043.base = NTI348047;
NTI348049.base = NTI348043;
var NNI177027 = {kind: 1, offset: "value", len: 0, typ: NTI175083, name: "value", sons: null};
NTI177027.node = NNI177027;
NTI177027.base = NTI177022;
NTI177019.base = NTI177027;
var NNI180728 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI177019, name: "id", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180728.node = NNI180728;
NTI180728.base = NTI178731;
var NNI177030 = {kind: 1, offset: "value", len: 0, typ: NTI157214, name: "value", sons: null};
NTI177030.node = NNI177030;
NTI177030.base = NTI177022;
NTI177021.base = NTI177030;
var NNI180586 = {kind: 1, offset: "value", len: 0, typ: NTI177021, name: "value", sons: null};
NTI180586.node = NNI180586;
NTI180586.base = NTI178731;
NTI180475.base = NTI178696;
var NNI178683 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178683, name: "Keyword", len: 0, sons: null}}};
NTI178683.node = NNI178683;
var NNI178770 = {kind: 1, offset: "kind", len: 0, typ: NTI178683, name: "kind", sons: null};
NTI178770.node = NNI178770;
NTI178770.base = NTI177022;
NTI178718.base = NTI178770;
NTI180477.base = NTI178718;
var NNI180473 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fun", len: 0, typ: NTI178696, name: "fun", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI180475, name: "args", sons: null}, 
{kind: 1, offset: "keywords", len: 0, typ: NTI180477, name: "keywords", sons: null}]};
NTI180473.node = NNI180473;
NTI180473.base = NTI178731;
var NNI178629 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI178629, name: "Slice", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178629, name: "ExtSlice", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178629, name: "Index", len: 0, sons: null}}};
NTI178629.node = NNI178629;
var NNI178739 = {kind: 1, offset: "kind", len: 0, typ: NTI178629, name: "kind", sons: null};
NTI178739.node = NNI178739;
NTI178739.base = NTI177022;
NTI178700.base = NTI178739;
var NNI180656 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "slice", len: 0, typ: NTI178700, name: "slice", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180656.node = NNI180656;
NTI180656.base = NTI178731;
var NNI181095 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI181095.node = NNI181095;
NTI181095.base = NTI178739;
var NNI181023 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lower", len: 0, typ: NTI178696, name: "lower", sons: null}, 
{kind: 1, offset: "upper", len: 0, typ: NTI178696, name: "upper", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI178696, name: "step", sons: null}]};
NTI181023.node = NNI181023;
NTI181023.base = NTI178739;
var NNI180619 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "attr", len: 0, typ: NTI177019, name: "attr", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180619.node = NNI180619;
NTI180619.base = NTI178731;
var NNI178638 = {kind: 2, offset: 0, typ: null, name: null, len: 13, sons: {"0": {kind: 1, offset: 0, typ: NTI178638, name: "Add", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178638, name: "Sub", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178638, name: "Mult", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178638, name: "MatMult", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178638, name: "Div", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178638, name: "Mod", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178638, name: "Pow", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178638, name: "LShift", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178638, name: "RShift", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178638, name: "BitOr", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI178638, name: "BitXor", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI178638, name: "BitAnd", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI178638, name: "FloorDiv", len: 0, sons: null}}};
NTI178638.node = NNI178638;
var NNI178745 = {kind: 1, offset: "kind", len: 0, typ: NTI178638, name: "kind", sons: null};
NTI178745.node = NNI178745;
NTI178745.base = NTI177022;
NTI178704.base = NTI178745;
var NNI179965 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "left", len: 0, typ: NTI178696, name: "left", sons: null}, 
{kind: 1, offset: "op", len: 0, typ: NTI178704, name: "op", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI178696, name: "right", sons: null}]};
NTI179965.node = NNI179965;
NTI179965.base = NTI178731;
var NNI181376 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181376.node = NNI181376;
NTI181376.base = NTI178745;
var NNI181655 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181655.node = NNI181655;
NTI181655.base = NTI178748;
var NNI181686 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181686.node = NNI181686;
NTI181686.base = NTI178748;
var NNI181190 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181190.node = NNI181190;
NTI181190.base = NTI178745;
var NNI181221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181221.node = NNI181221;
NTI181221.base = NTI178745;
var NNI181252 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181252.node = NNI181252;
NTI181252.base = NTI178745;
var NNI181314 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181314.node = NNI181314;
NTI181314.base = NTI178745;
var NNI181345 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181345.node = NNI181345;
NTI181345.base = NTI178745;
var NNI181562 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181562.node = NNI181562;
NTI181562.base = NTI178745;
var NNI181779 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181779.node = NNI181779;
var NNI178659 = {kind: 2, offset: 0, typ: null, name: null, len: 10, sons: {"0": {kind: 1, offset: 0, typ: NTI178659, name: "Eq", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178659, name: "NotEq", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178659, name: "Lt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178659, name: "LtE", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178659, name: "Gt", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178659, name: "GtE", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178659, name: "Is", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178659, name: "IsNot", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178659, name: "In", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178659, name: "NotIn", len: 0, sons: null}}};
NTI178659.node = NNI178659;
var NNI178751 = {kind: 1, offset: "kind", len: 0, typ: NTI178659, name: "kind", sons: null};
NTI178751.node = NNI178751;
NTI178751.base = NTI177022;
NTI181779.base = NTI178751;
var NNI181841 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181841.node = NNI181841;
NTI181841.base = NTI178751;
var NNI181717 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181717.node = NNI181717;
NTI181717.base = NTI178751;
var NNI181872 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181872.node = NNI181872;
NTI181872.base = NTI178751;
var NNI181810 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181810.node = NNI181810;
NTI181810.base = NTI178751;
var NNI181748 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181748.node = NNI181748;
NTI181748.base = NTI178751;
var NNI181965 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181965.node = NNI181965;
NTI181965.base = NTI178751;
var NNI181996 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181996.node = NNI181996;
NTI181996.base = NTI178751;
NTI178708.base = NTI178751;
NTI180434.base = NTI178708;
NTI180436.base = NTI178696;
var NNI180432 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "left", len: 0, typ: NTI178696, name: "left", sons: null}, 
{kind: 1, offset: "ops", len: 0, typ: NTI180434, name: "ops", sons: null}, 
{kind: 1, offset: "comparators", len: 0, typ: NTI180436, name: "comparators", sons: null}]};
NTI180432.node = NNI180432;
NTI180432.base = NTI178731;
var NNI181128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181128.node = NNI181128;
var NNI178634 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI178634, name: "And", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178634, name: "Or", len: 0, sons: null}}};
NTI178634.node = NNI178634;
var NNI178742 = {kind: 1, offset: "kind", len: 0, typ: NTI178634, name: "kind", sons: null};
NTI178742.node = NNI178742;
NTI178742.base = NTI177022;
NTI181128.base = NTI178742;
var NNI181159 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181159.node = NNI181159;
NTI181159.base = NTI178742;
NTI178702.base = NTI178742;
NTI179930.base = NTI178696;
var NNI179928 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "op", len: 0, typ: NTI178702, name: "op", sons: null}, 
{kind: 1, offset: "values", len: 0, typ: NTI179930, name: "values", sons: null}]};
NTI179928.node = NNI179928;
NTI179928.base = NTI178731;
NTI406440.base = NTI178696;
var NNI179802 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI179802.node = NNI179802;
NTI179802.base = NTI178726;
NTI179183.base = NTI178696;
var NNI179182 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "targets", len: 0, typ: NTI179183, name: "targets", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}]};
NTI179182.node = NNI179182;
NTI179182.base = NTI178726;
var NNI179835 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI179835.node = NNI179835;
NTI179835.base = NTI178726;
var NNI179866 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI179866.node = NNI179866;
NTI179866.base = NTI178726;
var NNI179897 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI179897.node = NNI179897;
NTI179897.base = NTI178726;
var NNI179114 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI179114.node = NNI179114;
NTI179114.base = NTI178726;
var NNI179541 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "exc", len: 0, typ: NTI178696, name: "exc", sons: null}, 
{kind: 1, offset: "cause", len: 0, typ: NTI178696, name: "cause", sons: null}]};
NTI179541.node = NNI179541;
NTI179541.base = NTI178726;
var NNI178686 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178686, name: "Alias", len: 0, sons: null}}};
NTI178686.node = NNI178686;
var NNI178773 = {kind: 1, offset: "kind", len: 0, typ: NTI178686, name: "kind", sons: null};
NTI178773.node = NNI178773;
NTI178773.base = NTI177022;
NTI178720.base = NTI178773;
NTI179659.base = NTI178720;
var NNI179658 = {kind: 1, offset: "names", len: 0, typ: NTI179659, name: "names", sons: null};
NTI179658.node = NNI179658;
NTI179658.base = NTI178726;
var NNI182228 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "asname", len: 0, typ: NTI177019, name: "asname", sons: null}]};
NTI182228.node = NNI182228;
NTI182228.base = NTI178773;
var NNI179623 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "msg", len: 0, typ: NTI178696, name: "msg", sons: null}]};
NTI179623.node = NNI179623;
NTI179623.base = NTI178726;
NTI406561.base = NTI178694;
NTI179424.base = NTI178694;
NTI179426.base = NTI178694;
var NNI179422 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179424, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179426, name: "orelse", sons: null}]};
NTI179422.node = NNI179422;
NTI179422.base = NTI178726;
NTI406647.base = NTI178694;
NTI179383.base = NTI178694;
NTI179385.base = NTI178694;
var NNI179381 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179383, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179385, name: "orelse", sons: null}]};
NTI179381.node = NNI179381;
NTI179381.base = NTI178726;
NTI179298.base = NTI178694;
NTI179300.base = NTI178694;
var NNI179295 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI178696, name: "iter", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179298, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179300, name: "orelse", sons: null}]};
NTI179295.node = NNI179295;
NTI179295.base = NTI178726;
NTI179577.base = NTI178694;
var NNI178674 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178674, name: "ExceptHandler", len: 0, sons: null}}};
NTI178674.node = NNI178674;
var NNI178757 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178674, name: "kind", sons: null}]};
NTI178757.node = NNI178757;
NTI178757.base = NTI177022;
NTI178712.base = NTI178757;
NTI179579.base = NTI178712;
NTI179581.base = NTI178694;
NTI179583.base = NTI178694;
var NNI179576 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "body", len: 0, typ: NTI179577, name: "body", sons: null}, 
{kind: 1, offset: "handlers", len: 0, typ: NTI179579, name: "handlers", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179581, name: "orelse", sons: null}, 
{kind: 1, offset: "finalbody", len: 0, typ: NTI179583, name: "finalbody", sons: null}]};
NTI179576.node = NNI179576;
NTI179576.base = NTI178726;
NTI182071.base = NTI178694;
var NNI182068 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "type", len: 0, typ: NTI178696, name: "type", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI182071, name: "body", sons: null}]};
NTI182068.node = NNI182068;
NTI182068.base = NTI178757;
var NNI178677 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178677, name: "Arguments", len: 0, sons: null}}};
NTI178677.node = NNI178677;
var NNI178762 = {kind: 1, offset: "kind", len: 0, typ: NTI178677, name: "kind", sons: null};
NTI178762.node = NNI178762;
NTI178762.base = NTI177022;
NTI178714.base = NTI178762;
NTI178978.base = NTI178694;
NTI178980.base = NTI178696;
var NNI178975 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI178714, name: "args", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI178978, name: "body", sons: null}, 
{kind: 1, offset: "decorator_list", len: 0, typ: NTI178980, name: "decorator_list", sons: null}, 
{kind: 1, offset: "returns", len: 0, typ: NTI178696, name: "returns", sons: null}]};
NTI178975.node = NNI178975;
NTI178975.base = NTI178726;
var NNI178680 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178680, name: "Arg", len: 0, sons: null}}};
NTI178680.node = NNI178680;
var NNI178765 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178680, name: "kind", sons: null}]};
NTI178765.node = NNI178765;
NTI178765.base = NTI177022;
NTI178716.base = NTI178765;
NTI182108.base = NTI178716;
NTI182111.base = NTI178716;
NTI182113.base = NTI178696;
NTI182116.base = NTI178696;
var NNI182107 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "args", len: 0, typ: NTI182108, name: "args", sons: null}, 
{kind: 1, offset: "vararg", len: 0, typ: NTI178716, name: "vararg", sons: null}, 
{kind: 1, offset: "kwonlyargs", len: 0, typ: NTI182111, name: "kwonlyargs", sons: null}, 
{kind: 1, offset: "kw_defaults", len: 0, typ: NTI182113, name: "kw_defaults", sons: null}, 
{kind: 1, offset: "kwarg", len: 0, typ: NTI178716, name: "kwarg", sons: null}, 
{kind: 1, offset: "defaults", len: 0, typ: NTI182116, name: "defaults", sons: null}]};
NTI182107.node = NNI182107;
NTI182107.base = NTI178762;
var NNI182158 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "arg", len: 0, typ: NTI177019, name: "arg", sons: null}, 
{kind: 1, offset: "annotation", len: 0, typ: NTI178696, name: "annotation", sons: null}]};
NTI182158.node = NNI182158;
NTI182158.base = NTI178765;
NTI179067.base = NTI178696;
NTI179069.base = NTI178718;
NTI179071.base = NTI178694;
NTI179073.base = NTI178696;
var NNI179065 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "bases", len: 0, typ: NTI179067, name: "bases", sons: null}, 
{kind: 1, offset: "keywords", len: 0, typ: NTI179069, name: "keywords", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179071, name: "body", sons: null}, 
{kind: 1, offset: "decorator_list", len: 0, typ: NTI179073, name: "decorator_list", sons: null}]};
NTI179065.node = NNI179065;
NTI179065.base = NTI178726;
NTI408617.base = NTI178696;
NTI178873.base = NTI178694;
var NNI178872 = {kind: 1, offset: "body", len: 0, typ: NTI178873, name: "body", sons: null};
NTI178872.node = NNI178872;
NTI178872.base = NTI178723;
NTI177015.base = NTI177022;
NTI432175.base = NTI432141;
var NNI432192 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI175083, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI432192.node = NNI432192;
NTI432189.base = NTI432192;
var NNI432186 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI432189, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI432186.node = NNI432186;
var NNI432217 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI175083, name: "Field1", sons: null}]};
NTI432217.node = NNI432217;
NTI432214.base = NTI432217;
var NNI432211 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI432214, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI432211.node = NNI432211;
var NNI432248 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI175083, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI432133, name: "Field2", sons: null}]};
NTI432248.node = NNI432248;
NTI432245.base = NTI432248;
var NNI432242 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI432245, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI432242.node = NNI432242;
var NNI432173 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI432141, name: "parent", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI432175, name: "children", sons: null}, 
{kind: 1, offset: "argVars", len: 0, typ: NTI432186, name: "argVars", sons: null}, 
{kind: 1, offset: "declaredVars", len: 0, typ: NTI432211, name: "declaredVars", sons: null}, 
{kind: 1, offset: "usedVars", len: 0, typ: NTI432211, name: "usedVars", sons: null}, 
{kind: 1, offset: "scopes", len: 0, typ: NTI432242, name: "scopes", sons: null}, 
{kind: 1, offset: "names", len: 0, typ: NTI432186, name: "names", sons: null}, 
{kind: 1, offset: "localVars", len: 0, typ: NTI432186, name: "localVars", sons: null}, 
{kind: 1, offset: "cellVars", len: 0, typ: NTI432186, name: "cellVars", sons: null}, 
{kind: 1, offset: "freeVars", len: 0, typ: NTI432186, name: "freeVars", sons: null}]};
NTI432173.node = NNI432173;
NTI432141.base = NTI432173;
var NNI432158 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI177015, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI432141, name: "Field2", sons: null}]};
NTI432158.node = NNI432158;
NTI432155.base = NTI432158;
var NNI432152 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI432155, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI432152.node = NNI432152;
var NNI448401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI177015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI432141, name: "Field1", sons: null}]};
NTI448401.node = NNI448401;
var NNI498041 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "opCode", len: 0, typ: NTI464016, name: "opCode", sons: null}, 
{kind: 1, offset: "lineNo", len: 0, typ: NTI104, name: "lineNo", sons: null}]};
NTI498041.node = NNI498041;
NTI498041.base = NTI3808;
NTI498028.base = NTI498041;
NTI498055.base = NTI498028;
var NNI498034 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI498034, name: "Misc", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI498034, name: "While", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI498034, name: "For", len: 0, sons: null}}};
NTI498034.node = NNI498034;
var NNI498054 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "instrSeq", len: 0, typ: NTI498055, name: "instrSeq", sons: null}, 
{kind: 1, offset: "tp", len: 0, typ: NTI498034, name: "tp", sons: null}, 
{kind: 1, offset: "next", len: 0, typ: NTI498036, name: "next", sons: null}, 
{kind: 1, offset: "seenReturn", len: 0, typ: NTI130, name: "seenReturn", sons: null}, 
{kind: 1, offset: "offset", len: 0, typ: NTI104, name: "offset", sons: null}]};
NTI498054.node = NNI498054;
NTI498036.base = NTI498054;
var NNI498048 = {kind: 1, offset: "target", len: 0, typ: NTI498036, name: "target", sons: null};
NTI498048.node = NNI498048;
var NNI498045 = {kind: 1, offset: "opArg", len: 0, typ: NTI104, name: "opArg", sons: null};
NTI498045.node = NNI498045;
NTI498045.base = NTI498041;
NTI498048.base = NTI498045;
NTI498066.base = NTI157214;
NTI447283.base = NTI175083;
NTI447272.base = NTI175083;
NTI448327.base = NTI175083;
NTI448345.base = NTI175083;
NTI448363.base = NTI175083;
NTI448381.base = NTI175083;
var NNI501254 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI432133, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI501254.node = NNI501254;
NTI501262.base = NTI501254;
var NNI3886 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3886.node = NNI3886;
NTI3886.base = NTI3828;
NTI182673.base = NTI138;
NTI179733.base = NTI177019;
var NNI179732 = {kind: 1, offset: "names", len: 0, typ: NTI179733, name: "names", sons: null};
NTI179732.node = NNI179732;
NTI179732.base = NTI178726;
NTI179695.base = NTI178720;
var NNI179693 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "module", len: 0, typ: NTI177019, name: "module", sons: null}, 
{kind: 1, offset: "names", len: 0, typ: NTI179695, name: "names", sons: null}, 
{kind: 1, offset: "level", len: 0, typ: NTI177017, name: "level", sons: null}]};
NTI179693.node = NNI179693;
NTI179693.base = NTI178726;
var NNI178689 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178689, name: "Withitem", len: 0, sons: null}}};
NTI178689.node = NNI178689;
var NNI178776 = {kind: 1, offset: "kind", len: 0, typ: NTI178689, name: "kind", sons: null};
NTI178776.node = NNI178776;
NTI178776.base = NTI177022;
NTI178722.base = NTI178776;
NTI179464.base = NTI178722;
NTI179466.base = NTI178694;
var NNI179463 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI179464, name: "items", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179466, name: "body", sons: null}]};
NTI179463.node = NNI179463;
NTI179463.base = NTI178726;
NTI179768.base = NTI177019;
var NNI179767 = {kind: 1, offset: "names", len: 0, typ: NTI179768, name: "names", sons: null};
NTI179767.node = NNI179767;
NTI179767.base = NTI178726;
var NNI180037 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "args", len: 0, typ: NTI178714, name: "args", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI178696, name: "body", sons: null}]};
NTI180037.node = NNI180037;
NTI180037.base = NTI178731;
var NNI179256 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "annotation", len: 0, typ: NTI178696, name: "annotation", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "simple", len: 0, typ: NTI177017, name: "simple", sons: null}]};
NTI179256.node = NNI179256;
NTI179256.base = NTI178726;
NTI179341.base = NTI178694;
NTI179343.base = NTI178694;
var NNI179338 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI178696, name: "iter", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179341, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179343, name: "orelse", sons: null}]};
NTI179338.node = NNI179338;
NTI179338.base = NTI178726;
NTI179148.base = NTI178696;
var NNI179147 = {kind: 1, offset: "targets", len: 0, typ: NTI179148, name: "targets", sons: null};
NTI179147.node = NNI179147;
NTI179147.base = NTI178726;
NTI179503.base = NTI178722;
NTI179505.base = NTI178694;
var NNI179502 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI179503, name: "items", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179505, name: "body", sons: null}]};
NTI179502.node = NNI179502;
NTI179502.base = NTI178726;
NTI180260.base = NTI178710;
var NNI180257 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "key", len: 0, typ: NTI178696, name: "key", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180260, name: "generators", sons: null}]};
NTI180257.node = NNI180257;
NTI180257.base = NTI178731;
NTI181061.base = NTI178700;
var NNI181060 = {kind: 1, offset: "dims", len: 0, typ: NTI181061, name: "dims", sons: null};
NTI181060.node = NNI181060;
NTI181060.base = NTI178739;
var NNI180868 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180868.node = NNI180868;
NTI180868.base = NTI178736;
NTI180222.base = NTI178710;
var NNI180220 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elt", len: 0, typ: NTI178696, name: "elt", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180222, name: "generators", sons: null}]};
NTI180220.node = NNI180220;
NTI180220.base = NTI178731;
NTI179023.base = NTI178694;
NTI179025.base = NTI178696;
var NNI179020 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI178714, name: "args", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179023, name: "body", sons: null}, 
{kind: 1, offset: "decorator_list", len: 0, typ: NTI179025, name: "decorator_list", sons: null}, 
{kind: 1, offset: "returns", len: 0, typ: NTI178696, name: "returns", sons: null}]};
NTI179020.node = NNI179020;
NTI179020.base = NTI178726;
var NNI179219 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "op", len: 0, typ: NTI178704, name: "op", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}]};
NTI179219.node = NNI179219;
NTI179219.base = NTI178726;
NTI178941.base = NTI178694;
var NNI178940 = {kind: 1, offset: "body", len: 0, typ: NTI178941, name: "body", sons: null};
NTI178940.node = NNI178940;
NTI178940.base = NTI178723;
var NNI181283 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181283.node = NNI181283;
NTI181283.base = NTI178745;
var NNI181438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181438.node = NNI181438;
NTI181438.base = NTI178745;
var NNI180693 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180693.node = NNI180693;
NTI180693.base = NTI178731;
var NNI180366 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI180366.node = NNI180366;
NTI180366.base = NTI178731;
var NNI180072 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI178696, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI178696, name: "orelse", sons: null}]};
NTI180072.node = NNI180072;
NTI180072.base = NTI178731;
var NNI180930 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180930.node = NNI180930;
NTI180930.base = NTI178736;
var NNI181407 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181407.node = NNI181407;
NTI181407.base = NTI178745;
var NNI180399 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI180399.node = NNI180399;
NTI180399.base = NTI178731;
var NNI180992 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180992.node = NNI180992;
NTI180992.base = NTI178736;
var NNI178907 = {kind: 1, offset: "body", len: 0, typ: NTI178696, name: "body", sons: null};
NTI178907.node = NNI178907;
NTI178907.base = NTI178723;
var NNI180899 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180899.node = NNI180899;
NTI180899.base = NTI178736;
var NNI181469 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181469.node = NNI181469;
NTI181469.base = NTI178745;
var NNI180961 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180961.node = NNI180961;
NTI180961.base = NTI178736;
NTI180149.base = NTI178696;
var NNI180148 = {kind: 1, offset: "elts", len: 0, typ: NTI180149, name: "elts", sons: null};
NTI180148.node = NNI180148;
NTI180148.base = NTI178731;
NTI180298.base = NTI178710;
var NNI180296 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elt", len: 0, typ: NTI178696, name: "elt", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180298, name: "generators", sons: null}]};
NTI180296.node = NNI180296;
NTI180296.base = NTI178731;
NTI180552.base = NTI178696;
var NNI180551 = {kind: 1, offset: "values", len: 0, typ: NTI180552, name: "values", sons: null};
NTI180551.node = NNI180551;
NTI180551.base = NTI178731;
var NNI180514 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "conversion", len: 0, typ: NTI177017, name: "conversion", sons: null}, 
{kind: 1, offset: "format_spec", len: 0, typ: NTI178696, name: "format_spec", sons: null}]};
NTI180514.node = NNI180514;
NTI180514.base = NTI178731;
var NNI181934 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181934.node = NNI181934;
NTI181934.base = NTI178751;
var NNI181593 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181593.node = NNI181593;
NTI181593.base = NTI178748;
var NNI182193 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "arg", len: 0, typ: NTI177019, name: "arg", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}]};
NTI182193.node = NNI182193;
NTI182193.base = NTI178770;
var NNI182263 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "context_expr", len: 0, typ: NTI178696, name: "context_expr", sons: null}, 
{kind: 1, offset: "optional_vars", len: 0, typ: NTI178696, name: "optional_vars", sons: null}]};
NTI182263.node = NNI182263;
NTI182263.base = NTI178776;
var NNI180333 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI180333.node = NNI180333;
NTI180333.base = NTI178731;
var NNI181500 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181500.node = NNI181500;
NTI181500.base = NTI178745;
var NNI181903 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181903.node = NNI181903;
NTI181903.base = NTI178751;
var NNI181531 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181531.node = NNI181531;
NTI181531.base = NTI178745;
var NNI499876 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI464016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI492068, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI499876.node = NNI499876;
var NNI499850 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI464016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI492068, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI499850.node = NNI499850;
NTI505410.base = NTI498036;
NTI505314.base = NTI498036;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function divInt(a_16657, b_16658) {
		    if (b_16658 == 0) raiseDivByZero();
    if (b_16658 == -1 && a_16657 == 2147483647) raiseOverflow();
    return Math.trunc(a_16657 / b_16658);
  

	
}

function mulInt(a_16639, b_16640) {
		    var result = a_16639 * b_16640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function eqStrings(a_16454, b_16455) {
		    if (a_16454 == b_16455) return true;
    if (a_16454 === null && b_16455.length == 0) return true;
    if (b_16455 === null && a_16454.length == 0) return true;
    if ((!a_16454) || (!b_16455)) return false;
    var alen = a_16454.length;
    if (alen != b_16455.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16454[i] != b_16455[i]) return false;
    return true;
  

	
}
		var grammar_lines_212094 = nimCopy(null, [makeNimstrLit("# Grammar for Python"), [], makeNimstrLit("# NOTE WELL: You should also follow all the steps listed at"), makeNimstrLit("# https://devguide.python.org/grammar/"), [], makeNimstrLit("# Start symbols for the grammar:"), makeNimstrLit("#       single_input is a single interactive statement;"), makeNimstrLit("#       file_input is a module or sequence of commands read from an input file;"), makeNimstrLit("#       eval_input is the input for the eval() functions."), makeNimstrLit("# NB: compound_stmt in single_input is followed by extra NEWLINE!"), makeNimstrLit("single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE"), makeNimstrLit("file_input: (NEWLINE | stmt)* ENDMARKER"), makeNimstrLit("eval_input: testlist NEWLINE* ENDMARKER"), [], makeNimstrLit("decorator: \'@\' dotted_name [ \'(\' [arglist] \')\' ] NEWLINE"), makeNimstrLit("decorators: decorator+"), makeNimstrLit("decorated: decorators (classdef | funcdef | async_funcdef)"), [], makeNimstrLit("async_funcdef: \'async\' funcdef"), makeNimstrLit("funcdef: \'def\' NAME parameters [\'->\' test] \':\' suite"), [], makeNimstrLit("parameters: \'(\' [typedargslist] \')\'"), makeNimstrLit("typedargslist: (tfpdef [\'=\' test] (\',\' tfpdef [\'=\' test])* [\',\' ["), makeNimstrLit("        \'*\' [tfpdef] (\',\' tfpdef [\'=\' test])* [\',\' [\'**\' tfpdef [\',\']]]"), makeNimstrLit("      | \'**\' tfpdef [\',\']]]"), makeNimstrLit("  | \'*\' [tfpdef] (\',\' tfpdef [\'=\' test])* [\',\' [\'**\' tfpdef [\',\']]]"), makeNimstrLit("  | \'**\' tfpdef [\',\'])"), makeNimstrLit("tfpdef: NAME [\':\' test]"), makeNimstrLit("varargslist: (vfpdef [\'=\' test] (\',\' vfpdef [\'=\' test])* [\',\' ["), makeNimstrLit("        \'*\' [vfpdef] (\',\' vfpdef [\'=\' test])* [\',\' [\'**\' vfpdef [\',\']]]"), makeNimstrLit("      | \'**\' vfpdef [\',\']]]"), makeNimstrLit("  | \'*\' [vfpdef] (\',\' vfpdef [\'=\' test])* [\',\' [\'**\' vfpdef [\',\']]]"), makeNimstrLit("  | \'**\' vfpdef [\',\']"), makeNimstrLit(")"), makeNimstrLit("vfpdef: NAME"), [], makeNimstrLit("stmt: simple_stmt | compound_stmt"), makeNimstrLit("simple_stmt: small_stmt (\';\' small_stmt)* [\';\'] NEWLINE"), makeNimstrLit("small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |"), makeNimstrLit("             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)"), makeNimstrLit("expr_stmt: testlist_star_expr (annassign | augassign (yield_expr|testlist) |"), makeNimstrLit("                     (\'=\' (yield_expr|testlist_star_expr))*)"), makeNimstrLit("annassign: \':\' test [\'=\' test]"), makeNimstrLit("testlist_star_expr: (test|star_expr) (\',\' (test|star_expr))* [\',\']"), makeNimstrLit("augassign: (\'+=\' | \'-=\' | \'*=\' | \'@=\' | \'/=\' | \'%=\' | \'&=\' | \'|=\' | \'^=\' |"), makeNimstrLit("            \'<<=\' | \'>>=\' | \'**=\' | \'//=\')"), makeNimstrLit("# For normal and annotated assignments, additional restrictions enforced by the interpreter"), makeNimstrLit("del_stmt: \'del\' exprlist"), makeNimstrLit("pass_stmt: \'pass\'"), makeNimstrLit("flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt"), makeNimstrLit("break_stmt: \'break\'"), makeNimstrLit("continue_stmt: \'continue\'"), makeNimstrLit("return_stmt: \'return\' [testlist]"), makeNimstrLit("yield_stmt: yield_expr"), makeNimstrLit("raise_stmt: \'raise\' [test [\'from\' test]]"), makeNimstrLit("import_stmt: import_name | import_from"), makeNimstrLit("import_name: \'import\' dotted_as_names"), makeNimstrLit("# note below: the (\'.\' | \'...\') is necessary because \'...\' is tokenized as ELLIPSIS"), makeNimstrLit("import_from: (\'from\' ((\'.\' | \'...\')* dotted_name | (\'.\' | \'...\')+)"), makeNimstrLit("              \'import\' (\'*\' | \'(\' import_as_names \')\' | import_as_names))"), makeNimstrLit("import_as_name: NAME [\'as\' NAME]"), makeNimstrLit("dotted_as_name: dotted_name [\'as\' NAME]"), makeNimstrLit("import_as_names: import_as_name (\',\' import_as_name)* [\',\']"), makeNimstrLit("dotted_as_names: dotted_as_name (\',\' dotted_as_name)*"), makeNimstrLit("dotted_name: NAME (\'.\' NAME)*"), makeNimstrLit("global_stmt: \'global\' NAME (\',\' NAME)*"), makeNimstrLit("nonlocal_stmt: \'nonlocal\' NAME (\',\' NAME)*"), makeNimstrLit("assert_stmt: \'assert\' test [\',\' test]"), [], makeNimstrLit("compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt"), makeNimstrLit("async_stmt: \'async\' (funcdef | with_stmt | for_stmt)"), makeNimstrLit("if_stmt: \'if\' test \':\' suite (\'elif\' test \':\' suite)* [\'else\' \':\' suite]"), makeNimstrLit("while_stmt: \'while\' test \':\' suite [\'else\' \':\' suite]"), makeNimstrLit("for_stmt: \'for\' exprlist \'in\' testlist \':\' suite [\'else\' \':\' suite]"), makeNimstrLit("try_stmt: (\'try\' \':\' suite"), makeNimstrLit("           ((except_clause \':\' suite)+"), makeNimstrLit("            [\'else\' \':\' suite]"), makeNimstrLit("            [\'finally\' \':\' suite] |"), makeNimstrLit("           \'finally\' \':\' suite))"), makeNimstrLit("with_stmt: \'with\' with_item (\',\' with_item)*  \':\' suite"), makeNimstrLit("with_item: test [\'as\' expr]"), makeNimstrLit("# NB compile.c makes sure that the default except clause is last"), makeNimstrLit("except_clause: \'except\' [test [\'as\' NAME]]"), makeNimstrLit("suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT"), [], makeNimstrLit("test: or_test [\'if\' or_test \'else\' test] | lambdef"), makeNimstrLit("test_nocond: or_test | lambdef_nocond"), makeNimstrLit("lambdef: \'lambda\' [varargslist] \':\' test"), makeNimstrLit("lambdef_nocond: \'lambda\' [varargslist] \':\' test_nocond"), makeNimstrLit("or_test: and_test (\'or\' and_test)*"), makeNimstrLit("and_test: not_test (\'and\' not_test)*"), makeNimstrLit("not_test: \'not\' not_test | comparison"), makeNimstrLit("comparison: expr (comp_op expr)*"), makeNimstrLit("# <> isn\'t actually a valid comparison operator in Python. It\'s here for the"), makeNimstrLit("# sake of a __future__ import described in PEP 401 (which really works :-)"), makeNimstrLit("comp_op: \'<\'|\'>\'|\'==\'|\'>=\'|\'<=\'|\'<>\'|\'!=\'|\'in\'|\'not\' \'in\'|\'is\'|\'is\' \'not\'"), makeNimstrLit("star_expr: \'*\' expr"), makeNimstrLit("expr: xor_expr (\'|\' xor_expr)*"), makeNimstrLit("xor_expr: and_expr (\'^\' and_expr)*"), makeNimstrLit("and_expr: shift_expr (\'&\' shift_expr)*"), makeNimstrLit("shift_expr: arith_expr ((\'<<\'|\'>>\') arith_expr)*"), makeNimstrLit("arith_expr: term ((\'+\'|\'-\') term)*"), makeNimstrLit("term: factor ((\'*\'|\'@\'|\'/\'|\'%\'|\'//\') factor)*"), makeNimstrLit("factor: (\'+\'|\'-\'|\'~\') factor | power"), makeNimstrLit("power: atom_expr [\'**\' factor]"), makeNimstrLit("atom_expr: [\'await\'] atom trailer*"), makeNimstrLit("atom: (\'(\' [yield_expr|testlist_comp] \')\' |"), makeNimstrLit("       \'[\' [testlist_comp] \']\' |"), makeNimstrLit("       \'{\' [dictorsetmaker] \'}\' |"), makeNimstrLit("       NAME | NUMBER | STRING+ | \'...\' | \'None\' | \'True\' | \'False\')"), makeNimstrLit("testlist_comp: (test|star_expr) ( comp_for | (\',\' (test|star_expr))* [\',\'] )"), makeNimstrLit("trailer: \'(\' [arglist] \')\' | \'[\' subscriptlist \']\' | \'.\' NAME"), makeNimstrLit("subscriptlist: subscript (\',\' subscript)* [\',\']"), makeNimstrLit("subscript: test | [test] \':\' [test] [sliceop]"), makeNimstrLit("sliceop: \':\' [test]"), makeNimstrLit("exprlist: (expr|star_expr) (\',\' (expr|star_expr))* [\',\']"), makeNimstrLit("testlist: test (\',\' test)* [\',\']"), makeNimstrLit("dictorsetmaker: ( ((test \':\' test | \'**\' expr)"), makeNimstrLit("                   (comp_for | (\',\' (test \':\' test | \'**\' expr))* [\',\'])) |"), makeNimstrLit("                  ((test | star_expr)"), makeNimstrLit("                   (comp_for | (\',\' (test | star_expr))* [\',\'])) )"), [], makeNimstrLit("classdef: \'class\' NAME [\'(\' [arglist] \')\'] \':\' suite"), [], makeNimstrLit("arglist: argument (\',\' argument)*  [\',\']"), [], makeNimstrLit("# The reason that keywords are test nodes instead of NAME is that using NAME"), makeNimstrLit("# results in an ambiguity. ast.c makes sure it\'s a NAME."), makeNimstrLit("# \"test \'=\' test\" is really \"keyword \'=\' test\", but we have no such token."), makeNimstrLit("# These need to be in a single rule to avoid grammar that is ambiguous"), makeNimstrLit("# to our LL(1) parser. Even though \'test\' includes \'*expr\' in star_expr,"), makeNimstrLit("# we explicitly match \'*\' here, too, to give it proper precedence."), makeNimstrLit("# Illegal combinations and orderings are blocked in ast.c:"), makeNimstrLit("# multiple (test comp_for) arguments are blocked; keyword unpackings"), makeNimstrLit("# that precede iterable unpackings are blocked; etc."), makeNimstrLit("argument: ( test [comp_for] |"), makeNimstrLit("            test \'=\' test |"), makeNimstrLit("            \'**\' test |"), makeNimstrLit("            \'*\' test )"), [], makeNimstrLit("comp_iter: comp_for | comp_if"), makeNimstrLit("sync_comp_for: \'for\' exprlist \'in\' or_test [comp_iter]"), makeNimstrLit("comp_for: [\'async\'] sync_comp_for"), makeNimstrLit("comp_if: \'if\' test_nocond [comp_iter]"), [], makeNimstrLit("# not used in grammar, but may appear in \"node\" passed from Parser to Compiler"), makeNimstrLit("encoding_decl: NAME"), [], makeNimstrLit("yield_expr: \'yield\' [yield_arg]"), makeNimstrLit("yield_arg: \'from\' test | testlist"), []], NTI133824);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}

function nimMax(a_16958, b_16959) {
		var Tmp1;

	var result_16960 = 0;

	BeforeRet: do {
		if ((b_16959 <= a_16958)) {
		Tmp1 = a_16958;
		}
		else {
		Tmp1 = b_16959;
		}
		
		result_16960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16960;

}
var ConstSet2 = setConstr(32, 9, 11, 13, 10, 12);

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}
var ConstSet3 = setConstr([97, 122], [65, 90], 95);

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}

function genericReset(x_17690, ti_17691) {
	var result_17692 = null;

		result_17692 = null;
		switch (ti_17691.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (is_fat_pointer_17201(ti_17691)) {
			        result_17692 = [null, 0];
      
			}
			
			break;
		case 19:
			      result_17692 = {};
    
			break;
		case 18:
		case 17:
			if ((ti_17691.kind == 17)) {
			result_17692 = {m_type: ti_17691};
			}
			else {
				result_17692 = {};
			}
			
			break;
		case 24:
		case 27:
			      result_17692 = [];
    
			break;
		case 4:
		case 16:
			      result_17692 = new Array(x_17690.length);
      for (var i = 0; i < x_17690.length; ++i) {
        result_17692[i] = genericReset(x_17690[i], ti_17691.base);
      }
    
			break;
		default: 
			break;
		}

	return result_17692;

}

function reprEnum(e_18481, typ_18482) {
	var result_18483 = null;

	var F={procname:"system.reprEnum",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/reprjs.nim",line:0};
	framePtr = F;
		if (!(is_undefined_18485(typ_18482.node.sons[e_18481]))) {
		F.line = 38;
		result_18483 = nimCopy(null, makeNimstrLit(typ_18482.node.sons[e_18481].name), NTI138);
		}
		else {
			F.line = 40;
			result_18483 = nimCopy(null, (cstrToNimstr((e_18481)+"")).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}
		
	framePtr = F.prev;

	return result_18483;

}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}

function SetPlus(a_16382, b_16383) {
		    var result = {};
    for (var elem in a_16382) { result[elem] = true; }
    for (var elem in b_16383) { result[elem] = true; }
    return result;
  

	
}

function SetCard(a_16293) {
		    var result = 0;
    for (var elem in a_16293) { ++result; }
    return result;
  

	
}

function isObj(obj_17838, subclass_17839) {
	var result_17840 = false;

	BeforeRet: do {
		var x_17841 = obj_17838;
		if ((x_17841 == subclass_17839)) {
		result_17840 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_17841 == subclass_17839))) break L2;
					if ((x_17841 == null)) {
					result_17840 = false;
					break BeforeRet;
					}
					
					x_17841 = x_17841.base;
				}
		} while(false);
		result_17840 = true;
		break BeforeRet;
	} while (false);

	return result_17840;

}
var ConstSet4 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet5 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr(101, 69);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);

function nimParseBiggestFloat(s_17938, number_17940, number_17940_Idx, start_17941) {
	var result_17943 = 0;

	var F={procname:"system.nimParseBiggestFloat",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/jssys.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 673;
		var esign_17944 = 1.0000000000000000e+00;
		F.line = 674;
		var sign_17945 = 1.0000000000000000e+00;
		F.line = 675;
		var i_17946 = start_17941;
		F.line = 676;
		var exponent_17947 = 0;
		F.line = 677;
		var flags_17948 = 0;
		F.line = 678;
		number_17940[number_17940_Idx] = 0.0;
		if ((s_17938[i_17946] == 43)) {
		F.line = 679;
		i_17946 += 1;
		}
		else {
		if ((s_17938[i_17946] == 45)) {
		F.line = 681;
		sign_17945 = -1.0000000000000000e+00;
		F.line = 682;
		i_17946 += 1;
		}
		}
		if (((s_17938[i_17946] == 78) || (s_17938[i_17946] == 110))) {
		if (((s_17938[(i_17946 + 1)] == 65) || (s_17938[(i_17946 + 1)] == 97))) {
		if (((s_17938[(i_17946 + 2)] == 78) || (s_17938[(i_17946 + 2)] == 110))) {
		if (!((ConstSet4[s_17938[(i_17946 + 3)]] != undefined))) {
		F.line = 687;
		number_17940[number_17940_Idx] = NaN;
		F.line = 688;
		result_17943 = ((i_17946 + 3) - start_17941);
		break BeforeRet;
		}
		
		}
		
		}
		
		F.line = 689;
		result_17943 = 0;
		break BeforeRet;
		}
		
		if (((s_17938[i_17946] == 73) || (s_17938[i_17946] == 105))) {
		if (((s_17938[(i_17946 + 1)] == 78) || (s_17938[(i_17946 + 1)] == 110))) {
		if (((s_17938[(i_17946 + 2)] == 70) || (s_17938[(i_17946 + 2)] == 102))) {
		if (!((ConstSet5[s_17938[(i_17946 + 3)]] != undefined))) {
		F.line = 694;
		number_17940[number_17940_Idx] = (Infinity * sign_17945);
		F.line = 695;
		result_17943 = ((i_17946 + 3) - start_17941);
		break BeforeRet;
		}
		
		}
		
		}
		
		F.line = 696;
		result_17943 = 0;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 697;
				L2: while (true) {
				if (!(ConstSet6[s_17938[i_17946]] != undefined)) break L2;
					F.line = 699;
					flags_17948 = (flags_17948 | 1);
					F.line = 700;
					number_17940[number_17940_Idx] = ((number_17940[number_17940_Idx] * 1.0000000000000000e+01) + (s_17938[i_17946] - 48));
					F.line = 701;
					i_17946 += 1;
					L3: do {
						F.line = 702;
							L4: while (true) {
							if (!(s_17938[i_17946] == 95)) break L4;
								F.line = 702;
								i_17946 += 1;
							}
					} while(false);
				}
		} while(false);
		if ((s_17938[i_17946] == 46)) {
		F.line = 705;
		var hd_18027 = 1.0000000000000000e+00;
		F.line = 706;
		i_17946 += 1;
		L5: do {
			F.line = 707;
				L6: while (true) {
				if (!(ConstSet7[s_17938[i_17946]] != undefined)) break L6;
					F.line = 709;
					flags_17948 = (flags_17948 | 2);
					F.line = 710;
					number_17940[number_17940_Idx] = ((number_17940[number_17940_Idx] * 1.0000000000000000e+01) + (s_17938[i_17946] - 48));
					F.line = 711;
					hd_18027 = (hd_18027 * 1.0000000000000000e+01);
					F.line = 712;
					i_17946 += 1;
					L7: do {
						F.line = 713;
							L8: while (true) {
							if (!(s_17938[i_17946] == 95)) break L8;
								F.line = 713;
								i_17946 += 1;
							}
					} while(false);
				}
		} while(false);
		F.line = 714;
		number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] / hd_18027);
		}
		
		if ((flags_17948 == 0)) {
		F.line = 716;
		result_17943 = 0;
		break BeforeRet;
		}
		
		if ((ConstSet8[s_17938[i_17946]] != undefined)) {
		F.line = 719;
		i_17946 += 1;
		if ((s_17938[i_17946] == 43)) {
		F.line = 721;
		i_17946 += 1;
		}
		else {
		if ((s_17938[i_17946] == 45)) {
		F.line = 723;
		esign_17944 = -1.0000000000000000e+00;
		F.line = 724;
		i_17946 += 1;
		}
		}
		if (!((ConstSet9[s_17938[i_17946]] != undefined))) {
		F.line = 726;
		result_17943 = 0;
		break BeforeRet;
		}
		
		L9: do {
			F.line = 727;
				L10: while (true) {
				if (!(ConstSet10[s_17938[i_17946]] != undefined)) break L10;
					F.line = 728;
					exponent_17947 = (((exponent_17947 * 10) + s_17938[i_17946]) - 48);
					F.line = 729;
					i_17946 += 1;
					L11: do {
						F.line = 730;
							L12: while (true) {
							if (!(s_17938[i_17946] == 95)) break L12;
								F.line = 730;
								i_17946 += 1;
							}
					} while(false);
				}
		} while(false);
		}
		
		F.line = 732;
		var hd_18165 = ten_to_the_power_of_17904(exponent_17947);
		if ((0.0 < esign_17944)) {
		F.line = 733;
		number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] * hd_18165);
		}
		else {
			F.line = 734;
			number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] / hd_18165);
		}
		
		F.line = 736;
		number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] * sign_17945);
		F.line = 737;
		result_17943 = (i_17946 - start_17941);
	} while (false);
	framePtr = F.prev;

	return result_17943;

}

function reraiseException() {
		if ((lastJSError == null)) {
		var e_16033 = null;
		e_16033 = {m_type: NTI3866, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16033.message = nimCopy(null, makeNimstrLit("no exception to reraise"), NTI138);
		e_16033.parent = null;
		raiseException(e_16033, "ReraiseError");
		}
		else {
			if ((excHandler == 0)) {
			if (is_nim_exception_15277()) {
			unhandledException(lastJSError);
			}
			
			}
			
			throw lastJSError;
		}
		

	
}

function negInt(a_16783) {
	var result_16784 = 0;

		result_16784 = (a_16783 * -1);

	return result_16784;

}

function absInt(a_16819) {
		var Tmp1;

	var result_16820 = 0;

		if ((a_16819 < 0)) {
		Tmp1 = (a_16819 * -1);
		}
		else {
		Tmp1 = a_16819;
		}
		
		result_16820 = Tmp1;

	return result_16820;

}

function modInt(a_16675, b_16676) {
		    if (b_16676 == 0) raiseDivByZero();
    if (b_16676 == -1 && a_16675 == 2147483647) raiseOverflow();
    return Math.trunc(a_16675 % b_16676);
  

	
}
var ConstSet11 = setConstr(60, 62, 94);
var ConstSet12 = setConstr(60, 62, 94);
var ConstSet13 = setConstr(45, 43, 32);
var ConstSet14 = setConstr([48, 57]);
var ConstSet15 = setConstr([48, 57]);
var ConstSet16 = setConstr([48, 57]);
var ConstSet17 = setConstr([65, 90], [97, 122]);
				var magic_names_157558 = nimCopy(null, [makeNimstrLit("__add__"), makeNimstrLit("__sub__"), makeNimstrLit("__mul__"), makeNimstrLit("__truediv__"), makeNimstrLit("__floordiv__"), makeNimstrLit("__mod__"), makeNimstrLit("__pow__"), makeNimstrLit("__not__"), makeNimstrLit("__negative__"), makeNimstrLit("__positive__"), makeNimstrLit("__abs__"), makeNimstrLit("__index__"), makeNimstrLit("__bool__"), makeNimstrLit("__and__"), makeNimstrLit("__xor__"), makeNimstrLit("__or__"), makeNimstrLit("__lt__"), makeNimstrLit("__le__"), makeNimstrLit("__eq__"), makeNimstrLit("__ne__"), makeNimstrLit("__gt__"), makeNimstrLit("__ge__"), makeNimstrLit("__contains__"), makeNimstrLit("__len__"), makeNimstrLit("__str__"), makeNimstrLit("__repr__"), makeNimstrLit("__new__"), makeNimstrLit("__init__"), makeNimstrLit("__getattr__"), makeNimstrLit("__setattr__"), makeNimstrLit("__hash__"), makeNimstrLit("__call__"), makeNimstrLit("__getitem__"), makeNimstrLit("__setitem__"), makeNimstrLit("__get__"), makeNimstrLit("__set__"), makeNimstrLit("__iter__"), makeNimstrLit("__iternext__")], NTI157559);
		var types_offsets_277053 = nimCopy(null, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 34, 35, 36, 37, 38, 39, 34, 34, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 64, 64, 65, 66, 64, 64, 64, 64, 67, 68, 64, 64, 64, 64, 64, 64, 64, 64, 69, 70, 71, 72, 73, 64, 64, 64, 74, 75, 76, 77, 78, 79, 64, 64, 80, 81, 34, 34, 34, 34, 34, 34, 82, 34, 34, 34, 34, 34, 83, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 84, 85, 86, 87, 34, 34, 34, 88, 34, 34, 34, 89, 90, 34, 34, 34, 34, 34, 91, 34, 34, 34, 92, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 93, 94, 95, 34, 34, 34, 34, 34, 34, 96, 97, 34, 34, 34, 34, 34, 34, 34, 34, 98, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 99, 34, 34, 34, 34, 34, 34, 34, 34, 100, 34, 34, 34, 34, 96, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 99, 34, 34, 34, 34, 34, 34, 101, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 102, 103, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 104, 105, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 106, 34, 34, 34, 34, 34, 34, 34, 34, 34, 107, 34, 34, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 120, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 121, 122, 123, 124, 125, 126, 34, 34, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 64, 137, 138, 139, 140, 141, 142, 64, 34, 34, 143, 64, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 64, 155, 64, 156, 64, 157, 158, 159, 160, 161, 162, 163, 64, 164, 165, 64, 166, 167, 168, 169, 64, 170, 171, 64, 64, 172, 173, 64, 64, 174, 175, 176, 177, 64, 178, 64, 64, 34, 34, 34, 34, 34, 34, 34, 179, 180, 34, 181, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 34, 34, 34, 34, 34, 34, 182, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 34, 34, 183, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 34, 34, 184, 185, 186, 187, 64, 64, 64, 64, 188, 189, 190, 191, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 192, 34, 34, 34, 34, 34, 193, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 194, 34, 34, 195, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 196, 197, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 198, 199, 200, 201, 202, 64, 203, 204, 205, 206, 207, 208, 209, 210, 64, 64, 64, 64, 211, 212, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 213, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 214, 215, 64, 64, 64, 64, 64, 216, 217, 64, 64, 218, 219, 64, 64, 64, 64, 220, 221, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 222, 223, 224, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 82, 225, 34, 226, 227, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 228, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 229, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 230, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 231, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 232, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 233, 34, 234, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 235, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 236, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 228, 34, 34, 237, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 106, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], NTI277054);
		var types_indices_277234 = nimCopy(null, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 5, 0, 0, 0, 6, 5, 0, 7, 7, 7, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 5, 5, 3, 3, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 3, 3, 3, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 5, 3, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 3, 5, 3, 3, 5, 5, 4, 3, 5, 5, 5, 4, 4, 4, 4, 3, 8, 5, 3, 8, 5, 3, 8, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 8, 5, 3, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3, 5, 3, 3, 5, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 4, 0, 3, 5, 0, 0, 5, 5, 5, 5, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 0, 3, 0, 3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 3, 3, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 3, 5, 0, 3, 5, 3, 3, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 4, 0, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 0, 4, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 3, 0, 3, 0, 3, 0, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 5, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 5, 3, 3, 3, 5, 5, 3, 3, 3, 5, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 0, 5, 3, 3, 3, 3, 5, 4, 4, 4, 4, 5, 0, 0, 5, 5, 3, 3, 0, 0, 0, 0, 0, 3, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 3, 5, 9, 9, 9, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 3, 5, 3, 3, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 4, 4, 4, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 9, 9, 9, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 4, 4, 9, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 0, 0, 3, 5, 3, 5, 4, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 5, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 0, 3, 3, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 5, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], NTI277235);
		var types_data_277237 = nimCopy(null, [0, 64, 129, 176, 128, 168, 2, 4, 160, 132, 180, 172], NTI277238);
		var nums_279349 = nimCopy(null, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], NTI279086);
				var tolower_ranges_50536 = nimCopy(null, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 398, 399, 702, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1025, 1036, 580, 1038, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 548, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 8544, 8559, 516, 9398, 9423, 526, 65313, 65338, 532], NTI50537);
				var tolower_singlets_50648 = nimCopy(null, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 416, 501, 418, 501, 420, 501, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 902, 538, 908, 564, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1217, 501, 1219, 501, 1223, 501, 1227, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1272, 501, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491], NTI50649);
				var toupper_ranges_49743 = nimCopy(null, [97, 122, 468, 224, 246, 468, 248, 254, 468, 598, 599, 295, 600, 601, 298, 650, 651, 283, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1105, 1116, 420, 1118, 1119, 420, 1377, 1414, 452, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 8560, 8575, 484, 9424, 9449, 474, 65345, 65370, 468], NTI49744);
				var toupper_singlets_49852 = nimCopy(null, [255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 409, 499, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 595, 290, 596, 294, 603, 297, 608, 295, 611, 293, 616, 291, 617, 289, 623, 289, 626, 287, 643, 282, 648, 282, 658, 281, 940, 462, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1224, 499, 1228, 499, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1273, 499, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8131, 509, 8165, 507, 8179, 509], NTI49853);
		var props_offsets_260203 = nimCopy(null, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 41, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 101, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 102, 103, 41, 41, 41, 41, 41, 41, 41, 41, 104, 41, 41, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 122, 123, 124, 125, 126, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 137, 41, 41, 144, 137, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 156, 158, 156, 159, 160, 161, 162, 163, 164, 165, 137, 166, 167, 137, 168, 169, 170, 171, 137, 172, 173, 137, 137, 174, 175, 137, 137, 176, 177, 178, 179, 137, 180, 137, 137, 41, 41, 41, 41, 41, 41, 41, 181, 182, 41, 183, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 41, 41, 41, 41, 184, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 185, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 186, 187, 188, 189, 137, 137, 137, 137, 190, 191, 192, 193, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 194, 41, 41, 41, 41, 41, 195, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 196, 41, 41, 197, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 198, 199, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 78, 200, 201, 202, 203, 204, 205, 137, 206, 207, 208, 209, 210, 211, 212, 213, 78, 78, 78, 78, 214, 215, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 216, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 217, 218, 219, 156, 156, 156, 156, 156, 220, 221, 156, 156, 222, 223, 156, 156, 224, 225, 226, 227, 228, 137, 72, 229, 72, 72, 72, 72, 72, 230, 231, 232, 233, 234, 235, 236, 237, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 239, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 240, 41, 241, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 242, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 243, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 121, 121, 121, 121, 244, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 245, 246, 247, 248, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 249, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 249], NTI260204);
		var props_indices_268070 = nimCopy(null, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 5, 5, 6, 7, 6, 5, 5, 8, 9, 5, 10, 11, 12, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 5, 14, 14, 14, 5, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 8, 5, 9, 16, 17, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 8, 14, 9, 14, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 5, 7, 7, 7, 7, 20, 5, 21, 20, 22, 23, 14, 24, 20, 21, 25, 26, 27, 27, 21, 28, 5, 5, 21, 27, 22, 29, 30, 30, 30, 5, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 14, 15, 31, 31, 31, 31, 31, 15, 18, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 14, 18, 32, 32, 32, 32, 32, 18, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 18, 33, 28, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 33, 28, 15, 18, 31, 32, 31, 32, 31, 32, 28, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 31, 32, 31, 32, 31, 32, 28, 18, 15, 15, 18, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 15, 15, 15, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 18, 15, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 15, 18, 15, 18, 18, 15, 18, 15, 31, 32, 15, 15, 15, 18, 15, 18, 15, 15, 18, 18, 34, 15, 18, 18, 18, 34, 34, 34, 34, 33, 35, 28, 33, 35, 28, 33, 35, 28, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 33, 35, 28, 31, 32, 15, 15, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 18, 18, 18, 18, 18, 15, 15, 18, 15, 15, 18, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 38, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 16, 16, 16, 16, 16, 16, 21, 21, 21, 21, 21, 21, 16, 16, 36, 36, 36, 36, 36, 16, 16, 16, 16, 16, 16, 16, 37, 16, 38, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 40, 40, 39, 40, 39, 40, 39, 39, 41, 42, 42, 42, 42, 41, 43, 42, 42, 42, 42, 42, 44, 44, 45, 45, 45, 45, 46, 46, 42, 42, 42, 42, 45, 45, 42, 45, 45, 42, 42, 47, 47, 47, 47, 48, 42, 42, 42, 42, 40, 40, 40, 49, 49, 39, 49, 49, 50, 40, 42, 42, 42, 40, 40, 40, 42, 42, 51, 40, 40, 40, 42, 42, 42, 42, 40, 41, 42, 42, 40, 52, 53, 53, 52, 53, 53, 52, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 15, 18, 15, 18, 54, 16, 15, 18, 55, 55, 36, 18, 18, 18, 56, 15, 55, 55, 55, 55, 21, 57, 31, 56, 31, 31, 31, 55, 31, 55, 31, 31, 32, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 15, 15, 15, 15, 15, 15, 31, 31, 32, 32, 32, 32, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 32, 32, 32, 15, 28, 28, 33, 58, 58, 28, 28, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 28, 28, 28, 18, 33, 28, 14, 15, 18, 33, 15, 18, 18, 15, 15, 15, 31, 31, 15, 31, 15, 15, 15, 31, 15, 15, 15, 15, 31, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 18, 32, 18, 18, 18, 32, 18, 18, 18, 18, 32, 32, 32, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 59, 40, 40, 40, 40, 40, 60, 60, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 38, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 28, 18, 61, 62, 55, 55, 20, 20, 7, 63, 42, 40, 40, 40, 40, 42, 40, 40, 40, 64, 42, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 64, 65, 40, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 81, 40, 42, 81, 74, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 84, 84, 84, 84, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 85, 85, 85, 85, 85, 85, 14, 14, 86, 6, 6, 87, 11, 88, 20, 20, 40, 40, 40, 40, 40, 40, 40, 40, 89, 90, 91, 88, 92, 93, 88, 88, 94, 94, 95, 95, 95, 95, 95, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 96, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 97, 98, 99, 89, 90, 91, 100, 101, 39, 39, 45, 42, 40, 40, 40, 40, 40, 42, 40, 40, 42, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 6, 103, 103, 88, 94, 94, 104, 94, 94, 94, 94, 105, 105, 105, 105, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 94, 95, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 88, 94, 40, 40, 40, 40, 40, 40, 40, 85, 20, 40, 40, 40, 40, 42, 40, 96, 96, 40, 40, 20, 42, 40, 40, 42, 94, 94, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94, 94, 94, 106, 106, 94, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 93, 92, 94, 107, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 40, 42, 40, 40, 42, 40, 40, 42, 42, 42, 40, 42, 42, 40, 42, 40, 40, 40, 42, 40, 42, 40, 42, 40, 42, 40, 40, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 40, 40, 40, 42, 40, 109, 109, 20, 5, 5, 5, 109, 63, 63, 42, 110, 110, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 109, 40, 40, 40, 40, 40, 40, 40, 40, 40, 109, 40, 40, 40, 109, 40, 40, 40, 40, 40, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 42, 42, 42, 63, 63, 81, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 93, 94, 94, 94, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 42, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 85, 42, 40, 40, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 97, 98, 99, 40, 40, 40, 42, 40, 40, 42, 42, 40, 40, 40, 40, 40, 51, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 112, 34, 34, 34, 34, 34, 51, 111, 113, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 114, 111, 111, 34, 40, 42, 40, 40, 51, 51, 51, 115, 115, 115, 115, 115, 115, 115, 115, 34, 34, 51, 51, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 55, 34, 34, 34, 34, 55, 55, 117, 34, 118, 111, 111, 51, 51, 51, 51, 55, 55, 111, 111, 55, 55, 119, 119, 114, 34, 55, 55, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 115, 115, 55, 115, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 7, 7, 120, 120, 120, 120, 120, 120, 59, 7, 34, 61, 40, 55, 55, 51, 51, 111, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 115, 55, 34, 115, 55, 34, 34, 55, 55, 117, 55, 111, 111, 111, 51, 51, 55, 55, 55, 55, 51, 51, 55, 55, 51, 51, 114, 55, 55, 55, 51, 55, 55, 55, 55, 55, 55, 55, 115, 115, 115, 34, 55, 115, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 51, 51, 34, 34, 34, 51, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 111, 111, 111, 51, 51, 51, 51, 51, 55, 51, 51, 111, 55, 111, 111, 114, 55, 55, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 7, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 55, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 118, 51, 111, 51, 51, 51, 51, 55, 55, 111, 119, 55, 55, 119, 119, 114, 55, 55, 55, 55, 55, 55, 55, 55, 121, 118, 55, 55, 55, 55, 115, 115, 55, 34, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 59, 34, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 34, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 55, 34, 34, 112, 34, 55, 55, 55, 34, 34, 55, 34, 55, 34, 34, 55, 55, 55, 34, 34, 55, 55, 55, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 118, 111, 51, 111, 111, 55, 55, 55, 111, 111, 111, 55, 119, 119, 119, 114, 55, 55, 34, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 20, 20, 20, 20, 20, 20, 7, 20, 55, 55, 55, 55, 55, 51, 111, 111, 111, 51, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 51, 51, 51, 111, 111, 111, 111, 55, 51, 51, 122, 55, 51, 51, 51, 114, 55, 55, 55, 55, 55, 55, 55, 123, 124, 55, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 59, 34, 51, 111, 111, 61, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 111, 126, 119, 111, 118, 111, 111, 55, 126, 119, 119, 55, 119, 119, 51, 114, 55, 55, 55, 55, 55, 55, 55, 118, 118, 55, 55, 55, 55, 55, 55, 55, 34, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 114, 114, 34, 118, 111, 111, 51, 51, 51, 51, 55, 111, 111, 111, 55, 119, 119, 119, 114, 34, 59, 55, 55, 55, 55, 34, 34, 34, 118, 120, 120, 120, 120, 120, 120, 120, 34, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 59, 34, 34, 34, 34, 34, 34, 55, 55, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 127, 55, 55, 55, 55, 118, 111, 111, 51, 51, 51, 55, 51, 55, 111, 111, 119, 111, 119, 119, 119, 118, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 111, 111, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 128, 128, 114, 55, 55, 55, 55, 7, 34, 34, 34, 34, 34, 34, 38, 51, 129, 129, 129, 129, 51, 51, 51, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 55, 34, 55, 55, 34, 34, 55, 34, 55, 55, 34, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 55, 34, 55, 55, 34, 34, 55, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 130, 130, 55, 51, 51, 34, 55, 55, 34, 34, 34, 34, 34, 55, 38, 55, 131, 131, 131, 131, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 22, 22, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 59, 59, 59, 61, 61, 61, 61, 61, 61, 61, 61, 132, 61, 61, 61, 61, 61, 61, 59, 61, 59, 59, 59, 42, 42, 59, 59, 59, 59, 59, 59, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 59, 42, 59, 42, 59, 133, 8, 9, 8, 9, 111, 111, 34, 34, 34, 115, 34, 34, 34, 34, 55, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 115, 34, 34, 34, 55, 55, 55, 55, 134, 135, 136, 137, 136, 136, 138, 136, 138, 135, 135, 135, 135, 51, 111, 135, 136, 40, 40, 114, 61, 40, 40, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 136, 51, 51, 51, 51, 55, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 136, 51, 51, 51, 55, 59, 59, 59, 59, 59, 59, 59, 59, 42, 59, 59, 59, 59, 59, 59, 55, 59, 59, 61, 61, 61, 61, 61, 59, 59, 59, 59, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 111, 111, 51, 121, 51, 51, 111, 51, 51, 51, 51, 51, 117, 111, 114, 114, 111, 111, 51, 51, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 111, 111, 51, 51, 34, 34, 34, 34, 51, 51, 51, 34, 111, 111, 111, 34, 34, 111, 111, 111, 111, 111, 111, 111, 34, 34, 34, 51, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 51, 51, 111, 111, 111, 111, 111, 111, 42, 34, 111, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 111, 111, 111, 51, 59, 59, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 55, 55, 55, 55, 55, 15, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 36, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 40, 40, 40, 61, 61, 61, 61, 61, 61, 61, 61, 61, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 18, 18, 18, 18, 18, 18, 55, 55, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 4, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 8, 9, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 61, 61, 140, 140, 140, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 51, 51, 114, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 114, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 111, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 111, 111, 111, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 114, 51, 61, 61, 61, 38, 61, 61, 61, 7, 34, 40, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 62, 5, 5, 5, 5, 51, 51, 51, 24, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 65, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 51, 51, 51, 111, 111, 111, 111, 51, 51, 111, 111, 111, 55, 55, 55, 55, 111, 111, 51, 111, 111, 111, 111, 111, 111, 64, 40, 42, 55, 55, 55, 55, 20, 55, 55, 55, 5, 5, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 42, 111, 111, 51, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 111, 51, 51, 51, 51, 51, 51, 51, 55, 114, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 111, 111, 51, 51, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 42, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 61, 61, 61, 38, 61, 61, 61, 61, 61, 61, 55, 55, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 60, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 111, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 34, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 118, 51, 51, 51, 51, 51, 119, 51, 119, 111, 111, 119, 119, 51, 119, 141, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 61, 61, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 42, 40, 40, 40, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 51, 51, 111, 111, 51, 51, 141, 114, 51, 51, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 111, 51, 51, 111, 111, 111, 51, 111, 51, 51, 51, 141, 141, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 51, 117, 55, 55, 55, 61, 61, 61, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 15, 15, 15, 61, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 61, 47, 42, 42, 42, 42, 42, 40, 40, 42, 42, 42, 42, 40, 111, 47, 47, 47, 47, 47, 47, 47, 34, 34, 34, 34, 42, 34, 34, 34, 34, 111, 111, 40, 34, 34, 111, 40, 40, 55, 55, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40, 40, 42, 40, 40, 40, 40, 40, 40, 40, 42, 40, 40, 53, 142, 42, 44, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 65, 65, 42, 55, 40, 52, 42, 40, 42, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 32, 32, 32, 28, 143, 18, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 15, 18, 15, 18, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 55, 31, 55, 31, 55, 31, 55, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 55, 32, 32, 31, 31, 31, 146, 145, 21, 144, 21, 21, 57, 32, 32, 32, 55, 32, 32, 31, 146, 31, 146, 145, 57, 57, 57, 32, 32, 32, 144, 55, 55, 32, 32, 31, 31, 31, 146, 55, 57, 57, 57, 32, 32, 32, 144, 32, 32, 32, 32, 31, 31, 31, 146, 31, 57, 147, 147, 55, 55, 32, 32, 32, 55, 32, 32, 31, 146, 31, 146, 145, 147, 21, 55, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 24, 24, 24, 150, 151, 62, 152, 62, 62, 62, 62, 5, 153, 23, 29, 8, 23, 23, 29, 8, 23, 5, 5, 5, 5, 153, 153, 153, 5, 154, 155, 156, 157, 158, 159, 160, 19, 6, 6, 6, 161, 161, 5, 153, 153, 5, 23, 29, 5, 153, 5, 153, 17, 17, 5, 5, 5, 162, 8, 9, 153, 153, 153, 5, 5, 5, 5, 5, 5, 5, 5, 14, 5, 17, 5, 5, 153, 5, 5, 5, 5, 5, 5, 5, 149, 24, 24, 24, 24, 24, 163, 164, 165, 166, 167, 24, 24, 24, 24, 24, 24, 27, 36, 55, 55, 27, 27, 27, 27, 27, 27, 168, 168, 169, 170, 171, 36, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 168, 168, 169, 170, 171, 55, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 55, 55, 55, 7, 7, 7, 7, 7, 7, 7, 7, 172, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 40, 40, 47, 47, 40, 40, 40, 40, 47, 47, 47, 40, 40, 60, 60, 60, 60, 40, 60, 60, 60, 47, 47, 40, 42, 40, 47, 47, 42, 42, 42, 42, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 174, 174, 33, 174, 20, 174, 174, 33, 20, 174, 28, 33, 33, 33, 28, 28, 33, 33, 33, 28, 20, 33, 174, 20, 14, 33, 33, 33, 33, 33, 20, 20, 174, 174, 174, 20, 33, 20, 146, 20, 33, 20, 146, 146, 33, 33, 25, 28, 33, 33, 15, 33, 28, 22, 22, 22, 22, 28, 20, 174, 28, 28, 33, 33, 169, 14, 14, 14, 14, 33, 28, 28, 28, 28, 20, 14, 20, 20, 18, 59, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 140, 140, 140, 15, 18, 140, 140, 140, 140, 30, 20, 20, 55, 55, 55, 55, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 176, 176, 20, 20, 20, 20, 14, 20, 20, 14, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 176, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 177, 176, 176, 20, 20, 14, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 14, 14, 14, 176, 14, 14, 176, 14, 14, 14, 14, 14, 10, 26, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 169, 169, 14, 169, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 14, 176, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 176, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 14, 14, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 20, 20, 20, 20, 20, 20, 20, 178, 179, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 30, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 169, 169, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 181, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 15, 18, 15, 15, 15, 18, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 18, 15, 18, 18, 18, 18, 18, 18, 36, 36, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 20, 20, 20, 20, 20, 20, 15, 18, 15, 18, 40, 40, 40, 15, 18, 55, 55, 55, 55, 55, 5, 5, 5, 5, 125, 5, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 18, 55, 55, 55, 55, 55, 18, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 36, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 114, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 5, 23, 29, 23, 29, 5, 5, 5, 23, 29, 5, 23, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 5, 5, 62, 5, 23, 29, 5, 5, 23, 29, 8, 9, 8, 9, 8, 9, 8, 9, 5, 5, 5, 5, 5, 37, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 62, 5, 5, 5, 5, 62, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 174, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 174, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 149, 5, 5, 5, 20, 38, 34, 140, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 62, 8, 9, 9, 20, 140, 140, 140, 140, 140, 140, 140, 140, 140, 182, 65, 41, 64, 183, 183, 62, 38, 38, 38, 38, 38, 174, 20, 175, 175, 175, 38, 34, 5, 20, 20, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 112, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 55, 55, 184, 184, 21, 21, 38, 185, 22, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 112, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 112, 112, 112, 112, 5, 38, 38, 185, 22, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 59, 59, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 55, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 120, 120, 120, 120, 120, 120, 120, 120, 174, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 59, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 5, 5, 5, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 34, 40, 60, 60, 60, 5, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 37, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 36, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 40, 40, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 16, 16, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 15, 18, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 37, 187, 187, 15, 18, 15, 18, 34, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 15, 18, 15, 15, 15, 15, 15, 18, 15, 18, 15, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 36, 36, 18, 34, 34, 34, 34, 34, 34, 34, 51, 34, 34, 34, 114, 34, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 51, 51, 111, 20, 20, 20, 20, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 59, 59, 7, 25, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 111, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 114, 51, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 34, 34, 34, 34, 34, 34, 61, 61, 61, 34, 61, 34, 34, 51, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 42, 42, 42, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 141, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 51, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 111, 111, 51, 51, 51, 51, 111, 111, 51, 111, 111, 111, 141, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 55, 38, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 51, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 111, 111, 51, 51, 111, 111, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 59, 59, 59, 34, 111, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 34, 40, 40, 42, 34, 34, 40, 40, 34, 34, 34, 34, 34, 40, 40, 34, 40, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 111, 111, 61, 61, 34, 38, 38, 111, 114, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 187, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 51, 111, 111, 51, 111, 111, 61, 111, 114, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 34, 115, 34, 115, 34, 34, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 115, 34, 115, 34, 34, 115, 115, 34, 34, 34, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 190, 191, 190, 192, 192, 192, 192, 192, 192, 192, 192, 192, 168, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 63, 190, 190, 190, 190, 190, 63, 190, 63, 190, 190, 63, 190, 190, 63, 190, 190, 190, 190, 190, 190, 190, 190, 190, 192, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 9, 8, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 93, 93, 93, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 194, 20, 93, 93, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 153, 153, 153, 153, 153, 153, 153, 170, 171, 153, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 40, 40, 153, 152, 152, 195, 195, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 5, 5, 170, 171, 153, 153, 153, 153, 195, 195, 195, 196, 153, 196, 55, 153, 196, 153, 153, 152, 170, 171, 170, 171, 170, 171, 161, 153, 153, 168, 197, 169, 169, 169, 55, 153, 172, 161, 153, 55, 55, 55, 55, 105, 105, 105, 94, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 24, 55, 153, 153, 161, 172, 161, 153, 153, 170, 171, 153, 168, 196, 197, 196, 196, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 196, 153, 169, 169, 169, 153, 153, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 170, 153, 171, 21, 195, 21, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 170, 169, 171, 169, 170, 171, 153, 170, 171, 153, 153, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 55, 55, 55, 172, 172, 169, 21, 174, 172, 172, 55, 174, 169, 169, 169, 169, 174, 174, 55, 163, 163, 163, 163, 163, 163, 163, 163, 163, 199, 199, 199, 20, 20, 163, 163, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 61, 5, 61, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 125, 125, 20, 59, 59, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 42, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 42, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 34, 34, 34, 34, 34, 34, 34, 34, 140, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 61, 140, 140, 140, 140, 140, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 84, 84, 84, 84, 84, 84, 63, 63, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 84, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 81, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 203, 203, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 63, 63, 63, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 202, 202, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 51, 51, 51, 63, 51, 51, 63, 63, 63, 63, 63, 51, 42, 51, 40, 84, 84, 84, 84, 63, 84, 84, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 40, 47, 42, 63, 63, 63, 63, 114, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 81, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 203, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 42, 63, 63, 63, 63, 202, 202, 202, 202, 202, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 5, 5, 5, 5, 5, 5, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 40, 40, 40, 40, 93, 93, 93, 93, 93, 93, 93, 93, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 63, 63, 63, 63, 63, 63, 63, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 42, 42, 40, 40, 40, 42, 40, 42, 42, 42, 42, 207, 207, 207, 207, 88, 88, 88, 88, 88, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 111, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 114, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 114, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 111, 111, 114, 113, 61, 61, 150, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 150, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 40, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 121, 51, 51, 51, 51, 111, 51, 122, 122, 51, 51, 51, 114, 114, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 34, 111, 111, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 141, 34, 34, 34, 34, 61, 61, 61, 61, 51, 117, 51, 51, 61, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 61, 34, 61, 61, 61, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 111, 111, 51, 141, 117, 51, 61, 61, 61, 61, 61, 61, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 111, 51, 51, 51, 51, 51, 51, 117, 114, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 51, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 117, 117, 34, 118, 111, 51, 111, 111, 111, 111, 55, 55, 111, 111, 55, 55, 119, 119, 141, 55, 55, 34, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 111, 111, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 55, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 114, 51, 51, 111, 117, 34, 34, 34, 34, 61, 61, 61, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 61, 55, 61, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 111, 111, 51, 51, 51, 51, 51, 51, 111, 121, 119, 119, 118, 119, 51, 51, 111, 114, 117, 34, 34, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 111, 111, 51, 51, 51, 51, 55, 55, 111, 111, 119, 119, 51, 51, 111, 114, 117, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 51, 111, 114, 51, 61, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 141, 117, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 111, 111, 51, 51, 51, 51, 111, 51, 51, 51, 51, 114, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 61, 61, 61, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 114, 117, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 51, 51, 51, 51, 51, 51, 126, 126, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 114, 51, 51, 51, 51, 111, 34, 51, 51, 51, 51, 61, 61, 61, 61, 61, 61, 61, 61, 114, 55, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 111, 111, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 51, 114, 61, 61, 61, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 111, 208, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 111, 51, 51, 51, 51, 51, 51, 51, 111, 51, 51, 111, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 55, 55, 55, 51, 55, 51, 51, 55, 51, 51, 51, 117, 51, 114, 114, 34, 51, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 55, 51, 51, 55, 111, 111, 51, 111, 114, 34, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 111, 111, 61, 61, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 55, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 47, 47, 47, 47, 47, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 40, 40, 61, 61, 61, 61, 61, 59, 59, 59, 59, 38, 38, 38, 38, 61, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 120, 120, 120, 120, 120, 120, 120, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 38, 38, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 59, 51, 47, 61, 24, 24, 24, 24, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 209, 209, 209, 209, 209, 209, 209, 210, 210, 47, 47, 47, 59, 59, 59, 211, 210, 210, 210, 210, 210, 24, 24, 24, 24, 24, 24, 24, 24, 42, 42, 42, 42, 42, 42, 42, 42, 59, 59, 40, 40, 40, 40, 40, 42, 42, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 209, 209, 209, 209, 209, 209, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 40, 40, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 55, 33, 33, 55, 55, 33, 55, 55, 33, 33, 55, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 55, 28, 55, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 55, 33, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 28, 55, 55, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 42, 42, 42, 42, 42, 42, 42, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 40, 40, 40, 40, 40, 40, 117, 63, 63, 63, 63, 63, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 63, 63, 63, 63, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 93, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 106, 207, 207, 207, 87, 207, 207, 207, 207, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 93, 105, 93, 93, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 93, 105, 93, 93, 93, 93, 93, 93, 105, 93, 93, 93, 93, 105, 93, 105, 93, 105, 93, 105, 105, 105, 93, 105, 105, 93, 105, 93, 93, 105, 93, 105, 93, 105, 93, 105, 93, 105, 93, 105, 105, 93, 105, 93, 93, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 105, 105, 105, 93, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 14, 14, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 125, 125, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 20, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 174, 174, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 180, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 180, 180, 180, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 55, 55, 55, 55, 55, 55, 180, 180, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 55, 55, 55, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 163, 163, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 163, 24, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 163, 163], NTI268071);
		var props_data_275248 = nimCopy(null, [[16384, 0, 14, 0], [16384, 0, 16, 0], [16384, 0, 15, 0], [16384, 0, 17, 0], [2048, 0, 17, 0], [33554432, 0, 18, 0], [33554432, 0, 10, 0], [134217728, 0, 10, 0], [2097152, 0, 18, 0], [4194304, 0, 18, 0], [67108864, 0, 9, 0], [33554432, 0, 12, 0], [1048576, 0, 9, 0], [256, 0, 8, 0], [67108864, 0, 18, 0], [4, 0, 0, 0], [268435456, 0, 18, 0], [524288, 0, 18, 0], [8, 0, 0, 0], [2048, 0, 12, 36], [536870912, 0, 18, 0], [268435456, 0, 18, 36], [2, 0, 0, 36], [8388608, 0, 18, 0], [32768, 0, 14, 0], [536870912, 0, 10, 0], [67108864, 0, 10, 0], [1024, 0, 8, 36], [8, 0, 0, 36], [16777216, 0, 18, 0], [1024, 0, 18, 36], [4, 0, 0, 48], [8, 0, 0, 48], [4, 0, 0, 36], [2, 0, 0, 0], [16, 0, 0, 36], [1, 0, 0, 36], [1, 0, 18, 0], [1, 0, 0, 0], [32, 230, 13, 10], [32, 230, 13, 0], [32, 232, 13, 0], [32, 220, 13, 0], [32, 216, 13, 10], [32, 202, 13, 0], [32, 220, 13, 10], [32, 202, 13, 10], [32, 1, 13, 0], [32, 1, 13, 10], [32, 230, 13, 53], [32, 240, 13, 10], [32, 0, 13, 0], [32, 233, 13, 0], [32, 234, 13, 0], [1, 0, 18, 53], [262144, 0, 0, 0], [33554432, 0, 18, 53], [268435456, 0, 18, 52], [4, 0, 0, 52], [536870912, 0, 0, 0], [128, 0, 13, 0], [33554432, 0, 0, 0], [1048576, 0, 18, 0], [262144, 0, 3, 0], [32, 222, 13, 0], [32, 228, 13, 0], [32, 10, 13, 0], [32, 11, 13, 0], [32, 12, 13, 0], [32, 13, 13, 0], [32, 14, 13, 0], [32, 15, 13, 0], [32, 16, 13, 0], [32, 17, 13, 0], [32, 18, 13, 0], [32, 19, 13, 0], [32, 20, 13, 0], [32, 21, 13, 0], [32, 22, 13, 0], [1048576, 0, 3, 0], [32, 23, 13, 0], [33554432, 0, 3, 0], [32, 24, 13, 0], [32, 25, 13, 0], [2, 0, 3, 0], [32768, 0, 11, 0], [67108864, 0, 4, 0], [134217728, 0, 4, 0], [33554432, 0, 4, 0], [32, 30, 13, 0], [32, 31, 13, 0], [32, 32, 13, 0], [32768, 0, 4, 0], [262144, 0, 4, 0], [2, 0, 4, 0], [2, 0, 4, 48], [1, 0, 4, 0], [32, 27, 13, 0], [32, 28, 13, 0], [32, 29, 13, 0], [32, 33, 13, 0], [32, 34, 13, 0], [256, 0, 11, 0], [33554432, 0, 11, 0], [32, 35, 13, 0], [2, 0, 4, 36], [536870912, 0, 4, 0], [32, 36, 13, 0], [256, 0, 3, 0], [1, 0, 3, 0], [134217728, 0, 3, 0], [64, 0, 0, 0], [2, 0, 0, 48], [32, 7, 13, 10], [32, 9, 13, 0], [2, 0, 0, 53], [256, 0, 0, 0], [32, 7, 13, 0], [64, 0, 0, 10], [64, 0, 0, 48], [1024, 0, 0, 0], [32, 0, 13, 10], [32, 0, 13, 48], [32, 84, 13, 0], [32, 91, 13, 10], [1024, 0, 18, 0], [32, 0, 0, 0], [32, 9, 13, 10], [32, 103, 13, 0], [32, 107, 13, 0], [32, 118, 13, 0], [32, 122, 13, 0], [33554432, 0, 0, 36], [32, 216, 13, 0], [32, 129, 13, 0], [32, 130, 13, 0], [32, 0, 13, 53], [32, 132, 13, 0], [32, 0, 13, 36], [2, 0, 0, 10], [512, 0, 0, 0], [64, 9, 0, 0], [32, 214, 13, 0], [8, 0, 0, 52], [8, 0, 0, 53], [16, 0, 0, 48], [4, 0, 0, 53], [268435456, 0, 18, 53], [2048, 0, 17, 53], [2048, 0, 17, 36], [32768, 0, 0, 0], [32768, 0, 3, 0], [1048576, 0, 18, 36], [33554432, 0, 18, 36], [4096, 0, 17, 0], [8192, 0, 15, 0], [32768, 0, 1, 0], [32768, 0, 5, 0], [32768, 0, 7, 0], [32768, 0, 2, 0], [32768, 0, 6, 0], [33554432, 0, 10, 36], [67108864, 0, 12, 0], [262144, 0, 14, 0], [32768, 0, 19, 0], [32768, 0, 20, 0], [32768, 0, 21, 0], [32768, 0, 22, 0], [67108864, 0, 9, 36], [67108864, 0, 18, 36], [2097152, 0, 18, 36], [4194304, 0, 18, 36], [134217728, 0, 10, 36], [262144, 0, 10, 0], [536870912, 0, 18, 36], [512, 0, 0, 36], [67108864, 0, 18, 48], [536870912, 0, 18, 48], [2097152, 0, 18, 53], [4194304, 0, 18, 53], [536870912, 0, 0, 36], [67108864, 0, 18, 53], [32, 218, 13, 0], [64, 224, 0, 0], [32, 8, 13, 10], [1, 0, 0, 48], [1024, 0, 0, 36], [268435456, 0, 0, 0], [65536, 0, 0, 0], [131072, 0, 0, 0], [2, 0, 3, 53], [32, 26, 13, 0], [2, 0, 3, 36], [268435456, 0, 4, 0], [134217728, 0, 4, 36], [524288, 0, 18, 36], [33554432, 0, 12, 36], [1048576, 0, 9, 36], [256, 0, 8, 36], [32768, 0, 18, 0], [512, 0, 18, 0], [1024, 0, 8, 0], [1024, 0, 3, 0], [536870912, 0, 3, 0], [4, 0, 3, 0], [8, 0, 3, 0], [1024, 0, 11, 0], [1024, 0, 4, 0], [32, 9, 0, 0], [536870912, 0, 0, 53], [64, 216, 0, 0], [64, 226, 0, 0], [67108864, 0, 0, 36]], NTI275249);
var ConstSet18 = setConstr(32);
var ConstSet19 = setConstr(13, 10);
var ConstSet20 = setConstr(2, 3, 4);
var ConstSet21 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);
var ConstSet22 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);
var ConstSet23 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);

function nimBoolToStr(x_15245) {
	var result_15246 = null;

		if (x_15245) {
		result_15246 = nimCopy(null, makeNimstrLit("true"), NTI138);
		}
		else {
			result_15246 = nimCopy(null, makeNimstrLit("false"), NTI138);
		}
		

	return result_15246;

}
var ConstSet24 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);
var ConstSet25 = setConstr(81, 82, 83, 84, 85, 86, 65, 88);
var ConstSet26 = setConstr(2, 1);
var ConstSet27 = setConstr(2, 1);
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_143246 = [0];
var object_id_157100 = [0];
var bltin_types_158717 = [null];

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function give_id_157814(obj_157816) {
	var F={procname:"pyobjectBase.giveId",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 173;
		obj_157816.id = object_id_157100[0];
		F.line = 175;
		object_id_157100[0] = addInt(object_id_157100[0], 1);
	framePtr = F.prev;

	
}

function is_power_of_two_128047(x_128049) {
		var Tmp1;

	var result_128050 = false;

	BeforeRet: do {
		if (!(0 < x_128049)) Tmp1 = false; else {			Tmp1 = ((x_128049 & (x_128049 - 1)) == 0);		}		result_128050 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_128050;

}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_20445 = null;
		F.line = 2916;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2918;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3872;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3879;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function init_table_158804(initial_size_158809) {
	var result_158811 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_158809))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_158811.counter = 0;
		F.line = 354;
		result_158811.data = new Array(chckRange(initial_size_158809, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_158809, 0, 2147483647);++i) {result_158811.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_158811;

}

function init_table_159031(initial_size_159036) {
	var result_159038 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_159036))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_159038.counter = 0;
		F.line = 354;
		result_159038.data = new Array(chckRange(initial_size_159036, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_159036, 0, 2147483647);++i) {result_159038.data[i]={Field0: 0, Field1: null, Field2: {Field0: null, Field1: null}};}	framePtr = F.prev;

	return result_159038;

}

function new_py_type_private_158731(name_158733) {
	var result_158734 = null;

	var F={procname:"pyobjectBase.newPyTypePrivate",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 187;
		result_158734 = {m_type: NTI157280, name: null, base: null, kind: 0, magicMethods: {Field0: null, Field1: null, Field2: null, Field3: null, Field4: null, Field5: null, Field6: null, Field7: null, Field8: null, Field9: null, Field10: null, Field11: null, Field12: null, Field13: null, Field14: null, Field15: null, Field16: null, Field17: null, Field18: null, Field19: null, Field20: null, Field21: null, Field22: null, Field23: null, Field24: null, Field25: null, Field26: null, Field27: null, Field28: null, Field29: null, Field30: null, Field31: null, Field32: null, Field33: null, Field34: null, Field35: null, Field36: null, Field37: null}, bltinMethods: {data: null, counter: 0}, getsetDescr: {data: null, counter: 0}, dict: null, id: 0, pyType: null};
		F.line = 189;
		give_id_157814(result_158734);
		F.line = 190;
		result_158734.name = nimCopy(null, name_158733, NTI138);
		F.line = 191;
		nimCopy(result_158734.bltinMethods, init_table_158804(64), NTI157294);
		F.line = 192;
		nimCopy(result_158734.getsetDescr, init_table_159031(64), NTI157326);
		F.line = 193;
		if (bltin_types_158717[0] != null) { bltin_types_158717[0].push(result_158734); } else { bltin_types_158717[0] = [result_158734]; };
	framePtr = F.prev;

	return result_158734;

}
var py_object_type_159247 = new_py_type_private_158731(makeNimstrLit("object"));

function new_py_type_159261(name_159263) {
	var result_159264 = null;

	var F={procname:"pyobjectBase.newPyType",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 200;
		result_159264 = new_py_type_private_158731(name_159263);
		F.line = 201;
		result_159264.base = py_object_type_159247;
	framePtr = F.prev;

	return result_159264;

}

function new_175206() {
	var result_175211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_175401 = null;
		F.line = 211;
		r_175401 = {m_type: NTI175084, str: null, id: 0, pyType: null};
		F.line = 212;
		result_175211 = r_175401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_175211;

}

function new_py_str_simple_175201() {
	var result_175203 = null;

	var F={procname:"stringobject.newPyStrSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_175424 = new_175206();
		F.line = 561;
		obj_175424.pyType = py_str_object_type_175090;
		F.line = 563;
		give_id_157814(obj_175424);
		result_175203 = obj_175424;
	framePtr = F.prev;

	return result_175203;

}

function new_py_str_default_175821(args_175039) {
	var result_175824 = null;

	var F={procname:"stringobject.newPyStrDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_175824 = new_py_str_simple_175201();
	framePtr = F.prev;

	return result_175824;

}
var py_str_object_type_175090 = new_py_type_159261(makeNimstrLit("Str"));
py_str_object_type_175090.kind = 10;
py_str_object_type_175090.magicMethods.Field26 = new_py_str_default_175821;

function new_py_string_176075(str_176077) {
	var result_176078 = null;

	var F={procname:"stringobject.newPyString",prev:framePtr,filename:"../Objects/stringobject.nim",line:0};
	framePtr = F;
		F.line = 13;
		result_176078 = new_py_str_simple_175201();
		F.line = 14;
		result_176078.str = nimCopy(null, str_176077, NTI138);
	framePtr = F.prev;

	return result_176078;

}
var new_py_str_176092 = new_py_string_176075;

function init_table_204069(initial_size_204074) {
	var result_204076 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_204074))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_204076.counter = 0;
		F.line = 354;
		result_204076.data = new Array(chckRange(initial_size_204074, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_204074, 0, 2147483647);++i) {result_204076.data[i]={Field0: 0, Field1: null, Field2: 0};}	framePtr = F.prev;

	return result_204076;

}

function next_power_of_two_128066(x_128068) {
	var result_128069 = 0;

		result_128069 = (x_128068 - 1);
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 16));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 8));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 4));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 2));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 1));
		result_128069 += (1 + ((x_128068 <= 0) ? 1:0));

	return result_128069;

}

function raiseDivByZero() {
		var e_16095 = null;
		e_16095 = {m_type: NTI3844, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16095.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_16095.parent = null;
		raiseException(e_16095, "DivByZeroError");

	
}

function right_size_146861(count_146863) {
	var result_146864 = 0;

	var F={procname:"tables.rightSize",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 150;
		result_146864 = next_power_of_two_128066(addInt(divInt(mulInt(count_146863, 3), 2), 4));
	framePtr = F.prev;

	return result_146864;

}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function HEX21HEX26_143057(h_143059, val_143060) {
	var result_143061 = 0;

	var F={procname:"hashes.!&",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 52;
		result_143061 = ((h_143059 + val_143060) >>> 0);
		F.line = 53;
		result_143061 = ((result_143061 + (result_143061 << 10)) >>> 0);
		F.line = 54;
		result_143061 = (result_143061 ^ ((result_143061 >>> 0) >>> 6));
	framePtr = F.prev;

	return result_143061;

}

function HEX21HEX24_143111(h_143113) {
	var result_143114 = 0;

	var F={procname:"hashes.!$",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 59;
		result_143114 = ((h_143113 + (h_143113 << 3)) >>> 0);
		F.line = 60;
		result_143114 = (result_143114 ^ ((result_143114 >>> 0) >>> 11));
		F.line = 61;
		result_143114 = ((result_143114 + (result_143114 << 15)) >>> 0);
	framePtr = F.prev;

	return result_143114;

}

function hash_143900(x_143902) {
	var result_143903 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 132;
		var h_143904 = 0;
		L1: do {
			F.line = 133;
			var i_143916 = 0;
			F.line = 2104;
			var colontmp__143924 = 0;
			F.line = 133;
			colontmp__143924 = subInt((x_143902 != null ? x_143902.length : 0), 1);
			F.line = 2107;
			var res_143927 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_143927 <= colontmp__143924)) break L3;
						F.line = 2109;
						i_143916 = res_143927;
						F.line = 134;
						h_143904 = HEX21HEX26_143057(h_143904, x_143902[chckIndx(i_143916, 0, x_143902.length+0-1)-0]);
						F.line = 2110;
						res_143927 = addInt(res_143927, 1);
					}
			} while(false);
		} while(false);
		F.line = 135;
		result_143903 = HEX21HEX24_143111(h_143904);
	framePtr = F.prev;

	return result_143903;

}

function is_filled_146491(hcode_146493) {
	var result_146494 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_146494 = !((hcode_146493 == 0));
	framePtr = F.prev;

	return result_146494;

}

function next_try_146614(h_146616, max_hash_146617) {
	var result_146618 = 0;

	var F={procname:"tables.nextTry",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_146618 = (addInt(h_146616, 1) & max_hash_146617);
	framePtr = F.prev;

	return result_146618;

}

function raw_get_204430(t_204435, key_204437, hc_204439, hc_204439_Idx) {
						var Tmp3;

	var result_204440 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_204439[hc_204439_Idx] = hash_143900(key_204437);
		if ((hc_204439[hc_204439_Idx] == 0)) {
		F.line = 45;
		hc_204439[hc_204439_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_204452 = (hc_204439[hc_204439_Idx] & (t_204435.data != null ? (t_204435.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_204435.data[chckIndx(h_204452, 0, t_204435.data.length+0-1)-0].Field0)) break L2;
						if (!(t_204435.data[chckIndx(h_204452, 0, t_204435.data.length+0-1)-0].Field0 == hc_204439[hc_204439_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_204435.data[chckIndx(h_204452, 0, t_204435.data.length+0-1)-0].Field1, key_204437);						}					if (Tmp3) {
					F.line = 38;
					result_204440 = h_204452;
					break BeforeRet;
					}
					
					F.line = 39;
					h_204452 = next_try_146614(h_204452, (t_204435.data != null ? (t_204435.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_204440 = subInt(-1, h_204452);
	} while (false);
	framePtr = F.prev;

	return result_204440;

}

function must_rehash_146509(length_146511, counter_146512) {
	var result_146513 = false;

	var F={procname:"tables.mustRehash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		if (!((counter_146512 < length_146511))) {
		F.line = 24;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim(24, 9) `\x0Acounter < length` "));
		}
		
		F.line = 25;
		result_146513 = ((mulInt(length_146511, 2) < mulInt(counter_146512, 3)) || (subInt(length_146511, counter_146512) < 4));
	framePtr = F.prev;

	return result_146513;

}

function raw_insert_206902(t_206909, data_206913, data_206913_Idx, key_206915, val_206917, hc_206919, h_206921) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_206913[data_206913_Idx][chckIndx(h_206921, 0, data_206913[data_206913_Idx].length+0-1)-0].Field1 = nimCopy(null, key_206915, NTI138);
		F.line = 65;
		data_206913[data_206913_Idx][chckIndx(h_206921, 0, data_206913[data_206913_Idx].length+0-1)-0].Field2 = val_206917;
		F.line = 66;
		data_206913[data_206913_Idx][chckIndx(h_206921, 0, data_206913[data_206913_Idx].length+0-1)-0].Field0 = hc_206919;
	framePtr = F.prev;

	
}

function enlarge_205658(t_205665) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_205673 = null;
		F.line = 314;
		n_205673 = new Array(chckRange(mulInt((t_205665.data != null ? t_205665.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_205665.data != null ? t_205665.data.length : 0), 2), 0, 2147483647);++i) {n_205673[i]={Field0: 0, Field1: null, Field2: 0};}		F.line = 315;
		var Tmp1 = t_205665.data; t_205665.data = n_205673; n_205673 = Tmp1;		L2: do {
			F.line = 316;
			var i_205928 = 0;
			F.line = 2088;
			var colontmp__207643 = 0;
			F.line = 316;
			colontmp__207643 = (n_205673 != null ? (n_205673.length-1) : -1);
			F.line = 2094;
			var res_207646 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_207646 <= colontmp__207643)) break L4;
						F.line = 2096;
						i_205928 = res_207646;
						F.line = 317;
						var eh_206164 = n_205673[chckIndx(i_205928, 0, n_205673.length+0-1)-0].Field0;
						if (is_filled_146491(eh_206164)) {
						F.line = 319;
						var j_206173 = (eh_206164 & (t_205665.data != null ? (t_205665.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_205665.data[chckIndx(j_206173, 0, t_205665.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_206173 = next_try_146614(j_206173, (t_205665.data != null ? (t_205665.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_206902(t_205665, t_205665, "data", n_205673[chckIndx(i_205928, 0, n_205673.length+0-1)-0].Field1, n_205673[chckIndx(i_205928, 0, n_205673.length+0-1)-0].Field2, eh_206164, j_206173);
						}
						
						F.line = 2097;
						res_207646 = addInt(res_207646, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_207664(t_207669, key_207671, hc_207673) {
	var result_207674 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_207683 = (hc_207673 & (t_207669.data != null ? (t_207669.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_207669.data[chckIndx(h_207683, 0, t_207669.data.length+0-1)-0].Field0)) break L2;
					if (((t_207669.data[chckIndx(h_207683, 0, t_207669.data.length+0-1)-0].Field0 == hc_207673) && eqStrings(t_207669.data[chckIndx(h_207683, 0, t_207669.data.length+0-1)-0].Field1, key_207671))) {
					F.line = 38;
					result_207674 = h_207683;
					break BeforeRet;
					}
					
					F.line = 39;
					h_207683 = next_try_146614(h_207683, (t_207669.data != null ? (t_207669.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_207674 = subInt(-1, h_207683);
	} while (false);
	framePtr = F.prev;

	return result_207674;

}

function HEX5BHEX5DHEX3D_204416(t_204423, key_204425, val_204427) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_204428 = [0];
		F.line = 98;
		var index_205184 = raw_get_204430(t_204423, key_204425, hc_204428, 0);
		if ((0 <= index_205184)) {
		F.line = 99;
		t_204423.data[chckIndx(index_205184, 0, t_204423.data.length+0-1)-0].Field2 = val_204427;
		}
		else {
			if (must_rehash_146509((t_204423.data != null ? t_204423.data.length : 0), t_204423.counter)) {
			F.line = 90;
			enlarge_205658(t_204423);
			F.line = 91;
			index_205184 = raw_get_known_hc_207664(t_204423, key_204425, hc_204428[0]);
			}
			
			F.line = 92;
			index_205184 = subInt(-1, index_205184);
			F.line = 93;
			raw_insert_206902(t_204423, t_204423, "data", key_204425, val_204427, hc_204428[0], index_205184);
			F.line = 100;
			t_204423.counter = addInt(t_204423.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function to_table_204056(pairs_204063) {
	var result_204065 = [{data: null, counter: 0}];

	var F={procname:"toTable.toTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 358;
		nimCopy(result_204065[0], init_table_204069(right_size_146861(chckRange((pairs_204063 != null ? pairs_204063.length : 0), 0, 2147483647))), NTI203981);
		L1: do {
			F.line = 359;
			var key_204268 = null;
			F.line = 359;
			var val_204269 = 0;
			F.line = 2247;
			var i_208477 = 0;
			L2: do {
				F.line = 2248;
					L3: while (true) {
					if (!(i_208477 < (pairs_204063 != null ? pairs_204063.length : 0))) break L3;
						F.line = 2249;
						key_204268 = pairs_204063[chckIndx(i_208477, 0, pairs_204063.length+0-1)-0]["Field0"];
						F.line = 2249;
						val_204269 = pairs_204063[chckIndx(i_208477, 0, pairs_204063.length+0-1)-0]["Field1"];
						F.line = 359;
						HEX5BHEX5DHEX3D_204416(result_204065[0], key_204268, val_204269);
						F.line = 2250;
						i_208477 = addInt(i_208477, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_204065[0];

}

function new_table_203968(pairs_203975) {
	var result_203999 = null;

	var F={procname:"newTable.newTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 490;
		result_203999 = {data: null, counter: 0};
		F.line = 491;
		nimCopy(result_203999, to_table_204056(pairs_203975), NTI203981);
	framePtr = F.prev;

	return result_203999;

}
var str_token_map_208604 = new_table_203968([{Field0: makeNimstrLit("ENDMARKER"), Field1: 1}, {Field0: makeNimstrLit("NAME"), Field1: 2}, {Field0: makeNimstrLit("NUMBER"), Field1: 3}, {Field0: makeNimstrLit("STRING"), Field1: 4}, {Field0: makeNimstrLit("NEWLINE"), Field1: 5}, {Field0: makeNimstrLit("INDENT"), Field1: 6}, {Field0: makeNimstrLit("DEDENT"), Field1: 7}, {Field0: makeNimstrLit("("), Field1: 8}, {Field0: makeNimstrLit(")"), Field1: 9}, {Field0: makeNimstrLit("["), Field1: 10}, {Field0: makeNimstrLit("]"), Field1: 11}, {Field0: makeNimstrLit(":"), Field1: 12}, {Field0: makeNimstrLit(","), Field1: 13}, {Field0: makeNimstrLit(";"), Field1: 14}, {Field0: makeNimstrLit("+"), Field1: 15}, {Field0: makeNimstrLit("-"), Field1: 16}, {Field0: makeNimstrLit("*"), Field1: 17}, {Field0: makeNimstrLit("/"), Field1: 18}, {Field0: makeNimstrLit("|"), Field1: 19}, {Field0: makeNimstrLit("&"), Field1: 20}, {Field0: makeNimstrLit("<"), Field1: 21}, {Field0: makeNimstrLit(">"), Field1: 22}, {Field0: makeNimstrLit("="), Field1: 23}, {Field0: makeNimstrLit("."), Field1: 24}, {Field0: makeNimstrLit("%"), Field1: 25}, {Field0: makeNimstrLit("{"), Field1: 26}, {Field0: makeNimstrLit("}"), Field1: 27}, {Field0: makeNimstrLit("=="), Field1: 28}, {Field0: makeNimstrLit("!="), Field1: 29}, {Field0: makeNimstrLit("<="), Field1: 30}, {Field0: makeNimstrLit(">="), Field1: 31}, {Field0: makeNimstrLit("~"), Field1: 32}, {Field0: makeNimstrLit("^"), Field1: 33}, {Field0: makeNimstrLit("<<"), Field1: 34}, {Field0: makeNimstrLit(">>"), Field1: 35}, {Field0: makeNimstrLit("**"), Field1: 36}, {Field0: makeNimstrLit("+="), Field1: 37}, {Field0: makeNimstrLit("-="), Field1: 38}, {Field0: makeNimstrLit("*="), Field1: 39}, {Field0: makeNimstrLit("/="), Field1: 40}, {Field0: makeNimstrLit("%="), Field1: 41}, {Field0: makeNimstrLit("&="), Field1: 42}, {Field0: makeNimstrLit("|="), Field1: 43}, {Field0: makeNimstrLit("^="), Field1: 44}, {Field0: makeNimstrLit("<<="), Field1: 45}, {Field0: makeNimstrLit(">>="), Field1: 46}, {Field0: makeNimstrLit("**="), Field1: 47}, {Field0: makeNimstrLit("//"), Field1: 48}, {Field0: makeNimstrLit("//="), Field1: 49}, {Field0: makeNimstrLit("@"), Field1: 50}, {Field0: makeNimstrLit("@="), Field1: 51}, {Field0: makeNimstrLit("->"), Field1: 52}, {Field0: makeNimstrLit("..."), Field1: 53}, {Field0: makeNimstrLit("<>"), Field1: 54}, {Field0: makeNimstrLit("single_input"), Field1: 91}, {Field0: makeNimstrLit("file_input"), Field1: 92}, {Field0: makeNimstrLit("eval_input"), Field1: 93}, {Field0: makeNimstrLit("decorator"), Field1: 94}, {Field0: makeNimstrLit("decorators"), Field1: 95}, {Field0: makeNimstrLit("decorated"), Field1: 96}, {Field0: makeNimstrLit("async_funcdef"), Field1: 97}, {Field0: makeNimstrLit("funcdef"), Field1: 98}, {Field0: makeNimstrLit("parameters"), Field1: 99}, {Field0: makeNimstrLit("typedargslist"), Field1: 100}, {Field0: makeNimstrLit("tfpdef"), Field1: 101}, {Field0: makeNimstrLit("varargslist"), Field1: 102}, {Field0: makeNimstrLit("vfpdef"), Field1: 103}, {Field0: makeNimstrLit("stmt"), Field1: 104}, {Field0: makeNimstrLit("simple_stmt"), Field1: 105}, {Field0: makeNimstrLit("small_stmt"), Field1: 106}, {Field0: makeNimstrLit("expr_stmt"), Field1: 107}, {Field0: makeNimstrLit("annassign"), Field1: 108}, {Field0: makeNimstrLit("testlist_star_expr"), Field1: 109}, {Field0: makeNimstrLit("augassign"), Field1: 110}, {Field0: makeNimstrLit("del_stmt"), Field1: 111}, {Field0: makeNimstrLit("pass_stmt"), Field1: 112}, {Field0: makeNimstrLit("flow_stmt"), Field1: 113}, {Field0: makeNimstrLit("break_stmt"), Field1: 114}, {Field0: makeNimstrLit("continue_stmt"), Field1: 115}, {Field0: makeNimstrLit("return_stmt"), Field1: 116}, {Field0: makeNimstrLit("yield_stmt"), Field1: 117}, {Field0: makeNimstrLit("raise_stmt"), Field1: 118}, {Field0: makeNimstrLit("import_stmt"), Field1: 119}, {Field0: makeNimstrLit("import_name"), Field1: 120}, {Field0: makeNimstrLit("import_from"), Field1: 121}, {Field0: makeNimstrLit("import_as_name"), Field1: 122}, {Field0: makeNimstrLit("dotted_as_name"), Field1: 123}, {Field0: makeNimstrLit("import_as_names"), Field1: 124}, {Field0: makeNimstrLit("dotted_as_names"), Field1: 125}, {Field0: makeNimstrLit("dotted_name"), Field1: 126}, {Field0: makeNimstrLit("global_stmt"), Field1: 127}, {Field0: makeNimstrLit("nonlocal_stmt"), Field1: 128}, {Field0: makeNimstrLit("assert_stmt"), Field1: 129}, {Field0: makeNimstrLit("compound_stmt"), Field1: 130}, {Field0: makeNimstrLit("async_stmt"), Field1: 131}, {Field0: makeNimstrLit("if_stmt"), Field1: 132}, {Field0: makeNimstrLit("while_stmt"), Field1: 133}, {Field0: makeNimstrLit("for_stmt"), Field1: 134}, {Field0: makeNimstrLit("try_stmt"), Field1: 135}, {Field0: makeNimstrLit("with_stmt"), Field1: 136}, {Field0: makeNimstrLit("with_item"), Field1: 137}, {Field0: makeNimstrLit("except_clause"), Field1: 138}, {Field0: makeNimstrLit("suite"), Field1: 139}, {Field0: makeNimstrLit("test"), Field1: 140}, {Field0: makeNimstrLit("test_nocond"), Field1: 141}, {Field0: makeNimstrLit("lambdef"), Field1: 142}, {Field0: makeNimstrLit("lambdef_nocond"), Field1: 143}, {Field0: makeNimstrLit("or_test"), Field1: 144}, {Field0: makeNimstrLit("and_test"), Field1: 145}, {Field0: makeNimstrLit("not_test"), Field1: 146}, {Field0: makeNimstrLit("comparison"), Field1: 147}, {Field0: makeNimstrLit("comp_op"), Field1: 148}, {Field0: makeNimstrLit("star_expr"), Field1: 149}, {Field0: makeNimstrLit("expr"), Field1: 150}, {Field0: makeNimstrLit("xor_expr"), Field1: 151}, {Field0: makeNimstrLit("and_expr"), Field1: 152}, {Field0: makeNimstrLit("shift_expr"), Field1: 153}, {Field0: makeNimstrLit("arith_expr"), Field1: 154}, {Field0: makeNimstrLit("term"), Field1: 155}, {Field0: makeNimstrLit("factor"), Field1: 156}, {Field0: makeNimstrLit("power"), Field1: 157}, {Field0: makeNimstrLit("atom_expr"), Field1: 158}, {Field0: makeNimstrLit("atom"), Field1: 159}, {Field0: makeNimstrLit("testlist_comp"), Field1: 160}, {Field0: makeNimstrLit("trailer"), Field1: 161}, {Field0: makeNimstrLit("subscriptlist"), Field1: 162}, {Field0: makeNimstrLit("subscript"), Field1: 163}, {Field0: makeNimstrLit("sliceop"), Field1: 164}, {Field0: makeNimstrLit("exprlist"), Field1: 165}, {Field0: makeNimstrLit("testlist"), Field1: 166}, {Field0: makeNimstrLit("dictorsetmaker"), Field1: 167}, {Field0: makeNimstrLit("classdef"), Field1: 168}, {Field0: makeNimstrLit("arglist"), Field1: 169}, {Field0: makeNimstrLit("argument"), Field1: 170}, {Field0: makeNimstrLit("comp_iter"), Field1: 171}, {Field0: makeNimstrLit("sync_comp_for"), Field1: 172}, {Field0: makeNimstrLit("comp_for"), Field1: 173}, {Field0: makeNimstrLit("comp_if"), Field1: 174}, {Field0: makeNimstrLit("encoding_decl"), Field1: 175}, {Field0: makeNimstrLit("yield_expr"), Field1: 176}, {Field0: makeNimstrLit("yield_arg"), Field1: 177}, {Field0: makeNimstrLit("not"), Field1: 55}, {Field0: makeNimstrLit("if"), Field1: 56}, {Field0: makeNimstrLit("True"), Field1: 57}, {Field0: makeNimstrLit("break"), Field1: 58}, {Field0: makeNimstrLit("with"), Field1: 59}, {Field0: makeNimstrLit("and"), Field1: 60}, {Field0: makeNimstrLit("lambda"), Field1: 61}, {Field0: makeNimstrLit("is"), Field1: 62}, {Field0: makeNimstrLit("def"), Field1: 63}, {Field0: makeNimstrLit("from"), Field1: 64}, {Field0: makeNimstrLit("pass"), Field1: 65}, {Field0: makeNimstrLit("del"), Field1: 66}, {Field0: makeNimstrLit("False"), Field1: 67}, {Field0: makeNimstrLit("finally"), Field1: 68}, {Field0: makeNimstrLit("try"), Field1: 69}, {Field0: makeNimstrLit("assert"), Field1: 70}, {Field0: makeNimstrLit("async"), Field1: 71}, {Field0: makeNimstrLit("yield"), Field1: 72}, {Field0: makeNimstrLit("or"), Field1: 73}, {Field0: makeNimstrLit("in"), Field1: 74}, {Field0: makeNimstrLit("None"), Field1: 75}, {Field0: makeNimstrLit("for"), Field1: 76}, {Field0: makeNimstrLit("raise"), Field1: 77}, {Field0: makeNimstrLit("nonlocal"), Field1: 78}, {Field0: makeNimstrLit("else"), Field1: 79}, {Field0: makeNimstrLit("continue"), Field1: 80}, {Field0: makeNimstrLit("class"), Field1: 81}, {Field0: makeNimstrLit("except"), Field1: 82}, {Field0: makeNimstrLit("elif"), Field1: 83}, {Field0: makeNimstrLit("global"), Field1: 84}, {Field0: makeNimstrLit("return"), Field1: 85}, {Field0: makeNimstrLit("import"), Field1: 86}, {Field0: makeNimstrLit("while"), Field1: 87}, {Field0: makeNimstrLit("as"), Field1: 88}, {Field0: makeNimstrLit("await"), Field1: 89}]);

function init_table_212098(initial_size_212103) {
	var result_212124 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_212103))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_212124.counter = 0;
		F.line = 354;
		result_212124.data = new Array(chckRange(initial_size_212103, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_212103, 0, 2147483647);++i) {result_212124.data[i]={Field0: 0, Field1: 0, Field2: null};}	framePtr = F.prev;

	return result_212124;

}

function init_table_212230(initial_size_212235) {
	var result_212256 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_212235))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_212256.counter = 0;
		F.line = 354;
		result_212256.data = new Array(chckRange(initial_size_212235, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_212235, 0, 2147483647);++i) {result_212256.data[i]={Field0: 0, Field1: 0, Field2: {}};}	framePtr = F.prev;

	return result_212256;

}
var grammar_set_212224 = [init_table_212098(64)];
var first_set_212424 = [init_table_212230(64)];
var success_grammar_node_212501 = new_grammar_node_212465(makeNimstrLit("s"), []);

function nsuFindChar(s_136416, sub_136417, start_136418, last_136419) {
		var Tmp1;

	var result_136421 = 0;

	BeforeRet: do {
		if ((last_136419 == 0)) {
		Tmp1 = (s_136416 != null ? (s_136416.length-1) : -1);
		}
		else {
		Tmp1 = last_136419;
		}
		
		var last_136423 = Tmp1;
		L2: do {
			var i_136809 = 0;
			var colontmp__137013 = 0;
			colontmp__137013 = start_136418;
			var res_137016 = colontmp__137013;
			L3: do {
					L4: while (true) {
					if (!(res_137016 <= last_136423)) break L4;
						i_136809 = res_137016;
						if ((sub_136417 == s_136416[i_136809])) {
						result_136421 = i_136809;
						break BeforeRet;
						}
						
						res_137016 += 1;
					}
			} while(false);
		} while(false);
		result_136421 = -1;
		break BeforeRet;
	} while (false);

	return result_136421;

}

function quit_19421(errormsg_19423, errorcode_19424) {
	var F={procname:"system.quit",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3588;
		rawEcho(errormsg_19423);
		F.line = 3589;
		exit(errorcode_19424);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_48874(s_48879, x_48882) {
	var result_48883 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3657;
		var a_49001 = x_48882.a;
		F.line = 3658;
		var l_49201 = addInt(subInt(x_48882.b, a_49001), 1);
		F.line = 3659;
		result_48883 = nimCopy(null, mnewString(chckRange(l_49201, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 3660;
			var i_49211 = 0;
			F.line = 3617;
			var i_49223 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_49223 < l_49201)) break L3;
						F.line = 3619;
						i_49211 = i_49223;
						F.line = 3660;
						result_48883[chckIndx(i_49211, 0, result_48883.length+0-1)-0] = s_48879[chckIndx(addInt(i_49211, a_49001), 0, s_48879.length+0-1)-0];
						F.line = 3620;
						i_49223 = addInt(i_49223, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_48883;

}

function HEX2EHEX2E_48828(a_48833, b_48835) {
	var result_48837 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_48837.a = a_48833;
		F.line = 399;
		result_48837.b = b_48835;
	framePtr = F.prev;

	return result_48837;

}

function HEX5BHEX5D_213441(t_213448, key_213450) {
	var result_213452 = [null, 0];
	var result_213452_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_213454 = [0];
		F.line = 161;
		var index_213468 = raw_get_204430(t_213448, key_213450, hc_213454, 0);
		if ((0 <= index_213468)) {
		F.line = 162;
		result_213452 = t_213448.data[chckIndx(index_213468, 0, t_213448.data.length+0-1)-0]; result_213452_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_213807 = null;
			F.line = 2896;
			e_213807 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_213807.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(key_213450), NTI138);
			F.line = 2891;
			e_213807.parent = null;
			F.line = 165;
			raiseException(e_213807, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_213452, result_213452_Idx];

}

function HEX5BHEX5D_212903(t_212909, key_212911) {
	var result_212913 = [null, 0];
	var result_212913_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 432;
		var Tmp1 = HEX5BHEX5D_213441(t_212909, key_212911); result_212913 = Tmp1[0]; result_212913_Idx = Tmp1[1];
	framePtr = F.prev;

	return [result_212913, result_212913_Idx];

}

function skip_whitespace_37912(s_37914, start_37915) {
	var result_37917 = 0;

	var F={procname:"parseutils.skipWhitespace",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 156;
				L2: while (true) {
				if (!((addInt(start_37915, result_37917) < (s_37914 != null ? s_37914.length : 0)) && (ConstSet2[s_37914[chckIndx(addInt(start_37915, result_37917), 0, s_37914.length+0-1)-0]] != undefined))) break L2;
					F.line = 156;
					result_37917 = addInt(result_37917, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_37917;

}

function get_char_249532(grammar_249534) {
	var result_249535 = 0;

	var F={procname:"grammar.getChar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 339;
		grammar_249534.cursor = addInt(grammar_249534.cursor, skip_whitespace_37912(grammar_249534.grammarString, grammar_249534.cursor));
		F.line = 340;
		result_249535 = grammar_249534.grammarString[chckIndx(grammar_249534.cursor, 0, grammar_249534.grammarString.length+0-1)-0];
	framePtr = F.prev;

	return result_249535;

}

function HEX5BHEX5D_81105(s_81110, x_81113) {
	var result_81114 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3657;
		var a_81201 = x_81113.a;
		F.line = 3658;
		var l_81401 = addInt(subInt(subInt((s_81110 != null ? s_81110.length : 0), x_81113.b), a_81201), 1);
		F.line = 3659;
		result_81114 = nimCopy(null, mnewString(chckRange(l_81401, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 3660;
			var i_81411 = 0;
			F.line = 3617;
			var i_81423 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_81423 < l_81401)) break L3;
						F.line = 3619;
						i_81411 = i_81423;
						F.line = 3660;
						result_81114[chckIndx(i_81411, 0, result_81114.length+0-1)-0] = s_81110[chckIndx(addInt(i_81411, a_81201), 0, s_81110.length+0-1)-0];
						F.line = 3620;
						i_81423 = addInt(i_81423, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_81114;

}

function HEX2EHEX2E_81053(a_81058, b_81060) {
	var result_81068 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_81068.a = a_81058;
		F.line = 399;
		result_81068.b = b_81060;
	framePtr = F.prev;

	return result_81068;

}

function error_grammar_229447(grammar_229449) {
	var F={procname:"grammar.errorGrammar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 271;
		var s_229450 = nimCopy(null, grammar_229449.grammarString, NTI138);
		F.line = 272;
		var c_229451 = grammar_229449.cursor;
		F.line = 274;
		F.line = 274;
		var fmt_res_229455 = mnewString(0);
		F.line = 274;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(makeNimstrLit("invalid syntax for ")); } else { fmt_res_229455 = makeNimstrLit("invalid syntax for "); };
		F.line = 260;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(HEX5BHEX5D_48874(s_229450, HEX2EHEX2E_48828(0, subInt(c_229451, 1)))); } else { fmt_res_229455 = HEX5BHEX5D_48874(s_229450, HEX2EHEX2E_48828(0, subInt(c_229451, 1))).slice(); };
		F.line = 274;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(makeNimstrLit(" $$")); } else { fmt_res_229455 = makeNimstrLit(" $$"); };
		F.line = 268;
		if (fmt_res_229455 != null) { addChar(fmt_res_229455, s_229450[chckIndx(c_229451, 0, s_229450.length+0-1)-0]); } else { fmt_res_229455 = [s_229450[chckIndx(c_229451, 0, s_229450.length+0-1)-0]]; };
		F.line = 274;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(makeNimstrLit("$$ ")); } else { fmt_res_229455 = makeNimstrLit("$$ "); };
		F.line = 260;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(HEX5BHEX5D_81105(s_229450, HEX2EHEX2E_81053(addInt(c_229451, 1), 1))); } else { fmt_res_229455 = HEX5BHEX5D_81105(s_229450, HEX2EHEX2E_81053(addInt(c_229451, 1), 1)).slice(); };
		var msg_234443 = nimCopy(null, fmt_res_229455, NTI138);
		F.line = 2895;
		var e_234450 = null;
		F.line = 2896;
		e_234450 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 275;
		e_234450.message = nimCopy(null, msg_234443, NTI138);
		F.line = 2891;
		e_234450.parent = null;
		F.line = 275;
		raiseException(e_234450, "ValueError");
	framePtr = F.prev;

	
}

function match_c_212447(grammar_212449) {
	var result_250468 = null;

	var F={procname:"grammar.matchC",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 395;
		switch (get_char_249532(grammar_212449)) {
		case 91:
			F.line = 397;
			grammar_212449.cursor = addInt(grammar_212449.cursor, 1);
			break;
		default: 
			F.line = 399;
			error_grammar_229447(grammar_212449);
			break;
		}
		F.line = 400;
		result_250468 = match_f_212456(grammar_212449);
		F.line = 401;
		result_250468.repeat = 3;
		F.line = 402;
		switch (get_char_249532(grammar_212449)) {
		case 93:
			F.line = 404;
			grammar_212449.cursor = addInt(grammar_212449.cursor, 1);
			break;
		default: 
			F.line = 406;
			error_grammar_229447(grammar_212449);
			break;
		}
	framePtr = F.prev;

	return result_250468;

}

function match_d_212450(grammar_212452) {
	var result_250504 = null;

	var F={procname:"grammar.matchD",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 410;
		switch (get_char_249532(grammar_212452)) {
		case 40:
			F.line = 412;
			grammar_212452.cursor = addInt(grammar_212452.cursor, 1);
			break;
		default: 
			F.line = 414;
			error_grammar_229447(grammar_212452);
			break;
		}
		F.line = 415;
		result_250504 = match_f_212456(grammar_212452);
		F.line = 416;
		switch (get_char_249532(grammar_212452)) {
		case 41:
			F.line = 418;
			grammar_212452.cursor = addInt(grammar_212452.cursor, 1);
			break;
		default: 
			F.line = 420;
			error_grammar_229447(grammar_212452);
			break;
		}
	framePtr = F.prev;

	return result_250504;

}

function skip_until_38050(s_38052, until_38053, start_38054) {
					var Tmp3;

	var result_38056 = 0;

	var F={procname:"parseutils.skipUntil",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 182;
				L2: while (true) {
					if (!(addInt(start_38054, result_38056) < (s_38052 != null ? s_38052.length : 0))) Tmp3 = false; else {						Tmp3 = !((s_38052[chckIndx(addInt(result_38056, start_38054), 0, s_38052.length+0-1)-0] == until_38053));					}				if (!Tmp3) break L2;
					F.line = 182;
					result_38056 = addInt(result_38056, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_38056;

}

function init_212556(s_212562, initial_size_212564) {
	var F={procname:"init.init",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_212564))) {
		F.line = 400;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(400, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 401;
		s_212562.counter = 0;
		F.line = 402;
		s_212562.data = new Array(chckRange(initial_size_212564, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_212564, 0, 2147483647);++i) {s_212562.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_212530(initial_size_212534) {
	var result_212536 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 414;
		init_212556(result_212536[0], initial_size_212534);
	framePtr = F.prev;

	return result_212536[0];

}

function new_grammar_node_212465(name_212467, token_string_212468) {
			var Tmp1;

	var result_212519 = null;

	var F={procname:"grammar.newGrammarNode",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 93;
		result_212519 = {id: 0, father: null, repeat: 0, epsilonSet: {data: null, counter: 0}, kind: 0, token: 0, nextSet: {data: null, counter: 0}, children: null};
		F.line = 94;
		nimCopy(result_212519.epsilonSet, init_set_212530(64), NTI212034);
		F.line = 95;
		switch (name_212467[chckIndx(0, 0, name_212467.length+0-1)-0]) {
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 43:
		case 63:
		case 42:
			F.line = 97;
			result_212519.kind = name_212467[chckIndx(0, 0, name_212467.length+0-1)-0];
			break;
		case 97:
			F.line = 99;
			result_212519.kind = 97;
			F.line = 100;
			result_212519.token = (Tmp1 = HEX5BHEX5D_212903(str_token_map_208604, token_string_212468), Tmp1[0])[Tmp1[1]];
			F.line = 101;
			nimCopy(result_212519.nextSet, init_set_212530(64), NTI212034);
			break;
		case 115:
			F.line = 103;
			result_212519.kind = 115;
			F.line = 104;
			nimCopy(result_212519.nextSet, init_set_212530(64), NTI212034);
			break;
		default: 
			F.line = 2895;
			var e_214006 = null;
			F.line = 2896;
			e_214006 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 106;
			F.line = 106;
			var fmt_res_214016 = mnewString(0);
			F.line = 106;
			if (fmt_res_214016 != null) { fmt_res_214016 = (fmt_res_214016).concat(makeNimstrLit("unknown name: ")); } else { fmt_res_214016 = makeNimstrLit("unknown name: "); };
			F.line = 260;
			if (fmt_res_214016 != null) { fmt_res_214016 = (fmt_res_214016).concat(name_212467); } else { fmt_res_214016 = name_212467.slice(); };
			e_214006.message = nimCopy(null, fmt_res_214016, NTI138);
			F.line = 2891;
			e_214006.parent = null;
			F.line = 106;
			raiseException(e_214006, "ValueError");
			break;
		}
	framePtr = F.prev;

	return result_212519;

}

function skip_while_38080(s_38082, to_skip_38084, start_38085) {
	var result_38087 = 0;

	var F={procname:"parseutils.skipWhile",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 187;
				L2: while (true) {
				if (!((addInt(start_38085, result_38087) < (s_38082 != null ? s_38082.length : 0)) && (to_skip_38084[s_38082[chckIndx(addInt(result_38087, start_38085), 0, s_38082.length+0-1)-0]] != undefined))) break L2;
					F.line = 187;
					result_38087 = addInt(result_38087, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_38087;

}

function match_b_212444(grammar_212446) {
	var result_250258 = null;

	var F={procname:"grammar.matchB",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 375;
		switch (get_char_249532(grammar_212446)) {
		case 91:
			F.line = 377;
			result_250258 = match_c_212447(grammar_212446);
			break;
		case 40:
			F.line = 379;
			result_250258 = match_d_212450(grammar_212446);
			break;
		case 39:
			F.line = 381;
			grammar_212446.cursor = addInt(grammar_212446.cursor, 1);
			F.line = 382;
			var prev_250268 = grammar_212446.cursor;
			F.line = 383;
			grammar_212446.cursor = addInt(grammar_212446.cursor, skip_until_38050(grammar_212446.grammarString, 39, grammar_212446.cursor));
			F.line = 384;
			grammar_212446.cursor = addInt(grammar_212446.cursor, 1);
			F.line = 385;
			var substr_250329 = HEX5BHEX5D_48874(grammar_212446.grammarString, HEX2EHEX2E_48828(prev_250268, subInt(grammar_212446.cursor, 2)));
			F.line = 386;
			result_250258 = new_grammar_node_212465(makeNimstrLit("a"), substr_250329);
			break;
		default: 
			F.line = 388;
			var first_250330 = grammar_212446.cursor;
			F.line = 389;
			grammar_212446.cursor = addInt(grammar_212446.cursor, skip_while_38080(grammar_212446.grammarString, ConstSet3, grammar_212446.cursor));
			F.line = 390;
			var substr_250451 = HEX5BHEX5D_48874(grammar_212446.grammarString, HEX2EHEX2E_48828(first_250330, subInt(grammar_212446.cursor, 1)));
			F.line = 391;
			result_250258 = new_grammar_node_212465(makeNimstrLit("a"), substr_250451);
			break;
		}
	framePtr = F.prev;

	return result_250258;

}

function exhausted_249558(grammar_249560) {
	var result_249561 = false;

	var F={procname:"grammar.exhausted",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 344;
		result_249561 = (grammar_249560.cursor == (grammar_249560.grammarString != null ? grammar_249560.grammarString.length : 0));
	framePtr = F.prev;

	return result_249561;

}

function match_e_212453(grammar_212455) {
	var result_250539 = null;

	var F={procname:"grammar.matchE",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (exhausted_249558(grammar_212455)) {
		F.line = 425;
		break BeforeRet;
		}
		
		F.line = 426;
		switch (get_char_249532(grammar_212455)) {
		case 43:
			F.line = 428;
			result_250539 = new_grammar_node_212465(makeNimstrLit("+"), []);
			F.line = 429;
			grammar_212455.cursor = addInt(grammar_212455.cursor, 1);
			break;
		case 42:
			F.line = 432;
			result_250539 = new_grammar_node_212465(makeNimstrLit("*"), []);
			F.line = 433;
			grammar_212455.cursor = addInt(grammar_212455.cursor, 1);
			break;
		default: 
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_250539;

}

function match_h_212462(grammar_212464) {
	var result_251008 = null;

	var F={procname:"grammar.matchH",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (exhausted_249558(grammar_212464)) {
		F.line = 475;
		break BeforeRet;
		}
		
		F.line = 476;
		switch (get_char_249532(grammar_212464)) {
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 91:
		case 40:
		case 39:
		case 95:
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
			F.line = 478;
			result_251008 = match_a_212441(grammar_212464);
			break;
		default: 
			F.line = 480;
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_251008;

}

function add_child_234491(father_234493, child_234494) {
	var F={procname:"grammar.addChild",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 283;
		if (father_234493.children != null) { father_234493.children.push(child_234494); } else { father_234493.children = [child_234494]; };
		F.line = 284;
		child_234494.father = father_234493;
	framePtr = F.prev;

	
}

function is_grammar_terminator_212485(node_212487) {
		var Tmp1;

	var result_214033 = false;

	var F={procname:"grammar.isGrammarTerminator",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 111;
		if ((node_212487.kind == 97)) Tmp1 = true; else {			Tmp1 = (node_212487.kind == 115);		}		result_214033 = Tmp1;
	framePtr = F.prev;

	return result_214033;

}

function match_a_212441(grammar_212443) {
			var Tmp1;
			var Tmp2;

	var result_249578 = null;

	var F={procname:"grammar.matchA",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 349;
		var b_249579 = match_b_212444(grammar_212443);
		F.line = 350;
		var e_249580 = match_e_212453(grammar_212443);
		F.line = 351;
		var h_249581 = match_h_212462(grammar_212443);
		if (!((e_249580 == null))) {
		F.line = 353;
		switch (e_249580.kind) {
		case 43:
			if (!((b_249579.repeat == 0))) {
			F.line = 355;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(355, 14) `b.repeat == None` "));
			}
			
			F.line = 356;
			b_249579.repeat = 2;
			break;
		case 42:
			if (!((b_249579.repeat == 0))) {
			F.line = 358;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(358, 14) `b.repeat == None` "));
			}
			
			F.line = 359;
			b_249579.repeat = 1;
			break;
		default: 
			if (true) {
			F.line = 361;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(361, 14) `false` "));
			}
			
			break;
		}
		}
		
		if (!((h_249581 == null))) {
		F.line = 363;
		result_249578 = new_grammar_node_212465(makeNimstrLit("A"), []);
		F.line = 364;
		add_child_234491(result_249578, b_249579);
			if (!((h_249581.repeat == 0))) Tmp2 = true; else {				Tmp2 = (h_249581.kind == 70);			}			if (Tmp2) Tmp1 = true; else {				Tmp1 = is_grammar_terminator_212485(h_249581);			}		if (Tmp1) {
		F.line = 366;
		add_child_234491(result_249578, h_249581);
		}
		else {
			L3: do {
				F.line = 368;
				var child_250233 = null;
				F.line = 3909;
				var colontmp__250236 = null;
				F.line = 368;
				colontmp__250236 = h_249581.children;
				F.line = 3911;
				var i_250239 = 0;
				F.line = 3912;
				var l_250241 = (colontmp__250236 != null ? colontmp__250236.length : 0);
				L4: do {
					F.line = 3913;
						L5: while (true) {
						if (!(i_250239 < l_250241)) break L5;
							F.line = 3914;
							child_250233 = colontmp__250236[chckIndx(i_250239, 0, colontmp__250236.length+0-1)-0];
							F.line = 369;
							add_child_234491(result_249578, child_250233);
							F.line = 3915;
							i_250239 = addInt(i_250239, 1);
							if (!(((colontmp__250236 != null ? colontmp__250236.length : 0) == l_250241))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 371;
			result_249578 = b_249579;
		}
		
	framePtr = F.prev;

	return result_249578;

}

function concat_250859(seqs_250865) {
	var result_250867 = null;

	var F={procname:"concat.concat",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sequtils.nim",line:0};
	framePtr = F;
		F.line = 62;
		var l_250869 = 0;
		L1: do {
			F.line = 63;
			var seqitm_250908 = null;
			F.line = 2247;
			var i_250968 = 0;
			L2: do {
				F.line = 2248;
					L3: while (true) {
					if (!(i_250968 < (seqs_250865 != null ? seqs_250865.length : 0))) break L3;
						F.line = 2249;
						seqitm_250908 = seqs_250865[chckIndx(i_250968, 0, seqs_250865.length+0-1)-0];
						F.line = 63;
						l_250869 = addInt(l_250869, (seqitm_250908 != null ? seqitm_250908.length : 0));
						F.line = 2250;
						i_250968 = addInt(i_250968, 1);
					}
			} while(false);
		} while(false);
		F.line = 64;
		result_250867 = new Array(chckRange(l_250869, 0, 2147483647)); for (var i=0;i<chckRange(l_250869, 0, 2147483647);++i) {result_250867[i]=null;}		F.line = 65;
		var i_250936 = 0;
		L4: do {
			F.line = 66;
			var s_250944 = null;
			F.line = 2247;
			var i_250978 = 0;
			L5: do {
				F.line = 2248;
					L6: while (true) {
					if (!(i_250978 < (seqs_250865 != null ? seqs_250865.length : 0))) break L6;
						F.line = 2249;
						s_250944 = seqs_250865[chckIndx(i_250978, 0, seqs_250865.length+0-1)-0];
						L7: do {
							F.line = 67;
							var itm_250953 = null;
							F.line = 3911;
							var i_250973 = 0;
							F.line = 3912;
							var l_250975 = (s_250944 != null ? s_250944.length : 0);
							L8: do {
								F.line = 3913;
									L9: while (true) {
									if (!(i_250973 < l_250975)) break L9;
										F.line = 3914;
										itm_250953 = s_250944[chckIndx(i_250973, 0, s_250944.length+0-1)-0];
										F.line = 68;
										result_250867[chckIndx(i_250936, 0, result_250867.length+0-1)-0] = itm_250953;
										F.line = 69;
										i_250936 = addInt(i_250936, 1);
										F.line = 3915;
										i_250973 = addInt(i_250973, 1);
										if (!(((s_250944 != null ? s_250944.length : 0) == l_250975))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 2250;
						i_250978 = addInt(i_250978, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_250867;

}

function match_g_212459(grammar_212461) {
	var result_250824 = null;

	var F={procname:"grammar.matchG",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (exhausted_249558(grammar_212461)) {
		F.line = 460;
		break BeforeRet;
		}
		
		F.line = 461;
		switch (get_char_249532(grammar_212461)) {
		case 124:
			F.line = 463;
			result_250824 = new_grammar_node_212465(makeNimstrLit("G"), []);
			F.line = 464;
			grammar_212461.cursor = addInt(grammar_212461.cursor, 1);
			F.line = 465;
			add_child_234491(result_250824, match_a_212441(grammar_212461));
			F.line = 466;
			var g_250835 = match_g_212459(grammar_212461);
			if (!((g_250835 == null))) {
			F.line = 468;
			result_250824.children = nimCopy(null, concat_250859([result_250824.children, g_250835.children]), NTI250866);
			}
			
			break;
		default: 
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_250824;

}

function match_f_212456(grammar_212458) {
	var result_250574 = null;

	var F={procname:"grammar.matchF",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 439;
		var a_250575 = match_a_212441(grammar_212458);
		F.line = 440;
		var g_250576 = match_g_212459(grammar_212458);
		if (!((g_250576 == null))) {
		F.line = 442;
		result_250574 = new_grammar_node_212465(makeNimstrLit("F"), []);
		F.line = 443;
		add_child_234491(result_250574, a_250575);
		L1: do {
			F.line = 444;
			var child_250598 = null;
			F.line = 3909;
			var colontmp__250802 = null;
			F.line = 444;
			colontmp__250802 = g_250576.children;
			F.line = 3911;
			var i_250805 = 0;
			F.line = 3912;
			var l_250807 = (colontmp__250802 != null ? colontmp__250802.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_250805 < l_250807)) break L3;
						F.line = 3914;
						child_250598 = colontmp__250802[chckIndx(i_250805, 0, colontmp__250802.length+0-1)-0];
						F.line = 445;
						add_child_234491(result_250574, child_250598);
						F.line = 3915;
						i_250805 = addInt(i_250805, 1);
						if (!(((colontmp__250802 != null ? colontmp__250802.length : 0) == l_250807))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 447;
			switch (a_250575.kind) {
			case 97:
				F.line = 449;
				result_250574 = new_grammar_node_212465(makeNimstrLit("A"), []);
				F.line = 450;
				add_child_234491(result_250574, a_250575);
				break;
			case 65:
			case 70:
				F.line = 452;
				result_250574 = a_250575;
				break;
			default: 
				F.line = 454;
				rawEcho(nimCharToStr(a_250575.kind));
				if (true) {
				F.line = 455;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(455, 14) `false` "));
				}
				
				break;
			}
		}
		
	framePtr = F.prev;

	return result_250574;

}

function init_deque_220220(initial_size_220224) {
	var result_220240 = {data: null, head: 0, tail: 0, count: 0, mask: 0};

	var F={procname:"initDeque.initDeque",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_220224))) {
		F.line = 58;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim(58, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 59;
		result_220240.mask = subInt(initial_size_220224, 1);
		F.line = 60;
		result_220240.data = new Array(chckRange(initial_size_220224, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_220224, 0, 2147483647);++i) {result_220240.data[i]=null;}	framePtr = F.prev;

	return result_220240;

}

function new_seq_221003(len_221007) {
	var result_221009 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_221009 = new Array(len_221007); for (var i=0;i<len_221007;++i) {result_221009[i]=null;}	framePtr = F.prev;

	return result_221009;

}

function expand_if_needed_220468(deq_220474) {
	var F={procname:"expandIfNeeded.expandIfNeeded",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		F.line = 129;
		var cap_220475 = addInt(deq_220474.mask, 1);
		if ((cap_220475 <= deq_220474.count)) {
		F.line = 131;
		var n_221033 = new_seq_221003(chckRange(mulInt(cap_220475, 2), 0, 2147483647));
		L1: do {
			F.line = 132;
			var i_221081 = 0;
			F.line = 132;
			var x_221082 = null;
			F.line = 110;
			var colontmp__221088 = {data: null, head: 0, tail: 0, count: 0, mask: 0};
			F.line = 132;
			nimCopy(colontmp__221088, deq_220474, NTI220227);
			F.line = 112;
			var i_221092 = colontmp__221088.head;
			L2: do {
				F.line = 113;
				var c_221094 = 0;
				F.line = 3616;
				var colontmp__221096 = 0;
				F.line = 113;
				colontmp__221096 = colontmp__221088.count;
				F.line = 3617;
				var i_221098 = 0;
				L3: do {
					F.line = 3618;
						L4: while (true) {
						if (!(i_221098 < colontmp__221096)) break L4;
							F.line = 3619;
							c_221094 = i_221098;
							F.line = 114;
							i_221081 = c_221094;
							F.line = 114;
							x_221082 = colontmp__221088.data[chckIndx(i_221092, 0, colontmp__221088.data.length+0-1)-0];
							F.line = 133;
							n_221033[chckIndx(i_221081, 0, n_221033.length+0-1)-0] = x_221082;
							F.line = 115;
							i_221092 = (addInt(i_221092, 1) & colontmp__221088.mask);
							F.line = 3620;
							i_221098 = addInt(i_221098, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 134;
		deq_220474.data = n_221033;
		F.line = 135;
		deq_220474.mask = subInt(mulInt(cap_220475, 2), 1);
		F.line = 136;
		deq_220474.tail = deq_220474.count;
		F.line = 137;
		deq_220474.head = 0;
		}
		
	framePtr = F.prev;

	
}

function add_last_220442(deq_220448, item_220450) {
	var F={procname:"addLast.addLast",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		F.line = 148;
		expand_if_needed_220468(deq_220448);
		F.line = 149;
		deq_220448.count = addInt(deq_220448.count, 1);
		F.line = 150;
		deq_220448.data[chckIndx(deq_220448.tail, 0, deq_220448.data.length+0-1)-0] = item_220450;
		F.line = 151;
		deq_220448.tail = (addInt(deq_220448.tail, 1) & deq_220448.mask);
	framePtr = F.prev;

	
}

function len_221365(deq_221370) {
	var result_221371 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_221371 = deq_221370.count;
	framePtr = F.prev;

	return result_221371;

}

function pop_first_221403(deq_221409) {
	var result_221410 = null;

	var F={procname:"popFirst.popFirst",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		if ((deq_221409.count < 1)) {
		F.line = 2895;
		var e_222206 = null;
		F.line = 2896;
		e_222206 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 70;
		e_222206.message = nimCopy(null, makeNimstrLit("Empty deque."), NTI138);
		F.line = 2891;
		e_222206.parent = null;
		F.line = 70;
		raiseException(e_222206, "IndexError");
		}
		
		F.line = 169;
		deq_221409.count = subInt(deq_221409.count, 1);
		F.line = 170;
		result_221410 = deq_221409.data[chckIndx(deq_221409.head, 0, deq_221409.data.length+0-1)-0];
		F.line = 171;
deq_221409.data[chckIndx(deq_221409.head, 0, deq_221409.data.length+0-1)-0] = genericReset(deq_221409.data[chckIndx(deq_221409.head, 0, deq_221409.data.length+0-1)-0], NTI212017);
		F.line = 172;
		deq_221409.head = (addInt(deq_221409.head, 1) & deq_221409.mask);
	framePtr = F.prev;

	return result_221410;

}

function assign_id_212472(node_212474) {
	var F={procname:"grammar.assignId",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 162;
		var to_visit_220424 = [init_deque_220220(4)];
		F.line = 163;
		add_last_220442(to_visit_220424[0], node_212474);
		F.line = 164;
		var idx_221138 = 1;
		L1: do {
			F.line = 165;
				L2: while (true) {
				if (!(0 < len_221365(to_visit_220424[0]))) break L2;
					L3: do {
						F.line = 166;
						var node_222253 = pop_first_221403(to_visit_220424[0]);
						F.line = 167;
						node_222253.id = idx_221138;
						F.line = 168;
						idx_221138 = addInt(idx_221138, 1);
						if (is_grammar_terminator_212485(node_222253)) {
						F.line = 170;
						break L3;
						}
						
						L4: do {
							F.line = 171;
							var child_222273 = null;
							F.line = 3909;
							var colontmp__222304 = null;
							F.line = 171;
							colontmp__222304 = node_222253.children;
							F.line = 3911;
							var i_222307 = 0;
							F.line = 3912;
							var l_222309 = (colontmp__222304 != null ? colontmp__222304.length : 0);
							L5: do {
								F.line = 3913;
									L6: while (true) {
									if (!(i_222307 < l_222309)) break L6;
										F.line = 3914;
										child_222273 = colontmp__222304[chckIndx(i_222307, 0, colontmp__222304.length+0-1)-0];
										F.line = 172;
										add_last_220442(to_visit_220424[0], child_222273);
										F.line = 3915;
										i_222307 = addInt(i_222307, 1);
										if (!(((colontmp__222304 != null ? colontmp__222304.length : 0) == l_222309))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function pop_222358(s_222364, s_222364_Idx) {
	var result_222365 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_222373 = subInt((s_222364[s_222364_Idx] != null ? s_222364[s_222364_Idx].length : 0), 1);
		F.line = 2525;
		result_222365 = s_222364[s_222364_Idx][chckIndx(l_222373, 0, s_222364[s_222364_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_222364[s_222364_Idx].length < chckRange(l_222373, 0, 2147483647)) { for (var i=s_222364[s_222364_Idx].length;i<chckRange(l_222373, 0, 2147483647);++i) s_222364[s_222364_Idx].push(null); }
               else { s_222364[s_222364_Idx].length = chckRange(l_222373, 0, 2147483647); };
	framePtr = F.prev;

	return result_222365;

}

function is_valid_214572(s_214577) {
	var result_214578 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_214578 = (0 < (s_214577.data != null ? s_214577.data.length : 0));
	framePtr = F.prev;

	return result_214578;

}

function hash_143414(x_143416, x_143416_Idx) {
	var result_143417 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 85;
		      if (typeof x_143416 == "object") {
        if ("_NimID" in x_143416)
          result_143417 = x_143416["_NimID"];
        else {
          result_143417 = ++object_id_143246[0];
          x_143416["_NimID"] = result_143417;
        }
      }
    
	framePtr = F.prev;

	return result_143417;

}

function hash_212469(node_212471) {
	var result_234476 = 0;

	var F={procname:"grammar.hash",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 279;
		result_234476 = hash_143414(node_212471);
	framePtr = F.prev;

	return result_234476;

}

function is_filled_154282(hcode_154284) {
	var result_154285 = false;

	var F={procname:"sets.isFilled",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 63;
		result_154285 = !((hcode_154284 == 0));
	framePtr = F.prev;

	return result_154285;

}

function next_try_154431(h_154433, max_hash_154434) {
	var result_154435 = 0;

	var F={procname:"sets.nextTry",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 147;
		result_154435 = (addInt(h_154433, 1) & max_hash_154434);
	framePtr = F.prev;

	return result_154435;

}

function raw_get_215021(s_215026, key_215028, hc_215030, hc_215030_Idx) {
						var Tmp3;

	var result_215031 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_215035 = hash_212469(key_215028);
		if ((hc_215035 == 0)) {
		F.line = 164;
		hc_215035 = 314159265;
		}
		
		hc_215030[hc_215030_Idx] = hc_215035;
		F.line = 150;
		var h_215045 = (hc_215030[hc_215030_Idx] & (s_215026.data != null ? (s_215026.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_215026.data[chckIndx(h_215045, 0, s_215026.data.length+0-1)-0].Field0)) break L2;
						if (!(s_215026.data[chckIndx(h_215045, 0, s_215026.data.length+0-1)-0].Field0 == hc_215030[hc_215030_Idx])) Tmp3 = false; else {							Tmp3 = (s_215026.data[chckIndx(h_215045, 0, s_215026.data.length+0-1)-0].Field1 == key_215028);						}					if (Tmp3) {
					F.line = 157;
					result_215031 = h_215045;
					break BeforeRet;
					}
					
					F.line = 158;
					h_215045 = next_try_154431(h_215045, (s_215026.data != null ? (s_215026.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_215031 = subInt(-1, h_215045);
	} while (false);
	framePtr = F.prev;

	return result_215031;

}

function must_rehash_154361(length_154363, counter_154364) {
	var result_154365 = false;

	var F={procname:"sets.mustRehash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!((counter_154364 < length_154363))) {
		F.line = 134;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(134, 9) `\x0Acounter < length` "));
		}
		
		F.line = 135;
		result_154365 = ((mulInt(length_154363, 2) < mulInt(counter_154364, 3)) || (subInt(length_154363, counter_154364) < 4));
	framePtr = F.prev;

	return result_154365;

}

function raw_get_known_hc_217236(s_217241, key_217243, hc_217245) {
	var result_217246 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_217255 = (hc_217245 & (s_217241.data != null ? (s_217241.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_217241.data[chckIndx(h_217255, 0, s_217241.data.length+0-1)-0].Field0)) break L2;
					if (((s_217241.data[chckIndx(h_217255, 0, s_217241.data.length+0-1)-0].Field0 == hc_217245) && (s_217241.data[chckIndx(h_217255, 0, s_217241.data.length+0-1)-0].Field1 == key_217243))) {
					F.line = 157;
					result_217246 = h_217255;
					break BeforeRet;
					}
					
					F.line = 158;
					h_217255 = next_try_154431(h_217255, (s_217241.data != null ? (s_217241.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_217246 = subInt(-1, h_217255);
	} while (false);
	framePtr = F.prev;

	return result_217246;

}

function raw_insert_218645(s_218651, data_218655, data_218655_Idx, key_218657, hc_218659, h_218661) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 172;
		data_218655[data_218655_Idx][chckIndx(h_218661, 0, data_218655[data_218655_Idx].length+0-1)-0].Field1 = key_218657;
		F.line = 173;
		data_218655[data_218655_Idx][chckIndx(h_218661, 0, data_218655[data_218655_Idx].length+0-1)-0].Field0 = hc_218659;
	framePtr = F.prev;

	
}

function enlarge_216132(s_216138) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 225;
		var n_216143 = null;
		F.line = 226;
		n_216143 = new Array(chckRange(mulInt((s_216138.data != null ? s_216138.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_216138.data != null ? s_216138.data.length : 0), 2), 0, 2147483647);++i) {n_216143[i]={Field0: 0, Field1: null};}		F.line = 227;
		var Tmp1 = s_216138.data; s_216138.data = n_216143; n_216143 = Tmp1;		L2: do {
			F.line = 228;
			var i_216414 = 0;
			F.line = 2088;
			var colontmp__219211 = 0;
			F.line = 228;
			colontmp__219211 = (n_216143 != null ? (n_216143.length-1) : -1);
			F.line = 2094;
			var res_219214 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_219214 <= colontmp__219211)) break L4;
						F.line = 2096;
						i_216414 = res_219214;
						if (is_filled_154282(n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field0)) {
						F.line = 230;
						var j_218090 = subInt(-1, raw_get_known_hc_217236(s_216138, n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field1, n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field0));
						F.line = 231;
						raw_insert_218645(s_216138, s_216138, "data", n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field1, n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field0, j_218090);
						}
						
						F.line = 2097;
						res_219214 = addInt(res_219214, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_214544(s_214550, key_214552) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_214550))) {
		F.line = 265;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(265, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 234;
		var hc_215001 = [0];
		F.line = 235;
		var index_215881 = raw_get_215021(s_214550, key_214552, hc_215001, 0);
		if ((index_215881 < 0)) {
		if (must_rehash_154361((s_214550.data != null ? s_214550.data.length : 0), s_214550.counter)) {
		F.line = 238;
		enlarge_216132(s_214550);
		F.line = 239;
		index_215881 = raw_get_known_hc_217236(s_214550, key_214552, hc_215001[0]);
		}
		
		F.line = 240;
		raw_insert_218645(s_214550, s_214550, "data", key_214552, hc_215001[0], subInt(-1, index_215881));
		F.line = 241;
		s_214550.counter = addInt(s_214550.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function is_optional_212482(node_212484) {
		var Tmp1;

	var result_234522 = false;

	var F={procname:"grammar.isOptional",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 290;
		if ((node_212484.repeat == 1)) Tmp1 = true; else {			Tmp1 = (node_212484.repeat == 3);		}		result_234522 = Tmp1;
	framePtr = F.prev;

	return result_234522;

}

function incl_222782(s_222788, other_222791) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_222788))) {
		F.line = 279;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(279, 10) `isValid(s)` The set `s` needs to be initialized."));
		}
		
		if (!(is_valid_214572(other_222791))) {
		F.line = 280;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(280, 10) `isValid(other)` The set `other` needs to be initialized."));
		}
		
		L1: do {
			F.line = 281;
			var item_223976 = null;
			if (!(is_valid_214572(other_222791))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_224069 = 0;
				F.line = 2104;
				var colontmp__224071 = 0;
				F.line = 120;
				colontmp__224071 = (other_222791.data != null ? (other_222791.data.length-1) : -1);
				F.line = 2107;
				var res_224073 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_224073 <= colontmp__224071)) break L4;
							F.line = 2109;
							h_224069 = res_224073;
							if (is_filled_154282(other_222791.data[chckIndx(h_224069, 0, other_222791.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_223976 = other_222791.data[chckIndx(h_224069, 0, other_222791.data.length+0-1)-0].Field1;
							F.line = 281;
							incl_214544(s_222788, item_223976);
							}
							
							F.line = 2110;
							res_224073 = addInt(res_224073, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function find_219431(a_219436, item_219438) {
	var result_219439 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_219615 = null;
			F.line = 3911;
			var i_219639 = 0;
			F.line = 3912;
			var l_219641 = (a_219436 != null ? a_219436.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_219639 < l_219641)) break L3;
						F.line = 3914;
						i_219615 = a_219436[chckIndx(i_219639, 0, a_219436.length+0-1)-0];
						if ((i_219615 == item_219438)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_219439 = addInt(result_219439, 1);
						F.line = 3915;
						i_219639 = addInt(i_219639, 1);
						if (!(((a_219436 != null ? a_219436.length : 0) == l_219641))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_219439 = -1;
	} while (false);
	framePtr = F.prev;

	return result_219439;

}

function nsuJoinSep(a_136144, sep_136145) {
	var result_136146 = null;

		if ((0 < (a_136144 != null ? a_136144.length : 0))) {
		var l_136161 = ((sep_136145 != null ? sep_136145.length : 0) * ((a_136144 != null ? a_136144.length : 0) - 1));
		L1: do {
			var i_136180 = 0;
			var colontmp__136210 = 0;
			colontmp__136210 = (a_136144 != null ? (a_136144.length-1) : -1);
			var res_136213 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_136213 <= colontmp__136210)) break L3;
						i_136180 = res_136213;
						l_136161 += (a_136144[i_136180] != null ? a_136144[i_136180].length : 0);
						res_136213 += 1;
					}
			} while(false);
		} while(false);
		result_136146 = nimCopy(null, mnewString(0), NTI138);
		if (result_136146 != null) { result_136146 = (result_136146).concat(a_136144[0]); } else { result_136146 = a_136144[0].slice(); };
		L4: do {
			var i_136208 = 0;
			var colontmp__136218 = 0;
			colontmp__136218 = (a_136144 != null ? (a_136144.length-1) : -1);
			var res_136221 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_136221 <= colontmp__136218)) break L6;
						i_136208 = res_136221;
						if (result_136146 != null) { result_136146 = (result_136146).concat(sep_136145); } else { result_136146 = sep_136145.slice(); };
						if (result_136146 != null) { result_136146 = (result_136146).concat(a_136144[i_136208]); } else { result_136146 = a_136144[i_136208].slice(); };
						res_136221 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			result_136146 = nimCopy(null, [], NTI138);
		}
		

	return result_136146;

}

function new_seq_178023(len_178027) {
	var result_178029 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_178029 = new Array(len_178027); for (var i=0;i<len_178027;++i) {result_178029[i]=null;}	framePtr = F.prev;

	return result_178029;

}

function HEX2A_25022(x_25024, order_25025) {
	var result_25026 = 0;

	var F={procname:"algorithm.*",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 21;
		var y_25033 = subInt(order_25025, 1);
		F.line = 22;
		result_25026 = subInt((x_25024 ^ y_25033), y_25033);
	framePtr = F.prev;

	return result_25026;

}

function merge_241352(a_241358, b_241362, lo_241364, m_241366, hi_241368, cmp_241375, order_241377) {
	var F={procname:"merge.merge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((HEX2A_25022(cmp_241375(a_241358[chckIndx(m_241366, 0, a_241358.length+0-1)-0], a_241358[chckIndx(addInt(m_241366, 1), 0, a_241358.length+0-1)-0]), order_241377) <= 0)) {
		F.line = 197;
		break BeforeRet;
		}
		
		F.line = 198;
		var j_241378 = lo_241364;
		if (!((j_241378 <= m_241366))) {
		F.line = 200;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(200, 10) `j <= m` "));
		}
		
		F.line = 202;
		var bb_241602 = 0;
		L1: do {
			F.line = 203;
				L2: while (true) {
				if (!(j_241378 <= m_241366)) break L2;
					F.line = 204;
					b_241362[chckIndx(bb_241602, 0, b_241362.length+0-1)-0] = a_241358[chckIndx(j_241378, 0, a_241358.length+0-1)-0];
					F.line = 205;
					bb_241602 = addInt(bb_241602, 1);
					F.line = 206;
					j_241378 = addInt(j_241378, 1);
				}
		} while(false);
		F.line = 210;
		var i_241820 = 0;
		F.line = 211;
		var k_241821 = lo_241364;
		L3: do {
			F.line = 213;
				L4: while (true) {
				if (!((k_241821 < j_241378) && (j_241378 <= hi_241368))) break L4;
					if ((HEX2A_25022(cmp_241375(b_241362[chckIndx(i_241820, 0, b_241362.length+0-1)-0], a_241358[chckIndx(j_241378, 0, a_241358.length+0-1)-0]), order_241377) <= 0)) {
					F.line = 215;
					a_241358[chckIndx(k_241821, 0, a_241358.length+0-1)-0] = b_241362[chckIndx(i_241820, 0, b_241362.length+0-1)-0];
					F.line = 216;
					i_241820 = addInt(i_241820, 1);
					}
					else {
						F.line = 218;
						a_241358[chckIndx(k_241821, 0, a_241358.length+0-1)-0] = a_241358[chckIndx(j_241378, 0, a_241358.length+0-1)-0];
						F.line = 219;
						j_241378 = addInt(j_241378, 1);
					}
					
					F.line = 220;
					k_241821 = addInt(k_241821, 1);
				}
		} while(false);
		L5: do {
			F.line = 223;
				L6: while (true) {
				if (!(k_241821 < j_241378)) break L6;
					F.line = 224;
					a_241358[chckIndx(k_241821, 0, a_241358.length+0-1)-0] = b_241362[chckIndx(i_241820, 0, b_241362.length+0-1)-0];
					F.line = 225;
					k_241821 = addInt(k_241821, 1);
					F.line = 226;
					i_241820 = addInt(i_241820, 1);
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function sort_241310(a_241316, cmp_241323, order_241325) {
	var F={procname:"sort.sort",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 259;
		var n_241332 = (a_241316 != null ? a_241316.length : 0);
		F.line = 260;
		var b_241334 = null;
		F.line = 261;
		b_241334 = new Array(chckRange(divInt(n_241332, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_241332, 2), 0, 2147483647);++i) {b_241334[i]=null;}		F.line = 262;
		var s_241346 = 1;
		L1: do {
			F.line = 263;
				L2: while (true) {
				if (!(s_241346 < n_241332)) break L2;
					F.line = 264;
					var m_241347 = subInt(subInt(n_241332, 1), s_241346);
					L3: do {
						F.line = 265;
							L4: while (true) {
							if (!(0 <= m_241347)) break L4;
								F.line = 266;
								merge_241352(a_241316, b_241334, nimMax(addInt(subInt(m_241347, s_241346), 1), 0), m_241347, addInt(m_241347, s_241346), cmp_241323, order_241325);
								F.line = 267;
								m_241347 = subInt(m_241347, mulInt(s_241346, 2));
							}
					} while(false);
					F.line = 268;
					s_241346 = mulInt(s_241346, 2);
				}
		} while(false);
	framePtr = F.prev;

	
}

function sorted_241255(a_241260, cmp_241267, order_241269) {
	var result_241271 = null;

	var F={procname:"sorted.sorted",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 273;
		result_241271 = nimCopy(null, new_seq_178023(chckRange((a_241260 != null ? a_241260.length : 0), 0, 2147483647)), NTI178028);
		L1: do {
			F.line = 274;
			var i_241304 = 0;
			F.line = 2104;
			var colontmp__242660 = 0;
			F.line = 274;
			colontmp__242660 = (a_241260 != null ? (a_241260.length-1) : -1);
			F.line = 2107;
			var res_242663 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_242663 <= colontmp__242660)) break L3;
						F.line = 2109;
						i_241304 = res_242663;
						F.line = 275;
						result_241271[chckIndx(i_241304, 0, result_241271.length+0-1)-0] = nimCopy(null, a_241260[chckIndx(i_241304, 0, a_241260.length+0-1)-0], NTI138);
						F.line = 2110;
						res_242663 = addInt(res_242663, 1);
					}
			} while(false);
		} while(false);
		F.line = 276;
		sort_241310(result_241271, cmp_241267, order_241269);
	framePtr = F.prev;

	return result_241271;

}

function init_195538(s_195544, initial_size_195546) {
	var F={procname:"init.init",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_195546))) {
		F.line = 400;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(400, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 401;
		s_195544.counter = 0;
		F.line = 402;
		s_195544.data = new Array(chckRange(initial_size_195546, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_195546, 0, 2147483647);++i) {s_195544.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_195512(initial_size_195516) {
	var result_195518 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 414;
		init_195538(result_195518[0], initial_size_195516);
	framePtr = F.prev;

	return result_195518[0];

}

function is_valid_195940(s_195945) {
	var result_195946 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_195946 = (0 < (s_195945.data != null ? s_195945.data.length : 0));
	framePtr = F.prev;

	return result_195946;

}

function raw_get_196221(s_196226, key_196228, hc_196230, hc_196230_Idx) {
						var Tmp3;

	var result_196231 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_196237 = hash_143900(key_196228);
		if ((hc_196237 == 0)) {
		F.line = 164;
		hc_196237 = 314159265;
		}
		
		hc_196230[hc_196230_Idx] = hc_196237;
		F.line = 150;
		var h_196247 = (hc_196230[hc_196230_Idx] & (s_196226.data != null ? (s_196226.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_196226.data[chckIndx(h_196247, 0, s_196226.data.length+0-1)-0].Field0)) break L2;
						if (!(s_196226.data[chckIndx(h_196247, 0, s_196226.data.length+0-1)-0].Field0 == hc_196230[hc_196230_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(s_196226.data[chckIndx(h_196247, 0, s_196226.data.length+0-1)-0].Field1, key_196228);						}					if (Tmp3) {
					F.line = 157;
					result_196231 = h_196247;
					break BeforeRet;
					}
					
					F.line = 158;
					h_196247 = next_try_154431(h_196247, (s_196226.data != null ? (s_196226.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_196231 = subInt(-1, h_196247);
	} while (false);
	framePtr = F.prev;

	return result_196231;

}

function raw_get_known_hc_198206(s_198211, key_198213, hc_198215) {
	var result_198216 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_198225 = (hc_198215 & (s_198211.data != null ? (s_198211.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_198211.data[chckIndx(h_198225, 0, s_198211.data.length+0-1)-0].Field0)) break L2;
					if (((s_198211.data[chckIndx(h_198225, 0, s_198211.data.length+0-1)-0].Field0 == hc_198215) && eqStrings(s_198211.data[chckIndx(h_198225, 0, s_198211.data.length+0-1)-0].Field1, key_198213))) {
					F.line = 157;
					result_198216 = h_198225;
					break BeforeRet;
					}
					
					F.line = 158;
					h_198225 = next_try_154431(h_198225, (s_198211.data != null ? (s_198211.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_198216 = subInt(-1, h_198225);
	} while (false);
	framePtr = F.prev;

	return result_198216;

}

function raw_insert_199447(s_199453, data_199457, data_199457_Idx, key_199459, hc_199461, h_199463) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 172;
		data_199457[data_199457_Idx][chckIndx(h_199463, 0, data_199457[data_199457_Idx].length+0-1)-0].Field1 = nimCopy(null, key_199459, NTI138);
		F.line = 173;
		data_199457[data_199457_Idx][chckIndx(h_199463, 0, data_199457[data_199457_Idx].length+0-1)-0].Field0 = hc_199461;
	framePtr = F.prev;

	
}

function enlarge_197214(s_197220) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 225;
		var n_197225 = null;
		F.line = 226;
		n_197225 = new Array(chckRange(mulInt((s_197220.data != null ? s_197220.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_197220.data != null ? s_197220.data.length : 0), 2), 0, 2147483647);++i) {n_197225[i]={Field0: 0, Field1: null};}		F.line = 227;
		var Tmp1 = s_197220.data; s_197220.data = n_197225; n_197225 = Tmp1;		L2: do {
			F.line = 228;
			var i_197480 = 0;
			F.line = 2088;
			var colontmp__199949 = 0;
			F.line = 228;
			colontmp__199949 = (n_197225 != null ? (n_197225.length-1) : -1);
			F.line = 2094;
			var res_199952 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_199952 <= colontmp__199949)) break L4;
						F.line = 2096;
						i_197480 = res_199952;
						if (is_filled_154282(n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field0)) {
						F.line = 230;
						var j_198956 = subInt(-1, raw_get_known_hc_198206(s_197220, n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field1, n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field0));
						F.line = 231;
						raw_insert_199447(s_197220, s_197220, "data", n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field1, n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field0, j_198956);
						}
						
						F.line = 2097;
						res_199952 = addInt(res_199952, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_195912(s_195918, key_195920) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_195940(s_195918))) {
		F.line = 265;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(265, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 234;
		var hc_196201 = [0];
		F.line = 235;
		var index_196979 = raw_get_196221(s_195918, key_195920, hc_196201, 0);
		if ((index_196979 < 0)) {
		if (must_rehash_154361((s_195918.data != null ? s_195918.data.length : 0), s_195918.counter)) {
		F.line = 238;
		enlarge_197214(s_195918);
		F.line = 239;
		index_196979 = raw_get_known_hc_198206(s_195918, key_195920, hc_196201[0]);
		}
		
		F.line = 240;
		raw_insert_199447(s_195918, s_195918, "data", key_195920, hc_196201[0], subInt(-1, index_196979));
		F.line = 241;
		s_195918.counter = addInt(s_195918.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function map_241025(data_241031, op_241036) {
	var result_241038 = [{data: null, counter: 0}];

	var F={procname:"map.map",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 617;
		nimCopy(result_241038[0], init_set_195512(64), NTI195492);
		L1: do {
			F.line = 618;
			var item_241054 = null;
			if (!(is_valid_214572(data_241031))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_241148 = 0;
				F.line = 2104;
				var colontmp__241150 = 0;
				F.line = 120;
				colontmp__241150 = (data_241031.data != null ? (data_241031.data.length-1) : -1);
				F.line = 2107;
				var res_241152 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_241152 <= colontmp__241150)) break L4;
							F.line = 2109;
							h_241148 = res_241152;
							if (is_filled_154282(data_241031.data[chckIndx(h_241148, 0, data_241031.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_241054 = data_241031.data[chckIndx(h_241148, 0, data_241031.data.length+0-1)-0].Field1;
							F.line = 618;
							incl_195912(result_241038[0], op_241036(item_241054));
							}
							
							F.line = 2110;
							res_241152 = addInt(res_241152, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_241038[0];

}

function cmpStrings(a_16418, b_16419) {
		    if (a_16418 == b_16419) return 0;
    if (!a_16418) return -1;
    if (!b_16419) return 1;
    for (var i = 0; i < a_16418.length && i < b_16419.length; i++) {
      var result = a_16418[i] - b_16419[i];
      if (result != 0) return result;
    }
    return a_16418.length - b_16419.length;
  

	
}

function cmp_7058(x_7060, y_7061) {
	var result_16438 = 0;

	BeforeRet: do {
		result_16438 = cmpStrings(x_7060, y_7061);
		break BeforeRet;
	} while (false);

	return result_16438;

}

function is_undefined_18485(x_18489) {
	var result_18490 = false;

	var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 34;
		result_18490 = x_18489 === undefined;
	framePtr = F.prev;

	return result_18490;

}

function substr_eq_132789(s_132791, pos_132792, substr_132793) {
	var result_132794 = false;

	BeforeRet: do {
		var i_132796 = 0;
		var length_132797 = (substr_132793 != null ? substr_132793.length : 0);
		L1: do {
				L2: while (true) {
				if (!((i_132796 < length_132797) && (s_132791[(pos_132792 + i_132796)] == substr_132793[i_132796]))) break L2;
					i_132796 += 1;
				}
		} while(false);
		result_132794 = (i_132796 == length_132797);
		break BeforeRet;
	} while (false);

	return result_132794;

}

function substr_23422(s_23424, first_23425, last_23426) {
	var result_23427 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4263;
		var first_23428 = nimMax(first_23425, 0);
		F.line = 4264;
		var l_23430 = nimMax(addInt(subInt(nimMin(last_23426, (s_23424 != null ? (s_23424.length-1) : -1)), first_23428), 1), 0);
		F.line = 4265;
		result_23427 = nimCopy(null, mnewString(chckRange(l_23430, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4266;
			var i_23442 = 0;
			F.line = 2104;
			var colontmp__23444 = 0;
			F.line = 4266;
			colontmp__23444 = subInt(l_23430, 1);
			F.line = 2107;
			var res_23447 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_23447 <= colontmp__23444)) break L3;
						F.line = 2109;
						i_23442 = res_23447;
						F.line = 4267;
						result_23427[chckIndx(i_23442, 0, result_23427.length+0-1)-0] = s_23424[chckIndx(addInt(i_23442, first_23428), 0, s_23424.length+0-1)-0];
						F.line = 2110;
						res_23447 = addInt(res_23447, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_23427;

}

function HEX24_212438(grammar_node_212440) {

		function HEX3Aanonymous_234607(n_234609) {
			var result_234610 = null;

			var F={procname:"$.:anonymous",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
			framePtr = F;
				F.line = 308;
				result_234610 = nimCopy(null, cstrToNimstr((n_234609.id)+""), NTI138);
			framePtr = F.prev;

			return result_234610;

		}

	var result_234557 = null;

	var F={procname:"grammar.$",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((grammar_node_212440 == success_grammar_node_212501)) {
		F.line = 295;
		result_234557 = nimCopy(null, makeNimstrLit("$$SUCCESS_GRAMMAR_NODE$$"), NTI138);
		break BeforeRet;
		}
		
		F.line = 296;
		var string_seq_234569 = null;
		F.line = 297;
		F.line = 297;
		var fmt_res_234572 = mnewString(0);
		F.line = 297;
		if (fmt_res_234572 != null) { fmt_res_234572 = (fmt_res_234572).concat(makeNimstrLit("(")); } else { fmt_res_234572 = makeNimstrLit("("); };
		F.line = 270;
		if (fmt_res_234572 != null) { fmt_res_234572 = (fmt_res_234572).concat(cstrToNimstr((grammar_node_212440.id)+"")); } else { fmt_res_234572 = cstrToNimstr((grammar_node_212440.id)+"").slice(); };
		F.line = 297;
		if (fmt_res_234572 != null) { fmt_res_234572 = (fmt_res_234572).concat(makeNimstrLit(")")); } else { fmt_res_234572 = makeNimstrLit(")"); };
		var head_234601 = nimCopy(null, fmt_res_234572, NTI138);
		F.line = 298;
		var tail_234602 = null;
		F.line = 299;
		switch (grammar_node_212440.repeat) {
		case 0:
			break;
		case 1:
			F.line = 303;
			tail_234602 = nimCopy(null, makeNimstrLit("*"), NTI138);
			break;
		case 2:
			F.line = 305;
			tail_234602 = nimCopy(null, makeNimstrLit("+"), NTI138);
			break;
		case 3:
			F.line = 307;
			tail_234602 = nimCopy(null, makeNimstrLit("?"), NTI138);
			break;
		}
		F.line = 308;
		var map_proc_234624 = HEX3Aanonymous_234607;
		F.line = 309;
		switch (grammar_node_212440.kind) {
		case 97:
			F.line = 311;
			F.line = 532;
			var result_241191 = nimCopy(null, [], NTI241189);
			L1: do {
				F.line = 533;
				var x_241236 = null;
				F.line = 100;
				var colontmp__249453 = {data: null, counter: 0};
				F.line = 311;
				nimCopy(colontmp__249453, map_241025(grammar_node_212440.nextSet, map_proc_234624), NTI195492);
				if (!(is_valid_195940(colontmp__249453))) {
				F.line = 119;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
				}
				
				L2: do {
					F.line = 120;
					var h_249457 = 0;
					F.line = 2104;
					var colontmp__249459 = 0;
					F.line = 120;
					colontmp__249459 = (colontmp__249453.data != null ? (colontmp__249453.data.length-1) : -1);
					F.line = 2107;
					var res_249461 = 0;
					L3: do {
						F.line = 2108;
							L4: while (true) {
							if (!(res_249461 <= colontmp__249459)) break L4;
								F.line = 2109;
								h_249457 = res_249461;
								if (is_filled_154282(colontmp__249453.data[chckIndx(h_249457, 0, colontmp__249453.data.length+0-1)-0].Field0)) {
								F.line = 121;
								x_241236 = colontmp__249453.data[chckIndx(h_249457, 0, colontmp__249453.data.length+0-1)-0].Field1;
								F.line = 534;
								var Tmp5 = nimCopy(null, x_241236, NTI138);
								if (result_241191 != null) { result_241191.push(Tmp5); } else { result_241191 = [Tmp5]; };
								}
								
								F.line = 2110;
								res_249461 = addInt(res_249461, 1);
							}
					} while(false);
				} while(false);
			} while(false);
			var next_set_242680 = nsuJoinSep(sorted_241255(result_241191, cmp_7058, 1), makeNimstrLit(", "));
			F.line = 312;
			F.line = 312;
			var fmt_res_242683 = mnewString(0);
			F.line = 312;
			if (fmt_res_242683 != null) { fmt_res_242683 = (fmt_res_242683).concat(makeNimstrLit("<")); } else { fmt_res_242683 = makeNimstrLit("<"); };
			F.line = 260;
			if (fmt_res_242683 != null) { fmt_res_242683 = (fmt_res_242683).concat(next_set_242680); } else { fmt_res_242683 = next_set_242680.slice(); };
			F.line = 312;
			if (fmt_res_242683 != null) { fmt_res_242683 = (fmt_res_242683).concat(makeNimstrLit(">")); } else { fmt_res_242683 = makeNimstrLit(">"); };
			if (tail_234602 != null) { tail_234602 = (tail_234602).concat(fmt_res_242683); } else { tail_234602 = fmt_res_242683.slice(); };
			break;
		case 65:
		case 70:
			F.line = 314;
			F.line = 532;
			var result_249260 = nimCopy(null, [], NTI249258);
			L6: do {
				F.line = 533;
				var x_249304 = null;
				F.line = 100;
				var colontmp__249465 = {data: null, counter: 0};
				F.line = 314;
				nimCopy(colontmp__249465, map_241025(grammar_node_212440.epsilonSet, map_proc_234624), NTI195492);
				if (!(is_valid_195940(colontmp__249465))) {
				F.line = 119;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
				}
				
				L7: do {
					F.line = 120;
					var h_249469 = 0;
					F.line = 2104;
					var colontmp__249471 = 0;
					F.line = 120;
					colontmp__249471 = (colontmp__249465.data != null ? (colontmp__249465.data.length-1) : -1);
					F.line = 2107;
					var res_249473 = 0;
					L8: do {
						F.line = 2108;
							L9: while (true) {
							if (!(res_249473 <= colontmp__249471)) break L9;
								F.line = 2109;
								h_249469 = res_249473;
								if (is_filled_154282(colontmp__249465.data[chckIndx(h_249469, 0, colontmp__249465.data.length+0-1)-0].Field0)) {
								F.line = 121;
								x_249304 = colontmp__249465.data[chckIndx(h_249469, 0, colontmp__249465.data.length+0-1)-0].Field1;
								F.line = 534;
								var Tmp10 = nimCopy(null, x_249304, NTI138);
								if (result_249260 != null) { result_249260.push(Tmp10); } else { result_249260 = [Tmp10]; };
								}
								
								F.line = 2110;
								res_249473 = addInt(res_249473, 1);
							}
					} while(false);
				} while(false);
			} while(false);
			var epsilon_set_249339 = nsuJoinSep(sorted_241255(result_249260, cmp_7058, 1), makeNimstrLit(", "));
			F.line = 315;
			F.line = 315;
			var fmt_res_249342 = mnewString(0);
			F.line = 315;
			if (fmt_res_249342 != null) { fmt_res_249342 = (fmt_res_249342).concat(makeNimstrLit("<")); } else { fmt_res_249342 = makeNimstrLit("<"); };
			F.line = 260;
			if (fmt_res_249342 != null) { fmt_res_249342 = (fmt_res_249342).concat(epsilon_set_249339); } else { fmt_res_249342 = epsilon_set_249339.slice(); };
			F.line = 315;
			if (fmt_res_249342 != null) { fmt_res_249342 = (fmt_res_249342).concat(makeNimstrLit(">")); } else { fmt_res_249342 = makeNimstrLit(">"); };
			if (tail_234602 != null) { tail_234602 = (tail_234602).concat(fmt_res_249342); } else { tail_234602 = fmt_res_249342.slice(); };
			break;
		default: 
			break;
		}
		F.line = 318;
		var name_249401 = null;
		F.line = 319;
		switch (grammar_node_212440.kind) {
		case 97:
			F.line = 321;
			name_249401 = nimCopy(null, reprEnum(grammar_node_212440.token, NTI202995), NTI138);
			break;
		default: 
			F.line = 323;
			name_249401 = nimCopy(null, nimCharToStr(grammar_node_212440.kind), NTI138);
			break;
		}
		F.line = 324;
		if (string_seq_234569 != null) { string_seq_234569.push((head_234601).concat(name_249401,tail_234602)); } else { string_seq_234569 = [(head_234601).concat(name_249401,tail_234602)]; };
		if (!(is_grammar_terminator_212485(grammar_node_212440))) {
		L11: do {
			F.line = 326;
			var child_249429 = null;
			F.line = 3909;
			var colontmp__249488 = null;
			F.line = 326;
			colontmp__249488 = grammar_node_212440.children;
			F.line = 3911;
			var i_249491 = 0;
			F.line = 3912;
			var l_249493 = (colontmp__249488 != null ? colontmp__249488.length : 0);
			L12: do {
				F.line = 3913;
					L13: while (true) {
					if (!(i_249491 < l_249493)) break L13;
						F.line = 3914;
						child_249429 = colontmp__249488[chckIndx(i_249491, 0, colontmp__249488.length+0-1)-0];
						L14: do {
							if ((child_249429 == null)) {
							F.line = 328;
							break L14;
							}
							
							L15: do {
								F.line = 329;
								var substr_249441 = null;
								F.line = 597;
								var colontmp__249479 = null;
								F.line = 329;
								colontmp__249479 = HEX24_212438(child_249429);
								F.line = 455;
								var last_249483 = 0;
								F.line = 456;
								var splits_249485 = -1;
								L16: do {
									F.line = 614;
										L17: while (true) {
										if (!(last_249483 <= (colontmp__249479 != null ? colontmp__249479.length : 0))) break L17;
											F.line = 459;
											var first_249487 = last_249483;
											L18: do {
												F.line = 460;
													L19: while (true) {
													if (!((last_249483 < (colontmp__249479 != null ? colontmp__249479.length : 0)) && !(substr_eq_132789(colontmp__249479, last_249483, makeNimstrLit("\x0A"))))) break L19;
														F.line = 461;
														last_249483 = addInt(last_249483, 1);
													}
											} while(false);
											if ((splits_249485 == 0)) {
											F.line = 462;
											last_249483 = (colontmp__249479 != null ? colontmp__249479.length : 0);
											}
											
											F.line = 463;
											substr_249441 = substr_23422(colontmp__249479, first_249487, subInt(last_249483, 1));
											F.line = 330;
											if (string_seq_234569 != null) { string_seq_234569.push((makeNimstrLit("    ")).concat(substr_249441)); } else { string_seq_234569 = [(makeNimstrLit("    ")).concat(substr_249441)]; };
											if ((splits_249485 == 0)) {
											F.line = 464;
											break L16;
											}
											
											F.line = 465;
											splits_249485 = subInt(splits_249485, 1);
											F.line = 466;
											last_249483 = addInt(last_249483, 1);
										}
								} while(false);
							} while(false);
						} while(false);
						F.line = 3915;
						i_249491 = addInt(i_249491, 1);
						if (!(((colontmp__249488 != null ? colontmp__249488.length : 0) == l_249493))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 331;
		result_234557 = nimCopy(null, nsuJoinSep(string_seq_234569, makeNimstrLit("\x0A")), NTI138);
	} while (false);
	framePtr = F.prev;

	return result_234557;

}

function next_in_tree_212475(node_212477) {
							var Tmp3;
							var Tmp4;

	var result_214443 = [{data: null, counter: 0}];

	var F={procname:"grammar.nextInTree",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 134;
		nimCopy(result_214443[0], init_set_212530(64), NTI212034);
		F.line = 135;
		var cur_node_214452 = node_212477;
		L1: do {
			F.line = 136;
				L2: while (true) {
				if (!true) break L2;
					F.line = 137;
					var father_214453 = cur_node_214452.father;
					if ((father_214453 == null)) {
					F.line = 139;
					incl_214544(result_214443[0], success_grammar_node_212501);
					F.line = 140;
					break L1;
					}
					
					F.line = 141;
					switch (father_214453.kind) {
					case 70:
							if ((father_214453.repeat == 2)) Tmp3 = true; else {								Tmp3 = (father_214453.repeat == 1);							}						if (Tmp3) {
						F.line = 144;
						incl_214544(result_214443[0], father_214453);
						}
						
						F.line = 145;
						cur_node_214452 = father_214453;
						break;
					case 65:
						F.line = 147;
						var idx_219655 = find_219431(father_214453.children, cur_node_214452);
						if (!(!((idx_219655 == -1)))) {
						F.line = 148;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(148, 14) `\x0Anot (idx == -1)` "));
						}
						
						if ((idx_219655 == subInt((father_214453.children != null ? father_214453.children.length : 0), 1))) {
							if ((father_214453.repeat == 2)) Tmp4 = true; else {								Tmp4 = (father_214453.repeat == 1);							}						if (Tmp4) {
						F.line = 151;
						incl_214544(result_214443[0], father_214453);
						}
						
						F.line = 152;
						cur_node_214452 = father_214453;
						}
						else {
							F.line = 154;
							incl_214544(result_214443[0], father_214453.children[chckIndx(addInt(idx_219655, 1), 0, father_214453.children.length+0-1)-0]);
							F.line = 155;
							break L1;
						}
						
						break;
					default: 
						F.line = 157;
						rawEcho(HEX24_212438(cur_node_214452));
						F.line = 158;
						rawEcho(HEX24_212438(father_214453));
						if (true) {
						F.line = 159;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(159, 14) `false` "));
						}
						
						break;
					}
				}
		} while(false);
	framePtr = F.prev;

	return result_214443[0];

}

function contains_224741(s_224746, key_224748) {
	var result_224749 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_224746))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_224801 = [0];
		F.line = 217;
		var index_224832 = raw_get_215021(s_224746, key_224748, hc_224801, 0);
		F.line = 218;
		result_224749 = (0 <= index_224832);
	framePtr = F.prev;

	return result_224749;

}

function len_225101(s_225106) {
	var result_225107 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 91;
		result_225107 = s_225106.counter;
	framePtr = F.prev;

	return result_225107;

}

function is_empty_154265(hcode_154267) {
	var result_154268 = false;

	var F={procname:"sets.isEmpty",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 60;
		result_154268 = (hcode_154267 == 0);
	framePtr = F.prev;

	return result_154268;

}

function excl_impl_226628(s_226634, key_226636) {
									var Tmp5;
									var Tmp6;
									var Tmp7;
										var Tmp8;
										var Tmp9;

	var result_226637 = false;

	var F={procname:"exclImpl.exclImpl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(is_valid_214572(s_226634))) {
		F.line = 293;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(293, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 294;
		var hc_226801 = [0];
		F.line = 295;
		var i_226832 = raw_get_215021(s_226634, key_226636, hc_226801, 0);
		F.line = 296;
		var msk_226841 = (s_226634.data != null ? (s_226634.data.length-1) : -1);
		F.line = 297;
		result_226637 = true;
		if ((0 <= i_226832)) {
		F.line = 300;
		result_226637 = false;
		F.line = 301;
		s_226634.counter = subInt(s_226634.counter, 1);
		L1: do {
			F.line = 302;
				L2: while (true) {
				if (!true) break L2;
					F.line = 303;
					var j_226852 = i_226832;
					F.line = 304;
					var r_226853 = j_226852;
					F.line = 305;
					s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field0 = 0;
					F.line = 306;
					F.line = 289;
					var v_227661 = null;
					s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field1 = v_227661;
					L3: do {
						F.line = 307;
							L4: while (true) {
							if (!true) break L4;
								F.line = 308;
								i_226832 = (addInt(i_226832, 1) & msk_226841);
								if (is_empty_154265(s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field0)) {
								F.line = 310;
								break BeforeRet;
								}
								
								F.line = 311;
								r_226853 = (s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field0 & msk_226841);
									if (!(r_226853 <= i_226832)) Tmp7 = false; else {										Tmp7 = (j_226852 < r_226853);									}									if (Tmp7) Tmp6 = true; else {										if (!(j_226852 < r_226853)) Tmp8 = false; else {											Tmp8 = (i_226832 < j_226852);										}										Tmp6 = Tmp8;									}									if (Tmp6) Tmp5 = true; else {										if (!(i_226832 < j_226852)) Tmp9 = false; else {											Tmp9 = (r_226853 <= i_226832);										}										Tmp5 = Tmp9;									}								if (!(Tmp5)) {
								F.line = 286;
								break L3;
								}
								
							}
					} while(false);
					F.line = 312;
					nimCopy(s_226634.data[chckIndx(j_226852, 0, s_226634.data.length+0-1)-0], s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0], NTI212040);
				}
		} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	return result_226637;

}

function excl_226299(s_226305, other_226308) {
	var F={procname:"excl.excl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_226305))) {
		F.line = 350;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(350, 10) `isValid(s)` The set `s` needs to be initialized."));
		}
		
		if (!(is_valid_214572(other_226308))) {
		F.line = 351;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(351, 10) `isValid(other)` The set `other` needs to be initialized."));
		}
		
		L1: do {
			F.line = 352;
			var item_226608 = null;
			if (!(is_valid_214572(other_226308))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_228749 = 0;
				F.line = 2104;
				var colontmp__228751 = 0;
				F.line = 120;
				colontmp__228751 = (other_226308.data != null ? (other_226308.data.length-1) : -1);
				F.line = 2107;
				var res_228753 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_228753 <= colontmp__228751)) break L4;
							F.line = 2109;
							h_228749 = res_228753;
							if (is_filled_154282(other_226308.data[chckIndx(h_228749, 0, other_226308.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_226608 = other_226308.data[chckIndx(h_228749, 0, other_226308.data.length+0-1)-0].Field1;
							F.line = 352;
							excl_impl_226628(s_226305, item_226608);
							}
							
							F.line = 2110;
							res_228753 = addInt(res_228753, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function gen_epsilon_set_212491(root_212493) {
	var F={procname:"grammar.genEpsilonSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 176;
		var to_visit_222338 = [[root_212493]];
		F.line = 177;
		var all_node_222347 = [init_set_212530(64)];
		L1: do {
			F.line = 179;
				L2: while (true) {
				if (!(0 < (to_visit_222338[0] != null ? to_visit_222338[0].length : 0))) break L2;
					F.line = 180;
					var cur_node_222398 = pop_222358(to_visit_222338, 0);
					F.line = 181;
					incl_214544(all_node_222347[0], cur_node_222398);
					F.line = 182;
					switch (cur_node_222398.kind) {
					case 70:
						L3: do {
							F.line = 184;
							var child_222497 = null;
							F.line = 3909;
							var colontmp__228772 = null;
							F.line = 184;
							colontmp__228772 = cur_node_222398.children;
							F.line = 3911;
							var i_228775 = 0;
							F.line = 3912;
							var l_228777 = (colontmp__228772 != null ? colontmp__228772.length : 0);
							L4: do {
								F.line = 3913;
									L5: while (true) {
									if (!(i_228775 < l_228777)) break L5;
										F.line = 3914;
										child_222497 = colontmp__228772[chckIndx(i_228775, 0, colontmp__228772.length+0-1)-0];
										F.line = 185;
										incl_214544(cur_node_222398.epsilonSet, child_222497);
										F.line = 3915;
										i_228775 = addInt(i_228775, 1);
										if (!(((colontmp__228772 != null ? colontmp__228772.length : 0) == l_228777))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						break;
					case 65:
						F.line = 187;
						incl_214544(cur_node_222398.epsilonSet, cur_node_222398.children[chckIndx(0, 0, cur_node_222398.children.length+0-1)-0]);
						if (is_optional_212482(cur_node_222398)) {
						F.line = 189;
						incl_222782(cur_node_222398.epsilonSet, next_in_tree_212475(cur_node_222398));
						}
						
						L6: do {
							F.line = 190;
							var child_224099 = null;
							F.line = 3909;
							var colontmp__228779 = null;
							F.line = 190;
							colontmp__228779 = cur_node_222398.children;
							F.line = 3911;
							var i_228782 = 0;
							F.line = 3912;
							var l_228784 = (colontmp__228779 != null ? colontmp__228779.length : 0);
							L7: do {
								F.line = 3913;
									L8: while (true) {
									if (!(i_228782 < l_228784)) break L8;
										F.line = 3914;
										child_224099 = colontmp__228779[chckIndx(i_228782, 0, colontmp__228779.length+0-1)-0];
										if (is_optional_212482(child_224099)) {
										F.line = 192;
										incl_222782(child_224099.epsilonSet, next_in_tree_212475(child_224099));
										}
										
										F.line = 3915;
										i_228782 = addInt(i_228782, 1);
										if (!(((colontmp__228779 != null ? colontmp__228779.length : 0) == l_228784))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						break;
					case 97:
						break;
					default: 
						F.line = 196;
						rawEcho(nimCharToStr(cur_node_222398.kind));
						if (true) {
						F.line = 197;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(197, 14) `false` "));
						}
						
						break;
					}
					if (!(is_grammar_terminator_212485(cur_node_222398))) {
					L9: do {
						F.line = 199;
						var child_224411 = null;
						F.line = 3909;
						var colontmp__228786 = null;
						F.line = 199;
						colontmp__228786 = cur_node_222398.children;
						F.line = 3911;
						var i_228789 = 0;
						F.line = 3912;
						var l_228791 = (colontmp__228786 != null ? colontmp__228786.length : 0);
						L10: do {
							F.line = 3913;
								L11: while (true) {
								if (!(i_228789 < l_228791)) break L11;
									F.line = 3914;
									child_224411 = colontmp__228786[chckIndx(i_228789, 0, colontmp__228786.length+0-1)-0];
									F.line = 200;
									if (to_visit_222338[0] != null) { to_visit_222338[0].push(child_224411); } else { to_visit_222338[0] = [child_224411]; };
									F.line = 3915;
									i_228789 = addInt(i_228789, 1);
									if (!(((colontmp__228786 != null ? colontmp__228786.length : 0) == l_228791))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					
				}
		} while(false);
		F.line = 203;
		var collected_224430 = [init_set_212530(64)];
		F.line = 204;
		incl_214544(collected_224430[0], success_grammar_node_212501);
		L12: do {
			F.line = 205;
			var cur_node_224527 = null;
			if (!(is_valid_214572(all_node_222347[0]))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L13: do {
				F.line = 120;
				var h_228847 = 0;
				F.line = 2104;
				var colontmp__228849 = 0;
				F.line = 120;
				colontmp__228849 = (all_node_222347[0].data != null ? (all_node_222347[0].data.length-1) : -1);
				F.line = 2107;
				var res_228851 = 0;
				L14: do {
					F.line = 2108;
						L15: while (true) {
						if (!(res_228851 <= colontmp__228849)) break L15;
							F.line = 2109;
							h_228847 = res_228851;
							if (is_filled_154282(all_node_222347[0].data[chckIndx(h_228847, 0, all_node_222347[0].data.length+0-1)-0].Field0)) {
							F.line = 121;
							cur_node_224527 = all_node_222347[0].data[chckIndx(h_228847, 0, all_node_222347[0].data.length+0-1)-0].Field1;
							L16: do {
								if (!(contains_224741(collected_224430[0], cur_node_224527))) {
								F.line = 207;
								if (to_visit_222338[0] != null) { to_visit_222338[0].push(cur_node_224527); } else { to_visit_222338[0] = [cur_node_224527]; };
								}
								
								L17: do {
									F.line = 208;
										L18: while (true) {
										if (!(0 < (to_visit_222338[0] != null ? to_visit_222338[0].length : 0))) break L18;
											L19: do {
												F.line = 209;
												var cur_node_224875 = pop_222358(to_visit_222338, 0);
												if ((len_225101(cur_node_224875.epsilonSet) == 0)) {
												F.line = 211;
												incl_214544(collected_224430[0], cur_node_224875);
												F.line = 212;
												break L19;
												}
												
												F.line = 213;
												var all_children_collected_225210 = true;
												L20: do {
													F.line = 214;
													var child_225218 = null;
													F.line = 100;
													var colontmp__228797 = {data: null, counter: 0};
													F.line = 214;
													nimCopy(colontmp__228797, cur_node_224875.epsilonSet, NTI212034);
													if (!(is_valid_214572(colontmp__228797))) {
													F.line = 119;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
													}
													
													L21: do {
														F.line = 120;
														var h_228801 = 0;
														F.line = 2104;
														var colontmp__228803 = 0;
														F.line = 120;
														colontmp__228803 = (colontmp__228797.data != null ? (colontmp__228797.data.length-1) : -1);
														F.line = 2107;
														var res_228805 = 0;
														L22: do {
															F.line = 2108;
																L23: while (true) {
																if (!(res_228805 <= colontmp__228803)) break L23;
																	F.line = 2109;
																	h_228801 = res_228805;
																	if (is_filled_154282(colontmp__228797.data[chckIndx(h_228801, 0, colontmp__228797.data.length+0-1)-0].Field0)) {
																	F.line = 121;
																	child_225218 = colontmp__228797.data[chckIndx(h_228801, 0, colontmp__228797.data.length+0-1)-0].Field1;
																	if (!(contains_224741(collected_224430[0], child_225218))) {
																	F.line = 216;
																	all_children_collected_225210 = false;
																	F.line = 217;
																	break L20;
																	}
																	
																	}
																	
																	F.line = 2110;
																	res_228805 = addInt(res_228805, 1);
																}
														} while(false);
													} while(false);
												} while(false);
												if (all_children_collected_225210) {
												L24: do {
													F.line = 219;
													var child_225447 = null;
													F.line = 100;
													var colontmp__228809 = {data: null, counter: 0};
													F.line = 219;
													nimCopy(colontmp__228809, cur_node_224875.epsilonSet, NTI212034);
													if (!(is_valid_214572(colontmp__228809))) {
													F.line = 119;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
													}
													
													L25: do {
														F.line = 120;
														var h_228813 = 0;
														F.line = 2104;
														var colontmp__228815 = 0;
														F.line = 120;
														colontmp__228815 = (colontmp__228809.data != null ? (colontmp__228809.data.length-1) : -1);
														F.line = 2107;
														var res_228817 = 0;
														L26: do {
															F.line = 2108;
																L27: while (true) {
																if (!(res_228817 <= colontmp__228815)) break L27;
																	F.line = 2109;
																	h_228813 = res_228817;
																	if (is_filled_154282(colontmp__228809.data[chckIndx(h_228813, 0, colontmp__228809.data.length+0-1)-0].Field0)) {
																	F.line = 121;
																	child_225447 = colontmp__228809.data[chckIndx(h_228813, 0, colontmp__228809.data.length+0-1)-0].Field1;
																	F.line = 220;
																	incl_222782(cur_node_224875.epsilonSet, child_225447.epsilonSet);
																	}
																	
																	F.line = 2110;
																	res_228817 = addInt(res_228817, 1);
																}
														} while(false);
													} while(false);
												} while(false);
												F.line = 221;
												incl_214544(collected_224430[0], cur_node_224875);
												}
												else {
													F.line = 223;
													if (to_visit_222338[0] != null) { to_visit_222338[0].push(cur_node_224875); } else { to_visit_222338[0] = [cur_node_224875]; };
													L28: do {
														F.line = 224;
														var child_225668 = null;
														F.line = 100;
														var colontmp__228821 = {data: null, counter: 0};
														F.line = 224;
														nimCopy(colontmp__228821, cur_node_224875.epsilonSet, NTI212034);
														if (!(is_valid_214572(colontmp__228821))) {
														F.line = 119;
														failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
														}
														
														L29: do {
															F.line = 120;
															var h_228825 = 0;
															F.line = 2104;
															var colontmp__228827 = 0;
															F.line = 120;
															colontmp__228827 = (colontmp__228821.data != null ? (colontmp__228821.data.length-1) : -1);
															F.line = 2107;
															var res_228829 = 0;
															L30: do {
																F.line = 2108;
																	L31: while (true) {
																	if (!(res_228829 <= colontmp__228827)) break L31;
																		F.line = 2109;
																		h_228825 = res_228829;
																		if (is_filled_154282(colontmp__228821.data[chckIndx(h_228825, 0, colontmp__228821.data.length+0-1)-0].Field0)) {
																		F.line = 121;
																		child_225668 = colontmp__228821.data[chckIndx(h_228825, 0, colontmp__228821.data.length+0-1)-0].Field1;
																		if (!(contains_224741(collected_224430[0], child_225668))) {
																		F.line = 226;
																		if (to_visit_222338[0] != null) { to_visit_222338[0].push(child_225668); } else { to_visit_222338[0] = [child_225668]; };
																		}
																		
																		}
																		
																		F.line = 2110;
																		res_228829 = addInt(res_228829, 1);
																	}
															} while(false);
														} while(false);
													} while(false);
												}
												
											} while(false);
										}
								} while(false);
								if ((len_225101(cur_node_224527.epsilonSet) == 0)) {
								F.line = 230;
								break L16;
								}
								
								F.line = 231;
								var to_exclude_226139 = [init_set_212530(64)];
								L32: do {
									F.line = 232;
									var child_226147 = null;
									F.line = 100;
									var colontmp__228833 = {data: null, counter: 0};
									F.line = 232;
									nimCopy(colontmp__228833, cur_node_224527.epsilonSet, NTI212034);
									if (!(is_valid_214572(colontmp__228833))) {
									F.line = 119;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
									}
									
									L33: do {
										F.line = 120;
										var h_228837 = 0;
										F.line = 2104;
										var colontmp__228839 = 0;
										F.line = 120;
										colontmp__228839 = (colontmp__228833.data != null ? (colontmp__228833.data.length-1) : -1);
										F.line = 2107;
										var res_228841 = 0;
										L34: do {
											F.line = 2108;
												L35: while (true) {
												if (!(res_228841 <= colontmp__228839)) break L35;
													F.line = 2109;
													h_228837 = res_228841;
													if (is_filled_154282(colontmp__228833.data[chckIndx(h_228837, 0, colontmp__228833.data.length+0-1)-0].Field0)) {
													F.line = 121;
													child_226147 = colontmp__228833.data[chckIndx(h_228837, 0, colontmp__228833.data.length+0-1)-0].Field1;
													F.line = 233;
													switch (child_226147.kind) {
													case 65:
													case 70:
														F.line = 235;
														incl_214544(to_exclude_226139[0], child_226147);
														break;
													default: 
														break;
													}
													}
													
													F.line = 2110;
													res_228841 = addInt(res_228841, 1);
												}
										} while(false);
									} while(false);
								} while(false);
								F.line = 238;
								excl_226299(cur_node_224527.epsilonSet, to_exclude_226139[0]);
							} while(false);
							}
							
							F.line = 2110;
							res_228851 = addInt(res_228851, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function add_228920(x_228926, x_228926_Idx, y_228929) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1612;
		var xl_228937 = (x_228926[x_228926_Idx] != null ? x_228926[x_228926_Idx].length : 0);
		F.line = 1613;
		if (x_228926[x_228926_Idx].length < chckRange(addInt(xl_228937, (y_228929 != null ? y_228929.length : 0)), 0, 2147483647)) { for (var i=x_228926[x_228926_Idx].length;i<chckRange(addInt(xl_228937, (y_228929 != null ? y_228929.length : 0)), 0, 2147483647);++i) x_228926[x_228926_Idx].push(null); }
               else { x_228926[x_228926_Idx].length = chckRange(addInt(xl_228937, (y_228929 != null ? y_228929.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1614;
			var i_228972 = 0;
			F.line = 2104;
			var colontmp__228974 = 0;
			F.line = 1614;
			colontmp__228974 = (y_228929 != null ? (y_228929.length-1) : -1);
			F.line = 2107;
			var res_228977 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_228977 <= colontmp__228974)) break L3;
						F.line = 2109;
						i_228972 = res_228977;
						F.line = 1614;
						x_228926[x_228926_Idx][chckIndx(addInt(xl_228937, i_228972), 0, x_228926[x_228926_Idx].length+0-1)-0] = y_228929[chckIndx(i_228972, 0, y_228929.length+0-1)-0];
						F.line = 2110;
						res_228977 = addInt(res_228977, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function gen_next_set_212494(root_212496) {
							var Tmp7;

	var F={procname:"grammar.genNextSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 243;
		var to_visit_228871 = [null];
		if (!(is_grammar_terminator_212485(root_212496))) {
		L1: do {
			F.line = 23;
			var item_228886 = null;
			F.line = 3909;
			var colontmp__229402 = null;
			F.line = 247;
			colontmp__229402 = root_212496.children;
			F.line = 3911;
			var i_229405 = 0;
			F.line = 3912;
			var l_229407 = (colontmp__229402 != null ? colontmp__229402.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_229405 < l_229407)) break L3;
						F.line = 3914;
						item_228886 = colontmp__229402[chckIndx(i_229405, 0, colontmp__229402.length+0-1)-0];
						F.line = 24;
						if (to_visit_228871[0] != null) { to_visit_228871[0].push(item_228886); } else { to_visit_228871[0] = [item_228886]; };
						F.line = 3915;
						i_229405 = addInt(i_229405, 1);
						if (!(((colontmp__229402 != null ? colontmp__229402.length : 0) == l_229407))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		L4: do {
			F.line = 248;
				L5: while (true) {
				if (!(0 < (to_visit_228871[0] != null ? to_visit_228871[0].length : 0))) break L5;
					L6: do {
						F.line = 249;
						var cur_node_228915 = pop_222358(to_visit_228871, 0);
						if (!(is_grammar_terminator_212485(cur_node_228915))) {
						F.line = 251;
						add_228920(to_visit_228871, 0, cur_node_228915.children);
						F.line = 252;
						break L6;
						}
						
						F.line = 254;
						var next_nodes_228996 = [next_in_tree_212475(cur_node_228915)];
							if ((cur_node_228915.repeat == 2)) Tmp7 = true; else {								Tmp7 = (cur_node_228915.repeat == 1);							}						if (Tmp7) {
						F.line = 256;
						incl_214544(next_nodes_228996[0], cur_node_228915);
						}
						
						L8: do {
							F.line = 258;
							var next_node_229111 = null;
							if (!(is_valid_214572(next_nodes_228996[0]))) {
							F.line = 119;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
							}
							
							L9: do {
								F.line = 120;
								var h_229427 = 0;
								F.line = 2104;
								var colontmp__229429 = 0;
								F.line = 120;
								colontmp__229429 = (next_nodes_228996[0].data != null ? (next_nodes_228996[0].data.length-1) : -1);
								F.line = 2107;
								var res_229431 = 0;
								L10: do {
									F.line = 2108;
										L11: while (true) {
										if (!(res_229431 <= colontmp__229429)) break L11;
											F.line = 2109;
											h_229427 = res_229431;
											if (is_filled_154282(next_nodes_228996[0].data[chckIndx(h_229427, 0, next_nodes_228996[0].data.length+0-1)-0].Field0)) {
											F.line = 121;
											next_node_229111 = next_nodes_228996[0].data[chckIndx(h_229427, 0, next_nodes_228996[0].data.length+0-1)-0].Field1;
											L12: do {
												L13: do {
													F.line = 259;
													var epsilon_next_node_229119 = null;
													F.line = 100;
													var colontmp__229413 = {data: null, counter: 0};
													F.line = 259;
													nimCopy(colontmp__229413, next_node_229111.epsilonSet, NTI212034);
													if (!(is_valid_214572(colontmp__229413))) {
													F.line = 119;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
													}
													
													L14: do {
														F.line = 120;
														var h_229417 = 0;
														F.line = 2104;
														var colontmp__229419 = 0;
														F.line = 120;
														colontmp__229419 = (colontmp__229413.data != null ? (colontmp__229413.data.length-1) : -1);
														F.line = 2107;
														var res_229421 = 0;
														L15: do {
															F.line = 2108;
																L16: while (true) {
																if (!(res_229421 <= colontmp__229419)) break L16;
																	F.line = 2109;
																	h_229417 = res_229421;
																	if (is_filled_154282(colontmp__229413.data[chckIndx(h_229417, 0, colontmp__229413.data.length+0-1)-0].Field0)) {
																	F.line = 121;
																	epsilon_next_node_229119 = colontmp__229413.data[chckIndx(h_229417, 0, colontmp__229413.data.length+0-1)-0].Field1;
																	F.line = 260;
																	incl_214544(cur_node_228915.nextSet, epsilon_next_node_229119);
																	}
																	
																	F.line = 2110;
																	res_229421 = addInt(res_229421, 1);
																}
														} while(false);
													} while(false);
												} while(false);
												F.line = 261;
												switch (next_node_229111.kind) {
												case 65:
												case 70:
													F.line = 263;
													break L12;
													break;
												case 97:
												case 115:
													F.line = 265;
													incl_214544(cur_node_228915.nextSet, next_node_229111);
													break;
												default: 
													if (true) {
													F.line = 267;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(267, 16) `false` "));
													}
													
													break;
												}
											} while(false);
											}
											
											F.line = 2110;
											res_229431 = addInt(res_229431, 1);
										}
								} while(false);
							} while(false);
						} while(false);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function new_grammar_214047(name_214049, grammar_string_214050) {
		var Tmp1;

	var result_214051 = null;

	var F={procname:"grammar.newGrammar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 115;
		result_214051 = {token: 0, grammarString: null, rootNode: null, firstSet: {}, cursor: 0};
		F.line = 116;
		result_214051.token = (Tmp1 = HEX5BHEX5D_212903(str_token_map_208604, name_214049), Tmp1[0])[Tmp1[1]];
		F.line = 117;
		result_214051.grammarString = nimCopy(null, grammar_string_214050, NTI138);
		F.line = 118;
		result_214051.rootNode = match_f_212456(result_214051);
		if (!(!(is_grammar_terminator_212485(result_214051.rootNode)))) {
		F.line = 121;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(121, 3) `not isGrammarTerminator(result.rootNode)` "));
		}
		
		F.line = 122;
		result_214051.cursor = 0;
		F.line = 123;
		assign_id_212472(result_214051.rootNode);
		F.line = 124;
		gen_epsilon_set_212491(result_214051.rootNode);
		F.line = 125;
		gen_next_set_212494(result_214051.rootNode);
	framePtr = F.prev;

	return result_214051;

}

function raw_insert_253509(t_253516, data_253520, data_253520_Idx, key_253522, val_253524, hc_253526, h_253528) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_253520[data_253520_Idx][chckIndx(h_253528, 0, data_253520[data_253520_Idx].length+0-1)-0].Field1 = key_253522;
		F.line = 65;
		data_253520[data_253520_Idx][chckIndx(h_253528, 0, data_253520[data_253520_Idx].length+0-1)-0].Field2 = val_253524;
		F.line = 66;
		data_253520[data_253520_Idx][chckIndx(h_253528, 0, data_253520[data_253520_Idx].length+0-1)-0].Field0 = hc_253526;
	framePtr = F.prev;

	
}

function enlarge_252121(t_252128) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_252136 = null;
		F.line = 314;
		n_252136 = new Array(chckRange(mulInt((t_252128.data != null ? t_252128.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_252128.data != null ? t_252128.data.length : 0), 2), 0, 2147483647);++i) {n_252136[i]={Field0: 0, Field1: 0, Field2: null};}		F.line = 315;
		var Tmp1 = t_252128.data; t_252128.data = n_252136; n_252136 = Tmp1;		L2: do {
			F.line = 316;
			var i_252407 = 0;
			F.line = 2088;
			var colontmp__254346 = 0;
			F.line = 316;
			colontmp__254346 = (n_252136 != null ? (n_252136.length-1) : -1);
			F.line = 2094;
			var res_254349 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_254349 <= colontmp__254346)) break L4;
						F.line = 2096;
						i_252407 = res_254349;
						F.line = 317;
						var eh_252675 = n_252136[chckIndx(i_252407, 0, n_252136.length+0-1)-0].Field0;
						if (is_filled_146491(eh_252675)) {
						F.line = 319;
						var j_252684 = (eh_252675 & (t_252128.data != null ? (t_252128.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_252128.data[chckIndx(j_252684, 0, t_252128.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_252684 = next_try_146614(j_252684, (t_252128.data != null ? (t_252128.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_253509(t_252128, t_252128, "data", n_252136[chckIndx(i_252407, 0, n_252136.length+0-1)-0].Field1, n_252136[chckIndx(i_252407, 0, n_252136.length+0-1)-0].Field2, eh_252675, j_252684);
						}
						
						F.line = 2097;
						res_254349 = addInt(res_254349, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function hash_254380(x_254384) {
	var result_254385 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_254385 = x_254384;
	framePtr = F.prev;

	return result_254385;

}

function raw_get_deep_254368(t_254373, key_254375, hc_254377, hc_254377_Idx) {
	var result_254378 = 0;

	var F={procname:"rawGetDeep.rawGetDeep",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 43;
		hc_254377[hc_254377_Idx] = hash_254380(key_254375);
		if ((hc_254377[hc_254377_Idx] == 0)) {
		F.line = 45;
		hc_254377[hc_254377_Idx] = 314159265;
		}
		
		F.line = 58;
		var h_254414 = (hc_254377[hc_254377_Idx] & (t_254373.data != null ? (t_254373.data.length-1) : -1));
		L1: do {
			F.line = 59;
				L2: while (true) {
				if (!is_filled_146491(t_254373.data[chckIndx(h_254414, 0, t_254373.data.length+0-1)-0].Field0)) break L2;
					F.line = 60;
					h_254414 = next_try_146614(h_254414, (t_254373.data != null ? (t_254373.data.length-1) : -1));
				}
		} while(false);
		F.line = 61;
		result_254378 = h_254414;
	framePtr = F.prev;

	return result_254378;

}

function add_251856(t_251863, key_251865, val_251867) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (must_rehash_146509((t_251863.data != null ? t_251863.data.length : 0), t_251863.counter)) {
		F.line = 82;
		enlarge_252121(t_251863);
		}
		
		F.line = 83;
		var hc_254366 = [0];
		F.line = 84;
		var j_254705 = raw_get_deep_254368(t_251863, key_251865, hc_254366, 0);
		F.line = 85;
		raw_insert_253509(t_251863, t_251863, "data", key_251865, val_251867, hc_254366[0], j_254705);
		F.line = 340;
		t_251863.counter = addInt(t_251863.counter, 1);
	framePtr = F.prev;

	
}

function lex_grammar_251022() {
						var Tmp10;

	var F={procname:"grammar.lexGrammar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 484;
		var lines_251024 = nimCopy(null, grammar_lines_212094, NTI133824);
		F.line = 486;
		var line_idx_251026 = 0;
		L1: do {
			F.line = 487;
				L2: while (true) {
				if (!(line_idx_251026 < (lines_251024 != null ? lines_251024.length : 0))) break L2;
					L3: do {
						F.line = 488;
						var line_251034 = nimCopy(null, lines_251024[chckIndx(line_idx_251026, 0, lines_251024.length+0-1)-0], NTI138);
						if ((((line_251034 != null ? line_251034.length : 0) < 1) || (line_251034[chckIndx(0, 0, line_251034.length+0-1)-0] == 35))) {
						F.line = 490;
						line_idx_251026 = addInt(line_idx_251026, 1);
						F.line = 491;
						break L3;
						}
						
						F.line = 492;
						var colon_idx_251044 = nsuFindChar(line_251034, 58, 0, 0);
						if ((colon_idx_251044 == -1)) {
						F.line = 494;
						quit_19421(makeNimstrLit("Unknown syntax at {lineIdx}: {line}"), 1);
						}
						
						F.line = 495;
						var name_251252 = HEX5BHEX5D_48874(line_251034, HEX2EHEX2E_48828(0, subInt(colon_idx_251044, 1)));
						F.line = 498;
						var num_par_251254 = 0;
						F.line = 499;
						var num_bra_251256 = 0;
						F.line = 500;
						var start_col_idx_251257 = addInt(colon_idx_251044, 1);
						F.line = 501;
						var col_idx_251258 = start_col_idx_251257;
						F.line = 502;
						var grammar_string_251259 = [];
						if ((start_col_idx_251257 == (line_251034 != null ? line_251034.length : 0))) {
						F.line = 504;
						quit_19421(makeNimstrLit("Unknown syntax at {lineIdx}: {line}"), 1);
						}
						
						L4: do {
							F.line = 505;
								L5: while (true) {
								if (!true) break L5;
									L6: do {
										F.line = 506;
											L7: while (true) {
											if (!(col_idx_251258 < (line_251034 != null ? line_251034.length : 0))) break L7;
												F.line = 508;
												switch (line_251034[chckIndx(col_idx_251258, 0, line_251034.length+0-1)-0]) {
												case 40:
													F.line = 510;
													num_par_251254 = addInt(num_par_251254, 1);
													break;
												case 41:
													F.line = 512;
													num_par_251254 = subInt(num_par_251254, 1);
													break;
												case 91:
													F.line = 514;
													num_bra_251256 = addInt(num_bra_251256, 1);
													break;
												case 93:
													F.line = 516;
													num_bra_251256 = subInt(num_bra_251256, 1);
													break;
												default: 
													break;
												}
												F.line = 519;
												col_idx_251258 = addInt(col_idx_251258, 1);
											}
									} while(false);
									F.line = 520;
									if (grammar_string_251259 != null) { grammar_string_251259 = (grammar_string_251259).concat(HEX5BHEX5D_48874(line_251034, HEX2EHEX2E_48828(start_col_idx_251257, subInt(col_idx_251258, 1)))); } else { grammar_string_251259 = HEX5BHEX5D_48874(line_251034, HEX2EHEX2E_48828(start_col_idx_251257, subInt(col_idx_251258, 1))).slice(); };
									if (((num_par_251254 == 0) && (num_bra_251256 == 0))) {
									F.line = 522;
									break L4;
									}
									else {
										F.line = 524;
										line_idx_251026 = addInt(line_idx_251026, 1);
										F.line = 525;
										line_251034 = nimCopy(null, lines_251024[chckIndx(line_idx_251026, 0, lines_251024.length+0-1)-0], NTI138);
										F.line = 526;
										start_col_idx_251257 = 0;
										L8: do {
											F.line = 528;
												L9: while (true) {
												if (!(line_251034[chckIndx(start_col_idx_251257, 0, line_251034.length+0-1)-0] == 32)) break L9;
													F.line = 529;
													start_col_idx_251257 = addInt(start_col_idx_251257, 1);
												}
										} while(false);
										F.line = 531;
										start_col_idx_251257 = nimMax(subInt(start_col_idx_251257, 1), 0);
										F.line = 532;
										col_idx_251258 = start_col_idx_251257;
									}
									
								}
						} while(false);
						F.line = 533;
						line_idx_251026 = addInt(line_idx_251026, 1);
						F.line = 534;
						var grammar_251478 = new_grammar_214047(name_251252, grammar_string_251259);
						F.line = 535;
						add_251856(grammar_set_212224[0], (Tmp10 = HEX5BHEX5D_212903(str_token_map_208604, name_251252), Tmp10[0])[Tmp10[1]], grammar_251478);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_256594(t_256599, key_256601, hc_256603, hc_256603_Idx) {
						var Tmp3;

	var result_256604 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_256603[hc_256603_Idx] = hash_254380(key_256601);
		if ((hc_256603[hc_256603_Idx] == 0)) {
		F.line = 45;
		hc_256603[hc_256603_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_256620 = (hc_256603[hc_256603_Idx] & (t_256599.data != null ? (t_256599.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_256599.data[chckIndx(h_256620, 0, t_256599.data.length+0-1)-0].Field0)) break L2;
						if (!(t_256599.data[chckIndx(h_256620, 0, t_256599.data.length+0-1)-0].Field0 == hc_256603[hc_256603_Idx])) Tmp3 = false; else {							Tmp3 = (t_256599.data[chckIndx(h_256620, 0, t_256599.data.length+0-1)-0].Field1 == key_256601);						}					if (Tmp3) {
					F.line = 38;
					result_256604 = h_256620;
					break BeforeRet;
					}
					
					F.line = 39;
					h_256620 = next_try_146614(h_256620, (t_256599.data != null ? (t_256599.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_256604 = subInt(-1, h_256620);
	} while (false);
	framePtr = F.prev;

	return result_256604;

}

function has_key_256582(t_256588, key_256590) {
	var result_256591 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_256592 = [0];
		F.line = 264;
		result_256591 = (0 <= raw_get_256594(t_256588, key_256590, hc_256592, 0));
	framePtr = F.prev;

	return result_256591;

}

function is_terminator_203174(node_203176) {
	var result_203177 = false;

	var F={procname:"token.isTerminator",prev:framePtr,filename:"../Parser/token.nim",line:0};
	framePtr = F;
		F.line = 132;
		result_203177 = (node_203176 < 90);
	framePtr = F.prev;

	return result_203177;

}

function raw_get_255078(t_255083, key_255085, hc_255087, hc_255087_Idx) {
						var Tmp3;

	var result_255088 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_255087[hc_255087_Idx] = hash_254380(key_255085);
		if ((hc_255087[hc_255087_Idx] == 0)) {
		F.line = 45;
		hc_255087[hc_255087_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_255104 = (hc_255087[hc_255087_Idx] & (t_255083.data != null ? (t_255083.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_255083.data[chckIndx(h_255104, 0, t_255083.data.length+0-1)-0].Field0)) break L2;
						if (!(t_255083.data[chckIndx(h_255104, 0, t_255083.data.length+0-1)-0].Field0 == hc_255087[hc_255087_Idx])) Tmp3 = false; else {							Tmp3 = (t_255083.data[chckIndx(h_255104, 0, t_255083.data.length+0-1)-0].Field1 == key_255085);						}					if (Tmp3) {
					F.line = 38;
					result_255088 = h_255104;
					break BeforeRet;
					}
					
					F.line = 39;
					h_255104 = next_try_146614(h_255104, (t_255083.data != null ? (t_255083.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_255088 = subInt(-1, h_255104);
	} while (false);
	framePtr = F.prev;

	return result_255088;

}

function HEX5BHEX5D_255063(t_255070, key_255072) {
	var result_255074 = [null, 0];
	var result_255074_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_255076 = [0];
		F.line = 161;
		var index_255939 = raw_get_255078(t_255070, key_255072, hc_255076, 0);
		if ((0 <= index_255939)) {
		F.line = 162;
		result_255074 = t_255070.data[chckIndx(index_255939, 0, t_255070.data.length+0-1)-0]; result_255074_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_256412 = null;
			F.line = 2896;
			e_256412 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_256412.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(reprEnum(key_255072, NTI202995)), NTI138);
			F.line = 2891;
			e_256412.parent = null;
			F.line = 165;
			raiseException(e_256412, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_255074, result_255074_Idx];

}

function is_non_terminator_203200(node_203202) {
	var result_203203 = false;

	var F={procname:"token.isNonTerminator",prev:framePtr,filename:"../Parser/token.nim",line:0};
	framePtr = F;
		F.line = 135;
		result_203203 = (90 < node_203202);
	framePtr = F.prev;

	return result_203203;

}

function gen_first_set_254783(grammar_254785) {
			var Tmp1;
							var Tmp6;

	var F={procname:"grammar.genFirstSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((grammar_254785.rootNode.kind == 97)) {
		F.line = 540;
		var root_token_254787 = grammar_254785.rootNode.token;
		if (is_terminator_203174(root_token_254787)) {
		F.line = 542;
		grammar_254785.firstSet[grammar_254785.rootNode.token] = true;
		}
		else {
			F.line = 544;
			var g_256435 = (Tmp1 = HEX5BHEX5D_255063(grammar_set_212224[0], root_token_254787), Tmp1[0])[Tmp1[1]];
			if (!(has_key_256582(first_set_212424[0], root_token_254787))) {
			F.line = 546;
			gen_first_set_254783(g_256435);
			}
			
			F.line = 835;
			nimCopy(grammar_254785.firstSet, SetPlus(grammar_254785.firstSet, g_256435.firstSet), NTI257479);
		}
		
		F.line = 548;
		break BeforeRet;
		}
		
		L2: do {
			F.line = 549;
			var first_node_257487 = null;
			F.line = 100;
			var colontmp__257798 = {data: null, counter: 0};
			F.line = 549;
			nimCopy(colontmp__257798, grammar_254785.rootNode.epsilonSet, NTI212034);
			if (!(is_valid_214572(colontmp__257798))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L3: do {
				F.line = 120;
				var h_257802 = 0;
				F.line = 2104;
				var colontmp__257804 = 0;
				F.line = 120;
				colontmp__257804 = (colontmp__257798.data != null ? (colontmp__257798.data.length-1) : -1);
				F.line = 2107;
				var res_257806 = 0;
				L4: do {
					F.line = 2108;
						L5: while (true) {
						if (!(res_257806 <= colontmp__257804)) break L5;
							F.line = 2109;
							h_257802 = res_257806;
							if (is_filled_154282(colontmp__257798.data[chckIndx(h_257802, 0, colontmp__257798.data.length+0-1)-0].Field0)) {
							F.line = 121;
							first_node_257487 = colontmp__257798.data[chckIndx(h_257802, 0, colontmp__257798.data.length+0-1)-0].Field1;
							if (is_non_terminator_203200(first_node_257487.token)) {
							F.line = 551;
							var first_grammar_257766 = (Tmp6 = HEX5BHEX5D_255063(grammar_set_212224[0], first_node_257487.token), Tmp6[0])[Tmp6[1]];
							if ((SetCard(first_grammar_257766.firstSet) == 0)) {
							F.line = 553;
							gen_first_set_254783(first_grammar_257766);
							}
							
							F.line = 835;
							nimCopy(grammar_254785.firstSet, SetPlus(grammar_254785.firstSet, first_grammar_257766.firstSet), NTI257479);
							}
							else {
								F.line = 556;
							grammar_254785.firstSet[first_node_257487.token] = true;
							}
							
							}
							
							F.line = 2110;
							res_257806 = addInt(res_257806, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function gen_first_set_257822() {
	var F={procname:"grammar.genFirstSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 561;
			var grammar_258407 = null;
			L2: do {
				F.line = 288;
				var h_258568 = 0;
				F.line = 2104;
				var colontmp__258570 = 0;
				F.line = 288;
				colontmp__258570 = (grammar_set_212224[0].data != null ? (grammar_set_212224[0].data.length-1) : -1);
				F.line = 2107;
				var res_258572 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_258572 <= colontmp__258570)) break L4;
							F.line = 2109;
							h_258568 = res_258572;
							if (is_filled_146491(grammar_set_212224[0].data[chckIndx(h_258568, 0, grammar_set_212224[0].data.length+0-1)-0].Field0)) {
							F.line = 289;
							grammar_258407 = grammar_set_212224[0].data[chckIndx(h_258568, 0, grammar_set_212224[0].data.length+0-1)-0].Field2;
							L5: do {
								if (has_key_256582(first_set_212424[0], grammar_258407.token)) {
								F.line = 563;
								break L5;
								}
								
								F.line = 564;
								gen_first_set_254783(grammar_258407);
							} while(false);
							}
							
							F.line = 2110;
							res_258572 = addInt(res_258572, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}
lex_grammar_251022();
gen_first_set_257822();

function init_table_337165(initial_size_337170) {
	var result_337191 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_337170))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_337191.counter = 0;
		F.line = 354;
		result_337191.data = new Array(chckRange(initial_size_337170, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_337170, 0, 2147483647);++i) {result_337191.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_337191;

}
var source_files_337224 = [init_table_337165(64)];

function re_343862() {
	var result_343867 = {states: null, groupsCount: 0, namedGroups: {data: null, counter: 0}};

	var F={procname:"re.re",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2867;
		nimCopy(result_343867, {states: nimCopy(null, [{kind: 45, cp: 191, outA: -1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 2, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 3, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 95, Field1: 95}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 1}, ranges: nimCopy(null, [{a: 97, b: 122}, {a: 65, b: 90}], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 7, cp: 43, outA: 2, outB: 5, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 5, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 95, Field1: 95}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 1}, ranges: nimCopy(null, [{a: 97, b: 122}, {a: 65, b: 90}, {a: 48, b: 57}], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 6, cp: 42, outA: 4, outB: 6, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 0, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 44, cp: 191, outA: 1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}], NTI320469), groupsCount: 0, namedGroups: {data: nimCopy(null, [], NTI301989), counter: 0}}, NTI320460);
	framePtr = F.prev;

	return result_343867;

}

function re_343888() {
	var result_343893 = {states: null, groupsCount: 0, namedGroups: {data: null, counter: 0}};

	var F={procname:"re.re",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2867;
		nimCopy(result_343893, {states: nimCopy(null, [{kind: 45, cp: 191, outA: -1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 3, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 19, cp: 100, outA: 3, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 6, cp: 42, outA: 2, outB: 5, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 0, cp: 46, outA: 6, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 8, cp: 63, outA: 4, outB: 6, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 19, cp: 100, outA: 7, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 7, cp: 43, outA: 6, outB: 15, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 10, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 69, Field1: 69}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 101, Field1: 101}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 2}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 11, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 43, Field1: 43}, {Field0: 0, Field1: 0}, {Field0: 45, Field1: 45}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 2}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 8, cp: 63, outA: 9, outB: 11, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 19, cp: 100, outA: 12, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 7, cp: 43, outA: 11, outB: 14, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 3, cp: 40, outA: 8, outB: -1, isGreedy: false, idx: 0, isCapturing: true, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 4, cp: 41, outA: 16, outB: -1, isGreedy: false, idx: 0, isCapturing: true, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 8, cp: 63, outA: 13, outB: 16, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 0, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 44, cp: 191, outA: 1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}], NTI320469), groupsCount: 1, namedGroups: {data: nimCopy(null, [], NTI301989), counter: 0}}, NTI320460);
	framePtr = F.prev;

	return result_343893;

}
var regex_name_343885 = [re_343862()];
var regex_number_343908 = [re_343888()];

function new_353206() {
	var result_353211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_353401 = null;
		F.line = 211;
		r_353401 = {m_type: NTI353098, b: false, id: 0, pyType: null};
		F.line = 212;
		result_353211 = r_353401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_353211;

}

function new_py_bool_simple_353201() {
	var result_353203 = null;

	var F={procname:"boolobject.newPyBoolSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_353424 = new_353206();
		F.line = 561;
		obj_353424.pyType = py_bool_object_type_353104;
		F.line = 563;
		give_id_157814(obj_353424);
		result_353203 = obj_353424;
	framePtr = F.prev;

	return result_353203;

}

function new_py_bool_default_353821(args_353053) {
	var result_353824 = null;

	var F={procname:"boolobject.newPyBoolDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_353824 = new_py_bool_simple_353201();
	framePtr = F.prev;

	return result_353824;

}
var py_bool_object_type_353104 = new_py_type_159261(makeNimstrLit("Bool"));
py_bool_object_type_353104.kind = 6;
py_bool_object_type_353104.magicMethods.Field26 = new_py_bool_default_353821;

function new_py_bool_354057(b_354059) {
	var result_354060 = null;

	var F={procname:"boolobject.newPyBool",prev:framePtr,filename:"../Objects/boolobject.nim",line:0};
	framePtr = F;
		F.line = 7;
		result_354060 = new_py_bool_simple_353201();
		F.line = 8;
		result_354060.b = b_354059;
	framePtr = F.prev;

	return result_354060;

}
var py_true_obj_354074 = new_py_bool_354057(true);
var py_false_obj_354075 = new_py_bool_354057(false);

function new_355206() {
	var result_355211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_355401 = null;
		F.line = 211;
		r_355401 = {m_type: NTI355070, id: 0, pyType: null};
		F.line = 212;
		result_355211 = r_355401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_355211;

}

function new_py_none_simple_355201() {
	var result_355203 = null;

	var F={procname:"noneobject.newPyNoneSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_355424 = new_355206();
		F.line = 561;
		obj_355424.pyType = py_none_object_type_355074;
		F.line = 563;
		give_id_157814(obj_355424);
		result_355203 = obj_355424;
	framePtr = F.prev;

	return result_355203;

}

function new_py_none_default_355821(args_355025) {
	var result_355824 = null;

	var F={procname:"noneobject.newPyNoneDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_355824 = new_py_none_simple_355201();
	framePtr = F.prev;

	return result_355824;

}

function of_py_none_object_355076(obj_355015) {
	var result_355078 = false;

	var F={procname:"noneobject.ofPyNoneObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_355078 = (obj_355015.pyType.kind == 2);
	framePtr = F.prev;

	return result_355078;

}

function eq_py_none_object_magic_356046(self_no_cast_356048, other_356049) {
	var result_356050 = null;

	var F={procname:"noneobject.eqPyNoneObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_356048.m_type, NTI355070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNoneObject` "));
		}
		
		F.line = 438;
		var self_356201 = self_no_cast_356048;
		if (of_py_none_object_355076(other_356049)) {
		F.line = 11;
		result_356050 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 13;
			result_356050 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_356050;

}
var py_none_object_type_355074 = new_py_type_159261(makeNimstrLit("None"));
py_none_object_type_355074.kind = 2;
py_none_object_type_355074.magicMethods.Field26 = new_py_none_default_355821;
var py_none_356044 = new_py_none_simple_355201();
py_none_object_type_355074.magicMethods.Field18 = eq_py_none_object_magic_356046;

function new_357406() {
	var result_357411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_357601 = null;
		F.line = 211;
		r_357601 = {m_type: NTI357244, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_357411 = r_357601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_357411;

}

function new_py_base_error_simple_357401() {
	var result_357403 = null;

	var F={procname:"exceptions.newPyBaseErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_357624 = new_357406();
		F.line = 561;
		obj_357624.pyType = py_base_error_object_type_357260;
		F.line = 563;
		give_id_157814(obj_357624);
		result_357403 = obj_357624;
	framePtr = F.prev;

	return result_357403;

}

function new_py_base_error_default_358021(args_357199) {
	var result_358024 = null;

	var F={procname:"exceptions.newPyBaseErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_358024 = new_py_base_error_simple_357401();
	framePtr = F.prev;

	return result_358024;

}
var py_base_error_object_type_357260 = new_py_type_159261(makeNimstrLit("BaseError"));
py_base_error_object_type_357260.kind = 3;
py_base_error_object_type_357260.magicMethods.Field26 = new_py_base_error_default_358021;

function new_358606() {
	var result_358611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_358801 = null;
		F.line = 211;
		r_358801 = {m_type: NTI358415, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_358611 = r_358801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_358611;

}

function new_py_name_error_simple_358601() {
	var result_358603 = null;

	var F={procname:"exceptions.newPyNameErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_358824 = new_358606();
		F.line = 561;
		obj_358824.pyType = py_name_error_object_type_358419;
		F.line = 563;
		give_id_157814(obj_358824);
		result_358603 = obj_358824;
	framePtr = F.prev;

	return result_358603;

}

function new_py_name_error_default_359221(args_358370) {
	var result_359224 = null;

	var F={procname:"exceptions.newPyNameErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_359224 = new_py_name_error_simple_358601();
	framePtr = F.prev;

	return result_359224;

}

function new_359606() {
	var result_359611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_359801 = null;
		F.line = 211;
		r_359801 = {m_type: NTI359501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_359611 = r_359801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_359611;

}

function new_py_not_implemented_error_simple_359601() {
	var result_359603 = null;

	var F={procname:"exceptions.newPyNotImplementedErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_359824 = new_359606();
		F.line = 561;
		obj_359824.pyType = py_not_implemented_error_object_type_359505;
		F.line = 563;
		give_id_157814(obj_359824);
		result_359603 = obj_359824;
	framePtr = F.prev;

	return result_359603;

}

function new_py_not_implemented_error_default_360221(args_359456) {
	var result_360224 = null;

	var F={procname:"exceptions.newPyNotImplementedErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_360224 = new_py_not_implemented_error_simple_359601();
	framePtr = F.prev;

	return result_360224;

}

function new_360606() {
	var result_360611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_360801 = null;
		F.line = 211;
		r_360801 = {m_type: NTI360501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_360611 = r_360801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_360611;

}

function new_py_type_error_simple_360601() {
	var result_360603 = null;

	var F={procname:"exceptions.newPyTypeErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_360824 = new_360606();
		F.line = 561;
		obj_360824.pyType = py_type_error_object_type_360505;
		F.line = 563;
		give_id_157814(obj_360824);
		result_360603 = obj_360824;
	framePtr = F.prev;

	return result_360603;

}

function new_py_type_error_default_361221(args_360456) {
	var result_361224 = null;

	var F={procname:"exceptions.newPyTypeErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_361224 = new_py_type_error_simple_360601();
	framePtr = F.prev;

	return result_361224;

}

function new_361606() {
	var result_361611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_361801 = null;
		F.line = 211;
		r_361801 = {m_type: NTI361501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_361611 = r_361801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_361611;

}

function new_py_attribute_error_simple_361601() {
	var result_361603 = null;

	var F={procname:"exceptions.newPyAttributeErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_361824 = new_361606();
		F.line = 561;
		obj_361824.pyType = py_attribute_error_object_type_361505;
		F.line = 563;
		give_id_157814(obj_361824);
		result_361603 = obj_361824;
	framePtr = F.prev;

	return result_361603;

}

function new_py_attribute_error_default_362221(args_361456) {
	var result_362224 = null;

	var F={procname:"exceptions.newPyAttributeErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_362224 = new_py_attribute_error_simple_361601();
	framePtr = F.prev;

	return result_362224;

}

function new_362606() {
	var result_362611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_362801 = null;
		F.line = 211;
		r_362801 = {m_type: NTI362501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_362611 = r_362801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_362611;

}

function new_py_value_error_simple_362601() {
	var result_362603 = null;

	var F={procname:"exceptions.newPyValueErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_362824 = new_362606();
		F.line = 561;
		obj_362824.pyType = py_value_error_object_type_362505;
		F.line = 563;
		give_id_157814(obj_362824);
		result_362603 = obj_362824;
	framePtr = F.prev;

	return result_362603;

}

function new_py_value_error_default_363221(args_362456) {
	var result_363224 = null;

	var F={procname:"exceptions.newPyValueErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_363224 = new_py_value_error_simple_362601();
	framePtr = F.prev;

	return result_363224;

}

function new_363606() {
	var result_363611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_363801 = null;
		F.line = 211;
		r_363801 = {m_type: NTI363501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_363611 = r_363801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_363611;

}

function new_py_index_error_simple_363601() {
	var result_363603 = null;

	var F={procname:"exceptions.newPyIndexErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_363824 = new_363606();
		F.line = 561;
		obj_363824.pyType = py_index_error_object_type_363505;
		F.line = 563;
		give_id_157814(obj_363824);
		result_363603 = obj_363824;
	framePtr = F.prev;

	return result_363603;

}

function new_py_index_error_default_364221(args_363456) {
	var result_364224 = null;

	var F={procname:"exceptions.newPyIndexErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_364224 = new_py_index_error_simple_363601();
	framePtr = F.prev;

	return result_364224;

}

function new_364606() {
	var result_364611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_364801 = null;
		F.line = 211;
		r_364801 = {m_type: NTI364501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_364611 = r_364801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_364611;

}

function new_py_stop_iter_error_simple_364601() {
	var result_364603 = null;

	var F={procname:"exceptions.newPyStopIterErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_364824 = new_364606();
		F.line = 561;
		obj_364824.pyType = py_stop_iter_error_object_type_364505;
		F.line = 563;
		give_id_157814(obj_364824);
		result_364603 = obj_364824;
	framePtr = F.prev;

	return result_364603;

}

function new_py_stop_iter_error_default_365221(args_364456) {
	var result_365224 = null;

	var F={procname:"exceptions.newPyStopIterErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_365224 = new_py_stop_iter_error_simple_364601();
	framePtr = F.prev;

	return result_365224;

}

function new_365606() {
	var result_365611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_365801 = null;
		F.line = 211;
		r_365801 = {m_type: NTI365501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_365611 = r_365801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_365611;

}

function new_py_lock_error_simple_365601() {
	var result_365603 = null;

	var F={procname:"exceptions.newPyLockErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_365824 = new_365606();
		F.line = 561;
		obj_365824.pyType = py_lock_error_object_type_365505;
		F.line = 563;
		give_id_157814(obj_365824);
		result_365603 = obj_365824;
	framePtr = F.prev;

	return result_365603;

}

function new_py_lock_error_default_366221(args_365456) {
	var result_366224 = null;

	var F={procname:"exceptions.newPyLockErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_366224 = new_py_lock_error_simple_365601();
	framePtr = F.prev;

	return result_366224;

}

function new_366606() {
	var result_366611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_366801 = null;
		F.line = 211;
		r_366801 = {m_type: NTI366501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_366611 = r_366801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_366611;

}

function new_py_import_error_simple_366601() {
	var result_366603 = null;

	var F={procname:"exceptions.newPyImportErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_366824 = new_366606();
		F.line = 561;
		obj_366824.pyType = py_import_error_object_type_366505;
		F.line = 563;
		give_id_157814(obj_366824);
		result_366603 = obj_366824;
	framePtr = F.prev;

	return result_366603;

}

function new_py_import_error_default_367221(args_366456) {
	var result_367224 = null;

	var F={procname:"exceptions.newPyImportErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_367224 = new_py_import_error_simple_366601();
	framePtr = F.prev;

	return result_367224;

}

function new_367606() {
	var result_367611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_367801 = null;
		F.line = 211;
		r_367801 = {m_type: NTI367501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_367611 = r_367801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_367611;

}

function new_py_unbound_local_error_simple_367601() {
	var result_367603 = null;

	var F={procname:"exceptions.newPyUnboundLocalErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_367824 = new_367606();
		F.line = 561;
		obj_367824.pyType = py_unbound_local_error_object_type_367505;
		F.line = 563;
		give_id_157814(obj_367824);
		result_367603 = obj_367824;
	framePtr = F.prev;

	return result_367603;

}

function new_py_unbound_local_error_default_368221(args_367456) {
	var result_368224 = null;

	var F={procname:"exceptions.newPyUnboundLocalErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_368224 = new_py_unbound_local_error_simple_367601();
	framePtr = F.prev;

	return result_368224;

}

function new_368606() {
	var result_368611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_368801 = null;
		F.line = 211;
		r_368801 = {m_type: NTI368501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_368611 = r_368801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_368611;

}

function new_py_key_error_simple_368601() {
	var result_368603 = null;

	var F={procname:"exceptions.newPyKeyErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_368824 = new_368606();
		F.line = 561;
		obj_368824.pyType = py_key_error_object_type_368505;
		F.line = 563;
		give_id_157814(obj_368824);
		result_368603 = obj_368824;
	framePtr = F.prev;

	return result_368603;

}

function new_py_key_error_default_369221(args_368456) {
	var result_369224 = null;

	var F={procname:"exceptions.newPyKeyErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_369224 = new_py_key_error_simple_368601();
	framePtr = F.prev;

	return result_369224;

}

function new_369606() {
	var result_369611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_369801 = null;
		F.line = 211;
		r_369801 = {m_type: NTI369501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_369611 = r_369801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_369611;

}

function new_py_assertion_error_simple_369601() {
	var result_369603 = null;

	var F={procname:"exceptions.newPyAssertionErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_369824 = new_369606();
		F.line = 561;
		obj_369824.pyType = py_assertion_error_object_type_369505;
		F.line = 563;
		give_id_157814(obj_369824);
		result_369603 = obj_369824;
	framePtr = F.prev;

	return result_369603;

}

function new_py_assertion_error_default_370221(args_369456) {
	var result_370224 = null;

	var F={procname:"exceptions.newPyAssertionErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_370224 = new_py_assertion_error_simple_369601();
	framePtr = F.prev;

	return result_370224;

}

function new_370606() {
	var result_370611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_370801 = null;
		F.line = 211;
		r_370801 = {m_type: NTI370501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_370611 = r_370801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_370611;

}

function new_py_zero_division_error_simple_370601() {
	var result_370603 = null;

	var F={procname:"exceptions.newPyZeroDivisionErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_370824 = new_370606();
		F.line = 561;
		obj_370824.pyType = py_zero_division_error_object_type_370505;
		F.line = 563;
		give_id_157814(obj_370824);
		result_370603 = obj_370824;
	framePtr = F.prev;

	return result_370603;

}

function new_py_zero_division_error_default_371221(args_370456) {
	var result_371224 = null;

	var F={procname:"exceptions.newPyZeroDivisionErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_371224 = new_py_zero_division_error_simple_370601();
	framePtr = F.prev;

	return result_371224;

}

function new_371606() {
	var result_371611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_371801 = null;
		F.line = 211;
		r_371801 = {m_type: NTI371501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_371611 = r_371801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_371611;

}

function new_py_runtime_error_simple_371601() {
	var result_371603 = null;

	var F={procname:"exceptions.newPyRuntimeErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_371824 = new_371606();
		F.line = 561;
		obj_371824.pyType = py_runtime_error_object_type_371505;
		F.line = 563;
		give_id_157814(obj_371824);
		result_371603 = obj_371824;
	framePtr = F.prev;

	return result_371603;

}

function new_py_runtime_error_default_372221(args_371456) {
	var result_372224 = null;

	var F={procname:"exceptions.newPyRuntimeErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_372224 = new_py_runtime_error_simple_371601();
	framePtr = F.prev;

	return result_372224;

}

function new_372606() {
	var result_372611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_372801 = null;
		F.line = 211;
		r_372801 = {m_type: NTI372501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_372611 = r_372801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_372611;

}

function new_py_syntax_error_simple_372601() {
	var result_372603 = null;

	var F={procname:"exceptions.newPySyntaxErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_372824 = new_372606();
		F.line = 561;
		obj_372824.pyType = py_syntax_error_object_type_372505;
		F.line = 563;
		give_id_157814(obj_372824);
		result_372603 = obj_372824;
	framePtr = F.prev;

	return result_372603;

}

function new_py_syntax_error_default_373221(args_372456) {
	var result_373224 = null;

	var F={procname:"exceptions.newPySyntaxErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_373224 = new_py_syntax_error_simple_372601();
	framePtr = F.prev;

	return result_373224;

}
var py_name_error_object_type_358419 = new_py_type_159261(makeNimstrLit("NameError"));
py_name_error_object_type_358419.magicMethods.Field26 = new_py_name_error_default_359221;
py_name_error_object_type_358419.kind = 3;
py_name_error_object_type_358419.base = py_base_error_object_type_357260;
var py_not_implemented_error_object_type_359505 = new_py_type_159261(makeNimstrLit("NotImplementedError"));
py_not_implemented_error_object_type_359505.magicMethods.Field26 = new_py_not_implemented_error_default_360221;
py_not_implemented_error_object_type_359505.kind = 3;
py_not_implemented_error_object_type_359505.base = py_base_error_object_type_357260;
var py_type_error_object_type_360505 = new_py_type_159261(makeNimstrLit("TypeError"));
py_type_error_object_type_360505.magicMethods.Field26 = new_py_type_error_default_361221;
py_type_error_object_type_360505.kind = 3;
py_type_error_object_type_360505.base = py_base_error_object_type_357260;
var py_attribute_error_object_type_361505 = new_py_type_159261(makeNimstrLit("AttributeError"));
py_attribute_error_object_type_361505.magicMethods.Field26 = new_py_attribute_error_default_362221;
py_attribute_error_object_type_361505.kind = 3;
py_attribute_error_object_type_361505.base = py_base_error_object_type_357260;
var py_value_error_object_type_362505 = new_py_type_159261(makeNimstrLit("ValueError"));
py_value_error_object_type_362505.magicMethods.Field26 = new_py_value_error_default_363221;
py_value_error_object_type_362505.kind = 3;
py_value_error_object_type_362505.base = py_base_error_object_type_357260;
var py_index_error_object_type_363505 = new_py_type_159261(makeNimstrLit("IndexError"));
py_index_error_object_type_363505.magicMethods.Field26 = new_py_index_error_default_364221;
py_index_error_object_type_363505.kind = 3;
py_index_error_object_type_363505.base = py_base_error_object_type_357260;
var py_stop_iter_error_object_type_364505 = new_py_type_159261(makeNimstrLit("StopIterError"));
py_stop_iter_error_object_type_364505.magicMethods.Field26 = new_py_stop_iter_error_default_365221;
py_stop_iter_error_object_type_364505.kind = 3;
py_stop_iter_error_object_type_364505.base = py_base_error_object_type_357260;
var py_lock_error_object_type_365505 = new_py_type_159261(makeNimstrLit("LockError"));
py_lock_error_object_type_365505.magicMethods.Field26 = new_py_lock_error_default_366221;
py_lock_error_object_type_365505.kind = 3;
py_lock_error_object_type_365505.base = py_base_error_object_type_357260;
var py_import_error_object_type_366505 = new_py_type_159261(makeNimstrLit("ImportError"));
py_import_error_object_type_366505.magicMethods.Field26 = new_py_import_error_default_367221;
py_import_error_object_type_366505.kind = 3;
py_import_error_object_type_366505.base = py_base_error_object_type_357260;
var py_unbound_local_error_object_type_367505 = new_py_type_159261(makeNimstrLit("UnboundLocalError"));
py_unbound_local_error_object_type_367505.magicMethods.Field26 = new_py_unbound_local_error_default_368221;
py_unbound_local_error_object_type_367505.kind = 3;
py_unbound_local_error_object_type_367505.base = py_base_error_object_type_357260;
var py_key_error_object_type_368505 = new_py_type_159261(makeNimstrLit("KeyError"));
py_key_error_object_type_368505.magicMethods.Field26 = new_py_key_error_default_369221;
py_key_error_object_type_368505.kind = 3;
py_key_error_object_type_368505.base = py_base_error_object_type_357260;
var py_assertion_error_object_type_369505 = new_py_type_159261(makeNimstrLit("AssertionError"));
py_assertion_error_object_type_369505.magicMethods.Field26 = new_py_assertion_error_default_370221;
py_assertion_error_object_type_369505.kind = 3;
py_assertion_error_object_type_369505.base = py_base_error_object_type_357260;
var py_zero_division_error_object_type_370505 = new_py_type_159261(makeNimstrLit("ZeroDivisionError"));
py_zero_division_error_object_type_370505.magicMethods.Field26 = new_py_zero_division_error_default_371221;
py_zero_division_error_object_type_370505.kind = 3;
py_zero_division_error_object_type_370505.base = py_base_error_object_type_357260;
var py_runtime_error_object_type_371505 = new_py_type_159261(makeNimstrLit("RuntimeError"));
py_runtime_error_object_type_371505.magicMethods.Field26 = new_py_runtime_error_default_372221;
py_runtime_error_object_type_371505.kind = 3;
py_runtime_error_object_type_371505.base = py_base_error_object_type_357260;
var py_syntax_error_object_type_372505 = new_py_type_159261(makeNimstrLit("SyntaxError"));
py_syntax_error_object_type_372505.magicMethods.Field26 = new_py_syntax_error_default_373221;
py_syntax_error_object_type_372505.kind = 3;
py_syntax_error_object_type_372505.base = py_base_error_object_type_357260;

function new_374406() {
	var result_374411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_374601 = null;
		F.line = 211;
		r_374601 = {m_type: NTI374303, sign: 0, digits: null, id: 0, pyType: null};
		F.line = 212;
		result_374411 = r_374601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_374411;

}

function new_py_int_simple_374401() {
	var result_374403 = null;

	var F={procname:"numobjects.newPyIntSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_374624 = new_374406();
		F.line = 561;
		obj_374624.pyType = py_int_object_type_374313;
		F.line = 563;
		give_id_157814(obj_374624);
		result_374403 = obj_374624;
	framePtr = F.prev;

	return result_374403;

}

function new_py_int_default_375021(args_374258) {
	var result_375024 = null;

	var F={procname:"numobjects.newPyIntDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_375024 = new_py_int_simple_374401();
	framePtr = F.prev;

	return result_375024;

}
var py_int_object_type_374313 = new_py_type_159261(makeNimstrLit("Int"));
py_int_object_type_374313.kind = 4;
py_int_object_type_374313.magicMethods.Field26 = new_py_int_default_375021;
var py_int_zero_375346 = new_py_int_375257(0);
var py_int_one_375347 = new_py_int_375257(1);
var py_int_two_375348 = new_py_int_375257(2);
var py_int_ten_375349 = new_py_int_375257(10);

function new_378806() {
	var result_378811 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_379001 = null;
		F.line = 211;
		r_379001 = {m_type: NTI378718, v: 0.0, id: 0, pyType: null};
		F.line = 212;
		result_378811 = r_379001;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_378811;

}

function new_py_float_simple_378801() {
	var result_378803 = null;

	var F={procname:"numobjects.newPyFloatSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_379024 = new_378806();
		F.line = 561;
		obj_379024.pyType = py_float_object_type_378724;
		F.line = 563;
		give_id_157814(obj_379024);
		result_378803 = obj_379024;
	framePtr = F.prev;

	return result_378803;

}

function new_py_float_default_379421(args_378673) {
	var result_379424 = null;

	var F={procname:"numobjects.newPyFloatDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_379424 = new_py_float_simple_378801();
	framePtr = F.prev;

	return result_379424;

}
var py_float_object_type_378724 = new_py_type_159261(makeNimstrLit("Float"));
py_float_object_type_378724.kind = 5;
py_float_object_type_378724.magicMethods.Field26 = new_py_float_default_379421;

function of_py_int_object_374315(obj_374248) {
	var result_374317 = false;

	var F={procname:"numobjects.ofPyIntObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_374317 = (obj_374248.pyType.kind == 4);
	framePtr = F.prev;

	return result_374317;

}

function do_add_375790(a_375792, b_375793) {
	var result_375794 = null;

	var F={procname:"numobjects.doAdd",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((a_375792.digits != null ? a_375792.digits.length : 0) < (b_375793.digits != null ? b_375793.digits.length : 0))) {
		F.line = 134;
		result_375794 = do_add_375790(b_375793, a_375792);
		break BeforeRet;
		}
		
		F.line = 135;
		var carry_375809 = 0;
		F.line = 136;
		result_375794 = new_py_int_simple_374401();
		L1: do {
			F.line = 137;
			var i_375827 = 0;
			F.line = 3616;
			var colontmp__375919 = 0;
			F.line = 137;
			colontmp__375919 = (a_375792.digits != null ? a_375792.digits.length : 0);
			F.line = 3617;
			var i_375922 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_375922 < colontmp__375919)) break L3;
						F.line = 3619;
						i_375827 = i_375922;
						if ((i_375827 < (b_375793.digits != null ? b_375793.digits.length : 0))) {
						F.line = 140;
						carry_375809 = ((carry_375809 + b_375793.digits[chckIndx(i_375827, 0, b_375793.digits.length+0-1)-0]) >>> 0);
						}
						
						F.line = 141;
						carry_375809 = ((carry_375809 + a_375792.digits[chckIndx(i_375827, 0, a_375792.digits.length+0-1)-0]) >>> 0);
						F.line = 142;
						var Tmp4 = nimCopy(null, chckRange((carry_375809 & 65535), 0, 65535), NTI374054);
						if (result_375794.digits != null) { result_375794.digits.push(Tmp4); } else { result_375794.digits = [Tmp4]; };
						F.line = 143;
						carry_375809 = chckRange(((carry_375809 >>> 0) >>> 16), 0, 65535);
						F.line = 3620;
						i_375922 = addInt(i_375922, 1);
					}
			} while(false);
		} while(false);
		if ((0 < carry_375809)) {
		F.line = 145;
		var Tmp5 = nimCopy(null, chckRange((carry_375809 & 65535), 0, 65535), NTI374054);
		if (result_375794.digits != null) { result_375794.digits.push(Tmp5); } else { result_375794.digits = [Tmp5]; };
		}
		
	} while (false);
	framePtr = F.prev;

	return result_375794;

}

function HEX5BHEX5D_375483(s_375489, i_375491) {
	var result_375493 = [null, 0];
	var result_375493_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_375493 = s_375489; result_375493_Idx = chckIndx(subInt((s_375489 != null ? s_375489.length : 0), i_375491), 0, s_375489.length+0-1)-0;
	framePtr = F.prev;

	return [result_375493, result_375493_Idx];

}

function pop_375524(s_375530, s_375530_Idx) {
	var result_375531 = 0;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_375539 = subInt((s_375530[s_375530_Idx] != null ? s_375530[s_375530_Idx].length : 0), 1);
		F.line = 2525;
		result_375531 = s_375530[s_375530_Idx][chckIndx(l_375539, 0, s_375530[s_375530_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_375530[s_375530_Idx].length < chckRange(l_375539, 0, 2147483647)) { for (var i=s_375530[s_375530_Idx].length;i<chckRange(l_375539, 0, 2147483647);++i) s_375530[s_375530_Idx].push(0); }
               else { s_375530[s_375530_Idx].length = chckRange(l_375539, 0, 2147483647); };
	framePtr = F.prev;

	return result_375531;

}

function normalize_375456(a_375458) {
							var Tmp4;

	var F={procname:"numobjects.normalize",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 96;
			var i_375476 = 0;
			F.line = 3616;
			var colontmp__375566 = 0;
			F.line = 96;
			colontmp__375566 = (a_375458.digits != null ? a_375458.digits.length : 0);
			F.line = 3617;
			var i_375569 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_375569 < colontmp__375566)) break L3;
						F.line = 3619;
						i_375476 = i_375569;
						if (((Tmp4 = HEX5BHEX5D_375483(a_375458.digits, 1), Tmp4[0])[Tmp4[1]] == 0)) {
						F.line = 98;
						pop_375524(a_375458, "digits");
						}
						else {
							F.line = 100;
							break L1;
						}
						
						F.line = 3620;
						i_375569 = addInt(i_375569, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function do_sub_375937(a_375939, b_375940) {
	var result_375941 = null;

	var F={procname:"numobjects.doSub",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((a_375939.digits != null ? a_375939.digits.length : 0) < (b_375940.digits != null ? b_375940.digits.length : 0))) {
		F.line = 150;
		var c_375956 = do_sub_375937(b_375940, a_375939);
		F.line = 151;
		c_375956.sign = -1;
		F.line = 152;
		result_375941 = c_375956;
		break BeforeRet;
		}
		
		F.line = 153;
		var carry_375957 = 0;
		F.line = 154;
		result_375941 = new_py_int_simple_374401();
		L1: do {
			F.line = 155;
			var i_375975 = 0;
			F.line = 3616;
			var colontmp__376100 = 0;
			F.line = 155;
			colontmp__376100 = (a_375939.digits != null ? a_375939.digits.length : 0);
			F.line = 3617;
			var i_376103 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_376103 < colontmp__376100)) break L3;
						F.line = 3619;
						i_375975 = i_376103;
						F.line = 156;
						var aa_375976 = a_375939.digits[chckIndx(i_375975, 0, a_375939.digits.length+0-1)-0];
						F.line = 157;
						var bb_375977 = carry_375957;
						if ((i_375975 < (b_375940.digits != null ? b_375940.digits.length : 0))) {
						F.line = 159;
						bb_375977 = ((bb_375977 + b_375940.digits[chckIndx(i_375975, 0, b_375940.digits.length+0-1)-0]) >>> 0);
						}
						
						if ((bb_375977 <= aa_375976)) {
						F.line = 161;
						var Tmp4 = nimCopy(null, chckRange((((aa_375976 - bb_375977) >>> 0) & 65535), 0, 65535), NTI374054);
						if (result_375941.digits != null) { result_375941.digits.push(Tmp4); } else { result_375941.digits = [Tmp4]; };
						F.line = 162;
						carry_375957 = 0;
						}
						else {
							F.line = 164;
							var Tmp5 = nimCopy(null, chckRange(((65536 - chckRange((((bb_375977 - aa_375976) >>> 0) & 65535), 0, 65535)) >>> 0), 0, 65535), NTI374054);
							if (result_375941.digits != null) { result_375941.digits.push(Tmp5); } else { result_375941.digits = [Tmp5]; };
							F.line = 165;
							carry_375957 = 1;
						}
						
						F.line = 3620;
						i_376103 = addInt(i_376103, 1);
					}
			} while(false);
		} while(false);
		if (!((carry_375957 == 0))) {
		F.line = 167;
		var Tmp6 = nimCopy(null, carry_375957, NTI374054);
		if (result_375941.digits != null) { result_375941.digits.push(Tmp6); } else { result_375941.digits = [Tmp6]; };
		F.line = 168;
		result_375941.sign = -1;
		}
		
		F.line = 169;
		normalize_375456(result_375941);
		if (((result_375941.digits != null ? result_375941.digits.length : 0) == 0)) {
		F.line = 171;
		result_375941.sign = 0;
		}
		else {
			F.line = 173;
			result_375941.sign = 1;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_375941;

}

function HEX2B_377161(a_377163, b_377164) {
	var result_377165 = null;

	var F={procname:"numobjects.+",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 241;
		switch (a_377163.sign) {
		case -1:
			F.line = 243;
			switch (b_377164.sign) {
			case -1:
				F.line = 245;
				var c_377166 = do_add_375790(a_377163, b_377164);
				F.line = 246;
				c_377166.sign = -1;
				F.line = 247;
				result_377165 = c_377166;
				break BeforeRet;
				break;
			case 0:
				F.line = 249;
				result_377165 = a_377163;
				break BeforeRet;
				break;
			case 1:
				F.line = 251;
				result_377165 = do_sub_375937(a_377163, b_377164);
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 253;
			result_377165 = b_377164;
			break BeforeRet;
			break;
		case 1:
			F.line = 255;
			switch (b_377164.sign) {
			case -1:
				F.line = 257;
				result_377165 = do_sub_375937(a_377163, b_377164);
				break BeforeRet;
				break;
			case 0:
				F.line = 259;
				result_377165 = a_377163;
				break BeforeRet;
				break;
			case 1:
				F.line = 261;
				var c_377167 = do_add_375790(a_377163, b_377164);
				F.line = 262;
				c_377167.sign = 1;
				F.line = 263;
				result_377165 = c_377167;
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_377165;

}

function of_py_float_object_378726(obj_378663) {
	var result_378728 = false;

	var F={procname:"numobjects.ofPyFloatObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_378728 = (obj_378663.pyType.kind == 5);
	framePtr = F.prev;

	return result_378728;

}

function ten_to_the_power_of_17904(b_17906) {
	var result_17907 = 0.0;

	var F={procname:"system.tenToThePowerOf",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/jssys.nim",line:0};
	framePtr = F;
		F.line = 656;
		var b_17908 = b_17906;
		F.line = 657;
		var a_17909 = 1.0000000000000000e+01;
		F.line = 658;
		result_17907 = 1.0000000000000000e+00;
		L1: do {
			F.line = 659;
				L2: while (true) {
				if (!true) break L2;
					if (((b_17908 & 1) == 1)) {
					F.line = 661;
					result_17907 = (result_17907 * a_17909);
					}
					
					F.line = 662;
					b_17908 = ((b_17908 >>> 0) >>> 1);
					if ((b_17908 == 0)) {
					F.line = 663;
					break L1;
					}
					
					F.line = 664;
					a_17909 = (a_17909 * a_17909);
				}
		} while(false);
	framePtr = F.prev;

	return result_17907;

}

function npuParseFloat(s_38824, number_38826, number_38826_Idx, start_38827) {
	var result_38829 = 0;

	var F={procname:"parseutils.parseFloat",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 371;
		var bf_38830 = [0.0];
		F.line = 372;
		result_38829 = nimParseBiggestFloat(s_38824, bf_38830, 0, start_38827);
		if (!((result_38829 == 0))) {
		F.line = 374;
		number_38826[number_38826_Idx] = bf_38830[0];
		}
		
	framePtr = F.prev;

	return result_38829;

}

function nsuParseFloat(s_134626) {
			var Tmp1;

	var result_134627 = [0.0];

		var l_134629 = npuParseFloat(s_134626, result_134627, 0, 0);
			if (!((l_134629 == (s_134626 != null ? s_134626.length : 0)))) Tmp1 = true; else {				Tmp1 = (l_134629 == 0);			}		if (Tmp1) {
		var e_134636 = null;
		e_134636 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_134636.message = nimCopy(null, (makeNimstrLit("invalid float: ")).concat(s_134626), NTI138);
		e_134636.parent = null;
		raiseException(e_134636, "ValueError");
		}
		

	return result_134627[0];

}

function to_float_379769(py_int_379771) {
	var result_379772 = 0.0;

	var F={procname:"numobjects.toFloat",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 501;
		result_379772 = nsuParseFloat(HEX24_157579(py_int_379771));
	framePtr = F.prev;

	return result_379772;

}

function new_py_float_379843(py_int_379845) {
	var result_379846 = null;

	var F={procname:"numobjects.newPyFloat",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 523;
		result_379846 = new_py_float_simple_378801();
		F.line = 524;
		result_379846.v = to_float_379769(py_int_379845);
	framePtr = F.prev;

	return result_379846;

}

function add_py_int_object_magic_379890(self_no_cast_379892, other_379893) {
	var result_379894 = null;

	var F={procname:"numobjects.addPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_379892.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_380001 = self_no_cast_379892;
		if (of_py_int_object_374315(other_379893)) {
		F.line = 535;
		result_379894 = HEX2B_377161(self_380001, other_379893);
		}
		else {
		if (of_py_float_object_378726(other_379893)) {
		F.line = 537;
		var new_float_380007 = new_py_float_379843(self_380001);
		F.line = 538;
		F.line = 56;
		if ((new_float_380007.pyType === null)) {
		F.line = 2895;
		var e_380034 = null;
		F.line = 2896;
		e_380034 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_380034.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_380034.parent = null;
		F.line = 26;
		raiseException(e_380034, "InternalError");
		}
		
		F.line = 27;
		var fun_380202 = new_float_380007.pyType.magicMethods.Field0;
		if ((fun_380202 === null)) {
		F.line = 29;
		var obj_type_str_380211 = new_float_380007.pyType.name;
		F.line = 30;
		var method_str_380213 = makeNimstrLit("add");
		F.line = 31;
		var msg_380215 = (makeNimstrLit("No ")).concat(method_str_380213,makeNimstrLit(" method for "),obj_type_str_380211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_380217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_380217.tk = 3;
		F.line = 106;
		excp_380217.thrown = true;
		F.line = 107;
		excp_380217.msg = new_py_string_176075(msg_380215);
		var excp_380220 = excp_380217;
		F.line = 36;
		result_379894 = excp_380220;
		break BeforeRet;
		}
		
		var fun_380402 = fun_380202;
		F.line = 57;
		var res_380404 = fun_380402(new_float_380007, other_379893);
		result_379894 = res_380404;
		}
		else {
			F.line = 540;
			F.line = 540;
			var fmt_res_380603 = mnewString(0);
			F.line = 540;
			if (fmt_res_380603 != null) { fmt_res_380603 = (fmt_res_380603).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_380603 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_380603 != null) { fmt_res_380603 = (fmt_res_380603).concat(other_379893.pyType.name); } else { fmt_res_380603 = other_379893.pyType.name.slice(); };
			var msg_380802 = (makeNimstrLit("+")).concat(fmt_res_380603);
			F.line = 541;
			F.line = 104;
			var excp_380804 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_380804.tk = 3;
			F.line = 106;
			excp_380804.thrown = true;
			F.line = 107;
			excp_380804.msg = new_py_string_176075(msg_380802);
			result_379894 = excp_380804;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_379894;

}

function copy_375438(int_obj_375440) {
	var result_375441 = null;

	var F={procname:"numobjects.copy",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 91;
		F.line = 91;
		var new_int_375442 = new_py_int_simple_374401();
		F.line = 92;
		new_int_375442.digits = nimCopy(null, int_obj_375440.digits, NTI374305);
		result_375441 = new_int_375442;
	framePtr = F.prev;

	return result_375441;

}

function HEX2D_377181(a_377183, b_377184) {
	var result_377185 = null;

	var F={procname:"numobjects.-",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 266;
		switch (a_377183.sign) {
		case -1:
			F.line = 268;
			switch (b_377184.sign) {
			case -1:
				F.line = 270;
				result_377185 = do_sub_375937(b_377184, a_377183);
				break BeforeRet;
				break;
			case 0:
				F.line = 272;
				result_377185 = a_377183;
				break BeforeRet;
				break;
			case 1:
				F.line = 274;
				var c_377186 = do_add_375790(a_377183, b_377184);
				F.line = 275;
				c_377186.sign = -1;
				F.line = 276;
				result_377185 = c_377186;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 278;
			switch (b_377184.sign) {
			case -1:
				F.line = 280;
				var c_377187 = copy_375438(b_377184);
				F.line = 281;
				c_377187.sign = 1;
				F.line = 282;
				result_377185 = c_377187;
				break BeforeRet;
				break;
			case 0:
				F.line = 284;
				result_377185 = a_377183;
				break BeforeRet;
				break;
			case 1:
				F.line = 286;
				var c_377188 = copy_375438(b_377184);
				F.line = 287;
				c_377188.sign = -1;
				F.line = 288;
				result_377185 = c_377188;
				break BeforeRet;
				break;
			}
			break;
		case 1:
			F.line = 290;
			switch (b_377184.sign) {
			case -1:
				F.line = 292;
				var c_377189 = do_add_375790(a_377183, b_377184);
				F.line = 293;
				c_377189.sign = 1;
				F.line = 294;
				result_377185 = c_377189;
				break BeforeRet;
				break;
			case 0:
				F.line = 296;
				result_377185 = a_377183;
				break BeforeRet;
				break;
			case 1:
				F.line = 298;
				result_377185 = do_sub_375937(a_377183, b_377184);
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_377185;

}

function sub_py_int_object_magic_380820(self_no_cast_380822, other_380823) {
	var result_380824 = null;

	var F={procname:"numobjects.subPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_380822.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_381001 = self_no_cast_380822;
		if (of_py_int_object_374315(other_380823)) {
		F.line = 535;
		result_380824 = HEX2D_377181(self_381001, other_380823);
		}
		else {
		if (of_py_float_object_378726(other_380823)) {
		F.line = 537;
		var new_float_381007 = new_py_float_379843(self_381001);
		F.line = 538;
		F.line = 56;
		if ((new_float_381007.pyType === null)) {
		F.line = 2895;
		var e_381034 = null;
		F.line = 2896;
		e_381034 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_381034.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_381034.parent = null;
		F.line = 26;
		raiseException(e_381034, "InternalError");
		}
		
		F.line = 27;
		var fun_381202 = new_float_381007.pyType.magicMethods.Field1;
		if ((fun_381202 === null)) {
		F.line = 29;
		var obj_type_str_381211 = new_float_381007.pyType.name;
		F.line = 30;
		var method_str_381213 = makeNimstrLit("sub");
		F.line = 31;
		var msg_381215 = (makeNimstrLit("No ")).concat(method_str_381213,makeNimstrLit(" method for "),obj_type_str_381211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_381217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_381217.tk = 3;
		F.line = 106;
		excp_381217.thrown = true;
		F.line = 107;
		excp_381217.msg = new_py_string_176075(msg_381215);
		var excp_381220 = excp_381217;
		F.line = 36;
		result_380824 = excp_381220;
		break BeforeRet;
		}
		
		var fun_381402 = fun_381202;
		F.line = 57;
		var res_381404 = fun_381402(new_float_381007, other_380823);
		result_380824 = res_381404;
		}
		else {
			F.line = 540;
			F.line = 540;
			var fmt_res_381603 = mnewString(0);
			F.line = 540;
			if (fmt_res_381603 != null) { fmt_res_381603 = (fmt_res_381603).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_381603 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_381603 != null) { fmt_res_381603 = (fmt_res_381603).concat(other_380823.pyType.name); } else { fmt_res_381603 = other_380823.pyType.name.slice(); };
			var msg_381802 = (makeNimstrLit("-")).concat(fmt_res_381603);
			F.line = 541;
			F.line = 104;
			var excp_381804 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_381804.tk = 3;
			F.line = 106;
			excp_381804.thrown = true;
			F.line = 107;
			excp_381804.msg = new_py_string_176075(msg_381802);
			result_380824 = excp_381804;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_380824;

}

function do_mul_376118(a_376120, b_376121) {
	var result_376122 = null;

	var F={procname:"numobjects.doMul",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 178;
		result_376122 = new_py_int_simple_374401();
		F.line = 179;
		var carry_376123 = 0;
		L1: do {
			F.line = 180;
			var i_376141 = 0;
			F.line = 3616;
			var colontmp__376226 = 0;
			F.line = 180;
			colontmp__376226 = (a_376120.digits != null ? a_376120.digits.length : 0);
			F.line = 3617;
			var i_376229 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_376229 < colontmp__376226)) break L3;
						F.line = 3619;
						i_376141 = i_376229;
						F.line = 181;
						carry_376123 = ((carry_376123 + ((a_376120.digits[chckIndx(i_376141, 0, a_376120.digits.length+0-1)-0] * b_376121) >>> 0)) >>> 0);
						F.line = 182;
						var Tmp4 = nimCopy(null, chckRange((carry_376123 & 65535), 0, 65535), NTI374054);
						if (result_376122.digits != null) { result_376122.digits.push(Tmp4); } else { result_376122.digits = [Tmp4]; };
						F.line = 183;
						carry_376123 = chckRange(((carry_376123 >>> 0) >>> 16), 0, 65535);
						F.line = 3620;
						i_376229 = addInt(i_376229, 1);
					}
			} while(false);
		} while(false);
		if ((0 < carry_376123)) {
		F.line = 185;
		var Tmp5 = nimCopy(null, chckRange((carry_376123 & 65535), 0, 65535), NTI374054);
		if (result_376122.digits != null) { result_376122.digits.push(Tmp5); } else { result_376122.digits = [Tmp5]; };
		}
		
	framePtr = F.prev;

	return result_376122;

}

function new_seq_375275(len_375279) {
	var result_375281 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_375281 = new Array(len_375279); for (var i=0;i<len_375279;++i) {result_375281[i]=0;}	framePtr = F.prev;

	return result_375281;

}

function HEX26_376344(x_376349, y_376352) {
	var result_376354 = null;

	var F={procname:"&.&",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2446;
		result_376354 = new Array(chckRange(addInt((x_376349 != null ? x_376349.length : 0), (y_376352 != null ? y_376352.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_376349 != null ? x_376349.length : 0), (y_376352 != null ? y_376352.length : 0)), 0, 2147483647);++i) {result_376354[i]=0;}		L1: do {
			F.line = 2447;
			var i_376397 = 0;
			F.line = 2104;
			var colontmp__376425 = 0;
			F.line = 2447;
			colontmp__376425 = subInt((x_376349 != null ? x_376349.length : 0), 1);
			F.line = 2107;
			var res_376428 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_376428 <= colontmp__376425)) break L3;
						F.line = 2109;
						i_376397 = res_376428;
						F.line = 2448;
						result_376354[chckIndx(i_376397, 0, result_376354.length+0-1)-0] = x_376349[chckIndx(i_376397, 0, x_376349.length+0-1)-0];
						F.line = 2110;
						res_376428 = addInt(res_376428, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 2449;
			var i_376416 = 0;
			F.line = 2104;
			var colontmp__376433 = 0;
			F.line = 2449;
			colontmp__376433 = subInt((y_376352 != null ? y_376352.length : 0), 1);
			F.line = 2107;
			var res_376436 = 0;
			L5: do {
				F.line = 2108;
					L6: while (true) {
					if (!(res_376436 <= colontmp__376433)) break L6;
						F.line = 2109;
						i_376416 = res_376436;
						F.line = 2450;
						result_376354[chckIndx(addInt(i_376416, (x_376349 != null ? x_376349.length : 0)), 0, result_376354.length+0-1)-0] = y_376352[chckIndx(i_376416, 0, y_376352.length+0-1)-0];
						F.line = 2110;
						res_376436 = addInt(res_376436, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_376354;

}

function HEX5BHEX5D_376489(s_376496, x_376499) {
	var result_376501 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_376601 = x_376499.a;
		F.line = 3707;
		var l_376807 = addInt(subInt(subInt((s_376496 != null ? s_376496.length : 0), x_376499.b), a_376601), 1);
		F.line = 3708;
		result_376501 = new Array(chckRange(l_376807, 0, 2147483647)); for (var i=0;i<chckRange(l_376807, 0, 2147483647);++i) {result_376501[i]=null;}		L1: do {
			F.line = 3709;
			var i_376827 = 0;
			F.line = 3617;
			var i_376835 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_376835 < l_376807)) break L3;
						F.line = 3619;
						i_376827 = i_376835;
						F.line = 3709;
						result_376501[chckIndx(i_376827, 0, result_376501.length+0-1)-0] = s_376496[chckIndx(addInt(i_376827, a_376601), 0, s_376496.length+0-1)-0];
						F.line = 3620;
						i_376835 = addInt(i_376835, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_376501;

}

function do_mul_376244(a_376246, b_376247) {
	var result_376248 = null;

	var F={procname:"numobjects.doMul",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((a_376246.digits != null ? a_376246.digits.length : 0) < (b_376247.digits != null ? b_376247.digits.length : 0))) {
		F.line = 189;
		result_376248 = do_mul_376244(b_376247, a_376246);
		break BeforeRet;
		}
		
		F.line = 190;
		var ints_376264 = null;
		L1: do {
			F.line = 191;
			var i_376311 = 0;
			F.line = 191;
			var db_376312 = 0;
			F.line = 2352;
			var colontmp__377017 = null;
			F.line = 191;
			colontmp__377017 = b_376247.digits;
			F.line = 2354;
			var i_377020 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_377020 < (colontmp__377017 != null ? colontmp__377017.length : 0))) break L3;
						F.line = 2356;
						i_376311 = i_377020;
						F.line = 2356;
						db_376312 = colontmp__377017[chckIndx(i_377020, 0, colontmp__377017.length+0-1)-0];
						F.line = 192;
						var c_376313 = do_mul_376118(a_376246, db_376312);
						F.line = 193;
						var zeros_376342 = new_seq_375275(chckRange(i_376311, 0, 2147483647));
						F.line = 194;
						c_376313.digits = nimCopy(null, HEX26_376344(zeros_376342, c_376313.digits), NTI376353);
						F.line = 195;
						if (ints_376264 != null) { ints_376264.push(c_376313); } else { ints_376264 = [c_376313]; };
						F.line = 2357;
						i_377020 = addInt(i_377020, 1);
					}
			} while(false);
		} while(false);
		F.line = 196;
		result_376248 = ints_376264[chckIndx(0, 0, ints_376264.length+0-1)-0];
		L4: do {
			F.line = 197;
			var int_obj_377015 = null;
			F.line = 3909;
			var colontmp__377023 = null;
			F.line = 197;
			colontmp__377023 = HEX5BHEX5D_376489(ints_376264, HEX2EHEX2E_81053(1, 1));
			F.line = 3911;
			var i_377026 = 0;
			F.line = 3912;
			var l_377028 = (colontmp__377023 != null ? colontmp__377023.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_377026 < l_377028)) break L6;
						F.line = 3914;
						int_obj_377015 = colontmp__377023[chckIndx(i_377026, 0, colontmp__377023.length+0-1)-0];
						F.line = 198;
						result_376248 = do_add_375790(result_376248, int_obj_377015);
						F.line = 3915;
						i_377026 = addInt(i_377026, 1);
						if (!(((colontmp__377023 != null ? colontmp__377023.length : 0) == l_377028))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_376248;

}

function HEX2A_377221(a_377223, b_377224) {
	var result_377225 = null;

	var F={procname:"numobjects.*",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 306;
		switch (a_377223.sign) {
		case -1:
			F.line = 308;
			switch (b_377224.sign) {
			case -1:
				F.line = 310;
				var c_377226 = do_mul_376244(a_377223, b_377224);
				F.line = 311;
				c_377226.sign = 1;
				F.line = 312;
				result_377225 = c_377226;
				break BeforeRet;
				break;
			case 0:
				F.line = 314;
				result_377225 = py_int_zero_375346;
				break BeforeRet;
				break;
			case 1:
				F.line = 316;
				var c_377227 = do_mul_376244(a_377223, b_377224);
				F.line = 317;
				c_377227.sign = -1;
				F.line = 318;
				result_377225 = c_377227;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 320;
			result_377225 = py_int_zero_375346;
			break BeforeRet;
			break;
		case 1:
			F.line = 322;
			switch (b_377224.sign) {
			case -1:
				F.line = 324;
				var c_377228 = do_mul_376244(a_377223, b_377224);
				F.line = 325;
				c_377228.sign = -1;
				F.line = 326;
				result_377225 = c_377228;
				break BeforeRet;
				break;
			case 0:
				F.line = 328;
				result_377225 = py_int_zero_375346;
				break BeforeRet;
				break;
			case 1:
				F.line = 330;
				var c_377229 = do_mul_376244(a_377223, b_377224);
				F.line = 331;
				c_377229.sign = 1;
				F.line = 332;
				result_377225 = c_377229;
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_377225;

}

function mul_py_int_object_magic_381820(self_no_cast_381822, other_381823) {
	var result_381824 = null;

	var F={procname:"numobjects.mulPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_381822.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_382001 = self_no_cast_381822;
		if (of_py_int_object_374315(other_381823)) {
		F.line = 535;
		result_381824 = HEX2A_377221(self_382001, other_381823);
		}
		else {
		if (of_py_float_object_378726(other_381823)) {
		F.line = 537;
		var new_float_382007 = new_py_float_379843(self_382001);
		F.line = 538;
		F.line = 56;
		if ((new_float_382007.pyType === null)) {
		F.line = 2895;
		var e_382034 = null;
		F.line = 2896;
		e_382034 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_382034.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_382034.parent = null;
		F.line = 26;
		raiseException(e_382034, "InternalError");
		}
		
		F.line = 27;
		var fun_382202 = new_float_382007.pyType.magicMethods.Field2;
		if ((fun_382202 === null)) {
		F.line = 29;
		var obj_type_str_382211 = new_float_382007.pyType.name;
		F.line = 30;
		var method_str_382213 = makeNimstrLit("mul");
		F.line = 31;
		var msg_382215 = (makeNimstrLit("No ")).concat(method_str_382213,makeNimstrLit(" method for "),obj_type_str_382211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_382217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_382217.tk = 3;
		F.line = 106;
		excp_382217.thrown = true;
		F.line = 107;
		excp_382217.msg = new_py_string_176075(msg_382215);
		var excp_382220 = excp_382217;
		F.line = 36;
		result_381824 = excp_382220;
		break BeforeRet;
		}
		
		var fun_382402 = fun_382202;
		F.line = 57;
		var res_382404 = fun_382402(new_float_382007, other_381823);
		result_381824 = res_382404;
		}
		else {
			F.line = 540;
			F.line = 540;
			var fmt_res_382603 = mnewString(0);
			F.line = 540;
			if (fmt_res_382603 != null) { fmt_res_382603 = (fmt_res_382603).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_382603 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_382603 != null) { fmt_res_382603 = (fmt_res_382603).concat(other_381823.pyType.name); } else { fmt_res_382603 = other_381823.pyType.name.slice(); };
			var msg_382802 = (makeNimstrLit("*")).concat(fmt_res_382603);
			F.line = 541;
			F.line = 104;
			var excp_382804 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_382804.tk = 3;
			F.line = 106;
			excp_382804.thrown = true;
			F.line = 107;
			excp_382804.msg = new_py_string_176075(msg_382802);
			result_381824 = excp_382804;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_381824;

}

function truediv_py_int_object_magic_382820(self_no_cast_382822, other_382823) {
	var result_382824 = null;

	var F={procname:"numobjects.truedivPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_382822.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_383001 = self_no_cast_382822;
		F.line = 557;
		var casted_383002 = new_py_float_379843(self_383001);
		F.line = 56;
		if ((casted_383002.pyType === null)) {
		F.line = 2895;
		var e_383029 = null;
		F.line = 2896;
		e_383029 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_383029.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_383029.parent = null;
		F.line = 26;
		raiseException(e_383029, "InternalError");
		}
		
		F.line = 27;
		var fun_383202 = casted_383002.pyType.magicMethods.Field3;
		if ((fun_383202 === null)) {
		F.line = 29;
		var obj_type_str_383211 = casted_383002.pyType.name;
		F.line = 30;
		var method_str_383213 = makeNimstrLit("trueDiv");
		F.line = 31;
		var msg_383215 = (makeNimstrLit("No ")).concat(method_str_383213,makeNimstrLit(" method for "),obj_type_str_383211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_383217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_383217.tk = 3;
		F.line = 106;
		excp_383217.thrown = true;
		F.line = 107;
		excp_383217.msg = new_py_string_176075(msg_383215);
		var excp_383220 = excp_383217;
		F.line = 36;
		result_382824 = excp_383220;
		break BeforeRet;
		}
		
		var fun_383402 = fun_383202;
		F.line = 57;
		var res_383404 = fun_383402(casted_383002, other_382823);
		result_382824 = res_383404;
	} while (false);
	framePtr = F.prev;

	return result_382824;

}

function zero_375388(int_obj_375390) {
	var result_375391 = false;

	var F={procname:"numobjects.zero",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 85;
		result_375391 = (int_obj_375390.sign == 0);
	framePtr = F.prev;

	return result_375391;

}

function set_xlen_375260(int_obj_375262, l_375263) {
	var F={procname:"numobjects.setXLen",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		if (((int_obj_375262.digits != null ? int_obj_375262.digits.length : 0) == 0)) {
		F.line = 72;
		int_obj_375262.digits = nimCopy(null, new_seq_375275(chckRange(l_375263, 0, 2147483647)), NTI375280);
		}
		else {
			F.line = 74;
		if (int_obj_375262.digits.length < chckRange(l_375263, 0, 2147483647)) { for (var i=int_obj_375262.digits.length;i<chckRange(l_375263, 0, 2147483647);++i) int_obj_375262.digits.push(0); }
               else { int_obj_375262.digits.length = chckRange(l_375263, 0, 2147483647); };
		}
		
	framePtr = F.prev;

	
}

function do_div_377243(n_377245, d_377246) {
				var Tmp5;

	var result_377248 = {Field0: null, Field1: null};

	var F={procname:"numobjects.doDiv",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 337;
		var nn_377256 = (n_377245.digits != null ? n_377245.digits.length : 0);
		F.line = 338;
		var dn_377264 = (d_377246.digits != null ? d_377246.digits.length : 0);
		if (!(!((nn_377256 == 0)))) {
		F.line = 339;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(339, 10) `\x0Anot (nn == 0)` "));
		}
		
		if ((nn_377256 < dn_377264)) {
		F.line = 342;
		nimCopy(result_377248, {Field0: py_int_zero_375346, Field1: n_377245}, NTI377247);
		break BeforeRet;
		}
		else {
		if ((dn_377264 == 1)) {
		F.line = 344;
		var dd_377402 = d_377246.digits[chckIndx(0, 0, d_377246.digits.length+0-1)-0];
		F.line = 345;
		var q_377403 = new_py_int_simple_374401();
		F.line = 346;
		var rr_377404 = 0;
		F.line = 347;
		set_xlen_375260(q_377403, (n_377245.digits != null ? n_377245.digits.length : 0));
		L1: do {
			F.line = 349;
			var i_377430 = 0;
			F.line = 2065;
			var colontmp__377621 = 0;
			F.line = 349;
			colontmp__377621 = (n_377245.digits != null ? (n_377245.digits.length-1) : -1);
			F.line = 2077;
			var res_377624 = colontmp__377621;
			L2: do {
				F.line = 2078;
					L3: while (true) {
					if (!(0 <= res_377624)) break L3;
						F.line = 2079;
						i_377430 = res_377624;
						F.line = 350;
						var tmp_377449 = ((n_377245.digits[chckIndx(i_377430, 0, n_377245.digits.length+0-1)-0] + (rr_377404 << 16)) >>> 0);
						F.line = 351;
						q_377403.digits[chckIndx(i_377430, 0, q_377403.digits.length+0-1)-0] = chckRange((((tmp_377449 / dd_377402) >>> 0) & 65535), 0, 65535);
						F.line = 352;
						rr_377404 = chckRange(((tmp_377449 % dd_377402) & 65535), 0, 65535);
						F.line = 2080;
						res_377624 = subInt(res_377624, 1);
					}
			} while(false);
		} while(false);
		F.line = 354;
		normalize_375456(q_377403);
		F.line = 355;
		var r_377492 = new_py_int_simple_374401();
		F.line = 356;
		var Tmp4 = nimCopy(null, rr_377404, NTI374054);
		if (r_377492.digits != null) { r_377492.digits.push(Tmp4); } else { r_377492.digits = [Tmp4]; };
		F.line = 357;
		nimCopy(result_377248, {Field0: q_377403, Field1: r_377492}, NTI377247);
		break BeforeRet;
		}
		else {
				if (!(dn_377264 <= nn_377256)) Tmp5 = false; else {					Tmp5 = (2 <= dn_377264);				}			if (!(Tmp5)) {
			F.line = 359;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(359, 12) `\x0A  dn <= nn and\x0A  2 <= dn` "));
			}
			
			F.line = 2895;
			var e_377607 = null;
			F.line = 2896;
			e_377607 = {m_type: NTI156087, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 360;
			e_377607.message = nimCopy(null, [], NTI138);
			F.line = 2891;
			e_377607.parent = null;
			F.line = 360;
			raiseException(e_377607, "IntError");
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_377248;

}

function div_377641(a_377643, b_377644) {
	var result_377645 = null;

	var F={procname:"numobjects.div",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 364;
		switch (a_377643.sign) {
		case -1:
			F.line = 366;
			switch (b_377644.sign) {
			case -1:
				F.line = 368;
				var colontmp__390233 = {Field0: null, Field1: null};
				F.line = 368;
				var q_377646 = null;
				F.line = 368;
				var r_377647 = null;
				F.line = 368;
				nimCopy(colontmp__390233, do_div_377243(a_377643, b_377644), NTI377247);
				F.line = 368;
				q_377646 = colontmp__390233["Field0"];
				F.line = 368;
				r_377647 = colontmp__390233["Field1"];
				if (((q_377646.digits != null ? q_377646.digits.length : 0) == 0)) {
				F.line = 370;
				q_377646.sign = 0;
				}
				else {
					F.line = 372;
					q_377646.sign = 1;
				}
				
				F.line = 373;
				result_377645 = q_377646;
				break BeforeRet;
				break;
			case 0:
				if (true) {
				F.line = 375;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(375, 14) `false` "));
				}
				
				break;
			case 1:
				F.line = 377;
				var colontmp__390234 = {Field0: null, Field1: null};
				F.line = 377;
				var q_377801 = null;
				F.line = 377;
				var r_377802 = null;
				F.line = 377;
				nimCopy(colontmp__390234, do_div_377243(a_377643, b_377644), NTI377247);
				F.line = 377;
				q_377801 = colontmp__390234["Field0"];
				F.line = 377;
				r_377802 = colontmp__390234["Field1"];
				if (((q_377801.digits != null ? q_377801.digits.length : 0) == 0)) {
				F.line = 379;
				q_377801.sign = 0;
				}
				else {
					F.line = 381;
					q_377801.sign = -1;
				}
				
				F.line = 382;
				result_377645 = q_377801;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 384;
			result_377645 = py_int_zero_375346;
			break BeforeRet;
			break;
		case 1:
			F.line = 386;
			switch (b_377644.sign) {
			case -1:
				F.line = 388;
				var colontmp__390235 = {Field0: null, Field1: null};
				F.line = 388;
				var q_377810 = null;
				F.line = 388;
				var r_377811 = null;
				F.line = 388;
				nimCopy(colontmp__390235, do_div_377243(a_377643, b_377644), NTI377247);
				F.line = 388;
				q_377810 = colontmp__390235["Field0"];
				F.line = 388;
				r_377811 = colontmp__390235["Field1"];
				if (((q_377810.digits != null ? q_377810.digits.length : 0) == 0)) {
				F.line = 390;
				q_377810.sign = 0;
				}
				else {
					F.line = 392;
					q_377810.sign = -1;
				}
				
				F.line = 393;
				result_377645 = q_377810;
				break BeforeRet;
				break;
			case 0:
				if (true) {
				F.line = 395;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(395, 14) `false` "));
				}
				
				break;
			case 1:
				F.line = 397;
				var colontmp__390236 = {Field0: null, Field1: null};
				F.line = 397;
				var q_378001 = null;
				F.line = 397;
				var r_378002 = null;
				F.line = 397;
				nimCopy(colontmp__390236, do_div_377243(a_377643, b_377644), NTI377247);
				F.line = 397;
				q_378001 = colontmp__390236["Field0"];
				F.line = 397;
				r_378002 = colontmp__390236["Field1"];
				if (((q_378001.digits != null ? q_378001.digits.length : 0) == 0)) {
				F.line = 399;
				q_378001.sign = 0;
				}
				else {
					F.line = 401;
					q_378001.sign = 1;
				}
				
				F.line = 402;
				result_377645 = q_378001;
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_377645;

}

function is_nim_exception_15277() {
		return lastJSError.m_type;

	
}

function floordiv_py_int_object_magic_383615(self_no_cast_383617, other_383618) {
	var result_383619 = null;

	var F={procname:"numobjects.floordivPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_383617.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_383801 = self_no_cast_383617;
		if (of_py_int_object_374315(other_383618)) {
		F.line = 563;
		var int_other_383802 = other_383618;
		if (zero_375388(int_other_383802)) {
		F.line = 565;
		F.line = 97;
		var excp_383804 = new_py_zero_division_error_simple_370601();
		F.line = 98;
		excp_383804.tk = 13;
		F.line = 99;
		excp_383804.thrown = true;
		result_383619 = excp_383804;
		break BeforeRet;
		}
		
		F.line = 566;
++excHandler;
		try {
		F.line = 567;
		result_383619 = div_377641(self_383801, other_383618);
		break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156087))) {
		F.line = 569;
		F.line = 104;
		var excp_383807 = new_py_value_error_simple_362601();
		F.line = 105;
		excp_383807.tk = 5;
		F.line = 106;
		excp_383807.thrown = true;
		F.line = 107;
		excp_383807.msg = new_py_string_176075(makeNimstrLit("big int operation not implemented"));
		result_383619 = excp_383807;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		}
		else {
		if (of_py_float_object_378726(other_383618)) {
		F.line = 571;
		var new_float_383809 = new_py_float_379843(self_383801);
		F.line = 572;
		F.line = 56;
		if ((new_float_383809.pyType === null)) {
		F.line = 2895;
		var e_383836 = null;
		F.line = 2896;
		e_383836 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_383836.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_383836.parent = null;
		F.line = 26;
		raiseException(e_383836, "InternalError");
		}
		
		F.line = 27;
		var fun_384002 = new_float_383809.pyType.magicMethods.Field4;
		if ((fun_384002 === null)) {
		F.line = 29;
		var obj_type_str_384011 = new_float_383809.pyType.name;
		F.line = 30;
		var method_str_384013 = makeNimstrLit("floorDiv");
		F.line = 31;
		var msg_384015 = (makeNimstrLit("No ")).concat(method_str_384013,makeNimstrLit(" method for "),obj_type_str_384011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_384017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_384017.tk = 3;
		F.line = 106;
		excp_384017.thrown = true;
		F.line = 107;
		excp_384017.msg = new_py_string_176075(msg_384015);
		var excp_384020 = excp_384017;
		F.line = 36;
		result_383619 = excp_384020;
		break BeforeRet;
		}
		
		var fun_384202 = fun_384002;
		F.line = 57;
		var res_384204 = fun_384202(new_float_383809, other_383618);
		result_383619 = res_384204;
		break BeforeRet;
		}
		else {
			F.line = 574;
			F.line = 104;
			var excp_384602 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_384602.tk = 3;
			F.line = 106;
			excp_384602.thrown = true;
			F.line = 107;
			F.line = 574;
			var fmt_res_384404 = mnewString(0);
			F.line = 574;
			if (fmt_res_384404 != null) { fmt_res_384404 = (fmt_res_384404).concat(makeNimstrLit("floor divide not supported by int and ")); } else { fmt_res_384404 = makeNimstrLit("floor divide not supported by int and "); };
			F.line = 260;
			if (fmt_res_384404 != null) { fmt_res_384404 = (fmt_res_384404).concat(other_383618.pyType.name); } else { fmt_res_384404 = other_383618.pyType.name.slice(); };
			excp_384602.msg = new_py_string_176075(fmt_res_384404);
			result_383619 = excp_384602;
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_383619;

}

function negative_375363(int_obj_375365) {
	var result_375366 = false;

	var F={procname:"numobjects.negative",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 82;
		result_375366 = (int_obj_375365.sign == -1);
	framePtr = F.prev;

	return result_375366;

}

function pow_378023(a_378025, b_378026) {
	var result_378027 = null;

	var F={procname:"numobjects.pow",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(!(negative_375363(b_378026)))) {
		F.line = 406;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/numobjects.nim(406, 9) `not negative(b)` "));
		}
		
		if (zero_375388(b_378026)) {
		F.line = 408;
		result_378027 = py_int_one_375347;
		break BeforeRet;
		}
		
		F.line = 409;
		var new_b_378201 = div_377641(b_378026, py_int_two_375348);
		F.line = 410;
		var half_c_378202 = pow_378023(a_378025, new_b_378201);
		if (((b_378026.digits[chckIndx(0, 0, b_378026.digits.length+0-1)-0] % 2) == 1)) {
		F.line = 412;
		result_378027 = HEX2A_377221(HEX2A_377221(half_c_378202, half_c_378202), a_378025);
		break BeforeRet;
		}
		else {
			F.line = 414;
			result_378027 = HEX2A_377221(half_c_378202, half_c_378202);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_378027;

}

function pow_py_int_object_magic_384618(self_no_cast_384620, other_384621) {
	var result_384622 = null;

	var F={procname:"numobjects.powPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_384620.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_384801 = self_no_cast_384620;
		if (of_py_int_object_374315(other_384621)) {
		F.line = 535;
		result_384622 = pow_378023(self_384801, other_384621);
		}
		else {
		if (of_py_float_object_378726(other_384621)) {
		F.line = 537;
		var new_float_384807 = new_py_float_379843(self_384801);
		F.line = 538;
		F.line = 56;
		if ((new_float_384807.pyType === null)) {
		F.line = 2895;
		var e_384834 = null;
		F.line = 2896;
		e_384834 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_384834.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_384834.parent = null;
		F.line = 26;
		raiseException(e_384834, "InternalError");
		}
		
		F.line = 27;
		var fun_385002 = new_float_384807.pyType.magicMethods.Field6;
		if ((fun_385002 === null)) {
		F.line = 29;
		var obj_type_str_385011 = new_float_384807.pyType.name;
		F.line = 30;
		var method_str_385013 = makeNimstrLit("pow");
		F.line = 31;
		var msg_385015 = (makeNimstrLit("No ")).concat(method_str_385013,makeNimstrLit(" method for "),obj_type_str_385011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_385017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_385017.tk = 3;
		F.line = 106;
		excp_385017.thrown = true;
		F.line = 107;
		excp_385017.msg = new_py_string_176075(msg_385015);
		var excp_385020 = excp_385017;
		F.line = 36;
		result_384622 = excp_385020;
		break BeforeRet;
		}
		
		var fun_385202 = fun_385002;
		F.line = 57;
		var res_385204 = fun_385202(new_float_384807, other_384621);
		result_384622 = res_385204;
		}
		else {
			F.line = 540;
			F.line = 540;
			var fmt_res_385403 = mnewString(0);
			F.line = 540;
			if (fmt_res_385403 != null) { fmt_res_385403 = (fmt_res_385403).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_385403 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_385403 != null) { fmt_res_385403 = (fmt_res_385403).concat(other_384621.pyType.name); } else { fmt_res_385403 = other_384621.pyType.name.slice(); };
			var msg_385602 = (makeNimstrLit("**")).concat(fmt_res_385403);
			F.line = 541;
			F.line = 104;
			var excp_385604 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_385604.tk = 3;
			F.line = 106;
			excp_385604.thrown = true;
			F.line = 107;
			excp_385604.msg = new_py_string_176075(msg_385602);
			result_384622 = excp_385604;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_384622;

}

function positive_py_int_object_magic_385620(self_no_cast_385622) {
	var result_385623 = null;

	var F={procname:"numobjects.positivePyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_385622.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_385801 = self_no_cast_385622;
		result_385623 = self_385801;
	framePtr = F.prev;

	return result_385623;

}

function HEX2D_377203(a_377205) {
	var result_377206 = null;

	var F={procname:"numobjects.-",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 301;
		result_377206 = copy_375438(a_377205);
		F.line = 302;
		result_377206.sign = chckRange(negInt(((a_377205.sign)|0)), -1, 1);
	framePtr = F.prev;

	return result_377206;

}

function negative_py_int_object_magic_385816(self_no_cast_385818) {
	var result_385819 = null;

	var F={procname:"numobjects.negativePyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_385818.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_386001 = self_no_cast_385818;
		result_385819 = HEX2D_377203(self_386001);
	framePtr = F.prev;

	return result_385819;

}

function bool_py_int_object_magic_386016(self_no_cast_386018) {
		var Tmp1;

	var result_386019 = null;

	var F={procname:"numobjects.boolPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_386018.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_386201 = self_no_cast_386018;
		if (zero_375388(self_386201)) {
		Tmp1 = py_false_obj_354075;
		}
		else {
		Tmp1 = py_true_obj_354074;
		}
		
		result_386019 = Tmp1;
	framePtr = F.prev;

	return result_386019;

}

function do_compare_375584(a_375586, b_375587) {
	var result_375588 = 0;

	var F={procname:"numobjects.doCompare",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((a_375586.digits != null ? a_375586.digits.length : 0) < (b_375587.digits != null ? b_375587.digits.length : 0))) {
		F.line = 105;
		result_375588 = -1;
		break BeforeRet;
		}
		
		if (((b_375587.digits != null ? b_375587.digits.length : 0) < (a_375586.digits != null ? a_375586.digits.length : 0))) {
		F.line = 107;
		result_375588 = 1;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 108;
			var i_375634 = 0;
			F.line = 2065;
			var colontmp__375655 = 0;
			F.line = 108;
			colontmp__375655 = subInt((a_375586.digits != null ? a_375586.digits.length : 0), 1);
			F.line = 2077;
			var res_375658 = colontmp__375655;
			L2: do {
				F.line = 2078;
					L3: while (true) {
					if (!(0 <= res_375658)) break L3;
						F.line = 2079;
						i_375634 = res_375658;
						L4: do {
							F.line = 109;
							var ad_375635 = a_375586.digits[chckIndx(i_375634, 0, a_375586.digits.length+0-1)-0];
							F.line = 110;
							var bd_375636 = b_375587.digits[chckIndx(i_375634, 0, b_375587.digits.length+0-1)-0];
							if ((ad_375635 < bd_375636)) {
							F.line = 112;
							result_375588 = -1;
							break BeforeRet;
							}
							else {
							if ((ad_375635 == bd_375636)) {
							F.line = 114;
							break L4;
							}
							else {
								F.line = 116;
								result_375588 = 1;
								break BeforeRet;
							}
							}
						} while(false);
						F.line = 2080;
						res_375658 = subInt(res_375658, 1);
					}
			} while(false);
		} while(false);
		F.line = 117;
		result_375588 = 0;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_375588;

}

function HEX3C_377042(a_377044, b_377045) {
	var result_377046 = false;

	var F={procname:"numobjects.<",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 201;
		switch (a_377044.sign) {
		case -1:
			F.line = 203;
			switch (b_377045.sign) {
			case -1:
				F.line = 205;
				result_377046 = (do_compare_375584(a_377044, b_377045) == 1);
				break BeforeRet;
				break;
			case 0:
			case 1:
				F.line = 207;
				result_377046 = true;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 209;
			result_377046 = (b_377045.sign == 1);
			break BeforeRet;
			break;
		case 1:
			F.line = 211;
			switch (b_377045.sign) {
			case -1:
			case 0:
				F.line = 213;
				result_377046 = false;
				break BeforeRet;
				break;
			case 1:
				F.line = 215;
				result_377046 = (do_compare_375584(a_377044, b_377045) == -1);
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_377046;

}

function lt_py_int_object_magic_386216(self_no_cast_386218, other_386219) {
	var result_386220 = null;

	var F={procname:"numobjects.ltPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_386218.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_386401 = self_no_cast_386218;
		if (of_py_int_object_374315(other_386219)) {
		if (HEX3C_377042(self_386401, other_386219)) {
		F.line = 596;
		result_386220 = py_true_obj_354074;
		}
		else {
			F.line = 598;
			result_386220 = py_false_obj_354075;
		}
		
		}
		else {
		if (of_py_float_object_378726(other_386219)) {
		F.line = 600;
		F.line = 56;
		if ((other_386219.pyType === null)) {
		F.line = 2895;
		var e_386428 = null;
		F.line = 2896;
		e_386428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_386428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_386428.parent = null;
		F.line = 26;
		raiseException(e_386428, "InternalError");
		}
		
		F.line = 27;
		var fun_386602 = other_386219.pyType.magicMethods.Field21;
		if ((fun_386602 === null)) {
		F.line = 29;
		var obj_type_str_386611 = other_386219.pyType.name;
		F.line = 30;
		var method_str_386613 = makeNimstrLit("ge");
		F.line = 31;
		var msg_386615 = (makeNimstrLit("No ")).concat(method_str_386613,makeNimstrLit(" method for "),obj_type_str_386611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_386617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_386617.tk = 3;
		F.line = 106;
		excp_386617.thrown = true;
		F.line = 107;
		excp_386617.msg = new_py_string_176075(msg_386615);
		var excp_386620 = excp_386617;
		F.line = 36;
		result_386220 = excp_386620;
		break BeforeRet;
		}
		
		var fun_386802 = fun_386602;
		F.line = 57;
		var res_386804 = fun_386802(other_386219, self_386401);
		result_386220 = res_386804;
		}
		else {
			F.line = 602;
			F.line = 602;
			var fmt_res_387003 = mnewString(0);
			F.line = 602;
			if (fmt_res_387003 != null) { fmt_res_387003 = (fmt_res_387003).concat(makeNimstrLit("< not supported by int and ")); } else { fmt_res_387003 = makeNimstrLit("< not supported by int and "); };
			F.line = 260;
			if (fmt_res_387003 != null) { fmt_res_387003 = (fmt_res_387003).concat(other_386219.pyType.name); } else { fmt_res_387003 = other_386219.pyType.name.slice(); };
			var msg_387201 = nimCopy(null, fmt_res_387003, NTI138);
			F.line = 603;
			F.line = 104;
			var excp_387203 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_387203.tk = 3;
			F.line = 106;
			excp_387203.thrown = true;
			F.line = 107;
			excp_387203.msg = new_py_string_176075(msg_387201);
			result_386220 = excp_387203;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_386220;

}

function HEX3DHEX3D_377127(a_377129, b_377130) {
	var result_377131 = false;

	var F={procname:"numobjects.==",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((a_377129.sign == b_377130.sign))) {
		F.line = 237;
		result_377131 = false;
		break BeforeRet;
		}
		
		F.line = 238;
		result_377131 = (do_compare_375584(a_377129, b_377130) == 0);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_377131;

}

function of_py_bool_object_353106(obj_353043) {
	var result_353108 = false;

	var F={procname:"boolobject.ofPyBoolObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_353108 = (obj_353043.pyType.kind == 6);
	framePtr = F.prev;

	return result_353108;

}

function eq_py_int_object_magic_387219(self_no_cast_387221, other_387222) {
	var result_387223 = null;

	var F={procname:"numobjects.eqPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_387221.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_387401 = self_no_cast_387221;
		if (of_py_int_object_374315(other_387222)) {
		if (HEX3DHEX3D_377127(self_387401, other_387222)) {
		F.line = 609;
		result_387223 = py_true_obj_354074;
		}
		else {
			F.line = 611;
			result_387223 = py_false_obj_354075;
		}
		
		}
		else {
		if (of_py_float_object_378726(other_387222)) {
		F.line = 613;
		F.line = 56;
		if ((other_387222.pyType === null)) {
		F.line = 2895;
		var e_387428 = null;
		F.line = 2896;
		e_387428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_387428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_387428.parent = null;
		F.line = 26;
		raiseException(e_387428, "InternalError");
		}
		
		F.line = 27;
		var fun_387602 = other_387222.pyType.magicMethods.Field18;
		if ((fun_387602 === null)) {
		F.line = 29;
		var obj_type_str_387611 = other_387222.pyType.name;
		F.line = 30;
		var method_str_387613 = makeNimstrLit("eq");
		F.line = 31;
		var msg_387615 = (makeNimstrLit("No ")).concat(method_str_387613,makeNimstrLit(" method for "),obj_type_str_387611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_387617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_387617.tk = 3;
		F.line = 106;
		excp_387617.thrown = true;
		F.line = 107;
		excp_387617.msg = new_py_string_176075(msg_387615);
		var excp_387620 = excp_387617;
		F.line = 36;
		result_387223 = excp_387620;
		break BeforeRet;
		}
		
		var fun_387802 = fun_387602;
		F.line = 57;
		var res_387804 = fun_387802(other_387222, self_387401);
		result_387223 = res_387804;
		}
		else {
		if (of_py_bool_object_353106(other_387222)) {
		if (HEX3DHEX3D_377127(self_387401, py_int_one_375347)) {
		F.line = 616;
		result_387223 = other_387222;
		}
		else {
			F.line = 618;
			F.line = 45;
			if ((other_387222.pyType === null)) {
			F.line = 2895;
			var e_388027 = null;
			F.line = 2896;
			e_388027 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_388027.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_388027.parent = null;
			F.line = 26;
			raiseException(e_388027, "InternalError");
			}
			
			F.line = 27;
			var fun_388202 = other_387222.pyType.magicMethods.Field7;
			if ((fun_388202 === null)) {
			F.line = 29;
			var obj_type_str_388211 = other_387222.pyType.name;
			F.line = 30;
			var method_str_388213 = makeNimstrLit("Not");
			F.line = 31;
			var msg_388215 = (makeNimstrLit("No ")).concat(method_str_388213,makeNimstrLit(" method for "),obj_type_str_388211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_388217 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_388217.tk = 3;
			F.line = 106;
			excp_388217.thrown = true;
			F.line = 107;
			excp_388217.msg = new_py_string_176075(msg_388215);
			var excp_388220 = excp_388217;
			F.line = 36;
			result_387223 = excp_388220;
			break BeforeRet;
			}
			
			var fun_388402 = fun_388202;
			F.line = 46;
			var res_388404 = fun_388402(other_387222);
			result_387223 = res_388404;
		}
		
		}
		else {
			F.line = 620;
			F.line = 620;
			var fmt_res_388603 = mnewString(0);
			F.line = 620;
			if (fmt_res_388603 != null) { fmt_res_388603 = (fmt_res_388603).concat(makeNimstrLit("== not supported by int and ")); } else { fmt_res_388603 = makeNimstrLit("== not supported by int and "); };
			F.line = 260;
			if (fmt_res_388603 != null) { fmt_res_388603 = (fmt_res_388603).concat(other_387222.pyType.name); } else { fmt_res_388603 = other_387222.pyType.name.slice(); };
			var msg_388801 = nimCopy(null, fmt_res_388603, NTI138);
			F.line = 621;
			F.line = 104;
			var excp_388803 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_388803.tk = 3;
			F.line = 106;
			excp_388803.thrown = true;
			F.line = 107;
			excp_388803.msg = new_py_string_176075(msg_388801);
			result_387223 = excp_388803;
		}
		}}
	} while (false);
	framePtr = F.prev;

	return result_387223;

}

function str_py_int_object_magic_388819(self_no_cast_388821) {
	var result_388822 = null;

	var F={procname:"numobjects.strPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_388821.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_389001 = self_no_cast_388821;
		result_388822 = new_py_string_176075(HEX24_157579(self_389001));
	framePtr = F.prev;

	return result_388822;

}

function repr_py_int_object_magic_389016(self_no_cast_389018) {
	var result_389019 = null;

	var F={procname:"numobjects.reprPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_389018.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_389201 = self_no_cast_389018;
		result_389019 = new_py_string_176075(HEX24_157579(self_389201));
	framePtr = F.prev;

	return result_389019;

}

function hash_py_int_object_magic_389216(self_no_cast_389218) {
	var result_389219 = null;

	var F={procname:"numobjects.hashPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_389218.m_type, NTI374303))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_389401 = self_no_cast_389218;
		result_389219 = self_389401;
	framePtr = F.prev;

	return result_389219;

}

function inplace_add_375675(a_375677, b_375678) {
	var F={procname:"numobjects.inplaceAdd",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 121;
		var carry_375679 = b_375678;
		L1: do {
			F.line = 122;
			var i_375697 = 0;
			F.line = 3616;
			var colontmp__375772 = 0;
			F.line = 122;
			colontmp__375772 = (a_375677.digits != null ? a_375677.digits.length : 0);
			F.line = 3617;
			var i_375775 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_375775 < colontmp__375772)) break L3;
						F.line = 3619;
						i_375697 = i_375775;
						if ((carry_375679 == 0)) {
						F.line = 124;
						break BeforeRet;
						}
						
						F.line = 125;
						carry_375679 = ((carry_375679 + a_375677.digits[chckIndx(i_375697, 0, a_375677.digits.length+0-1)-0]) >>> 0);
						F.line = 126;
						a_375677.digits[chckIndx(i_375697, 0, a_375677.digits.length+0-1)-0] = chckRange((carry_375679 & 65535), 0, 65535);
						F.line = 127;
						carry_375679 = chckRange(((carry_375679 >>> 0) >>> 16), 0, 65535);
						F.line = 3620;
						i_375775 = addInt(i_375775, 1);
					}
			} while(false);
		} while(false);
		if ((0 < carry_375679)) {
		F.line = 129;
		var Tmp4 = nimCopy(null, chckRange((carry_375679 & 65535), 0, 65535), NTI374054);
		if (a_375677.digits != null) { a_375677.digits.push(Tmp4); } else { a_375677.digits = [Tmp4]; };
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function from_str_378232(s_378234) {
	var result_378235 = null;

	var F={procname:"numobjects.fromStr",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 444;
		result_378235 = new_py_int_simple_374401();
		F.line = 445;
		var start_378237 = 0;
		F.line = 446;
		var sign_378238 = 0;
		if ((s_378234[chckIndx(0, 0, s_378234.length+0-1)-0] == 45)) {
		F.line = 449;
		start_378237 = 1;
		}
		
		F.line = 450;
		if (result_378235.digits != null) { result_378235.digits.push(0); } else { result_378235.digits = [0]; };
		L1: do {
			F.line = 451;
			var i_378257 = 0;
			F.line = 3616;
			var colontmp__378279 = 0;
			F.line = 451;
			colontmp__378279 = (s_378234 != null ? s_378234.length : 0);
			F.line = 3617;
			var i_378282 = start_378237;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_378282 < colontmp__378279)) break L3;
						F.line = 3619;
						i_378257 = i_378282;
						F.line = 452;
						result_378235 = do_mul_376118(result_378235, 10);
						F.line = 453;
						var c_378258 = s_378234[chckIndx(i_378257, 0, s_378234.length+0-1)-0];
						F.line = 454;
						inplace_add_375675(result_378235, chckRange(subInt(c_378258, 48), 0, 65535));
						F.line = 3620;
						i_378282 = addInt(i_378282, 1);
					}
			} while(false);
		} while(false);
		F.line = 455;
		normalize_375456(result_378235);
		if ((s_378234[chckIndx(0, 0, s_378234.length+0-1)-0] == 45)) {
		F.line = 457;
		result_378235.sign = -1;
		}
		else {
			if (((result_378235.digits != null ? result_378235.digits.length : 0) == 0)) {
			F.line = 460;
			result_378235.sign = 0;
			}
			else {
				F.line = 462;
				result_378235.sign = 1;
			}
			
		}
		
	framePtr = F.prev;

	return result_378235;

}

function new_py_int_379786(str_379788) {
	var result_379789 = null;

	var F={procname:"numobjects.newPyInt",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 505;
		result_379789 = from_str_378232(str_379788);
	framePtr = F.prev;

	return result_379789;

}

function nsuSplitString(s_133820, sep_133821, maxsplit_133823) {
	var result_133825 = null;

		if (!((0 < (sep_133821 != null ? sep_133821.length : 0)))) {
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/strutils.nim(803, 11) `\x0A0 < len(sep)` "));
		}
		
		result_133825 = nimCopy(null, [], NTI134017);
		L1: do {
			var x_134019 = null;
			var last_134034 = 0;
			var splits_134036 = maxsplit_133823;
			L2: do {
					L3: while (true) {
					if (!(last_134034 <= (s_133820 != null ? s_133820.length : 0))) break L3;
						var first_134038 = last_134034;
						L4: do {
								L5: while (true) {
								if (!((last_134034 < (s_133820 != null ? s_133820.length : 0)) && !(substr_eq_132789(s_133820, last_134034, sep_133821)))) break L5;
									last_134034 += 1;
								}
						} while(false);
						if ((splits_134036 == 0)) {
						last_134034 = (s_133820 != null ? s_133820.length : 0);
						}
						
						x_134019 = substr_23422(s_133820, first_134038, (last_134034 - 1));
						var Tmp6 = nimCopy(null, x_134019, NTI138);
						if (result_133825 != null) { result_133825.push(Tmp6); } else { result_133825 = [Tmp6]; };
						if ((splits_134036 == 0)) {
						break L2;
						}
						
						splits_134036 -= 1;
						last_134034 += (sep_133821 != null ? sep_133821.length : 0);
					}
			} while(false);
		} while(false);

	return result_133825;

}

function new_py_int_375257(i_375259) {
	var result_379806 = null;

	var F={procname:"numobjects.newPyInt",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 508;
		result_379806 = new_py_int_simple_374401();
		F.line = 509;
		var ui_379807 = absInt(i_375259);
		L1: do {
			F.line = 510;
				L2: while (true) {
				if (!!((ui_379807 == 0))) break L2;
					F.line = 511;
					var Tmp3 = nimCopy(null, chckRange(modInt(ui_379807, 65536), 0, 65535), NTI374054);
					if (result_379806.digits != null) { result_379806.digits.push(Tmp3); } else { result_379806.digits = [Tmp3]; };
					F.line = 512;
					ui_379807 = ((ui_379807 >>> 0) >>> 16);
				}
		} while(false);
		if ((i_375259 < 0)) {
		F.line = 515;
		result_379806.sign = -1;
		}
		else {
		if ((i_375259 == 0)) {
		F.line = 517;
		result_379806.sign = 0;
		}
		else {
			F.line = 519;
			result_379806.sign = 1;
		}
		}
	framePtr = F.prev;

	return result_379806;

}

function new_py_int_object_magic_389416(args_389434) {
	var result_389435 = null;

	var F={procname:"numobjects.newPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(((args_389434 != null ? args_389434.length : 0) == 2))) {
		F.line = 183;
		var msg_389447 = null;
		if (false) {
		F.line = 185;
		F.line = 185;
		var fmt_res_389453 = mnewString(0);
		F.line = 185;
		if (fmt_res_389453 != null) { fmt_res_389453 = (fmt_res_389453).concat(makeNimstrLit(" argument (")); } else { fmt_res_389453 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_389453 != null) { fmt_res_389453 = (fmt_res_389453).concat(cstrToNimstr(((args_389434 != null ? args_389434.length : 0))+"")); } else { fmt_res_389453 = cstrToNimstr(((args_389434 != null ? args_389434.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_389453 != null) { fmt_res_389453 = (fmt_res_389453).concat(makeNimstrLit(" given)")); } else { fmt_res_389453 = makeNimstrLit(" given)"); };
		msg_389447 = nimCopy(null, (makeNimstrLit(" takes exactly 2")).concat(fmt_res_389453), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_389611 = mnewString(0);
			F.line = 187;
			if (fmt_res_389611 != null) { fmt_res_389611 = (fmt_res_389611).concat(makeNimstrLit(" argument (")); } else { fmt_res_389611 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_389611 != null) { fmt_res_389611 = (fmt_res_389611).concat(cstrToNimstr(((args_389434 != null ? args_389434.length : 0))+"")); } else { fmt_res_389611 = cstrToNimstr(((args_389434 != null ? args_389434.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_389611 != null) { fmt_res_389611 = (fmt_res_389611).concat(makeNimstrLit(" given)")); } else { fmt_res_389611 = makeNimstrLit(" given)"); };
			msg_389447 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_389611), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_389809 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_389809.tk = 3;
		F.line = 106;
		excp_389809.thrown = true;
		F.line = 107;
		excp_389809.msg = new_py_string_176075(msg_389447);
		result_389435 = excp_389809;
		break BeforeRet;
		}
		
		F.line = 636;
		var arg_389811 = args_389434[chckIndx(1, 0, args_389434.length+0-1)-0];
		F.line = 637;
		switch (arg_389811.pyType.kind) {
		case 4:
			F.line = 639;
			result_389435 = arg_389811;
			break BeforeRet;
			break;
		case 5:
			F.line = 641;
			var i_str_389814 = cstrToNimstr((arg_389811.v)+"");
			F.line = 642;
			result_389435 = new_py_int_379786(nsuSplitString(i_str_389814, makeNimstrLit("."), -1)[chckIndx(0, 0, nsuSplitString(i_str_389814, makeNimstrLit("."), -1).length+0-1)-0]);
			break BeforeRet;
			break;
		case 10:
			F.line = 644;
			var str_389816 = nimCopy(null, arg_389811.str, NTI138);
			F.line = 645;
++excHandler;
			try {
			F.line = 646;
			result_389435 = new_py_int_379786(str_389816);
			break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
			framePtr = F;
			if (lastJSError && (isObj(lastJSError.m_type, NTI3852))) {
			F.line = 648;
			F.line = 648;
			var fmt_res_389819 = mnewString(0);
			F.line = 648;
			if (fmt_res_389819 != null) { fmt_res_389819 = (fmt_res_389819).concat(makeNimstrLit("invalid literal for int() with base 10: \'")); } else { fmt_res_389819 = makeNimstrLit("invalid literal for int() with base 10: \'"); };
			F.line = 260;
			if (fmt_res_389819 != null) { fmt_res_389819 = (fmt_res_389819).concat(str_389816); } else { fmt_res_389819 = str_389816.slice(); };
			F.line = 648;
			if (fmt_res_389819 != null) { fmt_res_389819 = (fmt_res_389819).concat(makeNimstrLit("\'")); } else { fmt_res_389819 = makeNimstrLit("\'"); };
			var msg_390001 = nimCopy(null, fmt_res_389819, NTI138);
			F.line = 649;
			F.line = 104;
			var excp_390003 = new_py_value_error_simple_362601();
			F.line = 105;
			excp_390003.tk = 5;
			F.line = 106;
			excp_390003.thrown = true;
			F.line = 107;
			excp_390003.msg = new_py_string_176075(msg_390001);
			result_389435 = excp_390003;
			break BeforeRet;
			}
			else {
				reraiseException();
			}
lastJSError = prevJSError;
			} finally {
			framePtr = F;
			}
			break;
		case 6:
			if (arg_389811.b) {
			F.line = 652;
			result_389435 = new_py_int_375257(1);
			break BeforeRet;
			}
			else {
				F.line = 654;
				result_389435 = new_py_int_375257(0);
				break BeforeRet;
			}
			
			break;
		default: 
			F.line = 656;
			F.line = 104;
			var excp_390202 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_390202.tk = 3;
			F.line = 106;
			excp_390202.thrown = true;
			F.line = 107;
			F.line = 656;
			var fmt_res_390008 = mnewString(0);
			F.line = 656;
			if (fmt_res_390008 != null) { fmt_res_390008 = (fmt_res_390008).concat(makeNimstrLit("Int argument can\'t be \'")); } else { fmt_res_390008 = makeNimstrLit("Int argument can\'t be \'"); };
			F.line = 260;
			if (fmt_res_390008 != null) { fmt_res_390008 = (fmt_res_390008).concat(arg_389811.pyType.name); } else { fmt_res_390008 = arg_389811.pyType.name.slice(); };
			F.line = 656;
			if (fmt_res_390008 != null) { fmt_res_390008 = (fmt_res_390008).concat(makeNimstrLit("\'")); } else { fmt_res_390008 = makeNimstrLit("\'"); };
			excp_390202.msg = new_py_string_176075(fmt_res_390008);
			result_389435 = excp_390202;
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_389435;

}
py_int_object_type_374313.magicMethods.Field0 = add_py_int_object_magic_379890;
py_int_object_type_374313.magicMethods.Field1 = sub_py_int_object_magic_380820;
py_int_object_type_374313.magicMethods.Field2 = mul_py_int_object_magic_381820;
py_int_object_type_374313.magicMethods.Field3 = truediv_py_int_object_magic_382820;
py_int_object_type_374313.magicMethods.Field4 = floordiv_py_int_object_magic_383615;
py_int_object_type_374313.magicMethods.Field6 = pow_py_int_object_magic_384618;
py_int_object_type_374313.magicMethods.Field9 = positive_py_int_object_magic_385620;
py_int_object_type_374313.magicMethods.Field8 = negative_py_int_object_magic_385816;
py_int_object_type_374313.magicMethods.Field12 = bool_py_int_object_magic_386016;
py_int_object_type_374313.magicMethods.Field16 = lt_py_int_object_magic_386216;
py_int_object_type_374313.magicMethods.Field18 = eq_py_int_object_magic_387219;
py_int_object_type_374313.magicMethods.Field24 = str_py_int_object_magic_388819;
py_int_object_type_374313.magicMethods.Field25 = repr_py_int_object_magic_389016;
py_int_object_type_374313.magicMethods.Field30 = hash_py_int_object_magic_389216;
py_int_object_type_374313.magicMethods.Field26 = new_py_int_object_magic_389416;

function new_py_float_379860(v_379862) {
	var result_379863 = null;

	var F={procname:"numobjects.newPyFloat",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 528;
		result_379863 = new_py_float_simple_378801();
		F.line = 529;
		result_379863.v = v_379862;
	framePtr = F.prev;

	return result_379863;

}

function add_py_float_object_magic_390470(self_no_cast_390472, other_390473) {
	var result_390474 = null;

	var F={procname:"numobjects.addPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_390472.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_390601 = self_no_cast_390472;
		F.line = 659;
		var casted_390602 = null;
		if (of_py_float_object_378726(other_390473)) {
		F.line = 661;
		casted_390602 = other_390473;
		}
		else {
		if (of_py_int_object_374315(other_390473)) {
		F.line = 663;
		casted_390602 = new_py_float_379843(other_390473);
		}
		else {
			F.line = 665;
			F.line = 665;
			var fmt_res_390605 = mnewString(0);
			F.line = 665;
			if (fmt_res_390605 != null) { fmt_res_390605 = (fmt_res_390605).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_390605 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_390605 != null) { fmt_res_390605 = (fmt_res_390605).concat(other_390473.pyType.name); } else { fmt_res_390605 = other_390473.pyType.name.slice(); };
			var msg_390802 = (makeNimstrLit("add")).concat(fmt_res_390605);
			F.line = 666;
			F.line = 104;
			var excp_390804 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_390804.tk = 3;
			F.line = 106;
			excp_390804.thrown = true;
			F.line = 107;
			excp_390804.msg = new_py_string_176075(msg_390802);
			result_390474 = excp_390804;
			break BeforeRet;
		}
		}
		result_390474 = new_py_float_379860((self_390601.v + casted_390602.v));
	} while (false);
	framePtr = F.prev;

	return result_390474;

}

function sub_py_float_object_magic_390822(self_no_cast_390824, other_390825) {
	var result_390826 = null;

	var F={procname:"numobjects.subPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_390824.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_391001 = self_no_cast_390824;
		F.line = 659;
		var casted_391002 = null;
		if (of_py_float_object_378726(other_390825)) {
		F.line = 661;
		casted_391002 = other_390825;
		}
		else {
		if (of_py_int_object_374315(other_390825)) {
		F.line = 663;
		casted_391002 = new_py_float_379843(other_390825);
		}
		else {
			F.line = 665;
			F.line = 665;
			var fmt_res_391005 = mnewString(0);
			F.line = 665;
			if (fmt_res_391005 != null) { fmt_res_391005 = (fmt_res_391005).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_391005 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_391005 != null) { fmt_res_391005 = (fmt_res_391005).concat(other_390825.pyType.name); } else { fmt_res_391005 = other_390825.pyType.name.slice(); };
			var msg_391202 = (makeNimstrLit("sub")).concat(fmt_res_391005);
			F.line = 666;
			F.line = 104;
			var excp_391204 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_391204.tk = 3;
			F.line = 106;
			excp_391204.thrown = true;
			F.line = 107;
			excp_391204.msg = new_py_string_176075(msg_391202);
			result_390826 = excp_391204;
			break BeforeRet;
		}
		}
		result_390826 = new_py_float_379860((self_391001.v - casted_391002.v));
	} while (false);
	framePtr = F.prev;

	return result_390826;

}

function mul_py_float_object_magic_391222(self_no_cast_391224, other_391225) {
	var result_391226 = null;

	var F={procname:"numobjects.mulPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_391224.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_391401 = self_no_cast_391224;
		F.line = 659;
		var casted_391402 = null;
		if (of_py_float_object_378726(other_391225)) {
		F.line = 661;
		casted_391402 = other_391225;
		}
		else {
		if (of_py_int_object_374315(other_391225)) {
		F.line = 663;
		casted_391402 = new_py_float_379843(other_391225);
		}
		else {
			F.line = 665;
			F.line = 665;
			var fmt_res_391405 = mnewString(0);
			F.line = 665;
			if (fmt_res_391405 != null) { fmt_res_391405 = (fmt_res_391405).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_391405 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_391405 != null) { fmt_res_391405 = (fmt_res_391405).concat(other_391225.pyType.name); } else { fmt_res_391405 = other_391225.pyType.name.slice(); };
			var msg_391602 = (makeNimstrLit("mul")).concat(fmt_res_391405);
			F.line = 666;
			F.line = 104;
			var excp_391604 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_391604.tk = 3;
			F.line = 106;
			excp_391604.thrown = true;
			F.line = 107;
			excp_391604.msg = new_py_string_176075(msg_391602);
			result_391226 = excp_391604;
			break BeforeRet;
		}
		}
		result_391226 = new_py_float_379860((self_391401.v * casted_391402.v));
	} while (false);
	framePtr = F.prev;

	return result_391226;

}

function truediv_py_float_object_magic_391622(self_no_cast_391624, other_391625) {
	var result_391626 = null;

	var F={procname:"numobjects.truedivPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_391624.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_391801 = self_no_cast_391624;
		F.line = 659;
		var casted_391802 = null;
		if (of_py_float_object_378726(other_391625)) {
		F.line = 661;
		casted_391802 = other_391625;
		}
		else {
		if (of_py_int_object_374315(other_391625)) {
		F.line = 663;
		casted_391802 = new_py_float_379843(other_391625);
		}
		else {
			F.line = 665;
			F.line = 665;
			var fmt_res_391805 = mnewString(0);
			F.line = 665;
			if (fmt_res_391805 != null) { fmt_res_391805 = (fmt_res_391805).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_391805 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_391805 != null) { fmt_res_391805 = (fmt_res_391805).concat(other_391625.pyType.name); } else { fmt_res_391805 = other_391625.pyType.name.slice(); };
			var msg_392002 = (makeNimstrLit("truediv")).concat(fmt_res_391805);
			F.line = 666;
			F.line = 104;
			var excp_392004 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_392004.tk = 3;
			F.line = 106;
			excp_392004.thrown = true;
			F.line = 107;
			excp_392004.msg = new_py_string_176075(msg_392002);
			result_391626 = excp_392004;
			break BeforeRet;
		}
		}
		result_391626 = new_py_float_379860((self_391801.v / casted_391802.v));
	} while (false);
	framePtr = F.prev;

	return result_391626;

}

function floordiv_py_float_object_magic_392022(self_no_cast_392024, other_392025) {
	var result_392026 = null;

	var F={procname:"numobjects.floordivPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_392024.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_392201 = self_no_cast_392024;
		F.line = 659;
		var casted_392202 = null;
		if (of_py_float_object_378726(other_392025)) {
		F.line = 661;
		casted_392202 = other_392025;
		}
		else {
		if (of_py_int_object_374315(other_392025)) {
		F.line = 663;
		casted_392202 = new_py_float_379843(other_392025);
		}
		else {
			F.line = 665;
			F.line = 665;
			var fmt_res_392205 = mnewString(0);
			F.line = 665;
			if (fmt_res_392205 != null) { fmt_res_392205 = (fmt_res_392205).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_392205 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_392205 != null) { fmt_res_392205 = (fmt_res_392205).concat(other_392025.pyType.name); } else { fmt_res_392205 = other_392025.pyType.name.slice(); };
			var msg_392402 = (makeNimstrLit("floordiv")).concat(fmt_res_392205);
			F.line = 666;
			F.line = 104;
			var excp_392404 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_392404.tk = 3;
			F.line = 106;
			excp_392404.thrown = true;
			F.line = 107;
			excp_392404.msg = new_py_string_176075(msg_392402);
			result_392026 = excp_392404;
			break BeforeRet;
		}
		}
		result_392026 = new_py_float_379860(Math.floor((self_392201.v / casted_392202.v)));
	} while (false);
	framePtr = F.prev;

	return result_392026;

}

function pow_py_float_object_magic_392422(self_no_cast_392424, other_392425) {
	var result_392426 = null;

	var F={procname:"numobjects.powPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_392424.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_392601 = self_no_cast_392424;
		F.line = 659;
		var casted_392602 = null;
		if (of_py_float_object_378726(other_392425)) {
		F.line = 661;
		casted_392602 = other_392425;
		}
		else {
		if (of_py_int_object_374315(other_392425)) {
		F.line = 663;
		casted_392602 = new_py_float_379843(other_392425);
		}
		else {
			F.line = 665;
			F.line = 665;
			var fmt_res_392605 = mnewString(0);
			F.line = 665;
			if (fmt_res_392605 != null) { fmt_res_392605 = (fmt_res_392605).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_392605 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_392605 != null) { fmt_res_392605 = (fmt_res_392605).concat(other_392425.pyType.name); } else { fmt_res_392605 = other_392425.pyType.name.slice(); };
			var msg_392802 = (makeNimstrLit("pow")).concat(fmt_res_392605);
			F.line = 666;
			F.line = 104;
			var excp_392804 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_392804.tk = 3;
			F.line = 106;
			excp_392804.thrown = true;
			F.line = 107;
			excp_392804.msg = new_py_string_176075(msg_392802);
			result_392426 = excp_392804;
			break BeforeRet;
		}
		}
		result_392426 = new_py_float_379860(Math.pow(self_392601.v, casted_392602.v));
	} while (false);
	framePtr = F.prev;

	return result_392426;

}

function positive_py_float_object_magic_392820(self_no_cast_392822) {
	var result_392823 = null;

	var F={procname:"numobjects.positivePyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_392822.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_393001 = self_no_cast_392822;
		result_392823 = self_393001;
	framePtr = F.prev;

	return result_392823;

}

function negative_py_float_object_magic_393016(self_no_cast_393018) {
	var result_393019 = null;

	var F={procname:"numobjects.negativePyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_393018.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_393201 = self_no_cast_393018;
		result_393019 = new_py_float_379860(-(self_393201.v));
	framePtr = F.prev;

	return result_393019;

}

function bool_py_float_object_magic_393216(self_no_cast_393218) {
	var result_393219 = null;

	var F={procname:"numobjects.boolPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_393218.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_393401 = self_no_cast_393218;
		if ((self_393401.v == 0.0)) {
		F.line = 712;
		result_393219 = py_false_obj_354075;
		break BeforeRet;
		}
		else {
			F.line = 714;
			result_393219 = py_true_obj_354074;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_393219;

}

function lt_py_float_object_magic_393418(self_no_cast_393420, other_393421) {
	var result_393422 = null;

	var F={procname:"numobjects.ltPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_393420.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_393601 = self_no_cast_393420;
		F.line = 659;
		var casted_393602 = null;
		if (of_py_float_object_378726(other_393421)) {
		F.line = 661;
		casted_393602 = other_393421;
		}
		else {
		if (of_py_int_object_374315(other_393421)) {
		F.line = 663;
		casted_393602 = new_py_float_379843(other_393421);
		}
		else {
			F.line = 665;
			F.line = 665;
			var fmt_res_393605 = mnewString(0);
			F.line = 665;
			if (fmt_res_393605 != null) { fmt_res_393605 = (fmt_res_393605).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_393605 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_393605 != null) { fmt_res_393605 = (fmt_res_393605).concat(other_393421.pyType.name); } else { fmt_res_393605 = other_393421.pyType.name.slice(); };
			var msg_393802 = (makeNimstrLit("lt")).concat(fmt_res_393605);
			F.line = 666;
			F.line = 104;
			var excp_393804 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_393804.tk = 3;
			F.line = 106;
			excp_393804.thrown = true;
			F.line = 107;
			excp_393804.msg = new_py_string_176075(msg_393802);
			result_393422 = excp_393804;
			break BeforeRet;
		}
		}
		if ((self_393601.v < casted_393602.v)) {
		F.line = 719;
		result_393422 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 721;
			result_393422 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_393422;

}

function eq_py_float_object_magic_393822(self_no_cast_393824, other_393825) {
	var result_393826 = null;

	var F={procname:"numobjects.eqPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_393824.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_394001 = self_no_cast_393824;
		F.line = 659;
		var casted_394002 = null;
		if (of_py_float_object_378726(other_393825)) {
		F.line = 661;
		casted_394002 = other_393825;
		}
		else {
		if (of_py_int_object_374315(other_393825)) {
		F.line = 663;
		casted_394002 = new_py_float_379843(other_393825);
		}
		else {
			F.line = 665;
			F.line = 665;
			var fmt_res_394005 = mnewString(0);
			F.line = 665;
			if (fmt_res_394005 != null) { fmt_res_394005 = (fmt_res_394005).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_394005 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_394005 != null) { fmt_res_394005 = (fmt_res_394005).concat(other_393825.pyType.name); } else { fmt_res_394005 = other_393825.pyType.name.slice(); };
			var msg_394202 = (makeNimstrLit("eq")).concat(fmt_res_394005);
			F.line = 666;
			F.line = 104;
			var excp_394204 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_394204.tk = 3;
			F.line = 106;
			excp_394204.thrown = true;
			F.line = 107;
			excp_394204.msg = new_py_string_176075(msg_394202);
			result_393826 = excp_394204;
			break BeforeRet;
		}
		}
		if ((self_394001.v == casted_394002.v)) {
		F.line = 726;
		result_393826 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 728;
			result_393826 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_393826;

}

function gt_py_float_object_magic_394222(self_no_cast_394224, other_394225) {
	var result_394226 = null;

	var F={procname:"numobjects.gtPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_394224.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_394401 = self_no_cast_394224;
		F.line = 659;
		var casted_394402 = null;
		if (of_py_float_object_378726(other_394225)) {
		F.line = 661;
		casted_394402 = other_394225;
		}
		else {
		if (of_py_int_object_374315(other_394225)) {
		F.line = 663;
		casted_394402 = new_py_float_379843(other_394225);
		}
		else {
			F.line = 665;
			F.line = 665;
			var fmt_res_394405 = mnewString(0);
			F.line = 665;
			if (fmt_res_394405 != null) { fmt_res_394405 = (fmt_res_394405).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_394405 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_394405 != null) { fmt_res_394405 = (fmt_res_394405).concat(other_394225.pyType.name); } else { fmt_res_394405 = other_394225.pyType.name.slice(); };
			var msg_394602 = (makeNimstrLit("gt")).concat(fmt_res_394405);
			F.line = 666;
			F.line = 104;
			var excp_394604 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_394604.tk = 3;
			F.line = 106;
			excp_394604.thrown = true;
			F.line = 107;
			excp_394604.msg = new_py_string_176075(msg_394602);
			result_394226 = excp_394604;
			break BeforeRet;
		}
		}
		if ((casted_394402.v < self_394401.v)) {
		F.line = 733;
		result_394226 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 735;
			result_394226 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_394226;

}

function str_py_float_object_magic_394620(self_no_cast_394622) {
	var result_394623 = null;

	var F={procname:"numobjects.strPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_394622.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_394801 = self_no_cast_394622;
		result_394623 = new_py_string_176075(HEX24_157579(self_394801));
	framePtr = F.prev;

	return result_394623;

}

function repr_py_float_object_magic_394816(self_no_cast_394818) {
	var result_394819 = null;

	var F={procname:"numobjects.reprPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_394818.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_395001 = self_no_cast_394818;
		result_394819 = new_py_string_176075(HEX24_157579(self_395001));
	framePtr = F.prev;

	return result_394819;

}

function hash_144378(x_144380) {
	var result_144381 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 223;
		var y_144382 = [(x_144380 + 1.0000000000000000e+00)];
		F.line = 224;
		result_144381 = y_144382[0];
	framePtr = F.prev;

	return result_144381;

}

function hash_py_float_object_magic_395016(self_no_cast_395018) {
	var result_395019 = null;

	var F={procname:"numobjects.hashPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_395018.m_type, NTI378718))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_395201 = self_no_cast_395018;
		result_395019 = new_py_int_375257(hash_144378(self_395201.v));
	framePtr = F.prev;

	return result_395019;

}
py_float_object_type_378724.magicMethods.Field0 = add_py_float_object_magic_390470;
py_float_object_type_378724.magicMethods.Field1 = sub_py_float_object_magic_390822;
py_float_object_type_378724.magicMethods.Field2 = mul_py_float_object_magic_391222;
py_float_object_type_378724.magicMethods.Field3 = truediv_py_float_object_magic_391622;
py_float_object_type_378724.magicMethods.Field4 = floordiv_py_float_object_magic_392022;
py_float_object_type_378724.magicMethods.Field6 = pow_py_float_object_magic_392422;
py_float_object_type_378724.magicMethods.Field9 = positive_py_float_object_magic_392820;
py_float_object_type_378724.magicMethods.Field8 = negative_py_float_object_magic_393016;
py_float_object_type_378724.magicMethods.Field12 = bool_py_float_object_magic_393216;
py_float_object_type_378724.magicMethods.Field16 = lt_py_float_object_magic_393418;
py_float_object_type_378724.magicMethods.Field18 = eq_py_float_object_magic_393822;
py_float_object_type_378724.magicMethods.Field20 = gt_py_float_object_magic_394222;
py_float_object_type_378724.magicMethods.Field24 = str_py_float_object_magic_394620;
py_float_object_type_378724.magicMethods.Field25 = repr_py_float_object_magic_394816;
py_float_object_type_378724.magicMethods.Field30 = hash_py_float_object_magic_395016;

function not_py_bool_object_magic_396384(self_no_cast_396386) {
		var Tmp1;

	var result_396387 = null;

	var F={procname:"boolobjectImpl.notPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_396386.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_396601 = self_no_cast_396386;
		if ((self_396601 == py_true_obj_354074)) {
		Tmp1 = py_false_obj_354075;
		}
		else {
		Tmp1 = py_true_obj_354074;
		}
		
		result_396387 = Tmp1;
	framePtr = F.prev;

	return result_396387;

}

function bool_py_bool_object_magic_396626(self_no_cast_396628) {
	var result_396629 = null;

	var F={procname:"boolobjectImpl.boolPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_396628.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_396801 = self_no_cast_396628;
		result_396629 = self_396801;
	framePtr = F.prev;

	return result_396629;

}

function and_py_bool_object_magic_396816(self_no_cast_396818, other_396819) {
			var Tmp1;

	var result_396820 = null;

	var F={procname:"boolobjectImpl.andPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_396818.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_397001 = self_no_cast_396818;
		F.line = 30;
		F.line = 45;
		if ((other_396819.pyType === null)) {
		F.line = 2895;
		var e_397028 = null;
		F.line = 2896;
		e_397028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_397028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_397028.parent = null;
		F.line = 26;
		raiseException(e_397028, "InternalError");
		}
		
		F.line = 27;
		var fun_397202 = other_396819.pyType.magicMethods.Field12;
		if ((fun_397202 === null)) {
		F.line = 29;
		var obj_type_str_397211 = other_396819.pyType.name;
		F.line = 30;
		var method_str_397213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_397215 = (makeNimstrLit("No ")).concat(method_str_397213,makeNimstrLit(" method for "),obj_type_str_397211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_397217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_397217.tk = 3;
		F.line = 106;
		excp_397217.thrown = true;
		F.line = 107;
		excp_397217.msg = new_py_string_176075(msg_397215);
		var excp_397220 = excp_397217;
		F.line = 36;
		result_396820 = excp_397220;
		break BeforeRet;
		}
		
		var fun_397402 = fun_397202;
		F.line = 46;
		var res_397404 = fun_397402(other_396819);
		var other_bool_obj_397601 = res_397404;
		if (!(of_py_bool_object_353106(other_bool_obj_397601))) {
		F.line = 163;
		var type_name_397604 = nimCopy(null, other_bool_obj_397601.pyType.name, NTI138);
		F.line = 164;
		F.line = 164;
		var fmt_res_397607 = mnewString(0);
		F.line = 164;
		if (fmt_res_397607 != null) { fmt_res_397607 = (fmt_res_397607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_397607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_397607 != null) { fmt_res_397607 = (fmt_res_397607).concat(type_name_397604); } else { fmt_res_397607 = type_name_397604.slice(); };
		F.line = 164;
		if (fmt_res_397607 != null) { fmt_res_397607 = (fmt_res_397607).concat(makeNimstrLit(")")); } else { fmt_res_397607 = makeNimstrLit(")"); };
		var msg_397802 = (makeNimstrLit("__bool__")).concat(fmt_res_397607);
		F.line = 165;
		F.line = 104;
		var excp_397804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_397804.tk = 3;
		F.line = 106;
		excp_397804.thrown = true;
		F.line = 107;
		excp_397804.msg = new_py_string_176075(msg_397802);
		result_396820 = excp_397804;
		break BeforeRet;
		}
		
			if (!self_397001.b) Tmp1 = false; else {				Tmp1 = other_bool_obj_397601.b;			}		if (Tmp1) {
		F.line = 33;
		result_396820 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 35;
			result_396820 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_396820;

}

function xor_py_bool_object_magic_397820(self_no_cast_397822, other_397823) {
	var result_397824 = null;

	var F={procname:"boolobjectImpl.xorPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_397822.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_398001 = self_no_cast_397822;
		F.line = 38;
		F.line = 45;
		if ((other_397823.pyType === null)) {
		F.line = 2895;
		var e_398028 = null;
		F.line = 2896;
		e_398028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_398028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_398028.parent = null;
		F.line = 26;
		raiseException(e_398028, "InternalError");
		}
		
		F.line = 27;
		var fun_398202 = other_397823.pyType.magicMethods.Field12;
		if ((fun_398202 === null)) {
		F.line = 29;
		var obj_type_str_398211 = other_397823.pyType.name;
		F.line = 30;
		var method_str_398213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_398215 = (makeNimstrLit("No ")).concat(method_str_398213,makeNimstrLit(" method for "),obj_type_str_398211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_398217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_398217.tk = 3;
		F.line = 106;
		excp_398217.thrown = true;
		F.line = 107;
		excp_398217.msg = new_py_string_176075(msg_398215);
		var excp_398220 = excp_398217;
		F.line = 36;
		result_397824 = excp_398220;
		break BeforeRet;
		}
		
		var fun_398402 = fun_398202;
		F.line = 46;
		var res_398404 = fun_398402(other_397823);
		var other_bool_obj_398601 = res_398404;
		if (!(of_py_bool_object_353106(other_bool_obj_398601))) {
		F.line = 163;
		var type_name_398604 = nimCopy(null, other_bool_obj_398601.pyType.name, NTI138);
		F.line = 164;
		F.line = 164;
		var fmt_res_398607 = mnewString(0);
		F.line = 164;
		if (fmt_res_398607 != null) { fmt_res_398607 = (fmt_res_398607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_398607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_398607 != null) { fmt_res_398607 = (fmt_res_398607).concat(type_name_398604); } else { fmt_res_398607 = type_name_398604.slice(); };
		F.line = 164;
		if (fmt_res_398607 != null) { fmt_res_398607 = (fmt_res_398607).concat(makeNimstrLit(")")); } else { fmt_res_398607 = makeNimstrLit(")"); };
		var msg_398802 = (makeNimstrLit("__bool__")).concat(fmt_res_398607);
		F.line = 165;
		F.line = 104;
		var excp_398804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_398804.tk = 3;
		F.line = 106;
		excp_398804.thrown = true;
		F.line = 107;
		excp_398804.msg = new_py_string_176075(msg_398802);
		result_397824 = excp_398804;
		break BeforeRet;
		}
		
		if ((self_398001.b != other_bool_obj_398601.b)) {
		F.line = 41;
		result_397824 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 43;
			result_397824 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_397824;

}

function or_py_bool_object_magic_398820(self_no_cast_398822, other_398823) {
			var Tmp1;

	var result_398824 = null;

	var F={procname:"boolobjectImpl.orPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_398822.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_399001 = self_no_cast_398822;
		F.line = 46;
		F.line = 45;
		if ((other_398823.pyType === null)) {
		F.line = 2895;
		var e_399028 = null;
		F.line = 2896;
		e_399028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_399028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_399028.parent = null;
		F.line = 26;
		raiseException(e_399028, "InternalError");
		}
		
		F.line = 27;
		var fun_399202 = other_398823.pyType.magicMethods.Field12;
		if ((fun_399202 === null)) {
		F.line = 29;
		var obj_type_str_399211 = other_398823.pyType.name;
		F.line = 30;
		var method_str_399213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_399215 = (makeNimstrLit("No ")).concat(method_str_399213,makeNimstrLit(" method for "),obj_type_str_399211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_399217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_399217.tk = 3;
		F.line = 106;
		excp_399217.thrown = true;
		F.line = 107;
		excp_399217.msg = new_py_string_176075(msg_399215);
		var excp_399220 = excp_399217;
		F.line = 36;
		result_398824 = excp_399220;
		break BeforeRet;
		}
		
		var fun_399402 = fun_399202;
		F.line = 46;
		var res_399404 = fun_399402(other_398823);
		var other_bool_obj_399601 = res_399404;
		if (!(of_py_bool_object_353106(other_bool_obj_399601))) {
		F.line = 163;
		var type_name_399604 = nimCopy(null, other_bool_obj_399601.pyType.name, NTI138);
		F.line = 164;
		F.line = 164;
		var fmt_res_399607 = mnewString(0);
		F.line = 164;
		if (fmt_res_399607 != null) { fmt_res_399607 = (fmt_res_399607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_399607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_399607 != null) { fmt_res_399607 = (fmt_res_399607).concat(type_name_399604); } else { fmt_res_399607 = type_name_399604.slice(); };
		F.line = 164;
		if (fmt_res_399607 != null) { fmt_res_399607 = (fmt_res_399607).concat(makeNimstrLit(")")); } else { fmt_res_399607 = makeNimstrLit(")"); };
		var msg_399802 = (makeNimstrLit("__bool__")).concat(fmt_res_399607);
		F.line = 165;
		F.line = 104;
		var excp_399804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_399804.tk = 3;
		F.line = 106;
		excp_399804.thrown = true;
		F.line = 107;
		excp_399804.msg = new_py_string_176075(msg_399802);
		result_398824 = excp_399804;
		break BeforeRet;
		}
		
			if (self_399001.b) Tmp1 = true; else {				Tmp1 = other_bool_obj_399601.b;			}		if (Tmp1) {
		F.line = 49;
		result_398824 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 51;
			result_398824 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_398824;

}

function eq_py_bool_object_magic_399820(self_no_cast_399822, other_399823) {
	var result_399824 = null;

	var F={procname:"boolobjectImpl.eqPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_399822.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_400001 = self_no_cast_399822;
		F.line = 54;
		F.line = 45;
		if ((other_399823.pyType === null)) {
		F.line = 2895;
		var e_400028 = null;
		F.line = 2896;
		e_400028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_400028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_400028.parent = null;
		F.line = 26;
		raiseException(e_400028, "InternalError");
		}
		
		F.line = 27;
		var fun_400202 = other_399823.pyType.magicMethods.Field12;
		if ((fun_400202 === null)) {
		F.line = 29;
		var obj_type_str_400211 = other_399823.pyType.name;
		F.line = 30;
		var method_str_400213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_400215 = (makeNimstrLit("No ")).concat(method_str_400213,makeNimstrLit(" method for "),obj_type_str_400211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_400217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_400217.tk = 3;
		F.line = 106;
		excp_400217.thrown = true;
		F.line = 107;
		excp_400217.msg = new_py_string_176075(msg_400215);
		var excp_400220 = excp_400217;
		F.line = 36;
		result_399824 = excp_400220;
		break BeforeRet;
		}
		
		var fun_400402 = fun_400202;
		F.line = 46;
		var res_400404 = fun_400402(other_399823);
		var other_bool_obj_400601 = res_400404;
		if (!(of_py_bool_object_353106(other_bool_obj_400601))) {
		F.line = 163;
		var type_name_400604 = nimCopy(null, other_bool_obj_400601.pyType.name, NTI138);
		F.line = 164;
		F.line = 164;
		var fmt_res_400607 = mnewString(0);
		F.line = 164;
		if (fmt_res_400607 != null) { fmt_res_400607 = (fmt_res_400607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_400607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_400607 != null) { fmt_res_400607 = (fmt_res_400607).concat(type_name_400604); } else { fmt_res_400607 = type_name_400604.slice(); };
		F.line = 164;
		if (fmt_res_400607 != null) { fmt_res_400607 = (fmt_res_400607).concat(makeNimstrLit(")")); } else { fmt_res_400607 = makeNimstrLit(")"); };
		var msg_400802 = (makeNimstrLit("__bool__")).concat(fmt_res_400607);
		F.line = 165;
		F.line = 104;
		var excp_400804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_400804.tk = 3;
		F.line = 106;
		excp_400804.thrown = true;
		F.line = 107;
		excp_400804.msg = new_py_string_176075(msg_400802);
		result_399824 = excp_400804;
		break BeforeRet;
		}
		
		F.line = 56;
		var other_bool_400806 = other_bool_obj_400601.b;
		if ((self_400001.b == other_bool_400806)) {
		F.line = 58;
		result_399824 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 60;
			result_399824 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_399824;

}

function repr_py_bool_object_magic_400821(self_no_cast_400823) {
	var result_400824 = null;

	var F={procname:"boolobjectImpl.reprPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_400823.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_401001 = self_no_cast_400823;
		if (self_401001.b) {
		F.line = 64;
		result_400824 = new_py_string_176075(makeNimstrLit("True"));
		break BeforeRet;
		}
		else {
			F.line = 66;
			result_400824 = new_py_string_176075(makeNimstrLit("False"));
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_400824;

}

function hash_py_bool_object_magic_401016(self_no_cast_401018) {
	var result_401019 = null;

	var F={procname:"boolobjectImpl.hashPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_401018.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_401201 = self_no_cast_401018;
		result_401019 = new_py_int_375257(((self_401201.b)|0));
	framePtr = F.prev;

	return result_401019;

}
py_bool_object_type_353104.magicMethods.Field7 = not_py_bool_object_magic_396384;
py_bool_object_type_353104.magicMethods.Field12 = bool_py_bool_object_magic_396626;
py_bool_object_type_353104.magicMethods.Field13 = and_py_bool_object_magic_396816;
py_bool_object_type_353104.magicMethods.Field14 = xor_py_bool_object_magic_397820;
py_bool_object_type_353104.magicMethods.Field15 = or_py_bool_object_magic_398820;
py_bool_object_type_353104.magicMethods.Field18 = eq_py_bool_object_magic_399820;
py_bool_object_type_353104.magicMethods.Field25 = repr_py_bool_object_magic_400821;
py_bool_object_type_353104.magicMethods.Field30 = hash_py_bool_object_magic_401016;

function of_py_str_object_175092(obj_175029) {
	var result_175094 = false;

	var F={procname:"stringobject.ofPyStrObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_175094 = (obj_175029.pyType.kind == 10);
	framePtr = F.prev;

	return result_175094;

}

function eq_py_str_object_magic_403327(self_no_cast_403329, other_403330) {
	var result_403331 = null;

	var F={procname:"stringobjectImpl.eqPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_403329.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_403401 = self_no_cast_403329;
		if (!(of_py_str_object_175092(other_403330))) {
		F.line = 24;
		result_403331 = py_false_obj_354075;
		break BeforeRet;
		}
		
		if (eqStrings(self_403401.str, other_403330.str)) {
		F.line = 26;
		result_403331 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 28;
			result_403331 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_403331;

}

function str_py_str_object_magic_403418(self_no_cast_403420) {
	var result_403421 = null;

	var F={procname:"stringobjectImpl.strPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_403420.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_403601 = self_no_cast_403420;
		result_403421 = self_403601;
	framePtr = F.prev;

	return result_403421;

}

function repr_py_str_object_magic_403616(self_no_cast_403618) {
	var result_403619 = null;

	var F={procname:"stringobjectImpl.reprPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_403618.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_403801 = self_no_cast_403618;
		result_403619 = new_py_string_176075(HEX24_157579(self_403801));
	framePtr = F.prev;

	return result_403619;

}

function hash_403040(self_403042) {
	var result_403043 = 0;

	var F={procname:"stringobjectImpl.hash",prev:framePtr,filename:"../Objects/stringobjectImpl.nim",line:0};
	framePtr = F;
		F.line = 10;
		result_403043 = hash_143900(self_403042.str);
	framePtr = F.prev;

	return result_403043;

}

function hash_py_str_object_magic_403816(self_no_cast_403818) {
	var result_403819 = null;

	var F={procname:"stringobjectImpl.hashPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_403818.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_404001 = self_no_cast_403818;
		result_403819 = new_py_int_375257(hash_403040(self_404001));
	framePtr = F.prev;

	return result_403819;

}

function new_py_str_object_magic_404016(args_404031) {
	var result_404032 = null;

	var F={procname:"stringobjectImpl.newPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_404031 != null ? args_404031.length : 0) == 2))) {
		F.line = 183;
		var msg_404044 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_404049 = mnewString(0);
		F.line = 185;
		if (fmt_res_404049 != null) { fmt_res_404049 = (fmt_res_404049).concat(makeNimstrLit(" argument (")); } else { fmt_res_404049 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_404049 != null) { fmt_res_404049 = (fmt_res_404049).concat(cstrToNimstr(((args_404031 != null ? args_404031.length : 0))+"")); } else { fmt_res_404049 = cstrToNimstr(((args_404031 != null ? args_404031.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_404049 != null) { fmt_res_404049 = (fmt_res_404049).concat(makeNimstrLit(" given)")); } else { fmt_res_404049 = makeNimstrLit(" given)"); };
		msg_404044 = nimCopy(null, (makeNimstrLit("New takes exactly 2")).concat(fmt_res_404049), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_404210 = mnewString(0);
			F.line = 187;
			if (fmt_res_404210 != null) { fmt_res_404210 = (fmt_res_404210).concat(makeNimstrLit(" argument (")); } else { fmt_res_404210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_404210 != null) { fmt_res_404210 = (fmt_res_404210).concat(cstrToNimstr(((args_404031 != null ? args_404031.length : 0))+"")); } else { fmt_res_404210 = cstrToNimstr(((args_404031 != null ? args_404031.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_404210 != null) { fmt_res_404210 = (fmt_res_404210).concat(makeNimstrLit(" given)")); } else { fmt_res_404210 = makeNimstrLit(" given)"); };
			msg_404044 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_404210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_404409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_404409.tk = 3;
		F.line = 106;
		excp_404409.thrown = true;
		F.line = 107;
		excp_404409.msg = new_py_string_176075(msg_404044);
		result_404032 = excp_404409;
		break BeforeRet;
		}
		
		F.line = 230;
		var tp_404411 = args_404031[chckIndx(0, 0, args_404031.length+0-1)-0];
		F.line = 230;
		var obj_404412 = args_404031[chckIndx(1, 0, args_404031.length+0-1)-0];
		F.line = 45;
		if ((obj_404412.pyType === null)) {
		F.line = 2895;
		var e_404439 = null;
		F.line = 2896;
		e_404439 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_404439.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_404439.parent = null;
		F.line = 26;
		raiseException(e_404439, "InternalError");
		}
		
		F.line = 27;
		var fun_404602 = obj_404412.pyType.magicMethods.Field24;
		if ((fun_404602 === null)) {
		F.line = 29;
		var obj_type_str_404611 = obj_404412.pyType.name;
		F.line = 30;
		var method_str_404613 = makeNimstrLit("str");
		F.line = 31;
		var msg_404615 = (makeNimstrLit("No ")).concat(method_str_404613,makeNimstrLit(" method for "),obj_type_str_404611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_404617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_404617.tk = 3;
		F.line = 106;
		excp_404617.thrown = true;
		F.line = 107;
		excp_404617.msg = new_py_string_176075(msg_404615);
		var excp_404620 = excp_404617;
		F.line = 36;
		result_404032 = excp_404620;
		break BeforeRet;
		}
		
		var fun_404802 = fun_404602;
		F.line = 46;
		var res_404804 = fun_404802(obj_404412);
		result_404032 = res_404804;
	} while (false);
	framePtr = F.prev;

	return result_404032;

}
py_str_object_type_175090.magicMethods.Field18 = eq_py_str_object_magic_403327;
py_str_object_type_175090.magicMethods.Field24 = str_py_str_object_magic_403418;
py_str_object_type_175090.magicMethods.Field25 = repr_py_str_object_magic_403616;
py_str_object_type_175090.magicMethods.Field30 = hash_py_str_object_magic_403816;
py_str_object_type_175090.magicMethods.Field26 = new_py_str_object_magic_404016;

function new_465406() {
	var result_465411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_465601 = null;
		F.line = 211;
		r_465601 = {m_type: NTI465190, items: null, idx: 0, id: 0, pyType: null};
		F.line = 212;
		result_465411 = r_465601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_465411;

}

function new_py_seq_iter_simple_465401() {
	var result_465403 = null;

	var F={procname:"iterobject.newPySeqIterSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_465624 = new_465406();
		F.line = 561;
		obj_465624.pyType = py_seq_iter_object_type_465200;
		F.line = 563;
		give_id_157814(obj_465624);
		result_465403 = obj_465624;
	framePtr = F.prev;

	return result_465403;

}

function new_py_seq_iter_default_466021(args_465145) {
	var result_466024 = null;

	var F={procname:"iterobject.newPySeqIterDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_466024 = new_py_seq_iter_simple_465401();
	framePtr = F.prev;

	return result_466024;

}

function iter_py_seq_iter_object_magic_466244(self_no_cast_466246) {
	var result_466247 = null;

	var F={procname:"iterobject.iterPySeqIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_466246.m_type, NTI465190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PySeqIterObject` "));
		}
		
		F.line = 438;
		var self_466401 = self_no_cast_466246;
		result_466247 = self_466401;
	framePtr = F.prev;

	return result_466247;

}

function iternext_py_seq_iter_object_magic_466416(self_no_cast_466418) {
	var result_466419 = null;

	var F={procname:"iterobject.iternextPySeqIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_466418.m_type, NTI465190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PySeqIterObject` "));
		}
		
		F.line = 438;
		var self_466601 = self_no_cast_466418;
		if ((self_466601.idx == (self_466601.items != null ? self_466601.items.length : 0))) {
		F.line = 14;
		F.line = 97;
		var excp_466610 = new_py_stop_iter_error_simple_364601();
		F.line = 98;
		excp_466610.tk = 7;
		F.line = 99;
		excp_466610.thrown = true;
		result_466419 = excp_466610;
		break BeforeRet;
		}
		
		F.line = 15;
		result_466419 = self_466601.items[chckIndx(self_466601.idx, 0, self_466601.items.length+0-1)-0];
		F.line = 16;
		self_466601.idx = addInt(self_466601.idx, 1);
	} while (false);
	framePtr = F.prev;

	return result_466419;

}
var py_seq_iter_object_type_465200 = new_py_type_159261(makeNimstrLit("SeqIter"));
py_seq_iter_object_type_465200.magicMethods.Field26 = new_py_seq_iter_default_466021;
py_seq_iter_object_type_465200.magicMethods.Field36 = iter_py_seq_iter_object_magic_466244;
py_seq_iter_object_type_465200.magicMethods.Field37 = iternext_py_seq_iter_object_magic_466416;

function new_467206() {
	var result_467211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_467401 = null;
		F.line = 211;
		r_467401 = {m_type: NTI467097, start: null, stop: null, step: null, id: 0, pyType: null};
		F.line = 212;
		result_467211 = r_467401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_467211;

}

function new_py_slice_simple_467201() {
	var result_467203 = null;

	var F={procname:"sliceobject.newPySliceSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_467424 = new_467206();
		F.line = 561;
		obj_467424.pyType = py_slice_object_type_467107;
		F.line = 563;
		give_id_157814(obj_467424);
		result_467203 = obj_467424;
	framePtr = F.prev;

	return result_467203;

}

function new_py_slice_default_467821(args_467052) {
	var result_467824 = null;

	var F={procname:"sliceobject.newPySliceDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_467824 = new_py_slice_simple_467201();
	framePtr = F.prev;

	return result_467824;

}
var py_slice_object_type_467107 = new_py_type_159261(makeNimstrLit("Slice"));
py_slice_object_type_467107.kind = 15;
py_slice_object_type_467107.magicMethods.Field26 = new_py_slice_default_467821;

function new_469206() {
	var result_469211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_469401 = null;
		F.line = 211;
		r_469401 = {m_type: NTI469070, items: null, reprLock: false, id: 0, pyType: null};
		F.line = 212;
		result_469211 = r_469401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_469211;

}

function new_py_tuple_simple_469201() {
	var result_469203 = null;

	var F={procname:"tupleobject.newPyTupleSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_469424 = new_469206();
		F.line = 561;
		obj_469424.pyType = py_tuple_object_type_469080;
		F.line = 563;
		give_id_157814(obj_469424);
		result_469203 = obj_469424;
	framePtr = F.prev;

	return result_469203;

}

function new_py_tuple_default_469821(args_469025) {
	var result_469824 = null;

	var F={procname:"tupleobject.newPyTupleDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_469824 = new_py_tuple_simple_469201();
	framePtr = F.prev;

	return result_469824;

}
var py_tuple_object_type_469080 = new_py_type_159261(makeNimstrLit("Tuple"));
py_tuple_object_type_469080.kind = 8;
py_tuple_object_type_469080.magicMethods.Field26 = new_py_tuple_default_469821;

function of_py_tuple_object_469082(obj_469015) {
	var result_469084 = false;

	var F={procname:"tupleobject.ofPyTupleObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_469084 = (obj_469015.pyType.kind == 8);
	framePtr = F.prev;

	return result_469084;

}

function of_py_base_error_object_357262(obj_357189) {
	var result_357264 = false;

	var F={procname:"exceptions.ofPyBaseErrorObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_357264 = (obj_357189.pyType.kind == 3);
	framePtr = F.prev;

	return result_357264;

}

function of_py_exception_object_358259(obj_358261) {
	var result_358262 = false;

	var F={procname:"exceptions.ofPyExceptionObject",prev:framePtr,filename:"../Objects/exceptions.nim",line:0};
	framePtr = F;
		F.line = 54;
		result_358262 = of_py_base_error_object_357262(obj_358261);
	framePtr = F.prev;

	return result_358262;

}

function eq_py_tuple_object_magic_470075(self_no_cast_470077, other_470078) {
							var Tmp4;

	var result_470079 = null;

	var F={procname:"tupleobject.eqPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_470077.m_type, NTI469070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_470201 = self_no_cast_470077;
		if (!(of_py_tuple_object_469082(other_470078))) {
		F.line = 22;
		result_470079 = py_false_obj_354075;
		break BeforeRet;
		}
		
		F.line = 23;
		var t_other_470202 = other_470078;
		if (!(((self_470201.items != null ? self_470201.items.length : 0) == (t_other_470202.items != null ? t_other_470202.items.length : 0)))) {
		F.line = 25;
		result_470079 = py_false_obj_354075;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 26;
			var i_470234 = 0;
			F.line = 3616;
			var colontmp__471004 = 0;
			F.line = 26;
			colontmp__471004 = (self_470201.items != null ? self_470201.items.length : 0);
			F.line = 3617;
			var i_471007 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_471007 < colontmp__471004)) break L3;
						F.line = 3619;
						i_470234 = i_471007;
						F.line = 27;
						var i1_470235 = self_470201.items[chckIndx(i_470234, 0, self_470201.items.length+0-1)-0];
						F.line = 28;
						var i2_470236 = t_other_470202.items[chckIndx(i_470234, 0, t_other_470202.items.length+0-1)-0];
						F.line = 29;
						F.line = 56;
						if ((i1_470235.pyType === null)) {
						F.line = 2895;
						var e_470263 = null;
						F.line = 2896;
						e_470263 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_470263.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_470263.parent = null;
						F.line = 26;
						raiseException(e_470263, "InternalError");
						}
						
						F.line = 27;
						var fun_470402 = i1_470235.pyType.magicMethods.Field18;
						if ((fun_470402 === null)) {
						F.line = 29;
						var obj_type_str_470411 = i1_470235.pyType.name;
						F.line = 30;
						var method_str_470413 = makeNimstrLit("eq");
						F.line = 31;
						var msg_470415 = (makeNimstrLit("No ")).concat(method_str_470413,makeNimstrLit(" method for "),obj_type_str_470411,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_470417 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_470417.tk = 3;
						F.line = 106;
						excp_470417.thrown = true;
						F.line = 107;
						excp_470417.msg = new_py_string_176075(msg_470415);
						var excp_470420 = excp_470417;
						F.line = 36;
						result_470079 = excp_470420;
						break BeforeRet;
						}
						
						var fun_470602 = fun_470402;
						F.line = 57;
						var res_470604 = fun_470602(i1_470235, i2_470236);
						var ret_obj_470801 = res_470604;
							if (of_py_exception_object_358259(ret_obj_470801)) {
							Tmp4 = ret_obj_470801.thrown;
							}
							else {
							Tmp4 = false;
							}
							
						if (Tmp4) {
						F.line = 31;
						result_470079 = ret_obj_470801;
						break BeforeRet;
						}
						
						if (!(of_py_bool_object_353106(ret_obj_470801))) {
						F.line = 32;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/tupleobject.nim(32, 12) `ofPyBoolObject(retObj)` "));
						}
						
						if (!(ret_obj_470801.b)) {
						F.line = 34;
						result_470079 = py_false_obj_354075;
						break BeforeRet;
						}
						
						F.line = 3620;
						i_471007 = addInt(i_471007, 1);
					}
			} while(false);
		} while(false);
		result_470079 = py_true_obj_354074;
	} while (false);
	framePtr = F.prev;

	return result_470079;

}

function new_py_seq_iter_466648(items_466651) {
	var result_466652 = null;

	var F={procname:"iterobject.newPySeqIter",prev:framePtr,filename:"../Objects/iterobject.nim",line:0};
	framePtr = F;
		F.line = 19;
		result_466652 = new_py_seq_iter_simple_465401();
		F.line = 20;
		result_466652.items = nimCopy(null, items_466651, NTI466650);
	framePtr = F.prev;

	return result_466652;

}

function iter_py_tuple_object_magic_471022(self_no_cast_471024) {
	var result_471025 = null;

	var F={procname:"tupleobject.iterPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_471024.m_type, NTI469070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_471201 = self_no_cast_471024;
		result_471025 = new_py_seq_iter_466648(self_471201.items);
	framePtr = F.prev;

	return result_471025;

}

function repr_py_tuple_object_magic_471216(self_no_cast_471218) {
	var result_471219 = null;

	var F={procname:"tupleobject.reprPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_471218.m_type, NTI469070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_471401 = self_no_cast_471218;
		if (self_471401.reprLock) {
		F.line = 379;
		result_471219 = new_py_string_176075(makeNimstrLit("..."));
		break BeforeRet;
		}
		
		F.line = 380;
		self_471401.reprLock = true;
		F.line = 438;
		try {
		F.line = 43;
		var ss_471403 = null;
		L2: do {
			F.line = 44;
			var item_471615 = null;
			F.line = 3909;
			var colontmp__472418 = null;
			F.line = 44;
			colontmp__472418 = self_471401.items;
			F.line = 3911;
			var i_472421 = 0;
			F.line = 3912;
			var l_472423 = (colontmp__472418 != null ? colontmp__472418.length : 0);
			L3: do {
				F.line = 3913;
					L4: while (true) {
					if (!(i_472421 < l_472423)) break L4;
						F.line = 3914;
						item_471615 = colontmp__472418[chckIndx(i_472421, 0, colontmp__472418.length+0-1)-0];
						F.line = 45;
						var item_repr_471616 = null;
						F.line = 46;
						F.line = 45;
						if ((item_471615.pyType === null)) {
						F.line = 2895;
						var e_471643 = null;
						F.line = 2896;
						e_471643 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_471643.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_471643.parent = null;
						F.line = 26;
						raiseException(e_471643, "InternalError");
						}
						
						F.line = 27;
						var fun_471802 = item_471615.pyType.magicMethods.Field25;
						if ((fun_471802 === null)) {
						F.line = 29;
						var obj_type_str_471811 = item_471615.pyType.name;
						F.line = 30;
						var method_str_471813 = makeNimstrLit("repr");
						F.line = 31;
						var msg_471815 = (makeNimstrLit("No ")).concat(method_str_471813,makeNimstrLit(" method for "),obj_type_str_471811,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_471817 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_471817.tk = 3;
						F.line = 106;
						excp_471817.thrown = true;
						F.line = 107;
						excp_471817.msg = new_py_string_176075(msg_471815);
						var excp_471820 = excp_471817;
						F.line = 36;
						result_471219 = excp_471820;
						break BeforeRet;
						}
						
						var fun_472002 = fun_471802;
						F.line = 46;
						var res_472004 = fun_472002(item_471615);
						var ret_obj_472201 = res_472004;
						if (!(of_py_str_object_175092(ret_obj_472201))) {
						F.line = 157;
						var type_name_472204 = nimCopy(null, ret_obj_472201.pyType.name, NTI138);
						F.line = 158;
						F.line = 158;
						var fmt_res_472207 = mnewString(0);
						F.line = 158;
						if (fmt_res_472207 != null) { fmt_res_472207 = (fmt_res_472207).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_472207 = makeNimstrLit(" returned non-string (type "); };
						F.line = 260;
						if (fmt_res_472207 != null) { fmt_res_472207 = (fmt_res_472207).concat(type_name_472204); } else { fmt_res_472207 = type_name_472204.slice(); };
						F.line = 158;
						if (fmt_res_472207 != null) { fmt_res_472207 = (fmt_res_472207).concat(makeNimstrLit(")")); } else { fmt_res_472207 = makeNimstrLit(")"); };
						var msg_472402 = (makeNimstrLit("__repr__")).concat(fmt_res_472207);
						F.line = 159;
						F.line = 104;
						var excp_472404 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_472404.tk = 3;
						F.line = 106;
						excp_472404.thrown = true;
						F.line = 107;
						excp_472404.msg = new_py_string_176075(msg_472402);
						result_471219 = excp_472404;
						break BeforeRet;
						}
						
						F.line = 48;
						item_repr_471616 = ret_obj_472201;
						F.line = 49;
						var Tmp5 = nimCopy(null, item_repr_471616.str, NTI138);
						if (ss_471403 != null) { ss_471403.push(Tmp5); } else { ss_471403 = [Tmp5]; };
						F.line = 3915;
						i_472421 = addInt(i_472421, 1);
						if (!(((colontmp__472418 != null ? colontmp__472418.length : 0) == l_472423))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 50;
		result_471219 = new_py_string_176075((makeNimstrLit("(")).concat(nsuJoinSep(ss_471403, makeNimstrLit(", ")),makeNimstrLit(")")));
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 383;
		self_471401.reprLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_471219;

}

function len_py_tuple_object_magic_472437(self_no_cast_472439) {
	var result_472440 = null;

	var F={procname:"tupleobject.lenPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_472439.m_type, NTI469070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_472601 = self_no_cast_472439;
		result_472440 = new_py_int_375257((self_472601.items != null ? self_472601.items.length : 0));
	framePtr = F.prev;

	return result_472440;

}

function id_157596(obj_157598) {
	var result_157599 = 0;

	var F={procname:"pyobjectBase.id",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 167;
		result_157599 = obj_157598.id;
	framePtr = F.prev;

	return result_157599;

}

function hash_py_tuple_object_magic_472623(self_no_cast_472625) {
	var result_472626 = null;

	var F={procname:"tupleobject.hashPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_472625.m_type, NTI469070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_472801 = self_no_cast_472625;
		F.line = 57;
		var h_472802 = id_157596(self_472801);
		L1: do {
			F.line = 58;
			var item_472811 = null;
			F.line = 3909;
			var colontmp__472814 = null;
			F.line = 58;
			colontmp__472814 = self_472801.items;
			F.line = 3911;
			var i_472817 = 0;
			F.line = 3912;
			var l_472819 = (colontmp__472814 != null ? colontmp__472814.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_472817 < l_472819)) break L3;
						F.line = 3914;
						item_472811 = colontmp__472814[chckIndx(i_472817, 0, colontmp__472814.length+0-1)-0];
						F.line = 59;
						h_472802 = (h_472802 ^ id_157596(item_472811));
						F.line = 3915;
						i_472817 = addInt(i_472817, 1);
						if (!(((colontmp__472814 != null ? colontmp__472814.length : 0) == l_472819))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 60;
		result_472626 = new_py_int_375257(h_472802);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_472626;

}

function HEX2AHEX3D_379725(x_379730, x_379730_Idx, y_379732) {
	var F={procname:"*=.*=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3796;
		x_379730[x_379730_Idx] = mulInt(x_379730[x_379730_Idx], y_379732);
	framePtr = F.prev;

	
}

function to_int_379674(py_int_379676) {
	var result_379677 = [0];

	var F={procname:"numobjects.toInt",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 493;
			var i_379695 = 0;
			F.line = 2065;
			var colontmp__379749 = 0;
			F.line = 493;
			colontmp__379749 = subInt((py_int_379676.digits != null ? py_int_379676.digits.length : 0), 1);
			F.line = 2077;
			var res_379752 = colontmp__379749;
			L2: do {
				F.line = 2078;
					L3: while (true) {
					if (!(0 <= res_379752)) break L3;
						F.line = 2079;
						i_379695 = res_379752;
						F.line = 494;
						result_379677[0] = (result_379677[0] << 16);
						F.line = 495;
						result_379677[0] = addInt(result_379677[0], ((py_int_379676.digits[chckIndx(i_379695, 0, py_int_379676.digits.length+0-1)-0])|0));
						F.line = 2080;
						res_379752 = subInt(res_379752, 1);
					}
			} while(false);
		} while(false);
		if ((py_int_379676.sign == -1)) {
		F.line = 497;
		HEX2AHEX3D_379725(result_379677, 0, -1);
		}
		
	framePtr = F.prev;

	return result_379677[0];

}

function of_py_slice_object_467109(obj_467042) {
	var result_467111 = false;

	var F={procname:"sliceobject.ofPySliceObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_467111 = (obj_467042.pyType.kind == 15);
	framePtr = F.prev;

	return result_467111;

}

function get_slice_items_468141(slice_468143, src_468146, src_468146_Idx, dest_468147, dest_468147_Idx) {
			var Tmp1;
			var Tmp2;

	var result_468148 = null;

	var F={procname:"sliceobject.getSliceItems",prev:framePtr,filename:"../Objects/sliceobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 39;
		F.line = 39;
		var start_468149 = 0;
		F.line = 39;
		var stop_468150 = 0;
		F.line = 39;
		var step_468151 = 0;
		F.line = 40;
		var step_obj_468152 = slice_468143.step;
		if (of_py_int_object_374315(step_obj_468152)) {
		F.line = 43;
		step_468151 = to_int_379674(step_obj_468152);
		}
		else {
			if (!(of_py_none_object_355076(step_obj_468152))) {
			F.line = 45;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/sliceobject.nim(45, 12) `ofPyNoneObject(stepObj)` "));
			}
			
			F.line = 46;
			step_468151 = 1;
		}
		
		F.line = 54;
		var start_default_468210 = 0;
		F.line = 54;
		var stop_default_468211 = 0;
		if ((0 < step_468151)) {
		F.line = 56;
		start_default_468210 = 0;
		F.line = 57;
		stop_default_468211 = (src_468146[src_468146_Idx] != null ? src_468146[src_468146_Idx].length : 0);
		}
		else {
			F.line = 59;
			start_default_468210 = subInt((src_468146[src_468146_Idx] != null ? src_468146[src_468146_Idx].length : 0), 1);
			F.line = 60;
			stop_default_468211 = -1;
		}
		
		F.line = 48;
		var name_obj_468232 = slice_468143.start;
		if (of_py_int_object_374315(name_obj_468232)) {
		F.line = 50;
		F.line = 752;
		var idx_468245 = to_int_379674(name_obj_468232);
		if ((idx_468245 < 0)) {
		F.line = 754;
		idx_468245 = addInt((src_468146[src_468146_Idx] != null ? src_468146[src_468146_Idx].length : 0), idx_468245);
		}
		
			if ((idx_468245 < 0)) Tmp1 = true; else {				Tmp1 = ((src_468146[src_468146_Idx] != null ? src_468146[src_468146_Idx].length : 0) <= idx_468245);			}		if (Tmp1) {
		F.line = 756;
		var msg_468247 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_468245)+""),makeNimstrLit(", len: "),cstrToNimstr(((src_468146[src_468146_Idx] != null ? src_468146[src_468146_Idx].length : 0))+""));
		F.line = 757;
		F.line = 104;
		var excp_468249 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_468249.tk = 6;
		F.line = 106;
		excp_468249.thrown = true;
		F.line = 107;
		excp_468249.msg = new_py_string_176075(msg_468247);
		result_468148 = excp_468249;
		break BeforeRet;
		}
		
		start_468149 = idx_468245;
		}
		else {
			if (!(of_py_none_object_355076(name_obj_468232))) {
			F.line = 52;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/sliceobject.nim(52, 14) `ofPyNoneObject(nameObj468232)` "));
			}
			
			F.line = 61;
			start_468149 = start_default_468210;
		}
		
		F.line = 48;
		var name_obj_468404 = slice_468143.stop;
		if (of_py_int_object_374315(name_obj_468404)) {
		F.line = 50;
		F.line = 752;
		var idx_468417 = to_int_379674(name_obj_468404);
		if ((idx_468417 < 0)) {
		F.line = 754;
		idx_468417 = addInt((src_468146[src_468146_Idx] != null ? src_468146[src_468146_Idx].length : 0), idx_468417);
		}
		
			if ((idx_468417 < 0)) Tmp2 = true; else {				Tmp2 = ((src_468146[src_468146_Idx] != null ? src_468146[src_468146_Idx].length : 0) <= idx_468417);			}		if (Tmp2) {
		F.line = 756;
		var msg_468419 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_468417)+""),makeNimstrLit(", len: "),cstrToNimstr(((src_468146[src_468146_Idx] != null ? src_468146[src_468146_Idx].length : 0))+""));
		F.line = 757;
		F.line = 104;
		var excp_468421 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_468421.tk = 6;
		F.line = 106;
		excp_468421.thrown = true;
		F.line = 107;
		excp_468421.msg = new_py_string_176075(msg_468419);
		result_468148 = excp_468421;
		break BeforeRet;
		}
		
		stop_468150 = idx_468417;
		}
		else {
			if (!(of_py_none_object_355076(name_obj_468404))) {
			F.line = 52;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/sliceobject.nim(52, 14) `ofPyNoneObject(nameObj468404)` "));
			}
			
			F.line = 62;
			stop_468150 = stop_default_468211;
		}
		
		if ((0 < step_468151)) {
		L3: do {
			F.line = 65;
				L4: while (true) {
				if (!(start_468149 < stop_468150)) break L4;
					F.line = 66;
					if (dest_468147[dest_468147_Idx] != null) { dest_468147[dest_468147_Idx].push(src_468146[src_468146_Idx][chckIndx(start_468149, 0, src_468146[src_468146_Idx].length+0-1)-0]); } else { dest_468147[dest_468147_Idx] = [src_468146[src_468146_Idx][chckIndx(start_468149, 0, src_468146[src_468146_Idx].length+0-1)-0]]; };
					F.line = 67;
					start_468149 = addInt(start_468149, step_468151);
				}
		} while(false);
		}
		else {
			L5: do {
				F.line = 69;
					L6: while (true) {
					if (!(stop_468150 < start_468149)) break L6;
						F.line = 70;
						if (dest_468147[dest_468147_Idx] != null) { dest_468147[dest_468147_Idx].push(src_468146[src_468146_Idx][chckIndx(start_468149, 0, src_468146[src_468146_Idx].length+0-1)-0]); } else { dest_468147[dest_468147_Idx] = [src_468146[src_468146_Idx][chckIndx(start_468149, 0, src_468146[src_468146_Idx].length+0-1)-0]]; };
						F.line = 71;
						start_468149 = addInt(start_468149, step_468151);
					}
			} while(false);
		}
		
		result_468148 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_468148;

}

function getitem_py_tuple_object_magic_472833(self_no_cast_472835, other_472836) {
			var Tmp1;
			var Tmp2;

	var result_472837 = null;

	var F={procname:"tupleobject.getitemPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_472835.m_type, NTI469070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_473001 = self_no_cast_472835;
		if (of_py_int_object_374315(other_472836)) {
		F.line = 65;
		F.line = 752;
		var idx_473014 = to_int_379674(other_472836);
		if ((idx_473014 < 0)) {
		F.line = 754;
		idx_473014 = addInt((self_473001.items != null ? self_473001.items.length : 0), idx_473014);
		}
		
			if ((idx_473014 < 0)) Tmp1 = true; else {				Tmp1 = ((self_473001.items != null ? self_473001.items.length : 0) <= idx_473014);			}		if (Tmp1) {
		F.line = 756;
		var msg_473016 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_473014)+""),makeNimstrLit(", len: "),cstrToNimstr(((self_473001.items != null ? self_473001.items.length : 0))+""));
		F.line = 757;
		F.line = 104;
		var excp_473018 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_473018.tk = 6;
		F.line = 106;
		excp_473018.thrown = true;
		F.line = 107;
		excp_473018.msg = new_py_string_176075(msg_473016);
		result_472837 = excp_473018;
		break BeforeRet;
		}
		
		var idx_473020 = idx_473014;
		F.line = 66;
		result_472837 = self_473001.items[chckIndx(idx_473020, 0, self_473001.items.length+0-1)-0];
		break BeforeRet;
		}
		
		if (of_py_slice_object_467109(other_472836)) {
		F.line = 68;
		var slice_473021 = other_472836;
		F.line = 69;
		var new_list_473022 = new_py_tuple_simple_469201();
		F.line = 70;
		var ret_obj_473025 = get_slice_items_468141(slice_473021, self_473001, "items", new_list_473022, "items");
			if (of_py_exception_object_358259(ret_obj_473025)) {
			Tmp2 = ret_obj_473025.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 72;
		result_472837 = ret_obj_473025;
		break BeforeRet;
		}
		else {
			F.line = 74;
			result_472837 = new_list_473022;
			break BeforeRet;
		}
		
		}
		
		F.line = 76;
		F.line = 129;
		var name_473032 = other_472836.pyType.name;
		F.line = 130;
		var msg_473034 = (makeNimstrLit("tuple indices must be integers or slices, not ")).concat(name_473032);
		F.line = 104;
		var excp_473036 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_473036.tk = 3;
		F.line = 106;
		excp_473036.thrown = true;
		F.line = 107;
		excp_473036.msg = new_py_string_176075(msg_473034);
		result_472837 = excp_473036;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_472837;

}

function is_stop_iter_373851(obj_373853) {
		var Tmp1;

	var result_373854 = false;

	var F={procname:"exceptions.isStopIter",prev:framePtr,filename:"../Objects/exceptions.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(of_py_exception_object_358259(obj_373853))) {
		F.line = 136;
		result_373854 = false;
		break BeforeRet;
		}
		
		F.line = 137;
		var excp_373855 = obj_373853;
		F.line = 138;
		if (!(excp_373855.tk == 7)) Tmp1 = false; else {			Tmp1 = excp_373855.thrown;		}		result_373854 = Tmp1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_373854;

}

function init_py_tuple_object_magic_473053(self_no_cast_473055, args_473072) {
			var Tmp1;
						var Tmp4;

	var result_473073 = null;

	var F={procname:"tupleobject.initPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_473072 != null ? args_473072.length : 0) == 1))) {
		F.line = 183;
		var msg_473085 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_473090 = mnewString(0);
		F.line = 185;
		if (fmt_res_473090 != null) { fmt_res_473090 = (fmt_res_473090).concat(makeNimstrLit(" argument (")); } else { fmt_res_473090 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_473090 != null) { fmt_res_473090 = (fmt_res_473090).concat(cstrToNimstr(((args_473072 != null ? args_473072.length : 0))+"")); } else { fmt_res_473090 = cstrToNimstr(((args_473072 != null ? args_473072.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_473090 != null) { fmt_res_473090 = (fmt_res_473090).concat(makeNimstrLit(" given)")); } else { fmt_res_473090 = makeNimstrLit(" given)"); };
		msg_473085 = nimCopy(null, (makeNimstrLit("init takes exactly 1")).concat(fmt_res_473090), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_473210 = mnewString(0);
			F.line = 187;
			if (fmt_res_473210 != null) { fmt_res_473210 = (fmt_res_473210).concat(makeNimstrLit(" argument (")); } else { fmt_res_473210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_473210 != null) { fmt_res_473210 = (fmt_res_473210).concat(cstrToNimstr(((args_473072 != null ? args_473072.length : 0))+"")); } else { fmt_res_473210 = cstrToNimstr(((args_473072 != null ? args_473072.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_473210 != null) { fmt_res_473210 = (fmt_res_473210).concat(makeNimstrLit(" given)")); } else { fmt_res_473210 = makeNimstrLit(" given)"); };
			msg_473085 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_473210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_473409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_473409.tk = 3;
		F.line = 106;
		excp_473409.thrown = true;
		F.line = 107;
		excp_473409.msg = new_py_string_176075(msg_473085);
		result_473073 = excp_473409;
		break BeforeRet;
		}
		
		F.line = 230;
		var may_be_iterable_473411 = args_473072[chckIndx(0, 0, args_473072.length+0-1)-0];
		if (!(isObj(self_no_cast_473055.m_type, NTI469070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_473601 = self_no_cast_473055;
		F.line = 80;
		F.line = 170;
		var iter_func_473611 = may_be_iterable_473411.pyType.magicMethods.Field36;
		if ((iter_func_473611 === null)) {
		F.line = 172;
		var msg_473619 = (may_be_iterable_473411.pyType.name).concat(makeNimstrLit(" object is not iterable"));
		F.line = 173;
		F.line = 104;
		var excp_473621 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_473621.tk = 3;
		F.line = 106;
		excp_473621.thrown = true;
		F.line = 107;
		excp_473621.msg = new_py_string_176075(msg_473619);
		result_473073 = excp_473621;
		break BeforeRet;
		}
		
		F.line = 174;
		var iter_obj_473624 = iter_func_473611(may_be_iterable_473411);
		if ((iter_obj_473624.pyType.magicMethods.Field37 === null)) {
		F.line = 176;
		F.line = 176;
		var fmt_res_473633 = mnewString(0);
		F.line = 176;
		if (fmt_res_473633 != null) { fmt_res_473633 = (fmt_res_473633).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_473633 = makeNimstrLit("iter() returned non-iterator of type "); };
		var msg_473635 = (fmt_res_473633).concat(iter_obj_473624.pyType.name);
		F.line = 177;
		F.line = 104;
		var excp_473637 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_473637.tk = 3;
		F.line = 106;
		excp_473637.thrown = true;
		F.line = 107;
		excp_473637.msg = new_py_string_176075(msg_473635);
		result_473073 = excp_473637;
		break BeforeRet;
		}
		
		var iterable_473639 = iter_obj_473624;
			if (of_py_exception_object_358259(iterable_473639)) {
			Tmp1 = iterable_473639.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 82;
		result_473073 = iterable_473639;
		break BeforeRet;
		}
		
		F.line = 83;
		var next_method_473640 = iterable_473639.pyType.magicMethods.Field37;
		F.line = 84;
		var new_tuple_473641 = new_py_tuple_simple_469201();
		L2: do {
			F.line = 85;
				L3: while (true) {
				if (!true) break L3;
					F.line = 86;
					var next_obj_473642 = next_method_473640(iterable_473639);
					if (is_stop_iter_373851(next_obj_473642)) {
					F.line = 88;
					break L2;
					}
					
						if (of_py_exception_object_358259(next_obj_473642)) {
						Tmp4 = next_obj_473642.thrown;
						}
						else {
						Tmp4 = false;
						}
						
					if (Tmp4) {
					F.line = 90;
					result_473073 = next_obj_473642;
					break BeforeRet;
					}
					
					F.line = 91;
					if (self_473601.items != null) { self_473601.items.push(next_obj_473642); } else { self_473601.items = [next_obj_473642]; };
				}
		} while(false);
		result_473073 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_473073;

}
py_tuple_object_type_469080.magicMethods.Field18 = eq_py_tuple_object_magic_470075;
py_tuple_object_type_469080.magicMethods.Field36 = iter_py_tuple_object_magic_471022;
py_tuple_object_type_469080.magicMethods.Field25 = repr_py_tuple_object_magic_471216;
py_tuple_object_type_469080.magicMethods.Field23 = len_py_tuple_object_magic_472437;
py_tuple_object_type_469080.magicMethods.Field30 = hash_py_tuple_object_magic_472623;
py_tuple_object_type_469080.magicMethods.Field32 = getitem_py_tuple_object_magic_472833;
py_tuple_object_type_469080.magicMethods.Field27 = init_py_tuple_object_magic_473053;

function repr_py_base_error_object_magic_478314(self_no_cast_478316) {
				var Tmp1;

	var result_478317 = null;

	var F={procname:"exceptionsImpl.reprPyBaseErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_478316.m_type, NTI357244))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBaseErrorObject` "));
		}
		
		F.line = 438;
		var self_478401 = self_no_cast_478316;
		F.line = 23;
		var msg_478403 = null;
		if ((self_478401.msg === null)) {
		F.line = 25;
		msg_478403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_478401.msg)) {
		F.line = 27;
		msg_478403 = nimCopy(null, self_478401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_478401.msg.pyType === null)) {
			F.line = 2895;
			var e_478437 = null;
			F.line = 2896;
			e_478437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_478437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_478437.parent = null;
			F.line = 26;
			raiseException(e_478437, "InternalError");
			}
			
			F.line = 27;
			var fun_478602 = self_478401.msg.pyType.magicMethods.Field25;
			if ((fun_478602 === null)) {
			F.line = 29;
			var obj_type_str_478611 = self_478401.msg.pyType.name;
			F.line = 30;
			var method_str_478613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_478615 = (makeNimstrLit("No ")).concat(method_str_478613,makeNimstrLit(" method for "),obj_type_str_478611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_478617 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_478617.tk = 3;
			F.line = 106;
			excp_478617.thrown = true;
			F.line = 107;
			excp_478617.msg = new_py_string_176075(msg_478615);
			var excp_478620 = excp_478617;
			F.line = 36;
			result_478317 = excp_478620;
			break BeforeRet;
			}
			
			var fun_478802 = fun_478602;
			F.line = 46;
			var res_478804 = fun_478802(self_478401.msg);
			var msg_obj_479002 = res_478804;
				if (of_py_exception_object_358259(msg_obj_479002)) {
				Tmp1 = msg_obj_479002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_478403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_478403 = nimCopy(null, msg_obj_479002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_479010 = (reprEnum(self_478401.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_478403);
		result_478317 = new_py_string_176075(str_479010);
	} while (false);
	framePtr = F.prev;

	return result_478317;

}

function new_py_tuple_470057(items_470060) {
	var result_470061 = null;

	var F={procname:"tupleobject.newPyTuple",prev:framePtr,filename:"../Objects/tupleobject.nim",line:0};
	framePtr = F;
		F.line = 15;
		result_470061 = new_py_tuple_simple_469201();
		F.line = 17;
		result_470061.items = nimCopy(null, items_470060, NTI470059);
	framePtr = F.prev;

	return result_470061;

}

function new_py_base_error_object_magic_479026(args_479041) {
	var result_479042 = null;

	var F={procname:"exceptionsImpl.newPyBaseErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_479044 = new_py_base_error_simple_357401();
		F.line = 41;
		excp_479044.tk = 0;
		F.line = 42;
		excp_479044.msg = new_py_tuple_470057(args_479041);
		result_479042 = excp_479044;
	framePtr = F.prev;

	return result_479042;

}

function repr_py_name_error_object_magic_479059(self_no_cast_479061) {
				var Tmp1;

	var result_479062 = null;

	var F={procname:"exceptionsImpl.reprPyNameErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_479061.m_type, NTI358415))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNameErrorObject` "));
		}
		
		F.line = 438;
		var self_479201 = self_no_cast_479061;
		F.line = 23;
		var msg_479203 = null;
		if ((self_479201.msg === null)) {
		F.line = 25;
		msg_479203 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_479201.msg)) {
		F.line = 27;
		msg_479203 = nimCopy(null, self_479201.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_479201.msg.pyType === null)) {
			F.line = 2895;
			var e_479237 = null;
			F.line = 2896;
			e_479237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_479237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_479237.parent = null;
			F.line = 26;
			raiseException(e_479237, "InternalError");
			}
			
			F.line = 27;
			var fun_479402 = self_479201.msg.pyType.magicMethods.Field25;
			if ((fun_479402 === null)) {
			F.line = 29;
			var obj_type_str_479411 = self_479201.msg.pyType.name;
			F.line = 30;
			var method_str_479413 = makeNimstrLit("repr");
			F.line = 31;
			var msg_479415 = (makeNimstrLit("No ")).concat(method_str_479413,makeNimstrLit(" method for "),obj_type_str_479411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_479417 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_479417.tk = 3;
			F.line = 106;
			excp_479417.thrown = true;
			F.line = 107;
			excp_479417.msg = new_py_string_176075(msg_479415);
			var excp_479420 = excp_479417;
			F.line = 36;
			result_479062 = excp_479420;
			break BeforeRet;
			}
			
			var fun_479602 = fun_479402;
			F.line = 46;
			var res_479604 = fun_479602(self_479201.msg);
			var msg_obj_479802 = res_479604;
				if (of_py_exception_object_358259(msg_obj_479802)) {
				Tmp1 = msg_obj_479802.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_479203 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_479203 = nimCopy(null, msg_obj_479802.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_479810 = (reprEnum(self_479201.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_479203);
		result_479062 = new_py_string_176075(str_479810);
	} while (false);
	framePtr = F.prev;

	return result_479062;

}

function new_py_name_error_object_magic_479826(args_479841) {
	var result_479842 = null;

	var F={procname:"exceptionsImpl.newPyNameErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_479844 = new_py_name_error_simple_358601();
		F.line = 41;
		excp_479844.tk = 1;
		F.line = 42;
		excp_479844.msg = new_py_tuple_470057(args_479841);
		result_479842 = excp_479844;
	framePtr = F.prev;

	return result_479842;

}

function repr_py_not_implemented_error_object_magic_479859(self_no_cast_479861) {
				var Tmp1;

	var result_479862 = null;

	var F={procname:"exceptionsImpl.reprPyNotImplementedErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_479861.m_type, NTI359501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNotImplementedErrorObject` "));
		}
		
		F.line = 438;
		var self_480001 = self_no_cast_479861;
		F.line = 23;
		var msg_480003 = null;
		if ((self_480001.msg === null)) {
		F.line = 25;
		msg_480003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_480001.msg)) {
		F.line = 27;
		msg_480003 = nimCopy(null, self_480001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_480001.msg.pyType === null)) {
			F.line = 2895;
			var e_480037 = null;
			F.line = 2896;
			e_480037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_480037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_480037.parent = null;
			F.line = 26;
			raiseException(e_480037, "InternalError");
			}
			
			F.line = 27;
			var fun_480202 = self_480001.msg.pyType.magicMethods.Field25;
			if ((fun_480202 === null)) {
			F.line = 29;
			var obj_type_str_480211 = self_480001.msg.pyType.name;
			F.line = 30;
			var method_str_480213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_480215 = (makeNimstrLit("No ")).concat(method_str_480213,makeNimstrLit(" method for "),obj_type_str_480211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_480217 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_480217.tk = 3;
			F.line = 106;
			excp_480217.thrown = true;
			F.line = 107;
			excp_480217.msg = new_py_string_176075(msg_480215);
			var excp_480220 = excp_480217;
			F.line = 36;
			result_479862 = excp_480220;
			break BeforeRet;
			}
			
			var fun_480402 = fun_480202;
			F.line = 46;
			var res_480404 = fun_480402(self_480001.msg);
			var msg_obj_480602 = res_480404;
				if (of_py_exception_object_358259(msg_obj_480602)) {
				Tmp1 = msg_obj_480602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_480003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_480003 = nimCopy(null, msg_obj_480602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_480610 = (reprEnum(self_480001.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_480003);
		result_479862 = new_py_string_176075(str_480610);
	} while (false);
	framePtr = F.prev;

	return result_479862;

}

function new_py_not_implemented_error_object_magic_480626(args_480641) {
	var result_480642 = null;

	var F={procname:"exceptionsImpl.newPyNotImplementedErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_480644 = new_py_not_implemented_error_simple_359601();
		F.line = 41;
		excp_480644.tk = 2;
		F.line = 42;
		excp_480644.msg = new_py_tuple_470057(args_480641);
		result_480642 = excp_480644;
	framePtr = F.prev;

	return result_480642;

}

function repr_py_type_error_object_magic_480659(self_no_cast_480661) {
				var Tmp1;

	var result_480662 = null;

	var F={procname:"exceptionsImpl.reprPyTypeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_480661.m_type, NTI360501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeErrorObject` "));
		}
		
		F.line = 438;
		var self_480801 = self_no_cast_480661;
		F.line = 23;
		var msg_480803 = null;
		if ((self_480801.msg === null)) {
		F.line = 25;
		msg_480803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_480801.msg)) {
		F.line = 27;
		msg_480803 = nimCopy(null, self_480801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_480801.msg.pyType === null)) {
			F.line = 2895;
			var e_480837 = null;
			F.line = 2896;
			e_480837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_480837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_480837.parent = null;
			F.line = 26;
			raiseException(e_480837, "InternalError");
			}
			
			F.line = 27;
			var fun_481002 = self_480801.msg.pyType.magicMethods.Field25;
			if ((fun_481002 === null)) {
			F.line = 29;
			var obj_type_str_481011 = self_480801.msg.pyType.name;
			F.line = 30;
			var method_str_481013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_481015 = (makeNimstrLit("No ")).concat(method_str_481013,makeNimstrLit(" method for "),obj_type_str_481011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_481017 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_481017.tk = 3;
			F.line = 106;
			excp_481017.thrown = true;
			F.line = 107;
			excp_481017.msg = new_py_string_176075(msg_481015);
			var excp_481020 = excp_481017;
			F.line = 36;
			result_480662 = excp_481020;
			break BeforeRet;
			}
			
			var fun_481202 = fun_481002;
			F.line = 46;
			var res_481204 = fun_481202(self_480801.msg);
			var msg_obj_481402 = res_481204;
				if (of_py_exception_object_358259(msg_obj_481402)) {
				Tmp1 = msg_obj_481402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_480803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_480803 = nimCopy(null, msg_obj_481402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_481410 = (reprEnum(self_480801.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_480803);
		result_480662 = new_py_string_176075(str_481410);
	} while (false);
	framePtr = F.prev;

	return result_480662;

}

function new_py_type_error_object_magic_481426(args_481441) {
	var result_481442 = null;

	var F={procname:"exceptionsImpl.newPyTypeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_481444 = new_py_type_error_simple_360601();
		F.line = 41;
		excp_481444.tk = 3;
		F.line = 42;
		excp_481444.msg = new_py_tuple_470057(args_481441);
		result_481442 = excp_481444;
	framePtr = F.prev;

	return result_481442;

}

function repr_py_attribute_error_object_magic_481459(self_no_cast_481461) {
				var Tmp1;

	var result_481462 = null;

	var F={procname:"exceptionsImpl.reprPyAttributeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_481461.m_type, NTI361501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyAttributeErrorObject` "));
		}
		
		F.line = 438;
		var self_481601 = self_no_cast_481461;
		F.line = 23;
		var msg_481603 = null;
		if ((self_481601.msg === null)) {
		F.line = 25;
		msg_481603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_481601.msg)) {
		F.line = 27;
		msg_481603 = nimCopy(null, self_481601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_481601.msg.pyType === null)) {
			F.line = 2895;
			var e_481637 = null;
			F.line = 2896;
			e_481637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_481637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_481637.parent = null;
			F.line = 26;
			raiseException(e_481637, "InternalError");
			}
			
			F.line = 27;
			var fun_481802 = self_481601.msg.pyType.magicMethods.Field25;
			if ((fun_481802 === null)) {
			F.line = 29;
			var obj_type_str_481811 = self_481601.msg.pyType.name;
			F.line = 30;
			var method_str_481813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_481815 = (makeNimstrLit("No ")).concat(method_str_481813,makeNimstrLit(" method for "),obj_type_str_481811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_481817 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_481817.tk = 3;
			F.line = 106;
			excp_481817.thrown = true;
			F.line = 107;
			excp_481817.msg = new_py_string_176075(msg_481815);
			var excp_481820 = excp_481817;
			F.line = 36;
			result_481462 = excp_481820;
			break BeforeRet;
			}
			
			var fun_482002 = fun_481802;
			F.line = 46;
			var res_482004 = fun_482002(self_481601.msg);
			var msg_obj_482202 = res_482004;
				if (of_py_exception_object_358259(msg_obj_482202)) {
				Tmp1 = msg_obj_482202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_481603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_481603 = nimCopy(null, msg_obj_482202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_482210 = (reprEnum(self_481601.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_481603);
		result_481462 = new_py_string_176075(str_482210);
	} while (false);
	framePtr = F.prev;

	return result_481462;

}

function new_py_attribute_error_object_magic_482226(args_482241) {
	var result_482242 = null;

	var F={procname:"exceptionsImpl.newPyAttributeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_482244 = new_py_attribute_error_simple_361601();
		F.line = 41;
		excp_482244.tk = 4;
		F.line = 42;
		excp_482244.msg = new_py_tuple_470057(args_482241);
		result_482242 = excp_482244;
	framePtr = F.prev;

	return result_482242;

}

function repr_py_value_error_object_magic_482259(self_no_cast_482261) {
				var Tmp1;

	var result_482262 = null;

	var F={procname:"exceptionsImpl.reprPyValueErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_482261.m_type, NTI362501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyValueErrorObject` "));
		}
		
		F.line = 438;
		var self_482401 = self_no_cast_482261;
		F.line = 23;
		var msg_482403 = null;
		if ((self_482401.msg === null)) {
		F.line = 25;
		msg_482403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_482401.msg)) {
		F.line = 27;
		msg_482403 = nimCopy(null, self_482401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_482401.msg.pyType === null)) {
			F.line = 2895;
			var e_482437 = null;
			F.line = 2896;
			e_482437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_482437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_482437.parent = null;
			F.line = 26;
			raiseException(e_482437, "InternalError");
			}
			
			F.line = 27;
			var fun_482602 = self_482401.msg.pyType.magicMethods.Field25;
			if ((fun_482602 === null)) {
			F.line = 29;
			var obj_type_str_482611 = self_482401.msg.pyType.name;
			F.line = 30;
			var method_str_482613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_482615 = (makeNimstrLit("No ")).concat(method_str_482613,makeNimstrLit(" method for "),obj_type_str_482611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_482617 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_482617.tk = 3;
			F.line = 106;
			excp_482617.thrown = true;
			F.line = 107;
			excp_482617.msg = new_py_string_176075(msg_482615);
			var excp_482620 = excp_482617;
			F.line = 36;
			result_482262 = excp_482620;
			break BeforeRet;
			}
			
			var fun_482802 = fun_482602;
			F.line = 46;
			var res_482804 = fun_482802(self_482401.msg);
			var msg_obj_483002 = res_482804;
				if (of_py_exception_object_358259(msg_obj_483002)) {
				Tmp1 = msg_obj_483002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_482403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_482403 = nimCopy(null, msg_obj_483002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_483010 = (reprEnum(self_482401.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_482403);
		result_482262 = new_py_string_176075(str_483010);
	} while (false);
	framePtr = F.prev;

	return result_482262;

}

function new_py_value_error_object_magic_483026(args_483041) {
	var result_483042 = null;

	var F={procname:"exceptionsImpl.newPyValueErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_483044 = new_py_value_error_simple_362601();
		F.line = 41;
		excp_483044.tk = 5;
		F.line = 42;
		excp_483044.msg = new_py_tuple_470057(args_483041);
		result_483042 = excp_483044;
	framePtr = F.prev;

	return result_483042;

}

function repr_py_index_error_object_magic_483059(self_no_cast_483061) {
				var Tmp1;

	var result_483062 = null;

	var F={procname:"exceptionsImpl.reprPyIndexErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_483061.m_type, NTI363501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIndexErrorObject` "));
		}
		
		F.line = 438;
		var self_483201 = self_no_cast_483061;
		F.line = 23;
		var msg_483203 = null;
		if ((self_483201.msg === null)) {
		F.line = 25;
		msg_483203 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_483201.msg)) {
		F.line = 27;
		msg_483203 = nimCopy(null, self_483201.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_483201.msg.pyType === null)) {
			F.line = 2895;
			var e_483237 = null;
			F.line = 2896;
			e_483237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_483237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_483237.parent = null;
			F.line = 26;
			raiseException(e_483237, "InternalError");
			}
			
			F.line = 27;
			var fun_483402 = self_483201.msg.pyType.magicMethods.Field25;
			if ((fun_483402 === null)) {
			F.line = 29;
			var obj_type_str_483411 = self_483201.msg.pyType.name;
			F.line = 30;
			var method_str_483413 = makeNimstrLit("repr");
			F.line = 31;
			var msg_483415 = (makeNimstrLit("No ")).concat(method_str_483413,makeNimstrLit(" method for "),obj_type_str_483411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_483417 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_483417.tk = 3;
			F.line = 106;
			excp_483417.thrown = true;
			F.line = 107;
			excp_483417.msg = new_py_string_176075(msg_483415);
			var excp_483420 = excp_483417;
			F.line = 36;
			result_483062 = excp_483420;
			break BeforeRet;
			}
			
			var fun_483602 = fun_483402;
			F.line = 46;
			var res_483604 = fun_483602(self_483201.msg);
			var msg_obj_483802 = res_483604;
				if (of_py_exception_object_358259(msg_obj_483802)) {
				Tmp1 = msg_obj_483802.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_483203 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_483203 = nimCopy(null, msg_obj_483802.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_483810 = (reprEnum(self_483201.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_483203);
		result_483062 = new_py_string_176075(str_483810);
	} while (false);
	framePtr = F.prev;

	return result_483062;

}

function new_py_index_error_object_magic_483826(args_483841) {
	var result_483842 = null;

	var F={procname:"exceptionsImpl.newPyIndexErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_483844 = new_py_index_error_simple_363601();
		F.line = 41;
		excp_483844.tk = 6;
		F.line = 42;
		excp_483844.msg = new_py_tuple_470057(args_483841);
		result_483842 = excp_483844;
	framePtr = F.prev;

	return result_483842;

}

function repr_py_stop_iter_error_object_magic_483859(self_no_cast_483861) {
				var Tmp1;

	var result_483862 = null;

	var F={procname:"exceptionsImpl.reprPyStopIterErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_483861.m_type, NTI364501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStopIterErrorObject` "));
		}
		
		F.line = 438;
		var self_484001 = self_no_cast_483861;
		F.line = 23;
		var msg_484003 = null;
		if ((self_484001.msg === null)) {
		F.line = 25;
		msg_484003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_484001.msg)) {
		F.line = 27;
		msg_484003 = nimCopy(null, self_484001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_484001.msg.pyType === null)) {
			F.line = 2895;
			var e_484037 = null;
			F.line = 2896;
			e_484037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_484037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_484037.parent = null;
			F.line = 26;
			raiseException(e_484037, "InternalError");
			}
			
			F.line = 27;
			var fun_484202 = self_484001.msg.pyType.magicMethods.Field25;
			if ((fun_484202 === null)) {
			F.line = 29;
			var obj_type_str_484211 = self_484001.msg.pyType.name;
			F.line = 30;
			var method_str_484213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_484215 = (makeNimstrLit("No ")).concat(method_str_484213,makeNimstrLit(" method for "),obj_type_str_484211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_484217 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_484217.tk = 3;
			F.line = 106;
			excp_484217.thrown = true;
			F.line = 107;
			excp_484217.msg = new_py_string_176075(msg_484215);
			var excp_484220 = excp_484217;
			F.line = 36;
			result_483862 = excp_484220;
			break BeforeRet;
			}
			
			var fun_484402 = fun_484202;
			F.line = 46;
			var res_484404 = fun_484402(self_484001.msg);
			var msg_obj_484602 = res_484404;
				if (of_py_exception_object_358259(msg_obj_484602)) {
				Tmp1 = msg_obj_484602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_484003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_484003 = nimCopy(null, msg_obj_484602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_484610 = (reprEnum(self_484001.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_484003);
		result_483862 = new_py_string_176075(str_484610);
	} while (false);
	framePtr = F.prev;

	return result_483862;

}

function new_py_stop_iter_error_object_magic_484626(args_484641) {
	var result_484642 = null;

	var F={procname:"exceptionsImpl.newPyStopIterErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_484644 = new_py_stop_iter_error_simple_364601();
		F.line = 41;
		excp_484644.tk = 7;
		F.line = 42;
		excp_484644.msg = new_py_tuple_470057(args_484641);
		result_484642 = excp_484644;
	framePtr = F.prev;

	return result_484642;

}

function repr_py_lock_error_object_magic_484659(self_no_cast_484661) {
				var Tmp1;

	var result_484662 = null;

	var F={procname:"exceptionsImpl.reprPyLockErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_484661.m_type, NTI365501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyLockErrorObject` "));
		}
		
		F.line = 438;
		var self_484801 = self_no_cast_484661;
		F.line = 23;
		var msg_484803 = null;
		if ((self_484801.msg === null)) {
		F.line = 25;
		msg_484803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_484801.msg)) {
		F.line = 27;
		msg_484803 = nimCopy(null, self_484801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_484801.msg.pyType === null)) {
			F.line = 2895;
			var e_484837 = null;
			F.line = 2896;
			e_484837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_484837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_484837.parent = null;
			F.line = 26;
			raiseException(e_484837, "InternalError");
			}
			
			F.line = 27;
			var fun_485002 = self_484801.msg.pyType.magicMethods.Field25;
			if ((fun_485002 === null)) {
			F.line = 29;
			var obj_type_str_485011 = self_484801.msg.pyType.name;
			F.line = 30;
			var method_str_485013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_485015 = (makeNimstrLit("No ")).concat(method_str_485013,makeNimstrLit(" method for "),obj_type_str_485011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_485017 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_485017.tk = 3;
			F.line = 106;
			excp_485017.thrown = true;
			F.line = 107;
			excp_485017.msg = new_py_string_176075(msg_485015);
			var excp_485020 = excp_485017;
			F.line = 36;
			result_484662 = excp_485020;
			break BeforeRet;
			}
			
			var fun_485202 = fun_485002;
			F.line = 46;
			var res_485204 = fun_485202(self_484801.msg);
			var msg_obj_485402 = res_485204;
				if (of_py_exception_object_358259(msg_obj_485402)) {
				Tmp1 = msg_obj_485402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_484803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_484803 = nimCopy(null, msg_obj_485402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_485410 = (reprEnum(self_484801.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_484803);
		result_484662 = new_py_string_176075(str_485410);
	} while (false);
	framePtr = F.prev;

	return result_484662;

}

function new_py_lock_error_object_magic_485426(args_485441) {
	var result_485442 = null;

	var F={procname:"exceptionsImpl.newPyLockErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_485444 = new_py_lock_error_simple_365601();
		F.line = 41;
		excp_485444.tk = 8;
		F.line = 42;
		excp_485444.msg = new_py_tuple_470057(args_485441);
		result_485442 = excp_485444;
	framePtr = F.prev;

	return result_485442;

}

function repr_py_import_error_object_magic_485459(self_no_cast_485461) {
				var Tmp1;

	var result_485462 = null;

	var F={procname:"exceptionsImpl.reprPyImportErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_485461.m_type, NTI366501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyImportErrorObject` "));
		}
		
		F.line = 438;
		var self_485601 = self_no_cast_485461;
		F.line = 23;
		var msg_485603 = null;
		if ((self_485601.msg === null)) {
		F.line = 25;
		msg_485603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_485601.msg)) {
		F.line = 27;
		msg_485603 = nimCopy(null, self_485601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_485601.msg.pyType === null)) {
			F.line = 2895;
			var e_485637 = null;
			F.line = 2896;
			e_485637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_485637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_485637.parent = null;
			F.line = 26;
			raiseException(e_485637, "InternalError");
			}
			
			F.line = 27;
			var fun_485802 = self_485601.msg.pyType.magicMethods.Field25;
			if ((fun_485802 === null)) {
			F.line = 29;
			var obj_type_str_485811 = self_485601.msg.pyType.name;
			F.line = 30;
			var method_str_485813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_485815 = (makeNimstrLit("No ")).concat(method_str_485813,makeNimstrLit(" method for "),obj_type_str_485811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_485817 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_485817.tk = 3;
			F.line = 106;
			excp_485817.thrown = true;
			F.line = 107;
			excp_485817.msg = new_py_string_176075(msg_485815);
			var excp_485820 = excp_485817;
			F.line = 36;
			result_485462 = excp_485820;
			break BeforeRet;
			}
			
			var fun_486002 = fun_485802;
			F.line = 46;
			var res_486004 = fun_486002(self_485601.msg);
			var msg_obj_486202 = res_486004;
				if (of_py_exception_object_358259(msg_obj_486202)) {
				Tmp1 = msg_obj_486202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_485603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_485603 = nimCopy(null, msg_obj_486202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_486210 = (reprEnum(self_485601.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_485603);
		result_485462 = new_py_string_176075(str_486210);
	} while (false);
	framePtr = F.prev;

	return result_485462;

}

function new_py_import_error_object_magic_486226(args_486241) {
	var result_486242 = null;

	var F={procname:"exceptionsImpl.newPyImportErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_486244 = new_py_import_error_simple_366601();
		F.line = 41;
		excp_486244.tk = 9;
		F.line = 42;
		excp_486244.msg = new_py_tuple_470057(args_486241);
		result_486242 = excp_486244;
	framePtr = F.prev;

	return result_486242;

}

function repr_py_unbound_local_error_object_magic_486259(self_no_cast_486261) {
				var Tmp1;

	var result_486262 = null;

	var F={procname:"exceptionsImpl.reprPyUnboundLocalErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_486261.m_type, NTI367501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyUnboundLocalErrorObject` "));
		}
		
		F.line = 438;
		var self_486401 = self_no_cast_486261;
		F.line = 23;
		var msg_486403 = null;
		if ((self_486401.msg === null)) {
		F.line = 25;
		msg_486403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_486401.msg)) {
		F.line = 27;
		msg_486403 = nimCopy(null, self_486401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_486401.msg.pyType === null)) {
			F.line = 2895;
			var e_486437 = null;
			F.line = 2896;
			e_486437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_486437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_486437.parent = null;
			F.line = 26;
			raiseException(e_486437, "InternalError");
			}
			
			F.line = 27;
			var fun_486602 = self_486401.msg.pyType.magicMethods.Field25;
			if ((fun_486602 === null)) {
			F.line = 29;
			var obj_type_str_486611 = self_486401.msg.pyType.name;
			F.line = 30;
			var method_str_486613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_486615 = (makeNimstrLit("No ")).concat(method_str_486613,makeNimstrLit(" method for "),obj_type_str_486611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_486617 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_486617.tk = 3;
			F.line = 106;
			excp_486617.thrown = true;
			F.line = 107;
			excp_486617.msg = new_py_string_176075(msg_486615);
			var excp_486620 = excp_486617;
			F.line = 36;
			result_486262 = excp_486620;
			break BeforeRet;
			}
			
			var fun_486802 = fun_486602;
			F.line = 46;
			var res_486804 = fun_486802(self_486401.msg);
			var msg_obj_487002 = res_486804;
				if (of_py_exception_object_358259(msg_obj_487002)) {
				Tmp1 = msg_obj_487002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_486403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_486403 = nimCopy(null, msg_obj_487002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_487010 = (reprEnum(self_486401.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_486403);
		result_486262 = new_py_string_176075(str_487010);
	} while (false);
	framePtr = F.prev;

	return result_486262;

}

function new_py_unbound_local_error_object_magic_487026(args_487041) {
	var result_487042 = null;

	var F={procname:"exceptionsImpl.newPyUnboundLocalErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_487044 = new_py_unbound_local_error_simple_367601();
		F.line = 41;
		excp_487044.tk = 10;
		F.line = 42;
		excp_487044.msg = new_py_tuple_470057(args_487041);
		result_487042 = excp_487044;
	framePtr = F.prev;

	return result_487042;

}

function repr_py_key_error_object_magic_487059(self_no_cast_487061) {
				var Tmp1;

	var result_487062 = null;

	var F={procname:"exceptionsImpl.reprPyKeyErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_487061.m_type, NTI368501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyKeyErrorObject` "));
		}
		
		F.line = 438;
		var self_487201 = self_no_cast_487061;
		F.line = 23;
		var msg_487203 = null;
		if ((self_487201.msg === null)) {
		F.line = 25;
		msg_487203 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_487201.msg)) {
		F.line = 27;
		msg_487203 = nimCopy(null, self_487201.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_487201.msg.pyType === null)) {
			F.line = 2895;
			var e_487237 = null;
			F.line = 2896;
			e_487237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_487237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_487237.parent = null;
			F.line = 26;
			raiseException(e_487237, "InternalError");
			}
			
			F.line = 27;
			var fun_487402 = self_487201.msg.pyType.magicMethods.Field25;
			if ((fun_487402 === null)) {
			F.line = 29;
			var obj_type_str_487411 = self_487201.msg.pyType.name;
			F.line = 30;
			var method_str_487413 = makeNimstrLit("repr");
			F.line = 31;
			var msg_487415 = (makeNimstrLit("No ")).concat(method_str_487413,makeNimstrLit(" method for "),obj_type_str_487411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_487417 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_487417.tk = 3;
			F.line = 106;
			excp_487417.thrown = true;
			F.line = 107;
			excp_487417.msg = new_py_string_176075(msg_487415);
			var excp_487420 = excp_487417;
			F.line = 36;
			result_487062 = excp_487420;
			break BeforeRet;
			}
			
			var fun_487602 = fun_487402;
			F.line = 46;
			var res_487604 = fun_487602(self_487201.msg);
			var msg_obj_487802 = res_487604;
				if (of_py_exception_object_358259(msg_obj_487802)) {
				Tmp1 = msg_obj_487802.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_487203 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_487203 = nimCopy(null, msg_obj_487802.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_487810 = (reprEnum(self_487201.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_487203);
		result_487062 = new_py_string_176075(str_487810);
	} while (false);
	framePtr = F.prev;

	return result_487062;

}

function new_py_key_error_object_magic_487826(args_487841) {
	var result_487842 = null;

	var F={procname:"exceptionsImpl.newPyKeyErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_487844 = new_py_key_error_simple_368601();
		F.line = 41;
		excp_487844.tk = 11;
		F.line = 42;
		excp_487844.msg = new_py_tuple_470057(args_487841);
		result_487842 = excp_487844;
	framePtr = F.prev;

	return result_487842;

}

function repr_py_assertion_error_object_magic_487859(self_no_cast_487861) {
				var Tmp1;

	var result_487862 = null;

	var F={procname:"exceptionsImpl.reprPyAssertionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_487861.m_type, NTI369501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyAssertionErrorObject` "));
		}
		
		F.line = 438;
		var self_488001 = self_no_cast_487861;
		F.line = 23;
		var msg_488003 = null;
		if ((self_488001.msg === null)) {
		F.line = 25;
		msg_488003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_488001.msg)) {
		F.line = 27;
		msg_488003 = nimCopy(null, self_488001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_488001.msg.pyType === null)) {
			F.line = 2895;
			var e_488037 = null;
			F.line = 2896;
			e_488037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_488037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_488037.parent = null;
			F.line = 26;
			raiseException(e_488037, "InternalError");
			}
			
			F.line = 27;
			var fun_488202 = self_488001.msg.pyType.magicMethods.Field25;
			if ((fun_488202 === null)) {
			F.line = 29;
			var obj_type_str_488211 = self_488001.msg.pyType.name;
			F.line = 30;
			var method_str_488213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_488215 = (makeNimstrLit("No ")).concat(method_str_488213,makeNimstrLit(" method for "),obj_type_str_488211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_488217 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_488217.tk = 3;
			F.line = 106;
			excp_488217.thrown = true;
			F.line = 107;
			excp_488217.msg = new_py_string_176075(msg_488215);
			var excp_488220 = excp_488217;
			F.line = 36;
			result_487862 = excp_488220;
			break BeforeRet;
			}
			
			var fun_488402 = fun_488202;
			F.line = 46;
			var res_488404 = fun_488402(self_488001.msg);
			var msg_obj_488602 = res_488404;
				if (of_py_exception_object_358259(msg_obj_488602)) {
				Tmp1 = msg_obj_488602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_488003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_488003 = nimCopy(null, msg_obj_488602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_488610 = (reprEnum(self_488001.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_488003);
		result_487862 = new_py_string_176075(str_488610);
	} while (false);
	framePtr = F.prev;

	return result_487862;

}

function new_py_assertion_error_object_magic_488626(args_488641) {
	var result_488642 = null;

	var F={procname:"exceptionsImpl.newPyAssertionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_488644 = new_py_assertion_error_simple_369601();
		F.line = 41;
		excp_488644.tk = 12;
		F.line = 42;
		excp_488644.msg = new_py_tuple_470057(args_488641);
		result_488642 = excp_488644;
	framePtr = F.prev;

	return result_488642;

}

function repr_py_zero_division_error_object_magic_488659(self_no_cast_488661) {
				var Tmp1;

	var result_488662 = null;

	var F={procname:"exceptionsImpl.reprPyZeroDivisionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_488661.m_type, NTI370501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyZeroDivisionErrorObject` "));
		}
		
		F.line = 438;
		var self_488801 = self_no_cast_488661;
		F.line = 23;
		var msg_488803 = null;
		if ((self_488801.msg === null)) {
		F.line = 25;
		msg_488803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_488801.msg)) {
		F.line = 27;
		msg_488803 = nimCopy(null, self_488801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_488801.msg.pyType === null)) {
			F.line = 2895;
			var e_488837 = null;
			F.line = 2896;
			e_488837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_488837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_488837.parent = null;
			F.line = 26;
			raiseException(e_488837, "InternalError");
			}
			
			F.line = 27;
			var fun_489002 = self_488801.msg.pyType.magicMethods.Field25;
			if ((fun_489002 === null)) {
			F.line = 29;
			var obj_type_str_489011 = self_488801.msg.pyType.name;
			F.line = 30;
			var method_str_489013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_489015 = (makeNimstrLit("No ")).concat(method_str_489013,makeNimstrLit(" method for "),obj_type_str_489011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_489017 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_489017.tk = 3;
			F.line = 106;
			excp_489017.thrown = true;
			F.line = 107;
			excp_489017.msg = new_py_string_176075(msg_489015);
			var excp_489020 = excp_489017;
			F.line = 36;
			result_488662 = excp_489020;
			break BeforeRet;
			}
			
			var fun_489202 = fun_489002;
			F.line = 46;
			var res_489204 = fun_489202(self_488801.msg);
			var msg_obj_489402 = res_489204;
				if (of_py_exception_object_358259(msg_obj_489402)) {
				Tmp1 = msg_obj_489402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_488803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_488803 = nimCopy(null, msg_obj_489402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_489410 = (reprEnum(self_488801.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_488803);
		result_488662 = new_py_string_176075(str_489410);
	} while (false);
	framePtr = F.prev;

	return result_488662;

}

function new_py_zero_division_error_object_magic_489426(args_489441) {
	var result_489442 = null;

	var F={procname:"exceptionsImpl.newPyZeroDivisionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_489444 = new_py_zero_division_error_simple_370601();
		F.line = 41;
		excp_489444.tk = 13;
		F.line = 42;
		excp_489444.msg = new_py_tuple_470057(args_489441);
		result_489442 = excp_489444;
	framePtr = F.prev;

	return result_489442;

}

function repr_py_runtime_error_object_magic_489459(self_no_cast_489461) {
				var Tmp1;

	var result_489462 = null;

	var F={procname:"exceptionsImpl.reprPyRuntimeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_489461.m_type, NTI371501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRuntimeErrorObject` "));
		}
		
		F.line = 438;
		var self_489601 = self_no_cast_489461;
		F.line = 23;
		var msg_489603 = null;
		if ((self_489601.msg === null)) {
		F.line = 25;
		msg_489603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_489601.msg)) {
		F.line = 27;
		msg_489603 = nimCopy(null, self_489601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_489601.msg.pyType === null)) {
			F.line = 2895;
			var e_489637 = null;
			F.line = 2896;
			e_489637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_489637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_489637.parent = null;
			F.line = 26;
			raiseException(e_489637, "InternalError");
			}
			
			F.line = 27;
			var fun_489802 = self_489601.msg.pyType.magicMethods.Field25;
			if ((fun_489802 === null)) {
			F.line = 29;
			var obj_type_str_489811 = self_489601.msg.pyType.name;
			F.line = 30;
			var method_str_489813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_489815 = (makeNimstrLit("No ")).concat(method_str_489813,makeNimstrLit(" method for "),obj_type_str_489811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_489817 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_489817.tk = 3;
			F.line = 106;
			excp_489817.thrown = true;
			F.line = 107;
			excp_489817.msg = new_py_string_176075(msg_489815);
			var excp_489820 = excp_489817;
			F.line = 36;
			result_489462 = excp_489820;
			break BeforeRet;
			}
			
			var fun_490002 = fun_489802;
			F.line = 46;
			var res_490004 = fun_490002(self_489601.msg);
			var msg_obj_490202 = res_490004;
				if (of_py_exception_object_358259(msg_obj_490202)) {
				Tmp1 = msg_obj_490202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_489603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_489603 = nimCopy(null, msg_obj_490202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_490210 = (reprEnum(self_489601.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_489603);
		result_489462 = new_py_string_176075(str_490210);
	} while (false);
	framePtr = F.prev;

	return result_489462;

}

function new_py_runtime_error_object_magic_490226(args_490241) {
	var result_490242 = null;

	var F={procname:"exceptionsImpl.newPyRuntimeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_490244 = new_py_runtime_error_simple_371601();
		F.line = 41;
		excp_490244.tk = 14;
		F.line = 42;
		excp_490244.msg = new_py_tuple_470057(args_490241);
		result_490242 = excp_490244;
	framePtr = F.prev;

	return result_490242;

}

function repr_py_syntax_error_object_magic_490259(self_no_cast_490261) {
				var Tmp1;

	var result_490262 = null;

	var F={procname:"exceptionsImpl.reprPySyntaxErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_490261.m_type, NTI372501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PySyntaxErrorObject` "));
		}
		
		F.line = 438;
		var self_490401 = self_no_cast_490261;
		F.line = 23;
		var msg_490403 = null;
		if ((self_490401.msg === null)) {
		F.line = 25;
		msg_490403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_490401.msg)) {
		F.line = 27;
		msg_490403 = nimCopy(null, self_490401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_490401.msg.pyType === null)) {
			F.line = 2895;
			var e_490437 = null;
			F.line = 2896;
			e_490437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_490437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_490437.parent = null;
			F.line = 26;
			raiseException(e_490437, "InternalError");
			}
			
			F.line = 27;
			var fun_490602 = self_490401.msg.pyType.magicMethods.Field25;
			if ((fun_490602 === null)) {
			F.line = 29;
			var obj_type_str_490611 = self_490401.msg.pyType.name;
			F.line = 30;
			var method_str_490613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_490615 = (makeNimstrLit("No ")).concat(method_str_490613,makeNimstrLit(" method for "),obj_type_str_490611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_490617 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_490617.tk = 3;
			F.line = 106;
			excp_490617.thrown = true;
			F.line = 107;
			excp_490617.msg = new_py_string_176075(msg_490615);
			var excp_490620 = excp_490617;
			F.line = 36;
			result_490262 = excp_490620;
			break BeforeRet;
			}
			
			var fun_490802 = fun_490602;
			F.line = 46;
			var res_490804 = fun_490802(self_490401.msg);
			var msg_obj_491002 = res_490804;
				if (of_py_exception_object_358259(msg_obj_491002)) {
				Tmp1 = msg_obj_491002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_490403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_490403 = nimCopy(null, msg_obj_491002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_491010 = (reprEnum(self_490401.tk, NTI357160)).concat(makeNimstrLit("Error: "),msg_490403);
		result_490262 = new_py_string_176075(str_491010);
	} while (false);
	framePtr = F.prev;

	return result_490262;

}

function new_py_syntax_error_object_magic_491026(args_491041) {
	var result_491042 = null;

	var F={procname:"exceptionsImpl.newPySyntaxErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_491044 = new_py_syntax_error_simple_372601();
		F.line = 41;
		excp_491044.tk = 15;
		F.line = 42;
		excp_491044.msg = new_py_tuple_470057(args_491041);
		result_491042 = excp_491044;
	framePtr = F.prev;

	return result_491042;

}
py_base_error_object_type_357260.magicMethods.Field25 = repr_py_base_error_object_magic_478314;
py_base_error_object_type_357260.magicMethods.Field26 = new_py_base_error_object_magic_479026;
py_name_error_object_type_358419.magicMethods.Field25 = repr_py_name_error_object_magic_479059;
py_name_error_object_type_358419.magicMethods.Field26 = new_py_name_error_object_magic_479826;
py_not_implemented_error_object_type_359505.magicMethods.Field25 = repr_py_not_implemented_error_object_magic_479859;
py_not_implemented_error_object_type_359505.magicMethods.Field26 = new_py_not_implemented_error_object_magic_480626;
py_type_error_object_type_360505.magicMethods.Field25 = repr_py_type_error_object_magic_480659;
py_type_error_object_type_360505.magicMethods.Field26 = new_py_type_error_object_magic_481426;
py_attribute_error_object_type_361505.magicMethods.Field25 = repr_py_attribute_error_object_magic_481459;
py_attribute_error_object_type_361505.magicMethods.Field26 = new_py_attribute_error_object_magic_482226;
py_value_error_object_type_362505.magicMethods.Field25 = repr_py_value_error_object_magic_482259;
py_value_error_object_type_362505.magicMethods.Field26 = new_py_value_error_object_magic_483026;
py_index_error_object_type_363505.magicMethods.Field25 = repr_py_index_error_object_magic_483059;
py_index_error_object_type_363505.magicMethods.Field26 = new_py_index_error_object_magic_483826;
py_stop_iter_error_object_type_364505.magicMethods.Field25 = repr_py_stop_iter_error_object_magic_483859;
py_stop_iter_error_object_type_364505.magicMethods.Field26 = new_py_stop_iter_error_object_magic_484626;
py_lock_error_object_type_365505.magicMethods.Field25 = repr_py_lock_error_object_magic_484659;
py_lock_error_object_type_365505.magicMethods.Field26 = new_py_lock_error_object_magic_485426;
py_import_error_object_type_366505.magicMethods.Field25 = repr_py_import_error_object_magic_485459;
py_import_error_object_type_366505.magicMethods.Field26 = new_py_import_error_object_magic_486226;
py_unbound_local_error_object_type_367505.magicMethods.Field25 = repr_py_unbound_local_error_object_magic_486259;
py_unbound_local_error_object_type_367505.magicMethods.Field26 = new_py_unbound_local_error_object_magic_487026;
py_key_error_object_type_368505.magicMethods.Field25 = repr_py_key_error_object_magic_487059;
py_key_error_object_type_368505.magicMethods.Field26 = new_py_key_error_object_magic_487826;
py_assertion_error_object_type_369505.magicMethods.Field25 = repr_py_assertion_error_object_magic_487859;
py_assertion_error_object_type_369505.magicMethods.Field26 = new_py_assertion_error_object_magic_488626;
py_zero_division_error_object_type_370505.magicMethods.Field25 = repr_py_zero_division_error_object_magic_488659;
py_zero_division_error_object_type_370505.magicMethods.Field26 = new_py_zero_division_error_object_magic_489426;
py_runtime_error_object_type_371505.magicMethods.Field25 = repr_py_runtime_error_object_magic_489459;
py_runtime_error_object_type_371505.magicMethods.Field26 = new_py_runtime_error_object_magic_490226;
py_syntax_error_object_type_372505.magicMethods.Field25 = repr_py_syntax_error_object_magic_490259;
py_syntax_error_object_type_372505.magicMethods.Field26 = new_py_syntax_error_object_magic_491026;

function new_492406() {
	var result_492411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_492601 = null;
		F.line = 211;
		r_492601 = {m_type: NTI492125, code: null, opCodes: [null, 0], opArgs: [null, 0], lineNos: null, constants: null, names: null, localVars: null, cellVars: null, freeVars: null, argNames: null, argScopes: null, codeName: null, fileName: null, id: 0, pyType: null};
		F.line = 212;
		result_492411 = r_492601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_492411;

}

function new_py_code_simple_492401() {
	var result_492403 = null;

	var F={procname:"codeobject.newPyCodeSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_492624 = new_492406();
		F.line = 561;
		obj_492624.pyType = py_code_object_type_492181;
		F.line = 563;
		give_id_157814(obj_492624);
		result_492403 = obj_492624;
	framePtr = F.prev;

	return result_492403;

}

function new_py_code_default_493021(args_492080) {
	var result_493024 = null;

	var F={procname:"codeobject.newPyCodeDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_493024 = new_py_code_simple_492401();
	framePtr = F.prev;

	return result_493024;

}
var py_code_object_type_492181 = new_py_type_159261(makeNimstrLit("Code"));
py_code_object_type_492181.kind = 11;
py_code_object_type_492181.magicMethods.Field26 = new_py_code_default_493021;

function parse_saturated_natural_38485(s_38487, b_38489, b_38489_Idx, start_38490) {
			var Tmp1;
					var Tmp4;

	var result_38492 = 0;

	var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 301;
		var i_38493 = start_38490;
		if (((i_38493 < (s_38487 != null ? s_38487.length : 0)) && (s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0] == 43))) {
		F.line = 302;
		i_38493 = addInt(i_38493, 1);
		}
		
			if (!(i_38493 < (s_38487 != null ? s_38487.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet15[s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 304;
		b_38489[b_38489_Idx] = 0;
		L2: do {
			F.line = 305;
				L3: while (true) {
					if (!(i_38493 < (s_38487 != null ? s_38487.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet16[s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 306;
					var c_38535 = subInt(s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0], 48);
					if ((b_38489[b_38489_Idx] <= divInt(subInt(2147483647, c_38535), 10))) {
					F.line = 308;
					b_38489[b_38489_Idx] = addInt(mulInt(b_38489[b_38489_Idx], 10), c_38535);
					}
					else {
						F.line = 310;
						b_38489[b_38489_Idx] = 2147483647;
					}
					
					F.line = 311;
					i_38493 = addInt(i_38493, 1);
					L5: do {
						F.line = 312;
							L6: while (true) {
							if (!((i_38493 < (s_38487 != null ? s_38487.length : 0)) && (s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0] == 95))) break L6;
								F.line = 312;
								i_38493 = addInt(i_38493, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 313;
		result_38492 = subInt(i_38493, start_38490);
		}
		
	framePtr = F.prev;

	return result_38492;

}

function parse_standard_format_specifier_141928(s_141930, start_141931, ignore_unknown_suffix_141933) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_141934 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

	var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 449;
		result_141934.fill = 32;
		F.line = 450;
		result_141934.align = 0;
		F.line = 451;
		result_141934.sign = 45;
		F.line = 452;
		var i_141937 = start_141931;
		if (((addInt(i_141937, 1) < (s_141930 != null ? s_141930.length : 0)) && (ConstSet11[s_141930[chckIndx(addInt(i_141937, 1), 0, s_141930.length+0-1)-0]] != undefined))) {
		F.line = 454;
		result_141934.fill = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 455;
		result_141934.align = s_141930[chckIndx(addInt(i_141937, 1), 0, s_141930.length+0-1)-0];
		F.line = 456;
		i_141937 = addInt(i_141937, 2);
		}
		else {
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (ConstSet12[s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0]] != undefined))) {
		F.line = 458;
		result_141934.align = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 459;
		i_141937 = addInt(i_141937, 1);
		}
		}
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (ConstSet13[s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0]] != undefined))) {
		F.line = 462;
		result_141934.sign = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 463;
		i_141937 = addInt(i_141937, 1);
		}
		
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0] == 35))) {
		F.line = 466;
		result_141934.alternateForm = true;
		F.line = 467;
		i_141937 = addInt(i_141937, 1);
		}
		
			if (!((addInt(i_141937, 1) < (s_141930 != null ? s_141930.length : 0)) && (s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet14[s_141930[chckIndx(addInt(i_141937, 1), 0, s_141930.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 470;
		result_141934.padWithZero = true;
		F.line = 471;
		i_141937 = addInt(i_141937, 1);
		}
		
		F.line = 473;
		var parsed_length_142022 = parse_saturated_natural_38485(s_141930, result_141934, "minimumWidth", i_141937);
		F.line = 474;
		i_141937 = addInt(i_141937, parsed_length_142022);
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0] == 46))) {
		F.line = 476;
		i_141937 = addInt(i_141937, 1);
		F.line = 477;
		var parsed_length_b_142042 = parse_saturated_natural_38485(s_141930, result_141934, "precision", i_141937);
		F.line = 478;
		i_141937 = addInt(i_141937, parsed_length_b_142042);
		}
		else {
			F.line = 480;
			result_141934.precision = -1;
		}
		
			if (!(i_141937 < (s_141930 != null ? s_141930.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet17[s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0]] != undefined);			}		if (Tmp2) {
		F.line = 483;
		result_141934.typ = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 484;
		i_141937 = addInt(i_141937, 1);
		}
		
		F.line = 485;
		result_141934.endPosition = i_141937;
			if (!!((i_141937 == (s_141930 != null ? s_141930.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_141933);			}		if (Tmp3) {
		F.line = 2895;
		var e_142120 = null;
		F.line = 2896;
		e_142120 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 488;
		e_142120.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ")).concat(HEX5BHEX5D_81105(s_141930, HEX2EHEX2E_81053(i_141937, 1))), NTI138);
		F.line = 2891;
		e_142120.parent = null;
		F.line = 487;
		raiseException(e_142120, "ValueError");
		}
		
	framePtr = F.prev;

	return result_141934;

}

function mk_digit_141621(v_141623, typ_141624) {
			var Tmp1;

	var result_141625 = null;

	var F={procname:"strformat.mkDigit",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		if (!((v_141623 < 26))) {
		F.line = 342;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim(342, 9) `v < 26` "));
		}
		
		if ((v_141623 < 10)) {
		F.line = 344;
		result_141625 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_141623), 0, 255)), NTI138);
		}
		else {
			F.line = 346;
			if ((typ_141624 == 120)) {
			Tmp1 = 97;
			}
			else {
			Tmp1 = 65;
			}
			
			result_141625 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_141623), 10), 0, 255)), NTI138);
		}
		
	framePtr = F.prev;

	return result_141625;

}

function nsuRepeatChar(c_134984, count_134985) {
	var result_134986 = null;

		result_134986 = nimCopy(null, mnewString(count_134985), NTI138);
		L1: do {
			var i_134998 = 0;
			var colontmp__135000 = 0;
			colontmp__135000 = (count_134985 - 1);
			var res_135003 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_135003 <= colontmp__135000)) break L3;
						i_134998 = res_135003;
						result_134986[i_134998] = c_134984;
						res_135003 += 1;
					}
			} while(false);
		} while(false);

	return result_134986;

}

function format_int_158429(n_158433, radix_158435, spec_158437) {
		var Tmp7;

	var result_158438 = null;

	var F={procname:"formatInt.formatInt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 388;
		var v_158601 = n_158433;
		F.line = 389;
		var negative_158602 = (v_158601 < 0);
		if (negative_158602) {
		F.line = 392;
		v_158601 = mulInt(v_158601, -1);
		}
		
		F.line = 394;
		var xx_158604 = [];
		if (spec_158437.alternateForm) {
		F.line = 396;
		switch (spec_158437.typ) {
		case 88:
			F.line = 397;
			xx_158604 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 120:
			F.line = 398;
			xx_158604 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 98:
			F.line = 399;
			xx_158604 = nimCopy(null, makeNimstrLit("0b"), NTI138);
			break;
		case 111:
			F.line = 400;
			xx_158604 = nimCopy(null, makeNimstrLit("0o"), NTI138);
			break;
		default: 
			break;
		}
		}
		
		if ((v_158601 == 0)) {
		F.line = 404;
		result_158438 = nimCopy(null, makeNimstrLit("0"), NTI138);
		}
		else {
			F.line = 406;
			result_158438 = nimCopy(null, [], NTI138);
			L1: do {
				F.line = 407;
					L2: while (true) {
					if (!(0 < v_158601)) break L2;
						F.line = 408;
						var d_158607 = modInt(v_158601, radix_158435);
						F.line = 409;
						v_158601 = divInt(v_158601, radix_158435);
						F.line = 410;
						if (result_158438 != null) { result_158438 = (result_158438).concat(mk_digit_141621(chckRange(d_158607, -2147483648, 2147483647), spec_158437.typ)); } else { result_158438 = mk_digit_141621(chckRange(d_158607, -2147483648, 2147483647), spec_158437.typ).slice(); };
					}
			} while(false);
			L3: do {
				F.line = 411;
				var idx_158618 = 0;
				F.line = 3616;
				var colontmp__158664 = 0;
				F.line = 411;
				colontmp__158664 = divInt((result_158438 != null ? result_158438.length : 0), 2);
				F.line = 3617;
				var i_158667 = 0;
				L4: do {
					F.line = 3618;
						L5: while (true) {
						if (!(i_158667 < colontmp__158664)) break L5;
							F.line = 3619;
							idx_158618 = i_158667;
							F.line = 412;
							var Tmp6 = result_158438[chckIndx(idx_158618, 0, result_158438.length+0-1)-0]; result_158438[chckIndx(idx_158618, 0, result_158438.length+0-1)-0] = result_158438[chckIndx(subInt(subInt((result_158438 != null ? result_158438.length : 0), idx_158618), 1), 0, result_158438.length+0-1)-0]; result_158438[chckIndx(subInt(subInt((result_158438 != null ? result_158438.length : 0), idx_158618), 1), 0, result_158438.length+0-1)-0] = Tmp6;							F.line = 3620;
							i_158667 = addInt(i_158667, 1);
						}
				} while(false);
			} while(false);
		}
		
		if (spec_158437.padWithZero) {
		F.line = 414;
		if (negative_158602) Tmp7 = true; else {			Tmp7 = !((spec_158437.sign == 45));		}		var sign_158637 = Tmp7;
		F.line = 415;
		var to_fill_158644 = subInt(subInt(subInt(spec_158437.minimumWidth, (result_158438 != null ? result_158438.length : 0)), (xx_158604 != null ? xx_158604.length : 0)), (sign_158637 ? 1:0));
		if ((0 < to_fill_158644)) {
		F.line = 417;
		result_158438 = nimCopy(null, (nsuRepeatChar(48, chckRange(to_fill_158644, 0, 2147483647))).concat(result_158438), NTI138);
		}
		
		}
		
		if (negative_158602) {
		F.line = 420;
		result_158438 = nimCopy(null, (makeNimstrLit("-")).concat(xx_158604,result_158438), NTI138);
		}
		else {
		if (!((spec_158437.sign == 45))) {
		F.line = 422;
		result_158438 = nimCopy(null, [spec_158437.sign].concat(xx_158604,result_158438), NTI138);
		}
		else {
			F.line = 424;
			result_158438 = nimCopy(null, (xx_158604).concat(result_158438), NTI138);
		}
		}
		if ((spec_158437.align == 60)) {
		L8: do {
			F.line = 427;
			var i_158655 = 0;
			F.line = 3616;
			var colontmp__158670 = 0;
			F.line = 3616;
			var colontmp__158671 = 0;
			F.line = 427;
			colontmp__158670 = (result_158438 != null ? result_158438.length : 0);
			F.line = 427;
			colontmp__158671 = spec_158437.minimumWidth;
			F.line = 3617;
			var i_158674 = colontmp__158670;
			L9: do {
				F.line = 3618;
					L10: while (true) {
					if (!(i_158674 < colontmp__158671)) break L10;
						F.line = 3619;
						i_158655 = i_158674;
						F.line = 428;
						if (result_158438 != null) { addChar(result_158438, spec_158437.fill); } else { result_158438 = [spec_158437.fill]; };
						F.line = 3620;
						i_158674 = addInt(i_158674, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 430;
			var to_fill_158656 = subInt(spec_158437.minimumWidth, (result_158438 != null ? result_158438.length : 0));
			if ((spec_158437.align == 94)) {
			F.line = 432;
			var half_158657 = divInt(to_fill_158656, 2);
			F.line = 433;
			result_158438 = nimCopy(null, (nsuRepeatChar(spec_158437.fill, chckRange(half_158657, 0, 2147483647))).concat(result_158438,nsuRepeatChar(spec_158437.fill, chckRange(subInt(to_fill_158656, half_158657), 0, 2147483647))), NTI138);
			}
			else {
				if ((0 < to_fill_158656)) {
				F.line = 436;
				result_158438 = nimCopy(null, (nsuRepeatChar(spec_158437.fill, chckRange(to_fill_158656, 0, 2147483647))).concat(result_158438), NTI138);
				}
				
			}
			
		}
		
	framePtr = F.prev;

	return result_158438;

}

function format_158402(value_158406, specifier_158408, res_158410, res_158410_Idx) {
	var F={procname:"format.format",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 495;
		var spec_158411 = parse_standard_format_specifier_141928(specifier_158408, 0, false);
		F.line = 496;
		var radix_158413 = 10;
		F.line = 497;
		switch (spec_158411.typ) {
		case 120:
		case 88:
			F.line = 498;
			radix_158413 = 16;
			break;
		case 100:
		case 0:
			break;
		case 98:
			F.line = 500;
			radix_158413 = 2;
			break;
		case 111:
			F.line = 501;
			radix_158413 = 8;
			break;
		default: 
			F.line = 2895;
			var e_158419 = null;
			F.line = 2896;
			e_158419 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 505;
			e_158419.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ")).concat([spec_158411.typ]), NTI138);
			F.line = 2891;
			e_158419.parent = null;
			F.line = 503;
			raiseException(e_158419, "ValueError");
			break;
		}
		F.line = 506;
		if (res_158410[res_158410_Idx] != null) { res_158410[res_158410_Idx] = (res_158410[res_158410_Idx]).concat(format_int_158429(value_158406, radix_158413, spec_158411)); } else { res_158410[res_158410_Idx] = format_int_158429(value_158406, radix_158413, spec_158411).slice(); };
	framePtr = F.prev;

	
}

function id_str_158001(obj_158003) {
	var result_158004 = null;

	var F={procname:"pyobjectBase.idStr",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 179;
		F.line = 179;
		var fmt_res_158007 = [mnewString(0)];
		F.line = 274;
		format_158402(obj_158003.id, makeNimstrLit("#x"), fmt_res_158007, 0);
		result_158004 = nimCopy(null, fmt_res_158007[0], NTI138);
	framePtr = F.prev;

	return result_158004;

}

function repr_py_code_object_magic_493552(self_no_cast_493554) {
	var result_493555 = null;

	var F={procname:"codeobject.reprPyCodeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_493554.m_type, NTI492125))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyCodeObject` "));
		}
		
		F.line = 438;
		var self_493601 = self_no_cast_493554;
		F.line = 71;
		var code_name_493602 = nimCopy(null, self_493601.codeName.str, NTI138);
		F.line = 72;
		var file_name_493603 = nimCopy(null, self_493601.fileName.str, NTI138);
		F.line = 73;
		F.line = 73;
		var fmt_res_493607 = mnewString(0);
		F.line = 73;
		if (fmt_res_493607 != null) { fmt_res_493607 = (fmt_res_493607).concat(makeNimstrLit("<code object ")); } else { fmt_res_493607 = makeNimstrLit("<code object "); };
		F.line = 260;
		if (fmt_res_493607 != null) { fmt_res_493607 = (fmt_res_493607).concat(code_name_493602); } else { fmt_res_493607 = code_name_493602.slice(); };
		F.line = 73;
		if (fmt_res_493607 != null) { fmt_res_493607 = (fmt_res_493607).concat(makeNimstrLit(" at ")); } else { fmt_res_493607 = makeNimstrLit(" at "); };
		F.line = 260;
		if (fmt_res_493607 != null) { fmt_res_493607 = (fmt_res_493607).concat(id_str_158001(self_493601)); } else { fmt_res_493607 = id_str_158001(self_493601).slice(); };
		F.line = 73;
		if (fmt_res_493607 != null) { fmt_res_493607 = (fmt_res_493607).concat(makeNimstrLit(", file \"")); } else { fmt_res_493607 = makeNimstrLit(", file \""); };
		F.line = 260;
		if (fmt_res_493607 != null) { fmt_res_493607 = (fmt_res_493607).concat(file_name_493603); } else { fmt_res_493607 = file_name_493603.slice(); };
		F.line = 73;
		if (fmt_res_493607 != null) { fmt_res_493607 = (fmt_res_493607).concat(makeNimstrLit("\">")); } else { fmt_res_493607 = makeNimstrLit("\">"); };
		var msg_494201 = nimCopy(null, fmt_res_493607, NTI138);
		result_493555 = new_py_str_176092(msg_494201);
	framePtr = F.prev;

	return result_493555;

}
py_code_object_type_492181.magicMethods.Field25 = repr_py_code_object_magic_493552;
var py_config_509072 = [{filepath: null, filename: null, path: null}];

function new_510406() {
	var result_510411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_510601 = null;
		F.line = 211;
		r_510601 = {m_type: NTI510255, items: null, reprLock: false, readNum: 0, writeLock: false, id: 0, pyType: null};
		F.line = 212;
		result_510411 = r_510601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_510411;

}

function new_py_list_simple_510401() {
	var result_510403 = null;

	var F={procname:"listobject.newPyListSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_510624 = new_510406();
		F.line = 561;
		obj_510624.pyType = py_list_object_type_510269;
		F.line = 563;
		give_id_157814(obj_510624);
		result_510403 = obj_510624;
	framePtr = F.prev;

	return result_510403;

}

function new_py_list_default_511021(args_510210) {
	var result_511024 = null;

	var F={procname:"listobject.newPyListDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_511024 = new_py_list_simple_510401();
	framePtr = F.prev;

	return result_511024;

}
var py_list_object_type_510269 = new_py_type_159261(makeNimstrLit("List"));
py_list_object_type_510269.kind = 9;
py_list_object_type_510269.magicMethods.Field26 = new_py_list_default_511021;

function contains_py_list_object_magic_511293(self_no_cast_511295, other_511296) {
							var Tmp5;

	var result_511297 = null;

	var F={procname:"listobject.containsPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_511295.m_type, NTI510255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_511401 = self_no_cast_511295;
		if (self_511401.writeLock) {
		F.line = 414;
		var msg_511403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_511405 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_511405.tk = 8;
		F.line = 106;
		excp_511405.thrown = true;
		F.line = 107;
		excp_511405.msg = new_py_string_176075(msg_511403);
		result_511297 = excp_511405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_511401.readNum = addInt(self_511401.readNum, 1);
		F.line = 438;
		try {
		L2: do {
			F.line = 24;
			var idx_511462 = 0;
			F.line = 24;
			var item_511463 = null;
			F.line = 2352;
			var colontmp__512025 = null;
			F.line = 24;
			colontmp__512025 = self_511401.items;
			F.line = 2354;
			var i_512028 = 0;
			L3: do {
				F.line = 2355;
					L4: while (true) {
					if (!(i_512028 < (colontmp__512025 != null ? colontmp__512025.length : 0))) break L4;
						F.line = 2356;
						idx_511462 = i_512028;
						F.line = 2356;
						item_511463 = colontmp__512025[chckIndx(i_512028, 0, colontmp__512025.length+0-1)-0];
						F.line = 25;
						F.line = 56;
						if ((item_511463.pyType === null)) {
						F.line = 2895;
						var e_511490 = null;
						F.line = 2896;
						e_511490 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_511490.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_511490.parent = null;
						F.line = 26;
						raiseException(e_511490, "InternalError");
						}
						
						F.line = 27;
						var fun_511602 = item_511463.pyType.magicMethods.Field18;
						if ((fun_511602 === null)) {
						F.line = 29;
						var obj_type_str_511611 = item_511463.pyType.name;
						F.line = 30;
						var method_str_511613 = makeNimstrLit("eq");
						F.line = 31;
						var msg_511615 = (makeNimstrLit("No ")).concat(method_str_511613,makeNimstrLit(" method for "),obj_type_str_511611,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_511617 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_511617.tk = 3;
						F.line = 106;
						excp_511617.thrown = true;
						F.line = 107;
						excp_511617.msg = new_py_string_176075(msg_511615);
						var excp_511620 = excp_511617;
						F.line = 36;
						result_511297 = excp_511620;
						break BeforeRet;
						}
						
						var fun_511802 = fun_511602;
						F.line = 57;
						var res_511804 = fun_511802(item_511463, other_511296);
						var ret_obj_512001 = res_511804;
							if (of_py_exception_object_358259(ret_obj_512001)) {
							Tmp5 = ret_obj_512001.thrown;
							}
							else {
							Tmp5 = false;
							}
							
						if (Tmp5) {
						F.line = 27;
						result_511297 = ret_obj_512001;
						break BeforeRet;
						}
						
						if ((ret_obj_512001 == py_true_obj_354074)) {
						F.line = 29;
						result_511297 = py_true_obj_354074;
						break BeforeRet;
						}
						
						F.line = 2357;
						i_512028 = addInt(i_512028, 1);
					}
			} while(false);
		} while(false);
		F.line = 30;
		result_511297 = py_false_obj_354075;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_511401.readNum = subInt(self_511401.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_511297;

}

function iter_py_list_object_magic_512044(self_no_cast_512046) {
		var Tmp1;

	var result_512047 = null;

	var F={procname:"listobject.iterPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_512046.m_type, NTI510255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_512201 = self_no_cast_512046;
		if (self_512201.writeLock) {
		F.line = 414;
		var msg_512203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_512205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_512205.tk = 8;
		F.line = 106;
		excp_512205.thrown = true;
		F.line = 107;
		excp_512205.msg = new_py_string_176075(msg_512203);
		result_512047 = excp_512205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_512201.readNum = addInt(self_512201.readNum, 1);
		F.line = 438;
		try {
		Tmp1 = new_py_seq_iter_466648(self_512201.items);
		} finally {
		framePtr = F;
		F.line = 417;
		self_512201.readNum = subInt(self_512201.readNum, 1);
		}
		result_512047 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_512047;

}

function repr_py_list_object_magic_512241(self_no_cast_512243) {
	var result_512244 = null;

	var F={procname:"listobject.reprPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_512243.m_type, NTI510255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_512401 = self_no_cast_512243;
		if (self_512401.reprLock) {
		F.line = 379;
		result_512244 = new_py_string_176075(makeNimstrLit("..."));
		break BeforeRet;
		}
		
		F.line = 380;
		self_512401.reprLock = true;
		F.line = 438;
		try {
		if (self_512401.writeLock) {
		F.line = 414;
		var msg_512403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_512405 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_512405.tk = 8;
		F.line = 106;
		excp_512405.thrown = true;
		F.line = 107;
		excp_512405.msg = new_py_string_176075(msg_512403);
		result_512244 = excp_512405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_512401.readNum = addInt(self_512401.readNum, 1);
		F.line = 438;
		try {
		F.line = 38;
		var ss_512417 = null;
		L3: do {
			F.line = 39;
			var item_512426 = null;
			F.line = 3909;
			var colontmp__513227 = null;
			F.line = 39;
			colontmp__513227 = self_512401.items;
			F.line = 3911;
			var i_513230 = 0;
			F.line = 3912;
			var l_513232 = (colontmp__513227 != null ? colontmp__513227.length : 0);
			L4: do {
				F.line = 3913;
					L5: while (true) {
					if (!(i_513230 < l_513232)) break L5;
						F.line = 3914;
						item_512426 = colontmp__513227[chckIndx(i_513230, 0, colontmp__513227.length+0-1)-0];
						F.line = 40;
						var item_repr_512427 = null;
						F.line = 41;
						F.line = 45;
						if ((item_512426.pyType === null)) {
						F.line = 2895;
						var e_512454 = null;
						F.line = 2896;
						e_512454 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_512454.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_512454.parent = null;
						F.line = 26;
						raiseException(e_512454, "InternalError");
						}
						
						F.line = 27;
						var fun_512602 = item_512426.pyType.magicMethods.Field25;
						if ((fun_512602 === null)) {
						F.line = 29;
						var obj_type_str_512611 = item_512426.pyType.name;
						F.line = 30;
						var method_str_512613 = makeNimstrLit("repr");
						F.line = 31;
						var msg_512615 = (makeNimstrLit("No ")).concat(method_str_512613,makeNimstrLit(" method for "),obj_type_str_512611,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_512617 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_512617.tk = 3;
						F.line = 106;
						excp_512617.thrown = true;
						F.line = 107;
						excp_512617.msg = new_py_string_176075(msg_512615);
						var excp_512620 = excp_512617;
						F.line = 36;
						result_512244 = excp_512620;
						break BeforeRet;
						}
						
						var fun_512802 = fun_512602;
						F.line = 46;
						var res_512804 = fun_512802(item_512426);
						var ret_obj_513001 = res_512804;
						if (!(of_py_str_object_175092(ret_obj_513001))) {
						F.line = 157;
						var type_name_513004 = nimCopy(null, ret_obj_513001.pyType.name, NTI138);
						F.line = 158;
						F.line = 158;
						var fmt_res_513007 = mnewString(0);
						F.line = 158;
						if (fmt_res_513007 != null) { fmt_res_513007 = (fmt_res_513007).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_513007 = makeNimstrLit(" returned non-string (type "); };
						F.line = 260;
						if (fmt_res_513007 != null) { fmt_res_513007 = (fmt_res_513007).concat(type_name_513004); } else { fmt_res_513007 = type_name_513004.slice(); };
						F.line = 158;
						if (fmt_res_513007 != null) { fmt_res_513007 = (fmt_res_513007).concat(makeNimstrLit(")")); } else { fmt_res_513007 = makeNimstrLit(")"); };
						var msg_513202 = (makeNimstrLit("__repr__")).concat(fmt_res_513007);
						F.line = 159;
						F.line = 104;
						var excp_513204 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_513204.tk = 3;
						F.line = 106;
						excp_513204.thrown = true;
						F.line = 107;
						excp_513204.msg = new_py_string_176075(msg_513202);
						result_512244 = excp_513204;
						break BeforeRet;
						}
						
						F.line = 43;
						item_repr_512427 = ret_obj_513001;
						F.line = 44;
						var Tmp6 = nimCopy(null, item_repr_512427.str, NTI138);
						if (ss_512417 != null) { ss_512417.push(Tmp6); } else { ss_512417 = [Tmp6]; };
						F.line = 3915;
						i_513230 = addInt(i_513230, 1);
						if (!(((colontmp__513227 != null ? colontmp__513227.length : 0) == l_513232))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 45;
		result_512244 = new_py_string_176075((makeNimstrLit("[")).concat(nsuJoinSep(ss_512417, makeNimstrLit(", ")),makeNimstrLit("]")));
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_512401.readNum = subInt(self_512401.readNum, 1);
		}
		} finally {
		framePtr = F;
		F.line = 383;
		self_512401.reprLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_512244;

}

function len_py_list_object_magic_513248(self_no_cast_513250) {
		var Tmp1;

	var result_513251 = null;

	var F={procname:"listobject.lenPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_513250.m_type, NTI510255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_513401 = self_no_cast_513250;
		if (self_513401.writeLock) {
		F.line = 414;
		var msg_513403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_513405 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_513405.tk = 8;
		F.line = 106;
		excp_513405.thrown = true;
		F.line = 107;
		excp_513405.msg = new_py_string_176075(msg_513403);
		result_513251 = excp_513405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_513401.readNum = addInt(self_513401.readNum, 1);
		F.line = 438;
		try {
		Tmp1 = new_py_int_375257((self_513401.items != null ? self_513401.items.length : 0));
		} finally {
		framePtr = F;
		F.line = 417;
		self_513401.readNum = subInt(self_513401.readNum, 1);
		}
		result_513251 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_513251;

}

function new_py_list_511257() {
	var result_511259 = null;

	var F={procname:"listobject.newPyList",prev:framePtr,filename:"../Objects/listobject.nim",line:0};
	framePtr = F;
		F.line = 16;
		result_511259 = new_py_list_simple_510401();
	framePtr = F.prev;

	return result_511259;

}

function getitem_py_list_object_magic_513448(self_no_cast_513450, other_513451) {
			var Tmp2;
			var Tmp3;

	var result_513452 = null;

	var F={procname:"listobject.getitemPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_513450.m_type, NTI510255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_513601 = self_no_cast_513450;
		if (self_513601.writeLock) {
		F.line = 414;
		var msg_513603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_513605 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_513605.tk = 8;
		F.line = 106;
		excp_513605.thrown = true;
		F.line = 107;
		excp_513605.msg = new_py_string_176075(msg_513603);
		result_513452 = excp_513605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_513601.readNum = addInt(self_513601.readNum, 1);
		F.line = 438;
		try {
		if (of_py_int_object_374315(other_513451)) {
		F.line = 53;
		F.line = 752;
		var idx_513628 = to_int_379674(other_513451);
		if ((idx_513628 < 0)) {
		F.line = 754;
		idx_513628 = addInt((self_513601.items != null ? self_513601.items.length : 0), idx_513628);
		}
		
			if ((idx_513628 < 0)) Tmp2 = true; else {				Tmp2 = ((self_513601.items != null ? self_513601.items.length : 0) <= idx_513628);			}		if (Tmp2) {
		F.line = 756;
		var msg_513630 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_513628)+""),makeNimstrLit(", len: "),cstrToNimstr(((self_513601.items != null ? self_513601.items.length : 0))+""));
		F.line = 757;
		F.line = 104;
		var excp_513632 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_513632.tk = 6;
		F.line = 106;
		excp_513632.thrown = true;
		F.line = 107;
		excp_513632.msg = new_py_string_176075(msg_513630);
		result_513452 = excp_513632;
		break BeforeRet;
		}
		
		var idx_513634 = idx_513628;
		F.line = 54;
		result_513452 = self_513601.items[chckIndx(idx_513634, 0, self_513601.items.length+0-1)-0];
		break BeforeRet;
		}
		
		if (of_py_slice_object_467109(other_513451)) {
		F.line = 56;
		var slice_513635 = other_513451;
		F.line = 57;
		var new_list_513636 = new_py_list_511257();
		F.line = 58;
		var ret_obj_513639 = get_slice_items_468141(slice_513635, self_513601, "items", new_list_513636, "items");
			if (of_py_exception_object_358259(ret_obj_513639)) {
			Tmp3 = ret_obj_513639.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 60;
		result_513452 = ret_obj_513639;
		break BeforeRet;
		}
		else {
			F.line = 62;
			result_513452 = new_list_513636;
			break BeforeRet;
		}
		
		}
		
		F.line = 64;
		F.line = 129;
		var name_513646 = other_513451.pyType.name;
		F.line = 130;
		var msg_513648 = (makeNimstrLit("list indices must be integers or slices, not ")).concat(name_513646);
		F.line = 104;
		var excp_513650 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_513650.tk = 3;
		F.line = 106;
		excp_513650.thrown = true;
		F.line = 107;
		excp_513650.msg = new_py_string_176075(msg_513648);
		result_513452 = excp_513650;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_513601.readNum = subInt(self_513601.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_513452;

}

function setitem_py_list_object_magic_513678(self_no_cast_513680, arg1_513681, arg2_513682) {
			var Tmp1;
			var Tmp3;

	var result_513683 = null;

	var F={procname:"listobject.setitemPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_513680.m_type, NTI510255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_513801 = self_no_cast_513680;
			if ((0 < self_513801.readNum)) Tmp1 = true; else {				Tmp1 = self_513801.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_513805 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_513807 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_513807.tk = 8;
		F.line = 106;
		excp_513807.thrown = true;
		F.line = 107;
		excp_513807.msg = new_py_string_176075(msg_513805);
		result_513683 = excp_513807;
		break BeforeRet;
		}
		
		F.line = 408;
		self_513801.writeLock = true;
		F.line = 438;
		try {
		if (of_py_int_object_374315(arg1_513681)) {
		F.line = 69;
		F.line = 752;
		var idx_513821 = to_int_379674(arg1_513681);
		if ((idx_513821 < 0)) {
		F.line = 754;
		idx_513821 = addInt((self_513801.items != null ? self_513801.items.length : 0), idx_513821);
		}
		
			if ((idx_513821 < 0)) Tmp3 = true; else {				Tmp3 = ((self_513801.items != null ? self_513801.items.length : 0) <= idx_513821);			}		if (Tmp3) {
		F.line = 756;
		var msg_513823 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_513821)+""),makeNimstrLit(", len: "),cstrToNimstr(((self_513801.items != null ? self_513801.items.length : 0))+""));
		F.line = 757;
		F.line = 104;
		var excp_513825 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_513825.tk = 6;
		F.line = 106;
		excp_513825.thrown = true;
		F.line = 107;
		excp_513825.msg = new_py_string_176075(msg_513823);
		result_513683 = excp_513825;
		break BeforeRet;
		}
		
		var idx_513827 = idx_513821;
		F.line = 70;
		self_513801.items[chckIndx(idx_513827, 0, self_513801.items.length+0-1)-0] = arg2_513682;
		F.line = 71;
		result_513683 = py_none_356044;
		break BeforeRet;
		}
		
		if (of_py_slice_object_467109(arg1_513681)) {
		F.line = 73;
		F.line = 104;
		var excp_513829 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_513829.tk = 3;
		F.line = 106;
		excp_513829.thrown = true;
		F.line = 107;
		excp_513829.msg = new_py_string_176075(makeNimstrLit("store to slice not implemented"));
		result_513683 = excp_513829;
		break BeforeRet;
		}
		
		F.line = 74;
		F.line = 129;
		var name_513837 = arg1_513681.pyType.name;
		F.line = 130;
		var msg_513839 = (makeNimstrLit("list indices must be integers or slices, not ")).concat(name_513837);
		F.line = 104;
		var excp_513841 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_513841.tk = 3;
		F.line = 106;
		excp_513841.thrown = true;
		F.line = 107;
		excp_513841.msg = new_py_string_176075(msg_513839);
		result_513683 = excp_513841;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 410;
		self_513801.writeLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_513683;

}

function raw_get_160346(t_160351, key_160353, hc_160355, hc_160355_Idx) {
						var Tmp3;

	var result_160356 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_160355[hc_160355_Idx] = hash_143900(key_160353);
		if ((hc_160355[hc_160355_Idx] == 0)) {
		F.line = 45;
		hc_160355[hc_160355_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_160368 = (hc_160355[hc_160355_Idx] & (t_160351.data != null ? (t_160351.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_160351.data[chckIndx(h_160368, 0, t_160351.data.length+0-1)-0].Field0)) break L2;
						if (!(t_160351.data[chckIndx(h_160368, 0, t_160351.data.length+0-1)-0].Field0 == hc_160355[hc_160355_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_160351.data[chckIndx(h_160368, 0, t_160351.data.length+0-1)-0].Field1, key_160353);						}					if (Tmp3) {
					F.line = 38;
					result_160356 = h_160368;
					break BeforeRet;
					}
					
					F.line = 39;
					h_160368 = next_try_146614(h_160368, (t_160351.data != null ? (t_160351.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_160356 = subInt(-1, h_160368);
	} while (false);
	framePtr = F.prev;

	return result_160356;

}

function has_key_160333(t_160339, key_160341) {
	var result_160342 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_160343 = [0];
		F.line = 264;
		result_160342 = (0 <= raw_get_160346(t_160339, key_160341, hc_160343, 0));
	framePtr = F.prev;

	return result_160342;

}

function raw_insert_163490(t_163497, data_163501, data_163501_Idx, key_163503, val_163505, hc_163507, h_163509) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_163501[data_163501_Idx][chckIndx(h_163509, 0, data_163501[data_163501_Idx].length+0-1)-0].Field1 = nimCopy(null, key_163503, NTI138);
		F.line = 65;
		data_163501[data_163501_Idx][chckIndx(h_163509, 0, data_163501[data_163501_Idx].length+0-1)-0].Field2 = val_163505;
		F.line = 66;
		data_163501[data_163501_Idx][chckIndx(h_163509, 0, data_163501[data_163501_Idx].length+0-1)-0].Field0 = hc_163507;
	framePtr = F.prev;

	
}

function enlarge_162246(t_162253) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_162261 = null;
		F.line = 314;
		n_162261 = new Array(chckRange(mulInt((t_162253.data != null ? t_162253.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_162253.data != null ? t_162253.data.length : 0), 2), 0, 2147483647);++i) {n_162261[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_162253.data; t_162253.data = n_162261; n_162261 = Tmp1;		L2: do {
			F.line = 316;
			var i_162516 = 0;
			F.line = 2088;
			var colontmp__164231 = 0;
			F.line = 316;
			colontmp__164231 = (n_162261 != null ? (n_162261.length-1) : -1);
			F.line = 2094;
			var res_164234 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_164234 <= colontmp__164231)) break L4;
						F.line = 2096;
						i_162516 = res_164234;
						F.line = 317;
						var eh_162752 = n_162261[chckIndx(i_162516, 0, n_162261.length+0-1)-0].Field0;
						if (is_filled_146491(eh_162752)) {
						F.line = 319;
						var j_162761 = (eh_162752 & (t_162253.data != null ? (t_162253.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_162253.data[chckIndx(j_162761, 0, t_162253.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_162761 = next_try_146614(j_162761, (t_162253.data != null ? (t_162253.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_163490(t_162253, t_162253, "data", n_162261[chckIndx(i_162516, 0, n_162261.length+0-1)-0].Field1, n_162261[chckIndx(i_162516, 0, n_162261.length+0-1)-0].Field2, eh_162752, j_162761);
						}
						
						F.line = 2097;
						res_164234 = addInt(res_164234, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_164253(t_164258, key_164260, hc_164262) {
	var result_164263 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_164272 = (hc_164262 & (t_164258.data != null ? (t_164258.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_164258.data[chckIndx(h_164272, 0, t_164258.data.length+0-1)-0].Field0)) break L2;
					if (((t_164258.data[chckIndx(h_164272, 0, t_164258.data.length+0-1)-0].Field0 == hc_164262) && eqStrings(t_164258.data[chckIndx(h_164272, 0, t_164258.data.length+0-1)-0].Field1, key_164260))) {
					F.line = 38;
					result_164263 = h_164272;
					break BeforeRet;
					}
					
					F.line = 39;
					h_164272 = next_try_146614(h_164272, (t_164258.data != null ? (t_164258.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_164263 = subInt(-1, h_164272);
	} while (false);
	framePtr = F.prev;

	return result_164263;

}

function HEX5BHEX5DHEX3D_161747(t_161754, key_161756, val_161758) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_161759 = [0];
		F.line = 98;
		var index_161772 = raw_get_160346(t_161754, key_161756, hc_161759, 0);
		if ((0 <= index_161772)) {
		F.line = 99;
		t_161754.data[chckIndx(index_161772, 0, t_161754.data.length+0-1)-0].Field2 = val_161758;
		}
		else {
			if (must_rehash_146509((t_161754.data != null ? t_161754.data.length : 0), t_161754.counter)) {
			F.line = 90;
			enlarge_162246(t_161754);
			F.line = 91;
			index_161772 = raw_get_known_hc_164253(t_161754, key_161756, hc_161759[0]);
			}
			
			F.line = 92;
			index_161772 = subInt(-1, index_161772);
			F.line = 93;
			raw_insert_163490(t_161754, t_161754, "data", key_161756, val_161758, hc_161759[0], index_161772);
			F.line = 100;
			t_161754.counter = addInt(t_161754.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function register_bltin_method_160182(t_160184, name_160185, fun_160186) {
	var F={procname:"pyobject.registerBltinMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		if (has_key_160333(t_160184.bltinMethods, name_160185)) {
		F.line = 2895;
		var e_161406 = null;
		F.line = 2896;
		e_161406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 92;
		F.line = 92;
		var fmt_res_161416 = mnewString(0);
		F.line = 92;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(makeNimstrLit("Method ")); } else { fmt_res_161416 = makeNimstrLit("Method "); };
		F.line = 260;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(name_160185); } else { fmt_res_161416 = name_160185.slice(); };
		F.line = 92;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(makeNimstrLit(" is registered twice for type ")); } else { fmt_res_161416 = makeNimstrLit(" is registered twice for type "); };
		F.line = 260;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(t_160184.name); } else { fmt_res_161416 = t_160184.name.slice(); };
		e_161406.message = nimCopy(null, fmt_res_161416, NTI138);
		F.line = 2891;
		e_161406.parent = null;
		F.line = 92;
		raiseException(e_161406, "InternalError");
		}
		
		F.line = 93;
		HEX5BHEX5DHEX3D_161747(t_160184.bltinMethods, name_160185, fun_160186);
	framePtr = F.prev;

	
}

function append_py_list_object_method_513859(self_no_cast_513861, args_513875) {
			var Tmp1;
		var Tmp2;

	var result_513876 = null;

	var F={procname:"listobject.appendPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_513875 != null ? args_513875.length : 0) == 1))) {
		F.line = 183;
		var msg_513888 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_513893 = mnewString(0);
		F.line = 185;
		if (fmt_res_513893 != null) { fmt_res_513893 = (fmt_res_513893).concat(makeNimstrLit(" argument (")); } else { fmt_res_513893 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_513893 != null) { fmt_res_513893 = (fmt_res_513893).concat(cstrToNimstr(((args_513875 != null ? args_513875.length : 0))+"")); } else { fmt_res_513893 = cstrToNimstr(((args_513875 != null ? args_513875.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_513893 != null) { fmt_res_513893 = (fmt_res_513893).concat(makeNimstrLit(" given)")); } else { fmt_res_513893 = makeNimstrLit(" given)"); };
		msg_513888 = nimCopy(null, (makeNimstrLit("append takes exactly 1")).concat(fmt_res_513893), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_514010 = mnewString(0);
			F.line = 187;
			if (fmt_res_514010 != null) { fmt_res_514010 = (fmt_res_514010).concat(makeNimstrLit(" argument (")); } else { fmt_res_514010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_514010 != null) { fmt_res_514010 = (fmt_res_514010).concat(cstrToNimstr(((args_513875 != null ? args_513875.length : 0))+"")); } else { fmt_res_514010 = cstrToNimstr(((args_513875 != null ? args_513875.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_514010 != null) { fmt_res_514010 = (fmt_res_514010).concat(makeNimstrLit(" given)")); } else { fmt_res_514010 = makeNimstrLit(" given)"); };
			msg_513888 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_514010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_514209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_514209.tk = 3;
		F.line = 106;
		excp_514209.thrown = true;
		F.line = 107;
		excp_514209.msg = new_py_string_176075(msg_513888);
		result_513876 = excp_514209;
		break BeforeRet;
		}
		
		F.line = 230;
		var item_514211 = args_513875[chckIndx(0, 0, args_513875.length+0-1)-0];
		if (!(isObj(self_no_cast_513861.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_514401 = self_no_cast_513861;
			if ((0 < self_514401.readNum)) Tmp1 = true; else {				Tmp1 = self_514401.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_514405 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_514407 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_514407.tk = 8;
		F.line = 106;
		excp_514407.thrown = true;
		F.line = 107;
		excp_514407.msg = new_py_string_176075(msg_514405);
		result_513876 = excp_514407;
		break BeforeRet;
		}
		
		F.line = 408;
		self_514401.writeLock = true;
		F.line = 444;
		try {
		F.line = 78;
		if (self_514401.items != null) { self_514401.items.push(item_514211); } else { self_514401.items = [item_514211]; };
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_514401.writeLock = false;
		}
		result_513876 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_513876;

}

function clear_py_list_object_method_514435(self_no_cast_514437, args_514451) {
			var Tmp1;
		var Tmp2;

	var result_514452 = null;

	var F={procname:"listobject.clearPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_514451 != null ? args_514451.length : 0) == 0))) {
		F.line = 183;
		var msg_514464 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_514469 = mnewString(0);
		F.line = 185;
		if (fmt_res_514469 != null) { fmt_res_514469 = (fmt_res_514469).concat(makeNimstrLit(" argument (")); } else { fmt_res_514469 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_514469 != null) { fmt_res_514469 = (fmt_res_514469).concat(cstrToNimstr(((args_514451 != null ? args_514451.length : 0))+"")); } else { fmt_res_514469 = cstrToNimstr(((args_514451 != null ? args_514451.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_514469 != null) { fmt_res_514469 = (fmt_res_514469).concat(makeNimstrLit(" given)")); } else { fmt_res_514469 = makeNimstrLit(" given)"); };
		msg_514464 = nimCopy(null, (makeNimstrLit("clear takes exactly 0")).concat(fmt_res_514469), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_514610 = mnewString(0);
			F.line = 187;
			if (fmt_res_514610 != null) { fmt_res_514610 = (fmt_res_514610).concat(makeNimstrLit(" argument (")); } else { fmt_res_514610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_514610 != null) { fmt_res_514610 = (fmt_res_514610).concat(cstrToNimstr(((args_514451 != null ? args_514451.length : 0))+"")); } else { fmt_res_514610 = cstrToNimstr(((args_514451 != null ? args_514451.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_514610 != null) { fmt_res_514610 = (fmt_res_514610).concat(makeNimstrLit(" given)")); } else { fmt_res_514610 = makeNimstrLit(" given)"); };
			msg_514464 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_514610), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_514809 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_514809.tk = 3;
		F.line = 106;
		excp_514809.thrown = true;
		F.line = 107;
		excp_514809.msg = new_py_string_176075(msg_514464);
		result_514452 = excp_514809;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_514437.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_515001 = self_no_cast_514437;
			if ((0 < self_515001.readNum)) Tmp1 = true; else {				Tmp1 = self_515001.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_515005 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_515007 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_515007.tk = 8;
		F.line = 106;
		excp_515007.thrown = true;
		F.line = 107;
		excp_515007.msg = new_py_string_176075(msg_515005);
		result_514452 = excp_515007;
		break BeforeRet;
		}
		
		F.line = 408;
		self_515001.writeLock = true;
		F.line = 444;
		try {
		F.line = 83;
		if (self_515001.items.length < 0) { for (var i=self_515001.items.length;i<0;++i) self_515001.items.push(null); }
               else { self_515001.items.length = 0; };
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_515001.writeLock = false;
		}
		result_514452 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_514452;

}

function copy_py_list_object_method_515035(self_no_cast_515037, args_515051) {
		var Tmp1;

	var result_515052 = null;

	var F={procname:"listobject.copyPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_515051 != null ? args_515051.length : 0) == 0))) {
		F.line = 183;
		var msg_515064 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_515069 = mnewString(0);
		F.line = 185;
		if (fmt_res_515069 != null) { fmt_res_515069 = (fmt_res_515069).concat(makeNimstrLit(" argument (")); } else { fmt_res_515069 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_515069 != null) { fmt_res_515069 = (fmt_res_515069).concat(cstrToNimstr(((args_515051 != null ? args_515051.length : 0))+"")); } else { fmt_res_515069 = cstrToNimstr(((args_515051 != null ? args_515051.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_515069 != null) { fmt_res_515069 = (fmt_res_515069).concat(makeNimstrLit(" given)")); } else { fmt_res_515069 = makeNimstrLit(" given)"); };
		msg_515064 = nimCopy(null, (makeNimstrLit("copy takes exactly 0")).concat(fmt_res_515069), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_515210 = mnewString(0);
			F.line = 187;
			if (fmt_res_515210 != null) { fmt_res_515210 = (fmt_res_515210).concat(makeNimstrLit(" argument (")); } else { fmt_res_515210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_515210 != null) { fmt_res_515210 = (fmt_res_515210).concat(cstrToNimstr(((args_515051 != null ? args_515051.length : 0))+"")); } else { fmt_res_515210 = cstrToNimstr(((args_515051 != null ? args_515051.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_515210 != null) { fmt_res_515210 = (fmt_res_515210).concat(makeNimstrLit(" given)")); } else { fmt_res_515210 = makeNimstrLit(" given)"); };
			msg_515064 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_515210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_515409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_515409.tk = 3;
		F.line = 106;
		excp_515409.thrown = true;
		F.line = 107;
		excp_515409.msg = new_py_string_176075(msg_515064);
		result_515052 = excp_515409;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_515037.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_515601 = self_no_cast_515037;
		if (self_515601.writeLock) {
		F.line = 414;
		var msg_515603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_515605 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_515605.tk = 8;
		F.line = 106;
		excp_515605.thrown = true;
		F.line = 107;
		excp_515605.msg = new_py_string_176075(msg_515603);
		result_515052 = excp_515605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_515601.readNum = addInt(self_515601.readNum, 1);
		F.line = 444;
		try {
		F.line = 88;
		var new_l_515616 = new_py_list_511257();
		F.line = 89;
		new_l_515616.items = nimCopy(null, self_515601.items, NTI510256);
		Tmp1 = new_l_515616;
		} finally {
		framePtr = F;
		F.line = 417;
		self_515601.readNum = subInt(self_515601.readNum, 1);
		}
		result_515052 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_515052;

}

function count_py_list_object_method_515642(self_no_cast_515644, args_515658) {
		var Tmp1;
							var Tmp6;

	var result_515659 = null;

	var F={procname:"listobject.countPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_515658 != null ? args_515658.length : 0) == 1))) {
		F.line = 183;
		var msg_515671 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_515676 = mnewString(0);
		F.line = 185;
		if (fmt_res_515676 != null) { fmt_res_515676 = (fmt_res_515676).concat(makeNimstrLit(" argument (")); } else { fmt_res_515676 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_515676 != null) { fmt_res_515676 = (fmt_res_515676).concat(cstrToNimstr(((args_515658 != null ? args_515658.length : 0))+"")); } else { fmt_res_515676 = cstrToNimstr(((args_515658 != null ? args_515658.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_515676 != null) { fmt_res_515676 = (fmt_res_515676).concat(makeNimstrLit(" given)")); } else { fmt_res_515676 = makeNimstrLit(" given)"); };
		msg_515671 = nimCopy(null, (makeNimstrLit("count takes exactly 1")).concat(fmt_res_515676), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_515810 = mnewString(0);
			F.line = 187;
			if (fmt_res_515810 != null) { fmt_res_515810 = (fmt_res_515810).concat(makeNimstrLit(" argument (")); } else { fmt_res_515810 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_515810 != null) { fmt_res_515810 = (fmt_res_515810).concat(cstrToNimstr(((args_515658 != null ? args_515658.length : 0))+"")); } else { fmt_res_515810 = cstrToNimstr(((args_515658 != null ? args_515658.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_515810 != null) { fmt_res_515810 = (fmt_res_515810).concat(makeNimstrLit(" given)")); } else { fmt_res_515810 = makeNimstrLit(" given)"); };
			msg_515671 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_515810), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_516009 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_516009.tk = 3;
		F.line = 106;
		excp_516009.thrown = true;
		F.line = 107;
		excp_516009.msg = new_py_string_176075(msg_515671);
		result_515659 = excp_516009;
		break BeforeRet;
		}
		
		F.line = 230;
		var target_516011 = args_515658[chckIndx(0, 0, args_515658.length+0-1)-0];
		if (!(isObj(self_no_cast_515644.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_516201 = self_no_cast_515644;
		if (self_516201.writeLock) {
		F.line = 414;
		var msg_516203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_516205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_516205.tk = 8;
		F.line = 106;
		excp_516205.thrown = true;
		F.line = 107;
		excp_516205.msg = new_py_string_176075(msg_516203);
		result_515659 = excp_516205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_516201.readNum = addInt(self_516201.readNum, 1);
		F.line = 444;
		try {
		F.line = 94;
		var count_516216 = 0;
		L3: do {
			F.line = 95;
			var item_516225 = null;
			F.line = 3909;
			var colontmp__516834 = null;
			F.line = 95;
			colontmp__516834 = self_516201.items;
			F.line = 3911;
			var i_516837 = 0;
			F.line = 3912;
			var l_516839 = (colontmp__516834 != null ? colontmp__516834.length : 0);
			L4: do {
				F.line = 3913;
					L5: while (true) {
					if (!(i_516837 < l_516839)) break L5;
						F.line = 3914;
						item_516225 = colontmp__516834[chckIndx(i_516837, 0, colontmp__516834.length+0-1)-0];
						F.line = 96;
						F.line = 56;
						if ((item_516225.pyType === null)) {
						F.line = 2895;
						var e_516252 = null;
						F.line = 2896;
						e_516252 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_516252.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_516252.parent = null;
						F.line = 26;
						raiseException(e_516252, "InternalError");
						}
						
						F.line = 27;
						var fun_516402 = item_516225.pyType.magicMethods.Field18;
						if ((fun_516402 === null)) {
						F.line = 29;
						var obj_type_str_516411 = item_516225.pyType.name;
						F.line = 30;
						var method_str_516413 = makeNimstrLit("eq");
						F.line = 31;
						var msg_516415 = (makeNimstrLit("No ")).concat(method_str_516413,makeNimstrLit(" method for "),obj_type_str_516411,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_516417 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_516417.tk = 3;
						F.line = 106;
						excp_516417.thrown = true;
						F.line = 107;
						excp_516417.msg = new_py_string_176075(msg_516415);
						var excp_516420 = excp_516417;
						F.line = 36;
						result_515659 = excp_516420;
						break BeforeRet;
						}
						
						var fun_516602 = fun_516402;
						F.line = 57;
						var res_516604 = fun_516602(item_516225, target_516011);
						var ret_obj_516801 = res_516604;
							if (of_py_exception_object_358259(ret_obj_516801)) {
							Tmp6 = ret_obj_516801.thrown;
							}
							else {
							Tmp6 = false;
							}
							
						if (Tmp6) {
						F.line = 98;
						result_515659 = ret_obj_516801;
						break BeforeRet;
						}
						
						if ((ret_obj_516801 == py_true_obj_354074)) {
						F.line = 100;
						count_516216 = addInt(count_516216, 1);
						}
						
						F.line = 3915;
						i_516837 = addInt(i_516837, 1);
						if (!(((colontmp__516834 != null ? colontmp__516834.length : 0) == l_516839))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		Tmp1 = new_py_int_375257(count_516216);
		} finally {
		framePtr = F;
		F.line = 417;
		self_516201.readNum = subInt(self_516201.readNum, 1);
		}
		result_515659 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_515659;

}

function doclear_py_list_object_method_516855(self_no_cast_516857, args_516871) {
		var Tmp1;

	var result_516872 = null;

	var F={procname:"listobject.doclearPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_516871 != null ? args_516871.length : 0) == 0))) {
		F.line = 183;
		var msg_516884 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_516889 = mnewString(0);
		F.line = 185;
		if (fmt_res_516889 != null) { fmt_res_516889 = (fmt_res_516889).concat(makeNimstrLit(" argument (")); } else { fmt_res_516889 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_516889 != null) { fmt_res_516889 = (fmt_res_516889).concat(cstrToNimstr(((args_516871 != null ? args_516871.length : 0))+"")); } else { fmt_res_516889 = cstrToNimstr(((args_516871 != null ? args_516871.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_516889 != null) { fmt_res_516889 = (fmt_res_516889).concat(makeNimstrLit(" given)")); } else { fmt_res_516889 = makeNimstrLit(" given)"); };
		msg_516884 = nimCopy(null, (makeNimstrLit("doClear takes exactly 0")).concat(fmt_res_516889), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_517010 = mnewString(0);
			F.line = 187;
			if (fmt_res_517010 != null) { fmt_res_517010 = (fmt_res_517010).concat(makeNimstrLit(" argument (")); } else { fmt_res_517010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_517010 != null) { fmt_res_517010 = (fmt_res_517010).concat(cstrToNimstr(((args_516871 != null ? args_516871.length : 0))+"")); } else { fmt_res_517010 = cstrToNimstr(((args_516871 != null ? args_516871.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_517010 != null) { fmt_res_517010 = (fmt_res_517010).concat(makeNimstrLit(" given)")); } else { fmt_res_517010 = makeNimstrLit(" given)"); };
			msg_516884 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_517010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_517209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_517209.tk = 3;
		F.line = 106;
		excp_517209.thrown = true;
		F.line = 107;
		excp_517209.msg = new_py_string_176075(msg_516884);
		result_516872 = excp_517209;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_516857.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_517401 = self_no_cast_516857;
		if (self_517401.writeLock) {
		F.line = 414;
		var msg_517403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_517405 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_517405.tk = 8;
		F.line = 106;
		excp_517405.thrown = true;
		F.line = 107;
		excp_517405.msg = new_py_string_176075(msg_517403);
		result_516872 = excp_517405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_517401.readNum = addInt(self_517401.readNum, 1);
		F.line = 444;
		try {
		Tmp1 = clear_py_list_object_method_514435(self_517401, []);
		} finally {
		framePtr = F;
		F.line = 417;
		self_517401.readNum = subInt(self_517401.readNum, 1);
		}
		result_516872 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_516872;

}

function doread_py_list_object_method_517441(self_no_cast_517443, args_517457) {
			var Tmp1;

	var result_517458 = null;

	var F={procname:"listobject.doreadPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(((args_517457 != null ? args_517457.length : 0) == 0))) {
		F.line = 183;
		var msg_517470 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_517475 = mnewString(0);
		F.line = 185;
		if (fmt_res_517475 != null) { fmt_res_517475 = (fmt_res_517475).concat(makeNimstrLit(" argument (")); } else { fmt_res_517475 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_517475 != null) { fmt_res_517475 = (fmt_res_517475).concat(cstrToNimstr(((args_517457 != null ? args_517457.length : 0))+"")); } else { fmt_res_517475 = cstrToNimstr(((args_517457 != null ? args_517457.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_517475 != null) { fmt_res_517475 = (fmt_res_517475).concat(makeNimstrLit(" given)")); } else { fmt_res_517475 = makeNimstrLit(" given)"); };
		msg_517470 = nimCopy(null, (makeNimstrLit("doRead takes exactly 0")).concat(fmt_res_517475), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_517610 = mnewString(0);
			F.line = 187;
			if (fmt_res_517610 != null) { fmt_res_517610 = (fmt_res_517610).concat(makeNimstrLit(" argument (")); } else { fmt_res_517610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_517610 != null) { fmt_res_517610 = (fmt_res_517610).concat(cstrToNimstr(((args_517457 != null ? args_517457.length : 0))+"")); } else { fmt_res_517610 = cstrToNimstr(((args_517457 != null ? args_517457.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_517610 != null) { fmt_res_517610 = (fmt_res_517610).concat(makeNimstrLit(" given)")); } else { fmt_res_517610 = makeNimstrLit(" given)"); };
			msg_517470 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_517610), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_517809 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_517809.tk = 3;
		F.line = 106;
		excp_517809.thrown = true;
		F.line = 107;
		excp_517809.msg = new_py_string_176075(msg_517470);
		result_517458 = excp_517809;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_517443.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_518001 = self_no_cast_517443;
			if ((0 < self_518001.readNum)) Tmp1 = true; else {				Tmp1 = self_518001.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_518005 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_518007 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_518007.tk = 8;
		F.line = 106;
		excp_518007.thrown = true;
		F.line = 107;
		excp_518007.msg = new_py_string_176075(msg_518005);
		result_517458 = excp_518007;
		break BeforeRet;
		}
		
		F.line = 408;
		self_518001.writeLock = true;
		F.line = 444;
		try {
		F.line = 112;
		result_517458 = doclear_py_list_object_method_516855(self_518001, []);
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 410;
		self_518001.writeLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_517458;

}

function aint_py_list_object_method_518027(self_no_cast_518029, args_518043) {
		var Tmp1;

	var result_518044 = null;

	var F={procname:"listobject.aintPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_518043 != null ? args_518043.length : 0) == 1))) {
		F.line = 183;
		var msg_518056 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_518061 = mnewString(0);
		F.line = 185;
		if (fmt_res_518061 != null) { fmt_res_518061 = (fmt_res_518061).concat(makeNimstrLit(" argument (")); } else { fmt_res_518061 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_518061 != null) { fmt_res_518061 = (fmt_res_518061).concat(cstrToNimstr(((args_518043 != null ? args_518043.length : 0))+"")); } else { fmt_res_518061 = cstrToNimstr(((args_518043 != null ? args_518043.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_518061 != null) { fmt_res_518061 = (fmt_res_518061).concat(makeNimstrLit(" given)")); } else { fmt_res_518061 = makeNimstrLit(" given)"); };
		msg_518056 = nimCopy(null, (makeNimstrLit("aInt takes exactly 1")).concat(fmt_res_518061), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_518210 = mnewString(0);
			F.line = 187;
			if (fmt_res_518210 != null) { fmt_res_518210 = (fmt_res_518210).concat(makeNimstrLit(" argument (")); } else { fmt_res_518210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_518210 != null) { fmt_res_518210 = (fmt_res_518210).concat(cstrToNimstr(((args_518043 != null ? args_518043.length : 0))+"")); } else { fmt_res_518210 = cstrToNimstr(((args_518043 != null ? args_518043.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_518210 != null) { fmt_res_518210 = (fmt_res_518210).concat(makeNimstrLit(" given)")); } else { fmt_res_518210 = makeNimstrLit(" given)"); };
			msg_518056 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_518210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_518409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_518409.tk = 3;
		F.line = 106;
		excp_518409.thrown = true;
		F.line = 107;
		excp_518409.msg = new_py_string_176075(msg_518056);
		result_518044 = excp_518409;
		break BeforeRet;
		}
		
		if (!(isObj(args_518043[chckIndx(0, 0, args_518043.length+0-1)-0].m_type, NTI374303))) {
		F.line = 185;
		var expected_518422 = nimCopy(null, py_int_object_type_374313.name, NTI138);
		F.line = 186;
		var got_518423 = nimCopy(null, args_518043[chckIndx(0, 0, args_518043.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_518424 = makeNimstrLit("aInt");
		F.line = 188;
		F.line = 188;
		var fmt_res_518428 = mnewString(0);
		F.line = 260;
		if (fmt_res_518428 != null) { fmt_res_518428 = (fmt_res_518428).concat(expected_518422); } else { fmt_res_518428 = expected_518422.slice(); };
		F.line = 188;
		if (fmt_res_518428 != null) { fmt_res_518428 = (fmt_res_518428).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_518428 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_518428 != null) { fmt_res_518428 = (fmt_res_518428).concat(m_name_518424); } else { fmt_res_518428 = m_name_518424.slice(); };
		F.line = 188;
		if (fmt_res_518428 != null) { fmt_res_518428 = (fmt_res_518428).concat(makeNimstrLit(" (got ")); } else { fmt_res_518428 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_518428 != null) { fmt_res_518428 = (fmt_res_518428).concat(got_518423); } else { fmt_res_518428 = got_518423.slice(); };
		F.line = 188;
		if (fmt_res_518428 != null) { fmt_res_518428 = (fmt_res_518428).concat(makeNimstrLit(")")); } else { fmt_res_518428 = makeNimstrLit(")"); };
		var msg_519002 = nimCopy(null, fmt_res_518428, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_519004 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_519004.tk = 3;
		F.line = 106;
		excp_519004.thrown = true;
		F.line = 107;
		excp_519004.msg = new_py_string_176075(msg_519002);
		result_518044 = excp_519004;
		break BeforeRet;
		}
		
		F.line = 237;
		var i_519006 = args_518043[chckIndx(0, 0, args_518043.length+0-1)-0];
		if (!(isObj(self_no_cast_518029.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_519201 = self_no_cast_518029;
		if (self_519201.writeLock) {
		F.line = 414;
		var msg_519203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_519205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_519205.tk = 8;
		F.line = 106;
		excp_519205.thrown = true;
		F.line = 107;
		excp_519205.msg = new_py_string_176075(msg_519203);
		result_518044 = excp_519205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_519201.readNum = addInt(self_519201.readNum, 1);
		F.line = 444;
		try {
		F.line = 117;
		if (self_519201.items != null) { self_519201.items.push(i_519006); } else { self_519201.items = [i_519006]; };
		Tmp1 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 417;
		self_519201.readNum = subInt(self_519201.readNum, 1);
		}
		result_518044 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_518044;

}

function hello_py_list_object_method_519273(self_no_cast_519275, args_519289) {
	var result_519290 = null;

	var F={procname:"listobject.helloPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_519289 != null ? args_519289.length : 0) == 0))) {
		F.line = 183;
		var msg_519302 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_519307 = mnewString(0);
		F.line = 185;
		if (fmt_res_519307 != null) { fmt_res_519307 = (fmt_res_519307).concat(makeNimstrLit(" argument (")); } else { fmt_res_519307 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_519307 != null) { fmt_res_519307 = (fmt_res_519307).concat(cstrToNimstr(((args_519289 != null ? args_519289.length : 0))+"")); } else { fmt_res_519307 = cstrToNimstr(((args_519289 != null ? args_519289.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_519307 != null) { fmt_res_519307 = (fmt_res_519307).concat(makeNimstrLit(" given)")); } else { fmt_res_519307 = makeNimstrLit(" given)"); };
		msg_519302 = nimCopy(null, (makeNimstrLit("hello takes exactly 0")).concat(fmt_res_519307), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_519410 = mnewString(0);
			F.line = 187;
			if (fmt_res_519410 != null) { fmt_res_519410 = (fmt_res_519410).concat(makeNimstrLit(" argument (")); } else { fmt_res_519410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_519410 != null) { fmt_res_519410 = (fmt_res_519410).concat(cstrToNimstr(((args_519289 != null ? args_519289.length : 0))+"")); } else { fmt_res_519410 = cstrToNimstr(((args_519289 != null ? args_519289.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_519410 != null) { fmt_res_519410 = (fmt_res_519410).concat(makeNimstrLit(" given)")); } else { fmt_res_519410 = makeNimstrLit(" given)"); };
			msg_519302 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_519410), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_519609 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_519609.tk = 3;
		F.line = 106;
		excp_519609.thrown = true;
		F.line = 107;
		excp_519609.msg = new_py_string_176075(msg_519302);
		result_519290 = excp_519609;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_519275.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_519801 = self_no_cast_519275;
		F.line = 14;
		rawEcho(makeNimstrLit("hello"));
		L1: do {
			F.line = 15;
			var line_519808 = null;
			F.line = 455;
			var last_519814 = 0;
			F.line = 456;
			var splits_519816 = -1;
			L2: do {
				F.line = 614;
					L3: while (true) {
					if (!(last_519814 <= 5)) break L3;
						F.line = 459;
						var first_519818 = last_519814;
						L4: do {
							F.line = 460;
								L5: while (true) {
								if (!((last_519814 < 5) && !(substr_eq_132789(makeNimstrLit("hello"), last_519814, makeNimstrLit("\x0A"))))) break L5;
									F.line = 461;
									last_519814 = addInt(last_519814, 1);
								}
						} while(false);
						if ((splits_519816 == 0)) {
						F.line = 462;
						last_519814 = 5;
						}
						
						F.line = 463;
						line_519808 = substr_23422(makeNimstrLit("hello"), first_519818, subInt(last_519814, 1));
						F.line = 16;
						log(" ", toJSStr(line_519808));
						if ((splits_519816 == 0)) {
						F.line = 464;
						break L2;
						}
						
						F.line = 465;
						splits_519816 = subInt(splits_519816, 1);
						F.line = 466;
						last_519814 = addInt(last_519814, 1);
					}
			} while(false);
		} while(false);
		result_519290 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_519290;

}

function index_py_list_object_method_520003(self_no_cast_520005, args_520019) {
		var Tmp1;
							var Tmp6;

	var result_520020 = null;

	var F={procname:"listobject.indexPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_520019 != null ? args_520019.length : 0) == 1))) {
		F.line = 183;
		var msg_520032 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_520037 = mnewString(0);
		F.line = 185;
		if (fmt_res_520037 != null) { fmt_res_520037 = (fmt_res_520037).concat(makeNimstrLit(" argument (")); } else { fmt_res_520037 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_520037 != null) { fmt_res_520037 = (fmt_res_520037).concat(cstrToNimstr(((args_520019 != null ? args_520019.length : 0))+"")); } else { fmt_res_520037 = cstrToNimstr(((args_520019 != null ? args_520019.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_520037 != null) { fmt_res_520037 = (fmt_res_520037).concat(makeNimstrLit(" given)")); } else { fmt_res_520037 = makeNimstrLit(" given)"); };
		msg_520032 = nimCopy(null, (makeNimstrLit("index takes exactly 1")).concat(fmt_res_520037), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_520210 = mnewString(0);
			F.line = 187;
			if (fmt_res_520210 != null) { fmt_res_520210 = (fmt_res_520210).concat(makeNimstrLit(" argument (")); } else { fmt_res_520210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_520210 != null) { fmt_res_520210 = (fmt_res_520210).concat(cstrToNimstr(((args_520019 != null ? args_520019.length : 0))+"")); } else { fmt_res_520210 = cstrToNimstr(((args_520019 != null ? args_520019.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_520210 != null) { fmt_res_520210 = (fmt_res_520210).concat(makeNimstrLit(" given)")); } else { fmt_res_520210 = makeNimstrLit(" given)"); };
			msg_520032 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_520210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_520409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_520409.tk = 3;
		F.line = 106;
		excp_520409.thrown = true;
		F.line = 107;
		excp_520409.msg = new_py_string_176075(msg_520032);
		result_520020 = excp_520409;
		break BeforeRet;
		}
		
		F.line = 230;
		var target_520411 = args_520019[chckIndx(0, 0, args_520019.length+0-1)-0];
		if (!(isObj(self_no_cast_520005.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_520601 = self_no_cast_520005;
		if (self_520601.writeLock) {
		F.line = 414;
		var msg_520603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_520605 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_520605.tk = 8;
		F.line = 106;
		excp_520605.thrown = true;
		F.line = 107;
		excp_520605.msg = new_py_string_176075(msg_520603);
		result_520020 = excp_520605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_520601.readNum = addInt(self_520601.readNum, 1);
		F.line = 444;
		try {
		L3: do {
			F.line = 133;
			var idx_520629 = 0;
			F.line = 133;
			var item_520630 = null;
			F.line = 2352;
			var colontmp__521417 = null;
			F.line = 133;
			colontmp__521417 = self_520601.items;
			F.line = 2354;
			var i_521420 = 0;
			L4: do {
				F.line = 2355;
					L5: while (true) {
					if (!(i_521420 < (colontmp__521417 != null ? colontmp__521417.length : 0))) break L5;
						F.line = 2356;
						idx_520629 = i_521420;
						F.line = 2356;
						item_520630 = colontmp__521417[chckIndx(i_521420, 0, colontmp__521417.length+0-1)-0];
						F.line = 134;
						F.line = 56;
						if ((item_520630.pyType === null)) {
						F.line = 2895;
						var e_520657 = null;
						F.line = 2896;
						e_520657 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_520657.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_520657.parent = null;
						F.line = 26;
						raiseException(e_520657, "InternalError");
						}
						
						F.line = 27;
						var fun_520802 = item_520630.pyType.magicMethods.Field18;
						if ((fun_520802 === null)) {
						F.line = 29;
						var obj_type_str_520811 = item_520630.pyType.name;
						F.line = 30;
						var method_str_520813 = makeNimstrLit("eq");
						F.line = 31;
						var msg_520815 = (makeNimstrLit("No ")).concat(method_str_520813,makeNimstrLit(" method for "),obj_type_str_520811,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_520817 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_520817.tk = 3;
						F.line = 106;
						excp_520817.thrown = true;
						F.line = 107;
						excp_520817.msg = new_py_string_176075(msg_520815);
						var excp_520820 = excp_520817;
						F.line = 36;
						result_520020 = excp_520820;
						break BeforeRet;
						}
						
						var fun_521002 = fun_520802;
						F.line = 57;
						var res_521004 = fun_521002(item_520630, target_520411);
						var ret_obj_521201 = res_521004;
							if (of_py_exception_object_358259(ret_obj_521201)) {
							Tmp6 = ret_obj_521201.thrown;
							}
							else {
							Tmp6 = false;
							}
							
						if (Tmp6) {
						F.line = 136;
						result_520020 = ret_obj_521201;
						break BeforeRet;
						}
						
						if ((ret_obj_521201 == py_true_obj_354074)) {
						F.line = 138;
						result_520020 = new_py_int_375257(idx_520629);
						break BeforeRet;
						}
						
						F.line = 2357;
						i_521420 = addInt(i_521420, 1);
					}
			} while(false);
		} while(false);
		F.line = 139;
		F.line = 139;
		var fmt_res_521215 = mnewString(0);
		F.line = 270;
		if (fmt_res_521215 != null) { fmt_res_521215 = (fmt_res_521215).concat(HEX24_157579(target_520411)); } else { fmt_res_521215 = HEX24_157579(target_520411).slice(); };
		F.line = 139;
		if (fmt_res_521215 != null) { fmt_res_521215 = (fmt_res_521215).concat(makeNimstrLit(" is not in list")); } else { fmt_res_521215 = makeNimstrLit(" is not in list"); };
		var msg_521401 = nimCopy(null, fmt_res_521215, NTI138);
		F.line = 104;
		var excp_521403 = new_py_value_error_simple_362601();
		F.line = 105;
		excp_521403.tk = 5;
		F.line = 106;
		excp_521403.thrown = true;
		F.line = 107;
		excp_521403.msg = new_py_string_176075(msg_521401);
		Tmp1 = excp_521403;
		} finally {
		framePtr = F;
		F.line = 417;
		self_520601.readNum = subInt(self_520601.readNum, 1);
		}
		result_520020 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_520020;

}

function HEX3C_377084(aa_377086, b_377087) {
	var result_377088 = false;

	var F={procname:"numobjects.<",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 218;
		var a_377089 = new_py_int_375257(aa_377086);
		F.line = 219;
		switch (a_377089.sign) {
		case -1:
			F.line = 221;
			switch (b_377087.sign) {
			case -1:
				F.line = 223;
				result_377088 = (do_compare_375584(a_377089, b_377087) == 1);
				break BeforeRet;
				break;
			case 0:
			case 1:
				F.line = 225;
				result_377088 = true;
				break BeforeRet;
				break;
			}
			break;
		case 0:
			F.line = 227;
			result_377088 = (b_377087.sign == 1);
			break BeforeRet;
			break;
		case 1:
			F.line = 229;
			switch (b_377087.sign) {
			case -1:
			case 0:
				F.line = 231;
				result_377088 = false;
				break BeforeRet;
				break;
			case 1:
				F.line = 233;
				result_377088 = (do_compare_375584(a_377089, b_377087) == -1);
				break BeforeRet;
				break;
			}
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_377088;

}

function insert_522625(x_522631, x_522631_Idx, item_522633, i_522635) {
	var F={procname:"insert.insert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1664;
		var it_523001 = null;
		F.line = 1665;
		x_522631[x_522631_Idx].splice(i_522635, 0, it_523001);
		F.line = 1668;
		x_522631[x_522631_Idx][chckIndx(i_522635, 0, x_522631[x_522631_Idx].length+0-1)-0] = item_522633;
	framePtr = F.prev;

	
}

function insert_py_list_object_method_521438(self_no_cast_521440, args_521454) {
			var Tmp1;
		var Tmp2;

	var result_521455 = null;

	var F={procname:"listobject.insertPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_521454 != null ? args_521454.length : 0) == 2))) {
		F.line = 183;
		var msg_521467 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_521472 = mnewString(0);
		F.line = 185;
		if (fmt_res_521472 != null) { fmt_res_521472 = (fmt_res_521472).concat(makeNimstrLit(" argument (")); } else { fmt_res_521472 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_521472 != null) { fmt_res_521472 = (fmt_res_521472).concat(cstrToNimstr(((args_521454 != null ? args_521454.length : 0))+"")); } else { fmt_res_521472 = cstrToNimstr(((args_521454 != null ? args_521454.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_521472 != null) { fmt_res_521472 = (fmt_res_521472).concat(makeNimstrLit(" given)")); } else { fmt_res_521472 = makeNimstrLit(" given)"); };
		msg_521467 = nimCopy(null, (makeNimstrLit("insert takes exactly 2")).concat(fmt_res_521472), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_521610 = mnewString(0);
			F.line = 187;
			if (fmt_res_521610 != null) { fmt_res_521610 = (fmt_res_521610).concat(makeNimstrLit(" argument (")); } else { fmt_res_521610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_521610 != null) { fmt_res_521610 = (fmt_res_521610).concat(cstrToNimstr(((args_521454 != null ? args_521454.length : 0))+"")); } else { fmt_res_521610 = cstrToNimstr(((args_521454 != null ? args_521454.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_521610 != null) { fmt_res_521610 = (fmt_res_521610).concat(makeNimstrLit(" given)")); } else { fmt_res_521610 = makeNimstrLit(" given)"); };
			msg_521467 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_521610), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_521809 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_521809.tk = 3;
		F.line = 106;
		excp_521809.thrown = true;
		F.line = 107;
		excp_521809.msg = new_py_string_176075(msg_521467);
		result_521455 = excp_521809;
		break BeforeRet;
		}
		
		if (!(isObj(args_521454[chckIndx(0, 0, args_521454.length+0-1)-0].m_type, NTI374303))) {
		F.line = 185;
		var expected_521822 = nimCopy(null, py_int_object_type_374313.name, NTI138);
		F.line = 186;
		var got_521823 = nimCopy(null, args_521454[chckIndx(0, 0, args_521454.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_521824 = makeNimstrLit("insert");
		F.line = 188;
		F.line = 188;
		var fmt_res_521828 = mnewString(0);
		F.line = 260;
		if (fmt_res_521828 != null) { fmt_res_521828 = (fmt_res_521828).concat(expected_521822); } else { fmt_res_521828 = expected_521822.slice(); };
		F.line = 188;
		if (fmt_res_521828 != null) { fmt_res_521828 = (fmt_res_521828).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_521828 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_521828 != null) { fmt_res_521828 = (fmt_res_521828).concat(m_name_521824); } else { fmt_res_521828 = m_name_521824.slice(); };
		F.line = 188;
		if (fmt_res_521828 != null) { fmt_res_521828 = (fmt_res_521828).concat(makeNimstrLit(" (got ")); } else { fmt_res_521828 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_521828 != null) { fmt_res_521828 = (fmt_res_521828).concat(got_521823); } else { fmt_res_521828 = got_521823.slice(); };
		F.line = 188;
		if (fmt_res_521828 != null) { fmt_res_521828 = (fmt_res_521828).concat(makeNimstrLit(")")); } else { fmt_res_521828 = makeNimstrLit(")"); };
		var msg_522402 = nimCopy(null, fmt_res_521828, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_522404 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_522404.tk = 3;
		F.line = 106;
		excp_522404.thrown = true;
		F.line = 107;
		excp_522404.msg = new_py_string_176075(msg_522402);
		result_521455 = excp_522404;
		break BeforeRet;
		}
		
		F.line = 237;
		var idx_522406 = args_521454[chckIndx(0, 0, args_521454.length+0-1)-0];
		F.line = 230;
		var item_522407 = args_521454[chckIndx(1, 0, args_521454.length+0-1)-0];
		if (!(isObj(self_no_cast_521440.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_522601 = self_no_cast_521440;
			if ((0 < self_522601.readNum)) Tmp1 = true; else {				Tmp1 = self_522601.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_522605 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_522607 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_522607.tk = 8;
		F.line = 106;
		excp_522607.thrown = true;
		F.line = 107;
		excp_522607.msg = new_py_string_176075(msg_522605);
		result_521455 = excp_522607;
		break BeforeRet;
		}
		
		F.line = 408;
		self_522601.writeLock = true;
		F.line = 444;
		try {
		F.line = 145;
		var int_idx_522609 = 0;
		if (negative_375363(idx_522406)) {
		F.line = 147;
		int_idx_522609 = 0;
		}
		else {
		if (HEX3C_377084((self_522601.items != null ? self_522601.items.length : 0), idx_522406)) {
		F.line = 149;
		int_idx_522609 = (self_522601.items != null ? self_522601.items.length : 0);
		}
		else {
			F.line = 151;
			int_idx_522609 = to_int_379674(idx_522406);
		}
		}
		F.line = 152;
		insert_522625(self_522601, "items", item_522407, chckRange(int_idx_522609, 0, 2147483647));
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_522601.writeLock = false;
		}
		result_521455 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_521455;

}

function pop_523821(s_523827, s_523827_Idx) {
	var result_523828 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_523836 = subInt((s_523827[s_523827_Idx] != null ? s_523827[s_523827_Idx].length : 0), 1);
		F.line = 2525;
		result_523828 = s_523827[s_523827_Idx][chckIndx(l_523836, 0, s_523827[s_523827_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_523827[s_523827_Idx].length < chckRange(l_523836, 0, 2147483647)) { for (var i=s_523827[s_523827_Idx].length;i<chckRange(l_523836, 0, 2147483647);++i) s_523827[s_523827_Idx].push(null); }
               else { s_523827[s_523827_Idx].length = chckRange(l_523836, 0, 2147483647); };
	framePtr = F.prev;

	return result_523828;

}

function pop_py_list_object_method_523233(self_no_cast_523235, args_523249) {
			var Tmp1;
		var Tmp2;

	var result_523250 = null;

	var F={procname:"listobject.popPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_523249 != null ? args_523249.length : 0) == 0))) {
		F.line = 183;
		var msg_523262 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_523267 = mnewString(0);
		F.line = 185;
		if (fmt_res_523267 != null) { fmt_res_523267 = (fmt_res_523267).concat(makeNimstrLit(" argument (")); } else { fmt_res_523267 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_523267 != null) { fmt_res_523267 = (fmt_res_523267).concat(cstrToNimstr(((args_523249 != null ? args_523249.length : 0))+"")); } else { fmt_res_523267 = cstrToNimstr(((args_523249 != null ? args_523249.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_523267 != null) { fmt_res_523267 = (fmt_res_523267).concat(makeNimstrLit(" given)")); } else { fmt_res_523267 = makeNimstrLit(" given)"); };
		msg_523262 = nimCopy(null, (makeNimstrLit("pop takes exactly 0")).concat(fmt_res_523267), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_523410 = mnewString(0);
			F.line = 187;
			if (fmt_res_523410 != null) { fmt_res_523410 = (fmt_res_523410).concat(makeNimstrLit(" argument (")); } else { fmt_res_523410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_523410 != null) { fmt_res_523410 = (fmt_res_523410).concat(cstrToNimstr(((args_523249 != null ? args_523249.length : 0))+"")); } else { fmt_res_523410 = cstrToNimstr(((args_523249 != null ? args_523249.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_523410 != null) { fmt_res_523410 = (fmt_res_523410).concat(makeNimstrLit(" given)")); } else { fmt_res_523410 = makeNimstrLit(" given)"); };
			msg_523262 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_523410), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_523609 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_523609.tk = 3;
		F.line = 106;
		excp_523609.thrown = true;
		F.line = 107;
		excp_523609.msg = new_py_string_176075(msg_523262);
		result_523250 = excp_523609;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_523235.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_523801 = self_no_cast_523235;
			if ((0 < self_523801.readNum)) Tmp1 = true; else {				Tmp1 = self_523801.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_523805 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_523807 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_523807.tk = 8;
		F.line = 106;
		excp_523807.thrown = true;
		F.line = 107;
		excp_523807.msg = new_py_string_176075(msg_523805);
		result_523250 = excp_523807;
		break BeforeRet;
		}
		
		F.line = 408;
		self_523801.writeLock = true;
		F.line = 444;
		try {
		if (((self_523801.items != null ? self_523801.items.length : 0) == 0)) {
		F.line = 158;
		var msg_523816 = makeNimstrLit("pop from empty list");
		F.line = 159;
		F.line = 104;
		var excp_523818 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_523818.tk = 6;
		F.line = 106;
		excp_523818.thrown = true;
		F.line = 107;
		excp_523818.msg = new_py_string_176075(msg_523816);
		result_523250 = excp_523818;
		break BeforeRet;
		}
		
		Tmp2 = pop_523821(self_523801, "items");
		} finally {
		framePtr = F;
		F.line = 410;
		self_523801.writeLock = false;
		}
		result_523250 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_523250;

}

function delete_524603(s_524609, s_524609_Idx, first_524611, last_524613) {
	var F={procname:"delete.delete",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sequtils.nim",line:0};
	framePtr = F;
		F.line = 365;
		var i_524614 = first_524611;
		F.line = 366;
		var j_524615 = addInt(last_524613, 1);
		F.line = 367;
		var new_len_524623 = addInt(subInt((s_524609[s_524609_Idx] != null ? s_524609[s_524609_Idx].length : 0), j_524615), i_524614);
		L1: do {
			F.line = 368;
				L2: while (true) {
				if (!(i_524614 < new_len_524623)) break L2;
					F.line = 369;
					s_524609[s_524609_Idx][chckIndx(i_524614, 0, s_524609[s_524609_Idx].length+0-1)-0] = s_524609[s_524609_Idx][chckIndx(j_524615, 0, s_524609[s_524609_Idx].length+0-1)-0];
					F.line = 370;
					i_524614 = addInt(i_524614, 1);
					F.line = 371;
					j_524615 = addInt(j_524615, 1);
				}
		} while(false);
		F.line = 372;
		if (s_524609[s_524609_Idx].length < chckRange(new_len_524623, 0, 2147483647)) { for (var i=s_524609[s_524609_Idx].length;i<chckRange(new_len_524623, 0, 2147483647);++i) s_524609[s_524609_Idx].push(null); }
               else { s_524609[s_524609_Idx].length = chckRange(new_len_524623, 0, 2147483647); };
	framePtr = F.prev;

	
}

function remove_py_list_object_method_523877(self_no_cast_523879, args_523893) {
			var Tmp1;
			var Tmp3;

	var result_523894 = null;

	var F={procname:"listobject.removePyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(((args_523893 != null ? args_523893.length : 0) == 1))) {
		F.line = 183;
		var msg_523906 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_523911 = mnewString(0);
		F.line = 185;
		if (fmt_res_523911 != null) { fmt_res_523911 = (fmt_res_523911).concat(makeNimstrLit(" argument (")); } else { fmt_res_523911 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_523911 != null) { fmt_res_523911 = (fmt_res_523911).concat(cstrToNimstr(((args_523893 != null ? args_523893.length : 0))+"")); } else { fmt_res_523911 = cstrToNimstr(((args_523893 != null ? args_523893.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_523911 != null) { fmt_res_523911 = (fmt_res_523911).concat(makeNimstrLit(" given)")); } else { fmt_res_523911 = makeNimstrLit(" given)"); };
		msg_523906 = nimCopy(null, (makeNimstrLit("remove takes exactly 1")).concat(fmt_res_523911), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_524010 = mnewString(0);
			F.line = 187;
			if (fmt_res_524010 != null) { fmt_res_524010 = (fmt_res_524010).concat(makeNimstrLit(" argument (")); } else { fmt_res_524010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_524010 != null) { fmt_res_524010 = (fmt_res_524010).concat(cstrToNimstr(((args_523893 != null ? args_523893.length : 0))+"")); } else { fmt_res_524010 = cstrToNimstr(((args_523893 != null ? args_523893.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_524010 != null) { fmt_res_524010 = (fmt_res_524010).concat(makeNimstrLit(" given)")); } else { fmt_res_524010 = makeNimstrLit(" given)"); };
			msg_523906 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_524010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_524209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_524209.tk = 3;
		F.line = 106;
		excp_524209.thrown = true;
		F.line = 107;
		excp_524209.msg = new_py_string_176075(msg_523906);
		result_523894 = excp_524209;
		break BeforeRet;
		}
		
		F.line = 230;
		var target_524211 = args_523893[chckIndx(0, 0, args_523893.length+0-1)-0];
		if (!(isObj(self_no_cast_523879.m_type, NTI510255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_524401 = self_no_cast_523879;
			if ((0 < self_524401.readNum)) Tmp1 = true; else {				Tmp1 = self_524401.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_524405 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_524407 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_524407.tk = 8;
		F.line = 106;
		excp_524407.thrown = true;
		F.line = 107;
		excp_524407.msg = new_py_string_176075(msg_524405);
		result_523894 = excp_524407;
		break BeforeRet;
		}
		
		F.line = 408;
		self_524401.writeLock = true;
		F.line = 444;
		try {
		F.line = 163;
		var ret_obj_524421 = index_py_list_object_method_520003(self_no_cast_523879, [target_524211]);
			if (of_py_exception_object_358259(ret_obj_524421)) {
			Tmp3 = ret_obj_524421.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 165;
		result_523894 = ret_obj_524421;
		break BeforeRet;
		}
		
		if (!(of_py_int_object_374315(ret_obj_524421))) {
		F.line = 166;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/listobject.nim(166, 10) `ofPyIntObject(retObj)` "));
		}
		
		F.line = 167;
		var idx_524601 = to_int_379674(ret_obj_524421);
		F.line = 168;
		delete_524603(self_524401, "items", chckRange(idx_524601, 0, 2147483647), chckRange(addInt(idx_524601, 1), 0, 2147483647));
		} finally {
		framePtr = F;
		F.line = 410;
		self_524401.writeLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_523894;

}

function init_py_list_object_magic_524699(self_no_cast_524701, args_524715) {
				var Tmp1;
							var Tmp4;

	var result_524716 = null;

	var F={procname:"listobject.initPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_524701.m_type, NTI510255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_524801 = self_no_cast_524701;
		F.line = 174;
		switch ((args_524715 != null ? args_524715.length : 0)) {
		case 0:
			break;
		case 1:
			F.line = 178;
			F.line = 170;
			var iter_func_524818 = args_524715[chckIndx(0, 0, args_524715.length+0-1)-0].pyType.magicMethods.Field36;
			if ((iter_func_524818 === null)) {
			F.line = 172;
			var msg_524826 = (args_524715[chckIndx(0, 0, args_524715.length+0-1)-0].pyType.name).concat(makeNimstrLit(" object is not iterable"));
			F.line = 173;
			F.line = 104;
			var excp_524828 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_524828.tk = 3;
			F.line = 106;
			excp_524828.thrown = true;
			F.line = 107;
			excp_524828.msg = new_py_string_176075(msg_524826);
			result_524716 = excp_524828;
			break BeforeRet;
			}
			
			F.line = 174;
			var iter_obj_524831 = iter_func_524818(args_524715[chckIndx(0, 0, args_524715.length+0-1)-0]);
			if ((iter_obj_524831.pyType.magicMethods.Field37 === null)) {
			F.line = 176;
			F.line = 176;
			var fmt_res_524840 = mnewString(0);
			F.line = 176;
			if (fmt_res_524840 != null) { fmt_res_524840 = (fmt_res_524840).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_524840 = makeNimstrLit("iter() returned non-iterator of type "); };
			var msg_524842 = (fmt_res_524840).concat(iter_obj_524831.pyType.name);
			F.line = 177;
			F.line = 104;
			var excp_524844 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_524844.tk = 3;
			F.line = 106;
			excp_524844.thrown = true;
			F.line = 107;
			excp_524844.msg = new_py_string_176075(msg_524842);
			result_524716 = excp_524844;
			break BeforeRet;
			}
			
			var iterable_524846 = iter_obj_524831;
				if (of_py_exception_object_358259(iterable_524846)) {
				Tmp1 = iterable_524846.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 180;
			result_524716 = iterable_524846;
			break BeforeRet;
			}
			
			F.line = 181;
			var next_method_524847 = iterable_524846.pyType.magicMethods.Field37;
			F.line = 182;
			var new_list_524848 = new_py_list_simple_510401();
			L2: do {
				F.line = 183;
					L3: while (true) {
					if (!true) break L3;
						F.line = 184;
						var next_obj_524849 = next_method_524847(iterable_524846);
						if (is_stop_iter_373851(next_obj_524849)) {
						F.line = 186;
						break L2;
						}
						
							if (of_py_exception_object_358259(next_obj_524849)) {
							Tmp4 = next_obj_524849.thrown;
							}
							else {
							Tmp4 = false;
							}
							
						if (Tmp4) {
						F.line = 188;
						result_524716 = next_obj_524849;
						break BeforeRet;
						}
						
						F.line = 189;
						if (self_524801.items != null) { self_524801.items.push(next_obj_524849); } else { self_524801.items = [next_obj_524849]; };
					}
			} while(false);
			break;
		default: 
			F.line = 191;
			F.line = 191;
			var fmt_res_524862 = mnewString(0);
			F.line = 191;
			if (fmt_res_524862 != null) { fmt_res_524862 = (fmt_res_524862).concat(makeNimstrLit("list expected at most 1 args, got ")); } else { fmt_res_524862 = makeNimstrLit("list expected at most 1 args, got "); };
			F.line = 270;
			if (fmt_res_524862 != null) { fmt_res_524862 = (fmt_res_524862).concat(cstrToNimstr(((args_524715 != null ? args_524715.length : 0))+"")); } else { fmt_res_524862 = cstrToNimstr(((args_524715 != null ? args_524715.length : 0))+"").slice(); };
			var msg_525008 = nimCopy(null, fmt_res_524862, NTI138);
			F.line = 192;
			F.line = 104;
			var excp_525010 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_525010.tk = 3;
			F.line = 106;
			excp_525010.thrown = true;
			F.line = 107;
			excp_525010.msg = new_py_string_176075(msg_525008);
			result_524716 = excp_525010;
			break BeforeRet;
			break;
		}
		result_524716 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_524716;

}
py_list_object_type_510269.magicMethods.Field22 = contains_py_list_object_magic_511293;
py_list_object_type_510269.magicMethods.Field36 = iter_py_list_object_magic_512044;
py_list_object_type_510269.magicMethods.Field25 = repr_py_list_object_magic_512241;
py_list_object_type_510269.magicMethods.Field23 = len_py_list_object_magic_513248;
py_list_object_type_510269.magicMethods.Field32 = getitem_py_list_object_magic_513448;
py_list_object_type_510269.magicMethods.Field33 = setitem_py_list_object_magic_513678;
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("append"), append_py_list_object_method_513859);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("clear"), clear_py_list_object_method_514435);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("copy"), copy_py_list_object_method_515035);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("count"), count_py_list_object_method_515642);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("doClear"), doclear_py_list_object_method_516855);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("doRead"), doread_py_list_object_method_517441);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("aInt"), aint_py_list_object_method_518027);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("hello"), hello_py_list_object_method_519273);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("index"), index_py_list_object_method_520003);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("insert"), insert_py_list_object_method_521438);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("pop"), pop_py_list_object_method_523233);
register_bltin_method_160182(py_list_object_type_510269, makeNimstrLit("remove"), remove_py_list_object_method_523877);
py_list_object_type_510269.magicMethods.Field27 = init_py_list_object_magic_524699;

function new_526406() {
	var result_526411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_526601 = null;
		F.line = 211;
		r_526601 = {m_type: NTI526178, table: {data: null, counter: 0}, reprLock: false, readNum: 0, writeLock: false, id: 0, pyType: null};
		F.line = 212;
		result_526411 = r_526601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_526411;

}

function new_pydict_simple_526401() {
	var result_526403 = null;

	var F={procname:"dictobject.newPydictSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_526624 = new_526406();
		F.line = 561;
		obj_526624.pyType = pydict_object_type_526222;
		F.line = 563;
		give_id_157814(obj_526624);
		result_526403 = obj_526624;
	framePtr = F.prev;

	return result_526403;

}

function new_pydict_default_527021(args_526133) {
	var result_527024 = null;

	var F={procname:"dictobject.newPydictDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_527024 = new_pydict_simple_526401();
	framePtr = F.prev;

	return result_527024;

}
var pydict_object_type_526222 = new_py_type_159261(makeNimstrLit("dict"));
pydict_object_type_526222.magicMethods.Field26 = new_pydict_default_527021;

function hash_378480(x_378484) {
	var result_378485 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_378485 = x_378484;
	framePtr = F.prev;

	return result_378485;

}

function hash_378617(x_378621) {
	var result_378622 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_378622 = x_378621;
	framePtr = F.prev;

	return result_378622;

}

function hash_378475(self_378477) {
	var result_378478 = 0;

	var F={procname:"numobjects.hash",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 481;
		result_378478 = hash_378480(self_378477.sign);
		L1: do {
			F.line = 482;
			var digit_378615 = 0;
			F.line = 3909;
			var colontmp__378643 = null;
			F.line = 482;
			colontmp__378643 = self_378477.digits;
			F.line = 3911;
			var i_378646 = 0;
			F.line = 3912;
			var l_378648 = (colontmp__378643 != null ? colontmp__378643.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_378646 < l_378648)) break L3;
						F.line = 3914;
						digit_378615 = colontmp__378643[chckIndx(i_378646, 0, colontmp__378643.length+0-1)-0];
						F.line = 483;
						result_378478 = (result_378478 ^ hash_378617(digit_378615));
						F.line = 3915;
						i_378646 = addInt(i_378646, 1);
						if (!(((colontmp__378643 != null ? colontmp__378643.length : 0) == l_378648))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_378478;

}

function hash_526040(obj_526042) {
	var result_526043 = 0;

	var F={procname:"dictobject.hash",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 17;
		var fun_526044 = obj_526042.pyType.magicMethods.Field30;
		if ((fun_526044 === null)) {
		F.line = 19;
		result_526043 = hash_143414(obj_526042);
		break BeforeRet;
		}
		else {
			F.line = 21;
			var ret_obj_526052 = fun_526044(obj_526042);
			if (!(of_py_int_object_374315(ret_obj_526052))) {
			F.line = 2895;
			var e_526059 = null;
			F.line = 2896;
			e_526059 = {m_type: NTI156085, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 23;
			e_526059.message = nimCopy(null, ret_obj_526052.pyType.name, NTI138);
			F.line = 2891;
			e_526059.parent = null;
			F.line = 23;
			raiseException(e_526059, "DictError");
			}
			
			F.line = 24;
			result_526043 = hash_378475(ret_obj_526052);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_526043;

}

function HEX3DHEX3D_526081(obj1_526083, obj2_526084) {
	var result_526085 = false;

	var F={procname:"dictobject.==",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 28;
		var fun_526086 = obj1_526083.pyType.magicMethods.Field18;
		if ((fun_526086 === null)) {
		F.line = 30;
		result_526085 = (id_157596(obj1_526083) == id_157596(obj2_526084));
		break BeforeRet;
		}
		else {
			F.line = 32;
			var ret_obj_526093 = fun_526086(obj1_526083, obj2_526084);
			if (!(of_py_bool_object_353106(ret_obj_526093))) {
			F.line = 2895;
			var e_526100 = null;
			F.line = 2896;
			e_526100 = {m_type: NTI156085, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 34;
			e_526100.message = nimCopy(null, ret_obj_526093.pyType.name, NTI138);
			F.line = 2891;
			e_526100.parent = null;
			F.line = 34;
			raiseException(e_526100, "DictError");
			}
			
			F.line = 35;
			result_526085 = ret_obj_526093.b;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_526085;

}

function raw_get_527600(t_527605, key_527607, hc_527609, hc_527609_Idx) {
						var Tmp3;

	var result_527610 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_527609[hc_527609_Idx] = hash_526040(key_527607);
		if ((hc_527609[hc_527609_Idx] == 0)) {
		F.line = 45;
		hc_527609[hc_527609_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_527620 = (hc_527609[hc_527609_Idx] & (t_527605.data != null ? (t_527605.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_527605.data[chckIndx(h_527620, 0, t_527605.data.length+0-1)-0].Field0)) break L2;
						if (!(t_527605.data[chckIndx(h_527620, 0, t_527605.data.length+0-1)-0].Field0 == hc_527609[hc_527609_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_526081(t_527605.data[chckIndx(h_527620, 0, t_527605.data.length+0-1)-0].Field1, key_527607);						}					if (Tmp3) {
					F.line = 38;
					result_527610 = h_527620;
					break BeforeRet;
					}
					
					F.line = 39;
					h_527620 = next_try_146614(h_527620, (t_527605.data != null ? (t_527605.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_527610 = subInt(-1, h_527620);
	} while (false);
	framePtr = F.prev;

	return result_527610;

}

function get_or_default_532528(t_532534, key_532536, default_532538) {
		var Tmp1;

	var result_532539 = null;

	var F={procname:"getOrDefault.getOrDefault",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 177;
		var hc_532545 = [0];
		F.line = 178;
		var index_532559 = raw_get_527600(t_532534, key_532536, hc_532545, 0);
		F.line = 179;
		if ((0 <= index_532559)) {
		Tmp1 = t_532534.data[chckIndx(index_532559, 0, t_532534.data.length+0-1)-0].Field2;
		}
		else {
		Tmp1 = default_532538;
		}
		
		result_532539 = Tmp1;
	framePtr = F.prev;

	return result_532539;

}

function contains_pydict_object_magic_532051(self_no_cast_532053, other_532054) {
	var result_532055 = null;

	var F={procname:"dictobject.containsPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_532053.m_type, NTI526178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_532201 = self_no_cast_532053;
		if (self_532201.writeLock) {
		F.line = 414;
		var msg_532203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_532205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_532205.tk = 8;
		F.line = 106;
		excp_532205.thrown = true;
		F.line = 107;
		excp_532205.msg = new_py_string_176075(msg_532203);
		result_532055 = excp_532205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_532201.readNum = addInt(self_532201.readNum, 1);
		F.line = 438;
		try {
		F.line = 61;
		var hash_func_532223 = other_532054.pyType.magicMethods.Field30;
		if ((hash_func_532223 === null)) {
		F.line = 63;
		var tp_name_532231 = nimCopy(null, other_532054.pyType.name, NTI138);
		F.line = 64;
		var msg_532233 = (makeNimstrLit("unhashable type: ")).concat(tp_name_532231);
		F.line = 65;
		F.line = 104;
		var excp_532235 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_532235.tk = 3;
		F.line = 106;
		excp_532235.thrown = true;
		F.line = 107;
		excp_532235.msg = new_py_string_176075(msg_532233);
		result_532055 = excp_532235;
		break BeforeRet;
		}
		
		F.line = 70;
++excHandler;
		try {
		F.line = 71;
		result_532055 = get_or_default_532528(self_532201.table, other_532054, null);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156085))) {
		F.line = 73;
		var msg_532791 = makeNimstrLit("__hash__ method doesn\'t return an integer or __eq__ method doesn\'t return a bool");
		F.line = 74;
		F.line = 104;
		var excp_532793 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_532793.tk = 3;
		F.line = 106;
		excp_532793.thrown = true;
		F.line = 107;
		excp_532793.msg = new_py_string_176075(msg_532791);
		result_532055 = excp_532793;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		if ((result_532055 === null)) {
		F.line = 76;
		result_532055 = py_false_obj_354075;
		break BeforeRet;
		}
		else {
			F.line = 78;
			result_532055 = py_true_obj_354074;
			break BeforeRet;
		}
		
		} finally {
		framePtr = F;
		F.line = 417;
		self_532201.readNum = subInt(self_532201.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_532055;

}

function repr_pydict_object_magic_532827(self_no_cast_532829) {
	var result_532830 = null;

	var F={procname:"dictobject.reprPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_532829.m_type, NTI526178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_533001 = self_no_cast_532829;
		if (self_533001.reprLock) {
		F.line = 379;
		result_532830 = new_py_string_176075(makeNimstrLit("..."));
		break BeforeRet;
		}
		
		F.line = 380;
		self_533001.reprLock = true;
		F.line = 438;
		try {
		if (self_533001.writeLock) {
		F.line = 414;
		var msg_533003 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_533005 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_533005.tk = 8;
		F.line = 106;
		excp_533005.thrown = true;
		F.line = 107;
		excp_533005.msg = new_py_string_176075(msg_533003);
		result_532830 = excp_533005;
		break BeforeRet;
		}
		
		F.line = 412;
		self_533001.readNum = addInt(self_533001.readNum, 1);
		F.line = 438;
		try {
		F.line = 81;
		var ss_533017 = null;
		L3: do {
			F.line = 82;
			var k_533720 = null;
			F.line = 82;
			var v_533721 = null;
			F.line = 270;
			var colontmp__535622 = {data: null, counter: 0};
			F.line = 82;
			nimCopy(colontmp__535622, self_533001.table, NTI526188);
			L4: do {
				F.line = 272;
				var h_535626 = 0;
				F.line = 2104;
				var colontmp__535628 = 0;
				F.line = 272;
				colontmp__535628 = (colontmp__535622.data != null ? (colontmp__535622.data.length-1) : -1);
				F.line = 2107;
				var res_535630 = 0;
				L5: do {
					F.line = 2108;
						L6: while (true) {
						if (!(res_535630 <= colontmp__535628)) break L6;
							F.line = 2109;
							h_535626 = res_535630;
							if (is_filled_146491(colontmp__535622.data[chckIndx(h_535626, 0, colontmp__535622.data.length+0-1)-0].Field0)) {
							F.line = 273;
							k_533720 = colontmp__535622.data[chckIndx(h_535626, 0, colontmp__535622.data.length+0-1)-0].Field1;
							F.line = 273;
							v_533721 = colontmp__535622.data[chckIndx(h_535626, 0, colontmp__535622.data.length+0-1)-0].Field2;
							F.line = 83;
							F.line = 45;
							if ((k_533720.pyType === null)) {
							F.line = 2895;
							var e_533748 = null;
							F.line = 2896;
							e_533748 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 26;
							e_533748.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
							F.line = 2891;
							e_533748.parent = null;
							F.line = 26;
							raiseException(e_533748, "InternalError");
							}
							
							F.line = 27;
							var fun_533802 = k_533720.pyType.magicMethods.Field25;
							if ((fun_533802 === null)) {
							F.line = 29;
							var obj_type_str_533811 = k_533720.pyType.name;
							F.line = 30;
							var method_str_533813 = makeNimstrLit("repr");
							F.line = 31;
							var msg_533815 = (makeNimstrLit("No ")).concat(method_str_533813,makeNimstrLit(" method for "),obj_type_str_533811,makeNimstrLit(" defined"));
							F.line = 32;
							F.line = 104;
							var excp_533817 = new_py_type_error_simple_360601();
							F.line = 105;
							excp_533817.tk = 3;
							F.line = 106;
							excp_533817.thrown = true;
							F.line = 107;
							excp_533817.msg = new_py_string_176075(msg_533815);
							var excp_533820 = excp_533817;
							F.line = 36;
							result_532830 = excp_533820;
							break BeforeRet;
							}
							
							var fun_534002 = fun_533802;
							F.line = 46;
							var res_534004 = fun_534002(k_533720);
							var k_repr_534201 = res_534004;
							F.line = 84;
							F.line = 45;
							if ((v_533721.pyType === null)) {
							F.line = 2895;
							var e_534228 = null;
							F.line = 2896;
							e_534228 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 26;
							e_534228.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
							F.line = 2891;
							e_534228.parent = null;
							F.line = 26;
							raiseException(e_534228, "InternalError");
							}
							
							F.line = 27;
							var fun_534402 = v_533721.pyType.magicMethods.Field25;
							if ((fun_534402 === null)) {
							F.line = 29;
							var obj_type_str_534411 = v_533721.pyType.name;
							F.line = 30;
							var method_str_534413 = makeNimstrLit("repr");
							F.line = 31;
							var msg_534415 = (makeNimstrLit("No ")).concat(method_str_534413,makeNimstrLit(" method for "),obj_type_str_534411,makeNimstrLit(" defined"));
							F.line = 32;
							F.line = 104;
							var excp_534417 = new_py_type_error_simple_360601();
							F.line = 105;
							excp_534417.tk = 3;
							F.line = 106;
							excp_534417.thrown = true;
							F.line = 107;
							excp_534417.msg = new_py_string_176075(msg_534415);
							var excp_534420 = excp_534417;
							F.line = 36;
							result_532830 = excp_534420;
							break BeforeRet;
							}
							
							var fun_534602 = fun_534402;
							F.line = 46;
							var res_534604 = fun_534602(v_533721);
							var v_repr_534801 = res_534604;
							if (!(of_py_str_object_175092(k_repr_534201))) {
							F.line = 157;
							var type_name_534804 = nimCopy(null, k_repr_534201.pyType.name, NTI138);
							F.line = 158;
							F.line = 158;
							var fmt_res_534807 = mnewString(0);
							F.line = 158;
							if (fmt_res_534807 != null) { fmt_res_534807 = (fmt_res_534807).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_534807 = makeNimstrLit(" returned non-string (type "); };
							F.line = 260;
							if (fmt_res_534807 != null) { fmt_res_534807 = (fmt_res_534807).concat(type_name_534804); } else { fmt_res_534807 = type_name_534804.slice(); };
							F.line = 158;
							if (fmt_res_534807 != null) { fmt_res_534807 = (fmt_res_534807).concat(makeNimstrLit(")")); } else { fmt_res_534807 = makeNimstrLit(")"); };
							var msg_535002 = (makeNimstrLit("__str__")).concat(fmt_res_534807);
							F.line = 159;
							F.line = 104;
							var excp_535004 = new_py_type_error_simple_360601();
							F.line = 105;
							excp_535004.tk = 3;
							F.line = 106;
							excp_535004.thrown = true;
							F.line = 107;
							excp_535004.msg = new_py_string_176075(msg_535002);
							result_532830 = excp_535004;
							break BeforeRet;
							}
							
							if (!(of_py_str_object_175092(v_repr_534801))) {
							F.line = 157;
							var type_name_535008 = nimCopy(null, v_repr_534801.pyType.name, NTI138);
							F.line = 158;
							F.line = 158;
							var fmt_res_535011 = mnewString(0);
							F.line = 158;
							if (fmt_res_535011 != null) { fmt_res_535011 = (fmt_res_535011).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_535011 = makeNimstrLit(" returned non-string (type "); };
							F.line = 260;
							if (fmt_res_535011 != null) { fmt_res_535011 = (fmt_res_535011).concat(type_name_535008); } else { fmt_res_535011 = type_name_535008.slice(); };
							F.line = 158;
							if (fmt_res_535011 != null) { fmt_res_535011 = (fmt_res_535011).concat(makeNimstrLit(")")); } else { fmt_res_535011 = makeNimstrLit(")"); };
							var msg_535202 = (makeNimstrLit("__str__")).concat(fmt_res_535011);
							F.line = 159;
							F.line = 104;
							var excp_535204 = new_py_type_error_simple_360601();
							F.line = 105;
							excp_535204.tk = 3;
							F.line = 106;
							excp_535204.thrown = true;
							F.line = 107;
							excp_535204.msg = new_py_string_176075(msg_535202);
							result_532830 = excp_535204;
							break BeforeRet;
							}
							
							F.line = 87;
							F.line = 87;
							var fmt_res_535209 = mnewString(0);
							F.line = 260;
							if (fmt_res_535209 != null) { fmt_res_535209 = (fmt_res_535209).concat(k_repr_534201.str); } else { fmt_res_535209 = k_repr_534201.str.slice(); };
							F.line = 87;
							if (fmt_res_535209 != null) { fmt_res_535209 = (fmt_res_535209).concat(makeNimstrLit(": ")); } else { fmt_res_535209 = makeNimstrLit(": "); };
							F.line = 260;
							if (fmt_res_535209 != null) { fmt_res_535209 = (fmt_res_535209).concat(v_repr_534801.str); } else { fmt_res_535209 = v_repr_534801.str.slice(); };
							var Tmp7 = nimCopy(null, fmt_res_535209, NTI138);
							if (ss_533017 != null) { ss_533017.push(Tmp7); } else { ss_533017 = [Tmp7]; };
							}
							
							F.line = 2110;
							res_535630 = addInt(res_535630, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 88;
		result_532830 = new_py_string_176075((makeNimstrLit("{")).concat(nsuJoinSep(ss_533017, makeNimstrLit(", ")),makeNimstrLit("}")));
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_533001.readNum = subInt(self_533001.readNum, 1);
		}
		} finally {
		framePtr = F;
		F.line = 383;
		self_533001.reprLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_532830;

}

function len_535983(t_535989) {
	var result_535990 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 154;
		result_535990 = t_535989.counter;
	framePtr = F.prev;

	return result_535990;

}

function len_pydict_object_magic_535648(self_no_cast_535650) {
		var Tmp1;

	var result_535651 = null;

	var F={procname:"dictobject.lenPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_535650.m_type, NTI526178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_535801 = self_no_cast_535650;
		if (self_535801.writeLock) {
		F.line = 414;
		var msg_535803 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_535805 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_535805.tk = 8;
		F.line = 106;
		excp_535805.thrown = true;
		F.line = 107;
		excp_535805.msg = new_py_string_176075(msg_535803);
		result_535651 = excp_535805;
		break BeforeRet;
		}
		
		F.line = 412;
		self_535801.readNum = addInt(self_535801.readNum, 1);
		F.line = 438;
		try {
		Tmp1 = new_py_int_375257(len_535983(self_535801.table));
		} finally {
		framePtr = F;
		F.line = 417;
		self_535801.readNum = subInt(self_535801.readNum, 1);
		}
		result_535651 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_535651;

}

function init_table_527263(initial_size_527268) {
	var result_527270 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_527268))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_527270.counter = 0;
		F.line = 354;
		result_527270.data = new Array(chckRange(initial_size_527268, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_527268, 0, 2147483647);++i) {result_527270.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_527270;

}

function new_py_dict_527257() {
	var result_527259 = null;

	var F={procname:"dictobject.newPyDict",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		F.line = 46;
		result_527259 = new_pydict_simple_526401();
		F.line = 47;
		nimCopy(result_527259.table, init_table_527263(64), NTI526188);
	framePtr = F.prev;

	return result_527259;

}

function new_pydict_object_magic_536027(args_536042) {
	var result_536043 = null;

	var F={procname:"dictobject.newPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 95;
		result_536043 = new_py_dict_527257();
	framePtr = F.prev;

	return result_536043;

}

function getitem_pydict_object_magic_536059(self_no_cast_536061, other_536062) {
			var Tmp3;

	var result_536063 = null;

	var F={procname:"dictobject.getitemPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_536061.m_type, NTI526178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_536201 = self_no_cast_536061;
		if (self_536201.writeLock) {
		F.line = 414;
		var msg_536203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_536205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_536205.tk = 8;
		F.line = 106;
		excp_536205.thrown = true;
		F.line = 107;
		excp_536205.msg = new_py_string_176075(msg_536203);
		result_536063 = excp_536205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_536201.readNum = addInt(self_536201.readNum, 1);
		F.line = 438;
		try {
		F.line = 61;
		var hash_func_536223 = other_536062.pyType.magicMethods.Field30;
		if ((hash_func_536223 === null)) {
		F.line = 63;
		var tp_name_536231 = nimCopy(null, other_536062.pyType.name, NTI138);
		F.line = 64;
		var msg_536233 = (makeNimstrLit("unhashable type: ")).concat(tp_name_536231);
		F.line = 65;
		F.line = 104;
		var excp_536235 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_536235.tk = 3;
		F.line = 106;
		excp_536235.thrown = true;
		F.line = 107;
		excp_536235.msg = new_py_string_176075(msg_536233);
		result_536063 = excp_536235;
		break BeforeRet;
		}
		
		F.line = 100;
++excHandler;
		try {
		F.line = 101;
		result_536063 = get_or_default_532528(self_536201.table, other_536062, null);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156085))) {
		F.line = 103;
		var msg_536539 = makeNimstrLit("__hash__ method doesn\'t return an integer or __eq__ method doesn\'t return a bool");
		F.line = 104;
		F.line = 104;
		var excp_536541 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_536541.tk = 3;
		F.line = 106;
		excp_536541.thrown = true;
		F.line = 107;
		excp_536541.msg = new_py_string_176075(msg_536539);
		result_536063 = excp_536541;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		if (!((result_536063 === null))) {
		F.line = 106;
		break BeforeRet;
		}
		
		F.line = 108;
		var msg_536550 = null;
		F.line = 109;
		var repr_536551 = other_536062.pyType.magicMethods.Field25(other_536062);
			if (of_py_exception_object_358259(repr_536551)) {
			Tmp3 = repr_536551.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 111;
		msg_536550 = nimCopy(null, makeNimstrLit("exception occured when generating key error msg calling repr"), NTI138);
		}
		else {
			F.line = 113;
			msg_536550 = nimCopy(null, repr_536551.str, NTI138);
		}
		
		F.line = 114;
		F.line = 104;
		var excp_536553 = new_py_key_error_simple_368601();
		F.line = 105;
		excp_536553.tk = 11;
		F.line = 106;
		excp_536553.thrown = true;
		F.line = 107;
		excp_536553.msg = new_py_string_176075(msg_536550);
		result_536063 = excp_536553;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_536201.readNum = subInt(self_536201.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_536063;

}

function raw_insert_530562(t_530569, data_530573, data_530573_Idx, key_530575, val_530577, hc_530579, h_530581) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_530573[data_530573_Idx][chckIndx(h_530581, 0, data_530573[data_530573_Idx].length+0-1)-0].Field1 = key_530575;
		F.line = 65;
		data_530573[data_530573_Idx][chckIndx(h_530581, 0, data_530573[data_530573_Idx].length+0-1)-0].Field2 = val_530577;
		F.line = 66;
		data_530573[data_530573_Idx][chckIndx(h_530581, 0, data_530573[data_530573_Idx].length+0-1)-0].Field0 = hc_530579;
	framePtr = F.prev;

	
}

function enlarge_529432(t_529439) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_529447 = null;
		F.line = 314;
		n_529447 = new Array(chckRange(mulInt((t_529439.data != null ? t_529439.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_529439.data != null ? t_529439.data.length : 0), 2), 0, 2147483647);++i) {n_529447[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_529439.data; t_529439.data = n_529447; n_529447 = Tmp1;		L2: do {
			F.line = 316;
			var i_529660 = 0;
			F.line = 2088;
			var colontmp__531249 = 0;
			F.line = 316;
			colontmp__531249 = (n_529447 != null ? (n_529447.length-1) : -1);
			F.line = 2094;
			var res_531252 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_531252 <= colontmp__531249)) break L4;
						F.line = 2096;
						i_529660 = res_531252;
						F.line = 317;
						var eh_529878 = n_529447[chckIndx(i_529660, 0, n_529447.length+0-1)-0].Field0;
						if (is_filled_146491(eh_529878)) {
						F.line = 319;
						var j_529887 = (eh_529878 & (t_529439.data != null ? (t_529439.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_529439.data[chckIndx(j_529887, 0, t_529439.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_529887 = next_try_146614(j_529887, (t_529439.data != null ? (t_529439.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_530562(t_529439, t_529439, "data", n_529447[chckIndx(i_529660, 0, n_529447.length+0-1)-0].Field1, n_529447[chckIndx(i_529660, 0, n_529447.length+0-1)-0].Field2, eh_529878, j_529887);
						}
						
						F.line = 2097;
						res_531252 = addInt(res_531252, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_531270(t_531275, key_531277, hc_531279) {
	var result_531280 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_531289 = (hc_531279 & (t_531275.data != null ? (t_531275.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_531275.data[chckIndx(h_531289, 0, t_531275.data.length+0-1)-0].Field0)) break L2;
					if (((t_531275.data[chckIndx(h_531289, 0, t_531275.data.length+0-1)-0].Field0 == hc_531279) && HEX3DHEX3D_526081(t_531275.data[chckIndx(h_531289, 0, t_531275.data.length+0-1)-0].Field1, key_531277))) {
					F.line = 38;
					result_531280 = h_531289;
					break BeforeRet;
					}
					
					F.line = 39;
					h_531289 = next_try_146614(h_531289, (t_531275.data != null ? (t_531275.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_531280 = subInt(-1, h_531289);
	} while (false);
	framePtr = F.prev;

	return result_531280;

}

function HEX5BHEX5DHEX3D_528993(t_529000, key_529002, val_529004) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_529005 = [0];
		F.line = 98;
		var index_529018 = raw_get_527600(t_529000, key_529002, hc_529005, 0);
		if ((0 <= index_529018)) {
		F.line = 99;
		t_529000.data[chckIndx(index_529018, 0, t_529000.data.length+0-1)-0].Field2 = val_529004;
		}
		else {
			if (must_rehash_146509((t_529000.data != null ? t_529000.data.length : 0), t_529000.counter)) {
			F.line = 90;
			enlarge_529432(t_529000);
			F.line = 91;
			index_529018 = raw_get_known_hc_531270(t_529000, key_529002, hc_529005[0]);
			}
			
			F.line = 92;
			index_529018 = subInt(-1, index_529018);
			F.line = 93;
			raw_insert_530562(t_529000, t_529000, "data", key_529002, val_529004, hc_529005[0], index_529018);
			F.line = 100;
			t_529000.counter = addInt(t_529000.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function setitem_pydict_object_magic_536581(self_no_cast_536583, arg1_536584, arg2_536585) {
			var Tmp1;
		var Tmp2;

	var result_536586 = null;

	var F={procname:"dictobject.setitemPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_536583.m_type, NTI526178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_536801 = self_no_cast_536583;
			if ((0 < self_536801.readNum)) Tmp1 = true; else {				Tmp1 = self_536801.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_536805 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_536807 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_536807.tk = 8;
		F.line = 106;
		excp_536807.thrown = true;
		F.line = 107;
		excp_536807.msg = new_py_string_176075(msg_536805);
		result_536586 = excp_536807;
		break BeforeRet;
		}
		
		F.line = 408;
		self_536801.writeLock = true;
		F.line = 438;
		try {
		F.line = 61;
		var hash_func_536816 = arg1_536584.pyType.magicMethods.Field30;
		if ((hash_func_536816 === null)) {
		F.line = 63;
		var tp_name_536824 = nimCopy(null, arg1_536584.pyType.name, NTI138);
		F.line = 64;
		var msg_536826 = (makeNimstrLit("unhashable type: ")).concat(tp_name_536824);
		F.line = 65;
		F.line = 104;
		var excp_536828 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_536828.tk = 3;
		F.line = 106;
		excp_536828.thrown = true;
		F.line = 107;
		excp_536828.msg = new_py_string_176075(msg_536826);
		result_536586 = excp_536828;
		break BeforeRet;
		}
		
		F.line = 119;
++excHandler;
		try {
		F.line = 120;
		HEX5BHEX5DHEX3D_528993(self_536801.table, arg1_536584, arg2_536585);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156085))) {
		F.line = 122;
		var msg_536989 = makeNimstrLit("__hash__ method doesn\'t return an integer or __eq__ method doesn\'t return a bool");
		F.line = 123;
		F.line = 104;
		var excp_536991 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_536991.tk = 3;
		F.line = 106;
		excp_536991.thrown = true;
		F.line = 107;
		excp_536991.msg = new_py_string_176075(msg_536989);
		result_536586 = excp_536991;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_536801.writeLock = false;
		}
		result_536586 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_536586;

}

function copy_pydict_object_method_537009(self_no_cast_537011, args_537025) {
		var Tmp1;

	var result_537026 = null;

	var F={procname:"dictobject.copyPydictObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_537025 != null ? args_537025.length : 0) == 0))) {
		F.line = 183;
		var msg_537038 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_537043 = mnewString(0);
		F.line = 185;
		if (fmt_res_537043 != null) { fmt_res_537043 = (fmt_res_537043).concat(makeNimstrLit(" argument (")); } else { fmt_res_537043 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_537043 != null) { fmt_res_537043 = (fmt_res_537043).concat(cstrToNimstr(((args_537025 != null ? args_537025.length : 0))+"")); } else { fmt_res_537043 = cstrToNimstr(((args_537025 != null ? args_537025.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_537043 != null) { fmt_res_537043 = (fmt_res_537043).concat(makeNimstrLit(" given)")); } else { fmt_res_537043 = makeNimstrLit(" given)"); };
		msg_537038 = nimCopy(null, (makeNimstrLit("copy takes exactly 0")).concat(fmt_res_537043), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_537210 = mnewString(0);
			F.line = 187;
			if (fmt_res_537210 != null) { fmt_res_537210 = (fmt_res_537210).concat(makeNimstrLit(" argument (")); } else { fmt_res_537210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_537210 != null) { fmt_res_537210 = (fmt_res_537210).concat(cstrToNimstr(((args_537025 != null ? args_537025.length : 0))+"")); } else { fmt_res_537210 = cstrToNimstr(((args_537025 != null ? args_537025.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_537210 != null) { fmt_res_537210 = (fmt_res_537210).concat(makeNimstrLit(" given)")); } else { fmt_res_537210 = makeNimstrLit(" given)"); };
			msg_537038 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_537210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_537409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_537409.tk = 3;
		F.line = 106;
		excp_537409.thrown = true;
		F.line = 107;
		excp_537409.msg = new_py_string_176075(msg_537038);
		result_537026 = excp_537409;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_537011.m_type, NTI526178))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PydictObject` "));
		}
		
		F.line = 444;
		var self_537601 = self_no_cast_537011;
		if (self_537601.writeLock) {
		F.line = 414;
		var msg_537603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_537605 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_537605.tk = 8;
		F.line = 106;
		excp_537605.thrown = true;
		F.line = 107;
		excp_537605.msg = new_py_string_176075(msg_537603);
		result_537026 = excp_537605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_537601.readNum = addInt(self_537601.readNum, 1);
		F.line = 444;
		try {
		F.line = 127;
		var new_t_537616 = new_py_dict_527257();
		F.line = 128;
		nimCopy(new_t_537616.table, self_537601.table, NTI526188);
		Tmp1 = new_t_537616;
		} finally {
		framePtr = F;
		F.line = 417;
		self_537601.readNum = subInt(self_537601.readNum, 1);
		}
		result_537026 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_537026;

}
pydict_object_type_526222.magicMethods.Field22 = contains_pydict_object_magic_532051;
pydict_object_type_526222.magicMethods.Field25 = repr_pydict_object_magic_532827;
pydict_object_type_526222.magicMethods.Field23 = len_pydict_object_magic_535648;
pydict_object_type_526222.magicMethods.Field26 = new_pydict_object_magic_536027;
pydict_object_type_526222.magicMethods.Field32 = getitem_pydict_object_magic_536059;
pydict_object_type_526222.magicMethods.Field33 = setitem_pydict_object_magic_536581;
register_bltin_method_160182(pydict_object_type_526222, makeNimstrLit("copy"), copy_pydict_object_method_537009);
var bltin_dict_539014 = new_py_dict_527257();

function new_540206() {
	var result_540211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_540401 = null;
		F.line = 211;
		r_540401 = {m_type: NTI540150, refObj: null, id: 0, pyType: null};
		F.line = 212;
		result_540211 = r_540401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_540211;

}

function new_py_cell_simple_540201() {
	var result_540203 = null;

	var F={procname:"cellobject.newPyCellSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_540424 = new_540206();
		F.line = 561;
		obj_540424.pyType = py_cell_object_type_540156;
		F.line = 563;
		give_id_157814(obj_540424);
		result_540203 = obj_540424;
	framePtr = F.prev;

	return result_540203;

}

function new_py_cell_default_540821(args_540105) {
	var result_540824 = null;

	var F={procname:"cellobject.newPyCellDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_540824 = new_py_cell_simple_540201();
	framePtr = F.prev;

	return result_540824;

}
var py_cell_object_type_540156 = new_py_type_159261(makeNimstrLit("Cell"));
py_cell_object_type_540156.kind = 16;
py_cell_object_type_540156.magicMethods.Field26 = new_py_cell_default_540821;

function new_542206() {
	var result_542211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_542401 = null;
		F.line = 211;
		r_542401 = {m_type: NTI542083, back: null, code: null, globals: null, fastLocals: null, cellVars: null, id: 0, pyType: null};
		F.line = 212;
		result_542211 = r_542401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_542211;

}

function new_py_frame_simple_542201() {
	var result_542203 = null;

	var F={procname:"frameobject.newPyFrameSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_542424 = new_542206();
		F.line = 561;
		obj_542424.pyType = py_frame_object_type_542101;
		F.line = 563;
		give_id_157814(obj_542424);
		result_542203 = obj_542424;
	framePtr = F.prev;

	return result_542203;

}

function new_py_frame_default_542821(args_542038) {
	var result_542824 = null;

	var F={procname:"frameobject.newPyFrameDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_542824 = new_py_frame_simple_542201();
	framePtr = F.prev;

	return result_542824;

}
var py_frame_object_type_542101 = new_py_type_159261(makeNimstrLit("Frame"));
py_frame_object_type_542101.magicMethods.Field26 = new_py_frame_default_542821;

function new_545206() {
	var result_545211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_545401 = null;
		F.line = 211;
		r_545401 = {m_type: NTI545123, name: null, code: null, globals: null, closure: null, id: 0, pyType: null};
		F.line = 212;
		result_545211 = r_545401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_545211;

}

function new_py_function_simple_545201() {
	var result_545203 = null;

	var F={procname:"funcobject.newPyFunctionSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_545424 = new_545206();
		F.line = 561;
		obj_545424.pyType = py_function_object_type_545135;
		F.line = 563;
		give_id_157814(obj_545424);
		result_545203 = obj_545424;
	framePtr = F.prev;

	return result_545203;

}

function new_py_function_default_545821(args_545078) {
	var result_545824 = null;

	var F={procname:"funcobject.newPyFunctionDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_545824 = new_py_function_simple_545201();
	framePtr = F.prev;

	return result_545824;

}

function new_546206() {
	var result_546211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_546401 = null;
		F.line = 211;
		r_546401 = {m_type: NTI546100, fun: null, self: null, id: 0, pyType: null};
		F.line = 212;
		result_546211 = r_546401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_546211;

}

function new_py_bound_method_simple_546201() {
	var result_546203 = null;

	var F={procname:"funcobject.newPyBoundMethodSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_546424 = new_546206();
		F.line = 561;
		obj_546424.pyType = py_bound_method_object_type_546108;
		F.line = 563;
		give_id_157814(obj_546424);
		result_546203 = obj_546424;
	framePtr = F.prev;

	return result_546203;

}

function new_py_bound_method_default_546821(args_546055) {
	var result_546824 = null;

	var F={procname:"funcobject.newPyBoundMethodDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_546824 = new_py_bound_method_simple_546201();
	framePtr = F.prev;

	return result_546824;

}
var py_function_object_type_545135 = new_py_type_159261(makeNimstrLit("Function"));
py_function_object_type_545135.kind = 13;
py_function_object_type_545135.magicMethods.Field26 = new_py_function_default_545821;
var py_bound_method_object_type_546108 = new_py_type_159261(makeNimstrLit("BoundMethod"));
py_bound_method_object_type_546108.kind = 14;
py_bound_method_object_type_546108.magicMethods.Field26 = new_py_bound_method_default_546821;

function new_bound_method_547214(fun_547216, self_547217) {
	var result_547218 = null;

	var F={procname:"funcobject.newBoundMethod",prev:framePtr,filename:"../Objects/funcobject.nim",line:0};
	framePtr = F;
		F.line = 33;
		result_547218 = new_py_bound_method_simple_546201();
		F.line = 34;
		result_547218.fun = fun_547216;
		F.line = 35;
		result_547218.self = self_547217;
	framePtr = F.prev;

	return result_547218;

}

function get_py_function_object_magic_547232(self_no_cast_547234, other_547235) {
	var result_547236 = null;

	var F={procname:"funcobject.getPyFunctionObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_547234.m_type, NTI545123))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFunctionObject` "));
		}
		
		F.line = 438;
		var self_547401 = self_no_cast_547234;
		result_547236 = new_bound_method_547214(self_547401, other_547235);
	framePtr = F.prev;

	return result_547236;

}

function get_py_bound_method_object_magic_547416(self_no_cast_547418, other_547419) {
	var result_547420 = null;

	var F={procname:"funcobject.getPyBoundMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_547418.m_type, NTI546100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoundMethodObject` "));
		}
		
		F.line = 438;
		var self_547601 = self_no_cast_547418;
		result_547420 = self_547601;
	framePtr = F.prev;

	return result_547420;

}

function new_547806() {
	var result_547811 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_548001 = null;
		F.line = 211;
		r_548001 = {m_type: NTI547672, callable: null, id: 0, pyType: null};
		F.line = 212;
		result_547811 = r_548001;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_547811;

}

function new_py_static_method_simple_547801() {
	var result_547803 = null;

	var F={procname:"funcobject.newPyStaticMethodSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_548024 = new_547806();
		F.line = 561;
		obj_548024.pyType = py_static_method_object_type_547678;
		F.line = 563;
		give_id_157814(obj_548024);
		result_547803 = obj_548024;
	framePtr = F.prev;

	return result_547803;

}

function new_py_static_method_default_548421(args_547627) {
	var result_548424 = null;

	var F={procname:"funcobject.newPyStaticMethodDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_548424 = new_py_static_method_simple_547801();
	framePtr = F.prev;

	return result_548424;

}

function get_py_static_method_object_magic_548644(self_no_cast_548646, other_548647) {
	var result_548648 = null;

	var F={procname:"funcobject.getPyStaticMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_548646.m_type, NTI547672))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStaticMethodObject` "));
		}
		
		F.line = 438;
		var self_548801 = self_no_cast_548646;
		result_548648 = self_548801.callable;
	framePtr = F.prev;

	return result_548648;

}

function init_py_static_method_object_magic_548816(self_no_cast_548818, args_548832) {
	var result_548833 = null;

	var F={procname:"funcobject.initPyStaticMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_548832 != null ? args_548832.length : 0) == 1))) {
		F.line = 183;
		var msg_548845 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_548850 = mnewString(0);
		F.line = 185;
		if (fmt_res_548850 != null) { fmt_res_548850 = (fmt_res_548850).concat(makeNimstrLit(" argument (")); } else { fmt_res_548850 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_548850 != null) { fmt_res_548850 = (fmt_res_548850).concat(cstrToNimstr(((args_548832 != null ? args_548832.length : 0))+"")); } else { fmt_res_548850 = cstrToNimstr(((args_548832 != null ? args_548832.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_548850 != null) { fmt_res_548850 = (fmt_res_548850).concat(makeNimstrLit(" given)")); } else { fmt_res_548850 = makeNimstrLit(" given)"); };
		msg_548845 = nimCopy(null, (makeNimstrLit("init takes exactly 1")).concat(fmt_res_548850), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_549010 = mnewString(0);
			F.line = 187;
			if (fmt_res_549010 != null) { fmt_res_549010 = (fmt_res_549010).concat(makeNimstrLit(" argument (")); } else { fmt_res_549010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_549010 != null) { fmt_res_549010 = (fmt_res_549010).concat(cstrToNimstr(((args_548832 != null ? args_548832.length : 0))+"")); } else { fmt_res_549010 = cstrToNimstr(((args_548832 != null ? args_548832.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_549010 != null) { fmt_res_549010 = (fmt_res_549010).concat(makeNimstrLit(" given)")); } else { fmt_res_549010 = makeNimstrLit(" given)"); };
			msg_548845 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_549010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_549209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_549209.tk = 3;
		F.line = 106;
		excp_549209.thrown = true;
		F.line = 107;
		excp_549209.msg = new_py_string_176075(msg_548845);
		result_548833 = excp_549209;
		break BeforeRet;
		}
		
		F.line = 230;
		var callable_549211 = args_548832[chckIndx(0, 0, args_548832.length+0-1)-0];
		if (!(isObj(self_no_cast_548818.m_type, NTI547672))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStaticMethodObject` "));
		}
		
		F.line = 438;
		var self_549401 = self_no_cast_548818;
		F.line = 52;
		self_549401.callable = callable_549211;
		result_548833 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_548833;

}
py_function_object_type_545135.magicMethods.Field34 = get_py_function_object_magic_547232;
py_bound_method_object_type_546108.magicMethods.Field34 = get_py_bound_method_object_magic_547416;
var py_static_method_object_type_547678 = new_py_type_159261(makeNimstrLit("StaticMethod"));
py_static_method_object_type_547678.magicMethods.Field26 = new_py_static_method_default_548421;
py_static_method_object_type_547678.magicMethods.Field34 = get_py_static_method_object_magic_548644;
py_static_method_object_type_547678.magicMethods.Field27 = init_py_static_method_object_magic_548816;

function new_550206() {
	var result_550211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_550401 = null;
		F.line = 211;
		r_550401 = {m_type: NTI550084, name: null, dict: null, id: 0, pyType: null};
		F.line = 212;
		result_550211 = r_550401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_550211;

}

function new_py_module_simple_550201() {
	var result_550203 = null;

	var F={procname:"moduleobject.newPyModuleSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_550424 = new_550206();
		F.line = 561;
		obj_550424.pyType = py_module_object_type_550090;
		F.line = 563;
		give_id_157814(obj_550424);
		F.line = 565;
		obj_550424.dict = new_py_dict_527257();
		result_550203 = obj_550424;
	framePtr = F.prev;

	return result_550203;

}

function new_py_module_default_550821(args_550039) {
	var result_550824 = null;

	var F={procname:"moduleobject.newPyModuleDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_550824 = new_py_module_simple_550201();
	framePtr = F.prev;

	return result_550824;

}
var py_module_object_type_550090 = new_py_type_159261(makeNimstrLit("Module"));
py_module_object_type_550090.magicMethods.Field26 = new_py_module_default_550821;

function new_552206() {
	var result_552211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_552401 = null;
		F.line = 211;
		r_552401 = {m_type: NTI552143, name: null, self: null, kind: 0, fun: 0, id: 0, pyType: null};
		F.line = 212;
		result_552211 = r_552401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_552211;

}

function new_py_nim_func_simple_552201() {
	var result_552203 = null;

	var F={procname:"methodobject.newPyNimFuncSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_552424 = new_552206();
		F.line = 561;
		obj_552424.pyType = py_nim_func_object_type_552155;
		F.line = 563;
		give_id_157814(obj_552424);
		result_552203 = obj_552424;
	framePtr = F.prev;

	return result_552203;

}

function new_py_nim_func_default_552821(args_552098) {
	var result_552824 = null;

	var F={procname:"methodobject.newPyNimFuncDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_552824 = new_py_nim_func_simple_552201();
	framePtr = F.prev;

	return result_552824;

}

function call_py_nim_func_object_magic_553044(self_no_cast_553046, args_553060) {
	var result_553061 = null;

	var F={procname:"methodobject.callPyNimFuncObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_553046.m_type, NTI552143))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNimFuncObject` "));
		}
		
		F.line = 438;
		var self_553201 = self_no_cast_553046;
		F.line = 29;
		switch (self_553201.kind) {
		case 0:
			F.line = 31;
			result_553061 = self_553201.fun(args_553060);
			break BeforeRet;
			break;
		case 1:
			if (!(((args_553060 != null ? args_553060.length : 0) == 0))) {
			F.line = 183;
			var msg_553215 = null;
			if (false) {
			F.line = 185;
			F.line = 185;
			var fmt_res_553220 = mnewString(0);
			F.line = 185;
			if (fmt_res_553220 != null) { fmt_res_553220 = (fmt_res_553220).concat(makeNimstrLit(" argument (")); } else { fmt_res_553220 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_553220 != null) { fmt_res_553220 = (fmt_res_553220).concat(cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"")); } else { fmt_res_553220 = cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"").slice(); };
			F.line = 185;
			if (fmt_res_553220 != null) { fmt_res_553220 = (fmt_res_553220).concat(makeNimstrLit(" given)")); } else { fmt_res_553220 = makeNimstrLit(" given)"); };
			msg_553215 = nimCopy(null, (makeNimstrLit(" takes exactly 0")).concat(fmt_res_553220), NTI138);
			}
			else {
				F.line = 187;
				F.line = 187;
				var fmt_res_553410 = mnewString(0);
				F.line = 187;
				if (fmt_res_553410 != null) { fmt_res_553410 = (fmt_res_553410).concat(makeNimstrLit(" argument (")); } else { fmt_res_553410 = makeNimstrLit(" argument ("); };
				F.line = 270;
				if (fmt_res_553410 != null) { fmt_res_553410 = (fmt_res_553410).concat(cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"")); } else { fmt_res_553410 = cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"").slice(); };
				F.line = 187;
				if (fmt_res_553410 != null) { fmt_res_553410 = (fmt_res_553410).concat(makeNimstrLit(" given)")); } else { fmt_res_553410 = makeNimstrLit(" given)"); };
				msg_553215 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_553410), NTI138);
			}
			
			F.line = 188;
			F.line = 104;
			var excp_553609 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_553609.tk = 3;
			F.line = 106;
			excp_553609.thrown = true;
			F.line = 107;
			excp_553609.msg = new_py_string_176075(msg_553215);
			result_553061 = excp_553609;
			break BeforeRet;
			}
			
			F.line = 34;
			result_553061 = self_553201.fun(self_553201.self);
			break BeforeRet;
			break;
		case 2:
			if (!(((args_553060 != null ? args_553060.length : 0) == 1))) {
			F.line = 183;
			var msg_553623 = null;
			if (false) {
			F.line = 185;
			F.line = 185;
			var fmt_res_553628 = mnewString(0);
			F.line = 185;
			if (fmt_res_553628 != null) { fmt_res_553628 = (fmt_res_553628).concat(makeNimstrLit(" argument (")); } else { fmt_res_553628 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_553628 != null) { fmt_res_553628 = (fmt_res_553628).concat(cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"")); } else { fmt_res_553628 = cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"").slice(); };
			F.line = 185;
			if (fmt_res_553628 != null) { fmt_res_553628 = (fmt_res_553628).concat(makeNimstrLit(" given)")); } else { fmt_res_553628 = makeNimstrLit(" given)"); };
			msg_553623 = nimCopy(null, (makeNimstrLit(" takes exactly 1")).concat(fmt_res_553628), NTI138);
			}
			else {
				F.line = 187;
				F.line = 187;
				var fmt_res_553810 = mnewString(0);
				F.line = 187;
				if (fmt_res_553810 != null) { fmt_res_553810 = (fmt_res_553810).concat(makeNimstrLit(" argument (")); } else { fmt_res_553810 = makeNimstrLit(" argument ("); };
				F.line = 270;
				if (fmt_res_553810 != null) { fmt_res_553810 = (fmt_res_553810).concat(cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"")); } else { fmt_res_553810 = cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"").slice(); };
				F.line = 187;
				if (fmt_res_553810 != null) { fmt_res_553810 = (fmt_res_553810).concat(makeNimstrLit(" given)")); } else { fmt_res_553810 = makeNimstrLit(" given)"); };
				msg_553623 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_553810), NTI138);
			}
			
			F.line = 188;
			F.line = 104;
			var excp_554009 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_554009.tk = 3;
			F.line = 106;
			excp_554009.thrown = true;
			F.line = 107;
			excp_554009.msg = new_py_string_176075(msg_553623);
			result_553061 = excp_554009;
			break BeforeRet;
			}
			
			F.line = 37;
			result_553061 = self_553201.fun(self_553201.self, args_553060[chckIndx(0, 0, args_553060.length+0-1)-0]);
			break BeforeRet;
			break;
		case 3:
			if (!(((args_553060 != null ? args_553060.length : 0) == 2))) {
			F.line = 183;
			var msg_554023 = null;
			if (false) {
			F.line = 185;
			F.line = 185;
			var fmt_res_554028 = mnewString(0);
			F.line = 185;
			if (fmt_res_554028 != null) { fmt_res_554028 = (fmt_res_554028).concat(makeNimstrLit(" argument (")); } else { fmt_res_554028 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_554028 != null) { fmt_res_554028 = (fmt_res_554028).concat(cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"")); } else { fmt_res_554028 = cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"").slice(); };
			F.line = 185;
			if (fmt_res_554028 != null) { fmt_res_554028 = (fmt_res_554028).concat(makeNimstrLit(" given)")); } else { fmt_res_554028 = makeNimstrLit(" given)"); };
			msg_554023 = nimCopy(null, (makeNimstrLit(" takes exactly 2")).concat(fmt_res_554028), NTI138);
			}
			else {
				F.line = 187;
				F.line = 187;
				var fmt_res_554210 = mnewString(0);
				F.line = 187;
				if (fmt_res_554210 != null) { fmt_res_554210 = (fmt_res_554210).concat(makeNimstrLit(" argument (")); } else { fmt_res_554210 = makeNimstrLit(" argument ("); };
				F.line = 270;
				if (fmt_res_554210 != null) { fmt_res_554210 = (fmt_res_554210).concat(cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"")); } else { fmt_res_554210 = cstrToNimstr(((args_553060 != null ? args_553060.length : 0))+"").slice(); };
				F.line = 187;
				if (fmt_res_554210 != null) { fmt_res_554210 = (fmt_res_554210).concat(makeNimstrLit(" given)")); } else { fmt_res_554210 = makeNimstrLit(" given)"); };
				msg_554023 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_554210), NTI138);
			}
			
			F.line = 188;
			F.line = 104;
			var excp_554409 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_554409.tk = 3;
			F.line = 106;
			excp_554409.thrown = true;
			F.line = 107;
			excp_554409.msg = new_py_string_176075(msg_554023);
			result_553061 = excp_554409;
			break BeforeRet;
			}
			
			F.line = 40;
			result_553061 = self_553201.fun(self_553201.self, args_553060[chckIndx(0, 0, args_553060.length+0-1)-0], args_553060[chckIndx(1, 0, args_553060.length+0-1)-0]);
			break BeforeRet;
			break;
		case 4:
			F.line = 42;
			result_553061 = self_553201.fun(self_553201.self, args_553060);
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_553061;

}
var py_nim_func_object_type_552155 = new_py_type_159261(makeNimstrLit("NimFunc"));
py_nim_func_object_type_552155.kind = 12;
py_nim_func_object_type_552155.magicMethods.Field26 = new_py_nim_func_default_552821;
py_nim_func_object_type_552155.magicMethods.Field31 = call_py_nim_func_object_magic_553044;
var val_stack_556095 = [null];
var block_stack_556097 = [null];

function new_595206() {
	var result_595211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_595401 = null;
		F.line = 211;
		r_595401 = {m_type: NTI595151, start: null, ending: null, step: null, length: null, id: 0, pyType: null};
		F.line = 212;
		result_595211 = r_595401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_595211;

}

function new_py_range_simple_595201() {
	var result_595203 = null;

	var F={procname:"rangeobject.newPyRangeSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_595424 = new_595206();
		F.line = 561;
		obj_595424.pyType = py_range_object_type_595163;
		F.line = 563;
		give_id_157814(obj_595424);
		result_595203 = obj_595424;
	framePtr = F.prev;

	return result_595203;

}

function new_py_range_default_595821(args_595106) {
	var result_595824 = null;

	var F={procname:"rangeobject.newPyRangeDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_595824 = new_py_range_simple_595201();
	framePtr = F.prev;

	return result_595824;

}

function len_py_range_object_magic_596044(self_no_cast_596046) {
	var result_596047 = null;

	var F={procname:"rangeobject.lenPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_596046.m_type, NTI595151))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_596201 = self_no_cast_596046;
		result_596047 = self_596201.length;
	framePtr = F.prev;

	return result_596047;

}

function repr_py_range_object_magic_596216(self_no_cast_596218) {
	var result_596219 = null;

	var F={procname:"rangeobject.reprPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_596218.m_type, NTI595151))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_596401 = self_no_cast_596218;
		F.line = 21;
		var fmt_res_596405 = mnewString(0);
		F.line = 21;
		if (fmt_res_596405 != null) { fmt_res_596405 = (fmt_res_596405).concat(makeNimstrLit("range(")); } else { fmt_res_596405 = makeNimstrLit("range("); };
		F.line = 270;
		if (fmt_res_596405 != null) { fmt_res_596405 = (fmt_res_596405).concat(HEX24_157579(self_596401.start)); } else { fmt_res_596405 = HEX24_157579(self_596401.start).slice(); };
		F.line = 21;
		if (fmt_res_596405 != null) { fmt_res_596405 = (fmt_res_596405).concat(makeNimstrLit(", ")); } else { fmt_res_596405 = makeNimstrLit(", "); };
		F.line = 270;
		if (fmt_res_596405 != null) { fmt_res_596405 = (fmt_res_596405).concat(HEX24_157579(self_596401.ending)); } else { fmt_res_596405 = HEX24_157579(self_596401.ending).slice(); };
		F.line = 21;
		if (fmt_res_596405 != null) { fmt_res_596405 = (fmt_res_596405).concat(makeNimstrLit(", ")); } else { fmt_res_596405 = makeNimstrLit(", "); };
		F.line = 270;
		if (fmt_res_596405 != null) { fmt_res_596405 = (fmt_res_596405).concat(HEX24_157579(self_596401.step)); } else { fmt_res_596405 = HEX24_157579(self_596401.step).slice(); };
		F.line = 21;
		if (fmt_res_596405 != null) { fmt_res_596405 = (fmt_res_596405).concat(makeNimstrLit(", ")); } else { fmt_res_596405 = makeNimstrLit(", "); };
		F.line = 270;
		if (fmt_res_596405 != null) { fmt_res_596405 = (fmt_res_596405).concat(HEX24_157579(self_596401.length)); } else { fmt_res_596405 = HEX24_157579(self_596401.length).slice(); };
		F.line = 21;
		if (fmt_res_596405 != null) { fmt_res_596405 = (fmt_res_596405).concat(makeNimstrLit(")")); } else { fmt_res_596405 = makeNimstrLit(")"); };
		result_596219 = new_py_string_176075(fmt_res_596405);
	framePtr = F.prev;

	return result_596219;

}

function positive_375413(int_obj_375415) {
	var result_375416 = false;

	var F={procname:"numobjects.positive",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 88;
		result_375416 = (int_obj_375415.sign == 1);
	framePtr = F.prev;

	return result_375416;

}

function init_py_range_object_magic_597215(self_no_cast_597217, args_597231) {
	var result_597232 = null;

	var F={procname:"rangeobject.initPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_597217.m_type, NTI595151))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_597401 = self_no_cast_597217;
		L1: do {
			F.line = 25;
			var arg_597410 = null;
			F.line = 3911;
			var i_597605 = 0;
			F.line = 3912;
			var l_597607 = (args_597231 != null ? args_597231.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_597605 < l_597607)) break L3;
						F.line = 3914;
						arg_597410 = args_597231[chckIndx(i_597605, 0, args_597231.length+0-1)-0];
						if (!(of_py_int_object_374315(arg_597410))) {
						F.line = 29;
						var msg_597411 = makeNimstrLit("range() only support int arguments");
						F.line = 30;
						F.line = 104;
						var excp_597413 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_597413.tk = 3;
						F.line = 106;
						excp_597413.thrown = true;
						F.line = 107;
						excp_597413.msg = new_py_string_176075(msg_597411);
						result_597232 = excp_597413;
						break BeforeRet;
						}
						
						F.line = 3915;
						i_597605 = addInt(i_597605, 1);
						if (!(((args_597231 != null ? args_597231.length : 0) == l_597607))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 31;
		var start_597415 = null;
		F.line = 31;
		var ending_597416 = null;
		F.line = 31;
		var step_597417 = null;
		F.line = 32;
		switch ((args_597231 != null ? args_597231.length : 0)) {
		case 1:
			F.line = 34;
			start_597415 = new_py_int_375257(0);
			F.line = 35;
			ending_597416 = args_597231[chckIndx(0, 0, args_597231.length+0-1)-0];
			F.line = 36;
			step_597417 = new_py_int_375257(1);
			break;
		case 2:
			F.line = 38;
			start_597415 = args_597231[chckIndx(0, 0, args_597231.length+0-1)-0];
			F.line = 39;
			ending_597416 = args_597231[chckIndx(1, 0, args_597231.length+0-1)-0];
			F.line = 40;
			step_597417 = new_py_int_375257(1);
			break;
		case 3:
			F.line = 42;
			start_597415 = args_597231[chckIndx(0, 0, args_597231.length+0-1)-0];
			F.line = 43;
			ending_597416 = args_597231[chckIndx(1, 0, args_597231.length+0-1)-0];
			F.line = 44;
			step_597417 = args_597231[chckIndx(2, 0, args_597231.length+0-1)-0];
			if (zero_375388(step_597417)) {
			F.line = 46;
			var msg_597425 = makeNimstrLit("range() step must not be 0");
			F.line = 47;
			F.line = 104;
			var excp_597427 = new_py_value_error_simple_362601();
			F.line = 105;
			excp_597427.tk = 5;
			F.line = 106;
			excp_597427.thrown = true;
			F.line = 107;
			excp_597427.msg = new_py_string_176075(msg_597425);
			result_597232 = excp_597427;
			break BeforeRet;
			}
			
			break;
		default: 
			F.line = 49;
			var msg_597429 = makeNimstrLit("range() expected 1-3 arguments");
			F.line = 50;
			F.line = 104;
			var excp_597431 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_597431.tk = 3;
			F.line = 106;
			excp_597431.thrown = true;
			F.line = 107;
			excp_597431.msg = new_py_string_176075(msg_597429);
			result_597232 = excp_597431;
			break BeforeRet;
			break;
		}
		F.line = 51;
		var length_597433 = null;
		if (positive_375413(step_597417)) {
		F.line = 57;
		length_597433 = div_377641(HEX2D_377181(HEX2B_377161(HEX2D_377181(ending_597416, start_597415), step_597417), py_int_one_375347), step_597417);
		}
		else {
			if (!(negative_375363(step_597417))) {
			F.line = 60;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/rangeobject.nim(60, 12) `negative(step)` "));
			}
			
			F.line = 61;
			length_597433 = div_377641(HEX2D_377181(HEX2D_377181(HEX2B_377161(HEX2D_377203(ending_597416), start_597415), step_597417), py_int_one_375347), HEX2D_377203(step_597417));
		}
		
		if (negative_375363(length_597433)) {
		F.line = 63;
		length_597433 = py_int_zero_375346;
		}
		
		F.line = 64;
		self_597401.start = start_597415;
		F.line = 65;
		self_597401.ending = ending_597416;
		F.line = 66;
		self_597401.step = step_597417;
		F.line = 67;
		self_597401.length = length_597433;
		result_597232 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_597232;

}

function new_597806() {
	var result_597811 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_598001 = null;
		F.line = 211;
		r_598001 = {m_type: NTI597677, start: null, step: null, length: null, index: null, id: 0, pyType: null};
		F.line = 212;
		result_597811 = r_598001;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_597811;

}

function new_py_range_iter_simple_597801() {
	var result_597803 = null;

	var F={procname:"rangeobject.newPyRangeIterSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_598024 = new_597806();
		F.line = 561;
		obj_598024.pyType = py_range_iter_object_type_597689;
		F.line = 563;
		give_id_157814(obj_598024);
		result_597803 = obj_598024;
	framePtr = F.prev;

	return result_597803;

}

function new_py_range_iter_default_598421(args_597632) {
	var result_598424 = null;

	var F={procname:"rangeobject.newPyRangeIterDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_598424 = new_py_range_iter_simple_597801();
	framePtr = F.prev;

	return result_598424;

}

function iter_py_range_object_magic_598644(self_no_cast_598646) {
	var result_598647 = null;

	var F={procname:"rangeobject.iterPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_598646.m_type, NTI595151))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_598801 = self_no_cast_598646;
		F.line = 79;
		var iter_598802 = new_py_range_iter_simple_597801();
		F.line = 80;
		iter_598802.start = self_598801.start;
		F.line = 81;
		iter_598802.step = self_598801.step;
		F.line = 82;
		iter_598802.length = self_598801.length;
		F.line = 83;
		iter_598802.index = new_py_int_375257(0);
		result_598647 = iter_598802;
	framePtr = F.prev;

	return result_598647;

}

function iter_py_range_iter_object_magic_598817(self_no_cast_598819) {
	var result_598820 = null;

	var F={procname:"rangeobject.iterPyRangeIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_598819.m_type, NTI597677))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeIterObject` "));
		}
		
		F.line = 438;
		var self_599001 = self_no_cast_598819;
		result_598820 = self_599001;
	framePtr = F.prev;

	return result_598820;

}

function iternext_py_range_iter_object_magic_599016(self_no_cast_599018) {
	var result_599019 = null;

	var F={procname:"rangeobject.iternextPyRangeIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_599018.m_type, NTI597677))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeIterObject` "));
		}
		
		F.line = 438;
		var self_599201 = self_no_cast_599018;
			F.line = 56;
			if ((self_599201.index.pyType === null)) {
			F.line = 2895;
			var e_599228 = null;
			F.line = 2896;
			e_599228 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_599228.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_599228.parent = null;
			F.line = 26;
			raiseException(e_599228, "InternalError");
			}
			
			F.line = 27;
			var fun_599402 = self_599201.index.pyType.magicMethods.Field16;
			if ((fun_599402 === null)) {
			F.line = 29;
			var obj_type_str_599411 = self_599201.index.pyType.name;
			F.line = 30;
			var method_str_599413 = makeNimstrLit("lt");
			F.line = 31;
			var msg_599415 = (makeNimstrLit("No ")).concat(method_str_599413,makeNimstrLit(" method for "),obj_type_str_599411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_599417 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_599417.tk = 3;
			F.line = 106;
			excp_599417.thrown = true;
			F.line = 107;
			excp_599417.msg = new_py_string_176075(msg_599415);
			var excp_599420 = excp_599417;
			F.line = 36;
			result_599019 = excp_599420;
			break BeforeRet;
			}
			
			var fun_599602 = fun_599402;
			F.line = 57;
			var res_599604 = fun_599602(self_599201.index, self_599201.length);
		if ((res_599604 == py_true_obj_354074)) {
		F.line = 92;
		result_599019 = HEX2B_377161(self_599201.start, HEX2A_377221(self_599201.index, self_599201.step));
		F.line = 93;
		F.line = 56;
		if ((self_599201.index.pyType === null)) {
		F.line = 2895;
		var e_599838 = null;
		F.line = 2896;
		e_599838 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_599838.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_599838.parent = null;
		F.line = 26;
		raiseException(e_599838, "InternalError");
		}
		
		F.line = 27;
		var fun_600002 = self_599201.index.pyType.magicMethods.Field0;
		if ((fun_600002 === null)) {
		F.line = 29;
		var obj_type_str_600011 = self_599201.index.pyType.name;
		F.line = 30;
		var method_str_600013 = makeNimstrLit("add");
		F.line = 31;
		var msg_600015 = (makeNimstrLit("No ")).concat(method_str_600013,makeNimstrLit(" method for "),obj_type_str_600011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_600017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_600017.tk = 3;
		F.line = 106;
		excp_600017.thrown = true;
		F.line = 107;
		excp_600017.msg = new_py_string_176075(msg_600015);
		var excp_600020 = excp_600017;
		F.line = 36;
		result_599019 = excp_600020;
		break BeforeRet;
		}
		
		var fun_600202 = fun_600002;
		F.line = 57;
		var res_600204 = fun_600202(self_599201.index, new_py_int_375257(1));
		var new_index_600401 = res_600204;
		F.line = 94;
		self_599201.index = new_index_600401;
		}
		else {
			F.line = 96;
			F.line = 97;
			var excp_600403 = new_py_stop_iter_error_simple_364601();
			F.line = 98;
			excp_600403.tk = 7;
			F.line = 99;
			excp_600403.thrown = true;
			result_599019 = excp_600403;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_599019;

}
var py_range_object_type_595163 = new_py_type_159261(makeNimstrLit("Range"));
py_range_object_type_595163.magicMethods.Field26 = new_py_range_default_595821;
py_range_object_type_595163.magicMethods.Field23 = len_py_range_object_magic_596044;
py_range_object_type_595163.magicMethods.Field25 = repr_py_range_object_magic_596216;
py_range_object_type_595163.magicMethods.Field27 = init_py_range_object_magic_597215;
var py_range_iter_object_type_597689 = new_py_type_159261(makeNimstrLit("RangeIter"));
py_range_iter_object_type_597689.magicMethods.Field26 = new_py_range_iter_default_598421;
py_range_object_type_595163.magicMethods.Field36 = iter_py_range_object_magic_598644;
py_range_iter_object_type_597689.magicMethods.Field36 = iter_py_range_iter_object_magic_598817;
py_range_iter_object_type_597689.magicMethods.Field37 = iternext_py_range_iter_object_magic_599016;

function add_quoted_494609(s_494613, s_494613_Idx, x_494615) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4110;
		if (s_494613[s_494613_Idx] != null) { s_494613[s_494613_Idx] = (s_494613[s_494613_Idx]).concat(HEX24_157579(x_494615)); } else { s_494613[s_494613_Idx] = HEX24_157579(x_494615).slice(); };
	framePtr = F.prev;

	
}

function collection_to_string_494245(x_494249, prefix_494251, separator_494253, suffix_494255) {
	var result_494256 = [null];

	var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2631;
		result_494256[0] = nimCopy(null, prefix_494251, NTI138);
		F.line = 2632;
		var first_element_494257 = true;
		L1: do {
			F.line = 2633;
			var value_494415 = null;
			F.line = 3911;
			var i_494818 = 0;
			F.line = 3912;
			var l_494820 = (x_494249 != null ? x_494249.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_494818 < l_494820)) break L3;
						F.line = 3914;
						value_494415 = x_494249[chckIndx(i_494818, 0, x_494249.length+0-1)-0];
						if (first_element_494257) {
						F.line = 2635;
						first_element_494257 = false;
						}
						else {
							F.line = 2637;
						if (result_494256[0] != null) { result_494256[0] = (result_494256[0]).concat(separator_494253); } else { result_494256[0] = separator_494253.slice(); };
						}
						
						if ((value_494415 === null)) {
						F.line = 2642;
						if (result_494256[0] != null) { result_494256[0] = (result_494256[0]).concat(makeNimstrLit("nil")); } else { result_494256[0] = makeNimstrLit("nil"); };
						}
						else {
							F.line = 2644;
						add_quoted_494609(result_494256, 0, value_494415);
						}
						
						F.line = 3915;
						i_494818 = addInt(i_494818, 1);
						if (!(((x_494249 != null ? x_494249.length : 0) == l_494820))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2648;
		if (result_494256[0] != null) { result_494256[0] = (result_494256[0]).concat(suffix_494255); } else { result_494256[0] = suffix_494255.slice(); };
	framePtr = F.prev;

	return result_494256[0];

}

function HEX24_494237(x_494242) {
	var result_494243 = null;

	var F={procname:"$.$",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2659;
		result_494243 = nimCopy(null, collection_to_string_494245(x_494242, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);
	framePtr = F.prev;

	return result_494243;

}

function HEX5BHEX5D_590449(s_590456, x_590459) {
	var result_590461 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_590607 = subInt((s_590456 != null ? s_590456.length : 0), x_590459.a);
		F.line = 3707;
		var l_590807 = addInt(subInt(subInt((s_590456 != null ? s_590456.length : 0), x_590459.b), a_590607), 1);
		F.line = 3708;
		result_590461 = new Array(chckRange(l_590807, 0, 2147483647)); for (var i=0;i<chckRange(l_590807, 0, 2147483647);++i) {result_590461[i]=null;}		L1: do {
			F.line = 3709;
			var i_590827 = 0;
			F.line = 3617;
			var i_590835 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_590835 < l_590807)) break L3;
						F.line = 3619;
						i_590827 = i_590835;
						F.line = 3709;
						result_590461[chckIndx(i_590827, 0, result_590461.length+0-1)-0] = s_590456[chckIndx(addInt(i_590827, a_590607), 0, s_590456.length+0-1)-0];
						F.line = 3620;
						i_590835 = addInt(i_590835, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_590461;

}

function HEX2EHEX2E_590406(a_590411, b_590413) {
	var result_590421 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_590421.a = a_590411;
		F.line = 399;
		result_590421.b = b_590413;
	framePtr = F.prev;

	return result_590421;

}

function new_py_frame_543057() {
	var result_543059 = null;

	var F={procname:"frameobject.newPyFrame",prev:framePtr,filename:"../Objects/frameobject.nim",line:0};
	framePtr = F;
		F.line = 25;
		result_543059 = new_py_frame_simple_542201();
	framePtr = F.prev;

	return result_543059;

}

function new_seq_568854(len_568858) {
	var result_568860 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_568860 = new Array(len_568858); for (var i=0;i<len_568858;++i) {result_568860[i]=null;}	framePtr = F.prev;

	return result_568860;

}

function new_seq_592852(len_592856) {
	var result_592858 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_592858 = new Array(len_592856); for (var i=0;i<len_592856;++i) {result_592858[i]=null;}	framePtr = F.prev;

	return result_592858;

}

function new_py_cell_541057(content_541059) {
	var result_541060 = null;

	var F={procname:"cellobject.newPyCell",prev:framePtr,filename:"../Objects/cellobject.nim",line:0};
	framePtr = F;
		F.line = 8;
		result_541060 = new_py_cell_simple_540201();
		F.line = 9;
		result_541060.refObj = content_541059;
	framePtr = F.prev;

	return result_541060;

}

function of_py_cell_object_540158(obj_540095) {
	var result_540160 = false;

	var F={procname:"cellobject.ofPyCellObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_540160 = (obj_540095.pyType.kind == 16);
	framePtr = F.prev;

	return result_540160;

}

function new_py_frame_556050(fun_556052, args_556054, back_556055) {
	var result_589421 = null;

	var F={procname:"neval.newPyFrame",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 653;
		F.line = 653;
		var code_589422 = fun_556052.code;
		if (((code_589422.argScopes != null ? code_589422.argScopes.length : 0) < (args_556054 != null ? args_556054.length : 0))) {
		F.line = 656;
		F.line = 656;
		var fmt_res_589440 = mnewString(0);
		F.line = 260;
		if (fmt_res_589440 != null) { fmt_res_589440 = (fmt_res_589440).concat(fun_556052.name.str); } else { fmt_res_589440 = fun_556052.name.str.slice(); };
		F.line = 656;
		if (fmt_res_589440 != null) { fmt_res_589440 = (fmt_res_589440).concat(makeNimstrLit("() takes ")); } else { fmt_res_589440 = makeNimstrLit("() takes "); };
		F.line = 270;
		if (fmt_res_589440 != null) { fmt_res_589440 = (fmt_res_589440).concat(cstrToNimstr(((code_589422.argScopes != null ? code_589422.argScopes.length : 0))+"")); } else { fmt_res_589440 = cstrToNimstr(((code_589422.argScopes != null ? code_589422.argScopes.length : 0))+"").slice(); };
		F.line = 656;
		if (fmt_res_589440 != null) { fmt_res_589440 = (fmt_res_589440).concat(makeNimstrLit(" positional arguments but ")); } else { fmt_res_589440 = makeNimstrLit(" positional arguments but "); };
		F.line = 270;
		if (fmt_res_589440 != null) { fmt_res_589440 = (fmt_res_589440).concat(cstrToNimstr(((args_556054 != null ? args_556054.length : 0))+"")); } else { fmt_res_589440 = cstrToNimstr(((args_556054 != null ? args_556054.length : 0))+"").slice(); };
		F.line = 656;
		if (fmt_res_589440 != null) { fmt_res_589440 = (fmt_res_589440).concat(makeNimstrLit(" were given")); } else { fmt_res_589440 = makeNimstrLit(" were given"); };
		var msg_590008 = nimCopy(null, fmt_res_589440, NTI138);
		F.line = 657;
		F.line = 104;
		var excp_590010 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_590010.tk = 3;
		F.line = 106;
		excp_590010.thrown = true;
		F.line = 107;
		excp_590010.msg = new_py_string_176075(msg_590008);
		result_589421 = excp_590010;
		break BeforeRet;
		}
		else {
		if (((args_556054 != null ? args_556054.length : 0) < (code_589422.argScopes != null ? code_589422.argScopes.length : 0))) {
		F.line = 659;
		var diff_590040 = subInt((code_589422.argScopes != null ? code_589422.argScopes.length : 0), (args_556054 != null ? args_556054.length : 0));
		F.line = 660;
		F.line = 660;
		var fmt_res_590044 = mnewString(0);
		F.line = 260;
		if (fmt_res_590044 != null) { fmt_res_590044 = (fmt_res_590044).concat(fun_556052.name.str); } else { fmt_res_590044 = fun_556052.name.str.slice(); };
		F.line = 660;
		if (fmt_res_590044 != null) { fmt_res_590044 = (fmt_res_590044).concat(makeNimstrLit("() missing ")); } else { fmt_res_590044 = makeNimstrLit("() missing "); };
		F.line = 270;
		if (fmt_res_590044 != null) { fmt_res_590044 = (fmt_res_590044).concat(cstrToNimstr((diff_590040)+"")); } else { fmt_res_590044 = cstrToNimstr((diff_590040)+"").slice(); };
		F.line = 660;
		if (fmt_res_590044 != null) { fmt_res_590044 = (fmt_res_590044).concat(makeNimstrLit(" required positional argument: ")); } else { fmt_res_590044 = makeNimstrLit(" required positional argument: "); };
		F.line = 661;
		var fmt_res_590404 = mnewString(0);
		F.line = 270;
		if (fmt_res_590404 != null) { fmt_res_590404 = (fmt_res_590404).concat(HEX24_494237(HEX5BHEX5D_590449(code_589422.argNames, HEX2EHEX2E_590406(diff_590040, 1)))); } else { fmt_res_590404 = HEX24_494237(HEX5BHEX5D_590449(code_589422.argNames, HEX2EHEX2E_590406(diff_590040, 1))).slice(); };
		F.line = 661;
		if (fmt_res_590404 != null) { fmt_res_590404 = (fmt_res_590404).concat(makeNimstrLit(". ")); } else { fmt_res_590404 = makeNimstrLit(". "); };
		F.line = 270;
		if (fmt_res_590404 != null) { fmt_res_590404 = (fmt_res_590404).concat(cstrToNimstr(((args_556054 != null ? args_556054.length : 0))+"")); } else { fmt_res_590404 = cstrToNimstr(((args_556054 != null ? args_556054.length : 0))+"").slice(); };
		F.line = 661;
		if (fmt_res_590404 != null) { fmt_res_590404 = (fmt_res_590404).concat(makeNimstrLit(" args are given.")); } else { fmt_res_590404 = makeNimstrLit(" args are given."); };
		var msg_592808 = (fmt_res_590044).concat(fmt_res_590404);
		F.line = 662;
		F.line = 104;
		var excp_592810 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_592810.tk = 3;
		F.line = 106;
		excp_592810.thrown = true;
		F.line = 107;
		excp_592810.msg = new_py_string_176075(msg_592808);
		result_589421 = excp_592810;
		break BeforeRet;
		}
		}
		F.line = 663;
		var frame_592812 = new_py_frame_543057();
		F.line = 664;
		frame_592812.back = back_556055;
		F.line = 665;
		frame_592812.code = code_589422;
		F.line = 666;
		frame_592812.globals = fun_556052.globals;
		F.line = 668;
		frame_592812.fastLocals = nimCopy(null, new_seq_568854(chckRange((code_589422.localVars != null ? code_589422.localVars.length : 0), 0, 2147483647)), NTI568859);
		F.line = 669;
		frame_592812.cellVars = nimCopy(null, new_seq_592852(chckRange(addInt((code_589422.cellVars != null ? code_589422.cellVars.length : 0), (code_589422.freeVars != null ? code_589422.freeVars.length : 0)), 0, 2147483647)), NTI592857);
		L1: do {
			F.line = 671;
			var i_592931 = 0;
			F.line = 3616;
			var colontmp__593811 = 0;
			F.line = 671;
			colontmp__593811 = (code_589422.cellVars != null ? code_589422.cellVars.length : 0);
			F.line = 3617;
			var i_593814 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_593814 < colontmp__593811)) break L3;
						F.line = 3619;
						i_592931 = i_593814;
						F.line = 672;
						frame_592812.cellVars[chckIndx(i_592931, 0, frame_592812.cellVars.length+0-1)-0] = new_py_cell_541057(null);
						F.line = 3620;
						i_593814 = addInt(i_593814, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 674;
			var i_592949 = 0;
			F.line = 3616;
			var colontmp__593817 = 0;
			F.line = 674;
			colontmp__593817 = (args_556054 != null ? args_556054.length : 0);
			F.line = 3617;
			var i_593820 = 0;
			L5: do {
				F.line = 3618;
					L6: while (true) {
					if (!(i_593820 < colontmp__593817)) break L6;
						F.line = 3619;
						i_592949 = i_593820;
						F.line = 675;
						var colontmp__605153 = {Field0: 0, Field1: 0};
						F.line = 675;
						var scope_592950 = 0;
						F.line = 675;
						var scope_idx_592951 = 0;
						F.line = 675;
						nimCopy(colontmp__605153, code_589422.argScopes[chckIndx(i_592949, 0, code_589422.argScopes.length+0-1)-0], NTI492148);
						F.line = 675;
						scope_592950 = colontmp__605153["Field0"];
						F.line = 675;
						scope_idx_592951 = colontmp__605153["Field1"];
						F.line = 676;
						switch (scope_592950) {
						case 0:
							F.line = 678;
							frame_592812.fastLocals[chckIndx(scope_idx_592951, 0, frame_592812.fastLocals.length+0-1)-0] = args_556054[chckIndx(i_592949, 0, args_556054.length+0-1)-0];
							break;
						case 3:
							F.line = 2895;
							var e_592959 = null;
							F.line = 2896;
							e_592959 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 28;
							e_592959.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
							F.line = 2891;
							e_592959.parent = null;
							F.line = 680;
							raiseException(e_592959, "InternalError");
							break;
						case 1:
							F.line = 682;
							frame_592812.cellVars[chckIndx(scope_idx_592951, 0, frame_592812.cellVars.length+0-1)-0].refObj = args_556054[chckIndx(i_592949, 0, args_556054.length+0-1)-0];
							break;
						case 2:
							F.line = 2895;
							var e_593008 = null;
							F.line = 2896;
							e_593008 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 684;
							e_593008.message = nimCopy(null, makeNimstrLit("arguments can\'t be free"), NTI138);
							F.line = 2891;
							e_593008.parent = null;
							F.line = 684;
							raiseException(e_593008, "InternalError");
							break;
						}
						F.line = 3620;
						i_593820 = addInt(i_593820, 1);
					}
			} while(false);
		} while(false);
		if ((fun_556052.closure === null)) {
		if (!(((code_589422.freeVars != null ? code_589422.freeVars.length : 0) == 0))) {
		F.line = 687;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(687, 12) `len(code.freeVars) == 0` "));
		}
		
		}
		else {
			if (!(((code_589422.freeVars != null ? code_589422.freeVars.length : 0) == (fun_556052.closure.items != null ? fun_556052.closure.items.length : 0)))) {
			F.line = 689;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(689, 12) `len(code.freeVars) == len(fun.closure.items)` "));
			}
			
			L7: do {
				F.line = 690;
				var idx_593614 = 0;
				F.line = 690;
				var c_593615 = null;
				F.line = 2352;
				var colontmp__593823 = null;
				F.line = 690;
				colontmp__593823 = fun_556052.closure.items;
				F.line = 2354;
				var i_593826 = 0;
				L8: do {
					F.line = 2355;
						L9: while (true) {
						if (!(i_593826 < (colontmp__593823 != null ? colontmp__593823.length : 0))) break L9;
							F.line = 2356;
							idx_593614 = i_593826;
							F.line = 2356;
							c_593615 = colontmp__593823[chckIndx(i_593826, 0, colontmp__593823.length+0-1)-0];
							if (!(of_py_cell_object_540158(c_593615))) {
							F.line = 691;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(691, 14) `ofPyCellObject(c)` "));
							}
							
							F.line = 692;
							frame_592812.cellVars[chckIndx(addInt((code_589422.cellVars != null ? code_589422.cellVars.length : 0), idx_593614), 0, frame_592812.cellVars.length+0-1)-0] = c_593615;
							F.line = 2357;
							i_593826 = addInt(i_593826, 1);
						}
				} while(false);
			} while(false);
		}
		
		result_589421 = frame_592812;
	} while (false);
	framePtr = F.prev;

	return result_589421;

}

function HEX5BHEX5D_557217(s_557223, i_557225) {
	var result_557227 = [null, 0];
	var result_557227_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_557227 = s_557223; result_557227_Idx = chckIndx(subInt((s_557223 != null ? s_557223.length : 0), i_557225), 0, s_557223.length+0-1)-0;
	framePtr = F.prev;

	return [result_557227, result_557227_Idx];

}

function HEX5BHEX5DHEX3D_558204(s_558210, i_558212, x_558214) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3735;
		s_558210[chckIndx(subInt((s_558210 != null ? s_558210.length : 0), i_558212), 0, s_558210.length+0-1)-0] = x_558214;
	framePtr = F.prev;

	
}

function HEX5BHEX5D_528542(t_528549, key_528551) {
	var result_528553 = [null, 0];
	var result_528553_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_528555 = [0];
		F.line = 161;
		var index_528569 = raw_get_527600(t_528549, key_528551, hc_528555, 0);
		if ((0 <= index_528569)) {
		F.line = 162;
		result_528553 = t_528549.data[chckIndx(index_528569, 0, t_528549.data.length+0-1)-0]; result_528553_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_528806 = null;
			F.line = 2896;
			e_528806 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_528806.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_157579(key_528551)), NTI138);
			F.line = 2891;
			e_528806.parent = null;
			F.line = 165;
			raiseException(e_528806, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_528553, result_528553_Idx];

}

function HEX5BHEX5D_528323(dict_528325, key_528326) {
		var Tmp1;

	var result_528327 = null;

	var F={procname:"dictobject.[]",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 53;
		result_528327 = (Tmp1 = HEX5BHEX5D_528542(dict_528325.table, key_528326), Tmp1[0])[Tmp1[1]];
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_528327;

}

function HEX5BHEX5D_567236(s_567242, i_567244) {
	var result_567246 = [null, 0];
	var result_567246_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_567246 = s_567242; result_567246_Idx = chckIndx(subInt((s_567242 != null ? s_567242.length : 0), i_567244), 0, s_567242.length+0-1)-0;
	framePtr = F.prev;

	return [result_567246, result_567246_Idx];

}

function pop_567271(s_567277, s_567277_Idx) {
	var result_567278 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_567286 = subInt((s_567277[s_567277_Idx] != null ? s_567277[s_567277_Idx].length : 0), 1);
		F.line = 2525;
		result_567278 = s_567277[s_567277_Idx][chckIndx(l_567286, 0, s_567277[s_567277_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_567277[s_567277_Idx].length < chckRange(l_567286, 0, 2147483647)) { for (var i=s_567277[s_567277_Idx].length;i<chckRange(l_567286, 0, 2147483647);++i) s_567277[s_567277_Idx].push(null); }
               else { s_567277[s_567277_Idx].length = chckRange(l_567286, 0, 2147483647); };
	framePtr = F.prev;

	return result_567278;

}

function of_py_list_object_510271(obj_510200) {
	var result_510273 = false;

	var F={procname:"listobject.ofPyListObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_510273 = (obj_510200.pyType.kind == 9);
	framePtr = F.prev;

	return result_510273;

}

function HEX5BHEX5DHEX3D_528842(dict_528844, key_528845, value_528846) {
	var F={procname:"dictobject.[]=",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		F.line = 57;
		HEX5BHEX5DHEX3D_528993(dict_528844.table, key_528845, value_528846);
	framePtr = F.prev;

	
}

function new_py_list_511273(items_511276) {
	var result_511277 = null;

	var F={procname:"listobject.newPyList",prev:framePtr,filename:"../Objects/listobject.nim",line:0};
	framePtr = F;
		F.line = 19;
		result_511277 = new_py_list_511257();
		F.line = 20;
		result_511277.items = nimCopy(null, items_511276, NTI511275);
	framePtr = F.prev;

	return result_511277;

}

function is_exception_type_491113(obj_491115) {
	var result_491116 = false;

	var F={procname:"exceptionsImpl.isExceptionType",prev:framePtr,filename:"../Objects/exceptionsImpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 66;
		if (!((obj_491115.pyType.kind == 7))) {
		F.line = 67;
		result_491116 = false;
		break BeforeRet;
		}
		
		F.line = 68;
		var obj_type_491126 = obj_491115;
		result_491116 = (obj_type_491126.kind == 3);
	} while (false);
	framePtr = F.prev;

	return result_491116;

}

function match_excp_491072(target_491074, current_491075) {
	var result_491076 = null;

	var F={procname:"exceptionsImpl.matchExcp",prev:framePtr,filename:"../Objects/exceptionsImpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 57;
		F.line = 57;
		var tp_491077 = current_491075.pyType;
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!!((tp_491077 == null))) break L2;
					if ((tp_491077 == target_491074)) {
					F.line = 60;
					result_491076 = py_true_obj_354074;
					break BeforeRet;
					}
					
					F.line = 61;
					tp_491077 = tp_491077.base;
				}
		} while(false);
		result_491076 = py_false_obj_354075;
	} while (false);
	framePtr = F.prev;

	return result_491076;

}

function py_import_556059(name_556061) {
	var result_589182 = null;

	var F={procname:"neval.pyImport",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
		F.line = 617;
		F.line = 104;
		var excp_589184 = new_py_runtime_error_simple_371601();
		F.line = 105;
		excp_589184.tk = 14;
		F.line = 106;
		excp_589184.thrown = true;
		F.line = 107;
		excp_589184.msg = new_py_string_176075(makeNimstrLit("Can\'t import in js mode"));
		result_589182 = excp_589184;
	framePtr = F.prev;

	return result_589182;

}

function has_key_527588(t_527594, key_527596) {
	var result_527597 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_527598 = [0];
		F.line = 264;
		result_527597 = (0 <= raw_get_527600(t_527594, key_527596, hc_527598, 0));
	framePtr = F.prev;

	return result_527597;

}

function has_key_527437(dict_527439, key_527440) {
	var result_527441 = false;

	var F={procname:"dictobject.hasKey",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 50;
		result_527441 = has_key_527588(dict_527439.table, key_527440);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_527441;

}

function is_class_159414(obj_159416) {
	var result_159417 = false;

	var F={procname:"pyobjectBase.isClass",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 212;
		result_159417 = (obj_159416.pyType.kind == 7);
	framePtr = F.prev;

	return result_159417;

}

function of_py_function_object_545137(obj_545068) {
	var result_545139 = false;

	var F={procname:"funcobject.ofPyFunctionObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_545139 = (obj_545068.pyType.kind == 13);
	framePtr = F.prev;

	return result_545139;

}

function new_py_func_547057(name_547059, code_547060, globals_547061, closure_547062) {
	var result_547063 = null;

	var F={procname:"funcobject.newPyFunc",prev:framePtr,filename:"../Objects/funcobject.nim",line:0};
	framePtr = F;
		F.line = 23;
		result_547063 = new_py_function_simple_545201();
		F.line = 24;
		result_547063.name = name_547059;
		F.line = 25;
		result_547063.code = code_547060;
		F.line = 26;
		result_547063.globals = globals_547061;
		if (!((closure_547062 === null))) {
		if (!(of_py_tuple_object_469082(closure_547062))) {
		F.line = 28;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/funcobject.nim(28, 12) `ofPyTupleObject(closure)` "));
		}
		
		}
		
		F.line = 29;
		result_547063.closure = closure_547062;
	framePtr = F.prev;

	return result_547063;

}

function new_py_slice_468057(start_468059, stop_468060, step_468061) {
			var Tmp1;

	var result_468062 = null;

	var F={procname:"sliceobject.newPySlice",prev:framePtr,filename:"../Objects/sliceobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 15;
		F.line = 15;
		var slice_468063 = new_py_slice_simple_467201();
		if ((of_py_int_object_374315(start_468059) || of_py_none_object_355076(start_468059))) {
		F.line = 28;
		slice_468063.start = start_468059;
		}
		else {
			F.line = 21;
			var index_fun_468079 = start_468059.pyType.magicMethods.Field11;
			if ((index_fun_468079 === null)) {
			F.line = 23;
			var msg_468087 = makeNimstrLit("slice indices must be integers or None or have an __index__ method");
			F.line = 24;
			F.line = 104;
			var excp_468089 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_468089.tk = 3;
			F.line = 106;
			excp_468089.thrown = true;
			F.line = 107;
			excp_468089.msg = new_py_string_176075(msg_468087);
			result_468062 = excp_468089;
			break BeforeRet;
			}
			else {
				F.line = 26;
				slice_468063.start = index_fun_468079(start_468059);
			}
			
		}
		
		if ((of_py_int_object_374315(stop_468060) || of_py_none_object_355076(stop_468060))) {
		F.line = 29;
		slice_468063.stop = stop_468060;
		}
		else {
			F.line = 21;
			var index_fun_468096 = stop_468060.pyType.magicMethods.Field11;
			if ((index_fun_468096 === null)) {
			F.line = 23;
			var msg_468104 = makeNimstrLit("slice indices must be integers or None or have an __index__ method");
			F.line = 24;
			F.line = 104;
			var excp_468106 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_468106.tk = 3;
			F.line = 106;
			excp_468106.thrown = true;
			F.line = 107;
			excp_468106.msg = new_py_string_176075(msg_468104);
			result_468062 = excp_468106;
			break BeforeRet;
			}
			else {
				F.line = 26;
				slice_468063.stop = index_fun_468096(stop_468060);
			}
			
		}
		
		if ((of_py_int_object_374315(step_468061) || of_py_none_object_355076(step_468061))) {
		F.line = 30;
		slice_468063.step = step_468061;
		}
		else {
			F.line = 21;
			var index_fun_468113 = step_468061.pyType.magicMethods.Field11;
			if ((index_fun_468113 === null)) {
			F.line = 23;
			var msg_468121 = makeNimstrLit("slice indices must be integers or None or have an __index__ method");
			F.line = 24;
			F.line = 104;
			var excp_468123 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_468123.tk = 3;
			F.line = 106;
			excp_468123.thrown = true;
			F.line = 107;
			excp_468123.msg = new_py_string_176075(msg_468121);
			result_468062 = excp_468123;
			break BeforeRet;
			}
			else {
				F.line = 26;
				slice_468063.step = index_fun_468113(step_468061);
			}
			
		}
		
			if (!of_py_int_object_374315(slice_468063.step)) Tmp1 = false; else {				Tmp1 = (to_int_379674(slice_468063.step) == 0);			}		if (Tmp1) {
		F.line = 33;
		F.line = 104;
		var excp_468126 = new_py_value_error_simple_362601();
		F.line = 105;
		excp_468126.tk = 5;
		F.line = 106;
		excp_468126.thrown = true;
		F.line = 107;
		excp_468126.msg = new_py_string_176075(makeNimstrLit("slice step cannot be zero"));
		result_468062 = excp_468126;
		break BeforeRet;
		}
		
		result_468062 = slice_468063;
	} while (false);
	framePtr = F.prev;

	return result_468062;

}

function eval_frame_556056(f_556058) {
											var Tmp8;
											var Tmp9;
												var Tmp10;
											var Tmp11;
												var Tmp12;
											var Tmp13;
												var Tmp14;
											var Tmp15;
												var Tmp16;
											var Tmp17;
												var Tmp18;
											var Tmp19;
												var Tmp20;
												var Tmp21;
											var Tmp22;
												var Tmp23;
											var Tmp24;
												var Tmp25;
											var Tmp26;
												var Tmp27;
											var Tmp28;
												var Tmp29;
											var Tmp30;
												var Tmp31;
											var Tmp32;
												var Tmp33;
												var Tmp34;
												var Tmp35;
											var Tmp36;
												var Tmp37;
													var Tmp38;
													var Tmp39;
													var Tmp40;
															var Tmp44;
															var Tmp48;
													var Tmp49;
																	var Tmp53;
																var Tmp57;
											var Tmp58;
												var Tmp59;
												var Tmp60;
																var Tmp70;
											var Tmp71;
												var Tmp72;
												var Tmp73;
													var Tmp74;
												var Tmp75;
													var Tmp76;
												var Tmp77;
													var Tmp78;
												var Tmp79;
													var Tmp80;
												var Tmp81;
													var Tmp82;
												var Tmp83;
													var Tmp84;
												var Tmp85;
													var Tmp86;
												var Tmp87;
													var Tmp88;
													var Tmp89;
														var Tmp90;
														var Tmp91;
												var Tmp92;
												var Tmp93;
											var Tmp94;
													var Tmp95;
											var Tmp96;
													var Tmp97;
													var Tmp98;
													var Tmp99;
											var Tmp100;
													var Tmp101;
														var Tmp102;
													var Tmp103;
												var Tmp107;
												var Tmp108;
											var Tmp109;
												var Tmp110;
											var Tmp111;

						function set_trace_back_556418(excp_556420) {
							var F={procname:"evalFrame.setTraceBack",prev:framePtr,filename:"neval.nim",line:0};
							framePtr = F;
								F.line = 101;
								var line_no_556421 = f_556058.code.lineNos[chckIndx(last_i_556403, 0, f_556058.code.lineNos.length+0-1)-0];
								F.line = 103;
								if (excp_556420.traceBacks != null) { excp_556420.traceBacks.push({Field0: f_556058.code.fileName, Field1: f_556058.code.codeName, Field2: line_no_556421, Field3: -1}); } else { excp_556420.traceBacks = [{Field0: f_556058.code.fileName, Field1: f_556058.code.codeName, Field2: line_no_556421, Field3: -1}]; };
							framePtr = F.prev;

							
						}
									var Tmp115;
											var Tmp116;
											var Tmp117;

	var result_556217 = null;

	var F={procname:"neval.evalFrame",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 83;
		var last_i_556403 = -1;
		F.line = 86;
		var op_code_556404 = 0;
		F.line = 87;
		var op_arg_556405 = 0;
		F.line = 149;
		var constants_556643 = f_556058.code, constants_556643_Idx = "constants";
		F.line = 150;
		var names_556645 = f_556058.code, names_556645_Idx = "names";
		F.line = 151;
		var fast_locals_556647 = f_556058, fast_locals_556647_Idx = "fastLocals";
		F.line = 152;
		var cell_vars_556649 = f_556058, cell_vars_556649_Idx = "cellVars";
		F.line = 182;
		try {
		L2: do {
			F.line = 184;
				L3: while (true) {
				if (!true) break L3;
					F.line = 185;
					var excp_obj_556827 = null;
					L4: do {
						L5: do {
							F.line = 188;
								L6: while (true) {
								if (!true) break L6;
									L7: do {
										F.line = 190;
										var colontmp__605154 = {Field0: 0, Field1: 0};
										F.line = 190;
										var op_code_557005 = 0;
										F.line = 190;
										var op_arg_557006 = 0;
										F.line = 190;
										F.line = 89;
										last_i_556403 = addInt(last_i_556403, 1);
										nimCopy(colontmp__605154, f_556058.code.code[chckIndx(last_i_556403, 0, f_556058.code.code.length+0-1)-0], NTI556408);
										F.line = 190;
										op_code_557005 = colontmp__605154["Field0"];
										F.line = 190;
										op_arg_557006 = colontmp__605154["Field1"];
										F.line = 193;
										switch (op_code_557005) {
										case 1:
											F.line = 195;
											pop_523821(val_stack_556095, 0);
											break;
										case 4:
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push((Tmp8 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp8[0])[Tmp8[1]]); } else { val_stack_556095[0] = [(Tmp8 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp8[0])[Tmp8[1]]]; };
											break;
										case 7:
											F.line = 201;
											break L7;
											break;
										case 8:
											F.line = 43;
											var top_557433 = (Tmp9 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp9[0])[Tmp9[1]];
											F.line = 44;
											F.line = 45;
											if ((top_557433.pyType === null)) {
											F.line = 2895;
											var e_557460 = null;
											F.line = 2896;
											e_557460 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_557460.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_557460.parent = null;
											F.line = 26;
											raiseException(e_557460, "InternalError");
											}
											
											F.line = 27;
											var fun_557602 = top_557433.pyType.magicMethods.Field9;
											if ((fun_557602 === null)) {
											F.line = 29;
											var obj_type_str_557611 = top_557433.pyType.name;
											F.line = 30;
											var method_str_557613 = makeNimstrLit("positive");
											F.line = 31;
											var msg_557615 = (makeNimstrLit("No ")).concat(method_str_557613,makeNimstrLit(" method for "),obj_type_str_557611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_557617 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_557617.tk = 3;
											F.line = 106;
											excp_557617.thrown = true;
											F.line = 107;
											excp_557617.msg = new_py_string_176075(msg_557615);
											var excp_557620 = excp_557617;
											F.line = 34;
											excp_obj_556827 = excp_557620;
											F.line = 34;
											break L4;
											}
											
											var fun_557802 = fun_557602;
											F.line = 46;
											var res_557804 = fun_557802(top_557433);
												if (of_py_exception_object_358259(res_557804)) {
												Tmp10 = res_557804.thrown;
												}
												else {
												Tmp10 = false;
												}
												
											if (Tmp10) {
											F.line = 49;
											excp_obj_556827 = res_557804;
											F.line = 49;
											break L4;
											}
											
											var res_558002 = res_557804;
											F.line = 204;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_558002);
											break;
										case 9:
											F.line = 43;
											var top_558256 = (Tmp11 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp11[0])[Tmp11[1]];
											F.line = 44;
											F.line = 45;
											if ((top_558256.pyType === null)) {
											F.line = 2895;
											var e_558283 = null;
											F.line = 2896;
											e_558283 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_558283.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_558283.parent = null;
											F.line = 26;
											raiseException(e_558283, "InternalError");
											}
											
											F.line = 27;
											var fun_558402 = top_558256.pyType.magicMethods.Field8;
											if ((fun_558402 === null)) {
											F.line = 29;
											var obj_type_str_558411 = top_558256.pyType.name;
											F.line = 30;
											var method_str_558413 = makeNimstrLit("negative");
											F.line = 31;
											var msg_558415 = (makeNimstrLit("No ")).concat(method_str_558413,makeNimstrLit(" method for "),obj_type_str_558411,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_558417 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_558417.tk = 3;
											F.line = 106;
											excp_558417.thrown = true;
											F.line = 107;
											excp_558417.msg = new_py_string_176075(msg_558415);
											var excp_558420 = excp_558417;
											F.line = 34;
											excp_obj_556827 = excp_558420;
											F.line = 34;
											break L4;
											}
											
											var fun_558602 = fun_558402;
											F.line = 46;
											var res_558604 = fun_558602(top_558256);
												if (of_py_exception_object_358259(res_558604)) {
												Tmp12 = res_558604.thrown;
												}
												else {
												Tmp12 = false;
												}
												
											if (Tmp12) {
											F.line = 49;
											excp_obj_556827 = res_558604;
											F.line = 49;
											break L4;
											}
											
											var res_558802 = res_558604;
											F.line = 207;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_558802);
											break;
										case 10:
											F.line = 43;
											var top_559036 = (Tmp13 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp13[0])[Tmp13[1]];
											F.line = 44;
											F.line = 45;
											if ((top_559036.pyType === null)) {
											F.line = 2895;
											var e_559063 = null;
											F.line = 2896;
											e_559063 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_559063.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_559063.parent = null;
											F.line = 26;
											raiseException(e_559063, "InternalError");
											}
											
											F.line = 27;
											var fun_559202 = top_559036.pyType.magicMethods.Field7;
											if ((fun_559202 === null)) {
											F.line = 29;
											var obj_type_str_559211 = top_559036.pyType.name;
											F.line = 30;
											var method_str_559213 = makeNimstrLit("Not");
											F.line = 31;
											var msg_559215 = (makeNimstrLit("No ")).concat(method_str_559213,makeNimstrLit(" method for "),obj_type_str_559211,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_559217 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_559217.tk = 3;
											F.line = 106;
											excp_559217.thrown = true;
											F.line = 107;
											excp_559217.msg = new_py_string_176075(msg_559215);
											var excp_559220 = excp_559217;
											F.line = 34;
											excp_obj_556827 = excp_559220;
											F.line = 34;
											break L4;
											}
											
											var fun_559402 = fun_559202;
											F.line = 46;
											var res_559404 = fun_559402(top_559036);
												if (of_py_exception_object_358259(res_559404)) {
												Tmp14 = res_559404.thrown;
												}
												else {
												Tmp14 = false;
												}
												
											if (Tmp14) {
											F.line = 49;
											excp_obj_556827 = res_559404;
											F.line = 49;
											break L4;
											}
											
											var res_559602 = res_559404;
											F.line = 210;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_559602);
											break;
										case 14:
											F.line = 48;
											var op2_559832 = pop_523821(val_stack_556095, 0);
											F.line = 49;
											var op1_559849 = (Tmp15 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp15[0])[Tmp15[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_559849.pyType === null)) {
											F.line = 2895;
											var e_559876 = null;
											F.line = 2896;
											e_559876 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_559876.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_559876.parent = null;
											F.line = 26;
											raiseException(e_559876, "InternalError");
											}
											
											F.line = 27;
											var fun_560002 = op1_559849.pyType.magicMethods.Field6;
											if ((fun_560002 === null)) {
											F.line = 29;
											var obj_type_str_560011 = op1_559849.pyType.name;
											F.line = 30;
											var method_str_560013 = makeNimstrLit("pow");
											F.line = 31;
											var msg_560015 = (makeNimstrLit("No ")).concat(method_str_560013,makeNimstrLit(" method for "),obj_type_str_560011,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_560017 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_560017.tk = 3;
											F.line = 106;
											excp_560017.thrown = true;
											F.line = 107;
											excp_560017.msg = new_py_string_176075(msg_560015);
											var excp_560020 = excp_560017;
											F.line = 34;
											excp_obj_556827 = excp_560020;
											F.line = 34;
											break L4;
											}
											
											var fun_560202 = fun_560002;
											F.line = 57;
											var res_560204 = fun_560202(op1_559849, op2_559832);
												if (of_py_exception_object_358259(res_560204)) {
												Tmp16 = res_560204.thrown;
												}
												else {
												Tmp16 = false;
												}
												
											if (Tmp16) {
											F.line = 60;
											excp_obj_556827 = res_560204;
											F.line = 60;
											break L4;
											}
											
											var res_560402 = res_560204;
											F.line = 213;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_560402);
											break;
										case 15:
											F.line = 48;
											var op2_560632 = pop_523821(val_stack_556095, 0);
											F.line = 49;
											var op1_560649 = (Tmp17 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp17[0])[Tmp17[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_560649.pyType === null)) {
											F.line = 2895;
											var e_560676 = null;
											F.line = 2896;
											e_560676 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_560676.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_560676.parent = null;
											F.line = 26;
											raiseException(e_560676, "InternalError");
											}
											
											F.line = 27;
											var fun_560802 = op1_560649.pyType.magicMethods.Field2;
											if ((fun_560802 === null)) {
											F.line = 29;
											var obj_type_str_560811 = op1_560649.pyType.name;
											F.line = 30;
											var method_str_560813 = makeNimstrLit("mul");
											F.line = 31;
											var msg_560815 = (makeNimstrLit("No ")).concat(method_str_560813,makeNimstrLit(" method for "),obj_type_str_560811,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_560817 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_560817.tk = 3;
											F.line = 106;
											excp_560817.thrown = true;
											F.line = 107;
											excp_560817.msg = new_py_string_176075(msg_560815);
											var excp_560820 = excp_560817;
											F.line = 34;
											excp_obj_556827 = excp_560820;
											F.line = 34;
											break L4;
											}
											
											var fun_561002 = fun_560802;
											F.line = 57;
											var res_561004 = fun_561002(op1_560649, op2_560632);
												if (of_py_exception_object_358259(res_561004)) {
												Tmp18 = res_561004.thrown;
												}
												else {
												Tmp18 = false;
												}
												
											if (Tmp18) {
											F.line = 60;
											excp_obj_556827 = res_561004;
											F.line = 60;
											break L4;
											}
											
											var res_561202 = res_561004;
											F.line = 216;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_561202);
											break;
										case 16:
											F.line = 48;
											var op2_561432 = pop_523821(val_stack_556095, 0);
											F.line = 49;
											var op1_561449 = (Tmp19 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp19[0])[Tmp19[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_561449.pyType === null)) {
											F.line = 2895;
											var e_561476 = null;
											F.line = 2896;
											e_561476 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_561476.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_561476.parent = null;
											F.line = 26;
											raiseException(e_561476, "InternalError");
											}
											
											F.line = 27;
											var fun_561602 = op1_561449.pyType.magicMethods.Field5;
											if ((fun_561602 === null)) {
											F.line = 29;
											var obj_type_str_561611 = op1_561449.pyType.name;
											F.line = 30;
											var method_str_561613 = makeNimstrLit("Mod");
											F.line = 31;
											var msg_561615 = (makeNimstrLit("No ")).concat(method_str_561613,makeNimstrLit(" method for "),obj_type_str_561611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_561617 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_561617.tk = 3;
											F.line = 106;
											excp_561617.thrown = true;
											F.line = 107;
											excp_561617.msg = new_py_string_176075(msg_561615);
											var excp_561620 = excp_561617;
											F.line = 34;
											excp_obj_556827 = excp_561620;
											F.line = 34;
											break L4;
											}
											
											var fun_561802 = fun_561602;
											F.line = 57;
											var res_561804 = fun_561802(op1_561449, op2_561432);
												if (of_py_exception_object_358259(res_561804)) {
												Tmp20 = res_561804.thrown;
												}
												else {
												Tmp20 = false;
												}
												
											if (Tmp20) {
											F.line = 60;
											excp_obj_556827 = res_561804;
											F.line = 60;
											break L4;
											}
											
											var res_562002 = res_561804;
											F.line = 219;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_562002);
											break;
										case 33:
											F.line = 222;
											var idx_562225 = pop_523821(val_stack_556095, 0);
											F.line = 223;
											var obj_562235 = pop_523821(val_stack_556095, 0);
											F.line = 224;
											var value_562245 = pop_523821(val_stack_556095, 0);
											F.line = 225;
											F.line = 67;
											if ((obj_562235.pyType === null)) {
											F.line = 2895;
											var e_562272 = null;
											F.line = 2896;
											e_562272 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_562272.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_562272.parent = null;
											F.line = 26;
											raiseException(e_562272, "InternalError");
											}
											
											F.line = 27;
											var fun_562402 = obj_562235.pyType.magicMethods.Field33;
											if ((fun_562402 === null)) {
											F.line = 29;
											var obj_type_str_562411 = obj_562235.pyType.name;
											F.line = 30;
											var method_str_562413 = makeNimstrLit("setitem");
											F.line = 31;
											var msg_562415 = (makeNimstrLit("No ")).concat(method_str_562413,makeNimstrLit(" method for "),obj_type_str_562411,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_562417 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_562417.tk = 3;
											F.line = 106;
											excp_562417.thrown = true;
											F.line = 107;
											excp_562417.msg = new_py_string_176075(msg_562415);
											var excp_562420 = excp_562417;
											F.line = 34;
											excp_obj_556827 = excp_562420;
											F.line = 34;
											break L4;
											}
											
											var fun_562602 = fun_562402;
											F.line = 68;
											var res_562604 = fun_562602(obj_562235, idx_562225, value_562245);
												if (of_py_exception_object_358259(res_562604)) {
												Tmp21 = res_562604.thrown;
												}
												else {
												Tmp21 = false;
												}
												
											if (Tmp21) {
											F.line = 71;
											excp_obj_556827 = res_562604;
											F.line = 71;
											break L4;
											}
											
											res_562604;
											break;
										case 17:
											F.line = 48;
											var op2_562818 = pop_523821(val_stack_556095, 0);
											F.line = 49;
											var op1_562835 = (Tmp22 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp22[0])[Tmp22[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_562835.pyType === null)) {
											F.line = 2895;
											var e_562862 = null;
											F.line = 2896;
											e_562862 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_562862.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_562862.parent = null;
											F.line = 26;
											raiseException(e_562862, "InternalError");
											}
											
											F.line = 27;
											var fun_563002 = op1_562835.pyType.magicMethods.Field0;
											if ((fun_563002 === null)) {
											F.line = 29;
											var obj_type_str_563011 = op1_562835.pyType.name;
											F.line = 30;
											var method_str_563013 = makeNimstrLit("add");
											F.line = 31;
											var msg_563015 = (makeNimstrLit("No ")).concat(method_str_563013,makeNimstrLit(" method for "),obj_type_str_563011,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_563017 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_563017.tk = 3;
											F.line = 106;
											excp_563017.thrown = true;
											F.line = 107;
											excp_563017.msg = new_py_string_176075(msg_563015);
											var excp_563020 = excp_563017;
											F.line = 34;
											excp_obj_556827 = excp_563020;
											F.line = 34;
											break L4;
											}
											
											var fun_563202 = fun_563002;
											F.line = 57;
											var res_563204 = fun_563202(op1_562835, op2_562818);
												if (of_py_exception_object_358259(res_563204)) {
												Tmp23 = res_563204.thrown;
												}
												else {
												Tmp23 = false;
												}
												
											if (Tmp23) {
											F.line = 60;
											excp_obj_556827 = res_563204;
											F.line = 60;
											break L4;
											}
											
											var res_563402 = res_563204;
											F.line = 228;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_563402);
											break;
										case 18:
											F.line = 48;
											var op2_563632 = pop_523821(val_stack_556095, 0);
											F.line = 49;
											var op1_563649 = (Tmp24 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp24[0])[Tmp24[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_563649.pyType === null)) {
											F.line = 2895;
											var e_563676 = null;
											F.line = 2896;
											e_563676 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_563676.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_563676.parent = null;
											F.line = 26;
											raiseException(e_563676, "InternalError");
											}
											
											F.line = 27;
											var fun_563802 = op1_563649.pyType.magicMethods.Field1;
											if ((fun_563802 === null)) {
											F.line = 29;
											var obj_type_str_563811 = op1_563649.pyType.name;
											F.line = 30;
											var method_str_563813 = makeNimstrLit("sub");
											F.line = 31;
											var msg_563815 = (makeNimstrLit("No ")).concat(method_str_563813,makeNimstrLit(" method for "),obj_type_str_563811,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_563817 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_563817.tk = 3;
											F.line = 106;
											excp_563817.thrown = true;
											F.line = 107;
											excp_563817.msg = new_py_string_176075(msg_563815);
											var excp_563820 = excp_563817;
											F.line = 34;
											excp_obj_556827 = excp_563820;
											F.line = 34;
											break L4;
											}
											
											var fun_564002 = fun_563802;
											F.line = 57;
											var res_564004 = fun_564002(op1_563649, op2_563632);
												if (of_py_exception_object_358259(res_564004)) {
												Tmp25 = res_564004.thrown;
												}
												else {
												Tmp25 = false;
												}
												
											if (Tmp25) {
											F.line = 60;
											excp_obj_556827 = res_564004;
											F.line = 60;
											break L4;
											}
											
											var res_564202 = res_564004;
											F.line = 231;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_564202);
											break;
										case 19:
											F.line = 48;
											var op2_564432 = pop_523821(val_stack_556095, 0);
											F.line = 49;
											var op1_564449 = (Tmp26 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp26[0])[Tmp26[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_564449.pyType === null)) {
											F.line = 2895;
											var e_564476 = null;
											F.line = 2896;
											e_564476 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_564476.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_564476.parent = null;
											F.line = 26;
											raiseException(e_564476, "InternalError");
											}
											
											F.line = 27;
											var fun_564602 = op1_564449.pyType.magicMethods.Field32;
											if ((fun_564602 === null)) {
											F.line = 29;
											var obj_type_str_564611 = op1_564449.pyType.name;
											F.line = 30;
											var method_str_564613 = makeNimstrLit("getitem");
											F.line = 31;
											var msg_564615 = (makeNimstrLit("No ")).concat(method_str_564613,makeNimstrLit(" method for "),obj_type_str_564611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_564617 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_564617.tk = 3;
											F.line = 106;
											excp_564617.thrown = true;
											F.line = 107;
											excp_564617.msg = new_py_string_176075(msg_564615);
											var excp_564620 = excp_564617;
											F.line = 34;
											excp_obj_556827 = excp_564620;
											F.line = 34;
											break L4;
											}
											
											var fun_564802 = fun_564602;
											F.line = 57;
											var res_564804 = fun_564802(op1_564449, op2_564432);
												if (of_py_exception_object_358259(res_564804)) {
												Tmp27 = res_564804.thrown;
												}
												else {
												Tmp27 = false;
												}
												
											if (Tmp27) {
											F.line = 60;
											excp_obj_556827 = res_564804;
											F.line = 60;
											break L4;
											}
											
											var res_565002 = res_564804;
											F.line = 234;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_565002);
											break;
										case 20:
											F.line = 48;
											var op2_565232 = pop_523821(val_stack_556095, 0);
											F.line = 49;
											var op1_565249 = (Tmp28 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp28[0])[Tmp28[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_565249.pyType === null)) {
											F.line = 2895;
											var e_565276 = null;
											F.line = 2896;
											e_565276 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_565276.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_565276.parent = null;
											F.line = 26;
											raiseException(e_565276, "InternalError");
											}
											
											F.line = 27;
											var fun_565402 = op1_565249.pyType.magicMethods.Field4;
											if ((fun_565402 === null)) {
											F.line = 29;
											var obj_type_str_565411 = op1_565249.pyType.name;
											F.line = 30;
											var method_str_565413 = makeNimstrLit("floorDiv");
											F.line = 31;
											var msg_565415 = (makeNimstrLit("No ")).concat(method_str_565413,makeNimstrLit(" method for "),obj_type_str_565411,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_565417 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_565417.tk = 3;
											F.line = 106;
											excp_565417.thrown = true;
											F.line = 107;
											excp_565417.msg = new_py_string_176075(msg_565415);
											var excp_565420 = excp_565417;
											F.line = 34;
											excp_obj_556827 = excp_565420;
											F.line = 34;
											break L4;
											}
											
											var fun_565602 = fun_565402;
											F.line = 57;
											var res_565604 = fun_565602(op1_565249, op2_565232);
												if (of_py_exception_object_358259(res_565604)) {
												Tmp29 = res_565604.thrown;
												}
												else {
												Tmp29 = false;
												}
												
											if (Tmp29) {
											F.line = 60;
											excp_obj_556827 = res_565604;
											F.line = 60;
											break L4;
											}
											
											var res_565802 = res_565604;
											F.line = 237;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_565802);
											break;
										case 21:
											F.line = 48;
											var op2_566032 = pop_523821(val_stack_556095, 0);
											F.line = 49;
											var op1_566049 = (Tmp30 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp30[0])[Tmp30[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_566049.pyType === null)) {
											F.line = 2895;
											var e_566076 = null;
											F.line = 2896;
											e_566076 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_566076.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_566076.parent = null;
											F.line = 26;
											raiseException(e_566076, "InternalError");
											}
											
											F.line = 27;
											var fun_566202 = op1_566049.pyType.magicMethods.Field3;
											if ((fun_566202 === null)) {
											F.line = 29;
											var obj_type_str_566211 = op1_566049.pyType.name;
											F.line = 30;
											var method_str_566213 = makeNimstrLit("trueDiv");
											F.line = 31;
											var msg_566215 = (makeNimstrLit("No ")).concat(method_str_566213,makeNimstrLit(" method for "),obj_type_str_566211,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_566217 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_566217.tk = 3;
											F.line = 106;
											excp_566217.thrown = true;
											F.line = 107;
											excp_566217.msg = new_py_string_176075(msg_566215);
											var excp_566220 = excp_566217;
											F.line = 34;
											excp_obj_556827 = excp_566220;
											F.line = 34;
											break L4;
											}
											
											var fun_566402 = fun_566202;
											F.line = 57;
											var res_566404 = fun_566402(op1_566049, op2_566032);
												if (of_py_exception_object_358259(res_566404)) {
												Tmp31 = res_566404.thrown;
												}
												else {
												Tmp31 = false;
												}
												
											if (Tmp31) {
											F.line = 60;
											excp_obj_556827 = res_566404;
											F.line = 60;
											break L4;
											}
											
											var res_566602 = res_566404;
											F.line = 240;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_566602);
											break;
										case 41:
											F.line = 243;
											var top_566831 = (Tmp32 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp32[0])[Tmp32[1]];
											F.line = 244;
											F.line = 170;
											var iter_func_566841 = top_566831.pyType.magicMethods.Field36;
											if ((iter_func_566841 === null)) {
											F.line = 172;
											var msg_566849 = (top_566831.pyType.name).concat(makeNimstrLit(" object is not iterable"));
											F.line = 173;
											F.line = 104;
											var excp_566851 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_566851.tk = 3;
											F.line = 106;
											excp_566851.thrown = true;
											F.line = 107;
											excp_566851.msg = new_py_string_176075(msg_566849);
											result_556217 = excp_566851;
											break BeforeRet;
											}
											
											F.line = 174;
											var iter_obj_566854 = iter_func_566841(top_566831);
											if ((iter_obj_566854.pyType.magicMethods.Field37 === null)) {
											F.line = 176;
											F.line = 176;
											var fmt_res_566863 = mnewString(0);
											F.line = 176;
											if (fmt_res_566863 != null) { fmt_res_566863 = (fmt_res_566863).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_566863 = makeNimstrLit("iter() returned non-iterator of type "); };
											var msg_566865 = (fmt_res_566863).concat(iter_obj_566854.pyType.name);
											F.line = 177;
											F.line = 104;
											var excp_566867 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_566867.tk = 3;
											F.line = 106;
											excp_566867.thrown = true;
											F.line = 107;
											excp_566867.msg = new_py_string_176075(msg_566865);
											result_556217 = excp_566867;
											break BeforeRet;
											}
											
											var iter_obj_566869 = iter_obj_566854;
												if (of_py_exception_object_358259(iter_obj_566869)) {
												Tmp33 = iter_obj_566869.thrown;
												}
												else {
												Tmp33 = false;
												}
												
											if (Tmp33) {
											F.line = 246;
											excp_obj_556827 = iter_obj_566869;
											F.line = 246;
											break L4;
											}
											
											F.line = 247;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, iter_obj_566869);
											break;
										case 43:
											F.line = 250;
											var top_567025 = pop_523821(val_stack_556095, 0);
											if (!((id_157596(top_567025) == id_157596(py_none_356044)))) {
											F.line = 253;
											var repr_obj_567026 = top_567025.pyType.magicMethods.Field25(top_567025);
												if (of_py_exception_object_358259(repr_obj_567026)) {
												Tmp34 = repr_obj_567026.thrown;
												}
												else {
												Tmp34 = false;
												}
												
											if (Tmp34) {
											F.line = 255;
											excp_obj_556827 = repr_obj_567026;
											F.line = 255;
											break L4;
											}
											
											F.line = 258;
											var print_function_567027 = HEX5BHEX5D_528323(bltin_dict_539014, new_py_str_176092(makeNimstrLit("print")));
											F.line = 259;
											var ret_obj_567040 = call_py_nim_func_object_magic_553044(print_function_567027, [repr_obj_567026]);
												if (of_py_exception_object_358259(ret_obj_567040)) {
												Tmp35 = ret_obj_567040.thrown;
												}
												else {
												Tmp35 = false;
												}
												
											if (Tmp35) {
											F.line = 261;
											excp_obj_556827 = ret_obj_567040;
											F.line = 261;
											break L4;
											}
											
											}
											
											break;
										case 44:
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(HEX5BHEX5D_528323(bltin_dict_539014, new_py_str_176092(makeNimstrLit("__build_class__")))); } else { val_stack_556095[0] = [HEX5BHEX5D_528323(bltin_dict_539014, new_py_str_176092(makeNimstrLit("__build_class__")))]; };
											break;
										case 54:
											F.line = 267;
											result_556217 = pop_523821(val_stack_556095, 0);
											break BeforeRet;
											break;
										case 58:
											if (((val_stack_556095[0] != null ? val_stack_556095[0].length : 0) == 0)) {
											F.line = 272;
											F.line = 173;
											var ret_567269 = (Tmp36 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp36[0])[Tmp36[1]].sPtr;
											F.line = 174;
											pop_567271(block_stack_556097, 0);
											ret_567269;
											}
											else {
												F.line = 274;
												var top_567326 = (Tmp37 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp37[0])[Tmp37[1]];
												if (((val_stack_556095[0] != null ? val_stack_556095[0].length : 0) == 0)) {
													F.line = 140;
													var ret_567345 = (Tmp38 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp38[0])[Tmp38[1]].sPtr;
													F.line = 140;
													pop_567271(block_stack_556097, 0);
												if (!((ret_567345 == 0))) {
												F.line = 140;
												failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(140, 14) `\x0A  let ret567345 = blockStack[BackwardsIndex(1)].sPtr\x0A  discard pop(blockStack)\x0A  ret567345 == 0` "));
												}
												
												}
												else {
													F.line = 142;
													F.line = 173;
													var ret_567345 = (Tmp39 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp39[0])[Tmp39[1]].sPtr;
													F.line = 174;
													pop_567271(block_stack_556097, 0);
												if (val_stack_556095[0].length < chckRange(ret_567345, 0, 2147483647)) { for (var i=val_stack_556095[0].length;i<chckRange(ret_567345, 0, 2147483647);++i) val_stack_556095[0].push(null); }
               else { val_stack_556095[0].length = chckRange(ret_567345, 0, 2147483647); };
												}
												
													if (of_py_exception_object_358259(top_567326)) {
													Tmp40 = top_567326.thrown;
													}
													else {
													Tmp40 = false;
													}
													
												if (Tmp40) {
												F.line = 278;
												excp_obj_556827 = top_567326;
												F.line = 278;
												break L4;
												}
												
											}
											
											break;
										case 62:
											F.line = 2895;
											var e_567417 = null;
											F.line = 2896;
											e_567417 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 281;
											e_567417.message = nimCopy(null, makeNimstrLit("locals() scope not implemented"), NTI138);
											F.line = 2891;
											e_567417.parent = null;
											F.line = 281;
											raiseException(e_567417, "InternalError");
											break;
										case 64:
											F.line = 289;
											var s_567619 = pop_523821(val_stack_556095, 0);
											if (of_py_tuple_object_469082(s_567619)) {
											F.line = 291;
											var t_567620 = s_567619;
											if (!((op_arg_557006 == (t_567620.items != null ? t_567620.items.length : 0)))) {
											F.line = 285;
											var got_567639 = cstrToNimstr(((t_567620.items != null ? t_567620.items.length : 0))+"");
											F.line = 286;
											F.line = 286;
											var fmt_res_567643 = mnewString(0);
											F.line = 286;
											if (fmt_res_567643 != null) { fmt_res_567643 = (fmt_res_567643).concat(makeNimstrLit("not enough values to unpack (expected ")); } else { fmt_res_567643 = makeNimstrLit("not enough values to unpack (expected "); };
											F.line = 270;
											if (fmt_res_567643 != null) { fmt_res_567643 = (fmt_res_567643).concat(cstrToNimstr((op_arg_557006)+"")); } else { fmt_res_567643 = cstrToNimstr((op_arg_557006)+"").slice(); };
											F.line = 286;
											if (fmt_res_567643 != null) { fmt_res_567643 = (fmt_res_567643).concat(makeNimstrLit(", got ")); } else { fmt_res_567643 = makeNimstrLit(", got "); };
											F.line = 260;
											if (fmt_res_567643 != null) { fmt_res_567643 = (fmt_res_567643).concat(got_567639); } else { fmt_res_567643 = got_567639.slice(); };
											F.line = 286;
											if (fmt_res_567643 != null) { fmt_res_567643 = (fmt_res_567643).concat(makeNimstrLit(")")); } else { fmt_res_567643 = makeNimstrLit(")"); };
											var msg_568002 = nimCopy(null, fmt_res_567643, NTI138);
											F.line = 287;
											F.line = 104;
											var excp_568004 = new_py_value_error_simple_362601();
											F.line = 105;
											excp_568004.tk = 5;
											F.line = 106;
											excp_568004.thrown = true;
											F.line = 107;
											excp_568004.msg = new_py_string_176075(msg_568002);
											var excp_568007 = excp_568004;
											F.line = 288;
											excp_obj_556827 = excp_568007;
											F.line = 293;
											break L4;
											}
											
											L41: do {
												F.line = 294;
												var i_568019 = 0;
												F.line = 2107;
												var res_589053 = 1;
												L42: do {
													F.line = 2108;
														L43: while (true) {
														if (!(res_589053 <= op_arg_557006)) break L43;
															F.line = 2109;
															i_568019 = res_589053;
															F.line = 129;
															if (val_stack_556095[0] != null) { val_stack_556095[0].push((Tmp44 = HEX5BHEX5D_557217(t_567620.items, i_568019), Tmp44[0])[Tmp44[1]]); } else { val_stack_556095[0] = [(Tmp44 = HEX5BHEX5D_557217(t_567620.items, i_568019), Tmp44[0])[Tmp44[1]]]; };
															F.line = 2110;
															res_589053 = addInt(res_589053, 1);
														}
												} while(false);
											} while(false);
											}
											else {
											if (of_py_list_object_510271(s_567619)) {
											F.line = 297;
											var l_568211 = s_567619;
											if (!((op_arg_557006 == (l_568211.items != null ? l_568211.items.length : 0)))) {
											F.line = 285;
											var got_568230 = cstrToNimstr(((l_568211.items != null ? l_568211.items.length : 0))+"");
											F.line = 286;
											F.line = 286;
											var fmt_res_568234 = mnewString(0);
											F.line = 286;
											if (fmt_res_568234 != null) { fmt_res_568234 = (fmt_res_568234).concat(makeNimstrLit("not enough values to unpack (expected ")); } else { fmt_res_568234 = makeNimstrLit("not enough values to unpack (expected "); };
											F.line = 270;
											if (fmt_res_568234 != null) { fmt_res_568234 = (fmt_res_568234).concat(cstrToNimstr((op_arg_557006)+"")); } else { fmt_res_568234 = cstrToNimstr((op_arg_557006)+"").slice(); };
											F.line = 286;
											if (fmt_res_568234 != null) { fmt_res_568234 = (fmt_res_568234).concat(makeNimstrLit(", got ")); } else { fmt_res_568234 = makeNimstrLit(", got "); };
											F.line = 260;
											if (fmt_res_568234 != null) { fmt_res_568234 = (fmt_res_568234).concat(got_568230); } else { fmt_res_568234 = got_568230.slice(); };
											F.line = 286;
											if (fmt_res_568234 != null) { fmt_res_568234 = (fmt_res_568234).concat(makeNimstrLit(")")); } else { fmt_res_568234 = makeNimstrLit(")"); };
											var msg_568602 = nimCopy(null, fmt_res_568234, NTI138);
											F.line = 287;
											F.line = 104;
											var excp_568604 = new_py_value_error_simple_362601();
											F.line = 105;
											excp_568604.tk = 5;
											F.line = 106;
											excp_568604.thrown = true;
											F.line = 107;
											excp_568604.msg = new_py_string_176075(msg_568602);
											var excp_568607 = excp_568604;
											F.line = 288;
											excp_obj_556827 = excp_568607;
											F.line = 299;
											break L4;
											}
											
											L45: do {
												F.line = 300;
												var i_568619 = 0;
												F.line = 2107;
												var res_589061 = 1;
												L46: do {
													F.line = 2108;
														L47: while (true) {
														if (!(res_589061 <= op_arg_557006)) break L47;
															F.line = 2109;
															i_568619 = res_589061;
															F.line = 129;
															if (val_stack_556095[0] != null) { val_stack_556095[0].push((Tmp48 = HEX5BHEX5D_557217(l_568211.items, i_568619), Tmp48[0])[Tmp48[1]]); } else { val_stack_556095[0] = [(Tmp48 = HEX5BHEX5D_557217(l_568211.items, i_568619), Tmp48[0])[Tmp48[1]]]; };
															F.line = 2110;
															res_589061 = addInt(res_589061, 1);
														}
												} while(false);
											} while(false);
											}
											else {
												F.line = 303;
												F.line = 170;
												var iter_func_568820 = s_567619.pyType.magicMethods.Field36;
												if ((iter_func_568820 === null)) {
												F.line = 172;
												var msg_568828 = (s_567619.pyType.name).concat(makeNimstrLit(" object is not iterable"));
												F.line = 173;
												F.line = 104;
												var excp_568830 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_568830.tk = 3;
												F.line = 106;
												excp_568830.thrown = true;
												F.line = 107;
												excp_568830.msg = new_py_string_176075(msg_568828);
												result_556217 = excp_568830;
												break BeforeRet;
												}
												
												F.line = 174;
												var iter_obj_568833 = iter_func_568820(s_567619);
												if ((iter_obj_568833.pyType.magicMethods.Field37 === null)) {
												F.line = 176;
												F.line = 176;
												var fmt_res_568842 = mnewString(0);
												F.line = 176;
												if (fmt_res_568842 != null) { fmt_res_568842 = (fmt_res_568842).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_568842 = makeNimstrLit("iter() returned non-iterator of type "); };
												var msg_568844 = (fmt_res_568842).concat(iter_obj_568833.pyType.name);
												F.line = 177;
												F.line = 104;
												var excp_568846 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_568846.tk = 3;
												F.line = 106;
												excp_568846.thrown = true;
												F.line = 107;
												excp_568846.msg = new_py_string_176075(msg_568844);
												result_556217 = excp_568846;
												break BeforeRet;
												}
												
												var iterable_568848 = iter_obj_568833;
													if (of_py_exception_object_358259(iterable_568848)) {
													Tmp49 = iterable_568848.thrown;
													}
													else {
													Tmp49 = false;
													}
													
												if (Tmp49) {
												F.line = 305;
												excp_obj_556827 = iterable_568848;
												F.line = 305;
												break L4;
												}
												
												F.line = 306;
												var next_func_568849 = iterable_568848.pyType.magicMethods.Field37;
												F.line = 309;
												var items_568902 = new_seq_568854(chckRange(op_arg_557006, 0, 2147483647));
												L50: do {
													F.line = 310;
													var i_568913 = 0;
													F.line = 3617;
													var i_589070 = 0;
													L51: do {
														F.line = 3618;
															L52: while (true) {
															if (!(i_589070 < op_arg_557006)) break L52;
																F.line = 3619;
																i_568913 = i_589070;
																F.line = 311;
																var ret_obj_568914 = next_func_568849(iterable_568848);
																if (is_stop_iter_373851(ret_obj_568914)) {
																F.line = 285;
																var got_568919 = cstrToNimstr((i_568913)+"");
																F.line = 286;
																F.line = 286;
																var fmt_res_568923 = mnewString(0);
																F.line = 286;
																if (fmt_res_568923 != null) { fmt_res_568923 = (fmt_res_568923).concat(makeNimstrLit("not enough values to unpack (expected ")); } else { fmt_res_568923 = makeNimstrLit("not enough values to unpack (expected "); };
																F.line = 270;
																if (fmt_res_568923 != null) { fmt_res_568923 = (fmt_res_568923).concat(cstrToNimstr((op_arg_557006)+"")); } else { fmt_res_568923 = cstrToNimstr((op_arg_557006)+"").slice(); };
																F.line = 286;
																if (fmt_res_568923 != null) { fmt_res_568923 = (fmt_res_568923).concat(makeNimstrLit(", got ")); } else { fmt_res_568923 = makeNimstrLit(", got "); };
																F.line = 260;
																if (fmt_res_568923 != null) { fmt_res_568923 = (fmt_res_568923).concat(got_568919); } else { fmt_res_568923 = got_568919.slice(); };
																F.line = 286;
																if (fmt_res_568923 != null) { fmt_res_568923 = (fmt_res_568923).concat(makeNimstrLit(")")); } else { fmt_res_568923 = makeNimstrLit(")"); };
																var msg_569202 = nimCopy(null, fmt_res_568923, NTI138);
																F.line = 287;
																F.line = 104;
																var excp_569204 = new_py_value_error_simple_362601();
																F.line = 105;
																excp_569204.tk = 5;
																F.line = 106;
																excp_569204.thrown = true;
																F.line = 107;
																excp_569204.msg = new_py_string_176075(msg_569202);
																var excp_569207 = excp_569204;
																F.line = 288;
																excp_obj_556827 = excp_569207;
																F.line = 313;
																break L4;
																}
																else {
																	if (of_py_exception_object_358259(ret_obj_568914)) {
																	Tmp53 = ret_obj_568914.thrown;
																	}
																	else {
																	Tmp53 = false;
																	}
																	
																if (Tmp53) {
																F.line = 315;
																excp_obj_556827 = ret_obj_568914;
																F.line = 315;
																break L4;
																}
																else {
																	F.line = 317;
																	items_568902[chckIndx(i_568913, 0, items_568902.length+0-1)-0] = ret_obj_568914;
																}
																}
																F.line = 3620;
																i_589070 = addInt(i_589070, 1);
															}
													} while(false);
												} while(false);
												L54: do {
													F.line = 318;
													var i_569219 = 0;
													F.line = 2107;
													var res_589076 = 1;
													L55: do {
														F.line = 2108;
															L56: while (true) {
															if (!(res_589076 <= op_arg_557006)) break L56;
																F.line = 2109;
																i_569219 = res_589076;
																F.line = 129;
																if (val_stack_556095[0] != null) { val_stack_556095[0].push((Tmp57 = HEX5BHEX5D_557217(items_568902, i_569219), Tmp57[0])[Tmp57[1]]); } else { val_stack_556095[0] = [(Tmp57 = HEX5BHEX5D_557217(items_568902, i_569219), Tmp57[0])[Tmp57[1]]]; };
																F.line = 2110;
																res_589076 = addInt(res_589076, 1);
															}
													} while(false);
												} while(false);
											}
											}
											break;
										case 65:
											F.line = 322;
											var top_569427 = (Tmp58 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp58[0])[Tmp58[1]];
											F.line = 323;
											var next_func_569428 = top_569427.pyType.magicMethods.Field37;
											if ((next_func_569428 === null)) {
											F.line = 325;
											rawEcho(top_569427.pyType.name);
											F.line = 2895;
											var e_569443 = null;
											F.line = 2896;
											e_569443 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 28;
											e_569443.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
											F.line = 2891;
											e_569443.parent = null;
											F.line = 326;
											raiseException(e_569443, "InternalError");
											}
											
											F.line = 327;
											var ret_obj_569601 = next_func_569428(top_569427);
											if (is_stop_iter_373851(ret_obj_569601)) {
											F.line = 329;
											pop_523821(val_stack_556095, 0);
											F.line = 98;
											last_i_556403 = subInt(op_arg_557006, 1);
											}
											else {
												if (of_py_exception_object_358259(ret_obj_569601)) {
												Tmp59 = ret_obj_569601.thrown;
												}
												else {
												Tmp59 = false;
												}
												
											if (Tmp59) {
											F.line = 332;
											excp_obj_556827 = ret_obj_569601;
											F.line = 332;
											break L4;
											}
											else {
												F.line = 129;
												if (val_stack_556095[0] != null) { val_stack_556095[0].push(ret_obj_569601); } else { val_stack_556095[0] = [ret_obj_569601]; };
											}
											}
											break;
										case 67:
											F.line = 337;
											var name_569812 = names_556645[names_556645_Idx][chckIndx(op_arg_557006, 0, names_556645[names_556645_Idx].length+0-1)-0];
											F.line = 338;
											var owner_569822 = pop_523821(val_stack_556095, 0);
											F.line = 339;
											var v_569832 = pop_523821(val_stack_556095, 0);
											F.line = 340;
											F.line = 67;
											if ((owner_569822.pyType === null)) {
											F.line = 2895;
											var e_569859 = null;
											F.line = 2896;
											e_569859 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_569859.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_569859.parent = null;
											F.line = 26;
											raiseException(e_569859, "InternalError");
											}
											
											F.line = 27;
											var fun_570002 = owner_569822.pyType.magicMethods.Field29;
											if ((fun_570002 === null)) {
											F.line = 29;
											var obj_type_str_570011 = owner_569822.pyType.name;
											F.line = 30;
											var method_str_570013 = makeNimstrLit("setattr");
											F.line = 31;
											var msg_570015 = (makeNimstrLit("No ")).concat(method_str_570013,makeNimstrLit(" method for "),obj_type_str_570011,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_570017 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_570017.tk = 3;
											F.line = 106;
											excp_570017.thrown = true;
											F.line = 107;
											excp_570017.msg = new_py_string_176075(msg_570015);
											var excp_570020 = excp_570017;
											F.line = 34;
											excp_obj_556827 = excp_570020;
											F.line = 34;
											break L4;
											}
											
											var fun_570202 = fun_570002;
											F.line = 68;
											var res_570204 = fun_570202(owner_569822, name_569812, v_569832);
												if (of_py_exception_object_358259(res_570204)) {
												Tmp60 = res_570204.thrown;
												}
												else {
												Tmp60 = false;
												}
												
											if (Tmp60) {
											F.line = 71;
											excp_obj_556827 = res_570204;
											F.line = 71;
											break L4;
											}
											
											res_570204;
											break;
										case 69:
											F.line = 343;
											var name_570402 = names_556645[names_556645_Idx][chckIndx(op_arg_557006, 0, names_556645[names_556645_Idx].length+0-1)-0];
											F.line = 344;
											HEX5BHEX5DHEX3D_528842(f_556058.globals, name_570402, pop_523821(val_stack_556095, 0));
											break;
										case 71:
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(constants_556643[constants_556643_Idx][chckIndx(op_arg_557006, 0, constants_556643[constants_556643_Idx].length+0-1)-0]); } else { val_stack_556095[0] = [constants_556643[constants_556643_Idx][chckIndx(op_arg_557006, 0, constants_556643[constants_556643_Idx].length+0-1)-0]]; };
											break;
										case 72:
											F.line = 2895;
											var e_570617 = null;
											F.line = 2896;
											e_570617 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 350;
											e_570617.message = nimCopy(null, makeNimstrLit("locals() scope not implemented"), NTI138);
											F.line = 2891;
											e_570617.parent = null;
											F.line = 350;
											raiseException(e_570617, "InternalError");
											break;
										case 73:
											F.line = 353;
											var args_570830 = new_seq_568854(chckRange(op_arg_557006, 0, 2147483647));
											L61: do {
												F.line = 354;
												var i_570842 = 0;
												F.line = 2107;
												var res_589087 = 1;
												L62: do {
													F.line = 2108;
														L63: while (true) {
														if (!(res_589087 <= op_arg_557006)) break L63;
															F.line = 2109;
															i_570842 = res_589087;
															F.line = 355;
															HEX5BHEX5DHEX3D_558204(args_570830, i_570842, pop_523821(val_stack_556095, 0));
															F.line = 2110;
															res_589087 = addInt(res_589087, 1);
														}
												} while(false);
											} while(false);
											F.line = 356;
											var new_tuple_570866 = new_py_tuple_470057(args_570830);
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(new_tuple_570866); } else { val_stack_556095[0] = [new_tuple_570866]; };
											break;
										case 74:
											F.line = 360;
											var args_571040 = new_seq_568854(chckRange(op_arg_557006, 0, 2147483647));
											L64: do {
												F.line = 361;
												var i_571052 = 0;
												F.line = 2107;
												var res_589095 = 1;
												L65: do {
													F.line = 2108;
														L66: while (true) {
														if (!(res_589095 <= op_arg_557006)) break L66;
															F.line = 2109;
															i_571052 = res_589095;
															F.line = 362;
															HEX5BHEX5DHEX3D_558204(args_571040, i_571052, pop_523821(val_stack_556095, 0));
															F.line = 2110;
															res_589095 = addInt(res_589095, 1);
														}
												} while(false);
											} while(false);
											F.line = 364;
											var new_list_571076 = new_py_list_511273(args_571040);
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(new_list_571076); } else { val_stack_556095[0] = [new_list_571076]; };
											break;
										case 76:
											F.line = 368;
											var d_571212 = new_py_dict_527257();
											L67: do {
												F.line = 369;
												var i_571223 = 0;
												F.line = 3617;
												var i_589103 = 0;
												L68: do {
													F.line = 3618;
														L69: while (true) {
														if (!(i_589103 < op_arg_557006)) break L69;
															F.line = 3619;
															i_571223 = i_589103;
															F.line = 370;
															var key_571233 = pop_523821(val_stack_556095, 0);
															F.line = 371;
															var value_571243 = pop_523821(val_stack_556095, 0);
															F.line = 372;
															var ret_obj_571244 = setitem_pydict_object_magic_536581(d_571212, key_571233, value_571243);
																if (of_py_exception_object_358259(ret_obj_571244)) {
																Tmp70 = ret_obj_571244.thrown;
																}
																else {
																Tmp70 = false;
																}
																
															if (Tmp70) {
															F.line = 374;
															excp_obj_556827 = ret_obj_571244;
															F.line = 374;
															break L4;
															}
															
															F.line = 3620;
															i_589103 = addInt(i_589103, 1);
														}
												} while(false);
											} while(false);
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(d_571212); } else { val_stack_556095[0] = [d_571212]; };
											break;
										case 77:
											F.line = 378;
											var name_571412 = names_556645[names_556645_Idx][chckIndx(op_arg_557006, 0, names_556645[names_556645_Idx].length+0-1)-0];
											F.line = 379;
											var obj_571428 = (Tmp71 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp71[0])[Tmp71[1]];
											F.line = 380;
											F.line = 56;
											if ((obj_571428.pyType === null)) {
											F.line = 2895;
											var e_571455 = null;
											F.line = 2896;
											e_571455 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_571455.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_571455.parent = null;
											F.line = 26;
											raiseException(e_571455, "InternalError");
											}
											
											F.line = 27;
											var fun_571602 = obj_571428.pyType.magicMethods.Field28;
											if ((fun_571602 === null)) {
											F.line = 29;
											var obj_type_str_571611 = obj_571428.pyType.name;
											F.line = 30;
											var method_str_571613 = makeNimstrLit("getattr");
											F.line = 31;
											var msg_571615 = (makeNimstrLit("No ")).concat(method_str_571613,makeNimstrLit(" method for "),obj_type_str_571611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_571617 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_571617.tk = 3;
											F.line = 106;
											excp_571617.thrown = true;
											F.line = 107;
											excp_571617.msg = new_py_string_176075(msg_571615);
											var excp_571620 = excp_571617;
											F.line = 34;
											excp_obj_556827 = excp_571620;
											F.line = 34;
											break L4;
											}
											
											var fun_571802 = fun_571602;
											F.line = 57;
											var res_571804 = fun_571802(obj_571428, name_571412);
												if (of_py_exception_object_358259(res_571804)) {
												Tmp72 = res_571804.thrown;
												}
												else {
												Tmp72 = false;
												}
												
											if (Tmp72) {
											F.line = 60;
											excp_obj_556827 = res_571804;
											F.line = 60;
											break L4;
											}
											
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_571804);
											break;
										case 78:
											F.line = 383;
											var cmp_op_572216 = chckRange(op_arg_557006, 0, 10);
											F.line = 384;
											switch (cmp_op_572216) {
											case 0:
												F.line = 48;
												var op2_572234 = pop_523821(val_stack_556095, 0);
												F.line = 49;
												var op1_572251 = (Tmp73 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp73[0])[Tmp73[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_572251.pyType === null)) {
												F.line = 2895;
												var e_572278 = null;
												F.line = 2896;
												e_572278 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_572278.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_572278.parent = null;
												F.line = 26;
												raiseException(e_572278, "InternalError");
												}
												
												F.line = 27;
												var fun_572402 = op1_572251.pyType.magicMethods.Field16;
												if ((fun_572402 === null)) {
												F.line = 29;
												var obj_type_str_572411 = op1_572251.pyType.name;
												F.line = 30;
												var method_str_572413 = makeNimstrLit("lt");
												F.line = 31;
												var msg_572415 = (makeNimstrLit("No ")).concat(method_str_572413,makeNimstrLit(" method for "),obj_type_str_572411,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_572417 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_572417.tk = 3;
												F.line = 106;
												excp_572417.thrown = true;
												F.line = 107;
												excp_572417.msg = new_py_string_176075(msg_572415);
												var excp_572420 = excp_572417;
												F.line = 34;
												excp_obj_556827 = excp_572420;
												F.line = 34;
												break L4;
												}
												
												var fun_572602 = fun_572402;
												F.line = 57;
												var res_572604 = fun_572602(op1_572251, op2_572234);
													if (of_py_exception_object_358259(res_572604)) {
													Tmp74 = res_572604.thrown;
													}
													else {
													Tmp74 = false;
													}
													
												if (Tmp74) {
												F.line = 60;
												excp_obj_556827 = res_572604;
												F.line = 60;
												break L4;
												}
												
												var res_572802 = res_572604;
												F.line = 386;
												HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_572802);
												break;
											case 1:
												F.line = 48;
												var op2_573032 = pop_523821(val_stack_556095, 0);
												F.line = 49;
												var op1_573049 = (Tmp75 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp75[0])[Tmp75[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_573049.pyType === null)) {
												F.line = 2895;
												var e_573076 = null;
												F.line = 2896;
												e_573076 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_573076.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_573076.parent = null;
												F.line = 26;
												raiseException(e_573076, "InternalError");
												}
												
												F.line = 27;
												var fun_573202 = op1_573049.pyType.magicMethods.Field17;
												if ((fun_573202 === null)) {
												F.line = 29;
												var obj_type_str_573211 = op1_573049.pyType.name;
												F.line = 30;
												var method_str_573213 = makeNimstrLit("le");
												F.line = 31;
												var msg_573215 = (makeNimstrLit("No ")).concat(method_str_573213,makeNimstrLit(" method for "),obj_type_str_573211,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_573217 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_573217.tk = 3;
												F.line = 106;
												excp_573217.thrown = true;
												F.line = 107;
												excp_573217.msg = new_py_string_176075(msg_573215);
												var excp_573220 = excp_573217;
												F.line = 34;
												excp_obj_556827 = excp_573220;
												F.line = 34;
												break L4;
												}
												
												var fun_573402 = fun_573202;
												F.line = 57;
												var res_573404 = fun_573402(op1_573049, op2_573032);
													if (of_py_exception_object_358259(res_573404)) {
													Tmp76 = res_573404.thrown;
													}
													else {
													Tmp76 = false;
													}
													
												if (Tmp76) {
												F.line = 60;
												excp_obj_556827 = res_573404;
												F.line = 60;
												break L4;
												}
												
												var res_573602 = res_573404;
												F.line = 388;
												HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_573602);
												break;
											case 2:
												F.line = 48;
												var op2_573832 = pop_523821(val_stack_556095, 0);
												F.line = 49;
												var op1_573849 = (Tmp77 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp77[0])[Tmp77[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_573849.pyType === null)) {
												F.line = 2895;
												var e_573876 = null;
												F.line = 2896;
												e_573876 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_573876.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_573876.parent = null;
												F.line = 26;
												raiseException(e_573876, "InternalError");
												}
												
												F.line = 27;
												var fun_574002 = op1_573849.pyType.magicMethods.Field18;
												if ((fun_574002 === null)) {
												F.line = 29;
												var obj_type_str_574011 = op1_573849.pyType.name;
												F.line = 30;
												var method_str_574013 = makeNimstrLit("eq");
												F.line = 31;
												var msg_574015 = (makeNimstrLit("No ")).concat(method_str_574013,makeNimstrLit(" method for "),obj_type_str_574011,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_574017 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_574017.tk = 3;
												F.line = 106;
												excp_574017.thrown = true;
												F.line = 107;
												excp_574017.msg = new_py_string_176075(msg_574015);
												var excp_574020 = excp_574017;
												F.line = 34;
												excp_obj_556827 = excp_574020;
												F.line = 34;
												break L4;
												}
												
												var fun_574202 = fun_574002;
												F.line = 57;
												var res_574204 = fun_574202(op1_573849, op2_573832);
													if (of_py_exception_object_358259(res_574204)) {
													Tmp78 = res_574204.thrown;
													}
													else {
													Tmp78 = false;
													}
													
												if (Tmp78) {
												F.line = 60;
												excp_obj_556827 = res_574204;
												F.line = 60;
												break L4;
												}
												
												var res_574402 = res_574204;
												F.line = 390;
												HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_574402);
												break;
											case 3:
												F.line = 48;
												var op2_574632 = pop_523821(val_stack_556095, 0);
												F.line = 49;
												var op1_574649 = (Tmp79 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp79[0])[Tmp79[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_574649.pyType === null)) {
												F.line = 2895;
												var e_574676 = null;
												F.line = 2896;
												e_574676 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_574676.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_574676.parent = null;
												F.line = 26;
												raiseException(e_574676, "InternalError");
												}
												
												F.line = 27;
												var fun_574802 = op1_574649.pyType.magicMethods.Field19;
												if ((fun_574802 === null)) {
												F.line = 29;
												var obj_type_str_574811 = op1_574649.pyType.name;
												F.line = 30;
												var method_str_574813 = makeNimstrLit("ne");
												F.line = 31;
												var msg_574815 = (makeNimstrLit("No ")).concat(method_str_574813,makeNimstrLit(" method for "),obj_type_str_574811,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_574817 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_574817.tk = 3;
												F.line = 106;
												excp_574817.thrown = true;
												F.line = 107;
												excp_574817.msg = new_py_string_176075(msg_574815);
												var excp_574820 = excp_574817;
												F.line = 34;
												excp_obj_556827 = excp_574820;
												F.line = 34;
												break L4;
												}
												
												var fun_575002 = fun_574802;
												F.line = 57;
												var res_575004 = fun_575002(op1_574649, op2_574632);
													if (of_py_exception_object_358259(res_575004)) {
													Tmp80 = res_575004.thrown;
													}
													else {
													Tmp80 = false;
													}
													
												if (Tmp80) {
												F.line = 60;
												excp_obj_556827 = res_575004;
												F.line = 60;
												break L4;
												}
												
												var res_575202 = res_575004;
												F.line = 392;
												HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_575202);
												break;
											case 4:
												F.line = 48;
												var op2_575432 = pop_523821(val_stack_556095, 0);
												F.line = 49;
												var op1_575449 = (Tmp81 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp81[0])[Tmp81[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_575449.pyType === null)) {
												F.line = 2895;
												var e_575476 = null;
												F.line = 2896;
												e_575476 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_575476.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_575476.parent = null;
												F.line = 26;
												raiseException(e_575476, "InternalError");
												}
												
												F.line = 27;
												var fun_575602 = op1_575449.pyType.magicMethods.Field20;
												if ((fun_575602 === null)) {
												F.line = 29;
												var obj_type_str_575611 = op1_575449.pyType.name;
												F.line = 30;
												var method_str_575613 = makeNimstrLit("gt");
												F.line = 31;
												var msg_575615 = (makeNimstrLit("No ")).concat(method_str_575613,makeNimstrLit(" method for "),obj_type_str_575611,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_575617 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_575617.tk = 3;
												F.line = 106;
												excp_575617.thrown = true;
												F.line = 107;
												excp_575617.msg = new_py_string_176075(msg_575615);
												var excp_575620 = excp_575617;
												F.line = 34;
												excp_obj_556827 = excp_575620;
												F.line = 34;
												break L4;
												}
												
												var fun_575802 = fun_575602;
												F.line = 57;
												var res_575804 = fun_575802(op1_575449, op2_575432);
													if (of_py_exception_object_358259(res_575804)) {
													Tmp82 = res_575804.thrown;
													}
													else {
													Tmp82 = false;
													}
													
												if (Tmp82) {
												F.line = 60;
												excp_obj_556827 = res_575804;
												F.line = 60;
												break L4;
												}
												
												var res_576002 = res_575804;
												F.line = 394;
												HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_576002);
												break;
											case 5:
												F.line = 48;
												var op2_576232 = pop_523821(val_stack_556095, 0);
												F.line = 49;
												var op1_576249 = (Tmp83 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp83[0])[Tmp83[1]];
												F.line = 50;
												F.line = 56;
												if ((op1_576249.pyType === null)) {
												F.line = 2895;
												var e_576276 = null;
												F.line = 2896;
												e_576276 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_576276.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_576276.parent = null;
												F.line = 26;
												raiseException(e_576276, "InternalError");
												}
												
												F.line = 27;
												var fun_576402 = op1_576249.pyType.magicMethods.Field21;
												if ((fun_576402 === null)) {
												F.line = 29;
												var obj_type_str_576411 = op1_576249.pyType.name;
												F.line = 30;
												var method_str_576413 = makeNimstrLit("ge");
												F.line = 31;
												var msg_576415 = (makeNimstrLit("No ")).concat(method_str_576413,makeNimstrLit(" method for "),obj_type_str_576411,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_576417 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_576417.tk = 3;
												F.line = 106;
												excp_576417.thrown = true;
												F.line = 107;
												excp_576417.msg = new_py_string_176075(msg_576415);
												var excp_576420 = excp_576417;
												F.line = 34;
												excp_obj_556827 = excp_576420;
												F.line = 34;
												break L4;
												}
												
												var fun_576602 = fun_576402;
												F.line = 57;
												var res_576604 = fun_576602(op1_576249, op2_576232);
													if (of_py_exception_object_358259(res_576604)) {
													Tmp84 = res_576604.thrown;
													}
													else {
													Tmp84 = false;
													}
													
												if (Tmp84) {
												F.line = 60;
												excp_obj_556827 = res_576604;
												F.line = 60;
												break L4;
												}
												
												var res_576802 = res_576604;
												F.line = 396;
												HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, res_576802);
												break;
											case 6:
												F.line = 129;
												F.line = 55;
												var op1_577032 = pop_523821(val_stack_556095, 0);
												F.line = 56;
												var op2_577049 = (Tmp85 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp85[0])[Tmp85[1]];
												F.line = 57;
												F.line = 56;
												if ((op1_577032.pyType === null)) {
												F.line = 2895;
												var e_577076 = null;
												F.line = 2896;
												e_577076 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_577076.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_577076.parent = null;
												F.line = 26;
												raiseException(e_577076, "InternalError");
												}
												
												F.line = 27;
												var fun_577202 = op1_577032.pyType.magicMethods.Field22;
												if ((fun_577202 === null)) {
												F.line = 29;
												var obj_type_str_577211 = op1_577032.pyType.name;
												F.line = 30;
												var method_str_577213 = makeNimstrLit("contains");
												F.line = 31;
												var msg_577215 = (makeNimstrLit("No ")).concat(method_str_577213,makeNimstrLit(" method for "),obj_type_str_577211,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_577217 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_577217.tk = 3;
												F.line = 106;
												excp_577217.thrown = true;
												F.line = 107;
												excp_577217.msg = new_py_string_176075(msg_577215);
												var excp_577220 = excp_577217;
												F.line = 34;
												excp_obj_556827 = excp_577220;
												F.line = 34;
												break L4;
												}
												
												var fun_577402 = fun_577202;
												F.line = 57;
												var res_577404 = fun_577402(op1_577032, op2_577049);
													if (of_py_exception_object_358259(res_577404)) {
													Tmp86 = res_577404.thrown;
													}
													else {
													Tmp86 = false;
													}
													
												if (Tmp86) {
												F.line = 60;
												excp_obj_556827 = res_577404;
												F.line = 60;
												break L4;
												}
												
												var res_577602 = res_577404;
												if (val_stack_556095[0] != null) { val_stack_556095[0].push(res_577602); } else { val_stack_556095[0] = [res_577602]; };
												break;
											case 7:
												F.line = 400;
												F.line = 55;
												var op1_577828 = pop_523821(val_stack_556095, 0);
												F.line = 56;
												var op2_577845 = (Tmp87 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp87[0])[Tmp87[1]];
												F.line = 57;
												F.line = 56;
												if ((op1_577828.pyType === null)) {
												F.line = 2895;
												var e_577872 = null;
												F.line = 2896;
												e_577872 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_577872.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_577872.parent = null;
												F.line = 26;
												raiseException(e_577872, "InternalError");
												}
												
												F.line = 27;
												var fun_578002 = op1_577828.pyType.magicMethods.Field22;
												if ((fun_578002 === null)) {
												F.line = 29;
												var obj_type_str_578011 = op1_577828.pyType.name;
												F.line = 30;
												var method_str_578013 = makeNimstrLit("contains");
												F.line = 31;
												var msg_578015 = (makeNimstrLit("No ")).concat(method_str_578013,makeNimstrLit(" method for "),obj_type_str_578011,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_578017 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_578017.tk = 3;
												F.line = 106;
												excp_578017.thrown = true;
												F.line = 107;
												excp_578017.msg = new_py_string_176075(msg_578015);
												var excp_578020 = excp_578017;
												F.line = 34;
												excp_obj_556827 = excp_578020;
												F.line = 34;
												break L4;
												}
												
												var fun_578202 = fun_578002;
												F.line = 57;
												var res_578204 = fun_578202(op1_577828, op2_577845);
													if (of_py_exception_object_358259(res_578204)) {
													Tmp88 = res_578204.thrown;
													}
													else {
													Tmp88 = false;
													}
													
												if (Tmp88) {
												F.line = 60;
												excp_obj_556827 = res_578204;
												F.line = 60;
												break L4;
												}
												
												var res_578402 = res_578204;
												var obj_578403 = res_578402;
												if (of_py_bool_object_353106(obj_578403)) {
												F.line = 129;
												F.line = 45;
												if ((obj_578403.pyType === null)) {
												F.line = 2895;
												var e_578430 = null;
												F.line = 2896;
												e_578430 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_578430.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_578430.parent = null;
												F.line = 26;
												raiseException(e_578430, "InternalError");
												}
												
												F.line = 27;
												var fun_578602 = obj_578403.pyType.magicMethods.Field7;
												if ((fun_578602 === null)) {
												F.line = 29;
												var obj_type_str_578611 = obj_578403.pyType.name;
												F.line = 30;
												var method_str_578613 = makeNimstrLit("Not");
												F.line = 31;
												var msg_578615 = (makeNimstrLit("No ")).concat(method_str_578613,makeNimstrLit(" method for "),obj_type_str_578611,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_578617 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_578617.tk = 3;
												F.line = 106;
												excp_578617.thrown = true;
												F.line = 107;
												excp_578617.msg = new_py_string_176075(msg_578615);
												var excp_578620 = excp_578617;
												F.line = 34;
												excp_obj_556827 = excp_578620;
												F.line = 34;
												break L4;
												}
												
												var fun_578802 = fun_578602;
												F.line = 46;
												var res_578804 = fun_578802(obj_578403);
													if (of_py_exception_object_358259(res_578804)) {
													Tmp89 = res_578804.thrown;
													}
													else {
													Tmp89 = false;
													}
													
												if (Tmp89) {
												F.line = 49;
												excp_obj_556827 = res_578804;
												F.line = 49;
												break L4;
												}
												
												if (val_stack_556095[0] != null) { val_stack_556095[0].push(res_578804); } else { val_stack_556095[0] = [res_578804]; };
												}
												else {
													F.line = 404;
													F.line = 45;
													if ((obj_578403.pyType === null)) {
													F.line = 2895;
													var e_579237 = null;
													F.line = 2896;
													e_579237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
													F.line = 26;
													e_579237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
													F.line = 2891;
													e_579237.parent = null;
													F.line = 26;
													raiseException(e_579237, "InternalError");
													}
													
													F.line = 27;
													var fun_579402 = obj_578403.pyType.magicMethods.Field12;
													if ((fun_579402 === null)) {
													F.line = 29;
													var obj_type_str_579411 = obj_578403.pyType.name;
													F.line = 30;
													var method_str_579413 = makeNimstrLit("bool");
													F.line = 31;
													var msg_579415 = (makeNimstrLit("No ")).concat(method_str_579413,makeNimstrLit(" method for "),obj_type_str_579411,makeNimstrLit(" defined"));
													F.line = 32;
													F.line = 104;
													var excp_579417 = new_py_type_error_simple_360601();
													F.line = 105;
													excp_579417.tk = 3;
													F.line = 106;
													excp_579417.thrown = true;
													F.line = 107;
													excp_579417.msg = new_py_string_176075(msg_579415);
													var excp_579420 = excp_579417;
													F.line = 34;
													excp_obj_556827 = excp_579420;
													F.line = 34;
													break L4;
													}
													
													var fun_579602 = fun_579402;
													F.line = 46;
													var res_579604 = fun_579602(obj_578403);
														if (of_py_exception_object_358259(res_579604)) {
														Tmp90 = res_579604.thrown;
														}
														else {
														Tmp90 = false;
														}
														
													if (Tmp90) {
													F.line = 49;
													excp_obj_556827 = res_579604;
													F.line = 49;
													break L4;
													}
													
													var bool_obj_579801 = res_579604;
													if (!(of_py_bool_object_353106(bool_obj_579801))) {
													F.line = 2895;
													var e_579807 = null;
													F.line = 2896;
													e_579807 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
													F.line = 28;
													e_579807.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
													F.line = 2891;
													e_579807.parent = null;
													F.line = 406;
													raiseException(e_579807, "InternalError");
													}
													
													F.line = 129;
													F.line = 45;
													if ((bool_obj_579801.pyType === null)) {
													F.line = 2895;
													var e_580027 = null;
													F.line = 2896;
													e_580027 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
													F.line = 26;
													e_580027.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
													F.line = 2891;
													e_580027.parent = null;
													F.line = 26;
													raiseException(e_580027, "InternalError");
													}
													
													F.line = 27;
													var fun_580202 = bool_obj_579801.pyType.magicMethods.Field7;
													if ((fun_580202 === null)) {
													F.line = 29;
													var obj_type_str_580211 = bool_obj_579801.pyType.name;
													F.line = 30;
													var method_str_580213 = makeNimstrLit("Not");
													F.line = 31;
													var msg_580215 = (makeNimstrLit("No ")).concat(method_str_580213,makeNimstrLit(" method for "),obj_type_str_580211,makeNimstrLit(" defined"));
													F.line = 32;
													F.line = 104;
													var excp_580217 = new_py_type_error_simple_360601();
													F.line = 105;
													excp_580217.tk = 3;
													F.line = 106;
													excp_580217.thrown = true;
													F.line = 107;
													excp_580217.msg = new_py_string_176075(msg_580215);
													var excp_580220 = excp_580217;
													F.line = 34;
													excp_obj_556827 = excp_580220;
													F.line = 34;
													break L4;
													}
													
													var fun_580402 = fun_580202;
													F.line = 46;
													var res_580404 = fun_580402(bool_obj_579801);
														if (of_py_exception_object_358259(res_580404)) {
														Tmp91 = res_580404.thrown;
														}
														else {
														Tmp91 = false;
														}
														
													if (Tmp91) {
													F.line = 49;
													excp_obj_556827 = res_580404;
													F.line = 49;
													break L4;
													}
													
													if (val_stack_556095[0] != null) { val_stack_556095[0].push(res_580404); } else { val_stack_556095[0] = [res_580404]; };
												}
												
												break;
											case 10:
												F.line = 409;
												var target_excp_580821 = pop_523821(val_stack_556095, 0);
												if (!(is_exception_type_491113(target_excp_580821))) {
												F.line = 411;
												var msg_580822 = makeNimstrLit("catching classes that do not inherit from BaseException is not allowed");
												F.line = 413;
												F.line = 104;
												var excp_580824 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_580824.tk = 3;
												F.line = 106;
												excp_580824.thrown = true;
												F.line = 107;
												excp_580824.msg = new_py_string_176075(msg_580822);
												excp_obj_556827 = excp_580824;
												F.line = 413;
												break L4;
												}
												
												F.line = 414;
												var current_excp_580841 = (Tmp92 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp92[0])[Tmp92[1]];
												F.line = 129;
												if (val_stack_556095[0] != null) { val_stack_556095[0].push(match_excp_491072(target_excp_580821, current_excp_580841)); } else { val_stack_556095[0] = [match_excp_491072(target_excp_580821, current_excp_580841)]; };
												break;
											default: 
												F.line = 2895;
												var e_581016 = null;
												F.line = 2896;
												e_581016 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 28;
												e_581016.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
												F.line = 2891;
												e_581016.parent = null;
												F.line = 417;
												raiseException(e_581016, "InternalError");
												break;
											}
											break;
										case 79:
											F.line = 420;
											var name_581202 = names_556645[names_556645_Idx][chckIndx(op_arg_557006, 0, names_556645[names_556645_Idx].length+0-1)-0];
											F.line = 421;
											var ret_obj_581203 = py_import_556059(name_581202);
												if (of_py_exception_object_358259(ret_obj_581203)) {
												Tmp93 = ret_obj_581203.thrown;
												}
												else {
												Tmp93 = false;
												}
												
											if (Tmp93) {
											F.line = 423;
											excp_obj_556827 = ret_obj_581203;
											F.line = 423;
											break L4;
											}
											
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(ret_obj_581203); } else { val_stack_556095[0] = [ret_obj_581203]; };
											break;
										case 82:
											F.line = 427;
											var top_581427 = (Tmp94 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp94[0])[Tmp94[1]];
												F.line = 62;
												var ret_581433 = false;
												if (of_py_bool_object_353106(top_581427)) {
												F.line = 64;
												ret_581433 = top_581427.b;
												}
												
												F.line = 67;
												F.line = 45;
												if ((top_581427.pyType === null)) {
												F.line = 2895;
												var e_581460 = null;
												F.line = 2896;
												e_581460 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_581460.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_581460.parent = null;
												F.line = 26;
												raiseException(e_581460, "InternalError");
												}
												
												F.line = 27;
												var fun_581602 = top_581427.pyType.magicMethods.Field12;
												if ((fun_581602 === null)) {
												F.line = 29;
												var obj_type_str_581611 = top_581427.pyType.name;
												F.line = 30;
												var method_str_581613 = makeNimstrLit("bool");
												F.line = 31;
												var msg_581615 = (makeNimstrLit("No ")).concat(method_str_581613,makeNimstrLit(" method for "),obj_type_str_581611,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_581617 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_581617.tk = 3;
												F.line = 106;
												excp_581617.thrown = true;
												F.line = 107;
												excp_581617.msg = new_py_string_176075(msg_581615);
												var excp_581620 = excp_581617;
												F.line = 34;
												excp_obj_556827 = excp_581620;
												F.line = 34;
												break L4;
												}
												
												var fun_581802 = fun_581602;
												F.line = 46;
												var res_581804 = fun_581802(top_581427);
													if (of_py_exception_object_358259(res_581804)) {
													Tmp95 = res_581804.thrown;
													}
													else {
													Tmp95 = false;
													}
													
												if (Tmp95) {
												F.line = 49;
												excp_obj_556827 = res_581804;
												F.line = 49;
												break L4;
												}
												
												var bool_obj_582002 = res_581804;
											if ((bool_obj_582002.b == false)) {
											F.line = 98;
											last_i_556403 = subInt(op_arg_557006, 1);
											}
											else {
												F.line = 431;
											pop_523821(val_stack_556095, 0);
											}
											
											break;
										case 83:
											F.line = 434;
											var top_582028 = (Tmp96 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp96[0])[Tmp96[1]];
												F.line = 62;
												var ret_582034 = false;
												if (of_py_bool_object_353106(top_582028)) {
												F.line = 64;
												ret_582034 = top_582028.b;
												}
												
												F.line = 67;
												F.line = 45;
												if ((top_582028.pyType === null)) {
												F.line = 2895;
												var e_582061 = null;
												F.line = 2896;
												e_582061 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_582061.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_582061.parent = null;
												F.line = 26;
												raiseException(e_582061, "InternalError");
												}
												
												F.line = 27;
												var fun_582202 = top_582028.pyType.magicMethods.Field12;
												if ((fun_582202 === null)) {
												F.line = 29;
												var obj_type_str_582211 = top_582028.pyType.name;
												F.line = 30;
												var method_str_582213 = makeNimstrLit("bool");
												F.line = 31;
												var msg_582215 = (makeNimstrLit("No ")).concat(method_str_582213,makeNimstrLit(" method for "),obj_type_str_582211,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_582217 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_582217.tk = 3;
												F.line = 106;
												excp_582217.thrown = true;
												F.line = 107;
												excp_582217.msg = new_py_string_176075(msg_582215);
												var excp_582220 = excp_582217;
												F.line = 34;
												excp_obj_556827 = excp_582220;
												F.line = 34;
												break L4;
												}
												
												var fun_582402 = fun_582202;
												F.line = 46;
												var res_582404 = fun_582402(top_582028);
													if (of_py_exception_object_358259(res_582404)) {
													Tmp97 = res_582404.thrown;
													}
													else {
													Tmp97 = false;
													}
													
												if (Tmp97) {
												F.line = 49;
												excp_obj_556827 = res_582404;
												F.line = 49;
												break L4;
												}
												
												var bool_obj_582602 = res_582404;
											if ((bool_obj_582602.b == true)) {
											F.line = 98;
											last_i_556403 = subInt(op_arg_557006, 1);
											}
											else {
												F.line = 438;
											pop_523821(val_stack_556095, 0);
											}
											
											break;
										case 81:
										case 84:
											F.line = 98;
											last_i_556403 = subInt(op_arg_557006, 1);
											break;
										case 85:
											F.line = 444;
											var top_582624 = pop_523821(val_stack_556095, 0);
												F.line = 62;
												var ret_582630 = false;
												if (of_py_bool_object_353106(top_582624)) {
												F.line = 64;
												ret_582630 = top_582624.b;
												}
												
												F.line = 67;
												F.line = 45;
												if ((top_582624.pyType === null)) {
												F.line = 2895;
												var e_582657 = null;
												F.line = 2896;
												e_582657 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_582657.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_582657.parent = null;
												F.line = 26;
												raiseException(e_582657, "InternalError");
												}
												
												F.line = 27;
												var fun_582802 = top_582624.pyType.magicMethods.Field12;
												if ((fun_582802 === null)) {
												F.line = 29;
												var obj_type_str_582811 = top_582624.pyType.name;
												F.line = 30;
												var method_str_582813 = makeNimstrLit("bool");
												F.line = 31;
												var msg_582815 = (makeNimstrLit("No ")).concat(method_str_582813,makeNimstrLit(" method for "),obj_type_str_582811,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_582817 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_582817.tk = 3;
												F.line = 106;
												excp_582817.thrown = true;
												F.line = 107;
												excp_582817.msg = new_py_string_176075(msg_582815);
												var excp_582820 = excp_582817;
												F.line = 34;
												excp_obj_556827 = excp_582820;
												F.line = 34;
												break L4;
												}
												
												var fun_583002 = fun_582802;
												F.line = 46;
												var res_583004 = fun_583002(top_582624);
													if (of_py_exception_object_358259(res_583004)) {
													Tmp98 = res_583004.thrown;
													}
													else {
													Tmp98 = false;
													}
													
												if (Tmp98) {
												F.line = 49;
												excp_obj_556827 = res_583004;
												F.line = 49;
												break L4;
												}
												
												var bool_obj_583202 = res_583004;
											if ((bool_obj_583202.b == false)) {
											F.line = 98;
											last_i_556403 = subInt(op_arg_557006, 1);
											}
											
											break;
										case 86:
											F.line = 449;
											var top_583213 = pop_523821(val_stack_556095, 0);
												F.line = 62;
												var ret_583219 = false;
												if (of_py_bool_object_353106(top_583213)) {
												F.line = 64;
												ret_583219 = top_583213.b;
												}
												
												F.line = 67;
												F.line = 45;
												if ((top_583213.pyType === null)) {
												F.line = 2895;
												var e_583246 = null;
												F.line = 2896;
												e_583246 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_583246.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_583246.parent = null;
												F.line = 26;
												raiseException(e_583246, "InternalError");
												}
												
												F.line = 27;
												var fun_583402 = top_583213.pyType.magicMethods.Field12;
												if ((fun_583402 === null)) {
												F.line = 29;
												var obj_type_str_583411 = top_583213.pyType.name;
												F.line = 30;
												var method_str_583413 = makeNimstrLit("bool");
												F.line = 31;
												var msg_583415 = (makeNimstrLit("No ")).concat(method_str_583413,makeNimstrLit(" method for "),obj_type_str_583411,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_583417 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_583417.tk = 3;
												F.line = 106;
												excp_583417.thrown = true;
												F.line = 107;
												excp_583417.msg = new_py_string_176075(msg_583415);
												var excp_583420 = excp_583417;
												F.line = 34;
												excp_obj_556827 = excp_583420;
												F.line = 34;
												break L4;
												}
												
												var fun_583602 = fun_583402;
												F.line = 46;
												var res_583604 = fun_583602(top_583213);
													if (of_py_exception_object_358259(res_583604)) {
													Tmp99 = res_583604.thrown;
													}
													else {
													Tmp99 = false;
													}
													
												if (Tmp99) {
												F.line = 49;
												excp_obj_556827 = res_583604;
												F.line = 49;
												break L4;
												}
												
												var bool_obj_583802 = res_583604;
											if ((bool_obj_583802.b == true)) {
											F.line = 98;
											last_i_556403 = subInt(op_arg_557006, 1);
											}
											
											break;
										case 87:
											F.line = 454;
											var name_583804 = names_556645[names_556645_Idx][chckIndx(op_arg_557006, 0, names_556645[names_556645_Idx].length+0-1)-0];
											F.line = 455;
											var obj_583805 = null;
											if (has_key_527437(f_556058.globals, name_583804)) {
											F.line = 457;
											obj_583805 = HEX5BHEX5D_528323(f_556058.globals, name_583804);
											}
											else {
											if (has_key_527437(bltin_dict_539014, name_583804)) {
											F.line = 459;
											obj_583805 = HEX5BHEX5D_528323(bltin_dict_539014, name_583804);
											}
											else {
												F.line = 461;
												F.line = 461;
												var fmt_res_583808 = mnewString(0);
												F.line = 461;
												if (fmt_res_583808 != null) { fmt_res_583808 = (fmt_res_583808).concat(makeNimstrLit("name \'")); } else { fmt_res_583808 = makeNimstrLit("name \'"); };
												F.line = 260;
												if (fmt_res_583808 != null) { fmt_res_583808 = (fmt_res_583808).concat(name_583804.str); } else { fmt_res_583808 = name_583804.str.slice(); };
												F.line = 461;
												if (fmt_res_583808 != null) { fmt_res_583808 = (fmt_res_583808).concat(makeNimstrLit("\' is not defined")); } else { fmt_res_583808 = makeNimstrLit("\' is not defined"); };
												var msg_584001 = nimCopy(null, fmt_res_583808, NTI138);
												F.line = 462;
												F.line = 104;
												var excp_584003 = new_py_name_error_simple_358601();
												F.line = 105;
												excp_584003.tk = 1;
												F.line = 106;
												excp_584003.thrown = true;
												F.line = 107;
												excp_584003.msg = new_py_string_176075(msg_584001);
												excp_obj_556827 = excp_584003;
												F.line = 462;
												break L4;
											}
											}
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(obj_583805); } else { val_stack_556095[0] = [obj_583805]; };
											break;
										case 88:
											if ((0 < (block_stack_556097[0] != null ? block_stack_556097[0].length : 0))) {
											F.line = 467;
											if (block_stack_556097[0] != null) { block_stack_556097[0].push({handler: op_arg_557006, sPtr: (val_stack_556095[0] != null ? val_stack_556095[0].length : 0), context: (Tmp100 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp100[0])[Tmp100[1]].context, status: 0}); } else { block_stack_556097[0] = [{handler: op_arg_557006, sPtr: (val_stack_556095[0] != null ? val_stack_556095[0].length : 0), context: (Tmp100 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp100[0])[Tmp100[1]].context, status: 0}]; };
											}
											else {
												F.line = 469;
											if (block_stack_556097[0] != null) { block_stack_556097[0].push({handler: op_arg_557006, sPtr: (val_stack_556095[0] != null ? val_stack_556095[0].length : 0), context: null, status: 0}); } else { block_stack_556097[0] = [{handler: op_arg_557006, sPtr: (val_stack_556095[0] != null ? val_stack_556095[0].length : 0), context: null, status: 0}]; };
											}
											
											break;
										case 89:
											F.line = 472;
											var obj_584271 = fast_locals_556647[fast_locals_556647_Idx][chckIndx(op_arg_557006, 0, fast_locals_556647[fast_locals_556647_Idx].length+0-1)-0];
											if ((obj_584271 === null)) {
											F.line = 474;
											var name_584279 = f_556058.code.localVars[chckIndx(op_arg_557006, 0, f_556058.code.localVars.length+0-1)-0];
											F.line = 475;
											F.line = 475;
											var fmt_res_584282 = mnewString(0);
											F.line = 475;
											if (fmt_res_584282 != null) { fmt_res_584282 = (fmt_res_584282).concat(makeNimstrLit("local variable ")); } else { fmt_res_584282 = makeNimstrLit("local variable "); };
											F.line = 270;
											if (fmt_res_584282 != null) { fmt_res_584282 = (fmt_res_584282).concat(HEX24_157579(name_584279)); } else { fmt_res_584282 = HEX24_157579(name_584279).slice(); };
											F.line = 475;
											if (fmt_res_584282 != null) { fmt_res_584282 = (fmt_res_584282).concat(makeNimstrLit(" referenced before assignment")); } else { fmt_res_584282 = makeNimstrLit(" referenced before assignment"); };
											var msg_584401 = nimCopy(null, fmt_res_584282, NTI138);
											F.line = 476;
											F.line = 104;
											var excp_584403 = new_py_unbound_local_error_simple_367601();
											F.line = 105;
											excp_584403.tk = 10;
											F.line = 106;
											excp_584403.thrown = true;
											F.line = 107;
											excp_584403.msg = new_py_string_176075(msg_584401);
											var excp_584405 = excp_584403;
											F.line = 477;
											excp_obj_556827 = excp_584405;
											F.line = 477;
											break L4;
											}
											
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(obj_584271); } else { val_stack_556095[0] = [obj_584271]; };
											break;
										case 90:
											F.line = 481;
											fast_locals_556647[fast_locals_556647_Idx][chckIndx(op_arg_557006, 0, fast_locals_556647[fast_locals_556647_Idx].length+0-1)-0] = pop_523821(val_stack_556095, 0);
											break;
										case 92:
											F.line = 484;
											switch (op_arg_557006) {
											case 0:
													if (!((0 < (block_stack_556097[0] != null ? block_stack_556097[0].length : 0)))) Tmp101 = true; else {														Tmp101 = ((Tmp102 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp102[0])[Tmp102[1]].context === null);													}												if (Tmp101) {
												F.line = 487;
												F.line = 104;
												var excp_584654 = new_py_runtime_error_simple_371601();
												F.line = 105;
												excp_584654.tk = 14;
												F.line = 106;
												excp_584654.thrown = true;
												F.line = 107;
												excp_584654.msg = new_py_string_176075(makeNimstrLit("No active exception to reraise"));
												var excp_584656 = excp_584654;
												F.line = 488;
												excp_obj_556827 = excp_584656;
												F.line = 488;
												break L4;
												}
												else {
													F.line = 490;
													excp_obj_556827 = (Tmp103 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp103[0])[Tmp103[1]].context;
													F.line = 490;
													break L4;
												}
												
												break;
											case 1:
												F.line = 492;
												var obj_584681 = pop_523821(val_stack_556095, 0);
												F.line = 493;
												var excp_584682 = null;
												if (is_class_159414(obj_584681)) {
												F.line = 495;
												var new_func_584683 = obj_584681.magicMethods.Field26;
												if ((new_func_584683 === null)) {
												F.line = 2895;
												var e_584695 = null;
												F.line = 2896;
												e_584695 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 497;
												e_584695.message = nimCopy(null, makeNimstrLit("__new__ of exceptions should be initialized"), NTI138);
												F.line = 2891;
												e_584695.parent = null;
												F.line = 497;
												raiseException(e_584695, "InternalError");
												}
												
												F.line = 498;
												excp_584682 = new_func_584683([]);
												}
												else {
													F.line = 500;
													excp_584682 = obj_584681;
												}
												
												if (!(of_py_exception_object_358259(excp_584682))) {
												F.line = 2895;
												var e_584820 = null;
												F.line = 2896;
												e_584820 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 28;
												e_584820.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
												F.line = 2891;
												e_584820.parent = null;
												F.line = 502;
												raiseException(e_584820, "InternalError");
												}
												
												F.line = 503;
												excp_584682.thrown = true;
												F.line = 504;
												excp_obj_556827 = excp_584682;
												F.line = 504;
												break L4;
												break;
											default: 
												F.line = 2895;
												var e_585206 = null;
												F.line = 2896;
												e_585206 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 506;
												F.line = 506;
												var fmt_res_585216 = mnewString(0);
												F.line = 506;
												if (fmt_res_585216 != null) { fmt_res_585216 = (fmt_res_585216).concat(makeNimstrLit("RaiseVarargs has opArg ")); } else { fmt_res_585216 = makeNimstrLit("RaiseVarargs has opArg "); };
												F.line = 270;
												if (fmt_res_585216 != null) { fmt_res_585216 = (fmt_res_585216).concat(cstrToNimstr((op_arg_557006)+"")); } else { fmt_res_585216 = cstrToNimstr((op_arg_557006)+"").slice(); };
												e_585206.message = nimCopy(null, fmt_res_585216, NTI138);
												F.line = 2891;
												e_585206.parent = null;
												F.line = 506;
												raiseException(e_585206, "InternalError");
												break;
											}
											break;
										case 93:
											F.line = 509;
											var args_585430 = new_seq_568854(chckRange(op_arg_557006, 0, 2147483647));
											L104: do {
												F.line = 510;
												var i_585442 = 0;
												F.line = 2107;
												var res_589150 = 1;
												L105: do {
													F.line = 2108;
														L106: while (true) {
														if (!(res_589150 <= op_arg_557006)) break L106;
															F.line = 2109;
															i_585442 = res_589150;
															F.line = 511;
															HEX5BHEX5DHEX3D_558204(args_585430, i_585442, pop_523821(val_stack_556095, 0));
															F.line = 2110;
															res_589150 = addInt(res_589150, 1);
														}
												} while(false);
											} while(false);
											F.line = 512;
											var func_obj_no_cast_585475 = pop_523821(val_stack_556095, 0);
											F.line = 513;
											var ret_obj_585476 = null;
											if (of_py_function_object_545137(func_obj_no_cast_585475)) {
											F.line = 516;
											var func_obj_585477 = func_obj_no_cast_585475;
											F.line = 518;
											var new_f_585478 = new_py_frame_556050(func_obj_585477, args_585430, f_556058);
												if (of_py_exception_object_358259(new_f_585478)) {
												Tmp107 = new_f_585478.thrown;
												}
												else {
												Tmp107 = false;
												}
												
											if (Tmp107) {
											F.line = 520;
											excp_obj_556827 = new_f_585478;
											F.line = 520;
											break L4;
											}
											
											F.line = 521;
											ret_obj_585476 = eval_frame_556056(new_f_585478);
											}
											else {
												F.line = 525;
												var call_func_585479 = func_obj_no_cast_585475.pyType.magicMethods.Field31;
												if ((call_func_585479 === null)) {
												F.line = 527;
												F.line = 527;
												var fmt_res_585488 = mnewString(0);
												F.line = 260;
												if (fmt_res_585488 != null) { fmt_res_585488 = (fmt_res_585488).concat(func_obj_no_cast_585475.pyType.name); } else { fmt_res_585488 = func_obj_no_cast_585475.pyType.name.slice(); };
												F.line = 527;
												if (fmt_res_585488 != null) { fmt_res_585488 = (fmt_res_585488).concat(makeNimstrLit(" is not callable")); } else { fmt_res_585488 = makeNimstrLit(" is not callable"); };
												var msg_585601 = nimCopy(null, fmt_res_585488, NTI138);
												F.line = 528;
												F.line = 104;
												var excp_585603 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_585603.tk = 3;
												F.line = 106;
												excp_585603.thrown = true;
												F.line = 107;
												excp_585603.msg = new_py_string_176075(msg_585601);
												ret_obj_585476 = excp_585603;
												}
												else {
													F.line = 530;
													ret_obj_585476 = call_func_585479(func_obj_no_cast_585475, args_585430);
												}
												
											}
											
												if (of_py_exception_object_358259(ret_obj_585476)) {
												Tmp108 = ret_obj_585476.thrown;
												}
												else {
												Tmp108 = false;
												}
												
											if (Tmp108) {
											F.line = 532;
											excp_obj_556827 = ret_obj_585476;
											F.line = 532;
											break L4;
											}
											
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(ret_obj_585476); } else { val_stack_556095[0] = [ret_obj_585476]; };
											break;
										case 94:
											if (!(((op_arg_557006 == 0) || (op_arg_557006 == 8)))) {
											F.line = 537;
											failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(537, 20) `opArg == 0 or opArg == 8` "));
											}
											
											F.line = 538;
											var name_586010 = pop_523821(val_stack_556095, 0);
											F.line = 539;
											var code_586020 = pop_523821(val_stack_556095, 0);
											F.line = 540;
											var closure_586021 = null;
											if (!(((op_arg_557006 & 8) == 0))) {
											F.line = 542;
											closure_586021 = pop_523821(val_stack_556095, 0);
											}
											
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(new_py_func_547057(name_586010, code_586020, f_556058.globals, closure_586021)); } else { val_stack_556095[0] = [new_py_func_547057(name_586010, code_586020, f_556058.globals, closure_586021)]; };
											break;
										case 95:
											F.line = 546;
											var lower_586212 = null;
											F.line = 546;
											var upper_586213 = null;
											F.line = 546;
											var step_586214 = null;
											if ((op_arg_557006 == 3)) {
											F.line = 548;
											step_586214 = pop_523821(val_stack_556095, 0);
											}
											else {
												if (!((op_arg_557006 == 2))) {
												F.line = 550;
												failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(550, 22) `opArg == 2` "));
												}
												
												F.line = 551;
												step_586214 = py_none_356044;
											}
											
											F.line = 552;
											upper_586213 = pop_523821(val_stack_556095, 0);
											F.line = 553;
											lower_586212 = (Tmp109 = HEX5BHEX5D_557217(val_stack_556095[0], 1), Tmp109[0])[Tmp109[1]];
											F.line = 554;
											var slice_586425 = new_py_slice_468057(lower_586212, upper_586213, step_586214);
												if (of_py_exception_object_358259(slice_586425)) {
												Tmp110 = slice_586425.thrown;
												}
												else {
												Tmp110 = false;
												}
												
											if (Tmp110) {
											F.line = 556;
											excp_obj_556827 = slice_586425;
											F.line = 556;
											break L4;
											}
											
											F.line = 557;
											HEX5BHEX5DHEX3D_558204(val_stack_556095[0], 1, slice_586425);
											break;
										case 96:
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(cell_vars_556649[cell_vars_556649_Idx][chckIndx(op_arg_557006, 0, cell_vars_556649[cell_vars_556649_Idx].length+0-1)-0]); } else { val_stack_556095[0] = [cell_vars_556649[cell_vars_556649_Idx][chckIndx(op_arg_557006, 0, cell_vars_556649[cell_vars_556649_Idx].length+0-1)-0]]; };
											break;
										case 97:
											F.line = 563;
											var c_586812 = cell_vars_556649[cell_vars_556649_Idx][chckIndx(op_arg_557006, 0, cell_vars_556649[cell_vars_556649_Idx].length+0-1)-0];
											if ((c_586812.refObj === null)) {
											F.line = 565;
											var name_586820 = f_556058.code.cellVars[chckIndx(op_arg_557006, 0, f_556058.code.cellVars.length+0-1)-0];
											F.line = 566;
											F.line = 566;
											var fmt_res_586823 = mnewString(0);
											F.line = 566;
											if (fmt_res_586823 != null) { fmt_res_586823 = (fmt_res_586823).concat(makeNimstrLit("local variable ")); } else { fmt_res_586823 = makeNimstrLit("local variable "); };
											F.line = 270;
											if (fmt_res_586823 != null) { fmt_res_586823 = (fmt_res_586823).concat(HEX24_157579(name_586820)); } else { fmt_res_586823 = HEX24_157579(name_586820).slice(); };
											F.line = 566;
											if (fmt_res_586823 != null) { fmt_res_586823 = (fmt_res_586823).concat(makeNimstrLit(" referenced before assignment")); } else { fmt_res_586823 = makeNimstrLit(" referenced before assignment"); };
											var msg_587001 = nimCopy(null, fmt_res_586823, NTI138);
											F.line = 567;
											F.line = 104;
											var excp_587003 = new_py_unbound_local_error_simple_367601();
											F.line = 105;
											excp_587003.tk = 10;
											F.line = 106;
											excp_587003.thrown = true;
											F.line = 107;
											excp_587003.msg = new_py_string_176075(msg_587001);
											var excp_587005 = excp_587003;
											F.line = 568;
											excp_obj_556827 = excp_587005;
											F.line = 568;
											break L4;
											}
											
											F.line = 129;
											if (val_stack_556095[0] != null) { val_stack_556095[0].push(c_586812.refObj); } else { val_stack_556095[0] = [c_586812.refObj]; };
											break;
										case 98:
											F.line = 572;
											cell_vars_556649[cell_vars_556649_Idx][chckIndx(op_arg_557006, 0, cell_vars_556649[cell_vars_556649_Idx].length+0-1)-0].refObj = pop_523821(val_stack_556095, 0);
											break;
										case 104:
											F.line = 575;
											var top_587231 = pop_523821(val_stack_556095, 0);
											F.line = 576;
											var l_587247 = (Tmp111 = HEX5BHEX5D_557217(val_stack_556095[0], op_arg_557006), Tmp111[0])[Tmp111[1]];
											if (!(of_py_list_object_510271(l_587247))) {
											F.line = 577;
											failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(577, 20) `ofPyListObject(l)` "));
											}
											
											F.line = 578;
											if (l_587247.items != null) { l_587247.items.push(top_587231); } else { l_587247.items = [top_587231]; };
											break;
										default: 
											F.line = 581;
											F.line = 581;
											var fmt_res_587413 = mnewString(0);
											F.line = 581;
											if (fmt_res_587413 != null) { fmt_res_587413 = (fmt_res_587413).concat(makeNimstrLit("!!! NOT IMPLEMENTED OPCODE ")); } else { fmt_res_587413 = makeNimstrLit("!!! NOT IMPLEMENTED OPCODE "); };
											F.line = 270;
											if (fmt_res_587413 != null) { fmt_res_587413 = (fmt_res_587413).concat(reprEnum(op_code_557005, NTI464016)); } else { fmt_res_587413 = reprEnum(op_code_557005, NTI464016).slice(); };
											F.line = 581;
											if (fmt_res_587413 != null) { fmt_res_587413 = (fmt_res_587413).concat(makeNimstrLit(" IN EVAL FRAME !!!")); } else { fmt_res_587413 = makeNimstrLit(" IN EVAL FRAME !!!"); };
											var msg_587607 = nimCopy(null, fmt_res_587413, NTI138);
											F.line = 582;
											F.line = 104;
											var excp_587609 = new_py_not_implemented_error_simple_359601();
											F.line = 105;
											excp_587609.tk = 2;
											F.line = 106;
											excp_587609.thrown = true;
											F.line = 107;
											excp_587609.msg = new_py_string_176075(msg_587607);
											result_556217 = excp_587609;
											break BeforeRet;
											break;
										}
									} while(false);
								}
						} while(false);
					} while(false);
					L112: do {
						if (!(!((excp_obj_556827 === null)))) {
						F.line = 586;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(586, 9) `not isNil(excpObj)` "));
						}
						
						if (!(of_py_exception_object_358259(excp_obj_556827))) {
						F.line = 587;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(587, 16) `ofPyExceptionObject(excpObj)` "));
						}
						
						F.line = 588;
						var excp_588001 = excp_obj_556827;
						F.line = 589;
						set_trace_back_556418(excp_588001);
						L113: do {
							F.line = 590;
								L114: while (true) {
								if (!(0 < (block_stack_556097[0] != null ? block_stack_556097[0].length : 0))) break L114;
									F.line = 591;
									var top_block_588026 = (Tmp115 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp115[0])[Tmp115[1]];
									F.line = 592;
									switch (top_block_588026.status) {
									case 0:
										F.line = 594;
										excp_588001.context = top_block_588026.context;
										F.line = 595;
										top_block_588026.context = excp_588001;
										F.line = 596;
										top_block_588026.status = 1;
										if (((val_stack_556095[0] != null ? val_stack_556095[0].length : 0) == 0)) {
										if (!((top_block_588026.sPtr == 0))) {
										F.line = 140;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(140, 14) `topBlock.sPtr == 0` "));
										}
										
										}
										else {
											F.line = 142;
										if (val_stack_556095[0].length < chckRange(top_block_588026.sPtr, 0, 2147483647)) { for (var i=val_stack_556095[0].length;i<chckRange(top_block_588026.sPtr, 0, 2147483647);++i) val_stack_556095[0].push(null); }
               else { val_stack_556095[0].length = chckRange(top_block_588026.sPtr, 0, 2147483647); };
										}
										
										F.line = 129;
										if (val_stack_556095[0] != null) { val_stack_556095[0].push(excp_588001); } else { val_stack_556095[0] = [excp_588001]; };
										F.line = 98;
										last_i_556403 = subInt(top_block_588026.handler, 1);
										F.line = 602;
										break L112;
										break;
									case 1:
										if ((excp_588001.context === null)) {
										F.line = 605;
										excp_588001.context = top_block_588026.context;
										}
										
										if (((val_stack_556095[0] != null ? val_stack_556095[0].length : 0) == 0)) {
											F.line = 140;
											var ret_588627 = (Tmp116 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp116[0])[Tmp116[1]].sPtr;
											F.line = 140;
											pop_567271(block_stack_556097, 0);
										if (!((ret_588627 == 0))) {
										F.line = 140;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(140, 14) `\x0A  let ret588627 = blockStack[BackwardsIndex(1)].sPtr\x0A  discard pop(blockStack)\x0A  ret588627 == 0` "));
										}
										
										}
										else {
											F.line = 142;
											F.line = 173;
											var ret_588627 = (Tmp117 = HEX5BHEX5D_567236(block_stack_556097[0], 1), Tmp117[0])[Tmp117[1]].sPtr;
											F.line = 174;
											pop_567271(block_stack_556097, 0);
										if (val_stack_556095[0].length < chckRange(ret_588627, 0, 2147483647)) { for (var i=val_stack_556095[0].length;i<chckRange(ret_588627, 0, 2147483647);++i) val_stack_556095[0].push(null); }
               else { val_stack_556095[0].length = chckRange(ret_588627, 0, 2147483647); };
										}
										
										break;
									default: 
										F.line = 2895;
										var e_588816 = null;
										F.line = 2896;
										e_588816 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 28;
										e_588816.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_588816.parent = null;
										F.line = 609;
										raiseException(e_588816, "InternalError");
										break;
									}
								}
						} while(false);
						F.line = 610;
						result_556217 = excp_588001;
						break BeforeRet;
					} while(false);
				}
		} while(false);
		} finally {
		framePtr = F;
		}
	} while (false);
	framePtr = F.prev;

	return result_556217;

}

function call_py_function_object_magic_604722(self_no_cast_604724, args_604738) {
			var Tmp1;

	var result_604739 = null;

	var F={procname:"funcobjectImpl.callPyFunctionObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_604724.m_type, NTI545123))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFunctionObject` "));
		}
		
		F.line = 438;
		var self_604801 = self_no_cast_604724;
		F.line = 16;
		var f_604802 = new_py_frame_556050(self_604801, args_604738, null);
			if (of_py_exception_object_358259(f_604802)) {
			Tmp1 = f_604802.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 18;
		result_604739 = f_604802;
		break BeforeRet;
		}
		
		result_604739 = eval_frame_556056(f_604802);
	} while (false);
	framePtr = F.prev;

	return result_604739;

}

function HEX26_605015(x_605020, y_605023) {
	var result_605025 = null;

	var F={procname:"&.&",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2446;
		result_605025 = new Array(chckRange(addInt((x_605020 != null ? x_605020.length : 0), (y_605023 != null ? y_605023.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_605020 != null ? x_605020.length : 0), (y_605023 != null ? y_605023.length : 0)), 0, 2147483647);++i) {result_605025[i]=null;}		L1: do {
			F.line = 2447;
			var i_605068 = 0;
			F.line = 2104;
			var colontmp__605096 = 0;
			F.line = 2447;
			colontmp__605096 = subInt((x_605020 != null ? x_605020.length : 0), 1);
			F.line = 2107;
			var res_605099 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_605099 <= colontmp__605096)) break L3;
						F.line = 2109;
						i_605068 = res_605099;
						F.line = 2448;
						result_605025[chckIndx(i_605068, 0, result_605025.length+0-1)-0] = x_605020[chckIndx(i_605068, 0, x_605020.length+0-1)-0];
						F.line = 2110;
						res_605099 = addInt(res_605099, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 2449;
			var i_605087 = 0;
			F.line = 2104;
			var colontmp__605104 = 0;
			F.line = 2449;
			colontmp__605104 = subInt((y_605023 != null ? y_605023.length : 0), 1);
			F.line = 2107;
			var res_605107 = 0;
			L5: do {
				F.line = 2108;
					L6: while (true) {
					if (!(res_605107 <= colontmp__605104)) break L6;
						F.line = 2109;
						i_605087 = res_605107;
						F.line = 2450;
						result_605025[chckIndx(addInt(i_605087, (x_605020 != null ? x_605020.length : 0)), 0, result_605025.length+0-1)-0] = y_605023[chckIndx(i_605087, 0, y_605023.length+0-1)-0];
						F.line = 2110;
						res_605107 = addInt(res_605107, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_605025;

}

function call_py_bound_method_object_magic_604818(self_no_cast_604820, args_604834) {
			var Tmp1;

	var result_604835 = null;

	var F={procname:"funcobjectImpl.callPyBoundMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_604820.m_type, NTI546100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoundMethodObject` "));
		}
		
		F.line = 438;
		var self_605001 = self_no_cast_604820;
		F.line = 24;
		var f_605124 = new_py_frame_556050(self_605001.fun, HEX26_605015([self_605001.self], args_604834), null);
			if (of_py_exception_object_358259(f_605124)) {
			Tmp1 = f_605124.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 26;
		result_604835 = f_605124;
		break BeforeRet;
		}
		
		result_604835 = eval_frame_556056(f_605124);
	} while (false);
	framePtr = F.prev;

	return result_604835;

}
py_function_object_type_545135.magicMethods.Field31 = call_py_function_object_magic_604722;
py_bound_method_object_type_546108.magicMethods.Field31 = call_py_bound_method_object_magic_604818;

function new_607206() {
	var result_607211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_607401 = null;
		F.line = 211;
		r_607401 = {m_type: NTI607083, name: null, dType: null, kind: 0, meth: 0, id: 0, pyType: null};
		F.line = 212;
		result_607211 = r_607401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_607211;

}

function new_py_method_descr_simple_607201() {
	var result_607203 = null;

	var F={procname:"descrobject.newPyMethodDescrSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_607424 = new_607206();
		F.line = 561;
		obj_607424.pyType = py_method_descr_object_type_607095;
		F.line = 563;
		give_id_157814(obj_607424);
		result_607203 = obj_607424;
	framePtr = F.prev;

	return result_607203;

}

function new_py_method_descr_default_607821(args_607038) {
	var result_607824 = null;

	var F={procname:"descrobject.newPyMethodDescrDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_607824 = new_py_method_descr_simple_607201();
	framePtr = F.prev;

	return result_607824;

}
var py_method_descr_object_type_607095 = new_py_type_159261(makeNimstrLit("MethodDescr"));
py_method_descr_object_type_607095.magicMethods.Field26 = new_py_method_descr_default_607821;

function new_py_nim_func_554444(fun_554446, name_554447) {
	var result_554448 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		F.line = 47;
		result_554448 = new_py_nim_func_simple_552201();
		F.line = 48;
		result_554448.name = name_554447;
		F.line = 49;
		result_554448.kind = 0;
		F.line = 50;
		result_554448.fun = fun_554446;
	framePtr = F.prev;

	return result_554448;

}

function new_py_nim_func_554485(fun_554480, name_554482, self_554484) {
	var result_554487 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_554484 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self554484)` "));
		}
		
		F.line = 58;
		result_554487 = new_py_nim_func_simple_552201();
		F.line = 59;
		result_554487.name = name_554482;
		F.line = 60;
		result_554487.kind = 1;
		F.line = 61;
		result_554487.fun = fun_554480;
		F.line = 62;
		result_554487.self = self_554484;
	framePtr = F.prev;

	return result_554487;

}

function new_py_nim_func_554622(fun_554617, name_554619, self_554621) {
	var result_554624 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_554621 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self554621)` "));
		}
		
		F.line = 58;
		result_554624 = new_py_nim_func_simple_552201();
		F.line = 59;
		result_554624.name = name_554619;
		F.line = 60;
		result_554624.kind = 2;
		F.line = 61;
		result_554624.fun = fun_554617;
		F.line = 62;
		result_554624.self = self_554621;
	framePtr = F.prev;

	return result_554624;

}

function new_py_nim_func_554822(fun_554817, name_554819, self_554821) {
	var result_554824 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_554821 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self554821)` "));
		}
		
		F.line = 58;
		result_554824 = new_py_nim_func_simple_552201();
		F.line = 59;
		result_554824.name = name_554819;
		F.line = 60;
		result_554824.kind = 3;
		F.line = 61;
		result_554824.fun = fun_554817;
		F.line = 62;
		result_554824.self = self_554821;
	framePtr = F.prev;

	return result_554824;

}

function new_py_nim_func_555022(fun_555017, name_555019, self_555021) {
	var result_555024 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_555021 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self555021)` "));
		}
		
		F.line = 58;
		result_555024 = new_py_nim_func_simple_552201();
		F.line = 59;
		result_555024.name = name_555019;
		F.line = 60;
		result_555024.kind = 4;
		F.line = 61;
		result_555024.fun = fun_555017;
		F.line = 62;
		result_555024.self = self_555021;
	framePtr = F.prev;

	return result_555024;

}

function get_py_method_descr_object_magic_609014(self_no_cast_609016, other_609017) {
	var result_609018 = null;

	var F={procname:"descrobject.getPyMethodDescrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_609016.m_type, NTI607083))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyMethodDescrObject` "));
		}
		
		F.line = 438;
		var self_609201 = self_no_cast_609016;
		if (!((other_609017.pyType == self_609201.dType))) {
		F.line = 49;
		F.line = 49;
		var fmt_res_609215 = mnewString(0);
		F.line = 49;
		if (fmt_res_609215 != null) { fmt_res_609215 = (fmt_res_609215).concat(makeNimstrLit("descriptor ")); } else { fmt_res_609215 = makeNimstrLit("descriptor "); };
		F.line = 270;
		if (fmt_res_609215 != null) { fmt_res_609215 = (fmt_res_609215).concat(HEX24_157579(self_609201.name)); } else { fmt_res_609215 = HEX24_157579(self_609201.name).slice(); };
		F.line = 49;
		if (fmt_res_609215 != null) { fmt_res_609215 = (fmt_res_609215).concat(makeNimstrLit(" for ")); } else { fmt_res_609215 = makeNimstrLit(" for "); };
		F.line = 260;
		if (fmt_res_609215 != null) { fmt_res_609215 = (fmt_res_609215).concat(self_609201.dType.name); } else { fmt_res_609215 = self_609201.dType.name.slice(); };
		F.line = 49;
		if (fmt_res_609215 != null) { fmt_res_609215 = (fmt_res_609215).concat(makeNimstrLit(" objects ")); } else { fmt_res_609215 = makeNimstrLit(" objects "); };
		F.line = 50;
		var fmt_res_609603 = mnewString(0);
		F.line = 50;
		if (fmt_res_609603 != null) { fmt_res_609603 = (fmt_res_609603).concat(makeNimstrLit("doesn\'t apply to ")); } else { fmt_res_609603 = makeNimstrLit("doesn\'t apply to "); };
		F.line = 260;
		if (fmt_res_609603 != null) { fmt_res_609603 = (fmt_res_609603).concat(other_609017.pyType.name); } else { fmt_res_609603 = other_609017.pyType.name.slice(); };
		F.line = 50;
		if (fmt_res_609603 != null) { fmt_res_609603 = (fmt_res_609603).concat(makeNimstrLit(" object")); } else { fmt_res_609603 = makeNimstrLit(" object"); };
		var msg_609801 = (fmt_res_609215).concat(fmt_res_609603);
		F.line = 51;
		F.line = 104;
		var excp_609803 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_609803.tk = 3;
		F.line = 106;
		excp_609803.thrown = true;
		F.line = 107;
		excp_609803.msg = new_py_string_176075(msg_609801);
		result_609018 = excp_609803;
		break BeforeRet;
		}
		
		F.line = 52;
		var owner_609805 = other_609017;
		F.line = 53;
		switch (self_609201.kind) {
		case 0:
			F.line = 55;
			result_609018 = new_py_nim_func_554444(self_609201.meth, self_609201.name);
			break BeforeRet;
			break;
		case 1:
			F.line = 57;
			result_609018 = new_py_nim_func_554485(self_609201.meth, self_609201.name, owner_609805);
			break BeforeRet;
			break;
		case 2:
			F.line = 59;
			result_609018 = new_py_nim_func_554622(self_609201.meth, self_609201.name, owner_609805);
			break BeforeRet;
			break;
		case 3:
			F.line = 61;
			result_609018 = new_py_nim_func_554822(self_609201.meth, self_609201.name, owner_609805);
			break BeforeRet;
			break;
		case 4:
			F.line = 63;
			result_609018 = new_py_nim_func_555022(self_609201.meth, self_609201.name, owner_609805);
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_609018;

}

function new_610006() {
	var result_610011 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_610201 = null;
		F.line = 211;
		r_610201 = {m_type: NTI609891, getter: null, setter: null, id: 0, pyType: null};
		F.line = 212;
		result_610011 = r_610201;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_610011;

}

function new_py_get_set_descr_simple_610001() {
	var result_610003 = null;

	var F={procname:"descrobject.newPyGetSetDescrSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_610224 = new_610006();
		F.line = 561;
		obj_610224.pyType = py_get_set_descr_object_type_609899;
		F.line = 563;
		give_id_157814(obj_610224);
		result_610003 = obj_610224;
	framePtr = F.prev;

	return result_610003;

}

function new_py_get_set_descr_default_610621(args_609846) {
	var result_610624 = null;

	var F={procname:"descrobject.newPyGetSetDescrDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_610624 = new_py_get_set_descr_simple_610001();
	framePtr = F.prev;

	return result_610624;

}

function get_py_get_set_descr_object_magic_610844(self_no_cast_610846, other_610847) {
	var result_610848 = null;

	var F={procname:"descrobject.getPyGetSetDescrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_610846.m_type, NTI609891))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyGetSetDescrObject` "));
		}
		
		F.line = 438;
		var self_611001 = self_no_cast_610846;
		result_610848 = self_611001.getter(other_610847);
	framePtr = F.prev;

	return result_610848;

}

function set_py_get_set_descr_object_magic_611016(self_no_cast_611018, arg1_611019, arg2_611020) {
	var result_611021 = null;

	var F={procname:"descrobject.setPyGetSetDescrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_611018.m_type, NTI609891))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyGetSetDescrObject` "));
		}
		
		F.line = 438;
		var self_611201 = self_no_cast_611018;
		result_611021 = self_611201.setter(arg1_611019, arg2_611020);
	framePtr = F.prev;

	return result_611021;

}
py_method_descr_object_type_607095.magicMethods.Field34 = get_py_method_descr_object_magic_609014;
var py_get_set_descr_object_type_609899 = new_py_type_159261(makeNimstrLit("GetSetDescr"));
py_get_set_descr_object_type_609899.magicMethods.Field26 = new_py_get_set_descr_default_610621;
py_get_set_descr_object_type_609899.magicMethods.Field34 = get_py_get_set_descr_object_magic_610844;
py_get_set_descr_object_type_609899.magicMethods.Field35 = set_py_get_set_descr_object_magic_611016;

function new_611406() {
	var result_611411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_611601 = null;
		F.line = 211;
		r_611601 = {m_type: NTI611304, getter: null, id: 0, pyType: null};
		F.line = 212;
		result_611411 = r_611601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_611411;

}

function new_py_property_simple_611401() {
	var result_611403 = null;

	var F={procname:"descrobject.newPyPropertySimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_611624 = new_611406();
		F.line = 561;
		obj_611624.pyType = py_property_object_type_611310;
		F.line = 563;
		give_id_157814(obj_611624);
		result_611403 = obj_611624;
	framePtr = F.prev;

	return result_611403;

}

function new_py_property_default_612021(args_611259) {
	var result_612024 = null;

	var F={procname:"descrobject.newPyPropertyDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_612024 = new_py_property_simple_611401();
	framePtr = F.prev;

	return result_612024;

}

function init_py_property_object_magic_612244(self_no_cast_612246, args_612260) {
	var result_612261 = null;

	var F={procname:"descrobject.initPyPropertyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_612246.m_type, NTI611304))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyPropertyObject` "));
		}
		
		F.line = 438;
		var self_612401 = self_no_cast_612246;
		if (!(((args_612260 != null ? args_612260.length : 0) == 1))) {
		F.line = 183;
		var msg_612413 = null;
		if (false) {
		F.line = 185;
		F.line = 185;
		var fmt_res_612418 = mnewString(0);
		F.line = 185;
		if (fmt_res_612418 != null) { fmt_res_612418 = (fmt_res_612418).concat(makeNimstrLit(" argument (")); } else { fmt_res_612418 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_612418 != null) { fmt_res_612418 = (fmt_res_612418).concat(cstrToNimstr(((args_612260 != null ? args_612260.length : 0))+"")); } else { fmt_res_612418 = cstrToNimstr(((args_612260 != null ? args_612260.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_612418 != null) { fmt_res_612418 = (fmt_res_612418).concat(makeNimstrLit(" given)")); } else { fmt_res_612418 = makeNimstrLit(" given)"); };
		msg_612413 = nimCopy(null, (makeNimstrLit(" takes exactly 1")).concat(fmt_res_612418), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_612610 = mnewString(0);
			F.line = 187;
			if (fmt_res_612610 != null) { fmt_res_612610 = (fmt_res_612610).concat(makeNimstrLit(" argument (")); } else { fmt_res_612610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_612610 != null) { fmt_res_612610 = (fmt_res_612610).concat(cstrToNimstr(((args_612260 != null ? args_612260.length : 0))+"")); } else { fmt_res_612610 = cstrToNimstr(((args_612260 != null ? args_612260.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_612610 != null) { fmt_res_612610 = (fmt_res_612610).concat(makeNimstrLit(" given)")); } else { fmt_res_612610 = makeNimstrLit(" given)"); };
			msg_612413 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_612610), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_612809 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_612809.tk = 3;
		F.line = 106;
		excp_612809.thrown = true;
		F.line = 107;
		excp_612809.msg = new_py_string_176075(msg_612413);
		result_612261 = excp_612809;
		break BeforeRet;
		}
		
		F.line = 93;
		self_612401.getter = args_612260[chckIndx(0, 0, args_612260.length+0-1)-0];
		result_612261 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_612261;

}

function of_py_nim_func_object_552157(obj_552088) {
	var result_552159 = false;

	var F={procname:"methodobject.ofPyNimFuncObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_552159 = (obj_552088.pyType.kind == 12);
	framePtr = F.prev;

	return result_552159;

}

function fast_call_606133(callable_606135, args_606137) {
	var result_606138 = null;

	var F={procname:"call.fastCall",prev:framePtr,filename:"call.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (of_py_nim_func_object_552157(callable_606135)) {
		F.line = 7;
		result_606138 = call_py_nim_func_object_magic_553044(callable_606135, args_606137);
		break BeforeRet;
		}
		else {
		if (of_py_function_object_545137(callable_606135)) {
		F.line = 9;
		result_606138 = call_py_function_object_magic_604722(callable_606135, args_606137);
		break BeforeRet;
		}
		else {
			F.line = 11;
			if ((callable_606135.pyType === null)) {
			F.line = 2895;
			var e_606161 = null;
			F.line = 2896;
			e_606161 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_606161.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_606161.parent = null;
			F.line = 26;
			raiseException(e_606161, "InternalError");
			}
			
			F.line = 27;
			var fun_606202 = callable_606135.pyType.magicMethods.Field31;
			if ((fun_606202 === null)) {
			F.line = 29;
			var obj_type_str_606211 = callable_606135.pyType.name;
			F.line = 30;
			var method_str_606213 = makeNimstrLit("call");
			F.line = 31;
			var msg_606215 = (makeNimstrLit("No ")).concat(method_str_606213,makeNimstrLit(" method for "),obj_type_str_606211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_606217 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_606217.tk = 3;
			F.line = 106;
			excp_606217.thrown = true;
			F.line = 107;
			excp_606217.msg = new_py_string_176075(msg_606215);
			var excp_606220 = excp_606217;
			F.line = 36;
			result_606138 = excp_606220;
			break BeforeRet;
			}
			
			var fun_606401 = fun_606202;
			F.line = 12;
			result_606138 = fun_606401(callable_606135, args_606137);
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_606138;

}

function get_py_property_object_magic_612825(self_no_cast_612827, other_612828) {
	var result_612829 = null;

	var F={procname:"descrobject.getPyPropertyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_612827.m_type, NTI611304))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyPropertyObject` "));
		}
		
		F.line = 438;
		var self_613001 = self_no_cast_612827;
		result_612829 = fast_call_606133(self_613001.getter, [other_612828]);
	framePtr = F.prev;

	return result_612829;

}
var py_property_object_type_611310 = new_py_type_159261(makeNimstrLit("Property"));
py_property_object_type_611310.magicMethods.Field26 = new_py_property_default_612021;
py_property_object_type_611310.magicMethods.Field27 = init_py_property_object_magic_612244;
py_property_object_type_611310.magicMethods.Field34 = get_py_property_object_magic_612825;

function new_614206() {
	var result_614211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_614401 = null;
		F.line = 211;
		r_614401 = {m_type: NTI614110, dict: null, id: 0, pyType: null};
		F.line = 212;
		result_614211 = r_614401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_614211;

}

function new_py_dict_proxy_simple_614201() {
	var result_614203 = null;

	var F={procname:"dictproxyobject.newPyDictProxySimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_614424 = new_614206();
		F.line = 561;
		obj_614424.pyType = py_dict_proxy_object_type_614116;
		F.line = 563;
		give_id_157814(obj_614424);
		result_614203 = obj_614424;
	framePtr = F.prev;

	return result_614203;

}

function new_py_dict_proxy_default_614821(args_614065) {
	var result_614824 = null;

	var F={procname:"dictproxyobject.newPyDictProxyDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_614824 = new_py_dict_proxy_simple_614201();
	framePtr = F.prev;

	return result_614824;

}

function repr_py_dict_proxy_object_magic_615044(self_no_cast_615046) {
	var result_615047 = null;

	var F={procname:"dictproxyobject.reprPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_615046.m_type, NTI614110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_615201 = self_no_cast_615046;
		F.line = 45;
		if ((self_615201.dict.pyType === null)) {
		F.line = 2895;
		var e_615228 = null;
		F.line = 2896;
		e_615228 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_615228.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_615228.parent = null;
		F.line = 26;
		raiseException(e_615228, "InternalError");
		}
		
		F.line = 27;
		var fun_615402 = self_615201.dict.pyType.magicMethods.Field25;
		if ((fun_615402 === null)) {
		F.line = 29;
		var obj_type_str_615411 = self_615201.dict.pyType.name;
		F.line = 30;
		var method_str_615413 = makeNimstrLit("repr");
		F.line = 31;
		var msg_615415 = (makeNimstrLit("No ")).concat(method_str_615413,makeNimstrLit(" method for "),obj_type_str_615411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_615417 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_615417.tk = 3;
		F.line = 106;
		excp_615417.thrown = true;
		F.line = 107;
		excp_615417.msg = new_py_string_176075(msg_615415);
		var excp_615420 = excp_615417;
		F.line = 36;
		result_615047 = excp_615420;
		break BeforeRet;
		}
		
		var fun_615602 = fun_615402;
		F.line = 46;
		var res_615604 = fun_615602(self_615201.dict);
		result_615047 = res_615604;
	} while (false);
	framePtr = F.prev;

	return result_615047;

}

function str_py_dict_proxy_object_magic_615815(self_no_cast_615817) {
	var result_615818 = null;

	var F={procname:"dictproxyobject.strPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_615817.m_type, NTI614110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_616001 = self_no_cast_615817;
		F.line = 45;
		if ((self_616001.dict.pyType === null)) {
		F.line = 2895;
		var e_616028 = null;
		F.line = 2896;
		e_616028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_616028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_616028.parent = null;
		F.line = 26;
		raiseException(e_616028, "InternalError");
		}
		
		F.line = 27;
		var fun_616202 = self_616001.dict.pyType.magicMethods.Field24;
		if ((fun_616202 === null)) {
		F.line = 29;
		var obj_type_str_616211 = self_616001.dict.pyType.name;
		F.line = 30;
		var method_str_616213 = makeNimstrLit("str");
		F.line = 31;
		var msg_616215 = (makeNimstrLit("No ")).concat(method_str_616213,makeNimstrLit(" method for "),obj_type_str_616211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_616217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_616217.tk = 3;
		F.line = 106;
		excp_616217.thrown = true;
		F.line = 107;
		excp_616217.msg = new_py_string_176075(msg_616215);
		var excp_616220 = excp_616217;
		F.line = 36;
		result_615818 = excp_616220;
		break BeforeRet;
		}
		
		var fun_616402 = fun_616202;
		F.line = 46;
		var res_616404 = fun_616402(self_616001.dict);
		result_615818 = res_616404;
	} while (false);
	framePtr = F.prev;

	return result_615818;

}

function getitem_py_dict_proxy_object_magic_616615(self_no_cast_616617, other_616618) {
	var result_616619 = null;

	var F={procname:"dictproxyobject.getitemPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_616617.m_type, NTI614110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_616801 = self_no_cast_616617;
		F.line = 56;
		if ((self_616801.dict.pyType === null)) {
		F.line = 2895;
		var e_616828 = null;
		F.line = 2896;
		e_616828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_616828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_616828.parent = null;
		F.line = 26;
		raiseException(e_616828, "InternalError");
		}
		
		F.line = 27;
		var fun_617002 = self_616801.dict.pyType.magicMethods.Field32;
		if ((fun_617002 === null)) {
		F.line = 29;
		var obj_type_str_617011 = self_616801.dict.pyType.name;
		F.line = 30;
		var method_str_617013 = makeNimstrLit("getitem");
		F.line = 31;
		var msg_617015 = (makeNimstrLit("No ")).concat(method_str_617013,makeNimstrLit(" method for "),obj_type_str_617011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_617017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_617017.tk = 3;
		F.line = 106;
		excp_617017.thrown = true;
		F.line = 107;
		excp_617017.msg = new_py_string_176075(msg_617015);
		var excp_617020 = excp_617017;
		F.line = 36;
		result_616619 = excp_617020;
		break BeforeRet;
		}
		
		var fun_617202 = fun_617002;
		F.line = 57;
		var res_617204 = fun_617202(self_616801.dict, other_616618);
		result_616619 = res_617204;
	} while (false);
	framePtr = F.prev;

	return result_616619;

}

function len_py_dict_proxy_object_magic_617415(self_no_cast_617417) {
	var result_617418 = null;

	var F={procname:"dictproxyobject.lenPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_617417.m_type, NTI614110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_617601 = self_no_cast_617417;
		F.line = 45;
		if ((self_617601.dict.pyType === null)) {
		F.line = 2895;
		var e_617628 = null;
		F.line = 2896;
		e_617628 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_617628.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_617628.parent = null;
		F.line = 26;
		raiseException(e_617628, "InternalError");
		}
		
		F.line = 27;
		var fun_617802 = self_617601.dict.pyType.magicMethods.Field23;
		if ((fun_617802 === null)) {
		F.line = 29;
		var obj_type_str_617811 = self_617601.dict.pyType.name;
		F.line = 30;
		var method_str_617813 = makeNimstrLit("len");
		F.line = 31;
		var msg_617815 = (makeNimstrLit("No ")).concat(method_str_617813,makeNimstrLit(" method for "),obj_type_str_617811,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_617817 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_617817.tk = 3;
		F.line = 106;
		excp_617817.thrown = true;
		F.line = 107;
		excp_617817.msg = new_py_string_176075(msg_617815);
		var excp_617820 = excp_617817;
		F.line = 36;
		result_617418 = excp_617820;
		break BeforeRet;
		}
		
		var fun_618002 = fun_617802;
		F.line = 46;
		var res_618004 = fun_618002(self_617601.dict);
		result_617418 = res_618004;
	} while (false);
	framePtr = F.prev;

	return result_617418;

}

function init_py_dict_proxy_object_magic_618215(self_no_cast_618217, args_618231) {
	var result_618232 = null;

	var F={procname:"dictproxyobject.initPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_618231 != null ? args_618231.length : 0) == 1))) {
		F.line = 183;
		var msg_618244 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_618249 = mnewString(0);
		F.line = 185;
		if (fmt_res_618249 != null) { fmt_res_618249 = (fmt_res_618249).concat(makeNimstrLit(" argument (")); } else { fmt_res_618249 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_618249 != null) { fmt_res_618249 = (fmt_res_618249).concat(cstrToNimstr(((args_618231 != null ? args_618231.length : 0))+"")); } else { fmt_res_618249 = cstrToNimstr(((args_618231 != null ? args_618231.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_618249 != null) { fmt_res_618249 = (fmt_res_618249).concat(makeNimstrLit(" given)")); } else { fmt_res_618249 = makeNimstrLit(" given)"); };
		msg_618244 = nimCopy(null, (makeNimstrLit("init takes exactly 1")).concat(fmt_res_618249), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_618410 = mnewString(0);
			F.line = 187;
			if (fmt_res_618410 != null) { fmt_res_618410 = (fmt_res_618410).concat(makeNimstrLit(" argument (")); } else { fmt_res_618410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_618410 != null) { fmt_res_618410 = (fmt_res_618410).concat(cstrToNimstr(((args_618231 != null ? args_618231.length : 0))+"")); } else { fmt_res_618410 = cstrToNimstr(((args_618231 != null ? args_618231.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_618410 != null) { fmt_res_618410 = (fmt_res_618410).concat(makeNimstrLit(" given)")); } else { fmt_res_618410 = makeNimstrLit(" given)"); };
			msg_618244 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_618410), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_618609 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_618609.tk = 3;
		F.line = 106;
		excp_618609.thrown = true;
		F.line = 107;
		excp_618609.msg = new_py_string_176075(msg_618244);
		result_618232 = excp_618609;
		break BeforeRet;
		}
		
		F.line = 230;
		var mapping_618611 = args_618231[chckIndx(0, 0, args_618231.length+0-1)-0];
		if (!(isObj(self_no_cast_618217.m_type, NTI614110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_618801 = self_no_cast_618217;
		F.line = 23;
		self_618801.dict = mapping_618611;
		result_618232 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_618232;

}
var py_dict_proxy_object_type_614116 = new_py_type_159261(makeNimstrLit("DictProxy"));
py_dict_proxy_object_type_614116.magicMethods.Field26 = new_py_dict_proxy_default_614821;
py_dict_proxy_object_type_614116.magicMethods.Field25 = repr_py_dict_proxy_object_magic_615044;
py_dict_proxy_object_type_614116.magicMethods.Field24 = str_py_dict_proxy_object_magic_615815;
py_dict_proxy_object_type_614116.magicMethods.Field32 = getitem_py_dict_proxy_object_magic_616615;
py_dict_proxy_object_type_614116.magicMethods.Field23 = len_py_dict_proxy_object_magic_617415;
py_dict_proxy_object_type_614116.magicMethods.Field27 = init_py_dict_proxy_object_magic_618215;

function repr_py_type_object_magic_619363(self_no_cast_619365) {
	var result_619366 = null;

	var F={procname:"typeobject.reprPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_619365.m_type, NTI157280))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 438;
		var self_619401 = self_no_cast_619365;
		result_619366 = new_py_string_176075(self_619401.name);
	framePtr = F.prev;

	return result_619366;

}

function str_py_type_object_magic_619416(self_no_cast_619418) {
	var result_619419 = null;

	var F={procname:"typeobject.strPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_619418.m_type, NTI157280))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 438;
		var self_619601 = self_no_cast_619418;
		F.line = 34;
		var fmt_res_619604 = mnewString(0);
		F.line = 34;
		if (fmt_res_619604 != null) { fmt_res_619604 = (fmt_res_619604).concat(makeNimstrLit("<class \'")); } else { fmt_res_619604 = makeNimstrLit("<class \'"); };
		F.line = 260;
		if (fmt_res_619604 != null) { fmt_res_619604 = (fmt_res_619604).concat(self_619601.name); } else { fmt_res_619604 = self_619601.name.slice(); };
		F.line = 34;
		if (fmt_res_619604 != null) { fmt_res_619604 = (fmt_res_619604).concat(makeNimstrLit("\'>")); } else { fmt_res_619604 = makeNimstrLit("\'>"); };
		result_619419 = new_py_string_176075(fmt_res_619604);
	framePtr = F.prev;

	return result_619419;

}

function raw_get_620579(t_620584, key_620586, hc_620588, hc_620588_Idx) {
						var Tmp3;

	var result_620589 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_620588[hc_620588_Idx] = hash_143900(key_620586);
		if ((hc_620588[hc_620588_Idx] == 0)) {
		F.line = 45;
		hc_620588[hc_620588_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_620601 = (hc_620588[hc_620588_Idx] & (t_620584.data != null ? (t_620584.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_620584.data[chckIndx(h_620601, 0, t_620584.data.length+0-1)-0].Field0)) break L2;
						if (!(t_620584.data[chckIndx(h_620601, 0, t_620584.data.length+0-1)-0].Field0 == hc_620588[hc_620588_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_620584.data[chckIndx(h_620601, 0, t_620584.data.length+0-1)-0].Field1, key_620586);						}					if (Tmp3) {
					F.line = 38;
					result_620589 = h_620601;
					break BeforeRet;
					}
					
					F.line = 39;
					h_620601 = next_try_146614(h_620601, (t_620584.data != null ? (t_620584.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_620589 = subInt(-1, h_620601);
	} while (false);
	framePtr = F.prev;

	return result_620589;

}

function raw_insert_622823(t_622830, data_622834, data_622834_Idx, key_622836, val_622838, hc_622840, h_622842) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_622834[data_622834_Idx][chckIndx(h_622842, 0, data_622834[data_622834_Idx].length+0-1)-0].Field1 = nimCopy(null, key_622836, NTI138);
		F.line = 65;
		nimCopy(data_622834[data_622834_Idx][chckIndx(h_622842, 0, data_622834[data_622834_Idx].length+0-1)-0].Field2, val_622838, NTI157318);
		F.line = 66;
		data_622834[data_622834_Idx][chckIndx(h_622842, 0, data_622834[data_622834_Idx].length+0-1)-0].Field0 = hc_622840;
	framePtr = F.prev;

	
}

function enlarge_621693(t_621700) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_621708 = null;
		F.line = 314;
		n_621708 = new Array(chckRange(mulInt((t_621700.data != null ? t_621700.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_621700.data != null ? t_621700.data.length : 0), 2), 0, 2147483647);++i) {n_621708[i]={Field0: 0, Field1: null, Field2: {Field0: null, Field1: null}};}		F.line = 315;
		var Tmp1 = t_621700.data; t_621700.data = n_621708; n_621708 = Tmp1;		L2: do {
			F.line = 316;
			var i_621921 = 0;
			F.line = 2088;
			var colontmp__623510 = 0;
			F.line = 316;
			colontmp__623510 = (n_621708 != null ? (n_621708.length-1) : -1);
			F.line = 2094;
			var res_623513 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_623513 <= colontmp__623510)) break L4;
						F.line = 2096;
						i_621921 = res_623513;
						F.line = 317;
						var eh_622139 = n_621708[chckIndx(i_621921, 0, n_621708.length+0-1)-0].Field0;
						if (is_filled_146491(eh_622139)) {
						F.line = 319;
						var j_622148 = (eh_622139 & (t_621700.data != null ? (t_621700.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_621700.data[chckIndx(j_622148, 0, t_621700.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_622148 = next_try_146614(j_622148, (t_621700.data != null ? (t_621700.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_622823(t_621700, t_621700, "data", n_621708[chckIndx(i_621921, 0, n_621708.length+0-1)-0].Field1, n_621708[chckIndx(i_621921, 0, n_621708.length+0-1)-0].Field2, eh_622139, j_622148);
						}
						
						F.line = 2097;
						res_623513 = addInt(res_623513, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_623531(t_623536, key_623538, hc_623540) {
	var result_623541 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_623550 = (hc_623540 & (t_623536.data != null ? (t_623536.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_623536.data[chckIndx(h_623550, 0, t_623536.data.length+0-1)-0].Field0)) break L2;
					if (((t_623536.data[chckIndx(h_623550, 0, t_623536.data.length+0-1)-0].Field0 == hc_623540) && eqStrings(t_623536.data[chckIndx(h_623550, 0, t_623536.data.length+0-1)-0].Field1, key_623538))) {
					F.line = 38;
					result_623541 = h_623550;
					break BeforeRet;
					}
					
					F.line = 39;
					h_623550 = next_try_146614(h_623550, (t_623536.data != null ? (t_623536.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_623541 = subInt(-1, h_623550);
	} while (false);
	framePtr = F.prev;

	return result_623541;

}

function HEX5BHEX5DHEX3D_620565(t_620572, key_620574, val_620576) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_620577 = [0];
		F.line = 98;
		var index_621279 = raw_get_620579(t_620572, key_620574, hc_620577, 0);
		if ((0 <= index_621279)) {
		F.line = 99;
		nimCopy(t_620572.data[chckIndx(index_621279, 0, t_620572.data.length+0-1)-0].Field2, val_620576, NTI157318);
		}
		else {
			if (must_rehash_146509((t_620572.data != null ? t_620572.data.length : 0), t_620572.counter)) {
			F.line = 90;
			enlarge_621693(t_620572);
			F.line = 91;
			index_621279 = raw_get_known_hc_623531(t_620572, key_620574, hc_620577[0]);
			}
			
			F.line = 92;
			index_621279 = subInt(-1, index_621279);
			F.line = 93;
			raw_insert_622823(t_620572, t_620572, "data", key_620574, val_620576, hc_620577[0], index_621279);
			F.line = 100;
			t_620572.counter = addInt(t_620572.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function new_py_dict_proxy_618829(mapping_618831) {
	var result_618832 = null;

	var F={procname:"dictproxyobject.newPyDictProxy",prev:framePtr,filename:"../Objects/dictproxyobject.nim",line:0};
	framePtr = F;
		F.line = 27;
		F.line = 27;
		var d_618833 = new_py_dict_proxy_simple_614201();
		F.line = 28;
		d_618833.dict = mapping_618831;
		result_618832 = d_618833;
	framePtr = F.prev;

	return result_618832;

}

function dict_py_type_object_getter_619815(self_no_cast_619817) {
	var result_619818 = null;

	var F={procname:"typeobject.dictPyTypeObjectGetter",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 450;
		if (!(isObj(self_no_cast_619817.m_type, NTI157280))) {
		F.line = 450;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(450, 32) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 450;
		var self_620001 = self_no_cast_619817;
		result_619818 = new_py_dict_proxy_618829(self_620001.dict);
	framePtr = F.prev;

	return result_619818;

}

function dict_py_type_object_setter_620016(self_no_cast_620018, other_620019) {
	var result_620020 = null;

	var F={procname:"typeobject.dictPyTypeObjectSetter",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 456;
		if (!(isObj(self_no_cast_620018.m_type, NTI157280))) {
		F.line = 456;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(456, 32) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 456;
		var self_620201 = self_no_cast_620018;
		F.line = 104;
		var excp_620402 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_620402.tk = 3;
		F.line = 106;
		excp_620402.thrown = true;
		F.line = 107;
		F.line = 40;
		var fmt_res_620205 = mnewString(0);
		F.line = 40;
		if (fmt_res_620205 != null) { fmt_res_620205 = (fmt_res_620205).concat(makeNimstrLit("can\'t set attributes of built-in/extension type ")); } else { fmt_res_620205 = makeNimstrLit("can\'t set attributes of built-in/extension type "); };
		F.line = 260;
		if (fmt_res_620205 != null) { fmt_res_620205 = (fmt_res_620205).concat(self_620201.name); } else { fmt_res_620205 = self_620201.name.slice(); };
		excp_620402.msg = new_py_string_176075(fmt_res_620205);
		result_620020 = excp_620402;
	framePtr = F.prev;

	return result_620020;

}
var magic_name_strs_619041 = [null];
L18: do {
	var name_619102 = [null];
	var i_624290 = 0;
	if ((i_624290 <= 37)) {
	L19: do {
			L20: while (true) {
			if (!true) break L20;
				name_619102[0] = magic_names_157558[i_624290];
				if (magic_name_strs_619041[0] != null) { magic_name_strs_619041[0].push(new_py_str_176092(name_619102[0])); } else { magic_name_strs_619041[0] = [new_py_str_176092(name_619102[0])]; };
				if ((37 <= i_624290)) {
				break L19;
				}
				
				i_624290 += 1;
			}
	} while(false);
	}
	
} while(false);
var py_type_object_type_619361 = new_py_type_159261(makeNimstrLit("type"));
py_type_object_type_619361.kind = 7;
py_type_object_type_619361.magicMethods.Field25 = repr_py_type_object_magic_619363;
py_type_object_type_619361.magicMethods.Field24 = str_py_type_object_magic_619416;
HEX5BHEX5DHEX3D_620565(py_type_object_type_619361.getsetDescr, makeNimstrLit("__dict__"), {Field0: dict_py_type_object_getter_619815, Field1: dict_py_type_object_setter_620016});

function default_le_624321(o1_624323, o2_624324) {
	var result_624325 = null;

	var F={procname:"typeobject.defaultLe",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 49;
		F.line = 49;
		F.line = 56;
		if ((o1_624323.pyType === null)) {
		F.line = 2895;
		var e_624352 = null;
		F.line = 2896;
		e_624352 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_624352.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_624352.parent = null;
		F.line = 26;
		raiseException(e_624352, "InternalError");
		}
		
		F.line = 27;
		var fun_624402 = o1_624323.pyType.magicMethods.Field16;
		if ((fun_624402 === null)) {
		F.line = 29;
		var obj_type_str_624411 = o1_624323.pyType.name;
		F.line = 30;
		var method_str_624413 = makeNimstrLit("lt");
		F.line = 31;
		var msg_624415 = (makeNimstrLit("No ")).concat(method_str_624413,makeNimstrLit(" method for "),obj_type_str_624411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_624417 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_624417.tk = 3;
		F.line = 106;
		excp_624417.thrown = true;
		F.line = 107;
		excp_624417.msg = new_py_string_176075(msg_624415);
		var excp_624420 = excp_624417;
		F.line = 36;
		result_624325 = excp_624420;
		break BeforeRet;
		}
		
		var fun_624602 = fun_624402;
		F.line = 57;
		var res_624604 = fun_624602(o1_624323, o2_624324);
		var lt_624801 = res_624604;
		F.line = 50;
		F.line = 56;
		if ((o1_624323.pyType === null)) {
		F.line = 2895;
		var e_624828 = null;
		F.line = 2896;
		e_624828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_624828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_624828.parent = null;
		F.line = 26;
		raiseException(e_624828, "InternalError");
		}
		
		F.line = 27;
		var fun_625002 = o1_624323.pyType.magicMethods.Field18;
		if ((fun_625002 === null)) {
		F.line = 29;
		var obj_type_str_625011 = o1_624323.pyType.name;
		F.line = 30;
		var method_str_625013 = makeNimstrLit("eq");
		F.line = 31;
		var msg_625015 = (makeNimstrLit("No ")).concat(method_str_625013,makeNimstrLit(" method for "),obj_type_str_625011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_625017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_625017.tk = 3;
		F.line = 106;
		excp_625017.thrown = true;
		F.line = 107;
		excp_625017.msg = new_py_string_176075(msg_625015);
		var excp_625020 = excp_625017;
		F.line = 36;
		result_624325 = excp_625020;
		break BeforeRet;
		}
		
		var fun_625202 = fun_625002;
		F.line = 57;
		var res_625204 = fun_625202(o1_624323, o2_624324);
		var eq_625401 = res_625204;
		F.line = 56;
		if ((lt_624801.pyType === null)) {
		F.line = 2895;
		var e_625428 = null;
		F.line = 2896;
		e_625428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_625428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_625428.parent = null;
		F.line = 26;
		raiseException(e_625428, "InternalError");
		}
		
		F.line = 27;
		var fun_625602 = lt_624801.pyType.magicMethods.Field15;
		if ((fun_625602 === null)) {
		F.line = 29;
		var obj_type_str_625611 = lt_624801.pyType.name;
		F.line = 30;
		var method_str_625613 = makeNimstrLit("Or");
		F.line = 31;
		var msg_625615 = (makeNimstrLit("No ")).concat(method_str_625613,makeNimstrLit(" method for "),obj_type_str_625611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_625617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_625617.tk = 3;
		F.line = 106;
		excp_625617.thrown = true;
		F.line = 107;
		excp_625617.msg = new_py_string_176075(msg_625615);
		var excp_625620 = excp_625617;
		F.line = 36;
		result_624325 = excp_625620;
		break BeforeRet;
		}
		
		var fun_625802 = fun_625602;
		F.line = 57;
		var res_625804 = fun_625802(lt_624801, eq_625401);
		result_624325 = res_625804;
	} while (false);
	framePtr = F.prev;

	return result_624325;

}

function default_ne_626014(o1_626016, o2_626017) {
	var result_626018 = null;

	var F={procname:"typeobject.defaultNe",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 54;
		F.line = 54;
		F.line = 56;
		if ((o1_626016.pyType === null)) {
		F.line = 2895;
		var e_626045 = null;
		F.line = 2896;
		e_626045 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_626045.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_626045.parent = null;
		F.line = 26;
		raiseException(e_626045, "InternalError");
		}
		
		F.line = 27;
		var fun_626202 = o1_626016.pyType.magicMethods.Field18;
		if ((fun_626202 === null)) {
		F.line = 29;
		var obj_type_str_626211 = o1_626016.pyType.name;
		F.line = 30;
		var method_str_626213 = makeNimstrLit("eq");
		F.line = 31;
		var msg_626215 = (makeNimstrLit("No ")).concat(method_str_626213,makeNimstrLit(" method for "),obj_type_str_626211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_626217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_626217.tk = 3;
		F.line = 106;
		excp_626217.thrown = true;
		F.line = 107;
		excp_626217.msg = new_py_string_176075(msg_626215);
		var excp_626220 = excp_626217;
		F.line = 36;
		result_626018 = excp_626220;
		break BeforeRet;
		}
		
		var fun_626402 = fun_626202;
		F.line = 57;
		var res_626404 = fun_626402(o1_626016, o2_626017);
		var eq_626601 = res_626404;
		F.line = 45;
		if ((eq_626601.pyType === null)) {
		F.line = 2895;
		var e_626628 = null;
		F.line = 2896;
		e_626628 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_626628.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_626628.parent = null;
		F.line = 26;
		raiseException(e_626628, "InternalError");
		}
		
		F.line = 27;
		var fun_626802 = eq_626601.pyType.magicMethods.Field7;
		if ((fun_626802 === null)) {
		F.line = 29;
		var obj_type_str_626811 = eq_626601.pyType.name;
		F.line = 30;
		var method_str_626813 = makeNimstrLit("Not");
		F.line = 31;
		var msg_626815 = (makeNimstrLit("No ")).concat(method_str_626813,makeNimstrLit(" method for "),obj_type_str_626811,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_626817 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_626817.tk = 3;
		F.line = 106;
		excp_626817.thrown = true;
		F.line = 107;
		excp_626817.msg = new_py_string_176075(msg_626815);
		var excp_626820 = excp_626817;
		F.line = 36;
		result_626018 = excp_626820;
		break BeforeRet;
		}
		
		var fun_627002 = fun_626802;
		F.line = 46;
		var res_627004 = fun_627002(eq_626601);
		result_626018 = res_627004;
	} while (false);
	framePtr = F.prev;

	return result_626018;

}

function default_ge_627214(o1_627216, o2_627217) {
	var result_627218 = null;

	var F={procname:"typeobject.defaultGe",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 58;
		F.line = 58;
		F.line = 56;
		if ((o1_627216.pyType === null)) {
		F.line = 2895;
		var e_627245 = null;
		F.line = 2896;
		e_627245 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_627245.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_627245.parent = null;
		F.line = 26;
		raiseException(e_627245, "InternalError");
		}
		
		F.line = 27;
		var fun_627402 = o1_627216.pyType.magicMethods.Field20;
		if ((fun_627402 === null)) {
		F.line = 29;
		var obj_type_str_627411 = o1_627216.pyType.name;
		F.line = 30;
		var method_str_627413 = makeNimstrLit("gt");
		F.line = 31;
		var msg_627415 = (makeNimstrLit("No ")).concat(method_str_627413,makeNimstrLit(" method for "),obj_type_str_627411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_627417 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_627417.tk = 3;
		F.line = 106;
		excp_627417.thrown = true;
		F.line = 107;
		excp_627417.msg = new_py_string_176075(msg_627415);
		var excp_627420 = excp_627417;
		F.line = 36;
		result_627218 = excp_627420;
		break BeforeRet;
		}
		
		var fun_627602 = fun_627402;
		F.line = 57;
		var res_627604 = fun_627602(o1_627216, o2_627217);
		var gt_627801 = res_627604;
		F.line = 59;
		F.line = 56;
		if ((o1_627216.pyType === null)) {
		F.line = 2895;
		var e_627828 = null;
		F.line = 2896;
		e_627828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_627828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_627828.parent = null;
		F.line = 26;
		raiseException(e_627828, "InternalError");
		}
		
		F.line = 27;
		var fun_628002 = o1_627216.pyType.magicMethods.Field18;
		if ((fun_628002 === null)) {
		F.line = 29;
		var obj_type_str_628011 = o1_627216.pyType.name;
		F.line = 30;
		var method_str_628013 = makeNimstrLit("eq");
		F.line = 31;
		var msg_628015 = (makeNimstrLit("No ")).concat(method_str_628013,makeNimstrLit(" method for "),obj_type_str_628011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_628017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_628017.tk = 3;
		F.line = 106;
		excp_628017.thrown = true;
		F.line = 107;
		excp_628017.msg = new_py_string_176075(msg_628015);
		var excp_628020 = excp_628017;
		F.line = 36;
		result_627218 = excp_628020;
		break BeforeRet;
		}
		
		var fun_628202 = fun_628002;
		F.line = 57;
		var res_628204 = fun_628202(o1_627216, o2_627217);
		var eq_628401 = res_628204;
		F.line = 56;
		if ((gt_627801.pyType === null)) {
		F.line = 2895;
		var e_628428 = null;
		F.line = 2896;
		e_628428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_628428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_628428.parent = null;
		F.line = 26;
		raiseException(e_628428, "InternalError");
		}
		
		F.line = 27;
		var fun_628602 = gt_627801.pyType.magicMethods.Field15;
		if ((fun_628602 === null)) {
		F.line = 29;
		var obj_type_str_628611 = gt_627801.pyType.name;
		F.line = 30;
		var method_str_628613 = makeNimstrLit("Or");
		F.line = 31;
		var msg_628615 = (makeNimstrLit("No ")).concat(method_str_628613,makeNimstrLit(" method for "),obj_type_str_628611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_628617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_628617.tk = 3;
		F.line = 106;
		excp_628617.thrown = true;
		F.line = 107;
		excp_628617.msg = new_py_string_176075(msg_628615);
		var excp_628620 = excp_628617;
		F.line = 36;
		result_627218 = excp_628620;
		break BeforeRet;
		}
		
		var fun_628802 = fun_628602;
		F.line = 57;
		var res_628804 = fun_628802(gt_627801, eq_628401);
		result_627218 = res_628804;
	} while (false);
	framePtr = F.prev;

	return result_627218;

}

function get_type_dict_624304(obj_624306) {
	var result_624307 = null;

	var F={procname:"typeobject.getTypeDict",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		F.line = 45;
		result_624307 = obj_624306.pyType.dict;
	framePtr = F.prev;

	return result_624307;

}

function has_dict_159278(obj_159280) {
	var result_159281 = false;

	var F={procname:"pyobjectBase.hasDict",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 204;
		result_159281 = isObj(obj_159280.m_type, NTI157277);
	framePtr = F.prev;

	return result_159281;

}

function get_dict_159307(obj_159309) {
	var result_159310 = null;

	var F={procname:"pyobjectBase.getDict",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 207;
		if (!(has_dict_159278(obj_159309))) {
		F.line = 2895;
		var e_159316 = null;
		F.line = 2896;
		e_159316 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 208;
		e_159316.message = nimCopy(null, makeNimstrLit("obj has no dict. Use hasDict before getDict"), NTI138);
		F.line = 2891;
		e_159316.parent = null;
		F.line = 208;
		raiseException(e_159316, "InternalError");
		}
		
		result_159310 = obj_159309.dict;
	framePtr = F.prev;

	return result_159310;

}

function get_attr_629414(self_629416, name_obj_629417) {
	var result_629418 = null;

	var F={procname:"typeobject.getAttr",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(of_py_str_object_175092(name_obj_629417))) {
		F.line = 68;
		var type_str_629419 = nimCopy(null, name_obj_629417.pyType.name, NTI138);
		F.line = 69;
		F.line = 69;
		var fmt_res_629422 = mnewString(0);
		F.line = 69;
		if (fmt_res_629422 != null) { fmt_res_629422 = (fmt_res_629422).concat(makeNimstrLit("attribute name must be string, not ")); } else { fmt_res_629422 = makeNimstrLit("attribute name must be string, not "); };
		F.line = 260;
		if (fmt_res_629422 != null) { fmt_res_629422 = (fmt_res_629422).concat(type_str_629419); } else { fmt_res_629422 = type_str_629419.slice(); };
		var msg_629601 = nimCopy(null, fmt_res_629422, NTI138);
		F.line = 70;
		F.line = 104;
		var excp_629603 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_629603.tk = 3;
		F.line = 106;
		excp_629603.thrown = true;
		F.line = 107;
		excp_629603.msg = new_py_string_176075(msg_629601);
		result_629418 = excp_629603;
		break BeforeRet;
		}
		
		F.line = 71;
		var name_629605 = name_obj_629417;
		F.line = 72;
		var type_dict_629606 = get_type_dict_624304(self_629416);
		if ((type_dict_629606 === null)) {
		F.line = 2895;
		var e_629619 = null;
		F.line = 2896;
		e_629619 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 74;
		e_629619.message = nimCopy(null, makeNimstrLit("for type object dict must not be nil"), NTI138);
		F.line = 2891;
		e_629619.parent = null;
		F.line = 74;
		raiseException(e_629619, "InternalError");
		}
		
		F.line = 75;
		var descr_629801 = null;
		if (has_key_527437(type_dict_629606, name_629605)) {
		F.line = 77;
		descr_629801 = HEX5BHEX5D_528323(type_dict_629606, name_629605);
		F.line = 78;
		var descr_get_629802 = descr_629801.pyType.magicMethods.Field34;
		if (!((descr_get_629802 === null))) {
		F.line = 80;
		result_629418 = descr_get_629802(descr_629801, self_629416);
		break BeforeRet;
		}
		
		}
		
		if (has_dict_159278(self_629416)) {
		F.line = 83;
		var inst_dict_629809 = get_dict_159307(self_629416);
		if (has_key_527437(inst_dict_629809, name_629605)) {
		F.line = 85;
		result_629418 = HEX5BHEX5D_528323(inst_dict_629809, name_629605);
		break BeforeRet;
		}
		
		}
		
		if (!((descr_629801 === null))) {
		F.line = 88;
		result_629418 = descr_629801;
		break BeforeRet;
		}
		
		F.line = 90;
		F.line = 123;
		var msg_629821 = (self_629416.pyType.name).concat(makeNimstrLit(" has no attribute "),HEX24_157579(name_629605));
		F.line = 104;
		var excp_629823 = new_py_attribute_error_simple_361601();
		F.line = 105;
		excp_629823.tk = 4;
		F.line = 106;
		excp_629823.thrown = true;
		F.line = 107;
		excp_629823.msg = new_py_string_176075(msg_629821);
		result_629418 = excp_629823;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_629418;

}

function set_attr_629838(self_629840, name_obj_629841, value_629842) {
	var result_629843 = null;

	var F={procname:"typeobject.setAttr",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(of_py_str_object_175092(name_obj_629841))) {
		F.line = 95;
		var type_str_629844 = nimCopy(null, name_obj_629841.pyType.name, NTI138);
		F.line = 96;
		F.line = 96;
		var fmt_res_629847 = mnewString(0);
		F.line = 96;
		if (fmt_res_629847 != null) { fmt_res_629847 = (fmt_res_629847).concat(makeNimstrLit("attribute name must be string, not ")); } else { fmt_res_629847 = makeNimstrLit("attribute name must be string, not "); };
		F.line = 260;
		if (fmt_res_629847 != null) { fmt_res_629847 = (fmt_res_629847).concat(type_str_629844); } else { fmt_res_629847 = type_str_629844.slice(); };
		var msg_630001 = nimCopy(null, fmt_res_629847, NTI138);
		F.line = 97;
		F.line = 104;
		var excp_630003 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_630003.tk = 3;
		F.line = 106;
		excp_630003.thrown = true;
		F.line = 107;
		excp_630003.msg = new_py_string_176075(msg_630001);
		result_629843 = excp_630003;
		break BeforeRet;
		}
		
		F.line = 98;
		var name_630005 = name_obj_629841;
		F.line = 99;
		var type_dict_630006 = get_type_dict_624304(self_629840);
		if ((type_dict_630006 === null)) {
		F.line = 2895;
		var e_630019 = null;
		F.line = 2896;
		e_630019 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 101;
		e_630019.message = nimCopy(null, makeNimstrLit("for type object dict must not be nil"), NTI138);
		F.line = 2891;
		e_630019.parent = null;
		F.line = 101;
		raiseException(e_630019, "InternalError");
		}
		
		F.line = 102;
		var descr_630201 = null;
		if (has_key_527437(type_dict_630006, name_630005)) {
		F.line = 104;
		descr_630201 = HEX5BHEX5D_528323(type_dict_630006, name_630005);
		F.line = 105;
		var descr_set_630202 = descr_630201.pyType.magicMethods.Field35;
		if (!((descr_set_630202 === null))) {
		F.line = 107;
		result_629843 = descr_set_630202(descr_630201, self_629840, value_629842);
		break BeforeRet;
		}
		
		}
		
		if (has_dict_159278(self_629840)) {
		F.line = 110;
		var inst_dict_630209 = get_dict_159307(self_629840);
		F.line = 111;
		HEX5BHEX5DHEX3D_528842(inst_dict_630209, name_630005, value_629842);
		F.line = 112;
		result_629843 = py_none_356044;
		break BeforeRet;
		}
		
		F.line = 114;
		F.line = 123;
		var msg_630214 = (self_629840.pyType.name).concat(makeNimstrLit(" has no attribute "),HEX24_157579(name_630005));
		F.line = 104;
		var excp_630216 = new_py_attribute_error_simple_361601();
		F.line = 105;
		excp_630216.tk = 4;
		F.line = 106;
		excp_630216.thrown = true;
		F.line = 107;
		excp_630216.msg = new_py_string_176075(msg_630214);
		result_629843 = excp_630216;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_629843;

}

function repr_default_629014(self_629016) {
	var result_629017 = null;

	var F={procname:"typeobject.reprDefault",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		F.line = 63;
		F.line = 63;
		var fmt_res_629020 = mnewString(0);
		F.line = 63;
		if (fmt_res_629020 != null) { fmt_res_629020 = (fmt_res_629020).concat(makeNimstrLit("<")); } else { fmt_res_629020 = makeNimstrLit("<"); };
		F.line = 260;
		if (fmt_res_629020 != null) { fmt_res_629020 = (fmt_res_629020).concat(self_629016.pyType.name); } else { fmt_res_629020 = self_629016.pyType.name.slice(); };
		F.line = 63;
		if (fmt_res_629020 != null) { fmt_res_629020 = (fmt_res_629020).concat(makeNimstrLit(" at ")); } else { fmt_res_629020 = makeNimstrLit(" at "); };
		F.line = 260;
		if (fmt_res_629020 != null) { fmt_res_629020 = (fmt_res_629020).concat(id_str_158001(self_629016)); } else { fmt_res_629020 = id_str_158001(self_629016).slice(); };
		F.line = 63;
		if (fmt_res_629020 != null) { fmt_res_629020 = (fmt_res_629020).concat(makeNimstrLit(">")); } else { fmt_res_629020 = makeNimstrLit(">"); };
		result_629017 = new_py_string_176075(fmt_res_629020);
	framePtr = F.prev;

	return result_629017;

}

function add_generic_630231(t_630233) {
			var Tmp1;
			var Tmp2;

	var F={procname:"typeobject.addGeneric",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
			if (!!((t_630233.magicMethods.Field16 === null))) Tmp1 = false; else {				Tmp1 = !((t_630233.magicMethods.Field18 === null));			}		if (Tmp1) {
		if ((t_630233.magicMethods.Field17 === null)) {
		F.line = 126;
		t_630233.magicMethods.Field17 = default_le_624321;
		}
		
		}
		
		if (!((t_630233.magicMethods.Field18 === null))) {
		if ((t_630233.magicMethods.Field19 === null)) {
		F.line = 128;
		t_630233.magicMethods.Field19 = default_ne_626014;
		}
		
		}
		
			if (!!((t_630233.magicMethods.Field21 === null))) Tmp2 = false; else {				Tmp2 = !((t_630233.magicMethods.Field18 === null));			}		if (Tmp2) {
		if ((t_630233.magicMethods.Field21 === null)) {
		F.line = 130;
		t_630233.magicMethods.Field21 = default_ge_627214;
		}
		
		}
		
		if ((t_630233.magicMethods.Field28 === null)) {
		F.line = 131;
		t_630233.magicMethods.Field28 = get_attr_629414;
		}
		
		if ((t_630233.magicMethods.Field29 === null)) {
		F.line = 132;
		t_630233.magicMethods.Field29 = set_attr_629838;
		}
		
		if ((t_630233.magicMethods.Field25 === null)) {
		F.line = 133;
		t_630233.magicMethods.Field25 = repr_default_629014;
		}
		
		if ((t_630233.magicMethods.Field24 === null)) {
		F.line = 134;
		t_630233.magicMethods.Field24 = t_630233.magicMethods.Field25;
		}
		
	framePtr = F.prev;

	
}

function new_py_static_method_549429(callable_549431) {
	var result_549432 = null;

	var F={procname:"funcobject.newPyStaticMethod",prev:framePtr,filename:"../Objects/funcobject.nim",line:0};
	framePtr = F;
		F.line = 56;
		result_549432 = new_py_static_method_simple_547801();
		F.line = 57;
		result_549432.callable = callable_549431;
	framePtr = F.prev;

	return result_549432;

}

function new_py_method_descr_608221(t_608216, meth_608218, name_608220) {
	var result_608223 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_608223 = new_py_method_descr_simple_607201();
		F.line = 27;
		result_608223.dType = t_608216;
		F.line = 28;
		result_608223.kind = 2;
		if (!(!((result_608223.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_608223.meth = meth_608218;
		F.line = 31;
		result_608223.name = name_608220;
	framePtr = F.prev;

	return result_608223;

}

function new_py_method_descr_608078(t_608073, meth_608075, name_608077) {
	var result_608080 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_608080 = new_py_method_descr_simple_607201();
		F.line = 27;
		result_608080.dType = t_608073;
		F.line = 28;
		result_608080.kind = 1;
		if (!(!((result_608080.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_608080.meth = meth_608075;
		F.line = 31;
		result_608080.name = name_608077;
	framePtr = F.prev;

	return result_608080;

}

function new_py_method_descr_608828(t_608830, meth_608831, name_608832) {
	var result_608833 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_608839 = null;
		F.line = 2896;
		e_608839 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 43;
		e_608839.message = nimCopy(null, makeNimstrLit("bltin function shouldn\'t be method. This is a placeholder to fool the compiler"), NTI138);
		F.line = 2891;
		e_608839.parent = null;
		F.line = 43;
		raiseException(e_608839, "InternalError");
	framePtr = F.prev;

	return result_608833;

}

function new_py_method_descr_608621(t_608616, meth_608618, name_608620) {
	var result_608623 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_608623 = new_py_method_descr_simple_607201();
		F.line = 27;
		result_608623.dType = t_608616;
		F.line = 28;
		result_608623.kind = 4;
		if (!(!((result_608623.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_608623.meth = meth_608618;
		F.line = 31;
		result_608623.name = name_608620;
	framePtr = F.prev;

	return result_608623;

}

function new_py_method_descr_608421(t_608416, meth_608418, name_608420) {
	var result_608423 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_608423 = new_py_method_descr_simple_607201();
		F.line = 27;
		result_608423.dType = t_608416;
		F.line = 28;
		result_608423.kind = 3;
		if (!(!((result_608423.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_608423.meth = meth_608418;
		F.line = 31;
		result_608423.name = name_608420;
	framePtr = F.prev;

	return result_608423;

}

function new_py_get_set_descr_611229(getter_611231, setter_611232) {
	var result_611233 = null;

	var F={procname:"descrobject.newPyGetSetDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 79;
		F.line = 79;
		var descr_611234 = new_py_get_set_descr_simple_610001();
		F.line = 80;
		descr_611234.getter = getter_611231;
		F.line = 81;
		descr_611234.setter = setter_611232;
		result_611233 = descr_611234;
	framePtr = F.prev;

	return result_611233;

}

function init_type_dict_630342(tp_630344) {
	var F={procname:"typeobject.initTypeDict",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		if (!((tp_630344.dict === null))) {
		F.line = 139;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/typeobject.nim(139, 10) `isNil(tp.dict)` "));
		}
		
		F.line = 140;
		var d_630401 = new_py_dict_527257();
		F.line = 143;
		var i_630404 = -1;
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field0"] === null))) {
		F.line = 147;
		var name_py_str_630426 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630426, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field0"], name_py_str_630426, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630426, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field0"], name_py_str_630426));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field1"] === null))) {
		F.line = 147;
		var name_py_str_630444 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630444, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field1"], name_py_str_630444, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630444, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field1"], name_py_str_630444));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field2"] === null))) {
		F.line = 147;
		var name_py_str_630462 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630462, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field2"], name_py_str_630462, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630462, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field2"], name_py_str_630462));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field3"] === null))) {
		F.line = 147;
		var name_py_str_630480 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630480, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field3"], name_py_str_630480, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630480, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field3"], name_py_str_630480));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field4"] === null))) {
		F.line = 147;
		var name_py_str_630498 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630498, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field4"], name_py_str_630498, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630498, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field4"], name_py_str_630498));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field5"] === null))) {
		F.line = 147;
		var name_py_str_630516 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630516, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field5"], name_py_str_630516, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630516, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field5"], name_py_str_630516));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field6"] === null))) {
		F.line = 147;
		var name_py_str_630534 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630534, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field6"], name_py_str_630534, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630534, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field6"], name_py_str_630534));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field7"] === null))) {
		F.line = 147;
		var name_py_str_630552 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630552, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field7"], name_py_str_630552, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630552, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field7"], name_py_str_630552));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field8"] === null))) {
		F.line = 147;
		var name_py_str_630570 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630570, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field8"], name_py_str_630570, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630570, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field8"], name_py_str_630570));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field9"] === null))) {
		F.line = 147;
		var name_py_str_630588 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630588, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field9"], name_py_str_630588, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630588, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field9"], name_py_str_630588));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field10"] === null))) {
		F.line = 147;
		var name_py_str_630606 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630606, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field10"], name_py_str_630606, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630606, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field10"], name_py_str_630606));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field11"] === null))) {
		F.line = 147;
		var name_py_str_630624 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630624, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field11"], name_py_str_630624, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630624, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field11"], name_py_str_630624));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field12"] === null))) {
		F.line = 147;
		var name_py_str_630642 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630642, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field12"], name_py_str_630642, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630642, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field12"], name_py_str_630642));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field13"] === null))) {
		F.line = 147;
		var name_py_str_630660 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630660, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field13"], name_py_str_630660, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630660, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field13"], name_py_str_630660));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field14"] === null))) {
		F.line = 147;
		var name_py_str_630678 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630678, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field14"], name_py_str_630678, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630678, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field14"], name_py_str_630678));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field15"] === null))) {
		F.line = 147;
		var name_py_str_630696 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630696, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field15"], name_py_str_630696, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630696, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field15"], name_py_str_630696));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field16"] === null))) {
		F.line = 147;
		var name_py_str_630714 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630714, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field16"], name_py_str_630714, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630714, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field16"], name_py_str_630714));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field17"] === null))) {
		F.line = 147;
		var name_py_str_630732 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630732, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field17"], name_py_str_630732, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630732, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field17"], name_py_str_630732));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field18"] === null))) {
		F.line = 147;
		var name_py_str_630750 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630750, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field18"], name_py_str_630750, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630750, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field18"], name_py_str_630750));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field19"] === null))) {
		F.line = 147;
		var name_py_str_630768 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630768, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field19"], name_py_str_630768, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630768, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field19"], name_py_str_630768));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field20"] === null))) {
		F.line = 147;
		var name_py_str_630786 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630786, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field20"], name_py_str_630786, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630786, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field20"], name_py_str_630786));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field21"] === null))) {
		F.line = 147;
		var name_py_str_630804 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630804, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field21"], name_py_str_630804, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630804, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field21"], name_py_str_630804));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field22"] === null))) {
		F.line = 147;
		var name_py_str_630822 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630822, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field22"], name_py_str_630822, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630822, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field22"], name_py_str_630822));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field23"] === null))) {
		F.line = 147;
		var name_py_str_630840 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630840, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field23"], name_py_str_630840, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630840, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field23"], name_py_str_630840));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field24"] === null))) {
		F.line = 147;
		var name_py_str_630858 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630858, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field24"], name_py_str_630858, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630858, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field24"], name_py_str_630858));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field25"] === null))) {
		F.line = 147;
		var name_py_str_630876 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630876, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field25"], name_py_str_630876, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630876, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field25"], name_py_str_630876));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field26"] === null))) {
		F.line = 147;
		var name_py_str_630894 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (true) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630894, new_py_static_method_549429(new_py_nim_func_554444(tp_630344.magicMethods["Field26"], name_py_str_630894)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630894, new_py_method_descr_608828(tp_630344, tp_630344.magicMethods["Field26"], name_py_str_630894));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field27"] === null))) {
		F.line = 147;
		var name_py_str_630912 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630912, new_py_static_method_549429(new_py_nim_func_555022(tp_630344.magicMethods["Field27"], name_py_str_630912, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630912, new_py_method_descr_608621(tp_630344, tp_630344.magicMethods["Field27"], name_py_str_630912));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field28"] === null))) {
		F.line = 147;
		var name_py_str_630930 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630930, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field28"], name_py_str_630930, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630930, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field28"], name_py_str_630930));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field29"] === null))) {
		F.line = 147;
		var name_py_str_630948 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630948, new_py_static_method_549429(new_py_nim_func_554822(tp_630344.magicMethods["Field29"], name_py_str_630948, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630948, new_py_method_descr_608421(tp_630344, tp_630344.magicMethods["Field29"], name_py_str_630948));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field30"] === null))) {
		F.line = 147;
		var name_py_str_630966 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630966, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field30"], name_py_str_630966, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630966, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field30"], name_py_str_630966));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field31"] === null))) {
		F.line = 147;
		var name_py_str_630984 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630984, new_py_static_method_549429(new_py_nim_func_555022(tp_630344.magicMethods["Field31"], name_py_str_630984, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_630984, new_py_method_descr_608621(tp_630344, tp_630344.magicMethods["Field31"], name_py_str_630984));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field32"] === null))) {
		F.line = 147;
		var name_py_str_631002 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631002, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field32"], name_py_str_631002, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631002, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field32"], name_py_str_631002));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field33"] === null))) {
		F.line = 147;
		var name_py_str_631020 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631020, new_py_static_method_549429(new_py_nim_func_554822(tp_630344.magicMethods["Field33"], name_py_str_631020, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631020, new_py_method_descr_608421(tp_630344, tp_630344.magicMethods["Field33"], name_py_str_631020));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field34"] === null))) {
		F.line = 147;
		var name_py_str_631038 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631038, new_py_static_method_549429(new_py_nim_func_554622(tp_630344.magicMethods["Field34"], name_py_str_631038, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631038, new_py_method_descr_608221(tp_630344, tp_630344.magicMethods["Field34"], name_py_str_631038));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field35"] === null))) {
		F.line = 147;
		var name_py_str_631056 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631056, new_py_static_method_549429(new_py_nim_func_554822(tp_630344.magicMethods["Field35"], name_py_str_631056, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631056, new_py_method_descr_608421(tp_630344, tp_630344.magicMethods["Field35"], name_py_str_631056));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field36"] === null))) {
		F.line = 147;
		var name_py_str_631074 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631074, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field36"], name_py_str_631074, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631074, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field36"], name_py_str_631074));
		}
		
		}
		
		F.line = 145;
		i_630404 = addInt(i_630404, 1);
		if (!((tp_630344.magicMethods["Field37"] === null))) {
		F.line = 147;
		var name_py_str_631092 = magic_name_strs_619041[0][chckIndx(i_630404, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631092, new_py_static_method_549429(new_py_nim_func_554485(tp_630344.magicMethods["Field37"], name_py_str_631092, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631092, new_py_method_descr_608078(tp_630344, tp_630344.magicMethods["Field37"], name_py_str_631092));
		}
		
		}
		
		L1: do {
			F.line = 153;
			var key_631797 = null;
			F.line = 153;
			var value_631798 = {Field0: null, Field1: null};
			F.line = 270;
			var colontmp__632509 = {data: null, counter: 0};
			F.line = 153;
			nimCopy(colontmp__632509, tp_630344.getsetDescr, NTI157326);
			L2: do {
				F.line = 272;
				var h_632513 = 0;
				F.line = 2104;
				var colontmp__632515 = 0;
				F.line = 272;
				colontmp__632515 = (colontmp__632509.data != null ? (colontmp__632509.data.length-1) : -1);
				F.line = 2107;
				var res_632517 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_632517 <= colontmp__632515)) break L4;
							F.line = 2109;
							h_632513 = res_632517;
							if (is_filled_146491(colontmp__632509.data[chckIndx(h_632513, 0, colontmp__632509.data.length+0-1)-0].Field0)) {
							F.line = 273;
							key_631797 = colontmp__632509.data[chckIndx(h_632513, 0, colontmp__632509.data.length+0-1)-0].Field1;
							F.line = 273;
							nimCopy(value_631798, colontmp__632509.data[chckIndx(h_632513, 0, colontmp__632509.data.length+0-1)-0].Field2, NTI157318);
							F.line = 154;
							var getter_631799 = value_631798["Field0"];
							F.line = 155;
							var setter_631800 = value_631798["Field1"];
							F.line = 156;
							var descr_631801 = new_py_get_set_descr_611229(getter_631799, setter_631800);
							F.line = 157;
							var name_py_str_631802 = new_py_str_176092(key_631797);
							F.line = 158;
							HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_631802, descr_631801);
							}
							
							F.line = 2110;
							res_632517 = addInt(res_632517, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		L5: do {
			F.line = 161;
			var name_632505 = null;
			F.line = 161;
			var meth_632506 = null;
			F.line = 270;
			var colontmp__632521 = {data: null, counter: 0};
			F.line = 161;
			nimCopy(colontmp__632521, tp_630344.bltinMethods, NTI157294);
			L6: do {
				F.line = 272;
				var h_632525 = 0;
				F.line = 2104;
				var colontmp__632527 = 0;
				F.line = 272;
				colontmp__632527 = (colontmp__632521.data != null ? (colontmp__632521.data.length-1) : -1);
				F.line = 2107;
				var res_632529 = 0;
				L7: do {
					F.line = 2108;
						L8: while (true) {
						if (!(res_632529 <= colontmp__632527)) break L8;
							F.line = 2109;
							h_632525 = res_632529;
							if (is_filled_146491(colontmp__632521.data[chckIndx(h_632525, 0, colontmp__632521.data.length+0-1)-0].Field0)) {
							F.line = 273;
							name_632505 = colontmp__632521.data[chckIndx(h_632525, 0, colontmp__632521.data.length+0-1)-0].Field1;
							F.line = 273;
							meth_632506 = colontmp__632521.data[chckIndx(h_632525, 0, colontmp__632521.data.length+0-1)-0].Field2;
							F.line = 162;
							var name_py_str_632507 = new_py_string_176075(name_632505);
							F.line = 163;
							HEX5BHEX5DHEX3D_528842(d_630401, name_py_str_632507, new_py_method_descr_608621(tp_630344, meth_632506, name_py_str_632507));
							}
							
							F.line = 2110;
							res_632529 = addInt(res_632529, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 165;
		tp_630344.dict = d_630401;
	framePtr = F.prev;

	
}

function type_ready_632659(tp_632661) {
	var F={procname:"typeobject.typeReady",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		F.line = 168;
		tp_632661.pyType = py_type_object_type_619361;
		F.line = 169;
		add_generic_630231(tp_632661);
		if ((tp_632661.dict === null)) {
		F.line = 171;
		init_type_dict_630342(tp_632661);
		}
		
	framePtr = F.prev;

	
}

function call_py_type_object_magic_632682(self_no_cast_632684, args_632698) {
			var Tmp1;
			var Tmp2;

	var result_632699 = null;

	var F={procname:"typeobject.callPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_632684.m_type, NTI157280))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 438;
		var self_632801 = self_no_cast_632684;
		if (((self_632801 == py_type_object_type_619361) && ((args_632698 != null ? args_632698.length : 0) == 1))) {
		F.line = 180;
		result_632699 = args_632698[chckIndx(0, 0, args_632698.length+0-1)-0].pyType;
		break BeforeRet;
		}
		
		F.line = 182;
		var new_func_632819 = self_632801.magicMethods.Field26;
		if ((new_func_632819 === null)) {
		F.line = 184;
		F.line = 184;
		var fmt_res_632829 = mnewString(0);
		F.line = 184;
		if (fmt_res_632829 != null) { fmt_res_632829 = (fmt_res_632829).concat(makeNimstrLit("cannot create \'")); } else { fmt_res_632829 = makeNimstrLit("cannot create \'"); };
		F.line = 260;
		if (fmt_res_632829 != null) { fmt_res_632829 = (fmt_res_632829).concat(self_632801.name); } else { fmt_res_632829 = self_632801.name.slice(); };
		F.line = 184;
		if (fmt_res_632829 != null) { fmt_res_632829 = (fmt_res_632829).concat(makeNimstrLit("\' instances because __new__ is not set")); } else { fmt_res_632829 = makeNimstrLit("\' instances because __new__ is not set"); };
		var msg_633001 = nimCopy(null, fmt_res_632829, NTI138);
		F.line = 185;
		F.line = 104;
		var excp_633003 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_633003.tk = 3;
		F.line = 106;
		excp_633003.thrown = true;
		F.line = 107;
		excp_633003.msg = new_py_string_176075(msg_633001);
		result_632699 = excp_633003;
		break BeforeRet;
		}
		
		F.line = 186;
		var new_obj_633028 = new_func_632819(HEX26_605015([self_632801], args_632698));
			if (of_py_exception_object_358259(new_obj_633028)) {
			Tmp1 = new_obj_633028.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 188;
		result_632699 = new_obj_633028;
		break BeforeRet;
		}
		
		F.line = 189;
		var init_func_633029 = self_632801.magicMethods.Field27;
		if (!((init_func_633029 === null))) {
		F.line = 191;
		var init_ret_633036 = init_func_633029(new_obj_633028, args_632698);
			if (of_py_exception_object_358259(init_ret_633036)) {
			Tmp2 = init_ret_633036.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 193;
		result_632699 = init_ret_633036;
		break BeforeRet;
		}
		
		}
		
		F.line = 195;
		result_632699 = new_obj_633028;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_632699;

}

function new_633206() {
	var result_633211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_633401 = null;
		F.line = 211;
		r_633401 = {m_type: NTI633109, dict: null, id: 0, pyType: null};
		F.line = 212;
		result_633211 = r_633401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_633211;

}

function new_py_instance_simple_633201() {
	var result_633203 = null;

	var F={procname:"typeobject.newPyInstanceSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_633424 = new_633206();
		F.line = 561;
		obj_633424.pyType = py_instance_object_type_633113;
		F.line = 563;
		give_id_157814(obj_633424);
		F.line = 565;
		obj_633424.dict = new_py_dict_527257();
		result_633203 = obj_633424;
	framePtr = F.prev;

	return result_633203;

}

function new_py_instance_default_633821(args_633064) {
	var result_633824 = null;

	var F={procname:"typeobject.newPyInstanceDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_633824 = new_py_instance_simple_633201();
	framePtr = F.prev;

	return result_633824;

}

function HEX5BHEX5D_634438(s_634445, x_634448) {
	var result_634450 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_634601 = x_634448.a;
		F.line = 3707;
		var l_634807 = addInt(subInt(subInt((s_634445 != null ? s_634445.length : 0), x_634448.b), a_634601), 1);
		F.line = 3708;
		result_634450 = new Array(chckRange(l_634807, 0, 2147483647)); for (var i=0;i<chckRange(l_634807, 0, 2147483647);++i) {result_634450[i]=null;}		L1: do {
			F.line = 3709;
			var i_634827 = 0;
			F.line = 3617;
			var i_634835 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_634835 < l_634807)) break L3;
						F.line = 3619;
						i_634827 = i_634835;
						F.line = 3709;
						result_634450[chckIndx(i_634827, 0, result_634450.length+0-1)-0] = s_634445[chckIndx(addInt(i_634827, a_634601), 0, s_634445.length+0-1)-0];
						F.line = 3620;
						i_634835 = addInt(i_634835, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_634450;

}

function new_py_instance_object_magic_634046(args_634061) {
	var result_634062 = null;

	var F={procname:"typeobject.newPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((args_634061 != null ? args_634061.length : 0) < 1)) {
		F.line = 193;
		var msg_634073 = null;
		if (true) {
		F.line = 195;
		F.line = 195;
		var fmt_res_634078 = mnewString(0);
		F.line = 195;
		if (fmt_res_634078 != null) { fmt_res_634078 = (fmt_res_634078).concat(makeNimstrLit(" argument (")); } else { fmt_res_634078 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_634078 != null) { fmt_res_634078 = (fmt_res_634078).concat(cstrToNimstr(((args_634061 != null ? args_634061.length : 0))+"")); } else { fmt_res_634078 = cstrToNimstr(((args_634061 != null ? args_634061.length : 0))+"").slice(); };
		F.line = 195;
		if (fmt_res_634078 != null) { fmt_res_634078 = (fmt_res_634078).concat(makeNimstrLit(" given)")); } else { fmt_res_634078 = makeNimstrLit(" given)"); };
		msg_634073 = nimCopy(null, (makeNimstrLit("New takes at least 1")).concat(fmt_res_634078), NTI138);
		}
		else {
			F.line = 197;
			F.line = 197;
			var fmt_res_634210 = mnewString(0);
			F.line = 197;
			if (fmt_res_634210 != null) { fmt_res_634210 = (fmt_res_634210).concat(makeNimstrLit(" argument (")); } else { fmt_res_634210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_634210 != null) { fmt_res_634210 = (fmt_res_634210).concat(cstrToNimstr(((args_634061 != null ? args_634061.length : 0))+"")); } else { fmt_res_634210 = cstrToNimstr(((args_634061 != null ? args_634061.length : 0))+"").slice(); };
			F.line = 197;
			if (fmt_res_634210 != null) { fmt_res_634210 = (fmt_res_634210).concat(makeNimstrLit(" given)")); } else { fmt_res_634210 = makeNimstrLit(" given)"); };
			msg_634073 = nimCopy(null, (makeNimstrLit("expected at least 1")).concat(fmt_res_634210), NTI138);
		}
		
		F.line = 198;
		F.line = 104;
		var excp_634409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_634409.tk = 3;
		F.line = 106;
		excp_634409.thrown = true;
		F.line = 107;
		excp_634409.msg = new_py_string_176075(msg_634073);
		result_634062 = excp_634409;
		break BeforeRet;
		}
		
		F.line = 215;
		var actual_args_634850 = HEX5BHEX5D_634438(args_634061, HEX2EHEX2E_81053(1, 1));
		if (!(isObj(args_634061[chckIndx(0, 0, args_634061.length+0-1)-0].m_type, NTI157280))) {
		F.line = 185;
		var expected_634862 = nimCopy(null, py_type_object_type_619361.name, NTI138);
		F.line = 186;
		var got_634863 = nimCopy(null, args_634061[chckIndx(0, 0, args_634061.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_634864 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_634868 = mnewString(0);
		F.line = 260;
		if (fmt_res_634868 != null) { fmt_res_634868 = (fmt_res_634868).concat(expected_634862); } else { fmt_res_634868 = expected_634862.slice(); };
		F.line = 188;
		if (fmt_res_634868 != null) { fmt_res_634868 = (fmt_res_634868).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_634868 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_634868 != null) { fmt_res_634868 = (fmt_res_634868).concat(m_name_634864); } else { fmt_res_634868 = m_name_634864.slice(); };
		F.line = 188;
		if (fmt_res_634868 != null) { fmt_res_634868 = (fmt_res_634868).concat(makeNimstrLit(" (got ")); } else { fmt_res_634868 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_634868 != null) { fmt_res_634868 = (fmt_res_634868).concat(got_634863); } else { fmt_res_634868 = got_634863.slice(); };
		F.line = 188;
		if (fmt_res_634868 != null) { fmt_res_634868 = (fmt_res_634868).concat(makeNimstrLit(")")); } else { fmt_res_634868 = makeNimstrLit(")"); };
		var msg_635402 = nimCopy(null, fmt_res_634868, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_635404 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_635404.tk = 3;
		F.line = 106;
		excp_635404.thrown = true;
		F.line = 107;
		excp_635404.msg = new_py_string_176075(msg_635402);
		result_634062 = excp_635404;
		break BeforeRet;
		}
		
		F.line = 237;
		var tp_635406 = args_634061[chckIndx(0, 0, args_634061.length+0-1)-0];
		F.line = 210;
		result_634062 = new_py_instance_simple_633201();
		F.line = 211;
		result_634062.pyType = tp_635406;
	} while (false);
	framePtr = F.prev;

	return result_634062;

}
type_ready_632659(py_type_object_type_619361);
py_type_object_type_619361.magicMethods.Field31 = call_py_type_object_magic_632682;
var py_instance_object_type_633113 = new_py_type_159261(makeNimstrLit("Instance"));
py_instance_object_type_633113.magicMethods.Field26 = new_py_instance_default_633821;
py_instance_object_type_633113.magicMethods.Field26 = new_py_instance_object_magic_634046;

function add_py_instance_object_magic_643163(self_no_cast_643165, other_643166) {
	var result_643167 = null;

	var F={procname:"typeobject.addPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_643165.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_643201 = self_no_cast_643165;
		F.line = 221;
		var magic_name_str_643207 = magic_name_strs_619041[0][chckIndx(0, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_643209 = HEX5BHEX5D_528323(get_type_dict_624304(self_643201), magic_name_str_643207);
		F.line = 223;
		result_643167 = fast_call_606133(fun_643209, [self_643201, other_643166]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_643167;

}

function sub_py_instance_object_magic_643236(self_no_cast_643238, other_643239) {
	var result_643240 = null;

	var F={procname:"typeobject.subPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_643238.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_643401 = self_no_cast_643238;
		F.line = 221;
		var magic_name_str_643407 = magic_name_strs_619041[0][chckIndx(1, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_643409 = HEX5BHEX5D_528323(get_type_dict_624304(self_643401), magic_name_str_643407);
		F.line = 223;
		result_643240 = fast_call_606133(fun_643409, [self_643401, other_643239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_643240;

}

function mul_py_instance_object_magic_643436(self_no_cast_643438, other_643439) {
	var result_643440 = null;

	var F={procname:"typeobject.mulPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_643438.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_643601 = self_no_cast_643438;
		F.line = 221;
		var magic_name_str_643607 = magic_name_strs_619041[0][chckIndx(2, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_643609 = HEX5BHEX5D_528323(get_type_dict_624304(self_643601), magic_name_str_643607);
		F.line = 223;
		result_643440 = fast_call_606133(fun_643609, [self_643601, other_643439]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_643440;

}

function truediv_py_instance_object_magic_643636(self_no_cast_643638, other_643639) {
	var result_643640 = null;

	var F={procname:"typeobject.truedivPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_643638.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_643801 = self_no_cast_643638;
		F.line = 221;
		var magic_name_str_643807 = magic_name_strs_619041[0][chckIndx(3, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_643809 = HEX5BHEX5D_528323(get_type_dict_624304(self_643801), magic_name_str_643807);
		F.line = 223;
		result_643640 = fast_call_606133(fun_643809, [self_643801, other_643639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_643640;

}

function floordiv_py_instance_object_magic_643836(self_no_cast_643838, other_643839) {
	var result_643840 = null;

	var F={procname:"typeobject.floordivPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_643838.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_644001 = self_no_cast_643838;
		F.line = 221;
		var magic_name_str_644007 = magic_name_strs_619041[0][chckIndx(4, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_644009 = HEX5BHEX5D_528323(get_type_dict_624304(self_644001), magic_name_str_644007);
		F.line = 223;
		result_643840 = fast_call_606133(fun_644009, [self_644001, other_643839]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_643840;

}

function mod_py_instance_object_magic_644036(self_no_cast_644038, other_644039) {
	var result_644040 = null;

	var F={procname:"typeobject.modPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_644038.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_644201 = self_no_cast_644038;
		F.line = 221;
		var magic_name_str_644207 = magic_name_strs_619041[0][chckIndx(5, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_644209 = HEX5BHEX5D_528323(get_type_dict_624304(self_644201), magic_name_str_644207);
		F.line = 223;
		result_644040 = fast_call_606133(fun_644209, [self_644201, other_644039]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_644040;

}

function pow_py_instance_object_magic_644236(self_no_cast_644238, other_644239) {
	var result_644240 = null;

	var F={procname:"typeobject.powPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_644238.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_644401 = self_no_cast_644238;
		F.line = 221;
		var magic_name_str_644407 = magic_name_strs_619041[0][chckIndx(6, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_644409 = HEX5BHEX5D_528323(get_type_dict_624304(self_644401), magic_name_str_644407);
		F.line = 223;
		result_644240 = fast_call_606133(fun_644409, [self_644401, other_644239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_644240;

}

function not_py_instance_object_magic_644436(self_no_cast_644438) {
	var result_644439 = null;

	var F={procname:"typeobject.notPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_644438.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_644601 = self_no_cast_644438;
		F.line = 215;
		var magic_name_str_644607 = magic_name_strs_619041[0][chckIndx(7, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_644609 = HEX5BHEX5D_528323(get_type_dict_624304(self_644601), magic_name_str_644607);
		F.line = 217;
		result_644439 = fast_call_606133(fun_644609, [self_644601]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_644439;

}

function negative_py_instance_object_magic_644636(self_no_cast_644638) {
	var result_644639 = null;

	var F={procname:"typeobject.negativePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_644638.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_644801 = self_no_cast_644638;
		F.line = 215;
		var magic_name_str_644807 = magic_name_strs_619041[0][chckIndx(8, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_644809 = HEX5BHEX5D_528323(get_type_dict_624304(self_644801), magic_name_str_644807);
		F.line = 217;
		result_644639 = fast_call_606133(fun_644809, [self_644801]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_644639;

}

function positive_py_instance_object_magic_644836(self_no_cast_644838) {
	var result_644839 = null;

	var F={procname:"typeobject.positivePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_644838.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_645001 = self_no_cast_644838;
		F.line = 215;
		var magic_name_str_645007 = magic_name_strs_619041[0][chckIndx(9, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_645009 = HEX5BHEX5D_528323(get_type_dict_624304(self_645001), magic_name_str_645007);
		F.line = 217;
		result_644839 = fast_call_606133(fun_645009, [self_645001]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_644839;

}

function abs_py_instance_object_magic_645036(self_no_cast_645038) {
	var result_645039 = null;

	var F={procname:"typeobject.absPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_645038.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_645201 = self_no_cast_645038;
		F.line = 215;
		var magic_name_str_645207 = magic_name_strs_619041[0][chckIndx(10, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_645209 = HEX5BHEX5D_528323(get_type_dict_624304(self_645201), magic_name_str_645207);
		F.line = 217;
		result_645039 = fast_call_606133(fun_645209, [self_645201]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_645039;

}

function index_py_instance_object_magic_645236(self_no_cast_645238) {
	var result_645239 = null;

	var F={procname:"typeobject.indexPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_645238.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_645401 = self_no_cast_645238;
		F.line = 215;
		var magic_name_str_645407 = magic_name_strs_619041[0][chckIndx(11, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_645409 = HEX5BHEX5D_528323(get_type_dict_624304(self_645401), magic_name_str_645407);
		F.line = 217;
		result_645239 = fast_call_606133(fun_645409, [self_645401]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_645239;

}

function bool_py_instance_object_magic_645436(self_no_cast_645438) {
	var result_645439 = null;

	var F={procname:"typeobject.boolPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_645438.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_645601 = self_no_cast_645438;
		F.line = 215;
		var magic_name_str_645607 = magic_name_strs_619041[0][chckIndx(12, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_645609 = HEX5BHEX5D_528323(get_type_dict_624304(self_645601), magic_name_str_645607);
		F.line = 217;
		result_645439 = fast_call_606133(fun_645609, [self_645601]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_645439;

}

function and_py_instance_object_magic_645636(self_no_cast_645638, other_645639) {
	var result_645640 = null;

	var F={procname:"typeobject.andPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_645638.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_645801 = self_no_cast_645638;
		F.line = 221;
		var magic_name_str_645807 = magic_name_strs_619041[0][chckIndx(13, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_645809 = HEX5BHEX5D_528323(get_type_dict_624304(self_645801), magic_name_str_645807);
		F.line = 223;
		result_645640 = fast_call_606133(fun_645809, [self_645801, other_645639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_645640;

}

function xor_py_instance_object_magic_645836(self_no_cast_645838, other_645839) {
	var result_645840 = null;

	var F={procname:"typeobject.xorPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_645838.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_646001 = self_no_cast_645838;
		F.line = 221;
		var magic_name_str_646007 = magic_name_strs_619041[0][chckIndx(14, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_646009 = HEX5BHEX5D_528323(get_type_dict_624304(self_646001), magic_name_str_646007);
		F.line = 223;
		result_645840 = fast_call_606133(fun_646009, [self_646001, other_645839]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_645840;

}

function or_py_instance_object_magic_646036(self_no_cast_646038, other_646039) {
	var result_646040 = null;

	var F={procname:"typeobject.orPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_646038.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_646201 = self_no_cast_646038;
		F.line = 221;
		var magic_name_str_646207 = magic_name_strs_619041[0][chckIndx(15, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_646209 = HEX5BHEX5D_528323(get_type_dict_624304(self_646201), magic_name_str_646207);
		F.line = 223;
		result_646040 = fast_call_606133(fun_646209, [self_646201, other_646039]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_646040;

}

function lt_py_instance_object_magic_646236(self_no_cast_646238, other_646239) {
	var result_646240 = null;

	var F={procname:"typeobject.ltPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_646238.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_646401 = self_no_cast_646238;
		F.line = 221;
		var magic_name_str_646407 = magic_name_strs_619041[0][chckIndx(16, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_646409 = HEX5BHEX5D_528323(get_type_dict_624304(self_646401), magic_name_str_646407);
		F.line = 223;
		result_646240 = fast_call_606133(fun_646409, [self_646401, other_646239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_646240;

}

function le_py_instance_object_magic_646436(self_no_cast_646438, other_646439) {
	var result_646440 = null;

	var F={procname:"typeobject.lePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_646438.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_646601 = self_no_cast_646438;
		F.line = 221;
		var magic_name_str_646607 = magic_name_strs_619041[0][chckIndx(17, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_646609 = HEX5BHEX5D_528323(get_type_dict_624304(self_646601), magic_name_str_646607);
		F.line = 223;
		result_646440 = fast_call_606133(fun_646609, [self_646601, other_646439]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_646440;

}

function eq_py_instance_object_magic_646636(self_no_cast_646638, other_646639) {
	var result_646640 = null;

	var F={procname:"typeobject.eqPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_646638.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_646801 = self_no_cast_646638;
		F.line = 221;
		var magic_name_str_646807 = magic_name_strs_619041[0][chckIndx(18, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_646809 = HEX5BHEX5D_528323(get_type_dict_624304(self_646801), magic_name_str_646807);
		F.line = 223;
		result_646640 = fast_call_606133(fun_646809, [self_646801, other_646639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_646640;

}

function ne_py_instance_object_magic_646836(self_no_cast_646838, other_646839) {
	var result_646840 = null;

	var F={procname:"typeobject.nePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_646838.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_647001 = self_no_cast_646838;
		F.line = 221;
		var magic_name_str_647007 = magic_name_strs_619041[0][chckIndx(19, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_647009 = HEX5BHEX5D_528323(get_type_dict_624304(self_647001), magic_name_str_647007);
		F.line = 223;
		result_646840 = fast_call_606133(fun_647009, [self_647001, other_646839]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_646840;

}

function gt_py_instance_object_magic_647036(self_no_cast_647038, other_647039) {
	var result_647040 = null;

	var F={procname:"typeobject.gtPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_647038.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_647201 = self_no_cast_647038;
		F.line = 221;
		var magic_name_str_647207 = magic_name_strs_619041[0][chckIndx(20, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_647209 = HEX5BHEX5D_528323(get_type_dict_624304(self_647201), magic_name_str_647207);
		F.line = 223;
		result_647040 = fast_call_606133(fun_647209, [self_647201, other_647039]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_647040;

}

function ge_py_instance_object_magic_647236(self_no_cast_647238, other_647239) {
	var result_647240 = null;

	var F={procname:"typeobject.gePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_647238.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_647401 = self_no_cast_647238;
		F.line = 221;
		var magic_name_str_647407 = magic_name_strs_619041[0][chckIndx(21, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_647409 = HEX5BHEX5D_528323(get_type_dict_624304(self_647401), magic_name_str_647407);
		F.line = 223;
		result_647240 = fast_call_606133(fun_647409, [self_647401, other_647239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_647240;

}

function contains_py_instance_object_magic_647436(self_no_cast_647438, other_647439) {
	var result_647440 = null;

	var F={procname:"typeobject.containsPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_647438.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_647601 = self_no_cast_647438;
		F.line = 221;
		var magic_name_str_647607 = magic_name_strs_619041[0][chckIndx(22, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_647609 = HEX5BHEX5D_528323(get_type_dict_624304(self_647601), magic_name_str_647607);
		F.line = 223;
		result_647440 = fast_call_606133(fun_647609, [self_647601, other_647439]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_647440;

}

function len_py_instance_object_magic_647636(self_no_cast_647638) {
	var result_647639 = null;

	var F={procname:"typeobject.lenPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_647638.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_647801 = self_no_cast_647638;
		F.line = 215;
		var magic_name_str_647807 = magic_name_strs_619041[0][chckIndx(23, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_647809 = HEX5BHEX5D_528323(get_type_dict_624304(self_647801), magic_name_str_647807);
		F.line = 217;
		result_647639 = fast_call_606133(fun_647809, [self_647801]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_647639;

}

function str_py_instance_object_magic_647836(self_no_cast_647838) {
	var result_647839 = null;

	var F={procname:"typeobject.strPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_647838.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_648001 = self_no_cast_647838;
		F.line = 215;
		var magic_name_str_648007 = magic_name_strs_619041[0][chckIndx(24, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_648009 = HEX5BHEX5D_528323(get_type_dict_624304(self_648001), magic_name_str_648007);
		F.line = 217;
		result_647839 = fast_call_606133(fun_648009, [self_648001]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_647839;

}

function repr_py_instance_object_magic_648036(self_no_cast_648038) {
	var result_648039 = null;

	var F={procname:"typeobject.reprPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648038.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_648201 = self_no_cast_648038;
		F.line = 215;
		var magic_name_str_648207 = magic_name_strs_619041[0][chckIndx(25, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_648209 = HEX5BHEX5D_528323(get_type_dict_624304(self_648201), magic_name_str_648207);
		F.line = 217;
		result_648039 = fast_call_606133(fun_648209, [self_648201]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648039;

}

function init_py_instance_object_magic_648236(self_no_cast_648238, args_648252) {
	var result_648253 = null;

	var F={procname:"typeobject.initPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648238.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_648401 = self_no_cast_648238;
		F.line = 239;
		var magic_name_str_648407 = magic_name_strs_619041[0][chckIndx(27, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 240;
		var fun_648409 = HEX5BHEX5D_528323(get_type_dict_624304(self_648401), magic_name_str_648407);
		F.line = 241;
		result_648253 = fast_call_606133(fun_648409, HEX26_605015([self_648401], args_648252));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648253;

}

function getattr_py_instance_object_magic_648447(self_no_cast_648449, other_648450) {
	var result_648451 = null;

	var F={procname:"typeobject.getattrPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648449.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_648601 = self_no_cast_648449;
		F.line = 221;
		var magic_name_str_648607 = magic_name_strs_619041[0][chckIndx(28, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_648609 = HEX5BHEX5D_528323(get_type_dict_624304(self_648601), magic_name_str_648607);
		F.line = 223;
		result_648451 = fast_call_606133(fun_648609, [self_648601, other_648450]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648451;

}

function setattr_py_instance_object_magic_648636(self_no_cast_648638, arg1_648639, arg2_648640) {
	var result_648641 = null;

	var F={procname:"typeobject.setattrPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648638.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_648801 = self_no_cast_648638;
		F.line = 227;
		var magic_name_str_648807 = magic_name_strs_619041[0][chckIndx(29, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 228;
		var fun_648809 = HEX5BHEX5D_528323(get_type_dict_624304(self_648801), magic_name_str_648807);
		F.line = 229;
		result_648641 = fast_call_606133(fun_648809, [self_648801, arg1_648639, arg2_648640]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648641;

}

function hash_py_instance_object_magic_648836(self_no_cast_648838) {
	var result_648839 = null;

	var F={procname:"typeobject.hashPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_648838.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649001 = self_no_cast_648838;
		F.line = 215;
		var magic_name_str_649007 = magic_name_strs_619041[0][chckIndx(30, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_649009 = HEX5BHEX5D_528323(get_type_dict_624304(self_649001), magic_name_str_649007);
		F.line = 217;
		result_648839 = fast_call_606133(fun_649009, [self_649001]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_648839;

}

function call_py_instance_object_magic_649036(self_no_cast_649038, args_649052) {
	var result_649053 = null;

	var F={procname:"typeobject.callPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649038.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649201 = self_no_cast_649038;
		F.line = 239;
		var magic_name_str_649207 = magic_name_strs_619041[0][chckIndx(31, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 240;
		var fun_649209 = HEX5BHEX5D_528323(get_type_dict_624304(self_649201), magic_name_str_649207);
		F.line = 241;
		result_649053 = fast_call_606133(fun_649209, HEX26_605015([self_649201], args_649052));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649053;

}

function getitem_py_instance_object_magic_649247(self_no_cast_649249, other_649250) {
	var result_649251 = null;

	var F={procname:"typeobject.getitemPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649249.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649401 = self_no_cast_649249;
		F.line = 221;
		var magic_name_str_649407 = magic_name_strs_619041[0][chckIndx(32, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_649409 = HEX5BHEX5D_528323(get_type_dict_624304(self_649401), magic_name_str_649407);
		F.line = 223;
		result_649251 = fast_call_606133(fun_649409, [self_649401, other_649250]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649251;

}

function setitem_py_instance_object_magic_649436(self_no_cast_649438, arg1_649439, arg2_649440) {
	var result_649441 = null;

	var F={procname:"typeobject.setitemPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649438.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649601 = self_no_cast_649438;
		F.line = 227;
		var magic_name_str_649607 = magic_name_strs_619041[0][chckIndx(33, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 228;
		var fun_649609 = HEX5BHEX5D_528323(get_type_dict_624304(self_649601), magic_name_str_649607);
		F.line = 229;
		result_649441 = fast_call_606133(fun_649609, [self_649601, arg1_649439, arg2_649440]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649441;

}

function get_py_instance_object_magic_649636(self_no_cast_649638, other_649639) {
	var result_649640 = null;

	var F={procname:"typeobject.getPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649638.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_649801 = self_no_cast_649638;
		F.line = 221;
		var magic_name_str_649807 = magic_name_strs_619041[0][chckIndx(34, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 222;
		var fun_649809 = HEX5BHEX5D_528323(get_type_dict_624304(self_649801), magic_name_str_649807);
		F.line = 223;
		result_649640 = fast_call_606133(fun_649809, [self_649801, other_649639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649640;

}

function set_py_instance_object_magic_649836(self_no_cast_649838, arg1_649839, arg2_649840) {
	var result_649841 = null;

	var F={procname:"typeobject.setPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_649838.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_650001 = self_no_cast_649838;
		F.line = 227;
		var magic_name_str_650007 = magic_name_strs_619041[0][chckIndx(35, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 228;
		var fun_650009 = HEX5BHEX5D_528323(get_type_dict_624304(self_650001), magic_name_str_650007);
		F.line = 229;
		result_649841 = fast_call_606133(fun_650009, [self_650001, arg1_649839, arg2_649840]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_649841;

}

function iter_py_instance_object_magic_650036(self_no_cast_650038) {
	var result_650039 = null;

	var F={procname:"typeobject.iterPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_650038.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_650201 = self_no_cast_650038;
		F.line = 215;
		var magic_name_str_650207 = magic_name_strs_619041[0][chckIndx(36, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_650209 = HEX5BHEX5D_528323(get_type_dict_624304(self_650201), magic_name_str_650207);
		F.line = 217;
		result_650039 = fast_call_606133(fun_650209, [self_650201]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_650039;

}

function iternext_py_instance_object_magic_650236(self_no_cast_650238) {
	var result_650239 = null;

	var F={procname:"typeobject.iternextPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_650238.m_type, NTI633109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_650401 = self_no_cast_650238;
		F.line = 215;
		var magic_name_str_650407 = magic_name_strs_619041[0][chckIndx(37, 0, magic_name_strs_619041[0].length+0-1)-0];
		F.line = 216;
		var fun_650409 = HEX5BHEX5D_528323(get_type_dict_624304(self_650401), magic_name_str_650407);
		F.line = 217;
		result_650239 = fast_call_606133(fun_650409, [self_650401]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_650239;

}
py_instance_object_type_633113.magicMethods.Field0 = add_py_instance_object_magic_643163;
py_instance_object_type_633113.magicMethods.Field1 = sub_py_instance_object_magic_643236;
py_instance_object_type_633113.magicMethods.Field2 = mul_py_instance_object_magic_643436;
py_instance_object_type_633113.magicMethods.Field3 = truediv_py_instance_object_magic_643636;
py_instance_object_type_633113.magicMethods.Field4 = floordiv_py_instance_object_magic_643836;
py_instance_object_type_633113.magicMethods.Field5 = mod_py_instance_object_magic_644036;
py_instance_object_type_633113.magicMethods.Field6 = pow_py_instance_object_magic_644236;
py_instance_object_type_633113.magicMethods.Field7 = not_py_instance_object_magic_644436;
py_instance_object_type_633113.magicMethods.Field8 = negative_py_instance_object_magic_644636;
py_instance_object_type_633113.magicMethods.Field9 = positive_py_instance_object_magic_644836;
py_instance_object_type_633113.magicMethods.Field10 = abs_py_instance_object_magic_645036;
py_instance_object_type_633113.magicMethods.Field11 = index_py_instance_object_magic_645236;
py_instance_object_type_633113.magicMethods.Field12 = bool_py_instance_object_magic_645436;
py_instance_object_type_633113.magicMethods.Field13 = and_py_instance_object_magic_645636;
py_instance_object_type_633113.magicMethods.Field14 = xor_py_instance_object_magic_645836;
py_instance_object_type_633113.magicMethods.Field15 = or_py_instance_object_magic_646036;
py_instance_object_type_633113.magicMethods.Field16 = lt_py_instance_object_magic_646236;
py_instance_object_type_633113.magicMethods.Field17 = le_py_instance_object_magic_646436;
py_instance_object_type_633113.magicMethods.Field18 = eq_py_instance_object_magic_646636;
py_instance_object_type_633113.magicMethods.Field19 = ne_py_instance_object_magic_646836;
py_instance_object_type_633113.magicMethods.Field20 = gt_py_instance_object_magic_647036;
py_instance_object_type_633113.magicMethods.Field21 = ge_py_instance_object_magic_647236;
py_instance_object_type_633113.magicMethods.Field22 = contains_py_instance_object_magic_647436;
py_instance_object_type_633113.magicMethods.Field23 = len_py_instance_object_magic_647636;
py_instance_object_type_633113.magicMethods.Field24 = str_py_instance_object_magic_647836;
py_instance_object_type_633113.magicMethods.Field25 = repr_py_instance_object_magic_648036;
py_instance_object_type_633113.magicMethods.Field27 = init_py_instance_object_magic_648236;
py_instance_object_type_633113.magicMethods.Field28 = getattr_py_instance_object_magic_648447;
py_instance_object_type_633113.magicMethods.Field29 = setattr_py_instance_object_magic_648636;
py_instance_object_type_633113.magicMethods.Field30 = hash_py_instance_object_magic_648836;
py_instance_object_type_633113.magicMethods.Field31 = call_py_instance_object_magic_649036;
py_instance_object_type_633113.magicMethods.Field32 = getitem_py_instance_object_magic_649247;
py_instance_object_type_633113.magicMethods.Field33 = setitem_py_instance_object_magic_649436;
py_instance_object_type_633113.magicMethods.Field34 = get_py_instance_object_magic_649636;
py_instance_object_type_633113.magicMethods.Field35 = set_py_instance_object_magic_649836;
py_instance_object_type_633113.magicMethods.Field36 = iter_py_instance_object_magic_650036;
py_instance_object_type_633113.magicMethods.Field37 = iternext_py_instance_object_magic_650236;

function len_473684(t_473686) {
	var result_473687 = 0;

	var F={procname:"tupleobject.len",prev:framePtr,filename:"../Objects/tupleobject.nim",line:0};
	framePtr = F;
		F.line = 96;
		result_473687 = (t_473686.items != null ? t_473686.items.length : 0);
	framePtr = F.prev;

	return result_473687;

}

function new_py_type_object_magic_650921(args_650936) {
	var result_650937 = null;

	var F={procname:"typeobject.newPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_650936 != null ? args_650936.length : 0) == 4))) {
		F.line = 183;
		var msg_650949 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_650954 = mnewString(0);
		F.line = 185;
		if (fmt_res_650954 != null) { fmt_res_650954 = (fmt_res_650954).concat(makeNimstrLit(" argument (")); } else { fmt_res_650954 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_650954 != null) { fmt_res_650954 = (fmt_res_650954).concat(cstrToNimstr(((args_650936 != null ? args_650936.length : 0))+"")); } else { fmt_res_650954 = cstrToNimstr(((args_650936 != null ? args_650936.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_650954 != null) { fmt_res_650954 = (fmt_res_650954).concat(makeNimstrLit(" given)")); } else { fmt_res_650954 = makeNimstrLit(" given)"); };
		msg_650949 = nimCopy(null, (makeNimstrLit("New takes exactly 4")).concat(fmt_res_650954), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_651010 = mnewString(0);
			F.line = 187;
			if (fmt_res_651010 != null) { fmt_res_651010 = (fmt_res_651010).concat(makeNimstrLit(" argument (")); } else { fmt_res_651010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_651010 != null) { fmt_res_651010 = (fmt_res_651010).concat(cstrToNimstr(((args_650936 != null ? args_650936.length : 0))+"")); } else { fmt_res_651010 = cstrToNimstr(((args_650936 != null ? args_650936.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_651010 != null) { fmt_res_651010 = (fmt_res_651010).concat(makeNimstrLit(" given)")); } else { fmt_res_651010 = makeNimstrLit(" given)"); };
			msg_650949 = nimCopy(null, (makeNimstrLit("expected 4")).concat(fmt_res_651010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_651209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_651209.tk = 3;
		F.line = 106;
		excp_651209.thrown = true;
		F.line = 107;
		excp_651209.msg = new_py_string_176075(msg_650949);
		result_650937 = excp_651209;
		break BeforeRet;
		}
		
		if (!(isObj(args_650936[chckIndx(0, 0, args_650936.length+0-1)-0].m_type, NTI157280))) {
		F.line = 185;
		var expected_651222 = nimCopy(null, py_type_object_type_619361.name, NTI138);
		F.line = 186;
		var got_651223 = nimCopy(null, args_650936[chckIndx(0, 0, args_650936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_651224 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_651228 = mnewString(0);
		F.line = 260;
		if (fmt_res_651228 != null) { fmt_res_651228 = (fmt_res_651228).concat(expected_651222); } else { fmt_res_651228 = expected_651222.slice(); };
		F.line = 188;
		if (fmt_res_651228 != null) { fmt_res_651228 = (fmt_res_651228).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_651228 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_651228 != null) { fmt_res_651228 = (fmt_res_651228).concat(m_name_651224); } else { fmt_res_651228 = m_name_651224.slice(); };
		F.line = 188;
		if (fmt_res_651228 != null) { fmt_res_651228 = (fmt_res_651228).concat(makeNimstrLit(" (got ")); } else { fmt_res_651228 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_651228 != null) { fmt_res_651228 = (fmt_res_651228).concat(got_651223); } else { fmt_res_651228 = got_651223.slice(); };
		F.line = 188;
		if (fmt_res_651228 != null) { fmt_res_651228 = (fmt_res_651228).concat(makeNimstrLit(")")); } else { fmt_res_651228 = makeNimstrLit(")"); };
		var msg_651802 = nimCopy(null, fmt_res_651228, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_651804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_651804.tk = 3;
		F.line = 106;
		excp_651804.thrown = true;
		F.line = 107;
		excp_651804.msg = new_py_string_176075(msg_651802);
		result_650937 = excp_651804;
		break BeforeRet;
		}
		
		F.line = 237;
		var meta_type_651806 = args_650936[chckIndx(0, 0, args_650936.length+0-1)-0];
		if (!(isObj(args_650936[chckIndx(1, 0, args_650936.length+0-1)-0].m_type, NTI175084))) {
		F.line = 185;
		var expected_651818 = nimCopy(null, py_str_object_type_175090.name, NTI138);
		F.line = 186;
		var got_651819 = nimCopy(null, args_650936[chckIndx(1, 0, args_650936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_651820 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_651824 = mnewString(0);
		F.line = 260;
		if (fmt_res_651824 != null) { fmt_res_651824 = (fmt_res_651824).concat(expected_651818); } else { fmt_res_651824 = expected_651818.slice(); };
		F.line = 188;
		if (fmt_res_651824 != null) { fmt_res_651824 = (fmt_res_651824).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_651824 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_651824 != null) { fmt_res_651824 = (fmt_res_651824).concat(m_name_651820); } else { fmt_res_651824 = m_name_651820.slice(); };
		F.line = 188;
		if (fmt_res_651824 != null) { fmt_res_651824 = (fmt_res_651824).concat(makeNimstrLit(" (got ")); } else { fmt_res_651824 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_651824 != null) { fmt_res_651824 = (fmt_res_651824).concat(got_651819); } else { fmt_res_651824 = got_651819.slice(); };
		F.line = 188;
		if (fmt_res_651824 != null) { fmt_res_651824 = (fmt_res_651824).concat(makeNimstrLit(")")); } else { fmt_res_651824 = makeNimstrLit(")"); };
		var msg_652402 = nimCopy(null, fmt_res_651824, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_652404 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_652404.tk = 3;
		F.line = 106;
		excp_652404.thrown = true;
		F.line = 107;
		excp_652404.msg = new_py_string_176075(msg_652402);
		result_650937 = excp_652404;
		break BeforeRet;
		}
		
		F.line = 237;
		var name_652406 = args_650936[chckIndx(1, 0, args_650936.length+0-1)-0];
		if (!(isObj(args_650936[chckIndx(2, 0, args_650936.length+0-1)-0].m_type, NTI469070))) {
		F.line = 185;
		var expected_652418 = nimCopy(null, py_tuple_object_type_469080.name, NTI138);
		F.line = 186;
		var got_652419 = nimCopy(null, args_650936[chckIndx(2, 0, args_650936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_652420 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_652424 = mnewString(0);
		F.line = 260;
		if (fmt_res_652424 != null) { fmt_res_652424 = (fmt_res_652424).concat(expected_652418); } else { fmt_res_652424 = expected_652418.slice(); };
		F.line = 188;
		if (fmt_res_652424 != null) { fmt_res_652424 = (fmt_res_652424).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_652424 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_652424 != null) { fmt_res_652424 = (fmt_res_652424).concat(m_name_652420); } else { fmt_res_652424 = m_name_652420.slice(); };
		F.line = 188;
		if (fmt_res_652424 != null) { fmt_res_652424 = (fmt_res_652424).concat(makeNimstrLit(" (got ")); } else { fmt_res_652424 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_652424 != null) { fmt_res_652424 = (fmt_res_652424).concat(got_652419); } else { fmt_res_652424 = got_652419.slice(); };
		F.line = 188;
		if (fmt_res_652424 != null) { fmt_res_652424 = (fmt_res_652424).concat(makeNimstrLit(")")); } else { fmt_res_652424 = makeNimstrLit(")"); };
		var msg_653002 = nimCopy(null, fmt_res_652424, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_653004 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_653004.tk = 3;
		F.line = 106;
		excp_653004.thrown = true;
		F.line = 107;
		excp_653004.msg = new_py_string_176075(msg_653002);
		result_650937 = excp_653004;
		break BeforeRet;
		}
		
		F.line = 237;
		var bases_653006 = args_650936[chckIndx(2, 0, args_650936.length+0-1)-0];
		if (!(isObj(args_650936[chckIndx(3, 0, args_650936.length+0-1)-0].m_type, NTI526178))) {
		F.line = 185;
		var expected_653018 = nimCopy(null, pydict_object_type_526222.name, NTI138);
		F.line = 186;
		var got_653019 = nimCopy(null, args_650936[chckIndx(3, 0, args_650936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_653020 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_653024 = mnewString(0);
		F.line = 260;
		if (fmt_res_653024 != null) { fmt_res_653024 = (fmt_res_653024).concat(expected_653018); } else { fmt_res_653024 = expected_653018.slice(); };
		F.line = 188;
		if (fmt_res_653024 != null) { fmt_res_653024 = (fmt_res_653024).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_653024 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_653024 != null) { fmt_res_653024 = (fmt_res_653024).concat(m_name_653020); } else { fmt_res_653024 = m_name_653020.slice(); };
		F.line = 188;
		if (fmt_res_653024 != null) { fmt_res_653024 = (fmt_res_653024).concat(makeNimstrLit(" (got ")); } else { fmt_res_653024 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_653024 != null) { fmt_res_653024 = (fmt_res_653024).concat(got_653019); } else { fmt_res_653024 = got_653019.slice(); };
		F.line = 188;
		if (fmt_res_653024 != null) { fmt_res_653024 = (fmt_res_653024).concat(makeNimstrLit(")")); } else { fmt_res_653024 = makeNimstrLit(")"); };
		var msg_653602 = nimCopy(null, fmt_res_653024, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_653604 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_653604.tk = 3;
		F.line = 106;
		excp_653604.thrown = true;
		F.line = 107;
		excp_653604.msg = new_py_string_176075(msg_653602);
		result_650937 = excp_653604;
		break BeforeRet;
		}
		
		F.line = 237;
		var dict_653606 = args_650936[chckIndx(3, 0, args_650936.length+0-1)-0];
		if (!((meta_type_651806 == py_type_object_type_619361))) {
		F.line = 281;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/typeobject.nim(281, 10) `metaType == pyTypeObjectType` "));
		}
		
		if (!((len_473684(bases_653006) == 0))) {
		F.line = 282;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/typeobject.nim(282, 10) `len(bases) == 0` "));
		}
		
		F.line = 283;
		var tp_654001 = new_py_type_159261(name_652406.str);
		F.line = 284;
		tp_654001.kind = 7;
		F.line = 285;
		tp_654001.magicMethods.Field26 = new_py_instance_object_magic_634046;
		F.line = 267;
		var magic_name_str_654084 = magic_name_strs_619041[0][chckIndx(0, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654084)) {
		F.line = 269;
		tp_654001.magicMethods.Field0 = add_py_instance_object_magic_643163;
		}
		
		F.line = 267;
		var magic_name_str_654090 = magic_name_strs_619041[0][chckIndx(1, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654090)) {
		F.line = 269;
		tp_654001.magicMethods.Field1 = sub_py_instance_object_magic_643236;
		}
		
		F.line = 267;
		var magic_name_str_654096 = magic_name_strs_619041[0][chckIndx(2, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654096)) {
		F.line = 269;
		tp_654001.magicMethods.Field2 = mul_py_instance_object_magic_643436;
		}
		
		F.line = 267;
		var magic_name_str_654102 = magic_name_strs_619041[0][chckIndx(3, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654102)) {
		F.line = 269;
		tp_654001.magicMethods.Field3 = truediv_py_instance_object_magic_643636;
		}
		
		F.line = 267;
		var magic_name_str_654108 = magic_name_strs_619041[0][chckIndx(4, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654108)) {
		F.line = 269;
		tp_654001.magicMethods.Field4 = floordiv_py_instance_object_magic_643836;
		}
		
		F.line = 267;
		var magic_name_str_654114 = magic_name_strs_619041[0][chckIndx(5, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654114)) {
		F.line = 269;
		tp_654001.magicMethods.Field5 = mod_py_instance_object_magic_644036;
		}
		
		F.line = 267;
		var magic_name_str_654120 = magic_name_strs_619041[0][chckIndx(6, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654120)) {
		F.line = 269;
		tp_654001.magicMethods.Field6 = pow_py_instance_object_magic_644236;
		}
		
		F.line = 267;
		var magic_name_str_654126 = magic_name_strs_619041[0][chckIndx(7, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654126)) {
		F.line = 269;
		tp_654001.magicMethods.Field7 = not_py_instance_object_magic_644436;
		}
		
		F.line = 267;
		var magic_name_str_654132 = magic_name_strs_619041[0][chckIndx(8, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654132)) {
		F.line = 269;
		tp_654001.magicMethods.Field8 = negative_py_instance_object_magic_644636;
		}
		
		F.line = 267;
		var magic_name_str_654138 = magic_name_strs_619041[0][chckIndx(9, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654138)) {
		F.line = 269;
		tp_654001.magicMethods.Field9 = positive_py_instance_object_magic_644836;
		}
		
		F.line = 267;
		var magic_name_str_654144 = magic_name_strs_619041[0][chckIndx(10, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654144)) {
		F.line = 269;
		tp_654001.magicMethods.Field10 = abs_py_instance_object_magic_645036;
		}
		
		F.line = 267;
		var magic_name_str_654150 = magic_name_strs_619041[0][chckIndx(11, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654150)) {
		F.line = 269;
		tp_654001.magicMethods.Field11 = index_py_instance_object_magic_645236;
		}
		
		F.line = 267;
		var magic_name_str_654156 = magic_name_strs_619041[0][chckIndx(12, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654156)) {
		F.line = 269;
		tp_654001.magicMethods.Field12 = bool_py_instance_object_magic_645436;
		}
		
		F.line = 267;
		var magic_name_str_654162 = magic_name_strs_619041[0][chckIndx(13, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654162)) {
		F.line = 269;
		tp_654001.magicMethods.Field13 = and_py_instance_object_magic_645636;
		}
		
		F.line = 267;
		var magic_name_str_654168 = magic_name_strs_619041[0][chckIndx(14, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654168)) {
		F.line = 269;
		tp_654001.magicMethods.Field14 = xor_py_instance_object_magic_645836;
		}
		
		F.line = 267;
		var magic_name_str_654174 = magic_name_strs_619041[0][chckIndx(15, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654174)) {
		F.line = 269;
		tp_654001.magicMethods.Field15 = or_py_instance_object_magic_646036;
		}
		
		F.line = 267;
		var magic_name_str_654180 = magic_name_strs_619041[0][chckIndx(16, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654180)) {
		F.line = 269;
		tp_654001.magicMethods.Field16 = lt_py_instance_object_magic_646236;
		}
		
		F.line = 267;
		var magic_name_str_654186 = magic_name_strs_619041[0][chckIndx(17, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654186)) {
		F.line = 269;
		tp_654001.magicMethods.Field17 = le_py_instance_object_magic_646436;
		}
		
		F.line = 267;
		var magic_name_str_654192 = magic_name_strs_619041[0][chckIndx(18, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654192)) {
		F.line = 269;
		tp_654001.magicMethods.Field18 = eq_py_instance_object_magic_646636;
		}
		
		F.line = 267;
		var magic_name_str_654198 = magic_name_strs_619041[0][chckIndx(19, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654198)) {
		F.line = 269;
		tp_654001.magicMethods.Field19 = ne_py_instance_object_magic_646836;
		}
		
		F.line = 267;
		var magic_name_str_654204 = magic_name_strs_619041[0][chckIndx(20, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654204)) {
		F.line = 269;
		tp_654001.magicMethods.Field20 = gt_py_instance_object_magic_647036;
		}
		
		F.line = 267;
		var magic_name_str_654210 = magic_name_strs_619041[0][chckIndx(21, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654210)) {
		F.line = 269;
		tp_654001.magicMethods.Field21 = ge_py_instance_object_magic_647236;
		}
		
		F.line = 267;
		var magic_name_str_654216 = magic_name_strs_619041[0][chckIndx(22, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654216)) {
		F.line = 269;
		tp_654001.magicMethods.Field22 = contains_py_instance_object_magic_647436;
		}
		
		F.line = 267;
		var magic_name_str_654222 = magic_name_strs_619041[0][chckIndx(23, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654222)) {
		F.line = 269;
		tp_654001.magicMethods.Field23 = len_py_instance_object_magic_647636;
		}
		
		F.line = 267;
		var magic_name_str_654228 = magic_name_strs_619041[0][chckIndx(24, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654228)) {
		F.line = 269;
		tp_654001.magicMethods.Field24 = str_py_instance_object_magic_647836;
		}
		
		F.line = 267;
		var magic_name_str_654234 = magic_name_strs_619041[0][chckIndx(25, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654234)) {
		F.line = 269;
		tp_654001.magicMethods.Field25 = repr_py_instance_object_magic_648036;
		}
		
		F.line = 267;
		var magic_name_str_654240 = magic_name_strs_619041[0][chckIndx(26, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654240)) {
		F.line = 269;
		tp_654001.magicMethods.Field26 = new_py_instance_object_magic_634046;
		}
		
		F.line = 267;
		var magic_name_str_654246 = magic_name_strs_619041[0][chckIndx(27, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654246)) {
		F.line = 269;
		tp_654001.magicMethods.Field27 = init_py_instance_object_magic_648236;
		}
		
		F.line = 267;
		var magic_name_str_654252 = magic_name_strs_619041[0][chckIndx(28, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654252)) {
		F.line = 269;
		tp_654001.magicMethods.Field28 = getattr_py_instance_object_magic_648447;
		}
		
		F.line = 267;
		var magic_name_str_654258 = magic_name_strs_619041[0][chckIndx(29, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654258)) {
		F.line = 269;
		tp_654001.magicMethods.Field29 = setattr_py_instance_object_magic_648636;
		}
		
		F.line = 267;
		var magic_name_str_654264 = magic_name_strs_619041[0][chckIndx(30, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654264)) {
		F.line = 269;
		tp_654001.magicMethods.Field30 = hash_py_instance_object_magic_648836;
		}
		
		F.line = 267;
		var magic_name_str_654270 = magic_name_strs_619041[0][chckIndx(31, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654270)) {
		F.line = 269;
		tp_654001.magicMethods.Field31 = call_py_instance_object_magic_649036;
		}
		
		F.line = 267;
		var magic_name_str_654276 = magic_name_strs_619041[0][chckIndx(32, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654276)) {
		F.line = 269;
		tp_654001.magicMethods.Field32 = getitem_py_instance_object_magic_649247;
		}
		
		F.line = 267;
		var magic_name_str_654282 = magic_name_strs_619041[0][chckIndx(33, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654282)) {
		F.line = 269;
		tp_654001.magicMethods.Field33 = setitem_py_instance_object_magic_649436;
		}
		
		F.line = 267;
		var magic_name_str_654288 = magic_name_strs_619041[0][chckIndx(34, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654288)) {
		F.line = 269;
		tp_654001.magicMethods.Field34 = get_py_instance_object_magic_649636;
		}
		
		F.line = 267;
		var magic_name_str_654294 = magic_name_strs_619041[0][chckIndx(35, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654294)) {
		F.line = 269;
		tp_654001.magicMethods.Field35 = set_py_instance_object_magic_649836;
		}
		
		F.line = 267;
		var magic_name_str_654300 = magic_name_strs_619041[0][chckIndx(36, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654300)) {
		F.line = 269;
		tp_654001.magicMethods.Field36 = iter_py_instance_object_magic_650036;
		}
		
		F.line = 267;
		var magic_name_str_654306 = magic_name_strs_619041[0][chckIndx(37, 0, magic_name_strs_619041[0].length+0-1)-0];
		if (has_key_527437(dict_653606, magic_name_str_654306)) {
		F.line = 269;
		tp_654001.magicMethods.Field37 = iternext_py_instance_object_magic_650236;
		}
		
		F.line = 287;
		tp_654001.dict = copy_pydict_object_method_537009(dict_653606, []);
		F.line = 288;
		type_ready_632659(tp_654001);
		result_650937 = tp_654001;
	} while (false);
	framePtr = F.prev;

	return result_650937;

}
py_type_object_type_619361.magicMethods.Field26 = new_py_type_object_magic_650921;

function register_bltin_function_655027(name_655029, fun_655030) {
	var F={procname:"bltinmodule.registerBltinFunction",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
		F.line = 10;
		var name_str_655031 = new_py_string_176075(name_655029);
		if (!(!(has_key_527437(bltin_dict_539014, name_str_655031)))) {
		F.line = 11;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/bltinmodule.nim(11, 3) `not hasKey(bltinDict, nameStr)` "));
		}
		
		F.line = 12;
		HEX5BHEX5DHEX3D_528842(bltin_dict_539014, name_str_655031, new_py_nim_func_554444(fun_655030, name_str_655031));
	framePtr = F.prev;

	
}

function builtin_print_655482(args_655485) {
	var result_655486 = null;

	var F={procname:"bltinmodule.builtinPrint",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 68;
		L1: do {
			F.line = 68;
			var obj_655495 = null;
			F.line = 3911;
			var i_656226 = 0;
			F.line = 3912;
			var l_656228 = (args_655485 != null ? args_655485.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_656226 < l_656228)) break L3;
						F.line = 3914;
						obj_655495 = args_655485[chckIndx(i_656226, 0, args_655485.length+0-1)-0];
						F.line = 69;
						F.line = 45;
						if ((obj_655495.pyType === null)) {
						F.line = 2895;
						var e_655522 = null;
						F.line = 2896;
						e_655522 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_655522.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_655522.parent = null;
						F.line = 26;
						raiseException(e_655522, "InternalError");
						}
						
						F.line = 27;
						var fun_655602 = obj_655495.pyType.magicMethods.Field24;
						if ((fun_655602 === null)) {
						F.line = 29;
						var obj_type_str_655611 = obj_655495.pyType.name;
						F.line = 30;
						var method_str_655613 = makeNimstrLit("str");
						F.line = 31;
						var msg_655615 = (makeNimstrLit("No ")).concat(method_str_655613,makeNimstrLit(" method for "),obj_type_str_655611,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_655617 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_655617.tk = 3;
						F.line = 106;
						excp_655617.thrown = true;
						F.line = 107;
						excp_655617.msg = new_py_string_176075(msg_655615);
						var excp_655620 = excp_655617;
						F.line = 36;
						result_655486 = excp_655620;
						break BeforeRet;
						}
						
						var fun_655802 = fun_655602;
						F.line = 46;
						var res_655804 = fun_655802(obj_655495);
						var obj_str_656001 = res_655804;
						if (!(of_py_str_object_175092(obj_str_656001))) {
						F.line = 157;
						var type_name_656004 = nimCopy(null, obj_str_656001.pyType.name, NTI138);
						F.line = 158;
						F.line = 158;
						var fmt_res_656007 = mnewString(0);
						F.line = 158;
						if (fmt_res_656007 != null) { fmt_res_656007 = (fmt_res_656007).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_656007 = makeNimstrLit(" returned non-string (type "); };
						F.line = 260;
						if (fmt_res_656007 != null) { fmt_res_656007 = (fmt_res_656007).concat(type_name_656004); } else { fmt_res_656007 = type_name_656004.slice(); };
						F.line = 158;
						if (fmt_res_656007 != null) { fmt_res_656007 = (fmt_res_656007).concat(makeNimstrLit(")")); } else { fmt_res_656007 = makeNimstrLit(")"); };
						var msg_656202 = (makeNimstrLit("__str__")).concat(fmt_res_656007);
						F.line = 159;
						F.line = 104;
						var excp_656204 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_656204.tk = 3;
						F.line = 106;
						excp_656204.thrown = true;
						F.line = 107;
						excp_656204.msg = new_py_string_176075(msg_656202);
						result_655486 = excp_656204;
						break BeforeRet;
						}
						
						F.line = 14;
						rawEcho(obj_str_656001.str);
						L4: do {
							F.line = 15;
							var line_656212 = null;
							F.line = 597;
							var colontmp__656215 = null;
							F.line = 71;
							colontmp__656215 = obj_str_656001.str;
							F.line = 455;
							var last_656219 = 0;
							F.line = 456;
							var splits_656221 = -1;
							L5: do {
								F.line = 614;
									L6: while (true) {
									if (!(last_656219 <= (colontmp__656215 != null ? colontmp__656215.length : 0))) break L6;
										F.line = 459;
										var first_656223 = last_656219;
										L7: do {
											F.line = 460;
												L8: while (true) {
												if (!((last_656219 < (colontmp__656215 != null ? colontmp__656215.length : 0)) && !(substr_eq_132789(colontmp__656215, last_656219, makeNimstrLit("\x0A"))))) break L8;
													F.line = 461;
													last_656219 = addInt(last_656219, 1);
												}
										} while(false);
										if ((splits_656221 == 0)) {
										F.line = 462;
										last_656219 = (colontmp__656215 != null ? colontmp__656215.length : 0);
										}
										
										F.line = 463;
										line_656212 = substr_23422(colontmp__656215, first_656223, subInt(last_656219, 1));
										F.line = 16;
										log(" ", toJSStr(line_656212));
										if ((splits_656221 == 0)) {
										F.line = 464;
										break L5;
										}
										
										F.line = 465;
										splits_656221 = subInt(splits_656221, 1);
										F.line = 466;
										last_656219 = addInt(last_656219, 1);
									}
							} while(false);
						} while(false);
						F.line = 3915;
						i_656226 = addInt(i_656226, 1);
						if (!(((args_655485 != null ? args_655485.length : 0) == l_656228))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_655486 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_655486;

}

function update_538227(d1_538229, d2_538230) {
	var F={procname:"dictobject.update",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 142;
			var k_538240 = null;
			F.line = 142;
			var v_538241 = null;
			F.line = 270;
			var colontmp__538243 = {data: null, counter: 0};
			F.line = 142;
			nimCopy(colontmp__538243, d2_538230.table, NTI526188);
			L2: do {
				F.line = 272;
				var h_538247 = 0;
				F.line = 2104;
				var colontmp__538249 = 0;
				F.line = 272;
				colontmp__538249 = (colontmp__538243.data != null ? (colontmp__538243.data.length-1) : -1);
				F.line = 2107;
				var res_538251 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_538251 <= colontmp__538249)) break L4;
							F.line = 2109;
							h_538247 = res_538251;
							if (is_filled_146491(colontmp__538243.data[chckIndx(h_538247, 0, colontmp__538243.data.length+0-1)-0].Field0)) {
							F.line = 273;
							k_538240 = colontmp__538243.data[chckIndx(h_538247, 0, colontmp__538243.data.length+0-1)-0].Field1;
							F.line = 273;
							v_538241 = colontmp__538243.data[chckIndx(h_538247, 0, colontmp__538243.data.length+0-1)-0].Field2;
							F.line = 143;
							HEX5BHEX5DHEX3D_528842(d1_538229, k_538240, v_538241);
							}
							
							F.line = 2110;
							res_538251 = addInt(res_538251, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function keys_537653(d_537655) {
								var Tmp5;

	var result_537656 = null;

	var F={procname:"dictobject.keys",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		F.line = 134;
		result_537656 = new_py_list_511257();
		L1: do {
			F.line = 135;
			var key_538140 = null;
			F.line = 281;
			var colontmp__538203 = {data: null, counter: 0};
			F.line = 135;
			nimCopy(colontmp__538203, d_537655.table, NTI526188);
			L2: do {
				F.line = 283;
				var h_538207 = 0;
				F.line = 2104;
				var colontmp__538209 = 0;
				F.line = 283;
				colontmp__538209 = (colontmp__538203.data != null ? (colontmp__538203.data.length-1) : -1);
				F.line = 2107;
				var res_538211 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_538211 <= colontmp__538209)) break L4;
							F.line = 2109;
							h_538207 = res_538211;
							if (is_filled_146491(colontmp__538203.data[chckIndx(h_538207, 0, colontmp__538203.data.length+0-1)-0].Field0)) {
							F.line = 284;
							key_538140 = colontmp__538203.data[chckIndx(h_538207, 0, colontmp__538203.data.length+0-1)-0].Field1;
							F.line = 136;
							var reb_obj_538153 = append_py_list_object_method_513859(result_537656, [key_538140]);
								if (of_py_exception_object_358259(reb_obj_538153)) {
								Tmp5 = reb_obj_538153.thrown;
								}
								else {
								Tmp5 = false;
								}
								
							if (Tmp5) {
							F.line = 2895;
							var e_538159 = null;
							F.line = 2896;
							e_538159 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 138;
							e_538159.message = nimCopy(null, makeNimstrLit("No chance for append to thrown exception"), NTI138);
							F.line = 2891;
							e_538159.parent = null;
							F.line = 138;
							raiseException(e_538159, "InternalError");
							}
							
							}
							
							F.line = 2110;
							res_538211 = addInt(res_538211, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_537656;

}

function bltindir_656243(args_656258) {
	var result_656259 = null;

	var F={procname:"bltinmodule.bltindir",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 75;
		if (!(((args_656258 != null ? args_656258.length : 0) == 1))) {
		F.line = 183;
		var msg_656271 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_656276 = mnewString(0);
		F.line = 185;
		if (fmt_res_656276 != null) { fmt_res_656276 = (fmt_res_656276).concat(makeNimstrLit(" argument (")); } else { fmt_res_656276 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_656276 != null) { fmt_res_656276 = (fmt_res_656276).concat(cstrToNimstr(((args_656258 != null ? args_656258.length : 0))+"")); } else { fmt_res_656276 = cstrToNimstr(((args_656258 != null ? args_656258.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_656276 != null) { fmt_res_656276 = (fmt_res_656276).concat(makeNimstrLit(" given)")); } else { fmt_res_656276 = makeNimstrLit(" given)"); };
		msg_656271 = nimCopy(null, (makeNimstrLit("dir takes exactly 1")).concat(fmt_res_656276), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_656410 = mnewString(0);
			F.line = 187;
			if (fmt_res_656410 != null) { fmt_res_656410 = (fmt_res_656410).concat(makeNimstrLit(" argument (")); } else { fmt_res_656410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_656410 != null) { fmt_res_656410 = (fmt_res_656410).concat(cstrToNimstr(((args_656258 != null ? args_656258.length : 0))+"")); } else { fmt_res_656410 = cstrToNimstr(((args_656258 != null ? args_656258.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_656410 != null) { fmt_res_656410 = (fmt_res_656410).concat(makeNimstrLit(" given)")); } else { fmt_res_656410 = makeNimstrLit(" given)"); };
			msg_656271 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_656410), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_656609 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_656609.tk = 3;
		F.line = 106;
		excp_656609.thrown = true;
		F.line = 107;
		excp_656609.msg = new_py_string_176075(msg_656271);
		result_656259 = excp_656609;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_656611 = args_656258[chckIndx(0, 0, args_656258.length+0-1)-0];
		F.line = 78;
		var merged_dict_656612 = new_py_dict_527257();
		F.line = 79;
		update_538227(merged_dict_656612, get_type_dict_624304(obj_656611));
		if (has_dict_159278(obj_656611)) {
		F.line = 81;
		update_538227(merged_dict_656612, get_dict_159307(obj_656611));
		}
		
		result_656259 = keys_537653(merged_dict_656612);
	} while (false);
	framePtr = F.prev;

	return result_656259;

}

function bltinid_656626(args_656641) {
	var result_656642 = null;

	var F={procname:"bltinmodule.bltinid",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 85;
		if (!(((args_656641 != null ? args_656641.length : 0) == 1))) {
		F.line = 183;
		var msg_656654 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_656659 = mnewString(0);
		F.line = 185;
		if (fmt_res_656659 != null) { fmt_res_656659 = (fmt_res_656659).concat(makeNimstrLit(" argument (")); } else { fmt_res_656659 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_656659 != null) { fmt_res_656659 = (fmt_res_656659).concat(cstrToNimstr(((args_656641 != null ? args_656641.length : 0))+"")); } else { fmt_res_656659 = cstrToNimstr(((args_656641 != null ? args_656641.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_656659 != null) { fmt_res_656659 = (fmt_res_656659).concat(makeNimstrLit(" given)")); } else { fmt_res_656659 = makeNimstrLit(" given)"); };
		msg_656654 = nimCopy(null, (makeNimstrLit("id takes exactly 1")).concat(fmt_res_656659), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_656810 = mnewString(0);
			F.line = 187;
			if (fmt_res_656810 != null) { fmt_res_656810 = (fmt_res_656810).concat(makeNimstrLit(" argument (")); } else { fmt_res_656810 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_656810 != null) { fmt_res_656810 = (fmt_res_656810).concat(cstrToNimstr(((args_656641 != null ? args_656641.length : 0))+"")); } else { fmt_res_656810 = cstrToNimstr(((args_656641 != null ? args_656641.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_656810 != null) { fmt_res_656810 = (fmt_res_656810).concat(makeNimstrLit(" given)")); } else { fmt_res_656810 = makeNimstrLit(" given)"); };
			msg_656654 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_656810), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_657009 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_657009.tk = 3;
		F.line = 106;
		excp_657009.thrown = true;
		F.line = 107;
		excp_657009.msg = new_py_string_176075(msg_656654);
		result_656642 = excp_657009;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_657011 = args_656641[chckIndx(0, 0, args_656641.length+0-1)-0];
		result_656642 = new_py_int_375257(id_157596(obj_657011));
	} while (false);
	framePtr = F.prev;

	return result_656642;

}

function bltinlen_657025(args_657040) {
	var result_657041 = null;

	var F={procname:"bltinmodule.bltinlen",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 88;
		if (!(((args_657040 != null ? args_657040.length : 0) == 1))) {
		F.line = 183;
		var msg_657053 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_657058 = mnewString(0);
		F.line = 185;
		if (fmt_res_657058 != null) { fmt_res_657058 = (fmt_res_657058).concat(makeNimstrLit(" argument (")); } else { fmt_res_657058 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_657058 != null) { fmt_res_657058 = (fmt_res_657058).concat(cstrToNimstr(((args_657040 != null ? args_657040.length : 0))+"")); } else { fmt_res_657058 = cstrToNimstr(((args_657040 != null ? args_657040.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_657058 != null) { fmt_res_657058 = (fmt_res_657058).concat(makeNimstrLit(" given)")); } else { fmt_res_657058 = makeNimstrLit(" given)"); };
		msg_657053 = nimCopy(null, (makeNimstrLit("len takes exactly 1")).concat(fmt_res_657058), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_657210 = mnewString(0);
			F.line = 187;
			if (fmt_res_657210 != null) { fmt_res_657210 = (fmt_res_657210).concat(makeNimstrLit(" argument (")); } else { fmt_res_657210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_657210 != null) { fmt_res_657210 = (fmt_res_657210).concat(cstrToNimstr(((args_657040 != null ? args_657040.length : 0))+"")); } else { fmt_res_657210 = cstrToNimstr(((args_657040 != null ? args_657040.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_657210 != null) { fmt_res_657210 = (fmt_res_657210).concat(makeNimstrLit(" given)")); } else { fmt_res_657210 = makeNimstrLit(" given)"); };
			msg_657053 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_657210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_657409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_657409.tk = 3;
		F.line = 106;
		excp_657409.thrown = true;
		F.line = 107;
		excp_657409.msg = new_py_string_176075(msg_657053);
		result_657041 = excp_657409;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_657411 = args_657040[chckIndx(0, 0, args_657040.length+0-1)-0];
		F.line = 45;
		if ((obj_657411.pyType === null)) {
		F.line = 2895;
		var e_657438 = null;
		F.line = 2896;
		e_657438 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_657438.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_657438.parent = null;
		F.line = 26;
		raiseException(e_657438, "InternalError");
		}
		
		F.line = 27;
		var fun_657602 = obj_657411.pyType.magicMethods.Field23;
		if ((fun_657602 === null)) {
		F.line = 29;
		var obj_type_str_657611 = obj_657411.pyType.name;
		F.line = 30;
		var method_str_657613 = makeNimstrLit("len");
		F.line = 31;
		var msg_657615 = (makeNimstrLit("No ")).concat(method_str_657613,makeNimstrLit(" method for "),obj_type_str_657611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_657617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_657617.tk = 3;
		F.line = 106;
		excp_657617.thrown = true;
		F.line = 107;
		excp_657617.msg = new_py_string_176075(msg_657615);
		var excp_657620 = excp_657617;
		F.line = 36;
		result_657041 = excp_657620;
		break BeforeRet;
		}
		
		var fun_657802 = fun_657602;
		F.line = 46;
		var res_657804 = fun_657802(obj_657411);
		result_657041 = res_657804;
	} while (false);
	framePtr = F.prev;

	return result_657041;

}

function bltiniter_658014(args_658029) {
	var result_658030 = null;

	var F={procname:"bltinmodule.bltiniter",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 92;
		if (!(((args_658029 != null ? args_658029.length : 0) == 1))) {
		F.line = 183;
		var msg_658042 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_658047 = mnewString(0);
		F.line = 185;
		if (fmt_res_658047 != null) { fmt_res_658047 = (fmt_res_658047).concat(makeNimstrLit(" argument (")); } else { fmt_res_658047 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_658047 != null) { fmt_res_658047 = (fmt_res_658047).concat(cstrToNimstr(((args_658029 != null ? args_658029.length : 0))+"")); } else { fmt_res_658047 = cstrToNimstr(((args_658029 != null ? args_658029.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_658047 != null) { fmt_res_658047 = (fmt_res_658047).concat(makeNimstrLit(" given)")); } else { fmt_res_658047 = makeNimstrLit(" given)"); };
		msg_658042 = nimCopy(null, (makeNimstrLit("iter takes exactly 1")).concat(fmt_res_658047), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_658210 = mnewString(0);
			F.line = 187;
			if (fmt_res_658210 != null) { fmt_res_658210 = (fmt_res_658210).concat(makeNimstrLit(" argument (")); } else { fmt_res_658210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_658210 != null) { fmt_res_658210 = (fmt_res_658210).concat(cstrToNimstr(((args_658029 != null ? args_658029.length : 0))+"")); } else { fmt_res_658210 = cstrToNimstr(((args_658029 != null ? args_658029.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_658210 != null) { fmt_res_658210 = (fmt_res_658210).concat(makeNimstrLit(" given)")); } else { fmt_res_658210 = makeNimstrLit(" given)"); };
			msg_658042 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_658210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_658409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_658409.tk = 3;
		F.line = 106;
		excp_658409.thrown = true;
		F.line = 107;
		excp_658409.msg = new_py_string_176075(msg_658042);
		result_658030 = excp_658409;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_658411 = args_658029[chckIndx(0, 0, args_658029.length+0-1)-0];
		F.line = 45;
		if ((obj_658411.pyType === null)) {
		F.line = 2895;
		var e_658438 = null;
		F.line = 2896;
		e_658438 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_658438.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_658438.parent = null;
		F.line = 26;
		raiseException(e_658438, "InternalError");
		}
		
		F.line = 27;
		var fun_658602 = obj_658411.pyType.magicMethods.Field36;
		if ((fun_658602 === null)) {
		F.line = 29;
		var obj_type_str_658611 = obj_658411.pyType.name;
		F.line = 30;
		var method_str_658613 = makeNimstrLit("iter");
		F.line = 31;
		var msg_658615 = (makeNimstrLit("No ")).concat(method_str_658613,makeNimstrLit(" method for "),obj_type_str_658611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_658617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_658617.tk = 3;
		F.line = 106;
		excp_658617.thrown = true;
		F.line = 107;
		excp_658617.msg = new_py_string_176075(msg_658615);
		var excp_658620 = excp_658617;
		F.line = 36;
		result_658030 = excp_658620;
		break BeforeRet;
		}
		
		var fun_658802 = fun_658602;
		F.line = 46;
		var res_658804 = fun_658802(obj_658411);
		result_658030 = res_658804;
	} while (false);
	framePtr = F.prev;

	return result_658030;

}

function bltinrepr_659014(args_659029) {
	var result_659030 = null;

	var F={procname:"bltinmodule.bltinrepr",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 94;
		if (!(((args_659029 != null ? args_659029.length : 0) == 1))) {
		F.line = 183;
		var msg_659042 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_659047 = mnewString(0);
		F.line = 185;
		if (fmt_res_659047 != null) { fmt_res_659047 = (fmt_res_659047).concat(makeNimstrLit(" argument (")); } else { fmt_res_659047 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_659047 != null) { fmt_res_659047 = (fmt_res_659047).concat(cstrToNimstr(((args_659029 != null ? args_659029.length : 0))+"")); } else { fmt_res_659047 = cstrToNimstr(((args_659029 != null ? args_659029.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_659047 != null) { fmt_res_659047 = (fmt_res_659047).concat(makeNimstrLit(" given)")); } else { fmt_res_659047 = makeNimstrLit(" given)"); };
		msg_659042 = nimCopy(null, (makeNimstrLit("repr takes exactly 1")).concat(fmt_res_659047), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_659210 = mnewString(0);
			F.line = 187;
			if (fmt_res_659210 != null) { fmt_res_659210 = (fmt_res_659210).concat(makeNimstrLit(" argument (")); } else { fmt_res_659210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_659210 != null) { fmt_res_659210 = (fmt_res_659210).concat(cstrToNimstr(((args_659029 != null ? args_659029.length : 0))+"")); } else { fmt_res_659210 = cstrToNimstr(((args_659029 != null ? args_659029.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_659210 != null) { fmt_res_659210 = (fmt_res_659210).concat(makeNimstrLit(" given)")); } else { fmt_res_659210 = makeNimstrLit(" given)"); };
			msg_659042 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_659210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_659409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_659409.tk = 3;
		F.line = 106;
		excp_659409.thrown = true;
		F.line = 107;
		excp_659409.msg = new_py_string_176075(msg_659042);
		result_659030 = excp_659409;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_659411 = args_659029[chckIndx(0, 0, args_659029.length+0-1)-0];
		F.line = 45;
		if ((obj_659411.pyType === null)) {
		F.line = 2895;
		var e_659438 = null;
		F.line = 2896;
		e_659438 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_659438.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_659438.parent = null;
		F.line = 26;
		raiseException(e_659438, "InternalError");
		}
		
		F.line = 27;
		var fun_659602 = obj_659411.pyType.magicMethods.Field25;
		if ((fun_659602 === null)) {
		F.line = 29;
		var obj_type_str_659611 = obj_659411.pyType.name;
		F.line = 30;
		var method_str_659613 = makeNimstrLit("repr");
		F.line = 31;
		var msg_659615 = (makeNimstrLit("No ")).concat(method_str_659613,makeNimstrLit(" method for "),obj_type_str_659611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_659617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_659617.tk = 3;
		F.line = 106;
		excp_659617.thrown = true;
		F.line = 107;
		excp_659617.msg = new_py_string_176075(msg_659615);
		var excp_659620 = excp_659617;
		F.line = 36;
		result_659030 = excp_659620;
		break BeforeRet;
		}
		
		var fun_659802 = fun_659602;
		F.line = 46;
		var res_659804 = fun_659802(obj_659411);
		result_659030 = res_659804;
	} while (false);
	framePtr = F.prev;

	return result_659030;

}

function new_py_frame_556047(fun_556049) {
			var Tmp1;

	var result_589204 = null;

	var F={procname:"neval.newPyFrame",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 644;
		var obj_589219 = new_py_frame_556050(fun_556049, [], null);
			if (of_py_exception_object_358259(obj_589219)) {
			Tmp1 = obj_589219.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 2895;
		var e_589225 = null;
		F.line = 2896;
		e_589225 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 28;
		e_589225.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_589225.parent = null;
		F.line = 646;
		raiseException(e_589225, "InternalError");
		}
		else {
			F.line = 648;
			result_589204 = obj_589219;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_589204;

}

function HEX5BHEX5D_543234(s_543241, x_543244) {
	var result_543246 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_543401 = x_543244.a;
		F.line = 3707;
		var l_543601 = addInt(subInt(x_543244.b, a_543401), 1);
		F.line = 3708;
		result_543246 = new Array(chckRange(l_543601, 0, 2147483647)); for (var i=0;i<chckRange(l_543601, 0, 2147483647);++i) {result_543246[i]=null;}		L1: do {
			F.line = 3709;
			var i_543621 = 0;
			F.line = 3617;
			var i_543629 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_543629 < l_543601)) break L3;
						F.line = 3619;
						i_543621 = i_543629;
						F.line = 3709;
						result_543246[chckIndx(i_543621, 0, result_543246.length+0-1)-0] = s_543241[chckIndx(addInt(i_543621, a_543401), 0, s_543241.length+0-1)-0];
						F.line = 3620;
						i_543629 = addInt(i_543629, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_543246;

}

function HEX5BHEX5D_543832(s_543839, x_543842) {
	var result_543844 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_544001 = x_543842.a;
		F.line = 3707;
		var l_544207 = addInt(subInt(subInt((s_543839 != null ? s_543839.length : 0), x_543842.b), a_544001), 1);
		F.line = 3708;
		result_543844 = new Array(chckRange(l_544207, 0, 2147483647)); for (var i=0;i<chckRange(l_544207, 0, 2147483647);++i) {result_543844[i]=null;}		L1: do {
			F.line = 3709;
			var i_544227 = 0;
			F.line = 3617;
			var i_544235 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_544235 < l_544207)) break L3;
						F.line = 3619;
						i_544227 = i_544235;
						F.line = 3709;
						result_543844[chckIndx(i_544227, 0, result_543844.length+0-1)-0] = s_543839[chckIndx(addInt(i_544227, a_544001), 0, s_543839.length+0-1)-0];
						F.line = 3620;
						i_544235 = addInt(i_544235, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_543844;

}

function to_py_dict_543073(f_543075) {
	var result_543076 = null;

	var F={procname:"frameobject.toPyDict",prev:framePtr,filename:"../Objects/frameobject.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_543076 = new_py_dict_527257();
		F.line = 29;
		var c_543077 = f_543075.code;
		L1: do {
			F.line = 30;
			var idx_543091 = 0;
			F.line = 30;
			var v_543092 = null;
			F.line = 2352;
			var colontmp__544410 = null;
			F.line = 30;
			colontmp__544410 = f_543075.fastLocals;
			F.line = 2354;
			var i_544413 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_544413 < (colontmp__544410 != null ? colontmp__544410.length : 0))) break L3;
						F.line = 2356;
						idx_543091 = i_544413;
						F.line = 2356;
						v_543092 = colontmp__544410[chckIndx(i_544413, 0, colontmp__544410.length+0-1)-0];
						L4: do {
							if ((v_543092 === null)) {
							F.line = 32;
							break L4;
							}
							
							F.line = 33;
							HEX5BHEX5DHEX3D_528842(result_543076, c_543077.localVars[chckIndx(idx_543091, 0, c_543077.localVars.length+0-1)-0], v_543092);
						} while(false);
						F.line = 2357;
						i_544413 = addInt(i_544413, 1);
					}
			} while(false);
		} while(false);
		F.line = 34;
		var n_543107 = (c_543077.cellVars != null ? c_543077.cellVars.length : 0);
		L5: do {
			F.line = 35;
			var idx_543690 = 0;
			F.line = 35;
			var cell_543691 = null;
			F.line = 2352;
			var colontmp__544416 = null;
			F.line = 35;
			colontmp__544416 = HEX5BHEX5D_543234(f_543075.cellVars, HEX2EHEX2E_48828(0, subInt(n_543107, 1)));
			F.line = 2354;
			var i_544419 = 0;
			L6: do {
				F.line = 2355;
					L7: while (true) {
					if (!(i_544419 < (colontmp__544416 != null ? colontmp__544416.length : 0))) break L7;
						F.line = 2356;
						idx_543690 = i_544419;
						F.line = 2356;
						cell_543691 = colontmp__544416[chckIndx(i_544419, 0, colontmp__544416.length+0-1)-0];
						L8: do {
							if (!(!((cell_543691 === null)))) {
							F.line = 36;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/frameobject.nim(36, 5) `not isNil(cell)` "));
							}
							
							if ((cell_543691.refObj === null)) {
							F.line = 38;
							break L8;
							}
							
							F.line = 39;
							HEX5BHEX5DHEX3D_528842(result_543076, c_543077.cellVars[chckIndx(idx_543690, 0, c_543077.cellVars.length+0-1)-0], cell_543691.refObj);
						} while(false);
						F.line = 2357;
						i_544419 = addInt(i_544419, 1);
					}
			} while(false);
		} while(false);
		L9: do {
			F.line = 40;
			var idx_544263 = 0;
			F.line = 40;
			var cell_544264 = null;
			F.line = 2352;
			var colontmp__544423 = null;
			F.line = 40;
			colontmp__544423 = HEX5BHEX5D_543832(f_543075.cellVars, HEX2EHEX2E_81053(n_543107, 1));
			F.line = 2354;
			var i_544426 = 0;
			L10: do {
				F.line = 2355;
					L11: while (true) {
					if (!(i_544426 < (colontmp__544423 != null ? colontmp__544423.length : 0))) break L11;
						F.line = 2356;
						idx_544263 = i_544426;
						F.line = 2356;
						cell_544264 = colontmp__544423[chckIndx(i_544426, 0, colontmp__544423.length+0-1)-0];
						L12: do {
							if (!(!((cell_544264 === null)))) {
							F.line = 41;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/frameobject.nim(41, 5) `not isNil(cell)` "));
							}
							
							if ((cell_544264.refObj === null)) {
							F.line = 43;
							break L12;
							}
							
							F.line = 44;
							HEX5BHEX5DHEX3D_528842(result_543076, c_543077.freeVars[chckIndx(idx_544263, 0, c_543077.freeVars.length+0-1)-0], cell_544264.refObj);
						} while(false);
						F.line = 2357;
						i_544426 = addInt(i_544426, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_543076;

}

function bltinbuild_class_660018(args_660033) {
			var Tmp1;
			var Tmp2;

	var result_660034 = null;

	var F={procname:"bltinmodule.bltinbuildClass",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 96;
		if (!(((args_660033 != null ? args_660033.length : 0) == 2))) {
		F.line = 183;
		var msg_660046 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_660051 = mnewString(0);
		F.line = 185;
		if (fmt_res_660051 != null) { fmt_res_660051 = (fmt_res_660051).concat(makeNimstrLit(" argument (")); } else { fmt_res_660051 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_660051 != null) { fmt_res_660051 = (fmt_res_660051).concat(cstrToNimstr(((args_660033 != null ? args_660033.length : 0))+"")); } else { fmt_res_660051 = cstrToNimstr(((args_660033 != null ? args_660033.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_660051 != null) { fmt_res_660051 = (fmt_res_660051).concat(makeNimstrLit(" given)")); } else { fmt_res_660051 = makeNimstrLit(" given)"); };
		msg_660046 = nimCopy(null, (makeNimstrLit("buildClass takes exactly 2")).concat(fmt_res_660051), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_660210 = mnewString(0);
			F.line = 187;
			if (fmt_res_660210 != null) { fmt_res_660210 = (fmt_res_660210).concat(makeNimstrLit(" argument (")); } else { fmt_res_660210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_660210 != null) { fmt_res_660210 = (fmt_res_660210).concat(cstrToNimstr(((args_660033 != null ? args_660033.length : 0))+"")); } else { fmt_res_660210 = cstrToNimstr(((args_660033 != null ? args_660033.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_660210 != null) { fmt_res_660210 = (fmt_res_660210).concat(makeNimstrLit(" given)")); } else { fmt_res_660210 = makeNimstrLit(" given)"); };
			msg_660046 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_660210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_660409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_660409.tk = 3;
		F.line = 106;
		excp_660409.thrown = true;
		F.line = 107;
		excp_660409.msg = new_py_string_176075(msg_660046);
		result_660034 = excp_660409;
		break BeforeRet;
		}
		
		if (!(isObj(args_660033[chckIndx(0, 0, args_660033.length+0-1)-0].m_type, NTI545123))) {
		F.line = 185;
		var expected_660422 = nimCopy(null, py_function_object_type_545135.name, NTI138);
		F.line = 186;
		var got_660423 = nimCopy(null, args_660033[chckIndx(0, 0, args_660033.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_660424 = makeNimstrLit("buildClass");
		F.line = 188;
		F.line = 188;
		var fmt_res_660428 = mnewString(0);
		F.line = 260;
		if (fmt_res_660428 != null) { fmt_res_660428 = (fmt_res_660428).concat(expected_660422); } else { fmt_res_660428 = expected_660422.slice(); };
		F.line = 188;
		if (fmt_res_660428 != null) { fmt_res_660428 = (fmt_res_660428).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_660428 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_660428 != null) { fmt_res_660428 = (fmt_res_660428).concat(m_name_660424); } else { fmt_res_660428 = m_name_660424.slice(); };
		F.line = 188;
		if (fmt_res_660428 != null) { fmt_res_660428 = (fmt_res_660428).concat(makeNimstrLit(" (got ")); } else { fmt_res_660428 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_660428 != null) { fmt_res_660428 = (fmt_res_660428).concat(got_660423); } else { fmt_res_660428 = got_660423.slice(); };
		F.line = 188;
		if (fmt_res_660428 != null) { fmt_res_660428 = (fmt_res_660428).concat(makeNimstrLit(")")); } else { fmt_res_660428 = makeNimstrLit(")"); };
		var msg_661002 = nimCopy(null, fmt_res_660428, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_661004 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_661004.tk = 3;
		F.line = 106;
		excp_661004.thrown = true;
		F.line = 107;
		excp_661004.msg = new_py_string_176075(msg_661002);
		result_660034 = excp_661004;
		break BeforeRet;
		}
		
		F.line = 237;
		var func_obj_661006 = args_660033[chckIndx(0, 0, args_660033.length+0-1)-0];
		if (!(isObj(args_660033[chckIndx(1, 0, args_660033.length+0-1)-0].m_type, NTI175084))) {
		F.line = 185;
		var expected_661018 = nimCopy(null, py_str_object_type_175090.name, NTI138);
		F.line = 186;
		var got_661019 = nimCopy(null, args_660033[chckIndx(1, 0, args_660033.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_661020 = makeNimstrLit("buildClass");
		F.line = 188;
		F.line = 188;
		var fmt_res_661024 = mnewString(0);
		F.line = 260;
		if (fmt_res_661024 != null) { fmt_res_661024 = (fmt_res_661024).concat(expected_661018); } else { fmt_res_661024 = expected_661018.slice(); };
		F.line = 188;
		if (fmt_res_661024 != null) { fmt_res_661024 = (fmt_res_661024).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_661024 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_661024 != null) { fmt_res_661024 = (fmt_res_661024).concat(m_name_661020); } else { fmt_res_661024 = m_name_661020.slice(); };
		F.line = 188;
		if (fmt_res_661024 != null) { fmt_res_661024 = (fmt_res_661024).concat(makeNimstrLit(" (got ")); } else { fmt_res_661024 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_661024 != null) { fmt_res_661024 = (fmt_res_661024).concat(got_661019); } else { fmt_res_661024 = got_661019.slice(); };
		F.line = 188;
		if (fmt_res_661024 != null) { fmt_res_661024 = (fmt_res_661024).concat(makeNimstrLit(")")); } else { fmt_res_661024 = makeNimstrLit(")"); };
		var msg_661602 = nimCopy(null, fmt_res_661024, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_661604 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_661604.tk = 3;
		F.line = 106;
		excp_661604.thrown = true;
		F.line = 107;
		excp_661604.msg = new_py_string_176075(msg_661602);
		result_660034 = excp_661604;
		break BeforeRet;
		}
		
		F.line = 237;
		var name_661606 = args_660033[chckIndx(1, 0, args_660033.length+0-1)-0];
		F.line = 98;
		var f_661607 = new_py_frame_556047(func_obj_661006);
			if (of_py_exception_object_358259(f_661607)) {
			Tmp1 = f_661607.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 2895;
		var e_661613 = null;
		F.line = 2896;
		e_661613 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 100;
		e_661613.message = nimCopy(null, makeNimstrLit("funcObj shouldn\'t have any arg issue"), NTI138);
		F.line = 2891;
		e_661613.parent = null;
		F.line = 100;
		raiseException(e_661613, "InternalError");
		}
		
		F.line = 101;
		var ret_obj_661801 = eval_frame_556056(f_661607);
			if (of_py_exception_object_358259(ret_obj_661801)) {
			Tmp2 = ret_obj_661801.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 103;
		result_660034 = ret_obj_661801;
		break BeforeRet;
		}
		
		result_660034 = new_py_type_object_magic_650921([py_type_object_type_619361, name_661606, new_py_tuple_470057([]), to_py_dict_543073(f_661607)]);
	} while (false);
	framePtr = F.prev;

	return result_660034;

}

function register_bltin_object_655214(name_655216, obj_655217) {
	var F={procname:"bltinmodule.registerBltinObject",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
		F.line = 16;
		var name_str_655218 = new_py_string_176075(name_655216);
		if (!(!(has_key_527437(bltin_dict_539014, name_str_655218)))) {
		F.line = 17;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/bltinmodule.nim(17, 3) `not hasKey(bltinDict, nameStr)` "));
		}
		
		F.line = 18;
		HEX5BHEX5DHEX3D_528842(bltin_dict_539014, name_str_655218, obj_655217);
	framePtr = F.prev;

	
}
register_bltin_function_655027(makeNimstrLit("print"), builtin_print_655482);
register_bltin_function_655027(makeNimstrLit("dir"), bltindir_656243);
register_bltin_function_655027(makeNimstrLit("id"), bltinid_656626);
register_bltin_function_655027(makeNimstrLit("len"), bltinlen_657025);
register_bltin_function_655027(makeNimstrLit("iter"), bltiniter_658014);
register_bltin_function_655027(makeNimstrLit("repr"), bltinrepr_659014);
register_bltin_function_655027(makeNimstrLit("__build_class__"), bltinbuild_class_660018);
register_bltin_object_655214(makeNimstrLit("None"), py_none_356044);
register_bltin_object_655214(makeNimstrLit("type"), py_type_object_type_619361);
register_bltin_object_655214(makeNimstrLit("range"), py_range_object_type_595163);
register_bltin_object_655214(makeNimstrLit("list"), py_list_object_type_510269);
register_bltin_object_655214(makeNimstrLit("tuple"), py_tuple_object_type_469080);
register_bltin_object_655214(makeNimstrLit("dict"), pydict_object_type_526222);
register_bltin_object_655214(makeNimstrLit("int"), py_int_object_type_374313);
register_bltin_object_655214(makeNimstrLit("str"), py_str_object_type_175090);
register_bltin_object_655214(makeNimstrLit("property"), py_property_object_type_611310);
register_bltin_object_655214(makeNimstrLit("NameError"), py_name_error_object_type_358419);
register_bltin_object_655214(makeNimstrLit("NotImplementedError"), py_not_implemented_error_object_type_359505);
register_bltin_object_655214(makeNimstrLit("TypeError"), py_type_error_object_type_360505);
register_bltin_object_655214(makeNimstrLit("AttributeError"), py_attribute_error_object_type_361505);
register_bltin_object_655214(makeNimstrLit("ValueError"), py_value_error_object_type_362505);
register_bltin_object_655214(makeNimstrLit("IndexError"), py_index_error_object_type_363505);
register_bltin_object_655214(makeNimstrLit("StopIterError"), py_stop_iter_error_object_type_364505);
register_bltin_object_655214(makeNimstrLit("LockError"), py_lock_error_object_type_365505);
register_bltin_object_655214(makeNimstrLit("ImportError"), py_import_error_object_type_366505);
register_bltin_object_655214(makeNimstrLit("UnboundLocalError"), py_unbound_local_error_object_type_367505);
register_bltin_object_655214(makeNimstrLit("KeyError"), py_key_error_object_type_368505);
register_bltin_object_655214(makeNimstrLit("AssertionError"), py_assertion_error_object_type_369505);
register_bltin_object_655214(makeNimstrLit("ZeroDivisionError"), py_zero_division_error_object_type_370505);
register_bltin_object_655214(makeNimstrLit("RuntimeError"), py_runtime_error_object_type_371505);
register_bltin_object_655214(makeNimstrLit("SyntaxError"), py_syntax_error_object_type_372505);

function new_lexer_345814(file_name_345816) {
	var result_345817 = null;

	var F={procname:"lexer.newLexer",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_345817 = {indentLevel: 0, lineNo: 0, tokenNodes: null, fileName: null};
		F.line = 78;
		result_345817.fileName = nimCopy(null, file_name_345816, NTI138);
	framePtr = F.prev;

	return result_345817;

}

function clear_indent_345872(lexer_345874) {
	var F={procname:"lexer.clearIndent",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 87;
		lexer_345874.indentLevel = 0;
	framePtr = F.prev;

	
}

function add_345888(lexer_345890, token_345891) {
	var F={procname:"lexer.add",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 90;
		if (lexer_345890.tokenNodes != null) { lexer_345890.tokenNodes.push(token_345891); } else { lexer_345890.tokenNodes = [token_345891]; };
	framePtr = F.prev;

	
}

function contains_344163(s_344168, key_344170) {
	var result_344171 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_195940(s_344168))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_344401 = [0];
		F.line = 217;
		var index_344432 = raw_get_196221(s_344168, key_344170, hc_344401, 0);
		F.line = 218;
		result_344171 = (0 <= index_344432);
	framePtr = F.prev;

	return result_344171;

}

function new_token_node_343922(token_343924, line_no_343926, col_no_343929, content_343931) {
			var Tmp1;
		var Tmp3;

	var result_343932 = null;

	var F={procname:"lexer.newTokenNode",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 53;
		result_343932 = {token: 0, lineNo: 0, colNo: 0, content: null};
			if (!(token_343924 == 2)) Tmp1 = false; else {				Tmp1 = contains_344163({data: nimCopy(null, [{Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3391160197, Field1: makeNimstrLit("not")}, {Field0: 0, Field1: []}, {Field0: 3200026375, Field1: makeNimstrLit("if")}, {Field0: 0, Field1: []}, {Field0: 1504406153, Field1: makeNimstrLit("True")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1663863439, Field1: makeNimstrLit("break")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3819243934, Field1: makeNimstrLit("with")}, {Field0: 1810735390, Field1: makeNimstrLit("and")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 2881025954, Field1: makeNimstrLit("lambda")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1910074662, Field1: makeNimstrLit("is")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3320302635, Field1: makeNimstrLit("def")}, {Field0: 374286251, Field1: makeNimstrLit("from")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3787514417, Field1: makeNimstrLit("pass")}, {Field0: 136958130, Field1: makeNimstrLit("del")}, {Field0: 0, Field1: []}, {Field0: 3932829108, Field1: makeNimstrLit("False")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 51944888, Field1: makeNimstrLit("finally")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1898487227, Field1: makeNimstrLit("try")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3262150978, Field1: makeNimstrLit("assert")}, {Field0: 2073646403, Field1: makeNimstrLit("async")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3248289094, Field1: makeNimstrLit("yield")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 4019478986, Field1: makeNimstrLit("or")}, {Field0: 1298113611, Field1: makeNimstrLit("in")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1640121937, Field1: makeNimstrLit("None")}, {Field0: 0, Field1: []}, {Field0: 3238048723, Field1: makeNimstrLit("for")}, {Field0: 0, Field1: []}, {Field0: 231505621, Field1: makeNimstrLit("raise")}, {Field0: 3304227413, Field1: makeNimstrLit("nonlocal")}, {Field0: 2733697493, Field1: makeNimstrLit("else")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 810372829, Field1: makeNimstrLit("continue")}, {Field0: 3831236573, Field1: makeNimstrLit("class")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 2568571629, Field1: makeNimstrLit("except")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3054556913, Field1: makeNimstrLit("elif")}, {Field0: 3684180594, Field1: makeNimstrLit("global")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 447930615, Field1: makeNimstrLit("return")}, {Field0: 1878035063, Field1: makeNimstrLit("import")}, {Field0: 1977490809, Field1: makeNimstrLit("while")}, {Field0: 435603066, Field1: makeNimstrLit("as")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 2622086525, Field1: makeNimstrLit("await")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}], NTI195495), counter: 35}, content_343931);			}		if (Tmp1) {
		F.line = 55;
++excHandler;
		try {
		F.line = 56;
		result_343932.token = (Tmp3 = HEX5BHEX5D_212903(str_token_map_208604, content_343931), Tmp3[0])[Tmp3[1]];
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI3854))) {
		F.line = 2895;
		var e_344726 = null;
		F.line = 2896;
		e_344726 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 28;
		e_344726.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_344726.parent = null;
		F.line = 58;
		raiseException(e_344726, "InternalError");
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		}
		else {
			F.line = 60;
			result_343932.token = token_343924;
			F.line = 61;
			switch (token_343924) {
			case 2:
			case 3:
			case 4:
				if (!(!(eqStrings(content_343931, [])))) {
				F.line = 63;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(63, 14) `\x0Anot (content == \"\")` "));
				}
				
				F.line = 64;
				result_343932.content = nimCopy(null, content_343931, NTI138);
				break;
			default: 
				if (!(eqStrings(content_343931, []))) {
				F.line = 66;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(66, 14) `content == \"\"` "));
				}
				
				break;
			}
		}
		
		if (!(!((result_343932.token == 0)))) {
		F.line = 67;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(67, 10) `\x0Anot (result.token == NULLTOKEN)` "));
		}
		
		if (is_terminator_203174(result_343932.token)) {
		if (!(((-1 < line_no_343926) && (-1 < col_no_343929)))) {
		F.line = 69;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(69, 12) `-1 < lineNo and -1 < colNo` "));
		}
		
		F.line = 70;
		result_343932.lineNo = line_no_343926;
		F.line = 71;
		result_343932.colNo = col_no_343929;
		}
		else {
			if (!(((line_no_343926 < 0) && (col_no_343929 < 0)))) {
			F.line = 73;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(73, 12) `lineNo < 0 and colNo < 0` "));
			}
			
		}
		
	framePtr = F.prev;

	return result_343932;

}

function add_345915(lexer_345917, token_345918, col_no_345919) {
	var F={procname:"lexer.add",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		if (!(is_terminator_203174(token_345918))) {
		F.line = 93;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(93, 10) `isTerminator(token)` "));
		}
		
		F.line = 94;
		add_345888(lexer_345917, new_token_node_343922(token_345918, lexer_345917.lineNo, col_no_345919, []));
	framePtr = F.prev;

	
}

function dedent_all_346014(lexer_346016) {
	var F={procname:"lexer.dedentAll",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 98;
				L2: while (true) {
				if (!!((lexer_346016.indentLevel == 0))) break L2;
					F.line = 99;
					add_345915(lexer_346016, 7, mulInt(lexer_346016.indentLevel, 4));
					F.line = 100;
					lexer_346016.indentLevel = subInt(lexer_346016.indentLevel, 1);
				}
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_337400(t_337405, key_337407, hc_337409, hc_337409_Idx) {
						var Tmp3;

	var result_337410 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_337409[hc_337409_Idx] = hash_143900(key_337407);
		if ((hc_337409[hc_337409_Idx] == 0)) {
		F.line = 45;
		hc_337409[hc_337409_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_337422 = (hc_337409[hc_337409_Idx] & (t_337405.data != null ? (t_337405.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_337405.data[chckIndx(h_337422, 0, t_337405.data.length+0-1)-0].Field0)) break L2;
						if (!(t_337405.data[chckIndx(h_337422, 0, t_337405.data.length+0-1)-0].Field0 == hc_337409[hc_337409_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_337405.data[chckIndx(h_337422, 0, t_337405.data.length+0-1)-0].Field1, key_337407);						}					if (Tmp3) {
					F.line = 38;
					result_337410 = h_337422;
					break BeforeRet;
					}
					
					F.line = 39;
					h_337422 = next_try_146614(h_337422, (t_337405.data != null ? (t_337405.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_337410 = subInt(-1, h_337422);
	} while (false);
	framePtr = F.prev;

	return result_337410;

}

function has_key_337388(t_337394, key_337396) {
	var result_337397 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_337398 = [0];
		F.line = 264;
		result_337397 = (0 <= raw_get_337400(t_337394, key_337396, hc_337398, 0));
	framePtr = F.prev;

	return result_337397;

}

function raw_insert_340416(t_340423, data_340427, data_340427_Idx, key_340429, val_340431, hc_340433, h_340435) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_340427[data_340427_Idx][chckIndx(h_340435, 0, data_340427[data_340427_Idx].length+0-1)-0].Field1 = nimCopy(null, key_340429, NTI138);
		F.line = 65;
		data_340427[data_340427_Idx][chckIndx(h_340435, 0, data_340427[data_340427_Idx].length+0-1)-0].Field2 = val_340431;
		F.line = 66;
		data_340427[data_340427_Idx][chckIndx(h_340435, 0, data_340427[data_340427_Idx].length+0-1)-0].Field0 = hc_340433;
	framePtr = F.prev;

	
}

function enlarge_339028(t_339035) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_339043 = null;
		F.line = 314;
		n_339043 = new Array(chckRange(mulInt((t_339035.data != null ? t_339035.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_339035.data != null ? t_339035.data.length : 0), 2), 0, 2147483647);++i) {n_339043[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_339035.data; t_339035.data = n_339043; n_339043 = Tmp1;		L2: do {
			F.line = 316;
			var i_339314 = 0;
			F.line = 2088;
			var colontmp__341253 = 0;
			F.line = 316;
			colontmp__341253 = (n_339043 != null ? (n_339043.length-1) : -1);
			F.line = 2094;
			var res_341256 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_341256 <= colontmp__341253)) break L4;
						F.line = 2096;
						i_339314 = res_341256;
						F.line = 317;
						var eh_339582 = n_339043[chckIndx(i_339314, 0, n_339043.length+0-1)-0].Field0;
						if (is_filled_146491(eh_339582)) {
						F.line = 319;
						var j_339591 = (eh_339582 & (t_339035.data != null ? (t_339035.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_339035.data[chckIndx(j_339591, 0, t_339035.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_339591 = next_try_146614(j_339591, (t_339035.data != null ? (t_339035.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_340416(t_339035, t_339035, "data", n_339043[chckIndx(i_339314, 0, n_339043.length+0-1)-0].Field1, n_339043[chckIndx(i_339314, 0, n_339043.length+0-1)-0].Field2, eh_339582, j_339591);
						}
						
						F.line = 2097;
						res_341256 = addInt(res_341256, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_341274(t_341279, key_341281, hc_341283) {
	var result_341284 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_341293 = (hc_341283 & (t_341279.data != null ? (t_341279.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_341279.data[chckIndx(h_341293, 0, t_341279.data.length+0-1)-0].Field0)) break L2;
					if (((t_341279.data[chckIndx(h_341293, 0, t_341279.data.length+0-1)-0].Field0 == hc_341283) && eqStrings(t_341279.data[chckIndx(h_341293, 0, t_341279.data.length+0-1)-0].Field1, key_341281))) {
					F.line = 38;
					result_341284 = h_341293;
					break BeforeRet;
					}
					
					F.line = 39;
					h_341293 = next_try_146614(h_341293, (t_341279.data != null ? (t_341279.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_341284 = subInt(-1, h_341293);
	} while (false);
	framePtr = F.prev;

	return result_341284;

}

function HEX5BHEX5DHEX3D_338481(t_338488, key_338490, val_338492) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_338493 = [0];
		F.line = 98;
		var index_338506 = raw_get_337400(t_338488, key_338490, hc_338493, 0);
		if ((0 <= index_338506)) {
		F.line = 99;
		t_338488.data[chckIndx(index_338506, 0, t_338488.data.length+0-1)-0].Field2 = val_338492;
		}
		else {
			if (must_rehash_146509((t_338488.data != null ? t_338488.data.length : 0), t_338488.counter)) {
			F.line = 90;
			enlarge_339028(t_338488);
			F.line = 91;
			index_338506 = raw_get_known_hc_341274(t_338488, key_338490, hc_338493[0]);
			}
			
			F.line = 92;
			index_338506 = subInt(-1, index_338506);
			F.line = 93;
			raw_insert_340416(t_338488, t_338488, "data", key_338490, val_338492, hc_338493[0], index_338506);
			F.line = 100;
			t_338488.counter = addInt(t_338488.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function new_338370() {
	var result_338375 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_338401 = null;
		F.line = 211;
		r_338401 = {lines: null};
		F.line = 212;
		result_338375 = r_338401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_338375;

}

function HEX5BHEX5D_342444(t_342451, key_342453) {
	var result_342455 = [null, 0];
	var result_342455_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_342457 = [0];
		F.line = 161;
		var index_342471 = raw_get_337400(t_342451, key_342453, hc_342457, 0);
		if ((0 <= index_342471)) {
		F.line = 162;
		result_342455 = t_342451.data[chckIndx(index_342471, 0, t_342451.data.length+0-1)-0]; result_342455_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_342807 = null;
			F.line = 2896;
			e_342807 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_342807.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(key_342453), NTI138);
			F.line = 2891;
			e_342807.parent = null;
			F.line = 165;
			raiseException(e_342807, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_342455, result_342455_Idx];

}

function add_source_337238(file_path_337240, content_337241) {
		var Tmp1;

	var F={procname:"lexer.addSource",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		if (!(has_key_337388(source_files_337224[0], file_path_337240))) {
		F.line = 33;
		HEX5BHEX5DHEX3D_338481(source_files_337224[0], file_path_337240, new_338370());
		}
		
		F.line = 34;
		var s_342830 = (Tmp1 = HEX5BHEX5D_342444(source_files_337224[0], file_path_337240), Tmp1[0])[Tmp1[1]];
		L2: do {
			F.line = 23;
			var item_342843 = null;
			F.line = 3909;
			var colontmp__342856 = null;
			F.line = 36;
			colontmp__342856 = nsuSplitString(content_337241, makeNimstrLit("\x0A"), -1);
			F.line = 3911;
			var i_342859 = 0;
			F.line = 3912;
			var l_342861 = (colontmp__342856 != null ? colontmp__342856.length : 0);
			L3: do {
				F.line = 3913;
					L4: while (true) {
					if (!(i_342859 < l_342861)) break L4;
						F.line = 3914;
						item_342843 = colontmp__342856[chckIndx(i_342859, 0, colontmp__342856.length+0-1)-0];
						F.line = 24;
						var Tmp5 = nimCopy(null, item_342843, NTI138);
						if (s_342830.lines != null) { s_342830.lines.push(Tmp5); } else { s_342830.lines = [Tmp5]; };
						F.line = 3915;
						i_342859 = addInt(i_342859, 1);
						if (!(((colontmp__342856 != null ? colontmp__342856.length : 0) == l_342861))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function nsuInitSkipTable(a_136262, sub_136263) {
		var m_136264 = (sub_136263 != null ? sub_136263.length : 0);
		var i_136266 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_136266 <= 248)) break L2;
					a_136262[(i_136266 + 0)] = m_136264;
					a_136262[(i_136266 + 1)] = m_136264;
					a_136262[(i_136266 + 2)] = m_136264;
					a_136262[(i_136266 + 3)] = m_136264;
					a_136262[(i_136266 + 4)] = m_136264;
					a_136262[(i_136266 + 5)] = m_136264;
					a_136262[(i_136266 + 6)] = m_136264;
					a_136262[(i_136266 + 7)] = m_136264;
					i_136266 += 8;
				}
		} while(false);
		L3: do {
			var i_136288 = 0;
			var colontmp__136291 = 0;
			colontmp__136291 = (m_136264 - 1);
			var i_136294 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_136294 < colontmp__136291)) break L5;
						i_136288 = i_136294;
						a_136262[sub_136263[i_136288]] = ((m_136264 - 1) - i_136288);
						i_136294 += 1;
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_136311, s_136312, sub_136313, start_136314, last_136315) {
		var Tmp1;

	var result_136317 = 0;

	BeforeRet: do {
		if ((last_136315 == 0)) {
		Tmp1 = (s_136312 != null ? (s_136312.length-1) : -1);
		}
		else {
		Tmp1 = last_136315;
		}
		
		var last_136319 = Tmp1;
		var s_len_136320 = ((last_136319 - start_136314) + 1);
		var sub_last_136321 = ((sub_136313 != null ? sub_136313.length : 0) - 1);
		if ((sub_last_136321 == -1)) {
		result_136317 = start_136314;
		break BeforeRet;
		}
		
		var skip_136323 = start_136314;
		L2: do {
				L3: while (true) {
				if (!(sub_last_136321 <= (last_136319 - skip_136323))) break L3;
					var i_136324 = sub_last_136321;
					L4: do {
							L5: while (true) {
							if (!(s_136312[(skip_136323 + i_136324)] == sub_136313[i_136324])) break L5;
								if ((i_136324 == 0)) {
								result_136317 = skip_136323;
								break BeforeRet;
								}
								
								i_136324 -= 1;
							}
					} while(false);
					skip_136323 += a_136311[s_136312[(skip_136323 + sub_last_136321)]];
				}
		} while(false);
		result_136317 = -1;
		break BeforeRet;
	} while (false);

	return result_136317;

}

function nsuFindStr(s_137035, sub_137036, start_137037, last_137038) {
	var result_137040 = 0;

	BeforeRet: do {
		if (((s_137035 != null ? s_137035.length : 0) < (sub_137036 != null ? sub_137036.length : 0))) {
		result_137040 = -1;
		break BeforeRet;
		}
		
		if (((sub_137036 != null ? sub_137036.length : 0) == 1)) {
		result_137040 = nsuFindChar(s_137035, sub_137036[0], start_137037, last_137038);
		break BeforeRet;
		}
		
		var a_137042 = [new Int32Array(256)];
		nsuInitSkipTable(a_137042[0], sub_137036);
		result_137040 = nsuFindStrA(a_137042[0], s_137035, sub_137036, start_137037, last_137038);
	} while (false);

	return result_137040;

}

function new_syntax_error_156098(msg_156100, file_name_156101, line_no_156102, col_no_156103) {
	var result_156104 = null;

	var F={procname:"utils.newSyntaxError",prev:framePtr,filename:"../Utils/utils.nim",line:0};
	framePtr = F;
		F.line = 17;
		result_156104 = {m_type: NTI156088, fileName: null, lineNo: 0, colNo: 0, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 18;
		result_156104.message = nimCopy(null, msg_156100, NTI138);
		F.line = 19;
		result_156104.fileName = nimCopy(null, file_name_156101, NTI138);
		F.line = 20;
		result_156104.lineNo = line_no_156102;
		F.line = 21;
		result_156104.colNo = col_no_156103;
	framePtr = F.prev;

	return result_156104;

}

function new_seq_324467(len_324471) {
	var result_324473 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_324473 = new Array(len_324471); for (var i=0;i<len_324471;++i) {result_324473[i]=0;}	framePtr = F.prev;

	return result_324473;

}

function init_bit_set_324449(size_324451) {
	var result_324452 = {s: null, key: 0};

	var F={procname:"regex.initBitSet",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2137;
		nimCopy(result_324452, {s: new_seq_324467(chckRange(size_324451, 0, 2147483647)), key: 1}, NTI324445);
	framePtr = F.prev;

	return result_324452;

}

function new_seq_324674(len_324678) {
	var result_324680 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_324680 = new Array(len_324678); for (var i=0;i<len_324678;++i) {result_324680[i]={Field0: 0, Field1: 0, Field2: 0, Field3: 0};}	framePtr = F.prev;

	return result_324680;

}

function init_elastic_seq_324661(size_324665) {
	var result_324667 = {s: null, pos: 0};

	var F={procname:"initElasticSeq.initElasticSeq",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 680;
		nimCopy(result_324667, {s: new_seq_324674(chckRange(size_324665, 0, 2147483647)), pos: 0}, NTI324646);
	framePtr = F.prev;

	return result_324667;

}

function init_states_324655(size_324657) {
	var result_324658 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};

	var F={procname:"regex.initStates",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2157;
		nimCopy(result_324658, {states: init_elastic_seq_324661(16), ids: init_bit_set_324449(size_324657)}, NTI324639);
	framePtr = F.prev;

	return result_324658;

}

function new_seq_329937(len_329941) {
	var result_329943 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_329943 = new Array(len_329941); for (var i=0;i<len_329941;++i) {result_329943[i]={kind: 0, prev: 0, idx: 0, cpIdx: 0};}	framePtr = F.prev;

	return result_329943;

}

function init_elastic_seq_329924(size_329928) {
	var result_329930 = {s: null, pos: 0};

	var F={procname:"initElasticSeq.initElasticSeq",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 680;
		nimCopy(result_329930, {s: new_seq_329937(chckRange(size_329928, 0, 2147483647)), pos: 0}, NTI325984);
	framePtr = F.prev;

	return result_329930;

}

function add_330094(ls_330100, x_330102) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (((ls_330100.s != null ? (ls_330100.s.length-1) : -1) < ls_330100.pos)) {
		F.line = 717;
		if (ls_330100.s.length < chckRange(mulInt((ls_330100.s != null ? ls_330100.s.length : 0), 2), 0, 2147483647)) { for (var i=ls_330100.s.length;i<chckRange(mulInt((ls_330100.s != null ? ls_330100.s.length : 0), 2), 0, 2147483647);++i) ls_330100.s.push({kind: 0, prev: 0, idx: 0, cpIdx: 0}); }
               else { ls_330100.s.length = chckRange(mulInt((ls_330100.s != null ? ls_330100.s.length : 0), 2), 0, 2147483647); };
		}
		
		F.line = 718;
		nimCopy(ls_330100.s[chckIndx(ls_330100.pos, 0, ls_330100.s.length+0-1)-0], x_330102, NTI320466);
		F.line = 719;
		ls_330100.pos = addInt(ls_330100.pos, 1);
	framePtr = F.prev;

	
}

function init_data_sets_329898(size_329900, with_captures_329901) {
	var result_329902 = {Field0: {s: null, key: 0}, Field1: {s: null, pos: 0}, Field2: {s: null, pos: 0}, Field3: {states: {s: null, pos: 0}, ids: {s: null, key: 0}}, Field4: {states: {s: null, pos: 0}, ids: {s: null, key: 0}}};

	var F={procname:"regex.initDataSets",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2259;
		var captured_329907 = {s: null, pos: 0};
		F.line = 2260;
		nimCopy(result_329902, {Field0: init_bit_set_324449(size_329900), Field1: init_elastic_seq_324661(16), Field2: captured_329907, Field3: init_states_324655(size_329900), Field4: init_states_324655(size_329900)}, NTI329872);
		if (with_captures_329901) {
		F.line = 2267;
		nimCopy(result_329902.Field2, init_elastic_seq_329924(16), NTI325984);
		F.line = 2268;
		add_330094(result_329902.Field2, {kind: 0, prev: 0, idx: 0, cpIdx: 0});
		}
		
	framePtr = F.prev;

	return result_329902;

}

function fill_324534(a_324540, value_324542) {
	var F={procname:"fill.fill",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 25;
		var x_324555 = 0;
		L1: do {
			F.line = 36;
				L2: while (true) {
				if (!(x_324555 <= (a_324540 != null ? (a_324540.length-1) : -1))) break L2;
					F.line = 36;
					a_324540[chckIndx(x_324555, 0, a_324540.length+0-1)-0] = value_324542;
					F.line = 28;
					x_324555 = addInt(x_324555, 1);
				}
		} while(false);
	framePtr = F.prev;

	
}

function clear_324519(bss_324522) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if ((bss_324522.key == 2147483647)) {
		F.line = 2141;
		fill_324534(bss_324522.s, 0);
		F.line = 2142;
		bss_324522.key = 0;
		}
		
		F.line = 2143;
		bss_324522.key = addInt(bss_324522.key, 1);
	framePtr = F.prev;

	
}

function clear_325689(ls_325695) {
	var F={procname:"clear.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 713;
		ls_325695.pos = 0;
	framePtr = F.prev;

	
}

function clear_325487(ss_325490) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2168;
		clear_325689(ss_325490.states);
		F.line = 2169;
		clear_324519(ss_325490.ids);
	framePtr = F.prev;

	
}

function len_330600(ls_330605) {
	var result_330606 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 707;
		result_330606 = ls_330605.pos;
	framePtr = F.prev;

	return result_330606;

}

function clear_330819(ls_330825) {
	var F={procname:"clear.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 713;
		ls_330825.pos = 0;
	framePtr = F.prev;

	
}

function clear_330167(ds_330170) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2273;
		clear_324519(ds_330170.Field0);
		F.line = 2274;
		clear_325689(ds_330170.Field1);
		F.line = 2275;
		clear_325487(ds_330170.Field3);
		F.line = 2276;
		clear_325487(ds_330170.Field4);
		if ((0 < len_330600(ds_330170.Field2))) {
		F.line = 2278;
		clear_330819(ds_330170.Field2);
		F.line = 2279;
		add_330094(ds_330170.Field2, {kind: 0, prev: 0, idx: 0, cpIdx: 0});
		}
		
	framePtr = F.prev;

	
}

function len_325454(ls_325459) {
	var result_325460 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 707;
		result_325460 = ls_325459.pos;
	framePtr = F.prev;

	return result_325460;

}

function len_325231(ss_325233) {
	var result_325234 = 0;

	var F={procname:"regex.len",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2165;
		result_325234 = len_325454(ss_325233.states);
	framePtr = F.prev;

	return result_325234;

}

function HEX5BHEX5D_324989(ls_324994, i_324996) {
	var result_324997 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 683;
		if (!((i_324996 < ls_324994.pos))) {
		F.line = 683;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(683, 10) `i < ls.pos` "));
		}
		
		nimCopy(result_324997, ls_324994.s[chckIndx(i_324996, 0, ls_324994.s.length+0-1)-0], NTI320468);
	framePtr = F.prev;

	return result_324997;

}

function HEX5BHEX5D_324732(ss_324734, i_324735) {
	var result_324736 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};

	var F={procname:"regex.[]",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2162;
		nimCopy(result_324736, HEX5BHEX5D_324989(ss_324734.states, i_324735), NTI320468);
	framePtr = F.prev;

	return result_324736;

}

function add_325843(ls_325849, x_325851) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (((ls_325849.s != null ? (ls_325849.s.length-1) : -1) < ls_325849.pos)) {
		F.line = 717;
		if (ls_325849.s.length < chckRange(mulInt((ls_325849.s != null ? ls_325849.s.length : 0), 2), 0, 2147483647)) { for (var i=ls_325849.s.length;i<chckRange(mulInt((ls_325849.s != null ? ls_325849.s.length : 0), 2), 0, 2147483647);++i) ls_325849.s.push({Field0: 0, Field1: 0, Field2: 0, Field3: 0}); }
               else { ls_325849.s.length = chckRange(mulInt((ls_325849.s != null ? ls_325849.s.length : 0), 2), 0, 2147483647); };
		}
		
		F.line = 718;
		nimCopy(ls_325849.s[chckIndx(ls_325849.pos, 0, ls_325849.s.length+0-1)-0], x_325851, NTI320468);
		F.line = 719;
		ls_325849.pos = addInt(ls_325849.pos, 1);
	framePtr = F.prev;

	
}

function pop_331980(ls_331986) {
	var result_331987 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 722;
		F.line = 722;
		ls_331986.pos = subInt(ls_331986.pos, 1);
		nimCopy(result_331987, ls_331986.s[chckIndx(ls_331986.pos, 0, ls_331986.s.length+0-1)-0], NTI320468);
	framePtr = F.prev;

	return result_331987;

}

function contains_324619(bss_324622, x_324623) {
	var result_324624 = false;

	var F={procname:"regex.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2149;
		result_324624 = (bss_324622.s[chckIndx(x_324623, 0, bss_324622.s.length+0-1)-0] == bss_324622.key);
	framePtr = F.prev;

	return result_324624;

}

function incl_324601(bss_324604, x_324605) {
	var F={procname:"regex.incl",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2146;
		bss_324604.s[chckIndx(x_324605, 0, bss_324604.s.length+0-1)-0] = bss_324604.key;
	framePtr = F.prev;

	
}

function add_325724(ss_325727, s_325728) {
	var F={procname:"regex.add",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!(contains_324619(ss_325727.ids, ((s_325728.Field0)|0)))) {
		F.line = 2173;
		add_325843(ss_325727.states, s_325728);
		F.line = 2174;
		incl_324601(ss_325727.ids, ((s_325728.Field0)|0));
		}
		
	framePtr = F.prev;

	
}

function HEX3DHEX3D_41480(a_41482, b_41483) {
	var result_41484 = false;

	var F={procname:"unicode.==",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 25;
		result_41484 = (((a_41482)|0) == ((b_41483)|0));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_41484;

}

function contains_278220(ut_278222, utm_278223) {
	var result_278224 = false;

	var F={procname:"types.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/types.nim",line:0};
	framePtr = F;
		F.line = 36;
		result_278224 = !(((ut_278222 & utm_278223) == 0));
	framePtr = F.prev;

	return result_278224;

}

function unicode_types_278027(cp_278029) {
	var result_278030 = 0;

	var F={procname:"types.unicodeTypes",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/types.nim",line:0};
	framePtr = F;
		if (!((((cp_278029)|0) <= 1114111))) {
		F.line = 23;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/unicodedb-0.6.0/unicodedb/types.nim(23, 10) `int(cp) <= 0x0010FFFF` "));
		}
		
		F.line = 25;
		var block_offset_278201 = mulInt(((types_offsets_277053[chckIndx(divInt(((cp_278029)|0), 128), 0, types_offsets_277053.length+0-1)-0])|0), 128);
		F.line = 26;
		var idx_278202 = types_indices_277234[chckIndx(addInt(block_offset_278201, modInt(((cp_278029)|0), 128)), 0, types_indices_277234.length+0-1)-0];
		F.line = 27;
		result_278030 = ((types_data_277237[chckIndx(idx_278202, 0, types_data_277237.length+0-1)-0])|0);
	framePtr = F.prev;

	return result_278030;

}

function is_alpha_num_282457(r_282459) {
	var result_282460 = false;

	var F={procname:"regex.isAlphaNum",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 371;
		result_282460 = contains_278220(unicode_types_278027(r_282459), 128);
	framePtr = F.prev;

	return result_282460;

}

function is_word_boundary_282547(r_282549, nxt_282550) {
		var Tmp1;
		var Tmp2;

	var result_282551 = false;

	var F={procname:"regex.isWordBoundary",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 392;
		F.line = 386;
		if (!!(HEX3DHEX3D_41480(r_282549, -1))) Tmp1 = false; else {			Tmp1 = is_alpha_num_282457(r_282549);		}		var is_word_282557 = Tmp1;
		F.line = 387;
		if (!!(HEX3DHEX3D_41480(nxt_282550, -1))) Tmp2 = false; else {			Tmp2 = is_alpha_num_282457(nxt_282550);		}		var is_nxt_word_282559 = Tmp2;
		result_282551 = ((is_word_282557 && !(is_nxt_word_282559)) || (!(is_word_282557) && is_nxt_word_282559));
	framePtr = F.prev;

	return result_282551;

}

function is_alpha_num_ascii_282474(r_282476) {
		var Tmp1;

	var result_282477 = false;

	var F={procname:"regex.isAlphaNumAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 374;
		F.line = 376;
		switch (((r_282476)|0)) {
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_282477 = Tmp1;
	framePtr = F.prev;

	return result_282477;

}

function is_word_boundary_ascii_282573(r_282575, nxt_282576) {
		var Tmp1;
		var Tmp2;

	var result_282577 = false;

	var F={procname:"regex.isWordBoundaryAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 397;
		F.line = 386;
		if (!!(HEX3DHEX3D_41480(r_282575, -1))) Tmp1 = false; else {			Tmp1 = is_alpha_num_ascii_282474(r_282575);		}		var is_word_282583 = Tmp1;
		F.line = 387;
		if (!!(HEX3DHEX3D_41480(nxt_282576, -1))) Tmp2 = false; else {			Tmp2 = is_alpha_num_ascii_282474(nxt_282576);		}		var is_nxt_word_282585 = Tmp2;
		result_282577 = ((is_word_282583 && !(is_nxt_word_282585)) || (!(is_word_282583) && is_nxt_word_282585));
	framePtr = F.prev;

	return result_282577;

}

function match_282599(n_282601, r_282602, nxt_282603) {
		var Tmp1;

	var result_282604 = false;

	var F={procname:"regex.match",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 402;
		F.line = 405;
		switch (n_282601.kind) {
		case 14:
		case 10:
			Tmp1 = HEX3DHEX3D_41480(r_282602, -1);
			break;
		case 15:
		case 11:
			Tmp1 = HEX3DHEX3D_41480(nxt_282603, -1);
			break;
		case 12:
			Tmp1 = (HEX3DHEX3D_41480(r_282602, -1) || HEX3DHEX3D_41480(r_282602, 10));
			break;
		case 13:
			Tmp1 = (HEX3DHEX3D_41480(nxt_282603, -1) || HEX3DHEX3D_41480(nxt_282603, 10));
			break;
		case 16:
			Tmp1 = is_word_boundary_282547(r_282602, nxt_282603);
			break;
		case 17:
			Tmp1 = !(is_word_boundary_282547(r_282602, nxt_282603));
			break;
		case 28:
			Tmp1 = is_word_boundary_ascii_282573(r_282602, nxt_282603);
			break;
		case 29:
			Tmp1 = !(is_word_boundary_ascii_282573(r_282602, nxt_282603));
			break;
		case 40:
			Tmp1 = HEX3DHEX3D_41480(n_282601.cp, nxt_282603);
			break;
		case 42:
			Tmp1 = !(HEX3DHEX3D_41480(n_282601.cp, nxt_282603));
			break;
		case 41:
			Tmp1 = HEX3DHEX3D_41480(n_282601.cp, r_282602);
			break;
		case 43:
			Tmp1 = !(HEX3DHEX3D_41480(n_282601.cp, r_282602));
			break;
		default: 
			if (true) {
			F.line = 433;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(433, 12) `false` "));
			}
			
			Tmp1 = false;
			break;
		}
		result_282604 = Tmp1;
	framePtr = F.prev;

	return result_282604;

}

function to_visit_step_330977(result_330984, n_330985, ci_330986, si_330987, ei_330988) {
	var F={procname:"regex.toVisitStep",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!((n_330985.outB == -1))) {
		F.line = 2288;
		add_325843(result_330984, {Field0: n_330985.outB, Field1: ci_330986, Field2: si_330987, Field3: ei_330988});
		}
		
		if (!((n_330985.outA == -1))) {
		F.line = 2290;
		add_325843(result_330984, {Field0: n_330985.outA, Field1: ci_330986, Field2: si_330987, Field3: ei_330988});
		}
		
	framePtr = F.prev;

	
}

function high_332382(ls_332387) {
	var result_332388 = 0;

	var F={procname:"high.high",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 710;
		result_332388 = subInt(ls_332387.pos, 1);
	framePtr = F.prev;

	return result_332388;

}

function step_331258(result_331261, pattern_331262, state_331263, ds_331265, cp_331266, nxt_331267) {
								var Tmp4;
								var Tmp5;

	var F={procname:"regex.step",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!((len_325454(ds_331265.Field1) == 0))) {
		F.line = 2299;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(2299, 10) `len(ds.toVisit) == 0` "));
		}
		
		F.line = 2300;
		add_325843(ds_331265.Field1, state_331263);
		L1: do {
			F.line = 2301;
				L2: while (true) {
				if (!(0 < len_325454(ds_331265.Field1))) break L2;
					L3: do {
						F.line = 2302;
						var s_332015 = pop_331980(ds_331265.Field1);
						if (contains_324619(ds_331265.Field0, ((s_332015.Field0)|0))) {
						F.line = 2304;
						break L3;
						}
						
						F.line = 2305;
						incl_324601(ds_331265.Field0, ((s_332015.Field0)|0));
						F.line = 2306;
						var n_332018 = nimCopy(null, pattern_331262.states[chckIndx(s_332015.Field0, 0, pattern_331262.states.length+0-1)-0], NTI281230);
						F.line = 2307;
						switch (n_332018.kind) {
						case 0:
						case 1:
						case 45:
						case 18:
						case 19:
						case 20:
						case 21:
						case 22:
						case 23:
						case 24:
						case 25:
						case 26:
						case 27:
						case 30:
						case 31:
						case 32:
						case 33:
						case 34:
						case 35:
						case 36:
						case 37:
						case 38:
						case 39:
							F.line = 2309;
							add_325724(result_331261, s_332015);
							break;
						case 10:
						case 11:
						case 12:
						case 13:
						case 14:
						case 15:
						case 16:
						case 17:
						case 28:
						case 29:
						case 40:
						case 41:
						case 42:
						case 43:
							if (match_282599(n_332018, cp_331266, nxt_331267)) {
							F.line = 2312;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							}
							
							break;
						case 3:
								if (!n_332018.isCapturing) Tmp4 = false; else {									Tmp4 = (0 < len_330600(ds_331265.Field2));								}							if (!(Tmp4)) {
							F.line = 2316;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							F.line = 2317;
							break L3;
							}
							
							F.line = 2318;
							add_330094(ds_331265.Field2, {kind: 0, cpIdx: state_331263.Field3, prev: s_332015.Field1, idx: n_332018.idx});
							F.line = 2323;
							to_visit_step_330977(ds_331265.Field1, n_332018, high_332382(ds_331265.Field2), s_332015.Field2, s_332015.Field3);
							break;
						case 4:
								if (!n_332018.isCapturing) Tmp5 = false; else {									Tmp5 = (0 < len_330600(ds_331265.Field2));								}							if (!(Tmp5)) {
							F.line = 2327;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							F.line = 2328;
							break L3;
							}
							
							F.line = 2329;
							add_330094(ds_331265.Field2, {kind: 1, cpIdx: subInt(state_331263.Field3, 1), prev: s_332015.Field1, idx: n_332018.idx});
							F.line = 2334;
							to_visit_step_330977(ds_331265.Field1, n_332018, high_332382(ds_331265.Field2), s_332015.Field2, s_332015.Field3);
							break;
						default: 
							F.line = 2336;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							break;
						}
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function is_decimal_279406(c_279408) {
		var Tmp1;

	var result_279409 = false;

	var F={procname:"unicodeplus.isDecimal",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodeplus-0.4.0/unicodeplus.nim",line:0};
	framePtr = F;
		F.line = 47;
		if ((((c_279408)|0) < 128)) {
		Tmp1 = nums_279349[chckIndx(((c_279408)|0), 0, nums_279349.length+0-1)-0];
		}
		else {
		Tmp1 = contains_278220(unicode_types_278027(c_279408), 1);
		}
		
		result_279409 = Tmp1;
	framePtr = F.prev;

	return result_279409;

}

function is_white_space_283256(r_283258) {
	var result_283259 = false;

	var F={procname:"regex.isWhiteSpace",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 447;
		result_283259 = contains_278220(unicode_types_278027(r_283258), 64);
	framePtr = F.prev;

	return result_283259;

}

function is_valid_283826(s_283831) {
	var result_283832 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_283832 = (0 < (s_283831.data != null ? s_283831.data.length : 0));
	framePtr = F.prev;

	return result_283832;

}

function hash_284235(x_284239) {
	var result_284240 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_284240 = x_284239;
	framePtr = F.prev;

	return result_284240;

}

function raw_get_284221(s_284226, key_284228, hc_284230, hc_284230_Idx) {
						var Tmp3;

	var result_284231 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_284261 = hash_284235(key_284228);
		if ((hc_284261 == 0)) {
		F.line = 164;
		hc_284261 = 314159265;
		}
		
		hc_284230[hc_284230_Idx] = hc_284261;
		F.line = 150;
		var h_284271 = (hc_284230[hc_284230_Idx] & (s_284226.data != null ? (s_284226.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_284226.data[chckIndx(h_284271, 0, s_284226.data.length+0-1)-0].Field0)) break L2;
						if (!(s_284226.data[chckIndx(h_284271, 0, s_284226.data.length+0-1)-0].Field0 == hc_284230[hc_284230_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_41480(s_284226.data[chckIndx(h_284271, 0, s_284226.data.length+0-1)-0].Field1, key_284228);						}					if (Tmp3) {
					F.line = 157;
					result_284231 = h_284271;
					break BeforeRet;
					}
					
					F.line = 158;
					h_284271 = next_try_154431(h_284271, (s_284226.data != null ? (s_284226.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_284231 = subInt(-1, h_284271);
	} while (false);
	framePtr = F.prev;

	return result_284231;

}

function contains_283798(s_283803, key_283805) {
	var result_283806 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_283826(s_283803))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_284201 = [0];
		F.line = 217;
		var index_285001 = raw_get_284221(s_283803, key_283805, hc_284201, 0);
		F.line = 218;
		result_283806 = (0 <= index_285001);
	framePtr = F.prev;

	return result_283806;

}

function HEX3CHEX3D_282814(x_282816, y_282817) {
	var result_282818 = false;

	var F={procname:"regex.<=",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 437;
		result_282818 = (((x_282816)|0) <= ((y_282817)|0));
	framePtr = F.prev;

	return result_282818;

}

function contains_283213(s_283220, value_283222) {
	var result_283223 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1272;
		result_283223 = (HEX3CHEX3D_282814(s_283220.a, value_283222) && HEX3CHEX3D_282814(value_283222, s_283220.b));
	framePtr = F.prev;

	return result_283223;

}

function contains_282834(sr_282841, r_282842) {
	var result_282843 = false;

	var F={procname:"regex.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 440;
		result_282843 = false;
		L1: do {
			F.line = 441;
			var sl_283015 = {a: 0, b: 0};
			F.line = 3911;
			var i_283240 = 0;
			F.line = 3912;
			var l_283242 = (sr_282841 != null ? sr_282841.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_283240 < l_283242)) break L3;
						F.line = 3914;
						nimCopy(sl_283015, sr_282841[chckIndx(i_283240, 0, sr_282841.length+0-1)-0], NTI281333);
						F.line = 442;
						result_282843 = contains_283213(sl_283015, r_282842);
						if (result_282843) {
						F.line = 444;
						break L1;
						}
						
						F.line = 3915;
						i_283240 = addInt(i_283240, 1);
						if (!(((sr_282841 != null ? sr_282841.length : 0) == l_283242))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_282843;

}

function binary_search_51351(c_51353, tab_51355, len_51356, stride_51357) {
			var Tmp3;

	var result_51358 = 0;

	var F={procname:"unicode.binarySearch",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1306;
		var n_51359 = len_51356;
		F.line = 1307;
		var t_51361 = 0;
		L1: do {
			F.line = 1308;
				L2: while (true) {
				if (!(1 < n_51359)) break L2;
					F.line = 1309;
					var m_51364 = divInt(n_51359, 2);
					F.line = 1310;
					var p_51365 = addInt(t_51361, mulInt(m_51364, stride_51357));
					if ((tab_51355[chckIndx(p_51365, 0, tab_51355.length+0-1)-0] <= ((c_51353)|0))) {
					F.line = 1312;
					t_51361 = p_51365;
					F.line = 1313;
					n_51359 = subInt(n_51359, m_51364);
					}
					else {
						F.line = 1315;
						n_51359 = m_51364;
					}
					
				}
		} while(false);
			if (!!((n_51359 == 0))) Tmp3 = false; else {				Tmp3 = (tab_51355[chckIndx(t_51361, 0, tab_51355.length+0-1)-0] <= ((c_51353)|0));			}		if (Tmp3) {
		F.line = 1317;
		result_51358 = t_51361;
		break BeforeRet;
		}
		
		F.line = 1318;
		result_51358 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_51358;

}

function nucisUpper(c_51690) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51691 = false;

	var F={procname:"unicode.isUpper",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1367;
		var c_51692 = c_51690;
		F.line = 1369;
		var p_51722 = binary_search_51351(c_51692, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 398, 399, 702, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1025, 1036, 580, 1038, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 548, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 8544, 8559, 516, 9398, 9423, 526, 65313, 65338, 532], 36, 3);
			if (!(0 <= p_51722)) Tmp2 = false; else {				Tmp2 = (tolower_ranges_50536[chckIndx(p_51722, 0, tolower_ranges_50536.length+0-1)-0] <= ((c_51692)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51692)|0) <= tolower_ranges_50536[chckIndx(addInt(p_51722, 1), 0, tolower_ranges_50536.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1371;
		result_51691 = true;
		break BeforeRet;
		}
		
		F.line = 1372;
		p_51722 = binary_search_51351(c_51692, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 416, 501, 418, 501, 420, 501, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 902, 538, 908, 564, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1217, 501, 1219, 501, 1223, 501, 1227, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1272, 501, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491], 333, 2);
			if (!(0 <= p_51722)) Tmp3 = false; else {				Tmp3 = (((c_51692)|0) == tolower_singlets_50648[chckIndx(p_51722, 0, tolower_singlets_50648.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1374;
		result_51691 = true;
		break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_51691;

}

function nuctoLower(c_51383) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51384 = 0;

	var F={procname:"unicode.toLower",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1323;
		var c_51385 = c_51383;
		F.line = 1324;
		var p_51416 = binary_search_51351(c_51385, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 398, 399, 702, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1025, 1036, 580, 1038, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 548, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 8544, 8559, 516, 9398, 9423, 526, 65313, 65338, 532], 36, 3);
			if (!(0 <= p_51416)) Tmp2 = false; else {				Tmp2 = (tolower_ranges_50536[chckIndx(p_51416, 0, tolower_ranges_50536.length+0-1)-0] <= ((c_51385)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51385)|0) <= tolower_ranges_50536[chckIndx(addInt(p_51416, 1), 0, tolower_ranges_50536.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1326;
		result_51384 = subInt(addInt(((c_51385)|0), tolower_ranges_50536[chckIndx(addInt(p_51416, 2), 0, tolower_ranges_50536.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1327;
		p_51416 = binary_search_51351(c_51385, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 416, 501, 418, 501, 420, 501, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 902, 538, 908, 564, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1217, 501, 1219, 501, 1223, 501, 1227, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1272, 501, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491], 333, 2);
			if (!(0 <= p_51416)) Tmp3 = false; else {				Tmp3 = (((c_51385)|0) == tolower_singlets_50648[chckIndx(p_51416, 0, tolower_singlets_50648.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1329;
		result_51384 = subInt(addInt(((c_51385)|0), tolower_singlets_50648[chckIndx(addInt(p_51416, 1), 0, tolower_singlets_50648.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1330;
		result_51384 = c_51385;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_51384;

}

function nucisLower(c_51609) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51610 = false;

	var F={procname:"unicode.isLower",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1355;
		var c_51611 = c_51609;
		F.line = 1357;
		var p_51641 = binary_search_51351(c_51611, [97, 122, 468, 224, 246, 468, 248, 254, 468, 598, 599, 295, 600, 601, 298, 650, 651, 283, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1105, 1116, 420, 1118, 1119, 420, 1377, 1414, 452, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 8560, 8575, 484, 9424, 9449, 474, 65345, 65370, 468], 35, 3);
			if (!(0 <= p_51641)) Tmp2 = false; else {				Tmp2 = (toupper_ranges_49743[chckIndx(p_51641, 0, toupper_ranges_49743.length+0-1)-0] <= ((c_51611)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51611)|0) <= toupper_ranges_49743[chckIndx(addInt(p_51641, 1), 0, toupper_ranges_49743.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1359;
		result_51610 = true;
		break BeforeRet;
		}
		
		F.line = 1360;
		p_51641 = binary_search_51351(c_51611, [255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 409, 499, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 595, 290, 596, 294, 603, 297, 608, 295, 611, 293, 616, 291, 617, 289, 623, 289, 626, 287, 643, 282, 648, 282, 658, 281, 940, 462, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1224, 499, 1228, 499, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1273, 499, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8131, 509, 8165, 507, 8179, 509], 340, 2);
			if (!(0 <= p_51641)) Tmp3 = false; else {				Tmp3 = (((c_51611)|0) == toupper_singlets_49852[chckIndx(p_51641, 0, toupper_singlets_49852.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1362;
		result_51610 = true;
		break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_51610;

}

function nuctoUpper(c_51470) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51471 = 0;

	var F={procname:"unicode.toUpper",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1335;
		var c_51472 = c_51470;
		F.line = 1336;
		var p_51503 = binary_search_51351(c_51472, [97, 122, 468, 224, 246, 468, 248, 254, 468, 598, 599, 295, 600, 601, 298, 650, 651, 283, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1105, 1116, 420, 1118, 1119, 420, 1377, 1414, 452, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 8560, 8575, 484, 9424, 9449, 474, 65345, 65370, 468], 35, 3);
			if (!(0 <= p_51503)) Tmp2 = false; else {				Tmp2 = (toupper_ranges_49743[chckIndx(p_51503, 0, toupper_ranges_49743.length+0-1)-0] <= ((c_51472)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51472)|0) <= toupper_ranges_49743[chckIndx(addInt(p_51503, 1), 0, toupper_ranges_49743.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1338;
		result_51471 = subInt(addInt(((c_51472)|0), toupper_ranges_49743[chckIndx(addInt(p_51503, 2), 0, toupper_ranges_49743.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1339;
		p_51503 = binary_search_51351(c_51472, [255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 409, 499, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 595, 290, 596, 294, 603, 297, 608, 295, 611, 293, 616, 291, 617, 289, 623, 289, 626, 287, 643, 282, 648, 282, 658, 281, 940, 462, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1224, 499, 1228, 499, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1273, 499, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8131, 509, 8165, 507, 8179, 509], 340, 2);
			if (!(0 <= p_51503)) Tmp3 = false; else {				Tmp3 = (((c_51472)|0) == toupper_singlets_49852[chckIndx(p_51503, 0, toupper_singlets_49852.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1341;
		result_51471 = subInt(addInt(((c_51472)|0), toupper_singlets_49852[chckIndx(addInt(p_51503, 1), 0, toupper_singlets_49852.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1342;
		result_51471 = c_51472;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_51471;

}

function swap_case_283387(r_283389) {
	var result_283390 = 0;

	var F={procname:"regex.swapCase",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (nucisUpper(r_283389)) {
		F.line = 478;
		result_283390 = nuctoLower(r_283389);
		}
		else {
		if (nucisLower(r_283389)) {
		F.line = 480;
		result_283390 = nuctoUpper(r_283389);
		}
		else {
			F.line = 482;
			result_283390 = r_283389;
		}
		}
	framePtr = F.prev;

	return result_283390;

}

function is_digit_ascii_283327(r_283329) {
		var Tmp1;

	var result_283330 = false;

	var F={procname:"regex.isDigitAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 462;
		F.line = 462;
		switch (((r_283329)|0)) {
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_283330 = Tmp1;
	framePtr = F.prev;

	return result_283330;

}

function is_white_space_ascii_283273(r_283275) {
		var Tmp1;

	var result_283276 = false;

	var F={procname:"regex.isWhiteSpaceAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 450;
		F.line = 450;
		switch (((r_283275)|0)) {
		case 32:
		case 9:
		case 10:
		case 13:
		case 12:
		case 11:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_283276 = Tmp1;
	framePtr = F.prev;

	return result_283276;

}

function contains_276029(a_276031, b_276032) {
	var result_276033 = false;

	var F={procname:"properties.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		F.line = 54;
		result_276033 = !(((((b_276032)|0) & ((a_276031)|0)) == 0));
	framePtr = F.prev;

	return result_276033;

}

function unicode_category_276620(props_276622) {
	var result_276623 = 0;

	var F={procname:"properties.unicodeCategory",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		F.line = 205;
		result_276623 = props_276622[chckIndx(0, 0, props_276622.length+0-1)-0];
	framePtr = F.prev;

	return result_276623;

}

function properties_276517(cp_276519) {
	var result_276520 = new Int32Array(4);

	var F={procname:"properties.properties",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		if (!((((cp_276519)|0) <= 1114111))) {
		F.line = 197;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim(197, 10) `int(cp) <= 0x0010FFFF` "));
		}
		
		F.line = 199;
		var block_offset_276601 = mulInt(((props_offsets_260203[chckIndx(divInt(((cp_276519)|0), 128), 0, props_offsets_260203.length+0-1)-0])|0), 128);
		F.line = 200;
		var idx_276602 = props_indices_268070[chckIndx(addInt(block_offset_276601, modInt(((cp_276519)|0), 128)), 0, props_indices_268070.length+0-1)-0];
		F.line = 201;
		nimCopy(result_276520, props_data_275248[chckIndx(idx_276602, 0, props_data_275248.length+0-1)-0], NTI275250);
	framePtr = F.prev;

	return result_276520;

}

function unicode_category_276638(cp_276640) {
	var result_276641 = 0;

	var F={procname:"properties.unicodeCategory",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		F.line = 208;
		result_276641 = unicode_category_276620(properties_276517(cp_276640));
	framePtr = F.prev;

	return result_276641;

}

function is_any_ascii_283357(r_283359) {
		var Tmp1;

	var result_283360 = false;

	var F={procname:"regex.isAnyAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 469;
		if (!(((r_283359)|0) <= 127)) Tmp1 = false; else {			Tmp1 = !(HEX3DHEX3D_41480(r_283359, 10));		}		result_283360 = Tmp1;
	framePtr = F.prev;

	return result_283360;

}

function match_283404(n_283406, r_283407) {
		var Tmp1;

	var result_283408 = false;

	var F={procname:"regex.match",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 485;
		if (!(!(HEX3DHEX3D_41480(r_283407, -1)))) {
		F.line = 488;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(488, 10) `\x0Anot (r == -1)` "));
		}
		
		F.line = 489;
		switch (n_283406.kind) {
		case 45:
			Tmp1 = false;
			break;
		case 18:
			Tmp1 = is_alpha_num_282457(r_283407);
			break;
		case 22:
			Tmp1 = !(is_alpha_num_282457(r_283407));
			break;
		case 19:
			Tmp1 = is_decimal_279406(r_283407);
			break;
		case 23:
			Tmp1 = !(is_decimal_279406(r_283407));
			break;
		case 20:
			Tmp1 = is_white_space_283256(r_283407);
			break;
		case 24:
			Tmp1 = !(is_white_space_283256(r_283407));
			break;
		case 38:
		case 39:
			F.line = 505;
			var matches_285017 = (contains_283798(n_283406.cps, r_283407) || contains_282834(n_283406.ranges, r_283407));
			if (!(matches_285017)) {
			L2: do {
				F.line = 509;
				var nn_285215 = {kind: 0, cp: 0, outA: 0, outB: 0, isGreedy: false, idx: 0, isCapturing: false, name: null, flags: null, min: 0, max: 0, cps: {data: null, counter: 0}, ranges: null, shorthands: null, cc: 0};
				F.line = 3909;
				var colontmp__285402 = null;
				F.line = 509;
				colontmp__285402 = n_283406.shorthands;
				F.line = 3911;
				var i_285405 = 0;
				F.line = 3912;
				var l_285407 = (colontmp__285402 != null ? colontmp__285402.length : 0);
				L3: do {
					F.line = 3913;
						L4: while (true) {
						if (!(i_285405 < l_285407)) break L4;
							F.line = 3914;
							nimCopy(nn_285215, colontmp__285402[chckIndx(i_285405, 0, colontmp__285402.length+0-1)-0], NTI281230);
							F.line = 510;
							matches_285017 = match_283404(nn_285215, r_283407);
							if (matches_285017) {
							F.line = 511;
							break L2;
							}
							
							F.line = 3915;
							i_285405 = addInt(i_285405, 1);
							if (!(((colontmp__285402 != null ? colontmp__285402.length : 0) == l_285407))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			}
			
			Tmp1 = ((matches_285017 && (n_283406.kind == 38)) || (!(matches_285017) && (n_283406.kind == 39)));
			break;
		case 26:
			Tmp1 = !(HEX3DHEX3D_41480(r_283407, 10));
			break;
		case 27:
			Tmp1 = true;
			break;
		case 1:
			Tmp1 = (HEX3DHEX3D_41480(r_283407, n_283406.cp) || HEX3DHEX3D_41480(r_283407, swap_case_283387(n_283406.cp)));
			break;
		case 30:
			Tmp1 = is_alpha_num_ascii_282474(r_283407);
			break;
		case 31:
			Tmp1 = is_digit_ascii_283327(r_283407);
			break;
		case 32:
			Tmp1 = is_white_space_ascii_283273(r_283407);
			break;
		case 21:
			Tmp1 = contains_276029(n_283406.cc, unicode_category_276638(r_283407));
			break;
		case 33:
			Tmp1 = !(is_alpha_num_ascii_282474(r_283407));
			break;
		case 34:
			Tmp1 = !(is_digit_ascii_283327(r_283407));
			break;
		case 35:
			Tmp1 = !(is_white_space_ascii_283273(r_283407));
			break;
		case 25:
			Tmp1 = !(contains_276029(n_283406.cc, unicode_category_276638(r_283407)));
			break;
		case 36:
			Tmp1 = is_any_ascii_283357(r_283407);
			break;
		case 37:
			Tmp1 = (is_any_ascii_283357(r_283407) || HEX3DHEX3D_41480(r_283407, 10));
			break;
		default: 
			if (!((n_283406.kind == 0))) {
			F.line = 541;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(541, 12) `n.kind == reChar` "));
			}
			
			Tmp1 = HEX3DHEX3D_41480(n_283406.cp, r_283407);
			break;
		}
		result_283408 = Tmp1;
	framePtr = F.prev;

	return result_283408;

}

function step_from_332790(result_332793, n_332794, pattern_332795, ds_332797, ci_332798, si_332799, ei_332800, cp_332801, nxt_332802) {
	var F={procname:"regex.stepFrom",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!((n_332794.outA == -1))) {
		F.line = 2350;
		var state_332809 = {Field0: n_332794.outA, Field1: ci_332798, Field2: si_332799, Field3: ei_332800};
		F.line = 2351;
		step_331258(result_332793, pattern_332795, state_332809, ds_332797, cp_332801, nxt_332802);
		}
		
		if (!((n_332794.outB == -1))) {
		F.line = 2353;
		var state_332816 = {Field0: n_332794.outB, Field1: ci_332798, Field2: si_332799, Field3: ei_332800};
		F.line = 2354;
		step_331258(result_332793, pattern_332795, state_332816, ds_332797, cp_332801, nxt_332802);
		}
		
	framePtr = F.prev;

	
}

function clear_320763(t_320770) {
	var F={procname:"clear.clear",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 152;
			var i_321005 = 0;
			F.line = 3616;
			var colontmp__322691 = 0;
			F.line = 152;
			colontmp__322691 = (t_320770.data != null ? t_320770.data.length : 0);
			F.line = 3617;
			var i_322694 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_322694 < colontmp__322691)) break L3;
						F.line = 3619;
						i_321005 = i_322694;
						F.line = 154;
						t_320770.data[chckIndx(i_321005, 0, t_320770.data.length+0-1)-0].Field0 = 0;
						F.line = 155;
						F.line = 120;
						var v_322172 = null;
						t_320770.data[chckIndx(i_321005, 0, t_320770.data.length+0-1)-0].Field1 = nimCopy(null, v_322172, NTI138);
						F.line = 156;
						F.line = 120;
						var v_322689 = 0;
						t_320770.data[chckIndx(i_321005, 0, t_320770.data.length+0-1)-0].Field2 = v_322689;
						F.line = 3620;
						i_322694 = addInt(i_322694, 1);
					}
			} while(false);
		} while(false);
		F.line = 157;
		t_320770.counter = 0;
	framePtr = F.prev;

	
}

function clear_320523(m_320526) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if ((0 < (m_320526.captures != null ? m_320526.captures.length : 0))) {
		F.line = 2031;
		if (m_320526.captures.length < 0) { for (var i=m_320526.captures.length;i<0;++i) m_320526.captures.push({a: 0, b: 0}); }
               else { m_320526.captures.length = 0; };
		}
		
		if ((0 < (m_320526.groups != null ? m_320526.groups.length : 0))) {
		F.line = 2033;
		if (m_320526.groups.length < 0) { for (var i=m_320526.groups.length;i<0;++i) m_320526.groups.push({a: 0, b: 0}); }
               else { m_320526.groups.length = 0; };
		}
		
		F.line = 2034;
		clear_320763(m_320526.namedGroups);
		F.line = 2035;
		nimCopy(m_320526.boundaries, HEX2EHEX2E_48828(0, -1), NTI25907);
	framePtr = F.prev;

	
}

function new_seq_326020(len_326024) {
	var result_326026 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_326026 = new Array(len_326024); for (var i=0;i<len_326024;++i) {result_326026[i]={a: 0, b: 0};}	framePtr = F.prev;

	return result_326026;

}

function HEX5BHEX5D_326322(ls_326327, i_326329) {
	var result_326330 = {kind: 0, prev: 0, idx: 0, cpIdx: 0};

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 683;
		if (!((i_326329 < ls_326327.pos))) {
		F.line = 683;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(683, 10) `i < ls.pos` "));
		}
		
		nimCopy(result_326330, ls_326327.s[chckIndx(i_326329, 0, ls_326327.s.length+0-1)-0], NTI320466);
	framePtr = F.prev;

	return result_326330;

}

function populate_captures_325974(result_325977, captured_325991, c_idx_325992, gc_325993) {
	var F={procname:"regex.populateCaptures",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (((result_325977.groups != null ? result_325977.groups.length : 0) == 0)) {
		F.line = 2190;
		result_325977.groups = nimCopy(null, new_seq_326020(chckRange(gc_325993, 0, 2147483647)), NTI326025);
		}
		else {
			F.line = 2192;
		if (result_325977.groups.length < chckRange(gc_325993, 0, 2147483647)) { for (var i=result_325977.groups.length;i<chckRange(gc_325993, 0, 2147483647);++i) result_325977.groups.push({a: 0, b: 0}); }
               else { result_325977.groups.length = chckRange(gc_325993, 0, 2147483647); };
		}
		
		F.line = 2194;
		var curr_326067 = c_idx_325992;
		F.line = 2195;
		var ci_326069 = 0;
		L1: do {
			F.line = 2196;
				L2: while (true) {
				if (!!((curr_326067 == 0))) break L2;
					F.line = 2197;
					var c_326418 = HEX5BHEX5D_326322(captured_325991, curr_326067);
					F.line = 2198;
					result_325977.groups[chckIndx(c_326418.idx, 0, result_325977.groups.length+0-1)-0].b = addInt(result_325977.groups[chckIndx(c_326418.idx, 0, result_325977.groups.length+0-1)-0].b, 1);
					F.line = 2199;
					ci_326069 = addInt(ci_326069, 1);
					F.line = 2200;
					curr_326067 = c_326418.prev;
				}
		} while(false);
		F.line = 2201;
		var gi_326438 = 0;
		L3: do {
			F.line = 2202;
			var g_326616 = null;
			F.line = 3920;
			var i_327125 = 0;
			F.line = 3921;
			var l_327127 = (result_325977.groups != null ? result_325977.groups.length : 0);
			L4: do {
				F.line = 3922;
					L5: while (true) {
					if (!(i_327125 < l_327127)) break L5;
						F.line = 3923;
						g_326616 = result_325977.groups[chckIndx(i_327125, 0, result_325977.groups.length+0-1)-0];
						if ((0 < g_326616.b)) {
						F.line = 2204;
						gi_326438 = addInt(gi_326438, divInt(g_326616.b, 2));
						F.line = 2205;
						g_326616.a = gi_326438;
						F.line = 2206;
						g_326616.b = subInt(gi_326438, 1);
						}
						else {
							F.line = 2208;
							g_326616.b = -1;
						}
						
						F.line = 3924;
						i_327125 = addInt(i_327125, 1);
						if (!(((result_325977.groups != null ? result_325977.groups.length : 0) == l_327127))) {
						F.line = 3925;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3925, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((modInt(ci_326069, 2) == 0))) {
		F.line = 2209;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(2209, 10) `ci mod 2 == 0` "));
		}
		
		if (((result_325977.captures != null ? result_325977.captures.length : 0) == 0)) {
		F.line = 2211;
		result_325977.captures = nimCopy(null, new_seq_326020(chckRange(divInt(ci_326069, 2), 0, 2147483647)), NTI326025);
		}
		else {
			F.line = 2213;
		if (result_325977.captures.length < chckRange(divInt(ci_326069, 2), 0, 2147483647)) { for (var i=result_325977.captures.length;i<chckRange(divInt(ci_326069, 2), 0, 2147483647);++i) result_325977.captures.push({a: 0, b: 0}); }
               else { result_325977.captures.length = chckRange(divInt(ci_326069, 2), 0, 2147483647); };
		}
		
		F.line = 2214;
		curr_326067 = c_idx_325992;
		L6: do {
			F.line = 2215;
				L7: while (true) {
				if (!!((curr_326067 == 0))) break L7;
					F.line = 2217;
					var c_327110 = HEX5BHEX5D_326322(captured_325991, curr_326067);
					F.line = 2218;
					var g_327111 = nimCopy(null, result_325977.groups[chckIndx(c_327110.idx, 0, result_325977.groups.length+0-1)-0], NTI25907);
					F.line = 2219;
					switch (c_327110.kind) {
					case 1:
						F.line = 2221;
						result_325977.captures[chckIndx(subInt(g_327111.a, 1), 0, result_325977.captures.length+0-1)-0].b = c_327110.cpIdx;
						break;
					case 0:
						F.line = 2223;
						result_325977.captures[chckIndx(subInt(g_327111.a, 1), 0, result_325977.captures.length+0-1)-0].a = c_327110.cpIdx;
						F.line = 2224;
						result_325977.groups[chckIndx(c_327110.idx, 0, result_325977.groups.length+0-1)-0].a = subInt(result_325977.groups[chckIndx(c_327110.idx, 0, result_325977.groups.length+0-1)-0].a, 1);
						break;
					}
					F.line = 2225;
					curr_326067 = c_327110.prev;
				}
		} while(false);
	framePtr = F.prev;

	
}

function set_regex_match_332830(m_332833, pattern_332834, ds_332835) {
	var result_332836 = false;

	var F={procname:"regex.setRegexMatch",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2360;
		result_332836 = false;
		L1: do {
			F.line = 2361;
			var state_332837 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
			F.line = 2176;
			var colontmp__332859 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};
			F.line = 2361;
			nimCopy(colontmp__332859, ds_332835.Field3, NTI324639);
			L2: do {
				F.line = 2177;
				var s_332863 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
				F.line = 725;
				var colontmp__332865 = {s: null, pos: 0};
				F.line = 2177;
				nimCopy(colontmp__332865, colontmp__332859.states, NTI324646);
				F.line = 726;
				var i_332867 = 0;
				L3: do {
					F.line = 727;
						L4: while (true) {
						if (!(i_332867 < colontmp__332865.pos)) break L4;
							F.line = 728;
							nimCopy(s_332863, colontmp__332865.s[chckIndx(i_332867, 0, colontmp__332865.s.length+0-1)-0], NTI320468);
							F.line = 2178;
							nimCopy(state_332837, s_332863, NTI320468);
							if ((pattern_332834.states[chckIndx(state_332837.Field0, 0, pattern_332834.states.length+0-1)-0].kind == 45)) {
							F.line = 2363;
							clear_320523(m_332833);
							F.line = 2364;
							nimCopy(m_332833.boundaries, HEX2EHEX2E_48828(state_332837.Field2, subInt(state_332837.Field3, 1)), NTI25907);
							if ((0 < pattern_332834.groupsCount)) {
							F.line = 2366;
							populate_captures_325974(m_332833, ds_332835.Field2, state_332837.Field1, ((pattern_332834.groupsCount)|0));
							F.line = 2367;
							nimCopy(m_332833.namedGroups, pattern_332834.namedGroups, NTI301986);
							}
							
							F.line = 2368;
							result_332836 = true;
							break BeforeRet;
							}
							
							F.line = 729;
							i_332867 = addInt(i_332867, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_332836;

}

function find_impl_333461(ds_333464, s_333465, pattern_333466, m_333468, start_333469) {
									var Tmp6;
									var Tmp7;
					var Tmp15;
					var Tmp16;

	var result_333471 = false;

	var F={procname:"regex.findImpl",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2465;
		clear_330167(ds_333464);
		F.line = 2466;
		var states_count_333480 = chckRange((pattern_333466.states != null ? (pattern_333466.states.length-1) : -1), -32768, 32767);
		F.line = 2467;
		var si_333481 = start_333469;
		L1: do {
			F.line = 2468;
			var i_333482 = 0;
			F.line = 2468;
			var cp_333483 = 0;
			F.line = 2468;
			var nxt_333484 = 0;
			F.line = 2241;
			var prev_333552 = -1;
			F.line = 2242;
			var j_333554 = 0;
			L2: do {
				F.line = 2243;
				var i_333556 = 0;
				F.line = 2243;
				var r_333558 = 0;
				F.line = 2231;
				var i_333560 = start_333469;
				F.line = 2232;
				var result_333562 = 0;
				L3: do {
					F.line = 2233;
						L4: while (true) {
						if (!(i_333560 < (s_333465 != null ? s_333465.length : 0))) break L4;
							if ((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] <= 127)) {
							F.line = 59;
							result_333562 = s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0];
							F.line = 60;
							i_333560 = addInt(i_333560, 1);
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 5) == 6)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 2))) {
							F.line = 64;
							result_333562 = (((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 31) << 6) | (s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63));
							F.line = 66;
							i_333560 = addInt(i_333560, 2);
							}
							else {
								F.line = 68;
								result_333562 = 65533;
								F.line = 69;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 4) == 14)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 3))) {
							F.line = 74;
							result_333562 = ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 15) << 12) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63));
							F.line = 77;
							i_333560 = addInt(i_333560, 3);
							}
							else {
								F.line = 79;
								result_333562 = 65533;
								F.line = 80;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 3) == 30)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 4))) {
							F.line = 86;
							result_333562 = (((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 7) << 18) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 12)) | ((s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 3), 0, s_333465.length+0-1)-0] & 63));
							F.line = 90;
							i_333560 = addInt(i_333560, 4);
							}
							else {
								F.line = 92;
								result_333562 = 65533;
								F.line = 93;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 2) == 62)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 5))) {
							F.line = 100;
							result_333562 = ((((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 3) << 24) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 18)) | ((s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63) << 12)) | ((s_333465[chckIndx(addInt(i_333560, 3), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 4), 0, s_333465.length+0-1)-0] & 63));
							F.line = 105;
							i_333560 = addInt(i_333560, 5);
							}
							else {
								F.line = 107;
								result_333562 = 65533;
								F.line = 108;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 1) == 126)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 6))) {
							F.line = 116;
							result_333562 = (((((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 1) << 30) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 24)) | ((s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63) << 18)) | ((s_333465[chckIndx(addInt(i_333560, 3), 0, s_333465.length+0-1)-0] & 63) << 12)) | ((s_333465[chckIndx(addInt(i_333560, 4), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 5), 0, s_333465.length+0-1)-0] & 63));
							F.line = 122;
							i_333560 = addInt(i_333560, 6);
							}
							else {
								F.line = 124;
								result_333562 = 65533;
								F.line = 125;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
								F.line = 127;
								result_333562 = s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0];
								F.line = 128;
								i_333560 = addInt(i_333560, 1);
							}
							}}}}}
							F.line = 2235;
							i_333556 = i_333560;
							F.line = 2235;
							r_333558 = result_333562;
							F.line = 2244;
							i_333482 = j_333554;
							F.line = 2244;
							cp_333483 = prev_333552;
							F.line = 2244;
							nxt_333484 = r_333558;
							L5: do {
									if ((len_325231(ds_333464.Field3) == 0)) Tmp6 = true; else {										Tmp6 = !((pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, subInt(len_325231(ds_333464.Field3), 1)).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45));									}								if (Tmp6) {
								F.line = 2472;
								clear_324519(ds_333464.Field0);
								F.line = 2473;
								var state_333500 = {Field0: states_count_333480, Field1: 0, Field2: si_333481, Field3: si_333481};
								F.line = 2474;
								step_331258(ds_333464.Field3, pattern_333466, state_333500, ds_333464, cp_333483, nxt_333484);
								F.line = 2475;
								si_333481 = i_333482;
								}
								
									if (!(0 < len_325231(ds_333464.Field3))) Tmp7 = false; else {										Tmp7 = (pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, 0).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45);									}								if (Tmp7) {
								F.line = 2479;
								break L1;
								}
								
								if (HEX3DHEX3D_41480(cp_333483, -1)) {
								F.line = 2481;
								break L5;
								}
								
								L8: do {
									F.line = 2482;
									var st_333512 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
									F.line = 2176;
									var colontmp__333540 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};
									F.line = 2482;
									nimCopy(colontmp__333540, ds_333464.Field3, NTI324639);
									L9: do {
										F.line = 2177;
										var s_333544 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
										F.line = 725;
										var colontmp__333546 = {s: null, pos: 0};
										F.line = 2177;
										nimCopy(colontmp__333546, colontmp__333540.states, NTI324646);
										F.line = 726;
										var i_333548 = 0;
										L10: do {
											F.line = 727;
												L11: while (true) {
												if (!(i_333548 < colontmp__333546.pos)) break L11;
													F.line = 728;
													nimCopy(s_333544, colontmp__333546.s[chckIndx(i_333548, 0, colontmp__333546.s.length+0-1)-0], NTI320468);
													F.line = 2178;
													nimCopy(st_333512, s_333544, NTI320468);
													L12: do {
														F.line = 2483;
														var n_333513 = nimCopy(null, pattern_333466.states[chckIndx(st_333512.Field0, 0, pattern_333466.states.length+0-1)-0], NTI281230);
														if ((n_333513.kind == 45)) {
														F.line = 2486;
														add_325724(ds_333464.Field4, st_333512);
														F.line = 2487;
														break L8;
														}
														
														if (!(match_283404(n_333513, cp_333483))) {
														F.line = 2489;
														break L12;
														}
														
														F.line = 2490;
														clear_324519(ds_333464.Field0);
														F.line = 2491;
														step_from_332790(ds_333464.Field4, n_333513, pattern_333466, ds_333464, st_333512.Field1, st_333512.Field2, i_333482, cp_333483, nxt_333484);
													} while(false);
													F.line = 729;
													i_333548 = addInt(i_333548, 1);
												}
										} while(false);
									} while(false);
								} while(false);
								F.line = 2493;
								var Tmp13 = ds_333464.Field3; ds_333464.Field3 = ds_333464.Field4; ds_333464.Field4 = Tmp13;								F.line = 2494;
								clear_325487(ds_333464.Field4);
							} while(false);
							F.line = 2245;
							prev_333552 = r_333558;
							F.line = 2246;
							j_333554 = i_333556;
						}
				} while(false);
			} while(false);
			F.line = 2247;
			i_333482 = j_333554;
			F.line = 2247;
			cp_333483 = prev_333552;
			F.line = 2247;
			nxt_333484 = -1;
			L14: do {
					if ((len_325231(ds_333464.Field3) == 0)) Tmp15 = true; else {						Tmp15 = !((pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, subInt(len_325231(ds_333464.Field3), 1)).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45));					}				if (Tmp15) {
				F.line = 2472;
				clear_324519(ds_333464.Field0);
				F.line = 2473;
				var state_333571 = {Field0: states_count_333480, Field1: 0, Field2: si_333481, Field3: si_333481};
				F.line = 2474;
				step_331258(ds_333464.Field3, pattern_333466, state_333571, ds_333464, cp_333483, nxt_333484);
				F.line = 2475;
				si_333481 = i_333482;
				}
				
					if (!(0 < len_325231(ds_333464.Field3))) Tmp16 = false; else {						Tmp16 = (pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, 0).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45);					}				if (Tmp16) {
				F.line = 2479;
				break L1;
				}
				
				if (HEX3DHEX3D_41480(cp_333483, -1)) {
				F.line = 2481;
				break L14;
				}
				
				L17: do {
					F.line = 2482;
					var st_333573 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
					F.line = 2176;
					var colontmp__333575 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};
					F.line = 2482;
					nimCopy(colontmp__333575, ds_333464.Field3, NTI324639);
					L18: do {
						F.line = 2177;
						var s_333577 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
						F.line = 725;
						var colontmp__333579 = {s: null, pos: 0};
						F.line = 2177;
						nimCopy(colontmp__333579, colontmp__333575.states, NTI324646);
						F.line = 726;
						var i_333581 = 0;
						L19: do {
							F.line = 727;
								L20: while (true) {
								if (!(i_333581 < colontmp__333579.pos)) break L20;
									F.line = 728;
									nimCopy(s_333577, colontmp__333579.s[chckIndx(i_333581, 0, colontmp__333579.s.length+0-1)-0], NTI320468);
									F.line = 2178;
									nimCopy(st_333573, s_333577, NTI320468);
									L21: do {
										F.line = 2483;
										var n_333583 = nimCopy(null, pattern_333466.states[chckIndx(st_333573.Field0, 0, pattern_333466.states.length+0-1)-0], NTI281230);
										if ((n_333583.kind == 45)) {
										F.line = 2486;
										add_325724(ds_333464.Field4, st_333573);
										F.line = 2487;
										break L17;
										}
										
										if (!(match_283404(n_333583, cp_333483))) {
										F.line = 2489;
										break L21;
										}
										
										F.line = 2490;
										clear_324519(ds_333464.Field0);
										F.line = 2491;
										step_from_332790(ds_333464.Field4, n_333583, pattern_333466, ds_333464, st_333573.Field1, st_333573.Field2, i_333482, cp_333483, nxt_333484);
									} while(false);
									F.line = 729;
									i_333581 = addInt(i_333581, 1);
								}
						} while(false);
					} while(false);
				} while(false);
				F.line = 2493;
				var Tmp22 = ds_333464.Field3; ds_333464.Field3 = ds_333464.Field4; ds_333464.Field4 = Tmp22;				F.line = 2494;
				clear_325487(ds_333464.Field4);
			} while(false);
		} while(false);
		F.line = 2495;
		result_333471 = set_regex_match_332830(m_333468, pattern_333466, ds_333464);
	framePtr = F.prev;

	return result_333471;

}

function find_333597(s_333599, pattern_333600, m_333602, start_333603) {
	var result_333605 = false;

	var F={procname:"regex.find",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2512;
		var ds_333615 = [init_data_sets_329898((pattern_333600.states != null ? pattern_333600.states.length : 0), (0 < pattern_333600.groupsCount))];
		F.line = 2515;
		result_333605 = find_impl_333461(ds_333615[0], s_333599, pattern_333600, m_333602, start_333603);
	framePtr = F.prev;

	return result_333605;

}

function get_next_token_346041(lexer_346043, line_346044, idx_346046, idx_346046_Idx) {
				var Tmp1;
				var Tmp2;
				var Tmp3;
				var Tmp4;
				var Tmp5;
				var Tmp6;
				var Tmp7;
				var Tmp8;
				var Tmp9;
				var Tmp10;
				var Tmp11;
				var Tmp12;
				var Tmp13;
				var Tmp14;
				var Tmp15;
				var Tmp16;
				var Tmp17;
				var Tmp18;
				var Tmp19;
				var Tmp20;
				var Tmp21;
				var Tmp22;
				var Tmp23;

	var result_346047 = null;

	var F={procname:"lexer.getNextToken",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 139;
		switch (line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0]) {
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 95:
			F.line = 114;
			var m_346105 = [{captures: null, groups: null, namedGroups: {data: null, counter: 0}, boundaries: {a: 0, b: 0}}];
			if (!(find_333597(line_346044, regex_name_343885[0], m_346105[0], idx_346046[idx_346046_Idx]))) {
			F.line = 116;
			raiseException(new_syntax_error_156098(makeNimstrLit("Invalid identifier"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			F.line = 117;
			var first_346108 = m_346105[0].boundaries.a;
			F.line = 118;
			var last_346110 = m_346105[0].boundaries.b;
			F.line = 119;
			idx_346046[idx_346046_Idx] = addInt(last_346110, 1);
			F.line = 120;
			result_346047 = new_token_node_343922(2, lexer_346043.lineNo, first_346108, HEX5BHEX5D_48874(line_346044, HEX2EHEX2E_48828(first_346108, last_346110)));
			break;
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			F.line = 114;
			var m_346161 = [{captures: null, groups: null, namedGroups: {data: null, counter: 0}, boundaries: {a: 0, b: 0}}];
			if (!(find_333597(line_346044, regex_number_343908[0], m_346161[0], idx_346046[idx_346046_Idx]))) {
			F.line = 116;
			raiseException(new_syntax_error_156098(makeNimstrLit("Invalid number"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			F.line = 117;
			var first_346164 = m_346161[0].boundaries.a;
			F.line = 118;
			var last_346166 = m_346161[0].boundaries.b;
			F.line = 119;
			idx_346046[idx_346046_Idx] = addInt(last_346166, 1);
			F.line = 120;
			result_346047 = new_token_node_343922(3, lexer_346043.lineNo, first_346164, HEX5BHEX5D_48874(line_346044, HEX2EHEX2E_48828(first_346164, last_346166)));
			break;
		case 34:
		case 39:
			F.line = 145;
			var pairing_char_346210 = line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0];
			if ((idx_346046[idx_346046_Idx] == subInt((line_346044 != null ? line_346044.length : 0), 1))) {
			F.line = 148;
			raiseException(new_syntax_error_156098(makeNimstrLit("Invalid string syntax"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			F.line = 149;
			var l_346211 = skip_until_38050(line_346044, pairing_char_346210, addInt(idx_346046[idx_346046_Idx], 1));
			if ((addInt(addInt(idx_346046[idx_346046_Idx], l_346211), 1) == (line_346044 != null ? line_346044.length : 0))) {
			F.line = 151;
			raiseException(new_syntax_error_156098(makeNimstrLit("Invalid string syntax"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			else {
				F.line = 153;
				result_346047 = new_token_node_343922(4, lexer_346043.lineNo, idx_346046[idx_346046_Idx], HEX5BHEX5D_48874(line_346044, HEX2EHEX2E_48828(addInt(idx_346046[idx_346046_Idx], 1), addInt(idx_346046[idx_346046_Idx], l_346211))));
				F.line = 154;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], addInt(l_346211, 2));
			}
			
			break;
		case 10:
			F.line = 157;
			result_346047 = new_token_node_343922(5, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 158;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 40:
			F.line = 123;
			result_346047 = new_token_node_343922(8, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 160;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 41:
			F.line = 123;
			result_346047 = new_token_node_343922(9, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 162;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 91:
			F.line = 123;
			result_346047 = new_token_node_343922(10, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 164;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 93:
			F.line = 123;
			result_346047 = new_token_node_343922(11, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 166;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 58:
			F.line = 123;
			result_346047 = new_token_node_343922(12, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 168;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 44:
			F.line = 123;
			result_346047 = new_token_node_343922(13, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 170;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 59:
			F.line = 123;
			result_346047 = new_token_node_343922(14, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 172;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 43:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp1 = false; else {					Tmp1 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp1) {
			F.line = 131;
			result_346047 = new_token_node_343922(37, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(15, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 45:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp2 = false; else {					Tmp2 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp2) {
			F.line = 177;
			result_346047 = new_token_node_343922(38, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 178;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp3 = false; else {					Tmp3 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 62);				}			if (Tmp3) {
			F.line = 180;
			result_346047 = new_token_node_343922(52, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 181;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(16, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 183;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			}
			break;
		case 42:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp4 = false; else {					Tmp4 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 42);				}			if (Tmp4) {
			F.line = 186;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp5 = false; else {					Tmp5 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp5) {
			F.line = 188;
			result_346047 = new_token_node_343922(47, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 189;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 191;
				result_346047 = new_token_node_343922(36, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 192;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(17, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 194;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 47:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp6 = false; else {					Tmp6 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 47);				}			if (Tmp6) {
			F.line = 197;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp7 = false; else {					Tmp7 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp7) {
			F.line = 199;
			result_346047 = new_token_node_343922(49, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 200;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 202;
				result_346047 = new_token_node_343922(48, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 203;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(18, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 205;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 124:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp8 = false; else {					Tmp8 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp8) {
			F.line = 131;
			result_346047 = new_token_node_343922(43, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(19, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 38:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp9 = false; else {					Tmp9 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp9) {
			F.line = 131;
			result_346047 = new_token_node_343922(42, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(20, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 60:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp10 = false; else {					Tmp10 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp10) {
			F.line = 212;
			result_346047 = new_token_node_343922(30, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 213;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp11 = false; else {					Tmp11 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 60);				}			if (Tmp11) {
			F.line = 215;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp12 = false; else {					Tmp12 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp12) {
			F.line = 217;
			result_346047 = new_token_node_343922(45, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 218;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 220;
				result_346047 = new_token_node_343922(34, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 221;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp13 = false; else {					Tmp13 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 62);				}			if (Tmp13) {
			F.line = 223;
			raiseException(new_syntax_error_156098(makeNimstrLit("<> in PEP401 not implemented"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(21, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 225;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			}}
			break;
		case 62:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp14 = false; else {					Tmp14 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp14) {
			F.line = 228;
			result_346047 = new_token_node_343922(31, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 229;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp15 = false; else {					Tmp15 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 62);				}			if (Tmp15) {
			F.line = 231;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp16 = false; else {					Tmp16 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp16) {
			F.line = 233;
			result_346047 = new_token_node_343922(46, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 234;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 236;
				result_346047 = new_token_node_343922(35, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 237;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(22, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 239;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			}
			break;
		case 61:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp17 = false; else {					Tmp17 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp17) {
			F.line = 131;
			result_346047 = new_token_node_343922(28, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(23, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 46:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 2))) Tmp19 = false; else {					Tmp19 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 46);				}				if (!Tmp19) Tmp18 = false; else {					Tmp18 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 2), 0, line_346044.length+0-1)-0] == 46);				}			if (Tmp18) {
			F.line = 244;
			result_346047 = new_token_node_343922(53, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 245;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 3);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(24, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 247;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 37:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp20 = false; else {					Tmp20 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp20) {
			F.line = 131;
			result_346047 = new_token_node_343922(41, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(25, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 123:
			F.line = 123;
			result_346047 = new_token_node_343922(26, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 251;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 125:
			F.line = 123;
			result_346047 = new_token_node_343922(27, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 253;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 33:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp21 = false; else {					Tmp21 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp21) {
			F.line = 256;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			F.line = 123;
			result_346047 = new_token_node_343922(29, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 257;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			else {
				F.line = 259;
				raiseException(new_syntax_error_156098(makeNimstrLit("Single ! not allowed"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			break;
		case 126:
			F.line = 123;
			result_346047 = new_token_node_343922(32, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 261;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 94:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp22 = false; else {					Tmp22 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp22) {
			F.line = 131;
			result_346047 = new_token_node_343922(44, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(33, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 64:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp23 = false; else {					Tmp23 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp23) {
			F.line = 131;
			result_346047 = new_token_node_343922(51, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(50, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		default: 
			F.line = 267;
			var fmt_res_346845 = mnewString(0);
			F.line = 267;
			if (fmt_res_346845 != null) { fmt_res_346845 = (fmt_res_346845).concat(makeNimstrLit("Unknown character ")); } else { fmt_res_346845 = makeNimstrLit("Unknown character "); };
			F.line = 268;
			if (fmt_res_346845 != null) { addChar(fmt_res_346845, line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0]); } else { fmt_res_346845 = [line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0]]; };
			F.line = 267;
			raiseException(new_syntax_error_156098(fmt_res_346845, [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			break;
		}
		if (!(!((result_346047 == null)))) {
		F.line = 268;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(268, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_346047;

}

function lex_one_line_347214(lexer_347216, line_347217) {
	var F={procname:"lexer.lexOneLine",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((nsuFindStr(line_347217, makeNimstrLit("\x0A"), 0, 0) == -1))) {
		F.line = 273;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(273, 10) `find(line, \"\\n\", 0, 0) == -1` "));
		}
		
		F.line = 275;
		var idx_347402 = [0];
		L1: do {
			F.line = 277;
				L2: while (true) {
				if (!((idx_347402[0] < (line_347217 != null ? line_347217.length : 0)) && (line_347217[chckIndx(idx_347402[0], 0, line_347217.length+0-1)-0] == 32))) break L2;
					F.line = 278;
					idx_347402[0] = addInt(idx_347402[0], 1);
				}
		} while(false);
		if (((idx_347402[0] == (line_347217 != null ? line_347217.length : 0)) || (line_347217[chckIndx(idx_347402[0], 0, line_347217.length+0-1)-0] == 35))) {
		F.line = 280;
		break BeforeRet;
		}
		
		if (!((modInt(idx_347402[0], 4) == 0))) {
		F.line = 283;
		raiseException(new_syntax_error_156098(makeNimstrLit("Indentation must be 4 spaces."), [], lexer_347216.lineNo, 0), "SyntaxError:ObjectType");
		}
		
		F.line = 284;
		var indent_level_347412 = divInt(idx_347402[0], 4);
		F.line = 285;
		var diff_347413 = subInt(indent_level_347412, lexer_347216.indentLevel);
		if ((diff_347413 < 0)) {
		L3: do {
			F.line = 287;
			var i_347422 = 0;
			F.line = 3617;
			var i_347450 = diff_347413;
			L4: do {
				F.line = 3618;
					L5: while (true) {
					if (!(i_347450 < 0)) break L5;
						F.line = 3619;
						i_347422 = i_347450;
						F.line = 288;
						add_345915(lexer_347216, 7, mulInt(addInt(lexer_347216.indentLevel, i_347422), 4));
						F.line = 3620;
						i_347450 = addInt(i_347450, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L6: do {
				F.line = 290;
				var i_347433 = 0;
				F.line = 3617;
				var i_347455 = 0;
				L7: do {
					F.line = 3618;
						L8: while (true) {
						if (!(i_347455 < diff_347413)) break L8;
							F.line = 3619;
							i_347433 = i_347455;
							F.line = 291;
							add_345915(lexer_347216, 6, mulInt(addInt(lexer_347216.indentLevel, i_347433), 4));
							F.line = 3620;
							i_347455 = addInt(i_347455, 1);
						}
				} while(false);
			} while(false);
		}
		
		F.line = 292;
		lexer_347216.indentLevel = indent_level_347412;
		L9: do {
			F.line = 294;
				L10: while (true) {
				if (!(idx_347402[0] < (line_347217 != null ? line_347217.length : 0))) break L10;
					F.line = 295;
					switch (line_347217[chckIndx(idx_347402[0], 0, line_347217.length+0-1)-0]) {
					case 32:
						F.line = 297;
						idx_347402[0] = addInt(idx_347402[0], 1);
						break;
					case 35:
						F.line = 299;
						break L9;
						break;
					default: 
						F.line = 301;
						add_345888(lexer_347216, get_next_token_346041(lexer_347216, line_347217, idx_347402, 0));
						break;
					}
				}
		} while(false);
		F.line = 302;
		add_345915(lexer_347216, 5, idx_347402[0]);
	} while (false);
	framePtr = F.prev;

	
}

function lex_string_347471(lexer_347473, input_347474, mode_347476) {
	var F={procname:"lexer.lexString",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(!((mode_347476 == 2)))) {
		F.line = 306;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(306, 10) `\x0Anot (mode == Eval)` "));
		}
		
		if (((mode_347476 == 0) && ((input_347474 != null ? input_347474.length : 0) == 0))) {
		F.line = 310;
		dedent_all_346014(lexer_347473);
		F.line = 311;
		add_345915(lexer_347473, 5, 0);
		F.line = 312;
		lexer_347473.lineNo = addInt(lexer_347473.lineNo, 1);
		F.line = 313;
		add_source_337238(lexer_347473.fileName, input_347474);
		F.line = 314;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 316;
			var line_347620 = null;
			F.line = 455;
			var last_347810 = 0;
			F.line = 456;
			var splits_347812 = -1;
			L2: do {
				F.line = 614;
					L3: while (true) {
					if (!(last_347810 <= (input_347474 != null ? input_347474.length : 0))) break L3;
						F.line = 459;
						var first_347814 = last_347810;
						L4: do {
							F.line = 460;
								L5: while (true) {
								if (!((last_347810 < (input_347474 != null ? input_347474.length : 0)) && !(substr_eq_132789(input_347474, last_347810, makeNimstrLit("\x0A"))))) break L5;
									F.line = 461;
									last_347810 = addInt(last_347810, 1);
								}
						} while(false);
						if ((splits_347812 == 0)) {
						F.line = 462;
						last_347810 = (input_347474 != null ? input_347474.length : 0);
						}
						
						F.line = 463;
						line_347620 = substr_23422(input_347474, first_347814, subInt(last_347810, 1));
						F.line = 318;
						lexer_347473.lineNo = addInt(lexer_347473.lineNo, 1);
						F.line = 319;
						add_source_337238(lexer_347473.fileName, input_347474);
						F.line = 320;
						lex_one_line_347214(lexer_347473, line_347620);
						if ((splits_347812 == 0)) {
						F.line = 464;
						break L2;
						}
						
						F.line = 465;
						splits_347812 = subInt(splits_347812, 1);
						F.line = 466;
						last_347810 = addInt(last_347810, 1);
					}
			} while(false);
		} while(false);
		F.line = 325;
		switch (mode_347476) {
		case 1:
			F.line = 327;
			dedent_all_346014(lexer_347473);
			F.line = 328;
			add_345915(lexer_347473, 1, 0);
			break;
		case 0:
			break;
		case 2:
			F.line = 332;
			add_345915(lexer_347473, 1, 0);
			break;
		}
	} while (false);
	framePtr = F.prev;

	
}

function match_token_212497(node_212499, token_212500) {
			var Tmp1;

	var result_259271 = false;

	var F={procname:"grammar.matchToken",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (is_terminator_203174(node_212499.token)) {
		if ((node_212499 == success_grammar_node_212501)) {
		F.line = 604;
		result_259271 = true;
		break BeforeRet;
		}
		else {
			F.line = 606;
			result_259271 = (node_212499.token == token_212500);
			break BeforeRet;
		}
		
		}
		else {
			F.line = 608;
			result_259271 = ((Tmp1 = HEX5BHEX5D_255063(grammar_set_212224[0], node_212499.token), Tmp1[0])[Tmp1[1]].firstSet[token_212500] != undefined);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_259271;

}

function new_parse_node_348061(token_node_348063) {
	var result_348064 = null;

	var F={procname:"parser.newParseNode",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
		if (!(is_terminator_203174(token_node_348063.token))) {
		F.line = 27;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(27, 10) `isTerminator(tokenNode.token)` "));
		}
		
		F.line = 28;
		result_348064 = {tokenNode: null, children: null, grammarNodeSeq: null};
		F.line = 29;
		result_348064.tokenNode = token_node_348063;
	framePtr = F.prev;

	return result_348064;

}

function new_parse_node_348222(token_node_348224, first_token_348225) {
			var Tmp1;
		var Tmp2;

	var result_348226 = null;

	var F={procname:"parser.newParseNode",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
		if (!(((Tmp1 = HEX5BHEX5D_255063(grammar_set_212224[0], token_node_348224.token), Tmp1[0])[Tmp1[1]].firstSet[first_token_348225.token] != undefined))) {
		F.line = 33;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(33, 3) `contains(grammarSet[tokenNode.token].firstSet, firstToken.token)` "));
		}
		
		F.line = 34;
		result_348226 = {tokenNode: null, children: null, grammarNodeSeq: null};
		F.line = 35;
		result_348226.tokenNode = token_node_348224;
		F.line = 36;
		var g_node_348885 = (Tmp2 = HEX5BHEX5D_255063(grammar_set_212224[0], token_node_348224.token), Tmp2[0])[Tmp2[1]].rootNode;
		F.line = 37;
		var to_add_348886 = null;
		L3: do {
			F.line = 38;
			var child_348894 = null;
			F.line = 100;
			var colontmp__349412 = {data: null, counter: 0};
			F.line = 38;
			nimCopy(colontmp__349412, g_node_348885.epsilonSet, NTI212034);
			if (!(is_valid_214572(colontmp__349412))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L4: do {
				F.line = 120;
				var h_349416 = 0;
				F.line = 2104;
				var colontmp__349418 = 0;
				F.line = 120;
				colontmp__349418 = (colontmp__349412.data != null ? (colontmp__349412.data.length-1) : -1);
				F.line = 2107;
				var res_349420 = 0;
				L5: do {
					F.line = 2108;
						L6: while (true) {
						if (!(res_349420 <= colontmp__349418)) break L6;
							F.line = 2109;
							h_349416 = res_349420;
							if (is_filled_154282(colontmp__349412.data[chckIndx(h_349416, 0, colontmp__349412.data.length+0-1)-0].Field0)) {
							F.line = 121;
							child_348894 = colontmp__349412.data[chckIndx(h_349416, 0, colontmp__349412.data.length+0-1)-0].Field1;
							if (match_token_212497(child_348894, first_token_348225.token)) {
							F.line = 40;
							if (result_348226.grammarNodeSeq != null) { result_348226.grammarNodeSeq.push(child_348894); } else { result_348226.grammarNodeSeq = [child_348894]; };
							if (is_terminator_203174(child_348894.token)) {
							if ((to_add_348886 === null)) {
							F.line = 43;
							to_add_348886 = new_parse_node_348061(first_token_348225);
							}
							else {
								if (!((to_add_348886.tokenNode.token == child_348894.token))) {
								F.line = 45;
								failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(45, 18) `toAdd.tokenNode.token == child.token` "));
								}
								
							}
							
							}
							else {
								if ((to_add_348886 === null)) {
								F.line = 48;
								to_add_348886 = new_parse_node_348222(new_token_node_343922(child_348894.token, -1, -1, []), first_token_348225);
								}
								else {
									if (!((to_add_348886.tokenNode.token == child_348894.token))) {
									F.line = 50;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(50, 18) `toAdd.tokenNode.token == child.token` "));
									}
									
								}
								
							}
							
							}
							
							}
							
							F.line = 2110;
							res_349420 = addInt(res_349420, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		if (!(!((to_add_348886 === null)))) {
		F.line = 51;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(51, 3) `not isNil(toAdd)` "));
		}
		
		F.line = 52;
		if (result_348226.children != null) { result_348226.children.push(to_add_348886); } else { result_348226.children = [to_add_348886]; };
	framePtr = F.prev;

	return result_348226;

}

function HEX5BHEX5D_351593(s_351600, x_351603) {
	var result_351605 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_351801 = x_351603.a;
		F.line = 3707;
		var l_352007 = addInt(subInt(subInt((s_351600 != null ? s_351600.length : 0), x_351603.b), a_351801), 1);
		F.line = 3708;
		result_351605 = new Array(chckRange(l_352007, 0, 2147483647)); for (var i=0;i<chckRange(l_352007, 0, 2147483647);++i) {result_351605[i]=null;}		L1: do {
			F.line = 3709;
			var i_352027 = 0;
			F.line = 3617;
			var i_352035 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_352035 < l_352007)) break L3;
						F.line = 3619;
						i_352027 = i_352035;
						F.line = 3709;
						result_351605[chckIndx(i_352027, 0, result_351605.length+0-1)-0] = s_351600[chckIndx(addInt(i_352027, a_351801), 0, s_351600.length+0-1)-0];
						F.line = 3620;
						i_352035 = addInt(i_352035, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_351605;

}

function HEX5BHEX5D_350330(s_350336, i_350338) {
	var result_350340 = [null, 0];
	var result_350340_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_350340 = s_350336; result_350340_Idx = chckIndx(subInt((s_350336 != null ? s_350336.length : 0), i_350338), 0, s_350336.length+0-1)-0;
	framePtr = F.prev;

	return [result_350340, result_350340_Idx];

}

function apply_token_350383(node_350385, token_350386) {

							function add_nexts_350392(gn_350394) {
																var Tmp6;

								var F={procname:"applyToken.addNexts",prev:framePtr,filename:"../Parser/parser.nim",line:0};
								framePtr = F;
									L1: do {
										F.line = 79;
										var next_gn_350403 = null;
										F.line = 100;
										var colontmp__350626 = {data: null, counter: 0};
										F.line = 79;
										nimCopy(colontmp__350626, gn_350394.nextSet, NTI212034);
										if (!(is_valid_214572(colontmp__350626))) {
										F.line = 119;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
										}
										
										L2: do {
											F.line = 120;
											var h_350630 = 0;
											F.line = 2104;
											var colontmp__350632 = 0;
											F.line = 120;
											colontmp__350632 = (colontmp__350626.data != null ? (colontmp__350626.data.length-1) : -1);
											F.line = 2107;
											var res_350634 = 0;
											L3: do {
												F.line = 2108;
													L4: while (true) {
													if (!(res_350634 <= colontmp__350632)) break L4;
														F.line = 2109;
														h_350630 = res_350634;
														if (is_filled_154282(colontmp__350626.data[chckIndx(h_350630, 0, colontmp__350626.data.length+0-1)-0].Field0)) {
														F.line = 121;
														next_gn_350403 = colontmp__350626.data[chckIndx(h_350630, 0, colontmp__350626.data.length+0-1)-0].Field1;
														L5: do {
															if (match_token_212497(next_gn_350403, token_350386.token)) {
															F.line = 81;
															if (new_gn_seq_350390 != null) { new_gn_seq_350390.push(next_gn_350403); } else { new_gn_seq_350390 = [next_gn_350403]; };
															if ((next_gn_350403 == success_grammar_node_212501)) {
															F.line = 83;
															break L5;
															}
															
															if (this_layer_350391) {
															if (!(((Tmp6 = HEX5BHEX5D_350330(node_350385.children, 1), Tmp6[0])[Tmp6[1]].tokenNode.token == next_gn_350403.token))) {
															F.line = 86;
															failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(86, 18) `node.children[BackwardsIndex(1)].tokenNode.token == nextGn.token` "));
															}
															
															}
															else {
																F.line = 88;
																this_layer_350391 = true;
																if (is_terminator_203174(next_gn_350403.token)) {
																F.line = 90;
																if (node_350385.children != null) { node_350385.children.push(new_parse_node_348061(token_350386)); } else { node_350385.children = [new_parse_node_348061(token_350386)]; };
																}
																else {
																	F.line = 92;
																if (node_350385.children != null) { node_350385.children.push(new_parse_node_348222(new_token_node_343922(next_gn_350403.token, -1, -1, []), token_350386)); } else { node_350385.children = [new_parse_node_348222(new_token_node_343922(next_gn_350403.token, -1, -1, []), token_350386)]; };
																}
																
															}
															
															}
															
														} while(false);
														}
														
														F.line = 2110;
														res_350634 = addInt(res_350634, 1);
													}
											} while(false);
										} while(false);
									} while(false);
								framePtr = F.prev;

								
							}
								var Tmp4;
		var Tmp5;
			var Tmp6;

	var result_350387 = 0;

	var F={procname:"parser.applyToken",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 75;
		F.line = 75;
		var g_node_seq_350388 = nimCopy(null, node_350385.grammarNodeSeq, NTI348051);
		F.line = 76;
		var new_gn_seq_350390 = null;
		F.line = 77;
		var this_layer_350391 = false;
		F.line = 94;
		var non_terminator_token_appeared_350650 = false;
		F.line = 95;
		var child_status_350651 = 0;
		L1: do {
			F.line = 96;
			var gn_350660 = null;
			F.line = 3911;
			var i_351232 = 0;
			F.line = 3912;
			var l_351234 = (g_node_seq_350388 != null ? g_node_seq_350388.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_351232 < l_351234)) break L3;
						F.line = 3914;
						gn_350660 = g_node_seq_350388[chckIndx(i_351232, 0, g_node_seq_350388.length+0-1)-0];
						F.line = 97;
						switch (gn_350660.kind) {
						case 97:
							if (is_terminator_203174(gn_350660.token)) {
							F.line = 100;
							add_nexts_350392(gn_350660);
							}
							else {
								if (!(non_terminator_token_appeared_350650)) {
								F.line = 103;
								child_status_350651 = apply_token_350383((Tmp4 = HEX5BHEX5D_350330(node_350385.children, 1), Tmp4[0])[Tmp4[1]], token_350386);
								F.line = 104;
								non_terminator_token_appeared_350650 = true;
								}
								
								F.line = 105;
								switch (child_status_350651) {
								case 0:
									F.line = 107;
									if (new_gn_seq_350390 != null) { new_gn_seq_350390.push(gn_350660); } else { new_gn_seq_350390 = [gn_350660]; };
									break;
								case 2:
									break;
								case 1:
									F.line = 111;
									add_nexts_350392(gn_350660);
									break;
								}
							}
							
							break;
						case 115:
							break;
						default: 
							F.line = 115;
							F.line = 115;
							var fmt_res_350692 = mnewString(0);
							F.line = 115;
							if (fmt_res_350692 != null) { fmt_res_350692 = (fmt_res_350692).concat(makeNimstrLit("Grammar Node of ")); } else { fmt_res_350692 = makeNimstrLit("Grammar Node of "); };
							F.line = 270;
							if (fmt_res_350692 != null) { fmt_res_350692 = (fmt_res_350692).concat(HEX24_212438(gn_350660)); } else { fmt_res_350692 = HEX24_212438(gn_350660).slice(); };
							F.line = 115;
							if (fmt_res_350692 != null) { fmt_res_350692 = (fmt_res_350692).concat(makeNimstrLit(" has kind ")); } else { fmt_res_350692 = makeNimstrLit(" has kind "); };
							F.line = 268;
							if (fmt_res_350692 != null) { addChar(fmt_res_350692, gn_350660.kind); } else { fmt_res_350692 = [gn_350660.kind]; };
							var msg_351001 = nimCopy(null, fmt_res_350692, NTI138);
							F.line = 116;
							rawEcho(msg_351001);
							if (true) {
							F.line = 117;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(117, 14) `false` "));
							}
							
							break;
						}
						F.line = 3915;
						i_351232 = addInt(i_351232, 1);
						if (!(((g_node_seq_350388 != null ? g_node_seq_350388.length : 0) == l_351234))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (((new_gn_seq_350390 != null ? new_gn_seq_350390.length : 0) == 0)) {
		F.line = 120;
		result_350387 = 2;
		break BeforeRet;
		}
		else {
			F.line = 122;
			node_350385.grammarNodeSeq = nimCopy(null, new_gn_seq_350390, NTI350389);
		}
		
			if (!((node_350385.grammarNodeSeq != null ? node_350385.grammarNodeSeq.length : 0) == 1)) Tmp6 = false; else {				Tmp6 = (node_350385.grammarNodeSeq[chckIndx(0, 0, node_350385.grammarNodeSeq.length+0-1)-0] == success_grammar_node_212501);			}		if (Tmp6) {
		Tmp5 = 1;
		}
		else {
		Tmp5 = 0;
		}
		
		result_350387 = Tmp5;
	} while (false);
	framePtr = F.prev;

	return result_350387;

}

function clear_tokens_345839(lexer_345841) {
	var F={procname:"lexer.clearTokens",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		if (!(((lexer_345841.tokenNodes != null ? lexer_345841.tokenNodes.length : 0) == 0))) {
		F.line = 84;
		if (lexer_345841.tokenNodes.length < 0) { for (var i=lexer_345841.tokenNodes.length;i<0;++i) lexer_345841.tokenNodes.push(null); }
               else { lexer_345841.tokenNodes.length = 0; };
		}
		
	framePtr = F.prev;

	
}

function parse_with_state_351248(input_351250, lexer_351251, mode_351253, parse_node_arg_351254) {
		var Tmp1;
			var Tmp3;

	var result_351255 = null;

	var F={procname:"parser.parseWithState",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 136;
		F.line = 136;
		lex_string_347471(lexer_351251, input_351250, mode_351253);
		F.line = 137;
		try {
		F.line = 138;
		var token_seq_351256 = nimCopy(null, lexer_351251.tokenNodes, NTI337147);
		if (((token_seq_351256 != null ? token_seq_351256.length : 0) == 0)) {
		F.line = 140;
		break BeforeRet;
		}
		
		F.line = 141;
		var parse_node_351264 = null;
		F.line = 142;
		var start_351266 = 0;
		if ((parse_node_arg_351254 === null)) {
		F.line = 146;
		var first_token_351274 = token_seq_351256[chckIndx(0, 0, token_seq_351256.length+0-1)-0];
		F.line = 147;
		start_351266 = 1;
		F.line = 148;
		var root_token_351275 = 0;
		F.line = 149;
		switch (mode_351253) {
		case 0:
			F.line = 151;
			root_token_351275 = 91;
			break;
		case 1:
			F.line = 153;
			root_token_351275 = 92;
			break;
		case 2:
			F.line = 155;
			root_token_351275 = 93;
			break;
		}
		if (!(((Tmp3 = HEX5BHEX5D_255063(grammar_set_212224[0], root_token_351275), Tmp3[0])[Tmp3[1]].firstSet[first_token_351274.token] != undefined))) {
		F.line = 157;
		raiseException(new_syntax_error_156098(makeNimstrLit("SyntaxError"), [], first_token_351274.lineNo, first_token_351274.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 158;
		parse_node_351264 = new_parse_node_348222(new_token_node_343922(root_token_351275, -1, -1, []), first_token_351274);
		}
		else {
			F.line = 160;
			parse_node_351264 = parse_node_arg_351254;
		}
		
		L4: do {
			F.line = 161;
			var token_352058 = null;
			F.line = 3909;
			var colontmp__352207 = null;
			F.line = 161;
			colontmp__352207 = HEX5BHEX5D_351593(token_seq_351256, HEX2EHEX2E_81053(start_351266, 1));
			F.line = 3911;
			var i_352210 = 0;
			F.line = 3912;
			var l_352212 = (colontmp__352207 != null ? colontmp__352207.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_352210 < l_352212)) break L6;
						F.line = 3914;
						token_352058 = colontmp__352207[chckIndx(i_352210, 0, colontmp__352207.length+0-1)-0];
						L7: do {
							F.line = 162;
							var status_352059 = apply_token_350383(parse_node_351264, token_352058);
							F.line = 165;
							switch (status_352059) {
							case 0:
								F.line = 167;
								break L7;
								break;
							default: 
								F.line = 169;
								raiseException(new_syntax_error_156098(makeNimstrLit("SyntaxError"), [], token_352058.lineNo, token_352058.colNo), "SyntaxError:ObjectType");
								break;
							}
						} while(false);
						F.line = 3915;
						i_352210 = addInt(i_352210, 1);
						if (!(((colontmp__352207 != null ? colontmp__352207.length : 0) == l_352212))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		Tmp1 = parse_node_351264;
		} finally {
		framePtr = F;
		F.line = 173;
		clear_tokens_345839(lexer_351251);
		}
		result_351255 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_351255;

}

function getCurrentException() {
	var result_15296 = null;

		if (is_nim_exception_15277()) {
		result_15296 = lastJSError;
		}
		

	return result_15296;

}

function from_bltin_syntax_error_491149(e_491151, file_name_491152) {
	var result_491153 = null;

	var F={procname:"exceptionsImpl.fromBltinSyntaxError",prev:framePtr,filename:"../Objects/exceptionsImpl.nim",line:0};
	framePtr = F;
		F.line = 73;
		F.line = 73;
		F.line = 104;
		var excp_491155 = new_py_syntax_error_simple_372601();
		F.line = 105;
		excp_491155.tk = 15;
		F.line = 106;
		excp_491155.thrown = true;
		F.line = 107;
		excp_491155.msg = new_py_string_176075(e_491151.message);
		var excp_obj_491157 = excp_491155;
		F.line = 75;
		if (excp_obj_491157.traceBacks != null) { excp_obj_491157.traceBacks.push({Field0: file_name_491152, Field1: null, Field2: e_491151.lineNo, Field3: e_491151.colNo}); } else { excp_obj_491157.traceBacks = [{Field0: file_name_491152, Field1: null, Field2: e_491151.lineNo, Field3: e_491151.colNo}]; };
		result_491153 = excp_obj_491157;
	framePtr = F.prev;

	return result_491153;

}

function new_seq_603405(len_603409) {
	var result_603411 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_603411 = new Array(len_603409); for (var i=0;i<len_603409;++i) {result_603411[i]={Field0: null, Field1: null, Field2: 0, Field3: 0};}	framePtr = F.prev;

	return result_603411;

}

function reversed_603260(a_603265, first_603267, last_603269) {
	var result_603271 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		if (!((subInt(first_603267, 1) <= last_603269))) {
		F.line = 54;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(54, 10) `\x0Afirst - 1 <= last` "));
		}
		
		F.line = 55;
		var i_603401 = subInt(last_603269, first_603267);
		F.line = 56;
		var x_603402 = first_603267;
		F.line = 57;
		result_603271 = nimCopy(null, new_seq_603405(chckRange(addInt(i_603401, 1), 0, 2147483647)), NTI603410);
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!(0 <= i_603401)) break L2;
					F.line = 59;
					nimCopy(result_603271[chckIndx(i_603401, 0, result_603271.length+0-1)-0], a_603265[chckIndx(x_603402, 0, a_603265.length+0-1)-0], NTI357178);
					F.line = 60;
					i_603401 = subInt(i_603401, 1);
					F.line = 61;
					x_603402 = addInt(x_603402, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_603271;

}

function reversed_603244(a_603249) {
	var result_603251 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_603251 = nimCopy(null, reversed_603260(a_603249, 0, (a_603249 != null ? (a_603249.length-1) : -1)), NTI603270);
	framePtr = F.prev;

	return result_603251;

}

function nsuStrip(s_132637, leading_132638, trailing_132639, chars_132641) {
					var Tmp5;

	var result_132642 = null;

		var first_132644 = 0;
		var last_132645 = ((s_132637 != null ? s_132637.length : 0) - 1);
		if (leading_132638) {
		L1: do {
				L2: while (true) {
				if (!((first_132644 <= last_132645) && (chars_132641[s_132637[first_132644]] != undefined))) break L2;
					first_132644 += 1;
				}
		} while(false);
		}
		
		if (trailing_132639) {
		L3: do {
				L4: while (true) {
					if (!(0 <= last_132645)) Tmp5 = false; else {						Tmp5 = (chars_132641[s_132637[last_132645]] != undefined);					}				if (!Tmp5) break L4;
					last_132645 -= 1;
				}
		} while(false);
		}
		
		result_132642 = nimCopy(null, substr_23422(s_132637, first_132644, last_132645), NTI138);

	return result_132642;

}

function get_source_342875(file_path_342877, line_no_342878) {
		var Tmp1;

	var result_342879 = null;

	var F={procname:"lexer.getSource",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 40;
		result_342879 = nimCopy(null, (Tmp1 = HEX5BHEX5D_342444(source_files_337224[0], file_path_342877), Tmp1[0])[Tmp1[1]].lines[chckIndx(subInt(line_no_342878, 1), 0, (Tmp1 = HEX5BHEX5D_342444(source_files_337224[0], file_path_342877), Tmp1[0])[Tmp1[1]].lines.length+0-1)-0], NTI138);
	framePtr = F.prev;

	return result_342879;

}

function nsuIndent(s_135663, count_135664, padding_135665) {
						var Tmp6;

	var result_135666 = null;

		result_135666 = nimCopy(null, [], NTI138);
		var i_135668 = 0;
		L1: do {
			var line_135669 = null;
			var first_135703 = 0;
			var last_135705 = 0;
			var eolpos_135707 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!((last_135705 < (s_135663 != null ? s_135663.length : 0)) && !((ConstSet19[s_135663[last_135705]] != undefined)))) break L5;
									last_135705 += 1;
								}
						} while(false);
						eolpos_135707 = last_135705;
						if ((last_135705 < (s_135663 != null ? s_135663.length : 0))) {
						if ((s_135663[last_135705] == 10)) {
						last_135705 += 1;
						}
						else {
						if ((s_135663[last_135705] == 13)) {
						last_135705 += 1;
						if (((last_135705 < (s_135663 != null ? s_135663.length : 0)) && (s_135663[last_135705] == 10))) {
						last_135705 += 1;
						}
						
						}
						}
						}
						
						if (false) {
						Tmp6 = (last_135705 - 1);
						}
						else {
						Tmp6 = (eolpos_135707 - 1);
						}
						
						line_135669 = substr_23422(s_135663, first_135703, Tmp6);
						if (!((i_135668 == 0))) {
						if (result_135666 != null) { result_135666 = (result_135666).concat(makeNimstrLit("\x0A")); } else { result_135666 = makeNimstrLit("\x0A"); };
						}
						
						L7: do {
							var j_135681 = 0;
							var colontmp__135693 = 0;
							colontmp__135693 = count_135664;
							var res_135696 = 1;
							L8: do {
									L9: while (true) {
									if (!(res_135696 <= colontmp__135693)) break L9;
										j_135681 = res_135696;
										if (result_135666 != null) { result_135666 = (result_135666).concat(padding_135665); } else { result_135666 = padding_135665.slice(); };
										res_135696 += 1;
									}
							} while(false);
						} while(false);
						if (result_135666 != null) { result_135666 = (result_135666).concat(line_135669); } else { result_135666 = line_135669.slice(); };
						i_135668 += 1;
						if ((eolpos_135707 == last_135705)) {
						break L2;
						}
						
						first_135703 = last_135705;
					}
			} while(false);
		} while(false);

	return result_135666;

}

function fmt_trace_back_602040(tb_602042) {
	var result_602043 = null;

	var F={procname:"traceback.fmtTraceBack",prev:framePtr,filename:"traceback.nim",line:0};
	framePtr = F;
		if (!(of_py_str_object_175092(tb_602042.Field0))) {
		F.line = 11;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/traceback.nim(11, 10) `ofPyStrObject(tb.fileName)` "));
		}
		
		if (!(!((tb_602042.Field2 == 0)))) {
		F.line = 13;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/traceback.nim(13, 10) `\x0Anot (tb.lineNo == 0)` "));
		}
		
		F.line = 14;
		var file_name_602401 = nimCopy(null, tb_602042.Field0.str, NTI138);
		F.line = 15;
		var at_where_602402 = null;
		if ((tb_602042.Field1 === null)) {
		F.line = 17;
		at_where_602402 = nimCopy(null, [], NTI138);
		}
		else {
			if (!(of_py_str_object_175092(tb_602042.Field1))) {
			F.line = 19;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/traceback.nim(19, 12) `ofPyStrObject(tb.funName)` "));
			}
			
			F.line = 20;
			at_where_602402 = nimCopy(null, (makeNimstrLit(", in ")).concat(tb_602042.Field1.str), NTI138);
		}
		
		F.line = 21;
		F.line = 21;
		var fmt_res_602604 = mnewString(0);
		F.line = 21;
		if (fmt_res_602604 != null) { fmt_res_602604 = (fmt_res_602604).concat(makeNimstrLit("  File \"")); } else { fmt_res_602604 = makeNimstrLit("  File \""); };
		F.line = 260;
		if (fmt_res_602604 != null) { fmt_res_602604 = (fmt_res_602604).concat(file_name_602401); } else { fmt_res_602604 = file_name_602401.slice(); };
		F.line = 21;
		if (fmt_res_602604 != null) { fmt_res_602604 = (fmt_res_602604).concat(makeNimstrLit("\", line ")); } else { fmt_res_602604 = makeNimstrLit("\", line "); };
		F.line = 270;
		if (fmt_res_602604 != null) { fmt_res_602604 = (fmt_res_602604).concat(cstrToNimstr((tb_602042.Field2)+"")); } else { fmt_res_602604 = cstrToNimstr((tb_602042.Field2)+"").slice(); };
		F.line = 260;
		if (fmt_res_602604 != null) { fmt_res_602604 = (fmt_res_602604).concat(at_where_602402); } else { fmt_res_602604 = at_where_602402.slice(); };
		F.line = 21;
		if (fmt_res_602604 != null) { fmt_res_602604 = (fmt_res_602604).concat(makeNimstrLit("\x0A")); } else { fmt_res_602604 = makeNimstrLit("\x0A"); };
		if (result_602043 != null) { result_602043 = (result_602043).concat(fmt_res_602604); } else { result_602043 = fmt_res_602604.slice(); };
		F.line = 22;
		if (result_602043 != null) { result_602043 = (result_602043).concat((makeNimstrLit("    ")).concat(nsuStrip(get_source_342875(file_name_602401, tb_602042.Field2), true, true, ConstSet18))); } else { result_602043 = (makeNimstrLit("    ")).concat(nsuStrip(get_source_342875(file_name_602401, tb_602042.Field2), true, true, ConstSet18)).slice(); };
		if (!((tb_602042.Field3 == -1))) {
		F.line = 24;
		if (result_602043 != null) { result_602043 = (result_602043).concat((makeNimstrLit("\x0A    ")).concat(nsuIndent(makeNimstrLit("^"), chckRange(tb_602042.Field3, 0, 2147483647), makeNimstrLit(" ")))); } else { result_602043 = (makeNimstrLit("\x0A    ")).concat(nsuIndent(makeNimstrLit("^"), chckRange(tb_602042.Field3, 0, 2147483647), makeNimstrLit(" "))).slice(); };
		}
		
	framePtr = F.prev;

	return result_602043;

}

function reversed_378352(a_378357, first_378359, last_378361) {
	var result_378363 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		if (!((subInt(first_378359, 1) <= last_378361))) {
		F.line = 54;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(54, 10) `\x0Afirst - 1 <= last` "));
		}
		
		F.line = 55;
		var i_378401 = subInt(last_378361, first_378359);
		F.line = 56;
		var x_378402 = first_378359;
		F.line = 57;
		result_378363 = nimCopy(null, new_seq_178023(chckRange(addInt(i_378401, 1), 0, 2147483647)), NTI178028);
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!(0 <= i_378401)) break L2;
					F.line = 59;
					result_378363[chckIndx(i_378401, 0, result_378363.length+0-1)-0] = nimCopy(null, a_378357[chckIndx(x_378402, 0, a_378357.length+0-1)-0], NTI138);
					F.line = 60;
					i_378401 = subInt(i_378401, 1);
					F.line = 61;
					x_378402 = addInt(x_378402, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_378363;

}

function reversed_378336(a_378341) {
	var result_378343 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_378343 = nimCopy(null, reversed_378352(a_378341, 0, (a_378341 != null ? (a_378341.length-1) : -1)), NTI378362);
	framePtr = F.prev;

	return result_378343;

}

function print_tb_603216(excp_603218) {
	var F={procname:"traceback.printTb",prev:framePtr,filename:"traceback.nim",line:0};
	framePtr = F;
		F.line = 28;
		var cur_603219 = excp_603218;
		F.line = 29;
		var excp_strs_603221 = null;
		L1: do {
			F.line = 30;
				L2: while (true) {
				if (!!((cur_603219 === null))) break L2;
					F.line = 31;
					var single_excp_strs_603230 = null;
					F.line = 32;
					if (single_excp_strs_603230 != null) { single_excp_strs_603230.push(makeNimstrLit("Traceback (most recent call last):")); } else { single_excp_strs_603230 = [makeNimstrLit("Traceback (most recent call last):")]; };
					L3: do {
						F.line = 33;
						var tb_603615 = {Field0: null, Field1: null, Field2: 0, Field3: 0};
						F.line = 3909;
						var colontmp__603666 = null;
						F.line = 33;
						colontmp__603666 = reversed_603244(cur_603219.traceBacks);
						F.line = 3911;
						var i_603669 = 0;
						F.line = 3912;
						var l_603671 = (colontmp__603666 != null ? colontmp__603666.length : 0);
						L4: do {
							F.line = 3913;
								L5: while (true) {
								if (!(i_603669 < l_603671)) break L5;
									F.line = 3914;
									nimCopy(tb_603615, colontmp__603666[chckIndx(i_603669, 0, colontmp__603666.length+0-1)-0], NTI357178);
									F.line = 34;
									if (single_excp_strs_603230 != null) { single_excp_strs_603230.push(fmt_trace_back_602040(tb_603615)); } else { single_excp_strs_603230 = [fmt_trace_back_602040(tb_603615)]; };
									F.line = 3915;
									i_603669 = addInt(i_603669, 1);
									if (!(((colontmp__603666 != null ? colontmp__603666.length : 0) == l_603671))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 35;
					var Tmp6 = nimCopy(null, repr_py_base_error_object_magic_478314(cur_603219).str, NTI138);
					if (single_excp_strs_603230 != null) { single_excp_strs_603230.push(Tmp6); } else { single_excp_strs_603230 = [Tmp6]; };
					F.line = 36;
					if (excp_strs_603221 != null) { excp_strs_603221.push(nsuJoinSep(single_excp_strs_603230, makeNimstrLit("\x0A"))); } else { excp_strs_603221 = [nsuJoinSep(single_excp_strs_603230, makeNimstrLit("\x0A"))]; };
					F.line = 37;
					cur_603219 = cur_603219.context;
				}
		} while(false);
		F.line = 38;
		var join_msg_603646 = makeNimstrLit("\x0A\x0ADuring handling of the above exception, another exception occured\x0A\x0A");
		F.line = 14;
		rawEcho(nsuJoinSep(reversed_378336(excp_strs_603221), join_msg_603646));
		L7: do {
			F.line = 15;
			var line_603663 = null;
			F.line = 597;
			var colontmp__603673 = null;
			F.line = 39;
			colontmp__603673 = nsuJoinSep(reversed_378336(excp_strs_603221), join_msg_603646);
			F.line = 455;
			var last_603677 = 0;
			F.line = 456;
			var splits_603679 = -1;
			L8: do {
				F.line = 614;
					L9: while (true) {
					if (!(last_603677 <= (colontmp__603673 != null ? colontmp__603673.length : 0))) break L9;
						F.line = 459;
						var first_603681 = last_603677;
						L10: do {
							F.line = 460;
								L11: while (true) {
								if (!((last_603677 < (colontmp__603673 != null ? colontmp__603673.length : 0)) && !(substr_eq_132789(colontmp__603673, last_603677, makeNimstrLit("\x0A"))))) break L11;
									F.line = 461;
									last_603677 = addInt(last_603677, 1);
								}
						} while(false);
						if ((splits_603679 == 0)) {
						F.line = 462;
						last_603677 = (colontmp__603673 != null ? colontmp__603673.length : 0);
						}
						
						F.line = 463;
						line_603663 = substr_23422(colontmp__603673, first_603681, subInt(last_603677, 1));
						F.line = 16;
						log(" ", toJSStr(line_603663));
						if ((splits_603679 == 0)) {
						F.line = 464;
						break L8;
						}
						
						F.line = 465;
						splits_603679 = subInt(splits_603679, 1);
						F.line = 466;
						last_603677 = addInt(last_603677, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function finished_350088(node_350090) {
							var Tmp4;
							var Tmp5;

	var result_350091 = false;

	var F={procname:"parser.finished",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 63;
		var non_terminator_token_appeared_350092 = false;
		L1: do {
			F.line = 64;
			var gn_350101 = null;
			F.line = 3909;
			var colontmp__350364 = null;
			F.line = 64;
			colontmp__350364 = node_350090.grammarNodeSeq;
			F.line = 3911;
			var i_350367 = 0;
			F.line = 3912;
			var l_350369 = (colontmp__350364 != null ? colontmp__350364.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_350367 < l_350369)) break L3;
						F.line = 3914;
						gn_350101 = colontmp__350364[chckIndx(i_350367, 0, colontmp__350364.length+0-1)-0];
						if (!(contains_224741(gn_350101.nextSet, success_grammar_node_212501))) {
						F.line = 66;
						result_350091 = false;
						break BeforeRet;
						}
						
							if (!!(non_terminator_token_appeared_350092)) Tmp4 = false; else {								Tmp4 = !(is_terminator_203174(gn_350101.token));							}						if (Tmp4) {
						F.line = 68;
						non_terminator_token_appeared_350092 = true;
						if (!(finished_350088((Tmp5 = HEX5BHEX5D_350330(node_350090.children, 1), Tmp5[0])[Tmp5[1]]))) {
						F.line = 70;
						result_350091 = false;
						break BeforeRet;
						}
						
						}
						
						F.line = 3915;
						i_350367 = addInt(i_350367, 1);
						if (!(((colontmp__350364 != null ? colontmp__350364.length : 0) == l_350369))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 71;
		result_350091 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_350091;

}

function new_ast_module_178845() {
	var result_178847 = null;

	var F={procname:"asdl.newAstModule",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_178847 = {m_type: NTI178837, body: null, kind: 0};
		F.line = 111;
		result_178847.kind = 0;
	framePtr = F.prev;

	return result_178847;

}

function new_ast_unary_op_180010() {
	var result_180012 = null;

	var F={procname:"asdl.newAstUnaryOp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180012 = {m_type: NTI180002, op: null, operand: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180012.kind = 2;
	framePtr = F.prev;

	return result_180012;

}

function new_unary_op_406475(op_406477, operand_406478) {
	var result_406479 = null;

	var F={procname:"ast.newUnaryOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 67;
		result_406479 = new_ast_unary_op_180010();
		F.line = 68;
		result_406479.op = op_406477;
		F.line = 69;
		result_406479.operand = operand_406478;
	framePtr = F.prev;

	return result_406479;

}

function new_ast_not_181628() {
	var result_181630 = null;

	var F={procname:"asdl.newAstNot",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181630 = {m_type: NTI181624, kind: 0};
		F.line = 111;
		result_181630.kind = 1;
	framePtr = F.prev;

	return result_181630;

}

function new_int_406060(value_406062) {
	var result_406063 = null;

	var F={procname:"ast.newInt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 33;
		result_406063 = {m_type: NTI177024, value: 0};
		F.line = 34;
		result_406063.value = value_406062;
	framePtr = F.prev;

	return result_406063;

}

function new_ast_tuple_180810() {
	var result_180812 = null;

	var F={procname:"asdl.newAstTuple",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180812 = {m_type: NTI180800, elts: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180812.kind = 24;
	framePtr = F.prev;

	return result_180812;

}

function new_ast_load_180841() {
	var result_180843 = null;

	var F={procname:"asdl.newAstLoad",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180843 = {m_type: NTI180837, kind: 0};
		F.line = 111;
		result_180843.kind = 0;
	framePtr = F.prev;

	return result_180843;

}

function new_tuple_406511(elts_406514) {
	var result_406515 = null;

	var F={procname:"ast.newTuple",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 78;
		result_406515 = new_ast_tuple_180810();
		F.line = 79;
		result_406515.elts = nimCopy(null, elts_406514, NTI406513);
		F.line = 80;
		result_406515.ctx = new_ast_load_180841();
	framePtr = F.prev;

	return result_406515;

}

function new_ast_list_comp_180193() {
	var result_180195 = null;

	var F={procname:"asdl.newAstListComp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180195 = {m_type: NTI180183, elt: null, generators: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180195.kind = 7;
	framePtr = F.prev;

	return result_180195;

}

function new_ast_comprehension_182041() {
	var result_182043 = null;

	var F={procname:"asdl.newAstComprehension",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182043 = {m_type: NTI182027, target: null, iter: null, ifs: null, is_async: null, kind: 0};
		F.line = 111;
		result_182043.kind = 0;
	framePtr = F.prev;

	return result_182043;

}

function ast_expr_list_406710(parse_node_406712) {
	var result_429224 = null;

	var F={procname:"ast.astExprList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1129;
		if (!((parse_node_406712.tokenNode.token == 165))) {
		F.line = 1129;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1129, 3) `parseNode.tokenNode.token == exprlist` "));
		}
		
		if (!(((parse_node_406712.children != null ? parse_node_406712.children.length : 0) == 1))) {
		F.line = 1130;
		raiseException(new_syntax_error_156098(makeNimstrLit("unpacking in for loop not implemented"), [], parse_node_406712.children[chckIndx(1, 0, parse_node_406712.children.length+0-1)-0].tokenNode.lineNo, parse_node_406712.children[chckIndx(1, 0, parse_node_406712.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1131;
		var child_429410 = parse_node_406712.children[chckIndx(0, 0, parse_node_406712.children.length+0-1)-0];
		if (!((child_429410.tokenNode.token == 150))) {
		F.line = 1133;
		raiseException(new_syntax_error_156098(makeNimstrLit("unpacking in for loop not implemented"), [], child_429410.tokenNode.lineNo, child_429410.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		result_429224 = ast_expr_406666(child_429410);
	framePtr = F.prev;

	return result_429224;

}

function ast_sync_comp_for_406729(parse_node_406731) {
	var result_430818 = null;

	var F={procname:"ast.astSyncCompFor",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406731.tokenNode.token == 172))) {
		F.line = 1206;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1206, 3) `parseNode.tokenNode.token == sync_comp_for` "));
		}
		
		if (((parse_node_406731.children != null ? parse_node_406731.children.length : 0) == 5)) {
		F.line = 1207;
		raiseException(new_syntax_error_156098(makeNimstrLit("Complex comprehension not implemented"), [], parse_node_406731.children[chckIndx(5, 0, parse_node_406731.children.length+0-1)-0].tokenNode.lineNo, parse_node_406731.children[chckIndx(5, 0, parse_node_406731.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1208;
		var comp_431010 = new_ast_comprehension_182041();
		F.line = 1209;
		comp_431010.target = ast_expr_list_406710(parse_node_406731.children[chckIndx(1, 0, parse_node_406731.children.length+0-1)-0]);
		F.line = 1210;
		set_store_407278(comp_431010.target);
		F.line = 1211;
		comp_431010.iter = ast_or_test_406651(parse_node_406731.children[chckIndx(3, 0, parse_node_406731.children.length+0-1)-0]);
		F.line = 1212;
		if (result_430818 != null) { result_430818.push(comp_431010); } else { result_430818 = [comp_431010]; };
	framePtr = F.prev;

	return result_430818;

}

function ast_comp_for_406733(parse_node_406735) {
	var result_431038 = null;

	var F={procname:"ast.astCompFor",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_406735.tokenNode.token == 173))) {
		F.line = 1217;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1217, 3) `parseNode.tokenNode.token == comp_for` "));
		}
		
		if (((parse_node_406735.children != null ? parse_node_406735.children.length : 0) == 2)) {
		F.line = 1218;
		raiseException(new_syntax_error_156098(makeNimstrLit("Async comprehension not implemented"), [], parse_node_406735.children[chckIndx(0, 0, parse_node_406735.children.length+0-1)-0].tokenNode.lineNo, parse_node_406735.children[chckIndx(0, 0, parse_node_406735.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1219;
		result_431038 = nimCopy(null, ast_sync_comp_for_406729(parse_node_406735.children[chckIndx(0, 0, parse_node_406735.children.length+0-1)-0]), NTI406732);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_431038;

}

function HEX5BHEX5D_419235(s_419242, x_419245) {
	var result_419247 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_419401 = x_419245.a;
		F.line = 3707;
		var l_419607 = addInt(subInt(subInt((s_419242 != null ? s_419242.length : 0), x_419245.b), a_419401), 1);
		F.line = 3708;
		result_419247 = new Array(chckRange(l_419607, 0, 2147483647)); for (var i=0;i<chckRange(l_419607, 0, 2147483647);++i) {result_419247[i]=null;}		L1: do {
			F.line = 3709;
			var i_419627 = 0;
			F.line = 3617;
			var i_419635 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_419635 < l_419607)) break L3;
						F.line = 3619;
						i_419627 = i_419635;
						F.line = 3709;
						result_419247[chckIndx(i_419627, 0, result_419247.length+0-1)-0] = s_419242[chckIndx(addInt(i_419627, a_419401), 0, s_419242.length+0-1)-0];
						F.line = 3620;
						i_419635 = addInt(i_419635, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_419247;

}

function ast_testlist_comp_406696(parse_node_406698) {
			var Tmp1;

	var result_427434 = null;

	var F={procname:"ast.astTestlistComp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_406698.tokenNode.token == 160))) {
		F.line = 1029;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1029, 3) `parseNode.tokenNode.token == testlist_comp` "));
		}
		
		F.line = 1029;
		var child1_427601 = parse_node_406698.children[chckIndx(0, 0, parse_node_406698.children.length+0-1)-0];
		if ((child1_427601.tokenNode.token == 149)) {
		F.line = 1031;
		raiseException(new_syntax_error_156098(makeNimstrLit("Star expression not implemented"), [], child1_427601.tokenNode.lineNo, child1_427601.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1032;
		var test1_427613 = ast_test_406648(child1_427601);
			if (!((parse_node_406698.children != null ? parse_node_406698.children.length : 0) == 2)) Tmp1 = false; else {				Tmp1 = (parse_node_406698.children[chckIndx(1, 0, parse_node_406698.children.length+0-1)-0].tokenNode.token == 173);			}		if (Tmp1) {
		F.line = 1036;
		var list_comp_427630 = new_ast_list_comp_180193();
		F.line = 1038;
		list_comp_427630.elt = test1_427613;
		F.line = 1039;
		list_comp_427630.generators = nimCopy(null, ast_comp_for_406733(parse_node_406698.children[chckIndx(1, 0, parse_node_406698.children.length+0-1)-0]), NTI406736);
		F.line = 1040;
		if (result_427434 != null) { result_427434.push(list_comp_427630); } else { result_427434 = [list_comp_427630]; };
		F.line = 1041;
		break BeforeRet;
		}
		
		F.line = 1043;
		if (result_427434 != null) { result_427434.push(test1_427613); } else { result_427434 = [test1_427613]; };
		L2: do {
			F.line = 1044;
			var child_427697 = null;
			F.line = 3909;
			var colontmp__427803 = null;
			F.line = 1044;
			colontmp__427803 = HEX5BHEX5D_419235(parse_node_406698.children, HEX2EHEX2E_81053(1, 1));
			F.line = 3911;
			var i_427806 = 0;
			F.line = 3912;
			var l_427808 = (colontmp__427803 != null ? colontmp__427803.length : 0);
			L3: do {
				F.line = 3913;
					L4: while (true) {
					if (!(i_427806 < l_427808)) break L4;
						F.line = 3914;
						child_427697 = colontmp__427803[chckIndx(i_427806, 0, colontmp__427803.length+0-1)-0];
						F.line = 1045;
						switch (child_427697.tokenNode.token) {
						case 13:
							break;
						case 140:
							F.line = 1049;
							if (result_427434 != null) { result_427434.push(ast_test_406648(child_427697)); } else { result_427434 = [ast_test_406648(child_427697)]; };
							break;
						case 149:
							F.line = 1051;
							raiseException(new_syntax_error_156098(makeNimstrLit("Star expression not implemented"), [], child_427697.tokenNode.lineNo, child_427697.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						default: 
							F.line = 2895;
							var e_427718 = null;
							F.line = 2896;
							e_427718 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 28;
							e_427718.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
							F.line = 2891;
							e_427718.parent = null;
							F.line = 1053;
							raiseException(e_427718, "InternalError");
							break;
						}
						F.line = 3915;
						i_427806 = addInt(i_427806, 1);
						if (!(((colontmp__427803 != null ? colontmp__427803.length : 0) == l_427808))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_427434;

}

function new_ast_list_180773() {
	var result_180775 = null;

	var F={procname:"asdl.newAstList",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180775 = {m_type: NTI180763, elts: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180775.kind = 23;
	framePtr = F.prev;

	return result_180775;

}

function new_list_406493(elts_406496) {
	var result_406497 = null;

	var F={procname:"ast.newList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 73;
		result_406497 = new_ast_list_180773();
		F.line = 74;
		result_406497.elts = nimCopy(null, elts_406496, NTI406495);
		F.line = 75;
		result_406497.ctx = new_ast_load_180841();
	framePtr = F.prev;

	return result_406497;

}

function new_ast_dict_180121() {
	var result_180123 = null;

	var F={procname:"asdl.newAstDict",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180123 = {m_type: NTI180109, keys: null, values: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180123.kind = 5;
	framePtr = F.prev;

	return result_180123;

}

function ast_dict_or_set_maker_406716(parse_node_406718) {
	var result_429823 = null;

	var F={procname:"ast.astDictOrSetMaker",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406718.tokenNode.token == 167))) {
		F.line = 1155;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1155, 3) `parseNode.tokenNode.token == dictorsetmaker` "));
		}
		
		F.line = 1155;
		var children_430001 = nimCopy(null, parse_node_406718.children, NTI348049);
		F.line = 1156;
		var d_430002 = new_ast_dict_180121();
		L1: do {
			F.line = 1158;
			var idx_430020 = 0;
			F.line = 3616;
			var colontmp__430087 = 0;
			F.line = 1158;
			colontmp__430087 = divInt(addInt((children_430001 != null ? children_430001.length : 0), 1), 4);
			F.line = 3617;
			var i_430090 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_430090 < colontmp__430087)) break L3;
						F.line = 3619;
						idx_430020 = i_430090;
						F.line = 1159;
						var i_430021 = mulInt(idx_430020, 4);
						if (((children_430001 != null ? children_430001.length : 0) < addInt(i_430021, 3))) {
						F.line = 1161;
						raiseException(new_syntax_error_156098(makeNimstrLit("dict defination too complex (no set, no comprehension)"), [], parse_node_406718.tokenNode.lineNo, parse_node_406718.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1162;
						var c1_430031 = children_430001[chckIndx(i_430021, 0, children_430001.length+0-1)-0];
						if (!((c1_430031.tokenNode.token == 140))) {
						F.line = 1164;
						raiseException(new_syntax_error_156098(makeNimstrLit("dict defination too complex (no set, no comprehension)"), [], c1_430031.tokenNode.lineNo, c1_430031.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1165;
						if (d_430002.keys != null) { d_430002.keys.push(ast_test_406648(c1_430031)); } else { d_430002.keys = [ast_test_406648(c1_430031)]; };
						if (!((children_430001[chckIndx(addInt(i_430021, 1), 0, children_430001.length+0-1)-0].tokenNode.token == 12))) {
						F.line = 1167;
						raiseException(new_syntax_error_156098(makeNimstrLit("dict defination too complex (no set, no comprehension)"), [], parse_node_406718.tokenNode.lineNo, parse_node_406718.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1168;
						var c3_430064 = children_430001[chckIndx(addInt(i_430021, 2), 0, children_430001.length+0-1)-0];
						if (!((c3_430064.tokenNode.token == 140))) {
						F.line = 1170;
						raiseException(new_syntax_error_156098(makeNimstrLit("dict defination too complex (no set, no comprehension)"), [], c3_430064.tokenNode.lineNo, c3_430064.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1171;
						if (d_430002.values != null) { d_430002.values.push(ast_test_406648(c3_430064)); } else { d_430002.values = [ast_test_406648(c3_430064)]; };
						F.line = 3620;
						i_430090 = addInt(i_430090, 1);
					}
			} while(false);
		} while(false);
		F.line = 1172;
		result_429823 = d_430002;
	framePtr = F.prev;

	return result_429823;

}

function new_ast_name_180736() {
	var result_180738 = null;

	var F={procname:"asdl.newAstName",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180738 = {m_type: NTI180728, id: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180738.kind = 22;
	framePtr = F.prev;

	return result_180738;

}

function new_identifier_406085(value_406087) {
	var result_406088 = null;

	var F={procname:"ast.newIdentifier",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 38;
		result_406088 = {m_type: NTI177027, value: null};
		F.line = 39;
		result_406088.value = new_py_string_176075(value_406087);
	framePtr = F.prev;

	return result_406088;

}

function new_ast_name_406110(token_node_406112) {
	var result_406113 = null;

	var F={procname:"ast.newAstName",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((ConstSet20[token_node_406112.token] != undefined))) {
		F.line = 43;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(43, 10) `contains({Token.Name, Token.Number, Token.String}, tokenNode.token)` "));
		}
		
		F.line = 44;
		result_406113 = new_ast_name_180736();
		F.line = 45;
		result_406113.id = new_identifier_406085(token_node_406112.content);
		F.line = 48;
		result_406113.ctx = new_ast_load_180841();
	framePtr = F.prev;

	return result_406113;

}

function contains_195428(s_195435, value_195437) {
	var result_195438 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1272;
		result_195438 = ((s_195435.a <= value_195437) && (value_195437 <= s_195435.b));
	framePtr = F.prev;

	return result_195438;

}

function HEX2EHEX2E_195202(a_195207, b_195209) {
	var result_195217 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_195217.a = a_195207;
		F.line = 399;
		result_195217.b = b_195209;
	framePtr = F.prev;

	return result_195217;

}

function new_ast_constant_180592() {
	var result_180594 = null;

	var F={procname:"asdl.newAstConstant",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180594 = {m_type: NTI180586, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180594.kind = 18;
	framePtr = F.prev;

	return result_180594;

}

function new_406221() {
	var result_406226 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_406401 = null;
		F.line = 211;
		r_406401 = {m_type: NTI177030, value: null};
		F.line = 212;
		result_406226 = r_406401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_406226;

}

function new_ast_constant_406215(obj_406217) {
	var result_406218 = null;

	var F={procname:"ast.newAstConstant",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 51;
		result_406218 = new_ast_constant_180592();
		F.line = 52;
		result_406218.value = new_406221();
		F.line = 53;
		result_406218.value.value = obj_406217;
	framePtr = F.prev;

	return result_406218;

}

function ast_atom_406693(parse_node_406695) {
					var Tmp1;

	var result_426150 = null;

	var F={procname:"ast.astAtom",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406695.tokenNode.token == 159))) {
		F.line = 939;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(939, 3) `parseNode.tokenNode.token == atom` "));
		}
		
		F.line = 939;
		var child1_426201 = parse_node_406695.children[chckIndx(0, 0, parse_node_406695.children.length+0-1)-0];
		F.line = 940;
		switch (child1_426201.tokenNode.token) {
		case 8:
			F.line = 942;
			switch ((parse_node_406695.children != null ? parse_node_406695.children.length : 0)) {
			case 2:
				F.line = 944;
				result_426150 = new_tuple_406511([]);
				break;
			case 3:
				F.line = 946;
				var child_426224 = parse_node_406695.children[chckIndx(1, 0, parse_node_406695.children.length+0-1)-0];
				F.line = 947;
				switch (child_426224.tokenNode.token) {
				case 176:
					F.line = 949;
					raiseException(new_syntax_error_156098(makeNimstrLit("Yield expression not implemented"), [], child_426224.tokenNode.lineNo, child_426224.tokenNode.colNo), "SyntaxError:ObjectType");
					break;
				case 160:
					F.line = 951;
					var test_list_comp_426229 = ast_testlist_comp_406696(child_426224);
					if (((test_list_comp_426229 != null ? test_list_comp_426229.length : 0) == 1)) {
					if ((test_list_comp_426229[chckIndx(0, 0, test_list_comp_426229.length+0-1)-0].kind == 7)) {
					F.line = 955;
					raiseException(new_syntax_error_156098(makeNimstrLit("generator expression not implemented"), [], child_426224.tokenNode.lineNo, child_426224.tokenNode.colNo), "SyntaxError:ObjectType");
					}
					
					F.line = 956;
					result_426150 = test_list_comp_426229[chckIndx(0, 0, test_list_comp_426229.length+0-1)-0];
					}
					else {
						F.line = 958;
						result_426150 = new_tuple_406511(test_list_comp_426229);
					}
					
					break;
				default: 
					F.line = 2895;
					var e_426253 = null;
					F.line = 2896;
					e_426253 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
					F.line = 28;
					e_426253.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
					F.line = 2891;
					e_426253.parent = null;
					F.line = 960;
					raiseException(e_426253, "InternalError");
					break;
				}
				break;
			default: 
				F.line = 2895;
				var e_426406 = null;
				F.line = 2896;
				e_426406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 28;
				e_426406.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_426406.parent = null;
				F.line = 962;
				raiseException(e_426406, "InternalError");
				break;
			}
			break;
		case 10:
			F.line = 965;
			switch ((parse_node_406695.children != null ? parse_node_406695.children.length : 0)) {
			case 2:
				F.line = 967;
				result_426150 = new_list_406493([]);
				break;
			case 3:
				F.line = 969;
				var contents_426623 = ast_testlist_comp_406696(parse_node_406695.children[chckIndx(1, 0, parse_node_406695.children.length+0-1)-0]);
					if (!((contents_426623 != null ? contents_426623.length : 0) == 1)) Tmp1 = false; else {						Tmp1 = (contents_426623[chckIndx(0, 0, contents_426623.length+0-1)-0].kind == 7);					}				if (Tmp1) {
				F.line = 971;
				result_426150 = contents_426623[chckIndx(0, 0, contents_426623.length+0-1)-0];
				}
				else {
					F.line = 973;
					result_426150 = new_list_406493(contents_426623);
				}
				
				break;
			default: 
				F.line = 2895;
				var e_426645 = null;
				F.line = 2896;
				e_426645 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 28;
				e_426645.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_426645.parent = null;
				F.line = 975;
				raiseException(e_426645, "InternalError");
				break;
			}
			break;
		case 26:
			F.line = 978;
			switch ((parse_node_406695.children != null ? parse_node_406695.children.length : 0)) {
			case 2:
				F.line = 980;
				result_426150 = new_ast_dict_180121();
				break;
			case 3:
				F.line = 982;
				result_426150 = ast_dict_or_set_maker_406716(parse_node_406695.children[chckIndx(1, 0, parse_node_406695.children.length+0-1)-0]);
				break;
			default: 
				F.line = 2895;
				var e_426814 = null;
				F.line = 2896;
				e_426814 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 28;
				e_426814.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_426814.parent = null;
				F.line = 984;
				raiseException(e_426814, "InternalError");
				break;
			}
			break;
		case 2:
			F.line = 987;
			result_426150 = new_ast_name_406110(child1_426201.tokenNode);
			break;
		case 3:
			L2: do {
				F.line = 991;
				var c_427005 = 0;
				F.line = 3927;
				var colontmp__427404 = null;
				F.line = 991;
				colontmp__427404 = child1_426201.tokenNode.content;
				F.line = 3929;
				var i_427407 = 0;
				F.line = 3930;
				var l_427409 = (colontmp__427404 != null ? colontmp__427404.length : 0);
				L3: do {
					F.line = 3931;
						L4: while (true) {
						if (!(i_427407 < l_427409)) break L4;
							F.line = 3932;
							c_427005 = colontmp__427404[chckIndx(i_427407, 0, colontmp__427404.length+0-1)-0];
							if (!(contains_195428(HEX2EHEX2E_195202(48, 57), c_427005))) {
							F.line = 993;
							var f_427182 = nsuParseFloat(child1_426201.tokenNode.content);
							F.line = 994;
							var py_float_427183 = new_py_float_379860(f_427182);
							F.line = 995;
							result_426150 = new_ast_constant_406215(py_float_427183);
							}
							
							F.line = 3933;
							i_427407 = addInt(i_427407, 1);
							if (!(((colontmp__427404 != null ? colontmp__427404.length : 0) == l_427409))) {
							F.line = 3934;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3934, 11) `len(a) == L` string modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			if ((result_426150 === null)) {
			F.line = 998;
			var py_int_427192 = new_py_int_379786(child1_426201.tokenNode.content);
			F.line = 999;
			result_426150 = new_ast_constant_406215(py_int_427192);
			}
			
			break;
		case 4:
			F.line = 1002;
			var str_seq_427195 = null;
			L5: do {
				F.line = 1003;
				var child_427204 = null;
				F.line = 3909;
				var colontmp__427411 = null;
				F.line = 1003;
				colontmp__427411 = parse_node_406695.children;
				F.line = 3911;
				var i_427414 = 0;
				F.line = 3912;
				var l_427416 = (colontmp__427411 != null ? colontmp__427411.length : 0);
				L6: do {
					F.line = 3913;
						L7: while (true) {
						if (!(i_427414 < l_427416)) break L7;
							F.line = 3914;
							child_427204 = colontmp__427411[chckIndx(i_427414, 0, colontmp__427411.length+0-1)-0];
							F.line = 1004;
							var Tmp8 = nimCopy(null, child_427204.tokenNode.content, NTI138);
							if (str_seq_427195 != null) { str_seq_427195.push(Tmp8); } else { str_seq_427195 = [Tmp8]; };
							F.line = 3915;
							i_427414 = addInt(i_427414, 1);
							if (!(((colontmp__427411 != null ? colontmp__427411.length : 0) == l_427416))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			F.line = 1005;
			var py_string_427216 = new_py_string_176075(nsuJoinSep(str_seq_427195, []));
			F.line = 1006;
			result_426150 = new_ast_constant_406215(py_string_427216);
			break;
		case 57:
			F.line = 1009;
			result_426150 = new_ast_constant_406215(py_true_obj_354074);
			break;
		case 67:
			F.line = 1012;
			result_426150 = new_ast_constant_406215(py_false_obj_354075);
			break;
		case 75:
			F.line = 1015;
			result_426150 = new_ast_constant_406215(py_none_356044);
			break;
		default: 
			F.line = 1018;
			raiseException(new_syntax_error_156098(makeNimstrLit("ellipsis not implemented"), [], parse_node_406695.tokenNode.lineNo, parse_node_406695.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
		if (!(!((result_426150 == null)))) {
		F.line = 1020;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1020, 10) `\x0Anot (result == nil)` "));
		}
		
		F.line = 83;
		result_426150.lineno = new_int_406060(parse_node_406695.children[chckIndx(0, 0, parse_node_406695.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_426150.col_offset = new_int_406060(parse_node_406695.children[chckIndx(0, 0, parse_node_406695.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_426150;

}

function new_ast_call_180487() {
	var result_180489 = null;

	var F={procname:"asdl.newAstCall",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180489 = {m_type: NTI180473, fun: null, args: null, keywords: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180489.kind = 15;
	framePtr = F.prev;

	return result_180489;

}

function ast_argument_406726(parse_node_406728) {
	var result_430452 = null;

	var F={procname:"ast.astArgument",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406728.tokenNode.token == 170))) {
		F.line = 1194;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1194, 3) `parseNode.tokenNode.token == argument` "));
		}
		
		if (!(((parse_node_406728.children != null ? parse_node_406728.children.length : 0) == 1))) {
		F.line = 1195;
		raiseException(new_syntax_error_156098(makeNimstrLit("Only simple identifiers for function argument"), [], parse_node_406728.children[chckIndx(1, 0, parse_node_406728.children.length+0-1)-0].tokenNode.lineNo, parse_node_406728.children[chckIndx(1, 0, parse_node_406728.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1197;
		var child_430610 = parse_node_406728.children[chckIndx(0, 0, parse_node_406728.children.length+0-1)-0];
		F.line = 1198;
		result_430452 = ast_test_406648(child_430610);
		if (!(!((result_430452 == null)))) {
		F.line = 1199;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1199, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_430452;

}

function ast_arglist_406722(parse_node_406724, call_node_406725) {
	var result_430246 = null;

	var F={procname:"ast.astArglist",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1187;
		if (!((parse_node_406724.tokenNode.token == 169))) {
		F.line = 1187;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1187, 3) `parseNode.tokenNode.token == arglist` "));
		}
		
		L1: do {
			F.line = 1187;
			var child_430409 = null;
			F.line = 3909;
			var colontmp__430430 = null;
			F.line = 1187;
			colontmp__430430 = parse_node_406724.children;
			F.line = 3911;
			var i_430433 = 0;
			F.line = 3912;
			var l_430435 = (colontmp__430430 != null ? colontmp__430430.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_430433 < l_430435)) break L3;
						F.line = 3914;
						child_430409 = colontmp__430430[chckIndx(i_430433, 0, colontmp__430430.length+0-1)-0];
						if ((child_430409.tokenNode.token == 170)) {
						F.line = 1189;
						if (call_node_406725.args != null) { call_node_406725.args.push(ast_argument_406726(child_430409)); } else { call_node_406725.args = [ast_argument_406726(child_430409)]; };
						}
						
						F.line = 3915;
						i_430433 = addInt(i_430433, 1);
						if (!(((colontmp__430430 != null ? colontmp__430430.length : 0) == l_430435))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_430246 = call_node_406725;
	framePtr = F.prev;

	return result_430246;

}

function new_ast_subscript_180666() {
	var result_180668 = null;

	var F={procname:"asdl.newAstSubscript",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180668 = {m_type: NTI180656, value: null, slice: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180668.kind = 20;
	framePtr = F.prev;

	return result_180668;

}

function new_ast_index_181101() {
	var result_181103 = null;

	var F={procname:"asdl.newAstIndex",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181103 = {m_type: NTI181095, value: null, kind: 0};
		F.line = 111;
		result_181103.kind = 2;
	framePtr = F.prev;

	return result_181103;

}

function new_ast_slice_181033() {
	var result_181035 = null;

	var F={procname:"asdl.newAstSlice",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181035 = {m_type: NTI181023, lower: null, upper: null, step: null, kind: 0};
		F.line = 111;
		result_181035.kind = 0;
	framePtr = F.prev;

	return result_181035;

}

function ast_subscript_406707(parse_node_406709) {
			var Tmp1;

	var result_428626 = null;

	var F={procname:"ast.astSubscript",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1093;
		if (!((parse_node_406709.tokenNode.token == 163))) {
		F.line = 1093;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1093, 3) `parseNode.tokenNode.token == subscript` "));
		}
		
		F.line = 1093;
		var child1_428801 = parse_node_406709.children[chckIndx(0, 0, parse_node_406709.children.length+0-1)-0];
			if (!(child1_428801.tokenNode.token == 140)) Tmp1 = false; else {				Tmp1 = ((parse_node_406709.children != null ? parse_node_406709.children.length : 0) == 1);			}		if (Tmp1) {
		F.line = 1095;
		var index_428818 = new_ast_index_181101();
		F.line = 1096;
		index_428818.value = ast_test_406648(child1_428801);
		F.line = 1097;
		result_428626 = index_428818;
		break BeforeRet;
		}
		
		F.line = 1099;
		var slice_428819 = new_ast_slice_181033();
		F.line = 1101;
		var idx_428821 = 0;
		F.line = 1102;
		var child_428822 = parse_node_406709.children[chckIndx(idx_428821, 0, parse_node_406709.children.length+0-1)-0];
		if ((child_428822.tokenNode.token == 140)) {
		F.line = 1104;
		slice_428819.lower = ast_test_406648(child_428822);
		F.line = 1105;
		idx_428821 = addInt(idx_428821, 2);
		}
		else {
			if (!((child_428822.tokenNode.token == 12))) {
			F.line = 1107;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1107, 12) `child.tokenNode.token == Colon` "));
			}
			
			F.line = 1108;
			idx_428821 = addInt(idx_428821, 1);
		}
		
		if ((idx_428821 == (parse_node_406709.children != null ? parse_node_406709.children.length : 0))) {
		F.line = 1110;
		result_428626 = slice_428819;
		break BeforeRet;
		}
		
		F.line = 1112;
		child_428822 = parse_node_406709.children[chckIndx(idx_428821, 0, parse_node_406709.children.length+0-1)-0];
		if ((child_428822.tokenNode.token == 140)) {
		F.line = 1114;
		slice_428819.upper = ast_test_406648(child_428822);
		F.line = 1115;
		idx_428821 = addInt(idx_428821, 1);
		}
		
		if ((idx_428821 == (parse_node_406709.children != null ? parse_node_406709.children.length : 0))) {
		F.line = 1117;
		result_428626 = slice_428819;
		break BeforeRet;
		}
		
		F.line = 1118;
		child_428822 = parse_node_406709.children[chckIndx(idx_428821, 0, parse_node_406709.children.length+0-1)-0];
		if (!((child_428822.tokenNode.token == 164))) {
		F.line = 1120;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1120, 10) `child.tokenNode.token == sliceop` "));
		}
		
		if (((child_428822.children != null ? child_428822.children.length : 0) == 2)) {
		F.line = 1122;
		slice_428819.step = ast_test_406648(child_428822.children[chckIndx(1, 0, child_428822.children.length+0-1)-0]);
		}
		
		result_428626 = slice_428819;
	} while (false);
	framePtr = F.prev;

	return result_428626;

}

function ast_subscriptlist_406704(parse_node_406706) {
	var result_428419 = null;

	var F={procname:"ast.astSubscriptlist",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1086;
		if (!((parse_node_406706.tokenNode.token == 162))) {
		F.line = 1086;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1086, 3) `parseNode.tokenNode.token == subscriptlist` "));
		}
		
		if ((~((parse_node_406706.children != null ? parse_node_406706.children.length : 0)) == 1)) {
		F.line = 1087;
		raiseException(new_syntax_error_156098(makeNimstrLit("subscript only support one index"), [], parse_node_406706.children[chckIndx(1, 0, parse_node_406706.children.length+0-1)-0].tokenNode.lineNo, parse_node_406706.children[chckIndx(1, 0, parse_node_406706.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		result_428419 = ast_subscript_406707(parse_node_406706.children[chckIndx(0, 0, parse_node_406706.children.length+0-1)-0]);
	framePtr = F.prev;

	return result_428419;

}

function new_ast_attribute_180629() {
	var result_180631 = null;

	var F={procname:"asdl.newAstAttribute",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180631 = {m_type: NTI180619, value: null, attr: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180631.kind = 19;
	framePtr = F.prev;

	return result_180631;

}

function ast_trailer_406700(parse_node_406702, left_expr_406703) {
	var result_427826 = null;

	var F={procname:"ast.astTrailer",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406702.tokenNode.token == 161))) {
		F.line = 1057;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1057, 3) `parseNode.tokenNode.token == trailer` "));
		}
		
		F.line = 1057;
		switch (parse_node_406702.children[chckIndx(0, 0, parse_node_406702.children.length+0-1)-0].tokenNode.token) {
		case 8:
			F.line = 1059;
			var call_node_428002 = new_ast_call_180487();
			F.line = 1060;
			call_node_428002.fun = left_expr_406703;
			F.line = 1061;
			switch ((parse_node_406702.children != null ? parse_node_406702.children.length : 0)) {
			case 2:
				F.line = 1063;
				result_427826 = call_node_428002;
				break;
			case 3:
				F.line = 1065;
				result_427826 = ast_arglist_406722(parse_node_406702.children[chckIndx(1, 0, parse_node_406702.children.length+0-1)-0], call_node_428002);
				break;
			default: 
				F.line = 2895;
				var e_428015 = null;
				F.line = 2896;
				e_428015 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 28;
				e_428015.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_428015.parent = null;
				F.line = 1067;
				raiseException(e_428015, "InternalError");
				break;
			}
			break;
		case 10:
			F.line = 1069;
			var sub_428202 = new_ast_subscript_180666();
			F.line = 1070;
			sub_428202.value = left_expr_406703;
			F.line = 1071;
			sub_428202.slice = ast_subscriptlist_406704(parse_node_406702.children[chckIndx(1, 0, parse_node_406702.children.length+0-1)-0]);
			F.line = 1072;
			sub_428202.ctx = new_ast_load_180841();
			F.line = 1073;
			result_427826 = sub_428202;
			break;
		case 24:
			F.line = 1075;
			var attr_428204 = new_ast_attribute_180629();
			F.line = 1076;
			attr_428204.value = left_expr_406703;
			F.line = 1077;
			attr_428204.attr = new_identifier_406085(parse_node_406702.children[chckIndx(1, 0, parse_node_406702.children.length+0-1)-0].tokenNode.content);
			F.line = 1078;
			attr_428204.ctx = new_ast_load_180841();
			F.line = 1079;
			result_427826 = attr_428204;
			break;
		default: 
			F.line = 2895;
			var e_428211 = null;
			F.line = 2896;
			e_428211 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_428211.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_428211.parent = null;
			F.line = 1081;
			raiseException(e_428211, "InternalError");
			break;
		}
		F.line = 83;
		result_427826.lineno = new_int_406060(parse_node_406702.children[chckIndx(0, 0, parse_node_406702.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_427826.col_offset = new_int_406060(parse_node_406702.children[chckIndx(0, 0, parse_node_406702.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_427826;

}

function ast_atom_expr_406690(parse_node_406692) {
	var result_426059 = null;

	var F={procname:"ast.astAtomExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 925;
		var child_426060 = parse_node_406692.children[chckIndx(0, 0, parse_node_406692.children.length+0-1)-0];
		if ((child_426060.tokenNode.token == 89)) {
		F.line = 927;
		raiseException(new_syntax_error_156098(makeNimstrLit("Await not implemented"), [], child_426060.tokenNode.lineNo, child_426060.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 928;
		result_426059 = ast_atom_406693(child_426060);
		if (((parse_node_406692.children != null ? parse_node_406692.children.length : 0) == 1)) {
		F.line = 930;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 931;
			var trailer_child_426125 = null;
			F.line = 3909;
			var colontmp__426128 = null;
			F.line = 931;
			colontmp__426128 = HEX5BHEX5D_419235(parse_node_406692.children, HEX2EHEX2E_81053(1, 1));
			F.line = 3911;
			var i_426131 = 0;
			F.line = 3912;
			var l_426133 = (colontmp__426128 != null ? colontmp__426128.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_426131 < l_426133)) break L3;
						F.line = 3914;
						trailer_child_426125 = colontmp__426128[chckIndx(i_426131, 0, colontmp__426128.length+0-1)-0];
						F.line = 932;
						result_426059 = ast_trailer_406700(trailer_child_426125, result_426059);
						F.line = 3915;
						i_426131 = addInt(i_426131, 1);
						if (!(((colontmp__426128 != null ? colontmp__426128.length : 0) == l_426133))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_426059;

}

function new_ast_bin_op_179975() {
	var result_179977 = null;

	var F={procname:"asdl.newAstBinOp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179977 = {m_type: NTI179965, left: null, op: null, right: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179977.kind = 1;
	framePtr = F.prev;

	return result_179977;

}

function new_bin_op_406456(left_406458, op_406459, right_406460) {
	var result_406461 = null;

	var F={procname:"ast.newBinOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 61;
		result_406461 = new_ast_bin_op_179975();
		F.line = 62;
		result_406461.left = left_406458;
		F.line = 63;
		result_406461.op = op_406459;
		F.line = 64;
		result_406461.right = right_406460;
	framePtr = F.prev;

	return result_406461;

}

function new_ast_pow_181380() {
	var result_181382 = null;

	var F={procname:"asdl.newAstPow",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181382 = {m_type: NTI181376, kind: 0};
		F.line = 111;
		result_181382.kind = 6;
	framePtr = F.prev;

	return result_181382;

}

function ast_power_406687(parse_node_406689) {
	var result_426030 = null;

	var F={procname:"ast.astPower",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 914;
		var child_426031 = parse_node_406689.children[chckIndx(0, 0, parse_node_406689.children.length+0-1)-0];
		F.line = 915;
		var base_426032 = ast_atom_expr_406690(child_426031);
		if (((parse_node_406689.children != null ? parse_node_406689.children.length : 0) == 1)) {
		F.line = 917;
		result_426030 = base_426032;
		}
		else {
			F.line = 919;
			var exp_426040 = ast_factor_406684(parse_node_406689.children[chckIndx(2, 0, parse_node_406689.children.length+0-1)-0]);
			F.line = 920;
			result_426030 = new_bin_op_406456(base_426032, new_ast_pow_181380(), exp_426040);
			F.line = 83;
			result_426030.lineno = new_int_406060(parse_node_406689.children[chckIndx(1, 0, parse_node_406689.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			result_426030.col_offset = new_int_406060(parse_node_406689.children[chckIndx(1, 0, parse_node_406689.children.length+0-1)-0].tokenNode.colNo);
		}
		
	framePtr = F.prev;

	return result_426030;

}

function new_ast_uadd_181659() {
	var result_181661 = null;

	var F={procname:"asdl.newAstUAdd",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181661 = {m_type: NTI181655, kind: 0};
		F.line = 111;
		result_181661.kind = 2;
	framePtr = F.prev;

	return result_181661;

}

function new_ast_usub_181690() {
	var result_181692 = null;

	var F={procname:"asdl.newAstUSub",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181692 = {m_type: NTI181686, kind: 0};
		F.line = 111;
		result_181692.kind = 3;
	framePtr = F.prev;

	return result_181692;

}

function ast_factor_406684(parse_node_406686) {
	var result_425694 = null;

	var F={procname:"ast.astFactor",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406686.tokenNode.token == 156))) {
		F.line = 894;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(894, 3) `parseNode.tokenNode.token == factor` "));
		}
		
		F.line = 894;
		switch ((parse_node_406686.children != null ? parse_node_406686.children.length : 0)) {
		case 1:
			F.line = 896;
			var child_425808 = parse_node_406686.children[chckIndx(0, 0, parse_node_406686.children.length+0-1)-0];
			F.line = 897;
			result_425694 = ast_power_406687(child_425808);
			break;
		case 2:
			F.line = 899;
			var child1_425809 = parse_node_406686.children[chckIndx(0, 0, parse_node_406686.children.length+0-1)-0];
			F.line = 900;
			var factor_425810 = ast_factor_406684(parse_node_406686.children[chckIndx(1, 0, parse_node_406686.children.length+0-1)-0]);
			F.line = 901;
			switch (child1_425809.tokenNode.token) {
			case 15:
				F.line = 903;
				result_425694 = new_unary_op_406475(new_ast_uadd_181659(), factor_425810);
				break;
			case 16:
				F.line = 905;
				result_425694 = new_unary_op_406475(new_ast_usub_181690(), factor_425810);
				break;
			default: 
				F.line = 907;
				raiseException(new_syntax_error_156098(makeNimstrLit("Unary ~ not implemented"), [], child1_425809.tokenNode.lineNo, child1_425809.tokenNode.colNo), "SyntaxError:ObjectType");
				break;
			}
			F.line = 83;
			result_425694.lineno = new_int_406060(parse_node_406686.children[chckIndx(0, 0, parse_node_406686.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			result_425694.col_offset = new_int_406060(parse_node_406686.children[chckIndx(0, 0, parse_node_406686.children.length+0-1)-0].tokenNode.colNo);
			break;
		default: 
			F.line = 2895;
			var e_425822 = null;
			F.line = 2896;
			e_425822 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_425822.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_425822.parent = null;
			F.line = 910;
			raiseException(e_425822, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_425694;

}

function new_ast_add_181194() {
	var result_181196 = null;

	var F={procname:"asdl.newAstAdd",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181196 = {m_type: NTI181190, kind: 0};
		F.line = 111;
		result_181196.kind = 0;
	framePtr = F.prev;

	return result_181196;

}

function new_ast_sub_181225() {
	var result_181227 = null;

	var F={procname:"asdl.newAstSub",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181227 = {m_type: NTI181221, kind: 0};
		F.line = 111;
		result_181227.kind = 1;
	framePtr = F.prev;

	return result_181227;

}

function new_ast_mult_181256() {
	var result_181258 = null;

	var F={procname:"asdl.newAstMult",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181258 = {m_type: NTI181252, kind: 0};
		F.line = 111;
		result_181258.kind = 2;
	framePtr = F.prev;

	return result_181258;

}

function new_ast_div_181318() {
	var result_181320 = null;

	var F={procname:"asdl.newAstDiv",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181320 = {m_type: NTI181314, kind: 0};
		F.line = 111;
		result_181320.kind = 4;
	framePtr = F.prev;

	return result_181320;

}

function new_ast_mod_181349() {
	var result_181351 = null;

	var F={procname:"asdl.newAstMod",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181351 = {m_type: NTI181345, kind: 0};
		F.line = 111;
		result_181351.kind = 5;
	framePtr = F.prev;

	return result_181351;

}

function new_ast_floor_div_181566() {
	var result_181568 = null;

	var F={procname:"asdl.newAstFloorDiv",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181568 = {m_type: NTI181562, kind: 0};
		F.line = 111;
		result_181568.kind = 12;
	framePtr = F.prev;

	return result_181568;

}

function ast_term_406681(parse_node_406683) {
	var result_425294 = null;

	var F={procname:"ast.astTerm",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406683.tokenNode.token == 155))) {
		F.line = 890;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(890, 3) `parseNode.tokenNode.token == term` "));
		}
		
		if (!((modInt((parse_node_406683.children != null ? parse_node_406683.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_425606 = parse_node_406683.children[chckIndx(0, 0, parse_node_406683.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_425608 = ast_factor_406684(first_child_425606);
		F.line = 840;
		result_425294 = first_ast_node_425608;
		L1: do {
			F.line = 841;
			var idx_425628 = 0;
			F.line = 2104;
			var colontmp__425671 = 0;
			F.line = 841;
			colontmp__425671 = divInt((parse_node_406683.children != null ? parse_node_406683.children.length : 0), 2);
			F.line = 2107;
			var res_425674 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_425674 <= colontmp__425671)) break L3;
						F.line = 2109;
						idx_425628 = res_425674;
						F.line = 842;
						var op_parse_node_425635 = parse_node_406683.children[chckIndx(subInt(mulInt(2, idx_425628), 1), 0, parse_node_406683.children.length+0-1)-0];
						F.line = 843;
						var op_425637 = null;
						F.line = 844;
						var token_425639 = op_parse_node_425635.tokenNode.token;
						F.line = 845;
						switch (token_425639) {
						case 15:
							F.line = 847;
							op_425637 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_425637 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_425637 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_425637 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_425637 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_425637 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_425648 = mnewString(0);
							F.line = 859;
							if (fmt_res_425648 != null) { fmt_res_425648 = (fmt_res_425648).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_425648 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_425656 = (fmt_res_425648).concat(reprEnum(token_425639, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156098(msg_425656, [], parse_node_406683.tokenNode.lineNo, parse_node_406683.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_425665 = parse_node_406683.children[chckIndx(mulInt(2, idx_425628), 0, parse_node_406683.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_425667 = ast_factor_406684(second_child_425665);
						F.line = 864;
						result_425294 = new_bin_op_406456(result_425294, op_425637, second_ast_node_425667);
						F.line = 83;
						result_425294.lineno = new_int_406060(op_parse_node_425635.tokenNode.lineNo);
						F.line = 84;
						result_425294.col_offset = new_int_406060(op_parse_node_425635.tokenNode.colNo);
						F.line = 2110;
						res_425674 = addInt(res_425674, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_425294;

}

function ast_arith_expr_406678(parse_node_406680) {
	var result_424894 = null;

	var F={procname:"ast.astArithExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406680.tokenNode.token == 154))) {
		F.line = 886;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(886, 3) `parseNode.tokenNode.token == arith_expr` "));
		}
		
		if (!((modInt((parse_node_406680.children != null ? parse_node_406680.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_425206 = parse_node_406680.children[chckIndx(0, 0, parse_node_406680.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_425208 = ast_term_406681(first_child_425206);
		F.line = 840;
		result_424894 = first_ast_node_425208;
		L1: do {
			F.line = 841;
			var idx_425228 = 0;
			F.line = 2104;
			var colontmp__425271 = 0;
			F.line = 841;
			colontmp__425271 = divInt((parse_node_406680.children != null ? parse_node_406680.children.length : 0), 2);
			F.line = 2107;
			var res_425274 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_425274 <= colontmp__425271)) break L3;
						F.line = 2109;
						idx_425228 = res_425274;
						F.line = 842;
						var op_parse_node_425235 = parse_node_406680.children[chckIndx(subInt(mulInt(2, idx_425228), 1), 0, parse_node_406680.children.length+0-1)-0];
						F.line = 843;
						var op_425237 = null;
						F.line = 844;
						var token_425239 = op_parse_node_425235.tokenNode.token;
						F.line = 845;
						switch (token_425239) {
						case 15:
							F.line = 847;
							op_425237 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_425237 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_425237 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_425237 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_425237 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_425237 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_425248 = mnewString(0);
							F.line = 859;
							if (fmt_res_425248 != null) { fmt_res_425248 = (fmt_res_425248).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_425248 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_425256 = (fmt_res_425248).concat(reprEnum(token_425239, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156098(msg_425256, [], parse_node_406680.tokenNode.lineNo, parse_node_406680.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_425265 = parse_node_406680.children[chckIndx(mulInt(2, idx_425228), 0, parse_node_406680.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_425267 = ast_term_406681(second_child_425265);
						F.line = 864;
						result_424894 = new_bin_op_406456(result_424894, op_425237, second_ast_node_425267);
						F.line = 83;
						result_424894.lineno = new_int_406060(op_parse_node_425235.tokenNode.lineNo);
						F.line = 84;
						result_424894.col_offset = new_int_406060(op_parse_node_425235.tokenNode.colNo);
						F.line = 2110;
						res_425274 = addInt(res_425274, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_424894;

}

function ast_shift_expr_406675(parse_node_406677) {
	var result_424494 = null;

	var F={procname:"ast.astShiftExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406677.tokenNode.token == 153))) {
		F.line = 882;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(882, 3) `parseNode.tokenNode.token == shift_expr` "));
		}
		
		if (!((modInt((parse_node_406677.children != null ? parse_node_406677.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_424806 = parse_node_406677.children[chckIndx(0, 0, parse_node_406677.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_424808 = ast_arith_expr_406678(first_child_424806);
		F.line = 840;
		result_424494 = first_ast_node_424808;
		L1: do {
			F.line = 841;
			var idx_424828 = 0;
			F.line = 2104;
			var colontmp__424871 = 0;
			F.line = 841;
			colontmp__424871 = divInt((parse_node_406677.children != null ? parse_node_406677.children.length : 0), 2);
			F.line = 2107;
			var res_424874 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_424874 <= colontmp__424871)) break L3;
						F.line = 2109;
						idx_424828 = res_424874;
						F.line = 842;
						var op_parse_node_424835 = parse_node_406677.children[chckIndx(subInt(mulInt(2, idx_424828), 1), 0, parse_node_406677.children.length+0-1)-0];
						F.line = 843;
						var op_424837 = null;
						F.line = 844;
						var token_424839 = op_parse_node_424835.tokenNode.token;
						F.line = 845;
						switch (token_424839) {
						case 15:
							F.line = 847;
							op_424837 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_424837 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_424837 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_424837 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_424837 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_424837 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_424848 = mnewString(0);
							F.line = 859;
							if (fmt_res_424848 != null) { fmt_res_424848 = (fmt_res_424848).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_424848 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_424856 = (fmt_res_424848).concat(reprEnum(token_424839, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156098(msg_424856, [], parse_node_406677.tokenNode.lineNo, parse_node_406677.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_424865 = parse_node_406677.children[chckIndx(mulInt(2, idx_424828), 0, parse_node_406677.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_424867 = ast_arith_expr_406678(second_child_424865);
						F.line = 864;
						result_424494 = new_bin_op_406456(result_424494, op_424837, second_ast_node_424867);
						F.line = 83;
						result_424494.lineno = new_int_406060(op_parse_node_424835.tokenNode.lineNo);
						F.line = 84;
						result_424494.col_offset = new_int_406060(op_parse_node_424835.tokenNode.colNo);
						F.line = 2110;
						res_424874 = addInt(res_424874, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_424494;

}

function ast_and_expr_406672(parse_node_406674) {
	var result_424094 = null;

	var F={procname:"ast.astAndExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406674.tokenNode.token == 152))) {
		F.line = 878;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(878, 3) `parseNode.tokenNode.token == and_expr` "));
		}
		
		if (!((modInt((parse_node_406674.children != null ? parse_node_406674.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_424406 = parse_node_406674.children[chckIndx(0, 0, parse_node_406674.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_424408 = ast_shift_expr_406675(first_child_424406);
		F.line = 840;
		result_424094 = first_ast_node_424408;
		L1: do {
			F.line = 841;
			var idx_424428 = 0;
			F.line = 2104;
			var colontmp__424471 = 0;
			F.line = 841;
			colontmp__424471 = divInt((parse_node_406674.children != null ? parse_node_406674.children.length : 0), 2);
			F.line = 2107;
			var res_424474 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_424474 <= colontmp__424471)) break L3;
						F.line = 2109;
						idx_424428 = res_424474;
						F.line = 842;
						var op_parse_node_424435 = parse_node_406674.children[chckIndx(subInt(mulInt(2, idx_424428), 1), 0, parse_node_406674.children.length+0-1)-0];
						F.line = 843;
						var op_424437 = null;
						F.line = 844;
						var token_424439 = op_parse_node_424435.tokenNode.token;
						F.line = 845;
						switch (token_424439) {
						case 15:
							F.line = 847;
							op_424437 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_424437 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_424437 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_424437 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_424437 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_424437 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_424448 = mnewString(0);
							F.line = 859;
							if (fmt_res_424448 != null) { fmt_res_424448 = (fmt_res_424448).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_424448 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_424456 = (fmt_res_424448).concat(reprEnum(token_424439, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156098(msg_424456, [], parse_node_406674.tokenNode.lineNo, parse_node_406674.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_424465 = parse_node_406674.children[chckIndx(mulInt(2, idx_424428), 0, parse_node_406674.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_424467 = ast_shift_expr_406675(second_child_424465);
						F.line = 864;
						result_424094 = new_bin_op_406456(result_424094, op_424437, second_ast_node_424467);
						F.line = 83;
						result_424094.lineno = new_int_406060(op_parse_node_424435.tokenNode.lineNo);
						F.line = 84;
						result_424094.col_offset = new_int_406060(op_parse_node_424435.tokenNode.colNo);
						F.line = 2110;
						res_424474 = addInt(res_424474, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_424094;

}

function ast_xor_expr_406669(parse_node_406671) {
	var result_423694 = null;

	var F={procname:"ast.astXorExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406671.tokenNode.token == 151))) {
		F.line = 874;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(874, 3) `parseNode.tokenNode.token == xor_expr` "));
		}
		
		if (!((modInt((parse_node_406671.children != null ? parse_node_406671.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_424006 = parse_node_406671.children[chckIndx(0, 0, parse_node_406671.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_424008 = ast_and_expr_406672(first_child_424006);
		F.line = 840;
		result_423694 = first_ast_node_424008;
		L1: do {
			F.line = 841;
			var idx_424028 = 0;
			F.line = 2104;
			var colontmp__424071 = 0;
			F.line = 841;
			colontmp__424071 = divInt((parse_node_406671.children != null ? parse_node_406671.children.length : 0), 2);
			F.line = 2107;
			var res_424074 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_424074 <= colontmp__424071)) break L3;
						F.line = 2109;
						idx_424028 = res_424074;
						F.line = 842;
						var op_parse_node_424035 = parse_node_406671.children[chckIndx(subInt(mulInt(2, idx_424028), 1), 0, parse_node_406671.children.length+0-1)-0];
						F.line = 843;
						var op_424037 = null;
						F.line = 844;
						var token_424039 = op_parse_node_424035.tokenNode.token;
						F.line = 845;
						switch (token_424039) {
						case 15:
							F.line = 847;
							op_424037 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_424037 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_424037 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_424037 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_424037 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_424037 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_424048 = mnewString(0);
							F.line = 859;
							if (fmt_res_424048 != null) { fmt_res_424048 = (fmt_res_424048).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_424048 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_424056 = (fmt_res_424048).concat(reprEnum(token_424039, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156098(msg_424056, [], parse_node_406671.tokenNode.lineNo, parse_node_406671.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_424065 = parse_node_406671.children[chckIndx(mulInt(2, idx_424028), 0, parse_node_406671.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_424067 = ast_and_expr_406672(second_child_424065);
						F.line = 864;
						result_423694 = new_bin_op_406456(result_423694, op_424037, second_ast_node_424067);
						F.line = 83;
						result_423694.lineno = new_int_406060(op_parse_node_424035.tokenNode.lineNo);
						F.line = 84;
						result_423694.col_offset = new_int_406060(op_parse_node_424035.tokenNode.colNo);
						F.line = 2110;
						res_424074 = addInt(res_424074, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_423694;

}

function ast_expr_406666(parse_node_406668) {
	var result_423273 = null;

	var F={procname:"ast.astExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406668.tokenNode.token == 150))) {
		F.line = 870;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(870, 3) `parseNode.tokenNode.token == expr` "));
		}
		
		if (!((modInt((parse_node_406668.children != null ? parse_node_406668.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_423606 = parse_node_406668.children[chckIndx(0, 0, parse_node_406668.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_423608 = ast_xor_expr_406669(first_child_423606);
		F.line = 840;
		result_423273 = first_ast_node_423608;
		L1: do {
			F.line = 841;
			var idx_423628 = 0;
			F.line = 2104;
			var colontmp__423671 = 0;
			F.line = 841;
			colontmp__423671 = divInt((parse_node_406668.children != null ? parse_node_406668.children.length : 0), 2);
			F.line = 2107;
			var res_423674 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_423674 <= colontmp__423671)) break L3;
						F.line = 2109;
						idx_423628 = res_423674;
						F.line = 842;
						var op_parse_node_423635 = parse_node_406668.children[chckIndx(subInt(mulInt(2, idx_423628), 1), 0, parse_node_406668.children.length+0-1)-0];
						F.line = 843;
						var op_423637 = null;
						F.line = 844;
						var token_423639 = op_parse_node_423635.tokenNode.token;
						F.line = 845;
						switch (token_423639) {
						case 15:
							F.line = 847;
							op_423637 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_423637 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_423637 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_423637 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_423637 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_423637 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_423648 = mnewString(0);
							F.line = 859;
							if (fmt_res_423648 != null) { fmt_res_423648 = (fmt_res_423648).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_423648 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_423656 = (fmt_res_423648).concat(reprEnum(token_423639, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156098(msg_423656, [], parse_node_406668.tokenNode.lineNo, parse_node_406668.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_423665 = parse_node_406668.children[chckIndx(mulInt(2, idx_423628), 0, parse_node_406668.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_423667 = ast_xor_expr_406669(second_child_423665);
						F.line = 864;
						result_423273 = new_bin_op_406456(result_423273, op_423637, second_ast_node_423667);
						F.line = 83;
						result_423273.lineno = new_int_406060(op_parse_node_423635.tokenNode.lineNo);
						F.line = 84;
						result_423273.col_offset = new_int_406060(op_parse_node_423635.tokenNode.colNo);
						F.line = 2110;
						res_423674 = addInt(res_423674, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_423273;

}

function new_ast_lt_181783() {
	var result_181785 = null;

	var F={procname:"asdl.newAstLt",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181785 = {m_type: NTI181779, kind: 0};
		F.line = 111;
		result_181785.kind = 2;
	framePtr = F.prev;

	return result_181785;

}

function new_ast_gt_181845() {
	var result_181847 = null;

	var F={procname:"asdl.newAstGt",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181847 = {m_type: NTI181841, kind: 0};
		F.line = 111;
		result_181847.kind = 4;
	framePtr = F.prev;

	return result_181847;

}

function new_ast_eq_181721() {
	var result_181723 = null;

	var F={procname:"asdl.newAstEq",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181723 = {m_type: NTI181717, kind: 0};
		F.line = 111;
		result_181723.kind = 0;
	framePtr = F.prev;

	return result_181723;

}

function new_ast_gt_e_181876() {
	var result_181878 = null;

	var F={procname:"asdl.newAstGtE",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181878 = {m_type: NTI181872, kind: 0};
		F.line = 111;
		result_181878.kind = 5;
	framePtr = F.prev;

	return result_181878;

}

function new_ast_lt_e_181814() {
	var result_181816 = null;

	var F={procname:"asdl.newAstLtE",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181816 = {m_type: NTI181810, kind: 0};
		F.line = 111;
		result_181816.kind = 3;
	framePtr = F.prev;

	return result_181816;

}

function new_ast_not_eq_181752() {
	var result_181754 = null;

	var F={procname:"asdl.newAstNotEq",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181754 = {m_type: NTI181748, kind: 0};
		F.line = 111;
		result_181754.kind = 1;
	framePtr = F.prev;

	return result_181754;

}

function new_ast_in_181969() {
	var result_181971 = null;

	var F={procname:"asdl.newAstIn",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181971 = {m_type: NTI181965, kind: 0};
		F.line = 111;
		result_181971.kind = 8;
	framePtr = F.prev;

	return result_181971;

}

function new_ast_not_in_182000() {
	var result_182002 = null;

	var F={procname:"asdl.newAstNotIn",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182002 = {m_type: NTI181996, kind: 0};
		F.line = 111;
		result_182002.kind = 9;
	framePtr = F.prev;

	return result_182002;

}

function ast_comp_op_406663(parse_node_406665) {
	var result_422817 = null;

	var F={procname:"ast.astCompOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406665.tokenNode.token == 148))) {
		F.line = 811;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(811, 3) `parseNode.tokenNode.token == comp_op` "));
		}
		
		F.line = 811;
		var token_423001 = parse_node_406665.children[chckIndx(0, 0, parse_node_406665.children.length+0-1)-0].tokenNode.token;
		F.line = 812;
		switch (token_423001) {
		case 21:
			F.line = 814;
			result_422817 = new_ast_lt_181783();
			break;
		case 22:
			F.line = 816;
			result_422817 = new_ast_gt_181845();
			break;
		case 28:
			F.line = 818;
			result_422817 = new_ast_eq_181721();
			break;
		case 31:
			F.line = 820;
			result_422817 = new_ast_gt_e_181876();
			break;
		case 30:
			F.line = 822;
			result_422817 = new_ast_lt_e_181814();
			break;
		case 29:
			F.line = 824;
			result_422817 = new_ast_not_eq_181752();
			break;
		case 74:
			F.line = 826;
			result_422817 = new_ast_in_181969();
			break;
		case 55:
			F.line = 828;
			result_422817 = new_ast_not_in_182000();
			break;
		default: 
			F.line = 830;
			var fmt_res_423012 = mnewString(0);
			F.line = 830;
			if (fmt_res_423012 != null) { fmt_res_423012 = (fmt_res_423012).concat(makeNimstrLit("Complex comparison operation ")); } else { fmt_res_423012 = makeNimstrLit("Complex comparison operation "); };
			F.line = 270;
			if (fmt_res_423012 != null) { fmt_res_423012 = (fmt_res_423012).concat(reprEnum(token_423001, NTI202995)); } else { fmt_res_423012 = reprEnum(token_423001, NTI202995).slice(); };
			F.line = 830;
			if (fmt_res_423012 != null) { fmt_res_423012 = (fmt_res_423012).concat(makeNimstrLit(" not implemented")); } else { fmt_res_423012 = makeNimstrLit(" not implemented"); };
			F.line = 830;
			raiseException(new_syntax_error_156098(fmt_res_423012, [], parse_node_406665.tokenNode.lineNo, parse_node_406665.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
	framePtr = F.prev;

	return result_422817;

}

function new_ast_compare_180446() {
	var result_180448 = null;

	var F={procname:"asdl.newAstCompare",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180448 = {m_type: NTI180432, left: null, ops: null, comparators: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180448.kind = 14;
	framePtr = F.prev;

	return result_180448;

}

function ast_comparison_406660(parse_node_406662) {
	var result_422217 = null;

	var F={procname:"ast.astComparison",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_406662.tokenNode.token == 147))) {
		F.line = 792;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(792, 3) `parseNode.tokenNode.token == comparison` "));
		}
		
		F.line = 792;
		var expr1_422401 = ast_expr_406666(parse_node_406662.children[chckIndx(0, 0, parse_node_406662.children.length+0-1)-0]);
		if (((parse_node_406662.children != null ? parse_node_406662.children.length : 0) == 1)) {
		F.line = 794;
		result_422217 = expr1_422401;
		if (!(!((result_422217 == null)))) {
		F.line = 795;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(795, 12) `\x0Anot (result == nil)` "));
		}
		
		F.line = 796;
		break BeforeRet;
		}
		
		if (!(((parse_node_406662.children != null ? parse_node_406662.children.length : 0) == 3))) {
		F.line = 798;
		raiseException(new_syntax_error_156098(makeNimstrLit("Chained comparison not implemented"), [], parse_node_406662.children[chckIndx(2, 0, parse_node_406662.children.length+0-1)-0].tokenNode.lineNo, parse_node_406662.children[chckIndx(2, 0, parse_node_406662.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 799;
		var op_422610 = ast_comp_op_406663(parse_node_406662.children[chckIndx(1, 0, parse_node_406662.children.length+0-1)-0]);
		F.line = 800;
		var expr2_422611 = ast_expr_406666(parse_node_406662.children[chckIndx(2, 0, parse_node_406662.children.length+0-1)-0]);
		F.line = 801;
		var cmp_422612 = new_ast_compare_180446();
		F.line = 802;
		cmp_422612.left = expr1_422401;
		F.line = 803;
		if (cmp_422612.ops != null) { cmp_422612.ops.push(op_422610); } else { cmp_422612.ops = [op_422610]; };
		F.line = 804;
		if (cmp_422612.comparators != null) { cmp_422612.comparators.push(expr2_422611); } else { cmp_422612.comparators = [expr2_422611]; };
		F.line = 87;
		cmp_422612.lineno = expr1_422401.lineno;
		F.line = 88;
		cmp_422612.col_offset = expr1_422401.col_offset;
		F.line = 806;
		result_422217 = cmp_422612;
		if (!(!((result_422217 == null)))) {
		F.line = 807;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(807, 10) `\x0Anot (result == nil)` "));
		}
		
	} while (false);
	framePtr = F.prev;

	return result_422217;

}

function ast_not_test_406657(parse_node_406659) {
	var result_421678 = null;

	var F={procname:"ast.astNotTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406659.tokenNode.token == 146))) {
		F.line = 779;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(779, 3) `parseNode.tokenNode.token == not_test` "));
		}
		
		F.line = 779;
		var child_421801 = parse_node_406659.children[chckIndx(0, 0, parse_node_406659.children.length+0-1)-0];
		F.line = 780;
		switch (child_421801.tokenNode.token) {
		case 55:
			F.line = 782;
			result_421678 = new_unary_op_406475(new_ast_not_181628(), ast_not_test_406657(parse_node_406659.children[chckIndx(1, 0, parse_node_406659.children.length+0-1)-0]));
			F.line = 83;
			result_421678.lineno = new_int_406060(parse_node_406659.children[chckIndx(0, 0, parse_node_406659.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			result_421678.col_offset = new_int_406060(parse_node_406659.children[chckIndx(0, 0, parse_node_406659.children.length+0-1)-0].tokenNode.colNo);
			break;
		case 147:
			F.line = 785;
			result_421678 = ast_comparison_406660(child_421801);
			break;
		default: 
			F.line = 2895;
			var e_421811 = null;
			F.line = 2896;
			e_421811 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_421811.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_421811.parent = null;
			F.line = 787;
			raiseException(e_421811, "InternalError");
			break;
		}
		if (!(!((result_421678 == null)))) {
		F.line = 788;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(788, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_421678;

}

function new_ast_and_181132() {
	var result_181134 = null;

	var F={procname:"asdl.newAstAnd",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181134 = {m_type: NTI181128, kind: 0};
		F.line = 111;
		result_181134.kind = 0;
	framePtr = F.prev;

	return result_181134;

}

function new_ast_or_181163() {
	var result_181165 = null;

	var F={procname:"asdl.newAstOr",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181165 = {m_type: NTI181159, kind: 0};
		F.line = 111;
		result_181165.kind = 1;
	framePtr = F.prev;

	return result_181165;

}

function new_ast_bool_op_179938() {
	var result_179940 = null;

	var F={procname:"asdl.newAstBoolOp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179940 = {m_type: NTI179928, op: null, values: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179940.kind = 0;
	framePtr = F.prev;

	return result_179940;

}

function new_bool_op_406437(op_406439, values_406441) {
	var result_406442 = null;

	var F={procname:"ast.newBoolOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 56;
		result_406442 = new_ast_bool_op_179938();
		F.line = 57;
		result_406442.op = op_406439;
		F.line = 58;
		result_406442.values = nimCopy(null, values_406441, NTI406440);
	framePtr = F.prev;

	return result_406442;

}

function ast_and_test_406654(parse_node_406656) {
	var result_421078 = null;

	var F={procname:"ast.astAndTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_406656.tokenNode.token == 145))) {
		F.line = 775;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(775, 3) `parseNode.tokenNode.token == and_test` "));
		}
		
		if (!((modInt((parse_node_406656.children != null ? parse_node_406656.children.length : 0), 2) == 1))) {
		F.line = 747;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(747, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 748;
		var first_child_421406 = parse_node_406656.children[chckIndx(0, 0, parse_node_406656.children.length+0-1)-0];
		F.line = 749;
		var first_ast_node_421408 = ast_not_test_406657(first_child_421406);
		if (((parse_node_406656.children != null ? parse_node_406656.children.length : 0) == 1)) {
		F.line = 751;
		result_421078 = first_ast_node_421408;
		break BeforeRet;
		}
		
		F.line = 752;
		var token_421421 = parse_node_406656.children[chckIndx(1, 0, parse_node_406656.children.length+0-1)-0].tokenNode.token;
		F.line = 753;
		var op_421423 = null;
		F.line = 754;
		switch (token_421421) {
		case 60:
			F.line = 756;
			op_421423 = new_ast_and_181132();
			break;
		case 73:
			F.line = 758;
			op_421423 = new_ast_or_181163();
			break;
		default: 
			F.line = 2895;
			var e_421431 = null;
			F.line = 2896;
			e_421431 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_421431.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_421431.parent = null;
			F.line = 760;
			raiseException(e_421431, "InternalError");
			break;
		}
		F.line = 761;
		var node_seq_421614 = [first_ast_node_421408];
		L1: do {
			F.line = 762;
			var idx_421634 = 0;
			F.line = 2104;
			var colontmp__421655 = 0;
			F.line = 762;
			colontmp__421655 = divInt((parse_node_406656.children != null ? parse_node_406656.children.length : 0), 2);
			F.line = 2107;
			var res_421658 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_421658 <= colontmp__421655)) break L3;
						F.line = 2109;
						idx_421634 = res_421658;
						F.line = 763;
						var next_child_421641 = parse_node_406656.children[chckIndx(mulInt(2, idx_421634), 0, parse_node_406656.children.length+0-1)-0];
						F.line = 764;
						var next_ast_node_421643 = ast_not_test_406657(next_child_421641);
						F.line = 765;
						if (node_seq_421614 != null) { node_seq_421614.push(next_ast_node_421643); } else { node_seq_421614 = [next_ast_node_421643]; };
						F.line = 2110;
						res_421658 = addInt(res_421658, 1);
					}
			} while(false);
		} while(false);
		F.line = 766;
		result_421078 = new_bool_op_406437(op_421423, node_seq_421614);
		F.line = 87;
		result_421078.lineno = first_ast_node_421408.lineno;
		F.line = 88;
		result_421078.col_offset = first_ast_node_421408.col_offset;
	} while (false);
	framePtr = F.prev;

	return result_421078;

}

function ast_or_test_406651(parse_node_406653) {
	var result_420461 = null;

	var F={procname:"ast.astOrTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_406653.tokenNode.token == 144))) {
		F.line = 771;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(771, 3) `parseNode.tokenNode.token == or_test` "));
		}
		
		if (!((modInt((parse_node_406653.children != null ? parse_node_406653.children.length : 0), 2) == 1))) {
		F.line = 747;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(747, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 748;
		var first_child_420806 = parse_node_406653.children[chckIndx(0, 0, parse_node_406653.children.length+0-1)-0];
		F.line = 749;
		var first_ast_node_420808 = ast_and_test_406654(first_child_420806);
		if (((parse_node_406653.children != null ? parse_node_406653.children.length : 0) == 1)) {
		F.line = 751;
		result_420461 = first_ast_node_420808;
		break BeforeRet;
		}
		
		F.line = 752;
		var token_420821 = parse_node_406653.children[chckIndx(1, 0, parse_node_406653.children.length+0-1)-0].tokenNode.token;
		F.line = 753;
		var op_420823 = null;
		F.line = 754;
		switch (token_420821) {
		case 60:
			F.line = 756;
			op_420823 = new_ast_and_181132();
			break;
		case 73:
			F.line = 758;
			op_420823 = new_ast_or_181163();
			break;
		default: 
			F.line = 2895;
			var e_420831 = null;
			F.line = 2896;
			e_420831 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_420831.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_420831.parent = null;
			F.line = 760;
			raiseException(e_420831, "InternalError");
			break;
		}
		F.line = 761;
		var node_seq_421014 = [first_ast_node_420808];
		L1: do {
			F.line = 762;
			var idx_421034 = 0;
			F.line = 2104;
			var colontmp__421055 = 0;
			F.line = 762;
			colontmp__421055 = divInt((parse_node_406653.children != null ? parse_node_406653.children.length : 0), 2);
			F.line = 2107;
			var res_421058 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_421058 <= colontmp__421055)) break L3;
						F.line = 2109;
						idx_421034 = res_421058;
						F.line = 763;
						var next_child_421041 = parse_node_406653.children[chckIndx(mulInt(2, idx_421034), 0, parse_node_406653.children.length+0-1)-0];
						F.line = 764;
						var next_ast_node_421043 = ast_and_test_406654(next_child_421041);
						F.line = 765;
						if (node_seq_421014 != null) { node_seq_421014.push(next_ast_node_421043); } else { node_seq_421014 = [next_ast_node_421043]; };
						F.line = 2110;
						res_421058 = addInt(res_421058, 1);
					}
			} while(false);
		} while(false);
		F.line = 766;
		result_420461 = new_bool_op_406437(op_420823, node_seq_421014);
		F.line = 87;
		result_420461.lineno = first_ast_node_420808.lineno;
		F.line = 88;
		result_420461.col_offset = first_ast_node_420808.col_offset;
	} while (false);
	framePtr = F.prev;

	return result_420461;

}

function ast_test_406648(parse_node_406650) {
	var result_420038 = null;

	var F={procname:"ast.astTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406650.tokenNode.token == 140))) {
		F.line = 725;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(725, 3) `parseNode.tokenNode.token == test` "));
		}
		
		if (!(((parse_node_406650.children != null ? parse_node_406650.children.length : 0) == 1))) {
		F.line = 726;
		raiseException(new_syntax_error_156098(makeNimstrLit("Inline if else not implemented"), [], parse_node_406650.children[chckIndx(1, 0, parse_node_406650.children.length+0-1)-0].tokenNode.lineNo, parse_node_406650.children[chckIndx(1, 0, parse_node_406650.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 727;
		var child_420210 = parse_node_406650.children[chckIndx(0, 0, parse_node_406650.children.length+0-1)-0];
		if (!((child_420210.tokenNode.token == 144))) {
		F.line = 729;
		raiseException(new_syntax_error_156098(makeNimstrLit("lambda not implemented"), [], parse_node_406650.tokenNode.lineNo, parse_node_406650.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 730;
		result_420038 = ast_or_test_406651(child_420210);
		if (!(!((result_420038 == null)))) {
		F.line = 731;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(731, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_420038;

}

function ast_testlist_star_expr_406568(parse_node_406570) {
	var result_413017 = null;

	var F={procname:"ast.astTestlistStarExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406570.tokenNode.token == 109))) {
		F.line = 477;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(477, 3) `parseNode.tokenNode.token == testlist_star_expr` "));
		}
		
		F.line = 477;
		var elms_413202 = null;
		L1: do {
			F.line = 478;
			var i_413220 = 0;
			F.line = 3616;
			var colontmp__413402 = 0;
			F.line = 478;
			colontmp__413402 = divInt(addInt((parse_node_406570.children != null ? parse_node_406570.children.length : 0), 1), 2);
			F.line = 3617;
			var i_413405 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_413405 < colontmp__413402)) break L3;
						F.line = 3619;
						i_413220 = i_413405;
						F.line = 479;
						var child_413222 = parse_node_406570.children[chckIndx(mulInt(2, i_413220), 0, parse_node_406570.children.length+0-1)-0];
						if (!((child_413222.tokenNode.token == 140))) {
						F.line = 481;
						raiseException(new_syntax_error_156098(makeNimstrLit("Star expression not implemented"), [], child_413222.tokenNode.lineNo, child_413222.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 482;
						if (elms_413202 != null) { elms_413202.push(ast_test_406648(child_413222)); } else { elms_413202 = [ast_test_406648(child_413222)]; };
						F.line = 3620;
						i_413405 = addInt(i_413405, 1);
					}
			} while(false);
		} while(false);
		if (((parse_node_406570.children != null ? parse_node_406570.children.length : 0) == 1)) {
		F.line = 484;
		result_413017 = elms_413202[chckIndx(0, 0, elms_413202.length+0-1)-0];
		}
		else {
			F.line = 486;
			result_413017 = new_tuple_406511(elms_413202);
		}
		
		F.line = 87;
		result_413017.lineno = elms_413202[chckIndx(0, 0, elms_413202.length+0-1)-0].lineno;
		F.line = 88;
		result_413017.col_offset = elms_413202[chckIndx(0, 0, elms_413202.length+0-1)-0].col_offset;
		if (!(!((result_413017 == null)))) {
		F.line = 488;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(488, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_413017;

}

function new_ast_expr_179808() {
	var result_179810 = null;

	var F={procname:"asdl.newAstExpr",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179810 = {m_type: NTI179802, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179810.kind = 21;
	framePtr = F.prev;

	return result_179810;

}

function new_ast_expr_406043(expr_406045) {
	var result_406046 = null;

	var F={procname:"ast.newAstExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_406046 = new_ast_expr_179808();
		F.line = 29;
		result_406046.value = expr_406045;
	framePtr = F.prev;

	return result_406046;

}

function new_ast_assign_179192() {
	var result_179194 = null;

	var F={procname:"asdl.newAstAssign",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179194 = {m_type: NTI179182, targets: null, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179194.kind = 5;
	framePtr = F.prev;

	return result_179194;

}

function ast_expr_stmt_406565(parse_node_406567) {
	var result_412617 = null;

	var F={procname:"ast.astExprStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_406567.tokenNode.token == 107))) {
		F.line = 447;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(447, 3) `parseNode.tokenNode.token == expr_stmt` "));
		}
		
		F.line = 447;
		var testlist_star_expr1_412801 = ast_testlist_star_expr_406568(parse_node_406567.children[chckIndx(0, 0, parse_node_406567.children.length+0-1)-0]);
		if (((parse_node_406567.children != null ? parse_node_406567.children.length : 0) == 1)) {
		F.line = 449;
		result_412617 = new_ast_expr_406043(testlist_star_expr1_412801);
		break BeforeRet;
		}
		
		F.line = 451;
		var middle_child_412809 = parse_node_406567.children[chckIndx(1, 0, parse_node_406567.children.length+0-1)-0];
		F.line = 452;
		switch (middle_child_412809.tokenNode.token) {
		case 23:
			if (!(((parse_node_406567.children != null ? parse_node_406567.children.length : 0) == 3))) {
			F.line = 455;
			raiseException(new_syntax_error_156098(makeNimstrLit("Only support simple assign like x=1"), [], middle_child_412809.tokenNode.lineNo, middle_child_412809.tokenNode.colNo), "SyntaxError:ObjectType");
			}
			
			F.line = 456;
			var testlist_star_expr2_412820 = ast_testlist_star_expr_406568(parse_node_406567.children[chckIndx(2, 0, parse_node_406567.children.length+0-1)-0]);
			F.line = 457;
			var node_412821 = new_ast_assign_179192();
			F.line = 83;
			node_412821.lineno = new_int_406060(middle_child_412809.tokenNode.lineNo);
			F.line = 84;
			node_412821.col_offset = new_int_406060(middle_child_412809.tokenNode.colNo);
			F.line = 459;
			set_store_407278(testlist_star_expr1_412801);
			F.line = 460;
			if (node_412821.targets != null) { node_412821.targets.push(testlist_star_expr1_412801); } else { node_412821.targets = [testlist_star_expr1_412801]; };
			if (!(((node_412821.targets != null ? node_412821.targets.length : 0) == 1))) {
			F.line = 462;
			raiseException(new_syntax_error_156098(makeNimstrLit("Assign to multiple target not supported"), [], parse_node_406567.tokenNode.lineNo, parse_node_406567.tokenNode.colNo), "SyntaxError:ObjectType");
			}
			
			F.line = 463;
			node_412821.value = testlist_star_expr2_412820;
			F.line = 464;
			result_412617 = node_412821;
			break;
		case 110:
			F.line = 466;
			raiseException(new_syntax_error_156098(makeNimstrLit("Inplace operation not implemented"), [], middle_child_412809.tokenNode.lineNo, middle_child_412809.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		default: 
			F.line = 468;
			raiseException(new_syntax_error_156098(makeNimstrLit("Only support simple assignment like a=1"), [], middle_child_412809.tokenNode.lineNo, middle_child_412809.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
		if (!(!((result_412617 == null)))) {
		F.line = 469;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(469, 10) `\x0Anot (result == nil)` "));
		}
		
	} while (false);
	framePtr = F.prev;

	return result_412617;

}

function ast_del_stmt_406574(parse_node_406576) {
	var result_413632 = null;

	var F={procname:"ast.astDelStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 497;
		raiseException(new_syntax_error_156098(makeNimstrLit("del not implemented"), [], parse_node_406576.tokenNode.lineNo, parse_node_406576.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_413632;

}

function new_ast_pass_179839() {
	var result_179841 = null;

	var F={procname:"asdl.newAstPass",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179841 = {m_type: NTI179835, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179841.kind = 22;
	framePtr = F.prev;

	return result_179841;

}

function ast_pass_stmt_406577(parse_node_406579) {
	var result_413651 = null;

	var F={procname:"ast.astPassStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406579.tokenNode.token == 112))) {
		F.line = 501;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(501, 3) `parseNode.tokenNode.token == pass_stmt` "));
		}
		
		F.line = 501;
		result_413651 = new_ast_pass_179839();
		F.line = 83;
		result_413651.lineno = new_int_406060(parse_node_406579.children[chckIndx(0, 0, parse_node_406579.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_413651.col_offset = new_int_406060(parse_node_406579.children[chckIndx(0, 0, parse_node_406579.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_413651;

}

function new_ast_break_179870() {
	var result_179872 = null;

	var F={procname:"asdl.newAstBreak",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179872 = {m_type: NTI179866, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179872.kind = 23;
	framePtr = F.prev;

	return result_179872;

}

function ast_break_stmt_406583(parse_node_406585) {
	var result_414417 = null;

	var F={procname:"ast.astBreakStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406585.tokenNode.token == 114))) {
		F.line = 518;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(518, 3) `parseNode.tokenNode.token == break_stmt` "));
		}
		
		F.line = 518;
		result_414417 = new_ast_break_179870();
		F.line = 83;
		result_414417.lineno = new_int_406060(parse_node_406585.children[chckIndx(0, 0, parse_node_406585.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_414417.col_offset = new_int_406060(parse_node_406585.children[chckIndx(0, 0, parse_node_406585.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_414417;

}

function new_ast_continue_179901() {
	var result_179903 = null;

	var F={procname:"asdl.newAstContinue",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179903 = {m_type: NTI179897, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179903.kind = 24;
	framePtr = F.prev;

	return result_179903;

}

function ast_continue_stmt_406586(parse_node_406588) {
	var result_414619 = null;

	var F={procname:"ast.astContinueStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406588.tokenNode.token == 115))) {
		F.line = 522;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(522, 3) `parseNode.tokenNode.token == continue_stmt` "));
		}
		
		F.line = 522;
		result_414619 = new_ast_continue_179901();
		F.line = 83;
		result_414619.lineno = new_int_406060(parse_node_406588.children[chckIndx(0, 0, parse_node_406588.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_414619.col_offset = new_int_406060(parse_node_406588.children[chckIndx(0, 0, parse_node_406588.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_414619;

}

function new_ast_return_179120() {
	var result_179122 = null;

	var F={procname:"asdl.newAstReturn",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179122 = {m_type: NTI179114, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179122.kind = 3;
	framePtr = F.prev;

	return result_179122;

}

function ast_test_list_406713(parse_node_406715) {
	var result_429438 = null;

	var F={procname:"ast.astTestList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406715.tokenNode.token == 166))) {
		F.line = 1138;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1138, 3) `parseNode.tokenNode.token == testlist` "));
		}
		
		F.line = 1138;
		var elms_429602 = null;
		L1: do {
			F.line = 1139;
			var i_429620 = 0;
			F.line = 3616;
			var colontmp__429802 = 0;
			F.line = 1139;
			colontmp__429802 = divInt(addInt((parse_node_406715.children != null ? parse_node_406715.children.length : 0), 1), 2);
			F.line = 3617;
			var i_429805 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_429805 < colontmp__429802)) break L3;
						F.line = 3619;
						i_429620 = i_429805;
						F.line = 1140;
						var child_429622 = parse_node_406715.children[chckIndx(mulInt(2, i_429620), 0, parse_node_406715.children.length+0-1)-0];
						F.line = 1141;
						if (elms_429602 != null) { elms_429602.push(ast_test_406648(child_429622)); } else { elms_429602 = [ast_test_406648(child_429622)]; };
						F.line = 3620;
						i_429805 = addInt(i_429805, 1);
					}
			} while(false);
		} while(false);
		if (((parse_node_406715.children != null ? parse_node_406715.children.length : 0) == 1)) {
		F.line = 1143;
		result_429438 = elms_429602[chckIndx(0, 0, elms_429602.length+0-1)-0];
		}
		else {
			F.line = 1145;
			result_429438 = new_tuple_406511(elms_429602);
			F.line = 87;
			result_429438.lineno = elms_429602[chckIndx(0, 0, elms_429602.length+0-1)-0].lineno;
			F.line = 88;
			result_429438.col_offset = elms_429602[chckIndx(0, 0, elms_429602.length+0-1)-0].col_offset;
		}
		
		if (!(!((result_429438 == null)))) {
		F.line = 1147;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1147, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_429438;

}

function ast_return_stmt_406589(parse_node_406591) {
	var result_414819 = null;

	var F={procname:"ast.astReturnStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 527;
		if (!((parse_node_406591.tokenNode.token == 116))) {
		F.line = 527;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(527, 3) `parseNode.tokenNode.token == return_stmt` "));
		}
		
		F.line = 527;
		var node_415001 = new_ast_return_179120();
		F.line = 83;
		node_415001.lineno = new_int_406060(parse_node_406591.children[chckIndx(0, 0, parse_node_406591.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		node_415001.col_offset = new_int_406060(parse_node_406591.children[chckIndx(0, 0, parse_node_406591.children.length+0-1)-0].tokenNode.colNo);
		if (((parse_node_406591.children != null ? parse_node_406591.children.length : 0) == 1)) {
		F.line = 530;
		result_414819 = node_415001;
		break BeforeRet;
		}
		
		F.line = 531;
		node_415001.value = ast_test_list_406713(parse_node_406591.children[chckIndx(1, 0, parse_node_406591.children.length+0-1)-0]);
		result_414819 = node_415001;
	} while (false);
	framePtr = F.prev;

	return result_414819;

}

function new_ast_raise_179549() {
	var result_179551 = null;

	var F={procname:"asdl.newAstRaise",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179551 = {m_type: NTI179541, exc: null, cause: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179551.kind = 14;
	framePtr = F.prev;

	return result_179551;

}

function ast_raise_stmt_406595(parse_node_406597) {
	var result_415219 = null;

	var F={procname:"ast.astRaiseStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406597.tokenNode.token == 118))) {
		F.line = 539;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(539, 3) `parseNode.tokenNode.token == raise_stmt` "));
		}
		
		F.line = 539;
		result_415219 = new_ast_raise_179549();
		F.line = 83;
		result_415219.lineno = new_int_406060(parse_node_406597.children[chckIndx(0, 0, parse_node_406597.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_415219.col_offset = new_int_406060(parse_node_406597.children[chckIndx(0, 0, parse_node_406597.children.length+0-1)-0].tokenNode.colNo);
		F.line = 541;
		switch ((parse_node_406597.children != null ? parse_node_406597.children.length : 0)) {
		case 1:
			break;
		case 2:
			F.line = 545;
			result_415219.exc = ast_test_406648(parse_node_406597.children[chckIndx(1, 0, parse_node_406597.children.length+0-1)-0]);
			break;
		default: 
			F.line = 547;
			raiseException(new_syntax_error_156098(makeNimstrLit("Fancy raise not implemented"), [], parse_node_406597.children[chckIndx(2, 0, parse_node_406597.children.length+0-1)-0].tokenNode.lineNo, parse_node_406597.children[chckIndx(2, 0, parse_node_406597.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
	framePtr = F.prev;

	return result_415219;

}

function ast_yield_stmt_406592(parse_node_406594) {
	var result_415027 = null;

	var F={procname:"ast.astYieldStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406594.tokenNode.token == 117))) {
		F.line = 535;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(535, 3) `parseNode.tokenNode.token == yield_stmt` "));
		}
		
		F.line = 535;
		raiseException(new_syntax_error_156098(makeNimstrLit("Yield not implemented"), [], parse_node_406594.tokenNode.lineNo, parse_node_406594.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_415027;

}

function ast_flow_stmt_406580(parse_node_406582) {
	var result_413819 = null;

	var F={procname:"ast.astFlowStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406582.tokenNode.token == 113))) {
		F.line = 506;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(506, 3) `parseNode.tokenNode.token == flow_stmt` "));
		}
		
		F.line = 506;
		var child_414001 = parse_node_406582.children[chckIndx(0, 0, parse_node_406582.children.length+0-1)-0];
		F.line = 507;
		switch (child_414001.tokenNode.token) {
		case 114:
			F.line = 508;
			result_413819 = ast_break_stmt_406583(child_414001);
			break;
		case 115:
			F.line = 509;
			result_413819 = ast_continue_stmt_406586(child_414001);
			break;
		case 116:
			F.line = 510;
			result_413819 = ast_return_stmt_406589(child_414001);
			break;
		case 118:
			F.line = 511;
			result_413819 = ast_raise_stmt_406595(child_414001);
			break;
		case 117:
			F.line = 512;
			result_413819 = ast_yield_stmt_406592(child_414001);
			break;
		default: 
			if (true) {
			F.line = 512;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(512, 5) `false` "));
			}
			
			break;
		}
		if (!(!((result_413819 == null)))) {
		F.line = 514;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(514, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_413819;

}

function new_ast_import_179666() {
	var result_179668 = null;

	var F={procname:"asdl.newAstImport",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179668 = {m_type: NTI179658, names: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179668.kind = 17;
	framePtr = F.prev;

	return result_179668;

}

function new_ast_alias_182236() {
	var result_182238 = null;

	var F={procname:"asdl.newAstAlias",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182238 = {m_type: NTI182228, name: null, asname: null, kind: 0};
		F.line = 111;
		result_182238.kind = 0;
	framePtr = F.prev;

	return result_182238;

}

function ast_dotted_name_406608(parse_node_406610) {
	var result_416636 = null;

	var F={procname:"ast.astDottedName",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406610.tokenNode.token == 126))) {
		F.line = 597;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(597, 3) `parseNode.tokenNode.token == dotted_name` "));
		}
		
		if (!(((parse_node_406610.children != null ? parse_node_406610.children.length : 0) == 1))) {
		F.line = 598;
		raiseException(new_syntax_error_156098(makeNimstrLit("dotted import name not supported"), [], parse_node_406610.children[chckIndx(1, 0, parse_node_406610.children.length+0-1)-0].tokenNode.lineNo, parse_node_406610.children[chckIndx(1, 0, parse_node_406610.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 599;
		result_416636 = new_ast_alias_182236();
		F.line = 600;
		result_416636.name = new_identifier_406085(parse_node_406610.children[chckIndx(0, 0, parse_node_406610.children.length+0-1)-0].tokenNode.content);
	framePtr = F.prev;

	return result_416636;

}

function ast_dotted_as_name_416246(parse_node_416248) {
	var result_416249 = null;

	var F={procname:"ast.ast_dotted_as_name",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 579;
		if (!((parse_node_416248.tokenNode.token == 123))) {
		F.line = 579;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(579, 3) `parseNode.tokenNode.token == dotted_as_name` "));
		}
		
		if (!(((parse_node_416248.children != null ? parse_node_416248.children.length : 0) == 1))) {
		F.line = 580;
		raiseException(new_syntax_error_156098(makeNimstrLit("import alias not implemented"), [], parse_node_416248.tokenNode.lineNo, parse_node_416248.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		result_416249 = ast_dotted_name_406608(parse_node_416248.children[chckIndx(0, 0, parse_node_416248.children.length+0-1)-0]);
	framePtr = F.prev;

	return result_416249;

}

function ast_dotted_as_names_406604(parse_node_406606) {
	var result_416427 = null;

	var F={procname:"ast.astDottedAsNames",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406606.tokenNode.token == 125))) {
		F.line = 590;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(590, 3) `parseNode.tokenNode.token == dotted_as_names` "));
		}
		
		if (!(((parse_node_406606.children != null ? parse_node_406606.children.length : 0) == 1))) {
		F.line = 591;
		raiseException(new_syntax_error_156098(makeNimstrLit("import multiple modules in one line not implemented"), [], parse_node_406606.children[chckIndx(1, 0, parse_node_406606.children.length+0-1)-0].tokenNode.lineNo, parse_node_406606.children[chckIndx(1, 0, parse_node_406606.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 593;
		if (result_416427 != null) { result_416427.push(ast_dotted_as_name_416246(parse_node_406606.children[chckIndx(0, 0, parse_node_406606.children.length+0-1)-0])); } else { result_416427 = [ast_dotted_as_name_416246(parse_node_406606.children[chckIndx(0, 0, parse_node_406606.children.length+0-1)-0])]; };
	framePtr = F.prev;

	return result_416427;

}

function ast_import_name_406601(parse_node_406603) {
	var result_415817 = null;

	var F={procname:"ast.astImportName",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 563;
		if (!((parse_node_406603.tokenNode.token == 120))) {
		F.line = 563;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(563, 3) `parseNode.tokenNode.token == import_name` "));
		}
		
		F.line = 563;
		var node_416001 = new_ast_import_179666();
		F.line = 83;
		node_416001.lineno = new_int_406060(parse_node_406603.children[chckIndx(0, 0, parse_node_406603.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		node_416001.col_offset = new_int_406060(parse_node_406603.children[chckIndx(0, 0, parse_node_406603.children.length+0-1)-0].tokenNode.colNo);
		L1: do {
			F.line = 565;
			var c_416215 = null;
			F.line = 3909;
			var colontmp__416227 = null;
			F.line = 565;
			colontmp__416227 = ast_dotted_as_names_406604(parse_node_406603.children[chckIndx(1, 0, parse_node_406603.children.length+0-1)-0]);
			F.line = 3911;
			var i_416230 = 0;
			F.line = 3912;
			var l_416232 = (colontmp__416227 != null ? colontmp__416227.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_416230 < l_416232)) break L3;
						F.line = 3914;
						c_416215 = colontmp__416227[chckIndx(i_416230, 0, colontmp__416227.length+0-1)-0];
						F.line = 566;
						if (node_416001.names != null) { node_416001.names.push(c_416215); } else { node_416001.names = [c_416215]; };
						F.line = 3915;
						i_416230 = addInt(i_416230, 1);
						if (!(((colontmp__416227 != null ? colontmp__416227.length : 0) == l_416232))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_415817 = node_416001;
	framePtr = F.prev;

	return result_415817;

}

function ast_import_stmt_406598(parse_node_406600) {
	var result_415428 = null;

	var F={procname:"ast.astImportStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406600.tokenNode.token == 119))) {
		F.line = 552;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(552, 3) `parseNode.tokenNode.token == import_stmt` "));
		}
		
		F.line = 552;
		var child_415601 = parse_node_406600.children[chckIndx(0, 0, parse_node_406600.children.length+0-1)-0];
		F.line = 553;
		switch (child_415601.tokenNode.token) {
		case 120:
			F.line = 555;
			result_415428 = ast_import_name_406601(child_415601);
			break;
		case 121:
			F.line = 557;
			raiseException(new_syntax_error_156098(makeNimstrLit("Import from not implemented"), [], parse_node_406600.tokenNode.lineNo, parse_node_406600.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		default: 
			F.line = 2895;
			var e_415611 = null;
			F.line = 2896;
			e_415611 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 559;
			e_415611.message = nimCopy(null, makeNimstrLit("wrong import_stmt"), NTI138);
			F.line = 2891;
			e_415611.parent = null;
			F.line = 559;
			raiseException(e_415611, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_415428;

}

function ast_global_stmt_406611(parse_node_406613) {
	var result_416840 = null;

	var F={procname:"ast.astGlobalStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 603;
		raiseException(new_syntax_error_156098(makeNimstrLit("global stmt not implemented"), [], parse_node_406613.tokenNode.lineNo, parse_node_406613.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_416840;

}

function ast_nonlocal_stmt_406614(parse_node_406616) {
	var result_416859 = null;

	var F={procname:"ast.astNonlocalStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 606;
		raiseException(new_syntax_error_156098(makeNimstrLit("nonlocal stmt not implemented"), [], parse_node_406616.tokenNode.lineNo, parse_node_406616.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_416859;

}

function new_ast_assert_179631() {
	var result_179633 = null;

	var F={procname:"asdl.newAstAssert",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179633 = {m_type: NTI179623, test: null, msg: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179633.kind = 16;
	framePtr = F.prev;

	return result_179633;

}

function ast_assert_stmt_406617(parse_node_406619) {
	var result_416878 = null;

	var F={procname:"ast.astAssertStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406619.tokenNode.token == 129))) {
		F.line = 610;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(610, 3) `parseNode.tokenNode.token == assert_stmt` "));
		}
		
		F.line = 610;
		result_416878 = new_ast_assert_179631();
		F.line = 83;
		result_416878.lineno = new_int_406060(parse_node_406619.children[chckIndx(0, 0, parse_node_406619.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_416878.col_offset = new_int_406060(parse_node_406619.children[chckIndx(0, 0, parse_node_406619.children.length+0-1)-0].tokenNode.colNo);
		F.line = 612;
		result_416878.test = ast_test_406648(parse_node_406619.children[chckIndx(1, 0, parse_node_406619.children.length+0-1)-0]);
		if (((parse_node_406619.children != null ? parse_node_406619.children.length : 0) == 4)) {
		F.line = 614;
		result_416878.msg = ast_test_406648(parse_node_406619.children[chckIndx(3, 0, parse_node_406619.children.length+0-1)-0]);
		}
		
	framePtr = F.prev;

	return result_416878;

}

function ast_small_stmt_406562(parse_node_406564) {
	var result_412030 = null;

	var F={procname:"ast.astSmallStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406564.tokenNode.token == 106))) {
		F.line = 432;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(432, 3) `parseNode.tokenNode.token == small_stmt` "));
		}
		
		F.line = 432;
		var child_412201 = parse_node_406564.children[chckIndx(0, 0, parse_node_406564.children.length+0-1)-0];
		F.line = 433;
		switch (child_412201.tokenNode.token) {
		case 107:
			F.line = 434;
			result_412030 = ast_expr_stmt_406565(child_412201);
			break;
		case 111:
			F.line = 435;
			result_412030 = ast_del_stmt_406574(child_412201);
			break;
		case 112:
			F.line = 436;
			result_412030 = ast_pass_stmt_406577(child_412201);
			break;
		case 113:
			F.line = 437;
			result_412030 = ast_flow_stmt_406580(child_412201);
			break;
		case 119:
			F.line = 438;
			result_412030 = ast_import_stmt_406598(child_412201);
			break;
		case 127:
			F.line = 439;
			result_412030 = ast_global_stmt_406611(child_412201);
			break;
		case 128:
			F.line = 440;
			result_412030 = ast_nonlocal_stmt_406614(child_412201);
			break;
		case 129:
			F.line = 441;
			result_412030 = ast_assert_stmt_406617(child_412201);
			break;
		default: 
			if (true) {
			F.line = 441;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(441, 5) `false` "));
			}
			
			break;
		}
		if (!(!((result_412030 == null)))) {
		F.line = 442;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(442, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_412030;

}

function ast_simple_stmt_406558(parse_node_406560) {
	var result_411424 = null;

	var F={procname:"ast.astSimpleStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406560.tokenNode.token == 105))) {
		F.line = 422;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(422, 3) `parseNode.tokenNode.token == simple_stmt` "));
		}
		
		L1: do {
			F.line = 422;
			var child_411609 = null;
			F.line = 3909;
			var colontmp__412002 = null;
			F.line = 422;
			colontmp__412002 = parse_node_406560.children;
			F.line = 3911;
			var i_412005 = 0;
			F.line = 3912;
			var l_412007 = (colontmp__412002 != null ? colontmp__412002.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_412005 < l_412007)) break L3;
						F.line = 3914;
						child_411609 = colontmp__412002[chckIndx(i_412005, 0, colontmp__412002.length+0-1)-0];
						if ((child_411609.tokenNode.token == 106)) {
						F.line = 424;
						if (result_411424 != null) { result_411424.push(ast_small_stmt_406562(child_411609)); } else { result_411424 = [ast_small_stmt_406562(child_411609)]; };
						}
						
						F.line = 3915;
						i_412005 = addInt(i_412005, 1);
						if (!(((colontmp__412002 != null ? colontmp__412002.length : 0) == l_412007))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((0 < (result_411424 != null ? result_411424.length : 0)))) {
		F.line = 425;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(425, 10) `0 < len(result)` "));
		}
		
		L4: do {
			F.line = 426;
			var child_411809 = null;
			F.line = 3911;
			var i_412011 = 0;
			F.line = 3912;
			var l_412013 = (result_411424 != null ? result_411424.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_412011 < l_412013)) break L6;
						F.line = 3914;
						child_411809 = result_411424[chckIndx(i_412011, 0, result_411424.length+0-1)-0];
						if (!(!((child_411809 == null)))) {
						F.line = 427;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(427, 12) `\x0Anot (child == nil)` "));
						}
						
						F.line = 3915;
						i_412011 = addInt(i_412011, 1);
						if (!(((result_411424 != null ? result_411424.length : 0) == l_412013))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_411424;

}

function new_ast_if_179436() {
	var result_179438 = null;

	var F={procname:"asdl.newAstIf",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179438 = {m_type: NTI179422, test: null, body: null, orelse: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179438.kind = 11;
	framePtr = F.prev;

	return result_179438;

}

function ast_suite_406644(parse_node_406646) {
	var result_419029 = null;

	var F={procname:"ast.astSuite",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406646.tokenNode.token == 139))) {
		F.line = 712;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(712, 3) `parseNode.tokenNode.token == suite` "));
		}
		
		F.line = 712;
		switch ((parse_node_406646.children != null ? parse_node_406646.children.length : 0)) {
		case 1:
			F.line = 714;
			var child_419208 = parse_node_406646.children[chckIndx(0, 0, parse_node_406646.children.length+0-1)-0];
			F.line = 715;
			result_419029 = nimCopy(null, ast_simple_stmt_406558(child_419208), NTI406561);
			break;
		default: 
			L1: do {
				F.line = 717;
				var child_419658 = null;
				F.line = 3909;
				var colontmp__420010 = null;
				F.line = 717;
				colontmp__420010 = HEX5BHEX5D_419235(parse_node_406646.children, HEX2EHEX2E_81053(2, 2));
				F.line = 3911;
				var i_420013 = 0;
				F.line = 3912;
				var l_420015 = (colontmp__420010 != null ? colontmp__420010.length : 0);
				L2: do {
					F.line = 3913;
						L3: while (true) {
						if (!(i_420013 < l_420015)) break L3;
							F.line = 3914;
							child_419658 = colontmp__420010[chckIndx(i_420013, 0, colontmp__420010.length+0-1)-0];
							L4: do {
								F.line = 23;
								var item_419671 = null;
								F.line = 3909;
								var colontmp__420003 = null;
								F.line = 718;
								colontmp__420003 = ast_stmt_406554(child_419658);
								F.line = 3911;
								var i_420006 = 0;
								F.line = 3912;
								var l_420008 = (colontmp__420003 != null ? colontmp__420003.length : 0);
								L5: do {
									F.line = 3913;
										L6: while (true) {
										if (!(i_420006 < l_420008)) break L6;
											F.line = 3914;
											item_419671 = colontmp__420003[chckIndx(i_420006, 0, colontmp__420003.length+0-1)-0];
											F.line = 24;
											if (result_419029 != null) { result_419029.push(item_419671); } else { result_419029 = [item_419671]; };
											F.line = 3915;
											i_420006 = addInt(i_420006, 1);
											if (!(((colontmp__420003 != null ? colontmp__420003.length : 0) == l_420008))) {
											F.line = 3916;
											failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							F.line = 3915;
							i_420013 = addInt(i_420013, 1);
							if (!(((colontmp__420010 != null ? colontmp__420010.length : 0) == l_420015))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			break;
		}
		if (!(!(((result_419029 != null ? result_419029.length : 0) == 0)))) {
		F.line = 719;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(719, 10) `\x0Anot (len(result) == 0)` "));
		}
		
		L7: do {
			F.line = 720;
			var child_419809 = null;
			F.line = 3911;
			var i_420019 = 0;
			F.line = 3912;
			var l_420021 = (result_419029 != null ? result_419029.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_420019 < l_420021)) break L9;
						F.line = 3914;
						child_419809 = result_419029[chckIndx(i_420019, 0, result_419029.length+0-1)-0];
						if (!(!((child_419809 == null)))) {
						F.line = 721;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(721, 12) `\x0Anot (child == nil)` "));
						}
						
						F.line = 3915;
						i_420019 = addInt(i_420019, 1);
						if (!(((result_419029 != null ? result_419029.length : 0) == l_420021))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_419029;

}

function ast_if_stmt_406626(parse_node_406628) {
		var Tmp1;

	var result_417817 = null;

	var F={procname:"ast.astIfStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_406628.tokenNode.token == 132))) {
		F.line = 637;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(637, 3) `parseNode.tokenNode.token == if_stmt` "));
		}
		
		F.line = 637;
		result_417817 = new_ast_if_179436();
		F.line = 83;
		result_417817.lineno = new_int_406060(parse_node_406628.children[chckIndx(0, 0, parse_node_406628.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_417817.col_offset = new_int_406060(parse_node_406628.children[chckIndx(0, 0, parse_node_406628.children.length+0-1)-0].tokenNode.colNo);
		F.line = 639;
		result_417817.test = ast_test_406648(parse_node_406628.children[chckIndx(1, 0, parse_node_406628.children.length+0-1)-0]);
		F.line = 640;
		result_417817.body = nimCopy(null, ast_suite_406644(parse_node_406628.children[chckIndx(3, 0, parse_node_406628.children.length+0-1)-0]), NTI406647);
		if (((parse_node_406628.children != null ? parse_node_406628.children.length : 0) == 4)) {
		F.line = 642;
		break BeforeRet;
		}
		
		if (!(((parse_node_406628.children != null ? parse_node_406628.children.length : 0) == 7))) {
		F.line = 644;
		raiseException(new_syntax_error_156098(makeNimstrLit("elif not implemented"), [], parse_node_406628.children[chckIndx(4, 0, parse_node_406628.children.length+0-1)-0].tokenNode.lineNo, parse_node_406628.children[chckIndx(4, 0, parse_node_406628.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 645;
		result_417817.orelse = nimCopy(null, ast_suite_406644((Tmp1 = HEX5BHEX5D_350330(parse_node_406628.children, 1), Tmp1[0])[Tmp1[1]]), NTI406647);
	} while (false);
	framePtr = F.prev;

	return result_417817;

}

function new_ast_while_179395() {
	var result_179397 = null;

	var F={procname:"asdl.newAstWhile",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179397 = {m_type: NTI179381, test: null, body: null, orelse: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179397.kind = 10;
	framePtr = F.prev;

	return result_179397;

}

function ast_while_stmt_406629(parse_node_406631) {
	var result_418051 = null;

	var F={procname:"ast.astWhileStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406631.tokenNode.token == 133))) {
		F.line = 649;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(649, 3) `parseNode.tokenNode.token == while_stmt` "));
		}
		
		F.line = 649;
		result_418051 = new_ast_while_179395();
		F.line = 83;
		result_418051.lineno = new_int_406060(parse_node_406631.children[chckIndx(0, 0, parse_node_406631.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_418051.col_offset = new_int_406060(parse_node_406631.children[chckIndx(0, 0, parse_node_406631.children.length+0-1)-0].tokenNode.colNo);
		F.line = 651;
		result_418051.test = ast_test_406648(parse_node_406631.children[chckIndx(1, 0, parse_node_406631.children.length+0-1)-0]);
		F.line = 652;
		result_418051.body = nimCopy(null, ast_suite_406644(parse_node_406631.children[chckIndx(3, 0, parse_node_406631.children.length+0-1)-0]), NTI406647);
		if (!(((parse_node_406631.children != null ? parse_node_406631.children.length : 0) == 4))) {
		F.line = 654;
		raiseException(new_syntax_error_156098(makeNimstrLit("Else clause in while not implemented"), [], parse_node_406631.children[chckIndx(4, 0, parse_node_406631.children.length+0-1)-0].tokenNode.lineNo, parse_node_406631.children[chckIndx(4, 0, parse_node_406631.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
	framePtr = F.prev;

	return result_418051;

}

function new_ast_for_179311() {
	var result_179313 = null;

	var F={procname:"asdl.newAstFor",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179313 = {m_type: NTI179295, target: null, iter: null, body: null, orelse: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179313.kind = 8;
	framePtr = F.prev;

	return result_179313;

}

function ast_for_stmt_406632(parse_node_406634) {
	var result_418228 = null;

	var F={procname:"ast.astForStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406634.tokenNode.token == 134))) {
		F.line = 658;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(658, 3) `parseNode.tokenNode.token == for_stmt` "));
		}
		
		if (!(((parse_node_406634.children != null ? parse_node_406634.children.length : 0) == 6))) {
		F.line = 659;
		raiseException(new_syntax_error_156098(makeNimstrLit("for with else not implemented"), [], parse_node_406634.children[chckIndx(6, 0, parse_node_406634.children.length+0-1)-0].tokenNode.lineNo, parse_node_406634.children[chckIndx(6, 0, parse_node_406634.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 660;
		var for_node_418410 = new_ast_for_179311();
		F.line = 83;
		for_node_418410.lineno = new_int_406060(parse_node_406634.children[chckIndx(0, 0, parse_node_406634.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		for_node_418410.col_offset = new_int_406060(parse_node_406634.children[chckIndx(0, 0, parse_node_406634.children.length+0-1)-0].tokenNode.colNo);
		F.line = 662;
		for_node_418410.target = ast_expr_list_406710(parse_node_406634.children[chckIndx(1, 0, parse_node_406634.children.length+0-1)-0]);
		F.line = 663;
		set_store_407278(for_node_418410.target);
		F.line = 664;
		for_node_418410.iter = ast_test_list_406713(parse_node_406634.children[chckIndx(3, 0, parse_node_406634.children.length+0-1)-0]);
		F.line = 665;
		for_node_418410.body = nimCopy(null, ast_suite_406644(parse_node_406634.children[chckIndx(5, 0, parse_node_406634.children.length+0-1)-0]), NTI406647);
		F.line = 666;
		result_418228 = for_node_418410;
	framePtr = F.prev;

	return result_418228;

}

function new_ast_try_179596() {
	var result_179598 = null;

	var F={procname:"asdl.newAstTry",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179598 = {m_type: NTI179576, body: null, handlers: null, orelse: null, finalbody: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179598.kind = 15;
	framePtr = F.prev;

	return result_179598;

}

function new_ast_except_handler_182080() {
	var result_182082 = null;

	var F={procname:"asdl.newAstExceptHandler",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182082 = {m_type: NTI182068, type: null, name: null, body: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_182082.kind = 0;
	framePtr = F.prev;

	return result_182082;

}

function ast_except_clause_406638(parse_node_406640) {
	var result_418819 = null;

	var F={procname:"ast.astExceptClause",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_406640.tokenNode.token == 138))) {
		F.line = 697;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(697, 3) `parseNode.tokenNode.token == except_clause` "));
		}
		
		F.line = 697;
		result_418819 = new_ast_except_handler_182080();
		F.line = 83;
		result_418819.lineno = new_int_406060(parse_node_406640.children[chckIndx(0, 0, parse_node_406640.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_418819.col_offset = new_int_406060(parse_node_406640.children[chckIndx(0, 0, parse_node_406640.children.length+0-1)-0].tokenNode.colNo);
		F.line = 699;
		switch ((parse_node_406640.children != null ? parse_node_406640.children.length : 0)) {
		case 1:
			F.line = 701;
			break BeforeRet;
			break;
		case 2:
			F.line = 703;
			result_418819.type = ast_test_406648(parse_node_406640.children[chckIndx(1, 0, parse_node_406640.children.length+0-1)-0]);
			break;
		default: 
			F.line = 705;
			raiseException(new_syntax_error_156098(makeNimstrLit("\'except\' with name not implemented"), [], parse_node_406640.children[chckIndx(2, 0, parse_node_406640.children.length+0-1)-0].tokenNode.lineNo, parse_node_406640.children[chckIndx(2, 0, parse_node_406640.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_418819;

}

function ast_try_stmt_406635(parse_node_406637) {
	var result_418429 = null;

	var F={procname:"ast.astTryStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406637.tokenNode.token == 135))) {
		F.line = 674;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(674, 3) `parseNode.tokenNode.token == try_stmt` "));
		}
		
		F.line = 674;
		result_418429 = new_ast_try_179596();
		F.line = 83;
		result_418429.lineno = new_int_406060(parse_node_406637.children[chckIndx(0, 0, parse_node_406637.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_418429.col_offset = new_int_406060(parse_node_406637.children[chckIndx(0, 0, parse_node_406637.children.length+0-1)-0].tokenNode.colNo);
		F.line = 676;
		result_418429.body = nimCopy(null, ast_suite_406644(parse_node_406637.children[chckIndx(2, 0, parse_node_406637.children.length+0-1)-0]), NTI406647);
		L1: do {
			F.line = 677;
			var i_418621 = 0;
			F.line = 2104;
			var colontmp__418647 = 0;
			F.line = 677;
			colontmp__418647 = divInt(subInt((parse_node_406637.children != null ? parse_node_406637.children.length : 0), 1), 3);
			F.line = 2107;
			var res_418650 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_418650 <= colontmp__418647)) break L3;
						F.line = 2109;
						i_418621 = res_418650;
						F.line = 678;
						var child1_418622 = parse_node_406637.children[chckIndx(mulInt(i_418621, 3), 0, parse_node_406637.children.length+0-1)-0];
						if (!((child1_418622.tokenNode.token == 138))) {
						F.line = 680;
						raiseException(new_syntax_error_156098(makeNimstrLit("else/finally in try not implemented"), [], child1_418622.tokenNode.lineNo, child1_418622.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 681;
						var handler_418634 = ast_except_clause_406638(child1_418622);
						F.line = 682;
						var child3_418635 = parse_node_406637.children[chckIndx(addInt(mulInt(i_418621, 3), 2), 0, parse_node_406637.children.length+0-1)-0];
						F.line = 683;
						handler_418634.body = nimCopy(null, ast_suite_406644(child3_418635), NTI406647);
						F.line = 684;
						if (result_418429.handlers != null) { result_418429.handlers.push(handler_418634); } else { result_418429.handlers = [handler_418634]; };
						F.line = 2110;
						res_418650 = addInt(res_418650, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_418429;

}

function ast_with_stmt_406641(parse_node_406643) {
	var result_418670 = null;

	var F={procname:"ast.astWithStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406643.tokenNode.token == 136))) {
		F.line = 688;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(688, 3) `parseNode.tokenNode.token == with_stmt` "));
		}
		
		F.line = 688;
		raiseException(new_syntax_error_156098(makeNimstrLit("with not implemented"), [], parse_node_406643.tokenNode.lineNo, parse_node_406643.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_418670;

}

function new_ast_function_def_178993() {
	var result_178995 = null;

	var F={procname:"asdl.newAstFunctionDef",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_178995 = {m_type: NTI178975, name: null, args: null, body: null, decorator_list: null, returns: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_178995.kind = 0;
	framePtr = F.prev;

	return result_178995;

}

function new_ast_arguments_182131() {
	var result_182133 = null;

	var F={procname:"asdl.newAstArguments",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182133 = {m_type: NTI182107, args: null, vararg: null, kwonlyargs: null, kw_defaults: null, kwarg: null, defaults: null, kind: 0};
		F.line = 111;
		result_182133.kind = 0;
	framePtr = F.prev;

	return result_182133;

}

function new_ast_arg_182166() {
	var result_182168 = null;

	var F={procname:"asdl.newAstArg",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182168 = {m_type: NTI182158, arg: null, annotation: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_182168.kind = 0;
	framePtr = F.prev;

	return result_182168;

}

function ast_tfpdef_406551(parse_node_406553) {
	var result_410474 = null;

	var F={procname:"ast.astTfpdef",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406553.tokenNode.token == 101))) {
		F.line = 391;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(391, 3) `parseNode.tokenNode.token == tfpdef` "));
		}
		
		F.line = 391;
		result_410474 = new_ast_arg_182166();
		F.line = 392;
		result_410474.arg = new_identifier_406085(parse_node_406553.children[chckIndx(0, 0, parse_node_406553.children.length+0-1)-0].tokenNode.content);
		F.line = 83;
		result_410474.lineno = new_int_406060(parse_node_406553.children[chckIndx(0, 0, parse_node_406553.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_410474.col_offset = new_int_406060(parse_node_406553.children[chckIndx(0, 0, parse_node_406553.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_410474;

}

function ast_typed_args_list_406548(parse_node_406550) {
	var result_410217 = null;

	var F={procname:"ast.astTypedArgsList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406550.tokenNode.token == 100))) {
		F.line = 378;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(378, 3) `parseNode.tokenNode.token == typedargslist` "));
		}
		
		F.line = 378;
		result_410217 = new_ast_arguments_182131();
		L1: do {
			F.line = 379;
			var i_410418 = 0;
			F.line = 3616;
			var colontmp__410453 = 0;
			F.line = 379;
			colontmp__410453 = (parse_node_406550.children != null ? parse_node_406550.children.length : 0);
			F.line = 3617;
			var i_410456 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_410456 < colontmp__410453)) break L3;
						F.line = 3619;
						i_410418 = i_410456;
						F.line = 380;
						var child_410419 = parse_node_406550.children[chckIndx(i_410418, 0, parse_node_406550.children.length+0-1)-0];
						if ((modInt(i_410418, 2) == 1)) {
						if (!((child_410419.tokenNode.token == 13))) {
						F.line = 383;
						raiseException(new_syntax_error_156098(makeNimstrLit("Only support simple function arguments like foo(a,b)"), [], child_410419.tokenNode.lineNo, child_410419.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						}
						else {
							if (!((child_410419.tokenNode.token == 101))) {
							F.line = 386;
							raiseException(new_syntax_error_156098(makeNimstrLit("Only support simple function arguments like foo(a,b)"), [], child_410419.tokenNode.lineNo, child_410419.tokenNode.colNo), "SyntaxError:ObjectType");
							}
							
							F.line = 387;
							if (result_410217.args != null) { result_410217.args.push(ast_tfpdef_406551(child_410419)); } else { result_410217.args = [ast_tfpdef_406551(child_410419)]; };
						}
						
						F.line = 3620;
						i_410456 = addInt(i_410456, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_410217;

}

function ast_parameters_406545(parse_node_406547) {
	var result_409818 = null;

	var F={procname:"ast.astParameters",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406547.tokenNode.token == 99))) {
		F.line = 361;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(361, 3) `parseNode.tokenNode.token == parameters` "));
		}
		
		F.line = 361;
		switch ((parse_node_406547.children != null ? parse_node_406547.children.length : 0)) {
		case 2:
			F.line = 363;
			result_409818 = new_ast_arguments_182131();
			break;
		case 3:
			F.line = 365;
			result_409818 = ast_typed_args_list_406548(parse_node_406547.children[chckIndx(1, 0, parse_node_406547.children.length+0-1)-0]);
			break;
		default: 
			F.line = 2895;
			var e_410013 = null;
			F.line = 2896;
			e_410013 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_410013.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_410013.parent = null;
			F.line = 367;
			raiseException(e_410013, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_409818;

}

function ast_funcdef_406542(parse_node_406544) {
		var Tmp1;

	var result_409419 = null;

	var F={procname:"ast.astFuncdef",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406544.tokenNode.token == 98))) {
		F.line = 350;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(350, 3) `parseNode.tokenNode.token == funcdef` "));
		}
		
		F.line = 350;
		result_409419 = new_ast_function_def_178993();
		F.line = 83;
		result_409419.lineno = new_int_406060(parse_node_406544.children[chckIndx(0, 0, parse_node_406544.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_409419.col_offset = new_int_406060(parse_node_406544.children[chckIndx(0, 0, parse_node_406544.children.length+0-1)-0].tokenNode.colNo);
		F.line = 352;
		result_409419.name = new_identifier_406085(parse_node_406544.children[chckIndx(1, 0, parse_node_406544.children.length+0-1)-0].tokenNode.content);
		F.line = 353;
		result_409419.args = ast_parameters_406545(parse_node_406544.children[chckIndx(2, 0, parse_node_406544.children.length+0-1)-0]);
		if (!(((parse_node_406544.children != null ? parse_node_406544.children.length : 0) == 5))) {
		F.line = 355;
		raiseException(new_syntax_error_156098(makeNimstrLit("Return type annotation not implemented"), [], parse_node_406544.tokenNode.lineNo, parse_node_406544.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 356;
		result_409419.body = nimCopy(null, ast_suite_406644((Tmp1 = HEX5BHEX5D_350330(parse_node_406544.children, 1), Tmp1[0])[Tmp1[1]]), NTI406647);
		if (!(!((result_409419 == null)))) {
		F.line = 357;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(357, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_409419;

}

function new_ast_class_def_179087() {
	var result_179089 = null;

	var F={procname:"asdl.newAstClassDef",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179089 = {m_type: NTI179065, name: null, bases: null, keywords: null, body: null, decorator_list: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179089.kind = 2;
	framePtr = F.prev;

	return result_179089;

}

function ast_class_def_406719(parse_node_406721) {
		var Tmp1;

	var result_430108 = null;

	var F={procname:"ast.astClassDef",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406721.tokenNode.token == 168))) {
		F.line = 1176;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1176, 3) `parseNode.tokenNode.token == classdef` "));
		}
		
		if (!(((parse_node_406721.children != null ? parse_node_406721.children.length : 0) == 4))) {
		F.line = 1177;
		raiseException(new_syntax_error_156098(makeNimstrLit("inherit not implemented"), [], parse_node_406721.children[chckIndx(4, 0, parse_node_406721.children.length+0-1)-0].tokenNode.lineNo, parse_node_406721.children[chckIndx(4, 0, parse_node_406721.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1178;
		result_430108 = new_ast_class_def_179087();
		F.line = 83;
		result_430108.lineno = new_int_406060(parse_node_406721.children[chckIndx(0, 0, parse_node_406721.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_430108.col_offset = new_int_406060(parse_node_406721.children[chckIndx(0, 0, parse_node_406721.children.length+0-1)-0].tokenNode.colNo);
		F.line = 1180;
		result_430108.name = new_identifier_406085(parse_node_406721.children[chckIndx(1, 0, parse_node_406721.children.length+0-1)-0].tokenNode.content);
		F.line = 1181;
		result_430108.body = nimCopy(null, ast_suite_406644((Tmp1 = HEX5BHEX5D_350330(parse_node_406721.children, 1), Tmp1[0])[Tmp1[1]]), NTI406647);
	framePtr = F.prev;

	return result_430108;

}

function ast_decorator_408269(parse_node_408271) {
	var result_408272 = null;

	var F={procname:"ast.ast_decorator",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_408271.tokenNode.token == 94))) {
		F.line = 297;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(297, 3) `parseNode.tokenNode.token == decorator` "));
		}
		
		F.line = 297;
		var dotted_name_408401 = parse_node_408271.children[chckIndx(1, 0, parse_node_408271.children.length+0-1)-0];
		F.line = 298;
		switch ((dotted_name_408401.children != null ? dotted_name_408401.children.length : 0)) {
		case 1:
			F.line = 300;
			var name_408409 = dotted_name_408401.children[chckIndx(0, 0, dotted_name_408401.children.length+0-1)-0];
			F.line = 301;
			result_408272 = new_ast_name_406110(name_408409.tokenNode);
			F.line = 83;
			result_408272.lineno = new_int_406060(name_408409.tokenNode.lineNo);
			F.line = 84;
			result_408272.col_offset = new_int_406060(name_408409.tokenNode.colNo);
			break;
		default: 
			F.line = 304;
			raiseException(new_syntax_error_156098(makeNimstrLit("dotted name in decorators not implemented"), [], dotted_name_408401.tokenNode.lineNo, dotted_name_408401.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
		F.line = 306;
		switch ((parse_node_408271.children != null ? parse_node_408271.children.length : 0)) {
		case 3:
			break;
		default: 
			F.line = 310;
			var call_node_408421 = new_ast_call_180487();
			F.line = 311;
			call_node_408421.fun = result_408272;
			F.line = 83;
			call_node_408421.lineno = new_int_406060(dotted_name_408401.children[chckIndx(0, 0, dotted_name_408401.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			call_node_408421.col_offset = new_int_406060(dotted_name_408401.children[chckIndx(0, 0, dotted_name_408401.children.length+0-1)-0].tokenNode.colNo);
			F.line = 313;
			switch ((parse_node_408271.children != null ? parse_node_408271.children.length : 0)) {
			case 5:
				F.line = 315;
				result_408272 = call_node_408421;
				break;
			case 6:
				F.line = 317;
				result_408272 = ast_arglist_406722(parse_node_408271.children[chckIndx(3, 0, parse_node_408271.children.length+0-1)-0], call_node_408421);
				break;
			default: 
				F.line = 2895;
				var e_408436 = null;
				F.line = 2896;
				e_408436 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 28;
				e_408436.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_408436.parent = null;
				F.line = 319;
				raiseException(e_408436, "InternalError");
				break;
			}
			break;
		}
	framePtr = F.prev;

	return result_408272;

}

function ast_decorators_408614(parse_node_408616) {
	var result_408618 = null;

	var F={procname:"ast.ast_decorators",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_408616.tokenNode.token == 95))) {
		F.line = 323;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(323, 3) `parseNode.tokenNode.token == decorators` "));
		}
		
		L1: do {
			F.line = 323;
			var child_408809 = null;
			F.line = 3909;
			var colontmp__408821 = null;
			F.line = 323;
			colontmp__408821 = parse_node_408616.children;
			F.line = 3911;
			var i_408824 = 0;
			F.line = 3912;
			var l_408826 = (colontmp__408821 != null ? colontmp__408821.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_408824 < l_408826)) break L3;
						F.line = 3914;
						child_408809 = colontmp__408821[chckIndx(i_408824, 0, colontmp__408821.length+0-1)-0];
						F.line = 324;
						if (result_408618 != null) { result_408618.push(ast_decorator_408269(child_408809)); } else { result_408618 = [ast_decorator_408269(child_408809)]; };
						F.line = 3915;
						i_408824 = addInt(i_408824, 1);
						if (!(((colontmp__408821 != null ? colontmp__408821.length : 0) == l_408826))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_408618;

}

function ast_decorated_406539(parse_node_406541) {
	var result_408843 = null;

	var F={procname:"ast.astDecorated",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_406541.tokenNode.token == 96))) {
		F.line = 328;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(328, 3) `parseNode.tokenNode.token == decorated` "));
		}
		
		F.line = 328;
		var decorators_409001 = ast_decorators_408614(parse_node_406541.children[chckIndx(0, 0, parse_node_406541.children.length+0-1)-0]);
		F.line = 329;
		var child2_409002 = parse_node_406541.children[chckIndx(1, 0, parse_node_406541.children.length+0-1)-0];
		F.line = 330;
		switch (child2_409002.tokenNode.token) {
		case 168:
			F.line = 332;
			var class_def_409004 = ast_class_def_406719(child2_409002);
			F.line = 333;
			class_def_409004.decorator_list = nimCopy(null, decorators_409001, NTI408617);
			F.line = 334;
			result_408843 = class_def_409004;
			break BeforeRet;
			break;
		case 98:
			F.line = 336;
			var func_def_409006 = ast_funcdef_406542(child2_409002);
			F.line = 337;
			func_def_409006.decorator_list = nimCopy(null, decorators_409001, NTI408617);
			F.line = 338;
			result_408843 = func_def_409006;
			break BeforeRet;
			break;
		case 97:
			F.line = 340;
			raiseException(new_syntax_error_156098(makeNimstrLit("async function not implemented"), [], child2_409002.tokenNode.lineNo, child2_409002.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		default: 
			F.line = 2895;
			var e_409015 = null;
			F.line = 2896;
			e_409015 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_409015.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_409015.parent = null;
			F.line = 342;
			raiseException(e_409015, "InternalError");
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_408843;

}

function ast_async_stmt_406623(parse_node_406625) {
	var result_417617 = null;

	var F={procname:"ast.astAsyncStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406625.tokenNode.token == 131))) {
		F.line = 633;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(633, 3) `parseNode.tokenNode.token == async_stmt` "));
		}
		
	framePtr = F.prev;

	return result_417617;

}

function ast_compound_stmt_406620(parse_node_406622) {
	var result_417026 = null;

	var F={procname:"ast.astCompoundStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406622.tokenNode.token == 130))) {
		F.line = 618;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(618, 3) `parseNode.tokenNode.token == compound_stmt` "));
		}
		
		F.line = 618;
		var child_417201 = parse_node_406622.children[chckIndx(0, 0, parse_node_406622.children.length+0-1)-0];
		F.line = 619;
		switch (child_417201.tokenNode.token) {
		case 132:
			F.line = 620;
			result_417026 = ast_if_stmt_406626(child_417201);
			break;
		case 133:
			F.line = 621;
			result_417026 = ast_while_stmt_406629(child_417201);
			break;
		case 134:
			F.line = 622;
			result_417026 = ast_for_stmt_406632(child_417201);
			break;
		case 135:
			F.line = 623;
			result_417026 = ast_try_stmt_406635(child_417201);
			break;
		case 136:
			F.line = 624;
			result_417026 = ast_with_stmt_406641(child_417201);
			break;
		case 98:
			F.line = 625;
			result_417026 = ast_funcdef_406542(child_417201);
			break;
		case 168:
			F.line = 626;
			result_417026 = ast_class_def_406719(child_417201);
			break;
		case 96:
			F.line = 627;
			result_417026 = ast_decorated_406539(child_417201);
			break;
		case 131:
			F.line = 628;
			result_417026 = ast_async_stmt_406623(child_417201);
			break;
		default: 
			if (true) {
			F.line = 628;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(628, 5) `false` "));
			}
			
			break;
		}
		if (!(!((result_417026 == null)))) {
		F.line = 630;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(630, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_417026;

}

function ast_stmt_406554(parse_node_406556) {
	var result_410621 = null;

	var F={procname:"ast.astStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_406556.tokenNode.token == 104))) {
		F.line = 407;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(407, 3) `parseNode.tokenNode.token == stmt` "));
		}
		
		F.line = 407;
		var child_410801 = parse_node_406556.children[chckIndx(0, 0, parse_node_406556.children.length+0-1)-0];
		F.line = 408;
		switch (child_410801.tokenNode.token) {
		case 105:
			F.line = 410;
			result_410621 = nimCopy(null, ast_simple_stmt_406558(child_410801), NTI406561);
			break;
		case 130:
			F.line = 412;
			if (result_410621 != null) { result_410621.push(ast_compound_stmt_406620(child_410801)); } else { result_410621 = [ast_compound_stmt_406620(child_410801)]; };
			break;
		default: 
			F.line = 2895;
			var e_410819 = null;
			F.line = 2896;
			e_410819 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_410819.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_410819.parent = null;
			F.line = 414;
			raiseException(e_410819, "InternalError");
			break;
		}
		if (!((0 < (result_410621 != null ? result_410621.length : 0)))) {
		F.line = 415;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(415, 10) `0 < len(result)` "));
		}
		
		L1: do {
			F.line = 416;
			var child_411209 = null;
			F.line = 3911;
			var i_411404 = 0;
			F.line = 3912;
			var l_411406 = (result_410621 != null ? result_410621.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_411404 < l_411406)) break L3;
						F.line = 3914;
						child_411209 = result_410621[chckIndx(i_411404, 0, result_410621.length+0-1)-0];
						if (!(!((child_411209 == null)))) {
						F.line = 417;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(417, 12) `\x0Anot (child == nil)` "));
						}
						
						F.line = 3915;
						i_411404 = addInt(i_411404, 1);
						if (!(((result_410621 != null ? result_410621.length : 0) == l_411406))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_410621;

}

function ast_file_input_408014(parse_node_408016) {
	var result_408017 = null;

	var F={procname:"ast.ast_file_input",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_408016.tokenNode.token == 92))) {
		F.line = 284;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(284, 3) `parseNode.tokenNode.token == file_input` "));
		}
		
		F.line = 284;
		result_408017 = new_ast_module_178845();
		L1: do {
			F.line = 285;
			var child_408209 = null;
			F.line = 3909;
			var colontmp__408250 = null;
			F.line = 285;
			colontmp__408250 = parse_node_408016.children;
			F.line = 3911;
			var i_408253 = 0;
			F.line = 3912;
			var l_408255 = (colontmp__408250 != null ? colontmp__408250.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_408253 < l_408255)) break L3;
						F.line = 3914;
						child_408209 = colontmp__408250[chckIndx(i_408253, 0, colontmp__408250.length+0-1)-0];
						if ((child_408209.tokenNode.token == 104)) {
						L4: do {
							F.line = 23;
							var item_408231 = null;
							F.line = 3909;
							var colontmp__408244 = null;
							F.line = 287;
							colontmp__408244 = ast_stmt_406554(child_408209);
							F.line = 3911;
							var i_408247 = 0;
							F.line = 3912;
							var l_408249 = (colontmp__408244 != null ? colontmp__408244.length : 0);
							L5: do {
								F.line = 3913;
									L6: while (true) {
									if (!(i_408247 < l_408249)) break L6;
										F.line = 3914;
										item_408231 = colontmp__408244[chckIndx(i_408247, 0, colontmp__408244.length+0-1)-0];
										F.line = 24;
										if (result_408017.body != null) { result_408017.body.push(item_408231); } else { result_408017.body = [item_408231]; };
										F.line = 3915;
										i_408247 = addInt(i_408247, 1);
										if (!(((colontmp__408244 != null ? colontmp__408244.length : 0) == l_408249))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						}
						
						F.line = 3915;
						i_408253 = addInt(i_408253, 1);
						if (!(((colontmp__408250 != null ? colontmp__408250.length : 0) == l_408255))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_408017;

}

function new_ast_interactive_178880() {
	var result_178882 = null;

	var F={procname:"asdl.newAstInteractive",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_178882 = {m_type: NTI178872, body: null, kind: 0};
		F.line = 111;
		result_178882.kind = 1;
	framePtr = F.prev;

	return result_178882;

}

function ast_single_input_407495(parse_node_407497) {
	var result_407498 = null;

	var F={procname:"ast.ast_single_input",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_407497.tokenNode.token == 91))) {
		F.line = 266;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(266, 3) `parseNode.tokenNode.token == single_input` "));
		}
		
		F.line = 266;
		result_407498 = new_ast_interactive_178880();
		F.line = 267;
		var child_407601 = parse_node_407497.children[chckIndx(0, 0, parse_node_407497.children.length+0-1)-0];
		F.line = 268;
		switch ((parse_node_407497.children != null ? parse_node_407497.children.length : 0)) {
		case 1:
			F.line = 270;
			switch (child_407601.tokenNode.token) {
			case 5:
				break;
			case 105:
				F.line = 274;
				result_407498.body = nimCopy(null, ast_simple_stmt_406558(child_407601), NTI406561);
				break;
			default: 
				F.line = 2895;
				var e_407616 = null;
				F.line = 2896;
				e_407616 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 28;
				e_407616.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_407616.parent = null;
				F.line = 276;
				raiseException(e_407616, "InternalError");
				break;
			}
			break;
		case 2:
			F.line = 278;
			if (result_407498.body != null) { result_407498.body.push(ast_compound_stmt_406620(child_407601)); } else { result_407498.body = [ast_compound_stmt_406620(child_407601)]; };
			break;
		default: 
			F.line = 2895;
			var e_407816 = null;
			F.line = 2896;
			e_407816 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_407816.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_407816.parent = null;
			F.line = 280;
			raiseException(e_407816, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_407498;

}

function ast_431236(root_431238) {
	var result_431239 = null;

	var F={procname:"ast.ast",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1237;
		switch (root_431238.tokenNode.token) {
		case 92:
			F.line = 1239;
			result_431239 = ast_file_input_408014(root_431238);
			break;
		case 91:
			F.line = 1241;
			result_431239 = ast_single_input_407495(root_431238);
			break;
		case 93:
			F.line = 2895;
			var e_431248 = null;
			F.line = 2896;
			e_431248 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_431248.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_431248.parent = null;
			F.line = 1243;
			raiseException(e_431248, "InternalError");
			break;
		default: 
			F.line = 2895;
			var e_431406 = null;
			F.line = 2896;
			e_431406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_431406.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_431406.parent = null;
			F.line = 1245;
			raiseException(e_431406, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_431239;

}

function new_499654() {
	var result_499659 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_499801 = null;
		F.line = 211;
		r_499801 = {units: null, st: null, interactive: false, fileName: null};
		F.line = 212;
		result_499659 = r_499801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_499659;

}

function init_table_463558(initial_size_463563) {
	var result_463565 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_463563))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_463565.counter = 0;
		F.line = 354;
		result_463565.data = new Array(chckRange(initial_size_463563, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_463563, 0, 2147483647);++i) {result_463565.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_463565;

}

function pop_448422(s_448428, s_448428_Idx) {
	var result_448429 = {Field0: null, Field1: null};

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_448437 = subInt((s_448428[s_448428_Idx] != null ? s_448428[s_448428_Idx].length : 0), 1);
		F.line = 2525;
		nimCopy(result_448429, s_448428[s_448428_Idx][chckIndx(l_448437, 0, s_448428[s_448428_Idx].length+0-1)-0], NTI448401);
		F.line = 2526;
		if (s_448428[s_448428_Idx].length < chckRange(l_448437, 0, 2147483647)) { for (var i=s_448428[s_448428_Idx].length;i<chckRange(l_448437, 0, 2147483647);++i) s_448428[s_448428_Idx].push({Field0: null, Field1: null}); }
               else { s_448428[s_448428_Idx].length = chckRange(l_448437, 0, 2147483647); };
	framePtr = F.prev;

	return result_448429;

}

function new_432371() {
	var result_432376 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_432401 = null;
		F.line = 211;
		r_432401 = {parent: null, children: null, argVars: {data: null, counter: 0}, declaredVars: {data: null, counter: 0}, usedVars: {data: null, counter: 0}, scopes: {data: null, counter: 0}, names: {data: null, counter: 0}, localVars: {data: null, counter: 0}, cellVars: {data: null, counter: 0}, freeVars: {data: null, counter: 0}};
		F.line = 212;
		result_432376 = r_432401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_432376;

}

function init_table_432443(initial_size_432448) {
	var result_432450 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_432448))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_432450.counter = 0;
		F.line = 354;
		result_432450.data = new Array(chckRange(initial_size_432448, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_432448, 0, 2147483647);++i) {result_432450.data[i]={Field0: 0, Field1: null, Field2: 0};}	framePtr = F.prev;

	return result_432450;

}

function init_432652(s_432658, initial_size_432660) {
	var F={procname:"init.init",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_432660))) {
		F.line = 400;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(400, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 401;
		s_432658.counter = 0;
		F.line = 402;
		s_432658.data = new Array(chckRange(initial_size_432660, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_432660, 0, 2147483647);++i) {s_432658.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_432626(initial_size_432630) {
	var result_432632 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 414;
		init_432652(result_432632[0], initial_size_432630);
	framePtr = F.prev;

	return result_432632[0];

}

function init_table_432849(initial_size_432854) {
	var result_432856 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_432854))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_432856.counter = 0;
		F.line = 354;
		result_432856.data = new Array(chckRange(initial_size_432854, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_432854, 0, 2147483647);++i) {result_432856.data[i]={Field0: 0, Field1: null, Field2: 0};}	framePtr = F.prev;

	return result_432856;

}

function new_sym_table_entry_432365(parent_432367) {
	var result_432368 = null;

	var F={procname:"symtable.newSymTableEntry",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 55;
		result_432368 = new_432371();
		F.line = 56;
		result_432368.parent = parent_432367;
		if (!((parent_432367 === null))) {
		F.line = 58;
		if (parent_432367.children != null) { parent_432367.children.push(result_432368); } else { parent_432367.children = [result_432368]; };
		}
		
		F.line = 59;
		nimCopy(result_432368.argVars, init_table_432443(64), NTI432186);
		F.line = 60;
		nimCopy(result_432368.declaredVars, init_set_432626(64), NTI432211);
		F.line = 61;
		nimCopy(result_432368.usedVars, init_set_432626(64), NTI432211);
		F.line = 62;
		nimCopy(result_432368.scopes, init_table_432849(64), NTI432242);
		F.line = 63;
		nimCopy(result_432368.names, init_table_432443(64), NTI432186);
		F.line = 64;
		nimCopy(result_432368.localVars, init_table_432443(64), NTI432186);
		F.line = 65;
		nimCopy(result_432368.cellVars, init_table_432443(64), NTI432186);
		F.line = 66;
		nimCopy(result_432368.freeVars, init_table_432443(64), NTI432186);
	framePtr = F.prev;

	return result_432368;

}

function raw_get_433330(t_433335, key_433337, hc_433339, hc_433339_Idx) {
						var Tmp3;

	var result_433340 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_433339[hc_433339_Idx] = hash_177049(key_433337);
		if ((hc_433339[hc_433339_Idx] == 0)) {
		F.line = 45;
		hc_433339[hc_433339_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_433350 = (hc_433339[hc_433339_Idx] & (t_433335.data != null ? (t_433335.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_433335.data[chckIndx(h_433350, 0, t_433335.data.length+0-1)-0].Field0)) break L2;
						if (!(t_433335.data[chckIndx(h_433350, 0, t_433335.data.length+0-1)-0].Field0 == hc_433339[hc_433339_Idx])) Tmp3 = false; else {							Tmp3 = (t_433335.data[chckIndx(h_433350, 0, t_433335.data.length+0-1)-0].Field1 == key_433337);						}					if (Tmp3) {
					F.line = 38;
					result_433340 = h_433350;
					break BeforeRet;
					}
					
					F.line = 39;
					h_433350 = next_try_146614(h_433350, (t_433335.data != null ? (t_433335.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_433340 = subInt(-1, h_433350);
	} while (false);
	framePtr = F.prev;

	return result_433340;

}

function raw_insert_450354(t_450361, data_450365, data_450365_Idx, key_450367, val_450369, hc_450371, h_450373) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_450365[data_450365_Idx][chckIndx(h_450373, 0, data_450365[data_450365_Idx].length+0-1)-0].Field1 = key_450367;
		F.line = 65;
		data_450365[data_450365_Idx][chckIndx(h_450373, 0, data_450365[data_450365_Idx].length+0-1)-0].Field2 = val_450369;
		F.line = 66;
		data_450365[data_450365_Idx][chckIndx(h_450373, 0, data_450365[data_450365_Idx].length+0-1)-0].Field0 = hc_450371;
	framePtr = F.prev;

	
}

function enlarge_449110(t_449117) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_449125 = null;
		F.line = 314;
		n_449125 = new Array(chckRange(mulInt((t_449117.data != null ? t_449117.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_449117.data != null ? t_449117.data.length : 0), 2), 0, 2147483647);++i) {n_449125[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_449117.data; t_449117.data = n_449125; n_449125 = Tmp1;		L2: do {
			F.line = 316;
			var i_449380 = 0;
			F.line = 2088;
			var colontmp__451095 = 0;
			F.line = 316;
			colontmp__451095 = (n_449125 != null ? (n_449125.length-1) : -1);
			F.line = 2094;
			var res_451098 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_451098 <= colontmp__451095)) break L4;
						F.line = 2096;
						i_449380 = res_451098;
						F.line = 317;
						var eh_449616 = n_449125[chckIndx(i_449380, 0, n_449125.length+0-1)-0].Field0;
						if (is_filled_146491(eh_449616)) {
						F.line = 319;
						var j_449625 = (eh_449616 & (t_449117.data != null ? (t_449117.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_449117.data[chckIndx(j_449625, 0, t_449117.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_449625 = next_try_146614(j_449625, (t_449117.data != null ? (t_449117.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_450354(t_449117, t_449117, "data", n_449125[chckIndx(i_449380, 0, n_449125.length+0-1)-0].Field1, n_449125[chckIndx(i_449380, 0, n_449125.length+0-1)-0].Field2, eh_449616, j_449625);
						}
						
						F.line = 2097;
						res_451098 = addInt(res_451098, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_451116(t_451121, key_451123, hc_451125) {
	var result_451126 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_451135 = (hc_451125 & (t_451121.data != null ? (t_451121.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_451121.data[chckIndx(h_451135, 0, t_451121.data.length+0-1)-0].Field0)) break L2;
					if (((t_451121.data[chckIndx(h_451135, 0, t_451121.data.length+0-1)-0].Field0 == hc_451125) && (t_451121.data[chckIndx(h_451135, 0, t_451121.data.length+0-1)-0].Field1 == key_451123))) {
					F.line = 38;
					result_451126 = h_451135;
					break BeforeRet;
					}
					
					F.line = 39;
					h_451135 = next_try_146614(h_451135, (t_451121.data != null ? (t_451121.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_451126 = subInt(-1, h_451135);
	} while (false);
	framePtr = F.prev;

	return result_451126;

}

function HEX5BHEX5DHEX3D_448611(t_448618, key_448620, val_448622) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_448623 = [0];
		F.line = 98;
		var index_448636 = raw_get_433330(t_448618, key_448620, hc_448623, 0);
		if ((0 <= index_448636)) {
		F.line = 99;
		t_448618.data[chckIndx(index_448636, 0, t_448618.data.length+0-1)-0].Field2 = val_448622;
		}
		else {
			if (must_rehash_146509((t_448618.data != null ? t_448618.data.length : 0), t_448618.counter)) {
			F.line = 90;
			enlarge_449110(t_448618);
			F.line = 91;
			index_448636 = raw_get_known_hc_451116(t_448618, key_448620, hc_448623[0]);
			}
			
			F.line = 92;
			index_448636 = subInt(-1, index_448636);
			F.line = 93;
			raw_insert_450354(t_448618, t_448618, "data", key_448620, val_448622, hc_448623[0], index_448636);
			F.line = 100;
			t_448618.counter = addInt(t_448618.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function is_valid_434696(s_434701) {
	var result_434702 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_434702 = (0 < (s_434701.data != null ? s_434701.data.length : 0));
	framePtr = F.prev;

	return result_434702;

}

function HEX3DHEX3D_403059(self_403061, other_403062) {
	var result_403063 = false;

	var F={procname:"stringobjectImpl.==",prev:framePtr,filename:"../Objects/stringobjectImpl.nim",line:0};
	framePtr = F;
		F.line = 14;
		result_403063 = eqStrings(self_403061.str, other_403062.str);
	framePtr = F.prev;

	return result_403063;

}

function raw_get_435021(s_435026, key_435028, hc_435030, hc_435030_Idx) {
						var Tmp3;

	var result_435031 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_435035 = hash_403040(key_435028);
		if ((hc_435035 == 0)) {
		F.line = 164;
		hc_435035 = 314159265;
		}
		
		hc_435030[hc_435030_Idx] = hc_435035;
		F.line = 150;
		var h_435045 = (hc_435030[hc_435030_Idx] & (s_435026.data != null ? (s_435026.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_435026.data[chckIndx(h_435045, 0, s_435026.data.length+0-1)-0].Field0)) break L2;
						if (!(s_435026.data[chckIndx(h_435045, 0, s_435026.data.length+0-1)-0].Field0 == hc_435030[hc_435030_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_403059(s_435026.data[chckIndx(h_435045, 0, s_435026.data.length+0-1)-0].Field1, key_435028);						}					if (Tmp3) {
					F.line = 157;
					result_435031 = h_435045;
					break BeforeRet;
					}
					
					F.line = 158;
					h_435045 = next_try_154431(h_435045, (s_435026.data != null ? (s_435026.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_435031 = subInt(-1, h_435045);
	} while (false);
	framePtr = F.prev;

	return result_435031;

}

function raw_get_known_hc_438659(s_438664, key_438666, hc_438668) {
	var result_438669 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_438678 = (hc_438668 & (s_438664.data != null ? (s_438664.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_438664.data[chckIndx(h_438678, 0, s_438664.data.length+0-1)-0].Field0)) break L2;
					if (((s_438664.data[chckIndx(h_438678, 0, s_438664.data.length+0-1)-0].Field0 == hc_438668) && HEX3DHEX3D_403059(s_438664.data[chckIndx(h_438678, 0, s_438664.data.length+0-1)-0].Field1, key_438666))) {
					F.line = 157;
					result_438669 = h_438678;
					break BeforeRet;
					}
					
					F.line = 158;
					h_438678 = next_try_154431(h_438678, (s_438664.data != null ? (s_438664.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_438669 = subInt(-1, h_438678);
	} while (false);
	framePtr = F.prev;

	return result_438669;

}

function raw_insert_439898(s_439904, data_439908, data_439908_Idx, key_439910, hc_439912, h_439914) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 172;
		data_439908[data_439908_Idx][chckIndx(h_439914, 0, data_439908[data_439908_Idx].length+0-1)-0].Field1 = key_439910;
		F.line = 173;
		data_439908[data_439908_Idx][chckIndx(h_439914, 0, data_439908[data_439908_Idx].length+0-1)-0].Field0 = hc_439912;
	framePtr = F.prev;

	
}

function enlarge_437667(s_437673) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 225;
		var n_437678 = null;
		F.line = 226;
		n_437678 = new Array(chckRange(mulInt((s_437673.data != null ? s_437673.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_437673.data != null ? s_437673.data.length : 0), 2), 0, 2147483647);++i) {n_437678[i]={Field0: 0, Field1: null};}		F.line = 227;
		var Tmp1 = s_437673.data; s_437673.data = n_437678; n_437678 = Tmp1;		L2: do {
			F.line = 228;
			var i_437933 = 0;
			F.line = 2088;
			var colontmp__440400 = 0;
			F.line = 228;
			colontmp__440400 = (n_437678 != null ? (n_437678.length-1) : -1);
			F.line = 2094;
			var res_440403 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_440403 <= colontmp__440400)) break L4;
						F.line = 2096;
						i_437933 = res_440403;
						if (is_filled_154282(n_437678[chckIndx(i_437933, 0, n_437678.length+0-1)-0].Field0)) {
						F.line = 230;
						var j_439407 = subInt(-1, raw_get_known_hc_438659(s_437673, n_437678[chckIndx(i_437933, 0, n_437678.length+0-1)-0].Field1, n_437678[chckIndx(i_437933, 0, n_437678.length+0-1)-0].Field0));
						F.line = 231;
						raw_insert_439898(s_437673, s_437673, "data", n_437678[chckIndx(i_437933, 0, n_437678.length+0-1)-0].Field1, n_437678[chckIndx(i_437933, 0, n_437678.length+0-1)-0].Field0, j_439407);
						}
						
						F.line = 2097;
						res_440403 = addInt(res_440403, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_437325(s_437331, key_437333) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_434696(s_437331))) {
		F.line = 265;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(265, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 234;
		var hc_437401 = [0];
		F.line = 235;
		var index_437432 = raw_get_435021(s_437331, key_437333, hc_437401, 0);
		if ((index_437432 < 0)) {
		if (must_rehash_154361((s_437331.data != null ? s_437331.data.length : 0), s_437331.counter)) {
		F.line = 238;
		enlarge_437667(s_437331);
		F.line = 239;
		index_437432 = raw_get_known_hc_438659(s_437331, key_437333, hc_437401[0]);
		}
		
		F.line = 240;
		raw_insert_439898(s_437331, s_437331, "data", key_437333, hc_437401[0], subInt(-1, index_437432));
		F.line = 241;
		s_437331.counter = addInt(s_437331.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function add_declaration_437242(ste_437244, name_437245) {
	var F={procname:"symtable.addDeclaration",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 83;
		incl_437325(ste_437244.declaredVars, name_437245);
	framePtr = F.prev;

	
}

function add_declaration_440524(ste_440526, name_440527) {
	var F={procname:"symtable.addDeclaration",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 86;
		var name_str_440528 = name_440527.value;
		F.line = 87;
		add_declaration_437242(ste_440526, name_str_440528);
	framePtr = F.prev;

	
}

function raw_get_440918(t_440923, key_440925, hc_440927, hc_440927_Idx) {
						var Tmp3;

	var result_440928 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_440927[hc_440927_Idx] = hash_403040(key_440925);
		if ((hc_440927[hc_440927_Idx] == 0)) {
		F.line = 45;
		hc_440927[hc_440927_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_440938 = (hc_440927[hc_440927_Idx] & (t_440923.data != null ? (t_440923.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_440923.data[chckIndx(h_440938, 0, t_440923.data.length+0-1)-0].Field0)) break L2;
						if (!(t_440923.data[chckIndx(h_440938, 0, t_440923.data.length+0-1)-0].Field0 == hc_440927[hc_440927_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_403059(t_440923.data[chckIndx(h_440938, 0, t_440923.data.length+0-1)-0].Field1, key_440925);						}					if (Tmp3) {
					F.line = 38;
					result_440928 = h_440938;
					break BeforeRet;
					}
					
					F.line = 39;
					h_440938 = next_try_146614(h_440938, (t_440923.data != null ? (t_440923.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_440928 = subInt(-1, h_440938);
	} while (false);
	framePtr = F.prev;

	return result_440928;

}

function raw_insert_444593(t_444600, data_444604, data_444604_Idx, key_444606, val_444608, hc_444610, h_444612) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_444604[data_444604_Idx][chckIndx(h_444612, 0, data_444604[data_444604_Idx].length+0-1)-0].Field1 = key_444606;
		F.line = 65;
		data_444604[data_444604_Idx][chckIndx(h_444612, 0, data_444604[data_444604_Idx].length+0-1)-0].Field2 = val_444608;
		F.line = 66;
		data_444604[data_444604_Idx][chckIndx(h_444612, 0, data_444604[data_444604_Idx].length+0-1)-0].Field0 = hc_444610;
	framePtr = F.prev;

	
}

function enlarge_443349(t_443356) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_443364 = null;
		F.line = 314;
		n_443364 = new Array(chckRange(mulInt((t_443356.data != null ? t_443356.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_443356.data != null ? t_443356.data.length : 0), 2), 0, 2147483647);++i) {n_443364[i]={Field0: 0, Field1: null, Field2: 0};}		F.line = 315;
		var Tmp1 = t_443356.data; t_443356.data = n_443364; n_443364 = Tmp1;		L2: do {
			F.line = 316;
			var i_443619 = 0;
			F.line = 2088;
			var colontmp__445334 = 0;
			F.line = 316;
			colontmp__445334 = (n_443364 != null ? (n_443364.length-1) : -1);
			F.line = 2094;
			var res_445337 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_445337 <= colontmp__445334)) break L4;
						F.line = 2096;
						i_443619 = res_445337;
						F.line = 317;
						var eh_443855 = n_443364[chckIndx(i_443619, 0, n_443364.length+0-1)-0].Field0;
						if (is_filled_146491(eh_443855)) {
						F.line = 319;
						var j_443864 = (eh_443855 & (t_443356.data != null ? (t_443356.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_443356.data[chckIndx(j_443864, 0, t_443356.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_443864 = next_try_146614(j_443864, (t_443356.data != null ? (t_443356.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_444593(t_443356, t_443356, "data", n_443364[chckIndx(i_443619, 0, n_443364.length+0-1)-0].Field1, n_443364[chckIndx(i_443619, 0, n_443364.length+0-1)-0].Field2, eh_443855, j_443864);
						}
						
						F.line = 2097;
						res_445337 = addInt(res_445337, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_445355(t_445360, key_445362, hc_445364) {
	var result_445365 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_445374 = (hc_445364 & (t_445360.data != null ? (t_445360.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_445360.data[chckIndx(h_445374, 0, t_445360.data.length+0-1)-0].Field0)) break L2;
					if (((t_445360.data[chckIndx(h_445374, 0, t_445360.data.length+0-1)-0].Field0 == hc_445364) && HEX3DHEX3D_403059(t_445360.data[chckIndx(h_445374, 0, t_445360.data.length+0-1)-0].Field1, key_445362))) {
					F.line = 38;
					result_445365 = h_445374;
					break BeforeRet;
					}
					
					F.line = 39;
					h_445374 = next_try_146614(h_445374, (t_445360.data != null ? (t_445360.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_445365 = subInt(-1, h_445374);
	} while (false);
	framePtr = F.prev;

	return result_445365;

}

function HEX5BHEX5DHEX3D_442850(t_442857, key_442859, val_442861) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_442862 = [0];
		F.line = 98;
		var index_442875 = raw_get_440918(t_442857, key_442859, hc_442862, 0);
		if ((0 <= index_442875)) {
		F.line = 99;
		t_442857.data[chckIndx(index_442875, 0, t_442857.data.length+0-1)-0].Field2 = val_442861;
		}
		else {
			if (must_rehash_146509((t_442857.data != null ? t_442857.data.length : 0), t_442857.counter)) {
			F.line = 90;
			enlarge_443349(t_442857);
			F.line = 91;
			index_442875 = raw_get_known_hc_445355(t_442857, key_442859, hc_442862[0]);
			}
			
			F.line = 92;
			index_442875 = subInt(-1, index_442875);
			F.line = 93;
			raw_insert_444593(t_442857, t_442857, "data", key_442859, val_442861, hc_442862[0], index_442875);
			F.line = 100;
			t_442857.counter = addInt(t_442857.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function pop_452809(s_452815, s_452815_Idx) {
	var result_452816 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_452824 = subInt((s_452815[s_452815_Idx] != null ? s_452815[s_452815_Idx].length : 0), 1);
		F.line = 2525;
		result_452816 = s_452815[s_452815_Idx][chckIndx(l_452824, 0, s_452815[s_452815_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_452815[s_452815_Idx].length < chckRange(l_452824, 0, 2147483647)) { for (var i=s_452815[s_452815_Idx].length;i<chckRange(l_452824, 0, 2147483647);++i) s_452815[s_452815_Idx].push(null); }
               else { s_452815[s_452815_Idx].length = chckRange(l_452824, 0, 2147483647); };
	framePtr = F.prev;

	return result_452816;

}

function add_used_440542(ste_440544, name_440545) {
	var F={procname:"symtable.addUsed",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 90;
		incl_437325(ste_440544.usedVars, name_440545);
	framePtr = F.prev;

	
}

function add_used_440648(ste_440650, name_440651) {
	var F={procname:"symtable.addUsed",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 93;
		var name_str_440652 = name_440651.value;
		F.line = 94;
		add_used_440542(ste_440650, name_str_440652);
	framePtr = F.prev;

	
}

function collect_declaration_448396(st_448398, ast_root_448399) {
	var F={procname:"symtable.collectDeclaration",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 148;
		var to_visit_448402 = [null];
		F.line = 149;
		if (to_visit_448402[0] != null) { to_visit_448402[0].push({Field0: ast_root_448399, Field1: null}); } else { to_visit_448402[0] = [{Field0: ast_root_448399, Field1: null}]; };
		L1: do {
			F.line = 150;
				L2: while (true) {
				if (!!(((to_visit_448402[0] != null ? to_visit_448402[0].length : 0) == 0))) break L2;
					F.line = 151;
					var colontmp__664614 = {Field0: null, Field1: null};
					F.line = 151;
					var ast_node_448462 = null;
					F.line = 151;
					var parent_ste_448463 = null;
					F.line = 151;
					nimCopy(colontmp__664614, pop_448422(to_visit_448402, 0), NTI448401);
					F.line = 151;
					ast_node_448462 = colontmp__664614["Field0"];
					F.line = 151;
					parent_ste_448463 = colontmp__664614["Field1"];
					F.line = 152;
					var ste_448464 = new_sym_table_entry_432365(parent_ste_448463);
					F.line = 153;
					HEX5BHEX5DHEX3D_448611(st_448398.entries, ast_node_448462, ste_448464);
					F.line = 154;
					var to_visit_per_ste_451935 = [null];
					if (isObj(ast_node_448462.m_type, NTI178837)) {
					L3: do {
						F.line = 163;
						var node_451980 = null;
						F.line = 3909;
						var colontmp__456404 = null;
						F.line = 163;
						colontmp__456404 = ast_node_448462.body;
						F.line = 3911;
						var i_456407 = 0;
						F.line = 3912;
						var l_456409 = (colontmp__456404 != null ? colontmp__456404.length : 0);
						L4: do {
							F.line = 3913;
								L5: while (true) {
								if (!(i_456407 < l_456409)) break L5;
									F.line = 3914;
									node_451980 = colontmp__456404[chckIndx(i_456407, 0, colontmp__456404.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(node_451980); } else { to_visit_per_ste_451935[0] = [node_451980]; };
									F.line = 3915;
									i_456407 = addInt(i_456407, 1);
									if (!(((colontmp__456404 != null ? colontmp__456404.length : 0) == l_456409))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_448462.m_type, NTI178872)) {
					L6: do {
						F.line = 163;
						var node_452013 = null;
						F.line = 3909;
						var colontmp__456412 = null;
						F.line = 163;
						colontmp__456412 = ast_node_448462.body;
						F.line = 3911;
						var i_456415 = 0;
						F.line = 3912;
						var l_456417 = (colontmp__456412 != null ? colontmp__456412.length : 0);
						L7: do {
							F.line = 3913;
								L8: while (true) {
								if (!(i_456415 < l_456417)) break L8;
									F.line = 3914;
									node_452013 = colontmp__456412[chckIndx(i_456415, 0, colontmp__456412.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(node_452013); } else { to_visit_per_ste_451935[0] = [node_452013]; };
									F.line = 3915;
									i_456415 = addInt(i_456415, 1);
									if (!(((colontmp__456412 != null ? colontmp__456412.length : 0) == l_456417))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_448462.m_type, NTI178975)) {
					L9: do {
						F.line = 163;
						var node_452046 = null;
						F.line = 3909;
						var colontmp__456420 = null;
						F.line = 163;
						colontmp__456420 = ast_node_448462.body;
						F.line = 3911;
						var i_456423 = 0;
						F.line = 3912;
						var l_456425 = (colontmp__456420 != null ? colontmp__456420.length : 0);
						L10: do {
							F.line = 3913;
								L11: while (true) {
								if (!(i_456423 < l_456425)) break L11;
									F.line = 3914;
									node_452046 = colontmp__456420[chckIndx(i_456423, 0, colontmp__456420.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(node_452046); } else { to_visit_per_ste_451935[0] = [node_452046]; };
									F.line = 3915;
									i_456423 = addInt(i_456423, 1);
									if (!(((colontmp__456420 != null ? colontmp__456420.length : 0) == l_456425))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 173;
					var f_452057 = ast_node_448462;
					F.line = 174;
					var args_452058 = nimCopy(null, f_452057.args.args, NTI182108);
					L12: do {
						F.line = 175;
						var idx_452105 = 0;
						F.line = 175;
						var arg_452106 = null;
						F.line = 2354;
						var i_456430 = 0;
						L13: do {
							F.line = 2355;
								L14: while (true) {
								if (!(i_456430 < (args_452058 != null ? args_452058.length : 0))) break L14;
									F.line = 2356;
									idx_452105 = i_456430;
									F.line = 2356;
									arg_452106 = args_452058[chckIndx(i_456430, 0, args_452058.length+0-1)-0];
									if (!(isObj(arg_452106.m_type, NTI182158))) {
									F.line = 176;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(176, 16) `arg of AstArg` "));
									}
									
									F.line = 177;
									add_declaration_440524(ste_448464, arg_452106.arg);
									F.line = 178;
									HEX5BHEX5DHEX3D_442850(ste_448464.argVars, arg_452106.arg.value, idx_452105);
									F.line = 2357;
									i_456430 = addInt(i_456430, 1);
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_448462.m_type, NTI179065)) {
					L15: do {
						F.line = 163;
						var node_452382 = null;
						F.line = 3909;
						var colontmp__456433 = null;
						F.line = 163;
						colontmp__456433 = ast_node_448462.body;
						F.line = 3911;
						var i_456436 = 0;
						F.line = 3912;
						var l_456438 = (colontmp__456433 != null ? colontmp__456433.length : 0);
						L16: do {
							F.line = 3913;
								L17: while (true) {
								if (!(i_456436 < l_456438)) break L17;
									F.line = 3914;
									node_452382 = colontmp__456433[chckIndx(i_456436, 0, colontmp__456433.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(node_452382); } else { to_visit_per_ste_451935[0] = [node_452382]; };
									F.line = 3915;
									i_456436 = addInt(i_456436, 1);
									if (!(((colontmp__456433 != null ? colontmp__456433.length : 0) == l_456438))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_448462.m_type, NTI180183)) {
					F.line = 182;
					var comp_node_452404 = ast_node_448462;
					F.line = 183;
					if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(comp_node_452404.elt); } else { to_visit_per_ste_451935[0] = [comp_node_452404.elt]; };
					L18: do {
						F.line = 184;
						var gen_452423 = null;
						F.line = 3909;
						var colontmp__456441 = null;
						F.line = 184;
						colontmp__456441 = comp_node_452404.generators;
						F.line = 3911;
						var i_456444 = 0;
						F.line = 3912;
						var l_456446 = (colontmp__456441 != null ? colontmp__456441.length : 0);
						L19: do {
							F.line = 3913;
								L20: while (true) {
								if (!(i_456444 < l_456446)) break L20;
									F.line = 3914;
									gen_452423 = colontmp__456441[chckIndx(i_456444, 0, colontmp__456441.length+0-1)-0];
									F.line = 185;
									var gen_node_452424 = gen_452423;
									F.line = 186;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(gen_node_452424.target); } else { to_visit_per_ste_451935[0] = [gen_node_452424.target]; };
									F.line = 3915;
									i_456444 = addInt(i_456444, 1);
									if (!(((colontmp__456441 != null ? colontmp__456441.length : 0) == l_456446))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 188;
					add_declaration_437242(ste_448464, new_py_string_176075(makeNimstrLit(".0")));
					F.line = 189;
					HEX5BHEX5DHEX3D_442850(ste_448464.argVars, new_py_string_176075(makeNimstrLit(".0")), 0);
					}
					else {
						F.line = 2895;
						var e_452599 = null;
						F.line = 2896;
						e_452599 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 28;
						e_452599.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
						F.line = 2891;
						e_452599.parent = null;
						F.line = 191;
						raiseException(e_452599, "InternalError");
					}
					}}}}
					L21: do {
						F.line = 193;
							L22: while (true) {
							if (!!(((to_visit_per_ste_451935[0] != null ? to_visit_per_ste_451935[0].length : 0) == 0))) break L22;
								F.line = 194;
								var ast_node_452849 = pop_452809(to_visit_per_ste_451935, 0);
								if (isObj(ast_node_452849.m_type, NTI178726)) {
								F.line = 196;
								switch (ast_node_452849.kind) {
								case 0:
									F.line = 199;
									var func_node_452862 = ast_node_452849;
									F.line = 200;
									add_declaration_440524(ste_448464, func_node_452862.name);
									F.line = 201;
									if (to_visit_448402[0] != null) { to_visit_448402[0].push({Field0: ast_node_452849, Field1: ste_448464}); } else { to_visit_448402[0] = [{Field0: ast_node_452849, Field1: ste_448464}]; };
									L23: do {
										F.line = 159;
										var ast_node_452885 = null;
										F.line = 3909;
										var colontmp__456450 = null;
										F.line = 202;
										colontmp__456450 = func_node_452862.decorator_list;
										F.line = 3911;
										var i_456453 = 0;
										F.line = 3912;
										var l_456455 = (colontmp__456450 != null ? colontmp__456450.length : 0);
										L24: do {
											F.line = 3913;
												L25: while (true) {
												if (!(i_456453 < l_456455)) break L25;
													F.line = 3914;
													ast_node_452885 = colontmp__456450[chckIndx(i_456453, 0, colontmp__456450.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_452885); } else { to_visit_per_ste_451935[0] = [ast_node_452885]; };
													F.line = 3915;
													i_456453 = addInt(i_456453, 1);
													if (!(((colontmp__456450 != null ? colontmp__456450.length : 0) == l_456455))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 2:
									F.line = 205;
									var class_node_452897 = ast_node_452849;
									if (!(((class_node_452897.bases != null ? class_node_452897.bases.length : 0) == 0))) {
									F.line = 206;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(206, 18) `len(classNode.bases) == 0` "));
									}
									
									if (!(((class_node_452897.keywords != null ? class_node_452897.keywords.length : 0) == 0))) {
									F.line = 207;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(207, 18) `len(classNode.keywords) == 0` "));
									}
									
									if (!(((class_node_452897.decorator_list != null ? class_node_452897.decorator_list.length : 0) == 0))) {
									F.line = 208;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(208, 18) `len(classNode.decorator_list) == 0` "));
									}
									
									F.line = 209;
									add_declaration_440524(ste_448464, class_node_452897.name);
									F.line = 210;
									if (to_visit_448402[0] != null) { to_visit_448402[0].push({Field0: ast_node_452849, Field1: ste_448464}); } else { to_visit_448402[0] = [{Field0: ast_node_452849, Field1: ste_448464}]; };
									break;
								case 3:
									if (!((ast_node_452849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_452849.value); } else { to_visit_per_ste_451935[0] = [ast_node_452849.value]; };
									}
									
									break;
								case 5:
									F.line = 216;
									var assign_node_453431 = ast_node_452849;
									if (!(((assign_node_453431.targets != null ? assign_node_453431.targets.length : 0) == 1))) {
									F.line = 217;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(217, 18) `len(assignNode.targets) == 1` "));
									}
									
									if (!((assign_node_453431.targets[chckIndx(0, 0, assign_node_453431.targets.length+0-1)-0] === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(assign_node_453431.targets[chckIndx(0, 0, assign_node_453431.targets.length+0-1)-0]); } else { to_visit_per_ste_451935[0] = [assign_node_453431.targets[chckIndx(0, 0, assign_node_453431.targets.length+0-1)-0]]; };
									}
									
									if (!((assign_node_453431.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(assign_node_453431.value); } else { to_visit_per_ste_451935[0] = [assign_node_453431.value]; };
									}
									
									break;
								case 8:
									F.line = 222;
									var for_node_453636 = ast_node_452849;
									if (!((for_node_453636.target.kind == 22))) {
									F.line = 224;
									raiseException(new_syntax_error_156098(makeNimstrLit("only name as loop variable"), [], for_node_453636.target.lineno.value, for_node_453636.target.col_offset.value), "SyntaxError:ObjectType");
									}
									
									if (!((for_node_453636.target === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(for_node_453636.target); } else { to_visit_per_ste_451935[0] = [for_node_453636.target]; };
									}
									
									if (!((for_node_453636.iter === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(for_node_453636.iter); } else { to_visit_per_ste_451935[0] = [for_node_453636.iter]; };
									}
									
									L26: do {
										F.line = 159;
										var ast_node_453691 = null;
										F.line = 3909;
										var colontmp__456457 = null;
										F.line = 227;
										colontmp__456457 = for_node_453636.body;
										F.line = 3911;
										var i_456460 = 0;
										F.line = 3912;
										var l_456462 = (colontmp__456457 != null ? colontmp__456457.length : 0);
										L27: do {
											F.line = 3913;
												L28: while (true) {
												if (!(i_456460 < l_456462)) break L28;
													F.line = 3914;
													ast_node_453691 = colontmp__456457[chckIndx(i_456460, 0, colontmp__456457.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_453691); } else { to_visit_per_ste_451935[0] = [ast_node_453691]; };
													F.line = 3915;
													i_456460 = addInt(i_456460, 1);
													if (!(((colontmp__456457 != null ? colontmp__456457.length : 0) == l_456462))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									if (!(((for_node_453636.orelse != null ? for_node_453636.orelse.length : 0) == 0))) {
									F.line = 228;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(228, 18) `len(forNode.orelse) == 0` "));
									}
									
									break;
								case 10:
									F.line = 231;
									var while_node_453802 = ast_node_452849;
									if (!((while_node_453802.test === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(while_node_453802.test); } else { to_visit_per_ste_451935[0] = [while_node_453802.test]; };
									}
									
									L29: do {
										F.line = 159;
										var ast_node_453831 = null;
										F.line = 3909;
										var colontmp__456464 = null;
										F.line = 233;
										colontmp__456464 = while_node_453802.body;
										F.line = 3911;
										var i_456467 = 0;
										F.line = 3912;
										var l_456469 = (colontmp__456464 != null ? colontmp__456464.length : 0);
										L30: do {
											F.line = 3913;
												L31: while (true) {
												if (!(i_456467 < l_456469)) break L31;
													F.line = 3914;
													ast_node_453831 = colontmp__456464[chckIndx(i_456467, 0, colontmp__456464.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_453831); } else { to_visit_per_ste_451935[0] = [ast_node_453831]; };
													F.line = 3915;
													i_456467 = addInt(i_456467, 1);
													if (!(((colontmp__456464 != null ? colontmp__456464.length : 0) == l_456469))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									if (!(((while_node_453802.orelse != null ? while_node_453802.orelse.length : 0) == 0))) {
									F.line = 234;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(234, 18) `len(whileNode.orelse) == 0` "));
									}
									
									break;
								case 11:
									F.line = 237;
									var if_node_454002 = ast_node_452849;
									if (!((if_node_454002.test === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(if_node_454002.test); } else { to_visit_per_ste_451935[0] = [if_node_454002.test]; };
									}
									
									L32: do {
										F.line = 159;
										var ast_node_454031 = null;
										F.line = 3909;
										var colontmp__456471 = null;
										F.line = 239;
										colontmp__456471 = if_node_454002.body;
										F.line = 3911;
										var i_456474 = 0;
										F.line = 3912;
										var l_456476 = (colontmp__456471 != null ? colontmp__456471.length : 0);
										L33: do {
											F.line = 3913;
												L34: while (true) {
												if (!(i_456474 < l_456476)) break L34;
													F.line = 3914;
													ast_node_454031 = colontmp__456471[chckIndx(i_456474, 0, colontmp__456471.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454031); } else { to_visit_per_ste_451935[0] = [ast_node_454031]; };
													F.line = 3915;
													i_456474 = addInt(i_456474, 1);
													if (!(((colontmp__456471 != null ? colontmp__456471.length : 0) == l_456476))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L35: do {
										F.line = 159;
										var ast_node_454053 = null;
										F.line = 3909;
										var colontmp__456478 = null;
										F.line = 240;
										colontmp__456478 = if_node_454002.orelse;
										F.line = 3911;
										var i_456481 = 0;
										F.line = 3912;
										var l_456483 = (colontmp__456478 != null ? colontmp__456478.length : 0);
										L36: do {
											F.line = 3913;
												L37: while (true) {
												if (!(i_456481 < l_456483)) break L37;
													F.line = 3914;
													ast_node_454053 = colontmp__456478[chckIndx(i_456481, 0, colontmp__456478.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454053); } else { to_visit_per_ste_451935[0] = [ast_node_454053]; };
													F.line = 3915;
													i_456481 = addInt(i_456481, 1);
													if (!(((colontmp__456478 != null ? colontmp__456478.length : 0) == l_456483))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 14:
									F.line = 243;
									var raise_node_454065 = ast_node_452849;
									if (!((raise_node_454065.exc === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(raise_node_454065.exc); } else { to_visit_per_ste_451935[0] = [raise_node_454065.exc]; };
									}
									
									if (!((raise_node_454065.cause === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(raise_node_454065.cause); } else { to_visit_per_ste_451935[0] = [raise_node_454065.cause]; };
									}
									
									break;
								case 16:
									F.line = 248;
									var assert_node_454101 = ast_node_452849;
									F.line = 249;
									add_used_440542(ste_448464, new_py_string_176075(makeNimstrLit("AssertionError")));
									if (!((assert_node_454101.test === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(assert_node_454101.test); } else { to_visit_per_ste_451935[0] = [assert_node_454101.test]; };
									}
									
									if (!((assert_node_454101.msg === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(assert_node_454101.msg); } else { to_visit_per_ste_451935[0] = [assert_node_454101.msg]; };
									}
									
									break;
								case 15:
									F.line = 254;
									var try_node_454137 = ast_node_452849;
									L38: do {
										F.line = 159;
										var ast_node_454149 = null;
										F.line = 3909;
										var colontmp__456485 = null;
										F.line = 255;
										colontmp__456485 = try_node_454137.body;
										F.line = 3911;
										var i_456488 = 0;
										F.line = 3912;
										var l_456490 = (colontmp__456485 != null ? colontmp__456485.length : 0);
										L39: do {
											F.line = 3913;
												L40: while (true) {
												if (!(i_456488 < l_456490)) break L40;
													F.line = 3914;
													ast_node_454149 = colontmp__456485[chckIndx(i_456488, 0, colontmp__456485.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454149); } else { to_visit_per_ste_451935[0] = [ast_node_454149]; };
													F.line = 3915;
													i_456488 = addInt(i_456488, 1);
													if (!(((colontmp__456485 != null ? colontmp__456485.length : 0) == l_456490))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L41: do {
										F.line = 159;
										var ast_node_454171 = null;
										F.line = 3909;
										var colontmp__456492 = null;
										F.line = 256;
										colontmp__456492 = try_node_454137.handlers;
										F.line = 3911;
										var i_456495 = 0;
										F.line = 3912;
										var l_456497 = (colontmp__456492 != null ? colontmp__456492.length : 0);
										L42: do {
											F.line = 3913;
												L43: while (true) {
												if (!(i_456495 < l_456497)) break L43;
													F.line = 3914;
													ast_node_454171 = colontmp__456492[chckIndx(i_456495, 0, colontmp__456492.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454171); } else { to_visit_per_ste_451935[0] = [ast_node_454171]; };
													F.line = 3915;
													i_456495 = addInt(i_456495, 1);
													if (!(((colontmp__456492 != null ? colontmp__456492.length : 0) == l_456497))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L44: do {
										F.line = 159;
										var ast_node_454193 = null;
										F.line = 3909;
										var colontmp__456499 = null;
										F.line = 257;
										colontmp__456499 = try_node_454137.orelse;
										F.line = 3911;
										var i_456502 = 0;
										F.line = 3912;
										var l_456504 = (colontmp__456499 != null ? colontmp__456499.length : 0);
										L45: do {
											F.line = 3913;
												L46: while (true) {
												if (!(i_456502 < l_456504)) break L46;
													F.line = 3914;
													ast_node_454193 = colontmp__456499[chckIndx(i_456502, 0, colontmp__456499.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454193); } else { to_visit_per_ste_451935[0] = [ast_node_454193]; };
													F.line = 3915;
													i_456502 = addInt(i_456502, 1);
													if (!(((colontmp__456499 != null ? colontmp__456499.length : 0) == l_456504))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L47: do {
										F.line = 159;
										var ast_node_454215 = null;
										F.line = 3909;
										var colontmp__456506 = null;
										F.line = 258;
										colontmp__456506 = try_node_454137.finalbody;
										F.line = 3911;
										var i_456509 = 0;
										F.line = 3912;
										var l_456511 = (colontmp__456506 != null ? colontmp__456506.length : 0);
										L48: do {
											F.line = 3913;
												L49: while (true) {
												if (!(i_456509 < l_456511)) break L49;
													F.line = 3914;
													ast_node_454215 = colontmp__456506[chckIndx(i_456509, 0, colontmp__456506.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454215); } else { to_visit_per_ste_451935[0] = [ast_node_454215]; };
													F.line = 3915;
													i_456509 = addInt(i_456509, 1);
													if (!(((colontmp__456506 != null ? colontmp__456506.length : 0) == l_456511))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 17:
									if (!(((ast_node_452849.names != null ? ast_node_452849.names.length : 0) == 1))) {
									F.line = 261;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(261, 18) `len(AstImport(astNode).names) == 1` "));
									}
									
									F.line = 262;
									add_declaration_440524(ste_448464, ast_node_452849.names[chckIndx(0, 0, ast_node_452849.names.length+0-1)-0].name);
									break;
								case 21:
									if (!((ast_node_452849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_452849.value); } else { to_visit_per_ste_451935[0] = [ast_node_452849.value]; };
									}
									
									break;
								case 22:
								case 23:
								case 24:
									break;
								default: 
									F.line = 2895;
									var e_454433 = null;
									F.line = 2896;
									e_454433 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 270;
									e_454433.message = nimCopy(null, reprEnum(ast_node_452849.kind, NTI178567), NTI138);
									F.line = 2891;
									e_454433.parent = null;
									F.line = 270;
									raiseException(e_454433, "InternalError");
									break;
								}
								}
								else {
								if (isObj(ast_node_452849.m_type, NTI178731)) {
								F.line = 272;
								switch (ast_node_452849.kind) {
								case 0:
									L50: do {
										F.line = 159;
										var ast_node_454624 = null;
										F.line = 3909;
										var colontmp__456514 = null;
										F.line = 275;
										colontmp__456514 = ast_node_452849.values;
										F.line = 3911;
										var i_456517 = 0;
										F.line = 3912;
										var l_456519 = (colontmp__456514 != null ? colontmp__456514.length : 0);
										L51: do {
											F.line = 3913;
												L52: while (true) {
												if (!(i_456517 < l_456519)) break L52;
													F.line = 3914;
													ast_node_454624 = colontmp__456514[chckIndx(i_456517, 0, colontmp__456514.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454624); } else { to_visit_per_ste_451935[0] = [ast_node_454624]; };
													F.line = 3915;
													i_456517 = addInt(i_456517, 1);
													if (!(((colontmp__456514 != null ? colontmp__456514.length : 0) == l_456519))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 1:
									F.line = 278;
									var bin_op_node_454636 = ast_node_452849;
									if (!((bin_op_node_454636.left === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(bin_op_node_454636.left); } else { to_visit_per_ste_451935[0] = [bin_op_node_454636.left]; };
									}
									
									if (!((bin_op_node_454636.right === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(bin_op_node_454636.right); } else { to_visit_per_ste_451935[0] = [bin_op_node_454636.right]; };
									}
									
									break;
								case 2:
									if (!((ast_node_452849.operand === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_452849.operand); } else { to_visit_per_ste_451935[0] = [ast_node_452849.operand]; };
									}
									
									break;
								case 5:
									F.line = 286;
									var dict_node_454690 = ast_node_452849;
									L53: do {
										F.line = 159;
										var ast_node_454702 = null;
										F.line = 3909;
										var colontmp__456521 = null;
										F.line = 287;
										colontmp__456521 = dict_node_454690.keys;
										F.line = 3911;
										var i_456524 = 0;
										F.line = 3912;
										var l_456526 = (colontmp__456521 != null ? colontmp__456521.length : 0);
										L54: do {
											F.line = 3913;
												L55: while (true) {
												if (!(i_456524 < l_456526)) break L55;
													F.line = 3914;
													ast_node_454702 = colontmp__456521[chckIndx(i_456524, 0, colontmp__456521.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454702); } else { to_visit_per_ste_451935[0] = [ast_node_454702]; };
													F.line = 3915;
													i_456524 = addInt(i_456524, 1);
													if (!(((colontmp__456521 != null ? colontmp__456521.length : 0) == l_456526))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L56: do {
										F.line = 159;
										var ast_node_454724 = null;
										F.line = 3909;
										var colontmp__456528 = null;
										F.line = 288;
										colontmp__456528 = dict_node_454690.values;
										F.line = 3911;
										var i_456531 = 0;
										F.line = 3912;
										var l_456533 = (colontmp__456528 != null ? colontmp__456528.length : 0);
										L57: do {
											F.line = 3913;
												L58: while (true) {
												if (!(i_456531 < l_456533)) break L58;
													F.line = 3914;
													ast_node_454724 = colontmp__456528[chckIndx(i_456531, 0, colontmp__456528.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454724); } else { to_visit_per_ste_451935[0] = [ast_node_454724]; };
													F.line = 3915;
													i_456531 = addInt(i_456531, 1);
													if (!(((colontmp__456528 != null ? colontmp__456528.length : 0) == l_456533))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 6:
									F.line = 291;
									var set_node_454736 = ast_node_452849;
									L59: do {
										F.line = 159;
										var ast_node_454748 = null;
										F.line = 3909;
										var colontmp__456535 = null;
										F.line = 292;
										colontmp__456535 = set_node_454736.elts;
										F.line = 3911;
										var i_456538 = 0;
										F.line = 3912;
										var l_456540 = (colontmp__456535 != null ? colontmp__456535.length : 0);
										L60: do {
											F.line = 3913;
												L61: while (true) {
												if (!(i_456538 < l_456540)) break L61;
													F.line = 3914;
													ast_node_454748 = colontmp__456535[chckIndx(i_456538, 0, colontmp__456535.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454748); } else { to_visit_per_ste_451935[0] = [ast_node_454748]; };
													F.line = 3915;
													i_456538 = addInt(i_456538, 1);
													if (!(((colontmp__456535 != null ? colontmp__456535.length : 0) == l_456540))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 7:
									F.line = 296;
									if (to_visit_448402[0] != null) { to_visit_448402[0].push({Field0: ast_node_452849, Field1: ste_448464}); } else { to_visit_448402[0] = [{Field0: ast_node_452849, Field1: ste_448464}]; };
									F.line = 297;
									var comp_node_454771 = ast_node_452849;
									L62: do {
										F.line = 298;
										var gen_454780 = null;
										F.line = 3909;
										var colontmp__456542 = null;
										F.line = 298;
										colontmp__456542 = comp_node_454771.generators;
										F.line = 3911;
										var i_456545 = 0;
										F.line = 3912;
										var l_456547 = (colontmp__456542 != null ? colontmp__456542.length : 0);
										L63: do {
											F.line = 3913;
												L64: while (true) {
												if (!(i_456545 < l_456547)) break L64;
													F.line = 3914;
													gen_454780 = colontmp__456542[chckIndx(i_456545, 0, colontmp__456542.length+0-1)-0];
													F.line = 299;
													var gen_node_454781 = gen_454780;
													if (!((gen_node_454781.iter === null))) {
													F.line = 157;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(gen_node_454781.iter); } else { to_visit_per_ste_451935[0] = [gen_node_454781.iter]; };
													}
													
													F.line = 3915;
													i_456545 = addInt(i_456545, 1);
													if (!(((colontmp__456542 != null ? colontmp__456542.length : 0) == l_456547))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 14:
									F.line = 303;
									var compare_node_454800 = ast_node_452849;
									if (!((compare_node_454800.left === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(compare_node_454800.left); } else { to_visit_per_ste_451935[0] = [compare_node_454800.left]; };
									}
									
									L65: do {
										F.line = 159;
										var ast_node_454829 = null;
										F.line = 3909;
										var colontmp__456549 = null;
										F.line = 305;
										colontmp__456549 = compare_node_454800.comparators;
										F.line = 3911;
										var i_456552 = 0;
										F.line = 3912;
										var l_456554 = (colontmp__456549 != null ? colontmp__456549.length : 0);
										L66: do {
											F.line = 3913;
												L67: while (true) {
												if (!(i_456552 < l_456554)) break L67;
													F.line = 3914;
													ast_node_454829 = colontmp__456549[chckIndx(i_456552, 0, colontmp__456549.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454829); } else { to_visit_per_ste_451935[0] = [ast_node_454829]; };
													F.line = 3915;
													i_456552 = addInt(i_456552, 1);
													if (!(((colontmp__456549 != null ? colontmp__456549.length : 0) == l_456554))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 15:
									F.line = 308;
									var call_node_454841 = ast_node_452849;
									if (!((call_node_454841.fun === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(call_node_454841.fun); } else { to_visit_per_ste_451935[0] = [call_node_454841.fun]; };
									}
									
									L68: do {
										F.line = 159;
										var ast_node_454870 = null;
										F.line = 3909;
										var colontmp__456556 = null;
										F.line = 310;
										colontmp__456556 = call_node_454841.args;
										F.line = 3911;
										var i_456559 = 0;
										F.line = 3912;
										var l_456561 = (colontmp__456556 != null ? colontmp__456556.length : 0);
										L69: do {
											F.line = 3913;
												L70: while (true) {
												if (!(i_456559 < l_456561)) break L70;
													F.line = 3914;
													ast_node_454870 = colontmp__456556[chckIndx(i_456559, 0, colontmp__456556.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_454870); } else { to_visit_per_ste_451935[0] = [ast_node_454870]; };
													F.line = 3915;
													i_456559 = addInt(i_456559, 1);
													if (!(((colontmp__456556 != null ? colontmp__456556.length : 0) == l_456561))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									if (!(((call_node_454841.keywords != null ? call_node_454841.keywords.length : 0) == 0))) {
									F.line = 311;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(311, 18) `len(callNode.keywords) == 0` "));
									}
									
									break;
								case 19:
									if (!((ast_node_452849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_452849.value); } else { to_visit_per_ste_451935[0] = [ast_node_452849.value]; };
									}
									
									break;
								case 20:
									F.line = 317;
									var subs_node_455020 = ast_node_452849;
									if (!((subs_node_455020.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(subs_node_455020.value); } else { to_visit_per_ste_451935[0] = [subs_node_455020.value]; };
									}
									
									if (!((subs_node_455020.slice === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(subs_node_455020.slice); } else { to_visit_per_ste_451935[0] = [subs_node_455020.slice]; };
									}
									
									break;
								case 22:
									F.line = 322;
									var name_node_455056 = ast_node_452849;
									F.line = 323;
									switch (name_node_455056.ctx.kind) {
									case 1:
										F.line = 325;
										add_declaration_440524(ste_448464, name_node_455056.id);
										break;
									case 0:
										F.line = 327;
										add_used_440648(ste_448464, name_node_455056.id);
										break;
									default: 
										F.line = 2895;
										var e_455064 = null;
										F.line = 2896;
										e_455064 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 28;
										e_455064.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_455064.parent = null;
										F.line = 329;
										raiseException(e_455064, "InternalError");
										break;
									}
									break;
								case 23:
									F.line = 332;
									var list_node_455202 = ast_node_452849;
									F.line = 333;
									switch (list_node_455202.ctx.kind) {
									case 1:
									case 0:
										L71: do {
											F.line = 159;
											var ast_node_455216 = null;
											F.line = 3909;
											var colontmp__456563 = null;
											F.line = 335;
											colontmp__456563 = list_node_455202.elts;
											F.line = 3911;
											var i_456566 = 0;
											F.line = 3912;
											var l_456568 = (colontmp__456563 != null ? colontmp__456563.length : 0);
											L72: do {
												F.line = 3913;
													L73: while (true) {
													if (!(i_456566 < l_456568)) break L73;
														F.line = 3914;
														ast_node_455216 = colontmp__456563[chckIndx(i_456566, 0, colontmp__456563.length+0-1)-0];
														F.line = 160;
														if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_455216); } else { to_visit_per_ste_451935[0] = [ast_node_455216]; };
														F.line = 3915;
														i_456566 = addInt(i_456566, 1);
														if (!(((colontmp__456563 != null ? colontmp__456563.length : 0) == l_456568))) {
														F.line = 3916;
														failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
														}
														
													}
											} while(false);
										} while(false);
										break;
									default: 
										F.line = 2895;
										var e_455232 = null;
										F.line = 2896;
										e_455232 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 28;
										e_455232.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_455232.parent = null;
										F.line = 337;
										raiseException(e_455232, "InternalError");
										break;
									}
									break;
								case 24:
									F.line = 340;
									var tuple_node_455402 = ast_node_452849;
									F.line = 341;
									switch (tuple_node_455402.ctx.kind) {
									case 1:
									case 0:
										L74: do {
											F.line = 159;
											var ast_node_455416 = null;
											F.line = 3909;
											var colontmp__456570 = null;
											F.line = 343;
											colontmp__456570 = tuple_node_455402.elts;
											F.line = 3911;
											var i_456573 = 0;
											F.line = 3912;
											var l_456575 = (colontmp__456570 != null ? colontmp__456570.length : 0);
											L75: do {
												F.line = 3913;
													L76: while (true) {
													if (!(i_456573 < l_456575)) break L76;
														F.line = 3914;
														ast_node_455416 = colontmp__456570[chckIndx(i_456573, 0, colontmp__456570.length+0-1)-0];
														F.line = 160;
														if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_455416); } else { to_visit_per_ste_451935[0] = [ast_node_455416]; };
														F.line = 3915;
														i_456573 = addInt(i_456573, 1);
														if (!(((colontmp__456570 != null ? colontmp__456570.length : 0) == l_456575))) {
														F.line = 3916;
														failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
														}
														
													}
											} while(false);
										} while(false);
										break;
									default: 
										F.line = 2895;
										var e_455432 = null;
										F.line = 2896;
										e_455432 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 28;
										e_455432.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_455432.parent = null;
										F.line = 345;
										raiseException(e_455432, "InternalError");
										break;
									}
									break;
								case 18:
									break;
								default: 
									F.line = 2895;
									var e_455607 = null;
									F.line = 2896;
									e_455607 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 28;
									e_455607.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
									F.line = 2891;
									e_455607.parent = null;
									F.line = 351;
									raiseException(e_455607, "InternalError");
									break;
								}
								}
								else {
								if (isObj(ast_node_452849.m_type, NTI178739)) {
								F.line = 354;
								switch (ast_node_452849.kind) {
								case 0:
									F.line = 357;
									var slice_node_455813 = ast_node_452849;
									if (!((slice_node_455813.lower === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(slice_node_455813.lower); } else { to_visit_per_ste_451935[0] = [slice_node_455813.lower]; };
									}
									
									if (!((slice_node_455813.upper === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(slice_node_455813.upper); } else { to_visit_per_ste_451935[0] = [slice_node_455813.upper]; };
									}
									
									if (!((slice_node_455813.step === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(slice_node_455813.step); } else { to_visit_per_ste_451935[0] = [slice_node_455813.step]; };
									}
									
									break;
								case 1:
									F.line = 2895;
									var e_455871 = null;
									F.line = 2896;
									e_455871 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 28;
									e_455871.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
									F.line = 2891;
									e_455871.parent = null;
									F.line = 363;
									raiseException(e_455871, "InternalError");
									break;
								case 2:
									if (!((ast_node_452849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_452849.value); } else { to_visit_per_ste_451935[0] = [ast_node_452849.value]; };
									}
									
									break;
								}
								}
								else {
								if (isObj(ast_node_452849.m_type, NTI178757)) {
								F.line = 369;
								var excp_node_456030 = ast_node_452849;
								if (!((excp_node_456030.name === null))) {
								F.line = 370;
								failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(370, 16) `isNil(excpNode.name)` "));
								}
								
								L77: do {
									F.line = 159;
									var ast_node_456212 = null;
									F.line = 3909;
									var colontmp__456579 = null;
									F.line = 371;
									colontmp__456579 = excp_node_456030.body;
									F.line = 3911;
									var i_456582 = 0;
									F.line = 3912;
									var l_456584 = (colontmp__456579 != null ? colontmp__456579.length : 0);
									L78: do {
										F.line = 3913;
											L79: while (true) {
											if (!(i_456582 < l_456584)) break L79;
												F.line = 3914;
												ast_node_456212 = colontmp__456579[chckIndx(i_456582, 0, colontmp__456579.length+0-1)-0];
												F.line = 160;
												if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(ast_node_456212); } else { to_visit_per_ste_451935[0] = [ast_node_456212]; };
												F.line = 3915;
												i_456582 = addInt(i_456582, 1);
												if (!(((colontmp__456579 != null ? colontmp__456579.length : 0) == l_456584))) {
												F.line = 3916;
												failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
												}
												
											}
									} while(false);
								} while(false);
								if (!((excp_node_456030.type === null))) {
								F.line = 157;
								if (to_visit_per_ste_451935[0] != null) { to_visit_per_ste_451935[0].push(excp_node_456030.type); } else { to_visit_per_ste_451935[0] = [excp_node_456030.type]; };
								}
								
								}
								else {
									F.line = 2895;
									var e_456245 = null;
									F.line = 2896;
									e_456245 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 28;
									e_456245.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
									F.line = 2891;
									e_456245.parent = null;
									F.line = 374;
									raiseException(e_456245, "InternalError");
								}
								}}}
							}
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_433315(t_433322, key_433324) {
	var result_433326 = [null, 0];
	var result_433326_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_433328 = [0];
		F.line = 161;
		var index_434091 = raw_get_433330(t_433322, key_433324, hc_433328, 0);
		if ((0 <= index_434091)) {
		F.line = 162;
		result_433326 = t_433322.data[chckIndx(index_434091, 0, t_433322.data.length+0-1)-0]; result_433326_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_434406 = null;
			F.line = 2896;
			e_434406 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_434406.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_177554(key_433324)), NTI138);
			F.line = 2891;
			e_434406.parent = null;
			F.line = 165;
			raiseException(e_434406, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_433326, result_433326_Idx];

}

function get_ste_433078(st_433080, key_433081) {
		var Tmp1;

	var result_433082 = null;

	var F={procname:"symtable.getSte",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 71;
		result_433082 = (Tmp1 = HEX5BHEX5D_433315(st_433080.entries, key_433081), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_433082;

}

function raw_get_436055(t_436060, key_436062, hc_436064, hc_436064_Idx) {
						var Tmp3;

	var result_436065 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_436064[hc_436064_Idx] = hash_403040(key_436062);
		if ((hc_436064[hc_436064_Idx] == 0)) {
		F.line = 45;
		hc_436064[hc_436064_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_436075 = (hc_436064[hc_436064_Idx] & (t_436060.data != null ? (t_436060.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_436060.data[chckIndx(h_436075, 0, t_436060.data.length+0-1)-0].Field0)) break L2;
						if (!(t_436060.data[chckIndx(h_436075, 0, t_436060.data.length+0-1)-0].Field0 == hc_436064[hc_436064_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_403059(t_436060.data[chckIndx(h_436075, 0, t_436060.data.length+0-1)-0].Field1, key_436062);						}					if (Tmp3) {
					F.line = 38;
					result_436065 = h_436075;
					break BeforeRet;
					}
					
					F.line = 39;
					h_436075 = next_try_146614(h_436075, (t_436060.data != null ? (t_436060.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_436065 = subInt(-1, h_436075);
	} while (false);
	framePtr = F.prev;

	return result_436065;

}

function has_key_456748(t_456754, key_456756) {
	var result_456757 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_456758 = [0];
		F.line = 264;
		result_456757 = (0 <= raw_get_436055(t_456754, key_456756, hc_456758, 0));
	framePtr = F.prev;

	return result_456757;

}

function is_root_ste_434442(ste_434444) {
	var result_434445 = false;

	var F={procname:"symtable.isRootSte",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 74;
		result_434445 = (ste_434444.parent === null);
	framePtr = F.prev;

	return result_434445;

}

function raw_insert_458675(t_458682, data_458686, data_458686_Idx, key_458688, val_458690, hc_458692, h_458694) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_458686[data_458686_Idx][chckIndx(h_458694, 0, data_458686[data_458686_Idx].length+0-1)-0].Field1 = key_458688;
		F.line = 65;
		data_458686[data_458686_Idx][chckIndx(h_458694, 0, data_458686[data_458686_Idx].length+0-1)-0].Field2 = val_458690;
		F.line = 66;
		data_458686[data_458686_Idx][chckIndx(h_458694, 0, data_458686[data_458686_Idx].length+0-1)-0].Field0 = hc_458692;
	framePtr = F.prev;

	
}

function enlarge_457431(t_457438) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_457446 = null;
		F.line = 314;
		n_457446 = new Array(chckRange(mulInt((t_457438.data != null ? t_457438.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_457438.data != null ? t_457438.data.length : 0), 2), 0, 2147483647);++i) {n_457446[i]={Field0: 0, Field1: null, Field2: 0};}		F.line = 315;
		var Tmp1 = t_457438.data; t_457438.data = n_457446; n_457446 = Tmp1;		L2: do {
			F.line = 316;
			var i_457701 = 0;
			F.line = 2088;
			var colontmp__459416 = 0;
			F.line = 316;
			colontmp__459416 = (n_457446 != null ? (n_457446.length-1) : -1);
			F.line = 2094;
			var res_459419 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_459419 <= colontmp__459416)) break L4;
						F.line = 2096;
						i_457701 = res_459419;
						F.line = 317;
						var eh_457937 = n_457446[chckIndx(i_457701, 0, n_457446.length+0-1)-0].Field0;
						if (is_filled_146491(eh_457937)) {
						F.line = 319;
						var j_457946 = (eh_457937 & (t_457438.data != null ? (t_457438.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_457438.data[chckIndx(j_457946, 0, t_457438.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_457946 = next_try_146614(j_457946, (t_457438.data != null ? (t_457438.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_458675(t_457438, t_457438, "data", n_457446[chckIndx(i_457701, 0, n_457446.length+0-1)-0].Field1, n_457446[chckIndx(i_457701, 0, n_457446.length+0-1)-0].Field2, eh_457937, j_457946);
						}
						
						F.line = 2097;
						res_459419 = addInt(res_459419, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_459437(t_459442, key_459444, hc_459446) {
	var result_459447 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_459456 = (hc_459446 & (t_459442.data != null ? (t_459442.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_459442.data[chckIndx(h_459456, 0, t_459442.data.length+0-1)-0].Field0)) break L2;
					if (((t_459442.data[chckIndx(h_459456, 0, t_459442.data.length+0-1)-0].Field0 == hc_459446) && HEX3DHEX3D_403059(t_459442.data[chckIndx(h_459456, 0, t_459442.data.length+0-1)-0].Field1, key_459444))) {
					F.line = 38;
					result_459447 = h_459456;
					break BeforeRet;
					}
					
					F.line = 39;
					h_459456 = next_try_146614(h_459456, (t_459442.data != null ? (t_459442.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_459447 = subInt(-1, h_459456);
	} while (false);
	framePtr = F.prev;

	return result_459447;

}

function HEX5BHEX5DHEX3D_456932(t_456939, key_456941, val_456943) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_456944 = [0];
		F.line = 98;
		var index_456957 = raw_get_436055(t_456939, key_456941, hc_456944, 0);
		if ((0 <= index_456957)) {
		F.line = 99;
		t_456939.data[chckIndx(index_456957, 0, t_456939.data.length+0-1)-0].Field2 = val_456943;
		}
		else {
			if (must_rehash_146509((t_456939.data != null ? t_456939.data.length : 0), t_456939.counter)) {
			F.line = 90;
			enlarge_457431(t_456939);
			F.line = 91;
			index_456957 = raw_get_known_hc_459437(t_456939, key_456941, hc_456944[0]);
			}
			
			F.line = 92;
			index_456957 = subInt(-1, index_456957);
			F.line = 93;
			raw_insert_458675(t_456939, t_456939, "data", key_456941, val_456943, hc_456944[0], index_456957);
			F.line = 100;
			t_456939.counter = addInt(t_456939.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function contains_434668(s_434673, key_434675) {
	var result_434676 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_434696(s_434673))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_435001 = [0];
		F.line = 217;
		var index_435775 = raw_get_435021(s_434673, key_434675, hc_435001, 0);
		F.line = 218;
		result_434676 = (0 <= index_435775);
	framePtr = F.prev;

	return result_434676;

}

function declared_434466(ste_434468, local_name_434469) {
	var result_434470 = false;

	var F={procname:"symtable.declared",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_434470 = contains_434668(ste_434468.declaredVars, local_name_434469);
	framePtr = F.prev;

	return result_434470;

}

function HEX5BHEX5D_460424(s_460430, i_460432) {
	var result_460434 = [null, 0];
	var result_460434_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_460434 = s_460430; result_460434_Idx = chckIndx(subInt((s_460430 != null ? s_460430.length : 0), i_460432), 0, s_460430.length+0-1)-0;
	framePtr = F.prev;

	return [result_460434, result_460434_Idx];

}

function HEX5BHEX5D_460827(s_460834, x_460837) {
	var result_460839 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_461001 = x_460837.a;
		F.line = 3707;
		var l_461207 = addInt(subInt(subInt((s_460834 != null ? s_460834.length : 0), x_460837.b), a_461001), 1);
		F.line = 3708;
		result_460839 = new Array(chckRange(l_461207, 0, 2147483647)); for (var i=0;i<chckRange(l_461207, 0, 2147483647);++i) {result_460839[i]=null;}		L1: do {
			F.line = 3709;
			var i_461227 = 0;
			F.line = 3617;
			var i_461235 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_461235 < l_461207)) break L3;
						F.line = 3619;
						i_461227 = i_461235;
						F.line = 3709;
						result_460839[chckIndx(i_461227, 0, result_460839.length+0-1)-0] = s_460834[chckIndx(addInt(i_461227, a_461001), 0, s_460834.length+0-1)-0];
						F.line = 3620;
						i_461235 = addInt(i_461235, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_460839;

}

function determine_scope_456598(ste_456600, name_456601) {
					var Tmp3;
		var Tmp4;

	var F={procname:"symtable.determineScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (has_key_456748(ste_456600.scopes, name_456601)) {
		F.line = 378;
		break BeforeRet;
		}
		
		if (is_root_ste_434442(ste_456600)) {
		F.line = 380;
		HEX5BHEX5DHEX3D_456932(ste_456600.scopes, name_456601, 3);
		F.line = 381;
		break BeforeRet;
		}
		
		if (declared_434466(ste_456600, name_456601)) {
		F.line = 383;
		HEX5BHEX5DHEX3D_456932(ste_456600.scopes, name_456601, 0);
		F.line = 384;
		break BeforeRet;
		}
		
		F.line = 385;
		var traceback_460417 = [ste_456600, ste_456600.parent];
		F.line = 386;
		var scope_460418 = 0;
		L1: do {
			F.line = 387;
				L2: while (true) {
				if (!true) break L2;
					F.line = 388;
					var cur_ste_460456 = (Tmp3 = HEX5BHEX5D_460424(traceback_460417, 1), Tmp3[0])[Tmp3[1]];
					if (is_root_ste_434442(cur_ste_460456)) {
					F.line = 390;
					scope_460418 = 3;
					F.line = 391;
					break L1;
					}
					
					if (declared_434466(cur_ste_460456, name_456601)) {
					F.line = 393;
					scope_460418 = 1;
					F.line = 394;
					break L1;
					}
					
					F.line = 395;
					if (traceback_460417 != null) { traceback_460417.push(cur_ste_460456.parent); } else { traceback_460417 = [cur_ste_460456.parent]; };
				}
		} while(false);
		F.line = 396;
		HEX5BHEX5DHEX3D_456932((Tmp4 = HEX5BHEX5D_460424(traceback_460417, 1), Tmp4[0])[Tmp4[1]].scopes, name_456601, scope_460418);
		F.line = 397;
		switch (scope_460418) {
		case 1:
			F.line = 399;
			scope_460418 = 2;
			break;
		case 3:
			break;
		default: 
			F.line = 2895;
			var e_460651 = null;
			F.line = 2896;
			e_460651 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_460651.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_460651.parent = null;
			F.line = 403;
			raiseException(e_460651, "InternalError");
			break;
		}
		L5: do {
			F.line = 404;
			var cur_ste_461415 = null;
			F.line = 3909;
			var colontmp__461580 = null;
			F.line = 404;
			colontmp__461580 = HEX5BHEX5D_460827(traceback_460417, HEX2EHEX2E_81053(0, 2));
			F.line = 3911;
			var i_461583 = 0;
			F.line = 3912;
			var l_461585 = (colontmp__461580 != null ? colontmp__461580.length : 0);
			L6: do {
				F.line = 3913;
					L7: while (true) {
					if (!(i_461583 < l_461585)) break L7;
						F.line = 3914;
						cur_ste_461415 = colontmp__461580[chckIndx(i_461583, 0, colontmp__461580.length+0-1)-0];
						F.line = 405;
						HEX5BHEX5DHEX3D_456932(cur_ste_461415.scopes, name_456601, scope_460418);
						F.line = 3915;
						i_461583 = addInt(i_461583, 1);
						if (!(((colontmp__461580 != null ? colontmp__461580.length : 0) == l_461585))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function len_442683(t_442689) {
	var result_442690 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 154;
		result_442690 = t_442689.counter;
	framePtr = F.prev;

	return result_442690;

}

function determine_scope_461599(ste_461601) {
	var F={procname:"symtable.determineScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 409;
			var child_461610 = null;
			F.line = 3909;
			var colontmp__463472 = null;
			F.line = 409;
			colontmp__463472 = ste_461601.children;
			F.line = 3911;
			var i_463475 = 0;
			F.line = 3912;
			var l_463477 = (colontmp__463472 != null ? colontmp__463472.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_463475 < l_463477)) break L3;
						F.line = 3914;
						child_461610 = colontmp__463472[chckIndx(i_463475, 0, colontmp__463472.length+0-1)-0];
						F.line = 410;
						determine_scope_461599(child_461610);
						F.line = 3915;
						i_463475 = addInt(i_463475, 1);
						if (!(((colontmp__463472 != null ? colontmp__463472.length : 0) == l_463477))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 411;
			var name_462312 = null;
			F.line = 100;
			var colontmp__463479 = {data: null, counter: 0};
			F.line = 411;
			nimCopy(colontmp__463479, ste_461601.usedVars, NTI432211);
			if (!(is_valid_434696(colontmp__463479))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L5: do {
				F.line = 120;
				var h_463483 = 0;
				F.line = 2104;
				var colontmp__463485 = 0;
				F.line = 120;
				colontmp__463485 = (colontmp__463479.data != null ? (colontmp__463479.data.length-1) : -1);
				F.line = 2107;
				var res_463487 = 0;
				L6: do {
					F.line = 2108;
						L7: while (true) {
						if (!(res_463487 <= colontmp__463485)) break L7;
							F.line = 2109;
							h_463483 = res_463487;
							if (is_filled_154282(colontmp__463479.data[chckIndx(h_463483, 0, colontmp__463479.data.length+0-1)-0].Field0)) {
							F.line = 121;
							name_462312 = colontmp__463479.data[chckIndx(h_463483, 0, colontmp__463479.data.length+0-1)-0].Field1;
							F.line = 412;
							determine_scope_456598(ste_461601, name_462312);
							}
							
							F.line = 2110;
							res_463487 = addInt(res_463487, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		L8: do {
			F.line = 414;
			var name_462320 = null;
			F.line = 100;
			var colontmp__463491 = {data: null, counter: 0};
			F.line = 414;
			nimCopy(colontmp__463491, ste_461601.declaredVars, NTI432211);
			if (!(is_valid_434696(colontmp__463491))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L9: do {
				F.line = 120;
				var h_463495 = 0;
				F.line = 2104;
				var colontmp__463497 = 0;
				F.line = 120;
				colontmp__463497 = (colontmp__463491.data != null ? (colontmp__463491.data.length-1) : -1);
				F.line = 2107;
				var res_463499 = 0;
				L10: do {
					F.line = 2108;
						L11: while (true) {
						if (!(res_463499 <= colontmp__463497)) break L11;
							F.line = 2109;
							h_463495 = res_463499;
							if (is_filled_154282(colontmp__463491.data[chckIndx(h_463495, 0, colontmp__463491.data.length+0-1)-0].Field0)) {
							F.line = 121;
							name_462320 = colontmp__463491.data[chckIndx(h_463495, 0, colontmp__463491.data.length+0-1)-0].Field1;
							F.line = 415;
							determine_scope_456598(ste_461601, name_462320);
							}
							
							F.line = 2110;
							res_463499 = addInt(res_463499, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		L12: do {
			F.line = 417;
			var name_463077 = null;
			F.line = 417;
			var scope_463078 = 0;
			F.line = 270;
			var colontmp__463503 = {data: null, counter: 0};
			F.line = 417;
			nimCopy(colontmp__463503, ste_461601.scopes, NTI432242);
			L13: do {
				F.line = 272;
				var h_463507 = 0;
				F.line = 2104;
				var colontmp__463509 = 0;
				F.line = 272;
				colontmp__463509 = (colontmp__463503.data != null ? (colontmp__463503.data.length-1) : -1);
				F.line = 2107;
				var res_463511 = 0;
				L14: do {
					F.line = 2108;
						L15: while (true) {
						if (!(res_463511 <= colontmp__463509)) break L15;
							F.line = 2109;
							h_463507 = res_463511;
							if (is_filled_146491(colontmp__463503.data[chckIndx(h_463507, 0, colontmp__463503.data.length+0-1)-0].Field0)) {
							F.line = 273;
							name_463077 = colontmp__463503.data[chckIndx(h_463507, 0, colontmp__463503.data.length+0-1)-0].Field1;
							F.line = 273;
							scope_463078 = colontmp__463503.data[chckIndx(h_463507, 0, colontmp__463503.data.length+0-1)-0].Field2;
							F.line = 418;
							var d_463087 = null;
							F.line = 419;
							switch (scope_463078) {
							case 0:
								F.line = 421;
								d_463087 = ste_461601.localVars;
								break;
							case 3:
								F.line = 423;
								d_463087 = ste_461601.names;
								break;
							case 1:
								F.line = 425;
								d_463087 = ste_461601.cellVars;
								break;
							case 2:
								F.line = 427;
								d_463087 = ste_461601.freeVars;
								break;
							}
							F.line = 428;
							HEX5BHEX5DHEX3D_442850(d_463087, name_463077, len_442683(d_463087));
							}
							
							F.line = 2110;
							res_463511 = addInt(res_463511, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function determine_scope_463527(st_463529) {
	var F={procname:"symtable.determineScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 431;
		determine_scope_461599(st_463529.root);
	framePtr = F.prev;

	
}

function new_sym_table_463543(ast_root_463545) {
	var result_463546 = null;

	var F={procname:"symtable.newSymTable",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 434;
		result_463546 = {entries: {data: null, counter: 0}, root: null};
		F.line = 435;
		nimCopy(result_463546.entries, init_table_463558(64), NTI432152);
		F.line = 438;
		collect_declaration_448396(result_463546, ast_root_463545);
		F.line = 439;
		result_463546.root = get_ste_433078(result_463546, ast_root_463545);
		F.line = 441;
		determine_scope_463527(result_463546);
	framePtr = F.prev;

	return result_463546;

}

function new_499445() {
	var result_499450 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_499601 = null;
		F.line = 211;
		r_499601 = {ste: null, blocks: null, constants: null, codeName: null};
		F.line = 212;
		result_499450 = r_499601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_499450;

}

function new_499245() {
	var result_499250 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_499401 = null;
		F.line = 211;
		r_499401 = {instrSeq: null, tp: 0, next: null, seenReturn: false, offset: 0};
		F.line = 212;
		result_499250 = r_499401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_499250;

}

function new_basic_block_499238(tp_499241) {
	var result_499242 = null;

	var F={procname:"compile.newBasicBlock",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 82;
		result_499242 = new_499245();
		F.line = 83;
		result_499242.seenReturn = false;
		F.line = 84;
		result_499242.tp = tp_499241;
	framePtr = F.prev;

	return result_499242;

}

function new_compiler_unit_499437(st_499439, node_499440, code_name_499441) {
	var result_499442 = null;

	var F={procname:"compile.newCompilerUnit",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 89;
		result_499442 = new_499445();
		F.line = 90;
		result_499442.ste = get_ste_433078(st_499439, node_499440);
		F.line = 91;
		if (result_499442.blocks != null) { result_499442.blocks.push(new_basic_block_499238(0)); } else { result_499442.blocks = [new_basic_block_499238(0)]; };
		F.line = 92;
		result_499442.codeName = code_name_499441;
	framePtr = F.prev;

	return result_499442;

}

function new_compiler_499647(root_499649, file_name_499650) {
	var result_499651 = null;

	var F={procname:"compile.newCompiler",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 96;
		result_499651 = new_499654();
		F.line = 97;
		result_499651.st = new_sym_table_463543(root_499649);
		F.line = 98;
		if (result_499651.units != null) { result_499651.units.push(new_compiler_unit_499437(result_499651.st, root_499649, new_py_str_176092(makeNimstrLit("<module>")))); } else { result_499651.units = [new_compiler_unit_499437(result_499651.st, root_499649, new_py_str_176092(makeNimstrLit("<module>")))]; };
		F.line = 99;
		result_499651.fileName = file_name_499650;
	framePtr = F.prev;

	return result_499651;

}

function len_500130(cb_500132) {
	var result_500133 = 0;

	var F={procname:"compile.len",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 137;
		result_500133 = (cb_500132.instrSeq != null ? cb_500132.instrSeq.length : 0);
	framePtr = F.prev;

	return result_500133;

}

function HEX5BHEX5D_500067(s_500073, i_500075) {
	var result_500077 = [null, 0];
	var result_500077_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_500077 = s_500073; result_500077_Idx = chckIndx(subInt((s_500073 != null ? s_500073.length : 0), i_500075), 0, s_500073.length+0-1)-0;
	framePtr = F.prev;

	return [result_500077, result_500077_Idx];

}

function tcb_500058(cu_500060) {
		var Tmp1;

	var result_500061 = null;

	var F={procname:"compile.tcb",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 131;
		result_500061 = (Tmp1 = HEX5BHEX5D_500067(cu_500060.blocks, 1), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_500061;

}

function find_499898(a_499903, item_499905) {
	var result_499906 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_499915 = null;
			F.line = 3911;
			var i_499939 = 0;
			F.line = 3912;
			var l_499941 = (a_499903 != null ? a_499903.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_499939 < l_499941)) break L3;
						F.line = 3914;
						i_499915 = a_499903[chckIndx(i_499939, 0, a_499903.length+0-1)-0];
						if ((i_499915 == item_499905)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_499906 = addInt(result_499906, 1);
						F.line = 3915;
						i_499939 = addInt(i_499939, 1);
						if (!(((a_499903 != null ? a_499903.length : 0) == l_499941))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_499906 = -1;
	} while (false);
	framePtr = F.prev;

	return result_499906;

}

function constant_id_499892(cu_499894, py_object_499895) {
	var result_499896 = 0;

	var F={procname:"compile.constantId",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 112;
		result_499896 = find_499898(cu_499894.constants, py_object_499895);
		if (!((result_499896 == -1))) {
		F.line = 114;
		break BeforeRet;
		}
		
		F.line = 115;
		result_499896 = (cu_499894.constants != null ? cu_499894.constants.length : 0);
		F.line = 116;
		if (cu_499894.constants != null) { cu_499894.constants.push(py_object_499895); } else { cu_499894.constants = [py_object_499895]; };
	} while (false);
	framePtr = F.prev;

	return result_499896;

}

function new_498603() {
	var result_498608 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_498801 = null;
		F.line = 211;
		r_498801 = {m_type: NTI498045, opArg: 0, opCode: 0, lineNo: 0};
		F.line = 212;
		result_498608 = r_498801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_498608;

}

function new_arg_instr_498437(op_code_498439, op_arg_498440, line_no_498441) {
	var result_498442 = null;

	var F={procname:"compile.newArgInstr",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!((ConstSet21[op_code_498439] != undefined))) {
		F.line = 67;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(67, 10) `contains({OpCode.STORE_NAME, OpCode.DELETE_NAME, OpCode.UNPACK_SEQUENCE,\x0A          OpCode.FOR_ITER, OpCode.UNPACK_EX, OpCode.STORE_ATTR, OpCode.DELETE_ATTR,\x0A          OpCode.STORE_GLOBAL, OpCode.DELETE_GLOBAL, OpCode.LOAD_CONST,\x0A          OpCode.LOAD_NAME, OpCode.BUILD_TUPLE, OpCode.BUILD_LIST,\x0A          OpCode.BUILD_SET, OpCode.BUILD_MAP, OpCode.LOAD_ATTR, OpCode.COMPARE_OP,\x0A          OpCode.IMPORT_NAME, OpCode.IMPORT_FROM, OpCode.JUMP_FORWARD,\x0A          OpCode.JUMP_IF_FALSE_OR_POP, OpCode.JUMP_IF_TRUE_OR_POP,\x0A          OpCode.JUMP_ABSOLUTE, OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE,\x0A          OpCode.LOAD_GLOBAL, OpCode.SETUP_FINALLY, OpCode.LOAD_FAST,\x0A          OpCode.STORE_FAST, OpCode.DELETE_FAST, OpCode.RAISE_VARARGS,\x0A          OpCode.CALL_FUNCTION, OpCode.MAKE_FUNCTION, OpCode.BUILD_SLICE,\x0A          OpCode.LOAD_CLOSURE, OpCode.LOAD_DEREF, OpCode.STORE_DEREF,\x0A          OpCode.DELETE_DEREF, OpCode.CALL_FUNCTION_KW, OpCode.CALL_FUNCTION_EX,\x0A          OpCode.SETUP_WITH, OpCode.EXTENDED_ARG, OpCode.LIST_APPEND,\x0A          OpCode.SET_ADD, OpCode.MAP_ADD, OpCode.LOAD_CLASSDEREF,\x0A          OpCode.BUILD_LIST_UNPACK, OpCode.BUILD_MAP_UNPACK,\x0A          OpCode.BUILD_MAP_UNPACK_WITH_CALL, OpCode.BUILD_TUPLE_UNPACK,\x0A          OpCode.BUILD_SET_UNPACK, OpCode.SETUP_ASYNC_WITH, OpCode.FORMAT_VALUE,\x0A          OpCode.BUILD_CONST_KEY_MAP, OpCode.BUILD_STRING,\x0A          OpCode.BUILD_TUPLE_UNPACK_WITH_CALL, OpCode.LOAD_METHOD,\x0A          OpCode.CALL_METHOD, OpCode.CALL_FINALLY, OpCode.POP_FINALLY,\x0A          OpCode.EXCEPT_HANDLER}, opCode)` "));
		}
		
		F.line = 68;
		result_498442 = new_498603();
		F.line = 69;
		result_498442.opCode = op_code_498439;
		F.line = 70;
		result_498442.opArg = op_arg_498440;
		F.line = 71;
		result_498442.lineNo = line_no_498441;
	framePtr = F.prev;

	return result_498442;

}

function add_op_500445(cu_500447, instr_500448) {
		var Tmp1;

	var F={procname:"compile.addOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 156;
		if ((Tmp1 = HEX5BHEX5D_500067(cu_500447.blocks, 1), Tmp1[0])[Tmp1[1]].instrSeq != null) { (Tmp1 = HEX5BHEX5D_500067(cu_500447.blocks, 1), Tmp1[0])[Tmp1[1]].instrSeq.push(instr_500448); } else { (Tmp1 = HEX5BHEX5D_500067(cu_500447.blocks, 1), Tmp1[0])[Tmp1[1]].instrSeq = [instr_500448]; };
	framePtr = F.prev;

	
}

function add_load_const_500641(cu_500643, py_object_500644, line_no_500645) {
	var F={procname:"compile.addLoadConst",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 172;
		var arg_500646 = constant_id_499892(cu_500643, py_object_500644);
		F.line = 173;
		var instr_500648 = new_arg_instr_498437(71, arg_500646, line_no_500645);
		F.line = 174;
		add_op_500445(cu_500643, instr_500648);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_500212(s_500218, i_500220) {
	var result_500222 = [null, 0];
	var result_500222_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_500222 = s_500218; result_500222_Idx = chckIndx(subInt((s_500218 != null ? s_500218.length : 0), i_500220), 0, s_500218.length+0-1)-0;
	framePtr = F.prev;

	return [result_500222, result_500222_Idx];

}

function last_line_no_500154(cu_500156) {
							var Tmp5;
								var Tmp6;
								var Tmp7;

	var result_500157 = 0;

	var F={procname:"compile.lastLineNo",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 141;
			var i_500176 = 0;
			F.line = 2104;
			var colontmp__500249 = 0;
			F.line = 141;
			colontmp__500249 = (cu_500156.blocks != null ? cu_500156.blocks.length : 0);
			F.line = 2107;
			var res_500252 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_500252 <= colontmp__500249)) break L3;
						F.line = 2109;
						i_500176 = res_500252;
						L4: do {
							F.line = 142;
							switch (len_500130((Tmp5 = HEX5BHEX5D_500067(cu_500156.blocks, i_500176), Tmp5[0])[Tmp5[1]])) {
							case 0:
								F.line = 144;
								break L4;
								break;
							default: 
								F.line = 146;
								result_500157 = (Tmp7 = HEX5BHEX5D_500212((Tmp6 = HEX5BHEX5D_500067(cu_500156.blocks, i_500176), Tmp6[0])[Tmp6[1]].instrSeq, 1), Tmp7[0])[Tmp7[1]].lineNo;
								break BeforeRet;
								break;
							}
						} while(false);
						F.line = 2110;
						res_500252 = addInt(res_500252, 1);
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_500157;

}

function new_498203() {
	var result_498208 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_498401 = null;
		F.line = 211;
		r_498401 = {m_type: NTI498041, opCode: 0, lineNo: 0};
		F.line = 212;
		result_498208 = r_498401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_498208;

}

function new_instr_498133(op_code_498135, line_no_498136) {
	var result_498137 = null;

	var F={procname:"compile.newInstr",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(!((ConstSet22[op_code_498135] != undefined)))) {
		F.line = 61;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(61, 9) `not contains({OpCode.STORE_NAME, OpCode.DELETE_NAME, OpCode.UNPACK_SEQUENCE,\x0A             OpCode.FOR_ITER, OpCode.UNPACK_EX, OpCode.STORE_ATTR,\x0A             OpCode.DELETE_ATTR, OpCode.STORE_GLOBAL, OpCode.DELETE_GLOBAL,\x0A             OpCode.LOAD_CONST, OpCode.LOAD_NAME, OpCode.BUILD_TUPLE,\x0A             OpCode.BUILD_LIST, OpCode.BUILD_SET, OpCode.BUILD_MAP,\x0A             OpCode.LOAD_ATTR, OpCode.COMPARE_OP, OpCode.IMPORT_NAME,\x0A             OpCode.IMPORT_FROM, OpCode.JUMP_FORWARD, OpCode.JUMP_IF_FALSE_OR_POP,\x0A             OpCode.JUMP_IF_TRUE_OR_POP, OpCode.JUMP_ABSOLUTE,\x0A             OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE,\x0A             OpCode.LOAD_GLOBAL, OpCode.SETUP_FINALLY, OpCode.LOAD_FAST,\x0A             OpCode.STORE_FAST, OpCode.DELETE_FAST, OpCode.RAISE_VARARGS,\x0A             OpCode.CALL_FUNCTION, OpCode.MAKE_FUNCTION, OpCode.BUILD_SLICE,\x0A             OpCode.LOAD_CLOSURE, OpCode.LOAD_DEREF, OpCode.STORE_DEREF,\x0A             OpCode.DELETE_DEREF, OpCode.CALL_FUNCTION_KW,\x0A             OpCode.CALL_FUNCTION_EX, OpCode.SETUP_WITH, OpCode.EXTENDED_ARG,\x0A             OpCode.LIST_APPEND, OpCode.SET_ADD, OpCode.MAP_ADD,\x0A             OpCode.LOAD_CLASSDEREF, OpCode.BUILD_LIST_UNPACK,\x0A             OpCode.BUILD_MAP_UNPACK, OpCode.BUILD_MAP_UNPACK_WITH_CALL,\x0A             OpCode.BUILD_TUPLE_UNPACK, OpCode.BUILD_SET_UNPACK,\x0A             OpCode.SETUP_ASYNC_WITH, OpCode.FORMAT_VALUE,\x0A             OpCode.BUILD_CONST_KEY_MAP, OpCode.BUILD_STRING,\x0A             OpCode.BUILD_TUPLE_UNPACK_WITH_CALL, OpCode.LOAD_METHOD,\x0A             OpCode.CALL_METHOD, OpCode.CALL_FINALLY, OpCode.POP_FINALLY,\x0A             OpCode.EXCEPT_HANDLER}, opCode)` "));
		}
		
		F.line = 62;
		result_498137 = new_498203();
		F.line = 63;
		result_498137.opCode = op_code_498135;
		F.line = 64;
		result_498137.lineNo = line_no_498136;
	framePtr = F.prev;

	return result_498137;

}

function new_py_code_493257(code_name_493259, file_name_493260, length_493261) {
	var result_493262 = null;

	var F={procname:"codeobject.newPyCode",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 36;
		result_493262 = new_py_code_simple_492401();
		F.line = 45;
		result_493262.codeName = code_name_493259;
		F.line = 46;
		result_493262.fileName = file_name_493260;
	framePtr = F.prev;

	return result_493262;

}

function num_codes_500286(cu_500288) {
	var result_500289 = 0;

	var F={procname:"compile.numCodes",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 152;
			var b_500415 = null;
			F.line = 3909;
			var colontmp__500426 = null;
			F.line = 152;
			colontmp__500426 = cu_500288.blocks;
			F.line = 3911;
			var i_500429 = 0;
			F.line = 3912;
			var l_500431 = (colontmp__500426 != null ? colontmp__500426.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_500429 < l_500431)) break L3;
						F.line = 3914;
						b_500415 = colontmp__500426[chckIndx(i_500429, 0, colontmp__500426.length+0-1)-0];
						F.line = 153;
						result_500289 = addInt(result_500289, len_500130(b_500415));
						F.line = 3915;
						i_500429 = addInt(i_500429, 1);
						if (!(((colontmp__500426 != null ? colontmp__500426.length : 0) == l_500431))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_500289;

}

function len_493414(code_493416) {
	var result_493417 = 0;

	var F={procname:"codeobject.len",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 49;
		result_493417 = (code_493416.code != null ? code_493416.code.length : 0);
	framePtr = F.prev;

	return result_493417;

}

function add_op_code_493490(code_493492, instr_493497) {
	var F={procname:"codeobject.addOpCode",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 65;
		addInt(code_493492.opCodes, mulInt(len_493414(code_493492), 1))[0] = instr_493497.Field0;
		F.line = 66;
		addInt(code_493492.opArgs, mulInt(len_493414(code_493492), 4))[0] = instr_493497.Field1;
		F.line = 67;
		if (code_493492.code != null) { code_493492.code.push({Field0: instr_493497.Field0, Field1: instr_493497.Field1}); } else { code_493492.code = [{Field0: instr_493497.Field0, Field1: instr_493497.Field1}]; };
		F.line = 68;
		var Tmp1 = nimCopy(null, instr_493497.Field2, NTI104);
		if (code_493492.lineNos != null) { code_493492.lineNos.push(Tmp1); } else { code_493492.lineNos = [Tmp1]; };
	framePtr = F.prev;

	
}

function new_seq_447278(len_447282) {
	var result_447284 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_447284 = new Array(len_447282); for (var i=0;i<len_447282;++i) {result_447284[i]=null;}	framePtr = F.prev;

	return result_447284;

}

function to_inverse_seq_447262(t_447271) {
	var result_447273 = null;

	var F={procname:"symtable.toInverseSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 121;
		result_447273 = nimCopy(null, new_seq_447278(chckRange(len_442683(t_447271), 0, 2147483647)), NTI447283);
		L1: do {
			F.line = 122;
			var name_448298 = null;
			F.line = 122;
			var id_448299 = 0;
			L2: do {
				F.line = 272;
				var h_448304 = 0;
				F.line = 2104;
				var colontmp__448306 = 0;
				F.line = 272;
				colontmp__448306 = (t_447271.data != null ? (t_447271.data.length-1) : -1);
				F.line = 2107;
				var res_448308 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_448308 <= colontmp__448306)) break L4;
							F.line = 2109;
							h_448304 = res_448308;
							if (is_filled_146491(t_447271.data[chckIndx(h_448304, 0, t_447271.data.length+0-1)-0].Field0)) {
							F.line = 273;
							name_448298 = t_447271.data[chckIndx(h_448304, 0, t_447271.data.length+0-1)-0].Field1;
							F.line = 273;
							id_448299 = t_447271.data[chckIndx(h_448304, 0, t_447271.data.length+0-1)-0].Field2;
							F.line = 123;
							result_447273[chckIndx(id_448299, 0, result_447273.length+0-1)-0] = name_448298;
							}
							
							F.line = 2110;
							res_448308 = addInt(res_448308, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_447273;

}

function names_to_seq_448324(ste_448326) {
	var result_448328 = null;

	var F={procname:"symtable.namesToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 126;
		result_448328 = nimCopy(null, to_inverse_seq_447262(ste_448326.names), NTI447272);
	framePtr = F.prev;

	return result_448328;

}

function local_vars_to_seq_448342(ste_448344) {
	var result_448346 = null;

	var F={procname:"symtable.localVarsToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 129;
		result_448346 = nimCopy(null, to_inverse_seq_447262(ste_448344.localVars), NTI447272);
	framePtr = F.prev;

	return result_448346;

}

function cell_vars_to_seq_448360(ste_448362) {
	var result_448364 = null;

	var F={procname:"symtable.cellVarsToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 132;
		result_448364 = nimCopy(null, to_inverse_seq_447262(ste_448362.cellVars), NTI447272);
	framePtr = F.prev;

	return result_448364;

}

function free_vars_to_seq_448378(ste_448380) {
	var result_448382 = null;

	var F={procname:"symtable.freeVarsToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 135;
		result_448382 = nimCopy(null, to_inverse_seq_447262(ste_448380.freeVars), NTI447272);
	framePtr = F.prev;

	return result_448382;

}

function new_seq_501257(len_501261) {
	var result_501263 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_501263 = new Array(len_501261); for (var i=0;i<len_501261;++i) {result_501263[i]={Field0: 0, Field1: 0};}	framePtr = F.prev;

	return result_501263;

}

function HEX5BHEX5D_436040(t_436047, key_436049) {
	var result_436051 = [null, 0];
	var result_436051_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_436053 = [0];
		F.line = 161;
		var index_436806 = raw_get_436055(t_436047, key_436049, hc_436053, 0);
		if ((0 <= index_436806)) {
		F.line = 162;
		result_436051 = t_436047.data[chckIndx(index_436806, 0, t_436047.data.length+0-1)-0]; result_436051_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_437206 = null;
			F.line = 2896;
			e_437206 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_437206.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_157579(key_436049)), NTI138);
			F.line = 2891;
			e_437206.parent = null;
			F.line = 165;
			raiseException(e_437206, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_436051, result_436051_Idx];

}

function get_scope_435803(ste_435805, name_435806) {
		var Tmp1;

	var result_435807 = 0;

	var F={procname:"symtable.getScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 80;
		result_435807 = (Tmp1 = HEX5BHEX5D_436040(ste_435805.scopes, name_435806), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_435807;

}

function HEX5BHEX5D_440903(t_440910, key_440912) {
	var result_440914 = [null, 0];
	var result_440914_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_440916 = [0];
		F.line = 161;
		var index_441669 = raw_get_440918(t_440910, key_440912, hc_440916, 0);
		if ((0 <= index_441669)) {
		F.line = 162;
		result_440914 = t_440910.data[chckIndx(index_441669, 0, t_440910.data.length+0-1)-0]; result_440914_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_442006 = null;
			F.line = 2896;
			e_442006 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_442006.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_157579(key_440912)), NTI138);
			F.line = 2891;
			e_442006.parent = null;
			F.line = 165;
			raiseException(e_442006, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_440914, result_440914_Idx];

}

function local_id_440666(ste_440668, local_name_440669) {
		var Tmp1;

	var result_440670 = 0;

	var F={procname:"symtable.localId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 97;
		result_440670 = (Tmp1 = HEX5BHEX5D_440903(ste_440668.localVars, local_name_440669), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_440670;

}

function has_key_442193(t_442199, key_442201) {
	var result_442202 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_442203 = [0];
		F.line = 264;
		result_442202 = (0 <= raw_get_440918(t_442199, key_442201, hc_442203, 0));
	framePtr = F.prev;

	return result_442202;

}

function name_id_442042(ste_442044, name_str_442045) {
		var Tmp1;

	var result_442046 = 0;

	var F={procname:"symtable.nameId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (has_key_442193(ste_442044.names, name_str_442045)) {
		F.line = 102;
		result_442046 = (Tmp1 = HEX5BHEX5D_440903(ste_442044.names, name_str_442045), Tmp1[0])[Tmp1[1]];
		break BeforeRet;
		}
		else {
			F.line = 104;
			result_442046 = len_442683(ste_442044.names);
			F.line = 105;
			HEX5BHEX5DHEX3D_442850(ste_442044.names, name_str_442045, result_442046);
		}
		
	} while (false);
	framePtr = F.prev;

	return result_442046;

}

function cell_id_446176(ste_446178, name_str_446179) {
		var Tmp1;

	var result_446180 = 0;

	var F={procname:"symtable.cellId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 108;
		result_446180 = (Tmp1 = HEX5BHEX5D_440903(ste_446178.cellVars, name_str_446179), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_446180;

}

function assemble_500778(cu_500780, file_name_500781) {
	var result_500782 = null;

	var F={procname:"compile.assemble",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 243;
			var i_500800 = 0;
			F.line = 3616;
			var colontmp__501603 = 0;
			F.line = 243;
			colontmp__501603 = subInt((cu_500780.blocks != null ? cu_500780.blocks.length : 0), 1);
			F.line = 3617;
			var i_501606 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_501606 < colontmp__501603)) break L3;
						F.line = 3619;
						i_500800 = i_501606;
						F.line = 244;
						var last_block_500801 = cu_500780.blocks[chckIndx(i_500800, 0, cu_500780.blocks.length+0-1)-0];
						F.line = 245;
						var this_block_500802 = cu_500780.blocks[chckIndx(addInt(i_500800, 1), 0, cu_500780.blocks.length+0-1)-0];
						F.line = 246;
						this_block_500802.offset = addInt(last_block_500801.offset, len_500130(last_block_500801));
						F.line = 3620;
						i_501606 = addInt(i_501606, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 248;
			var cb_500811 = null;
			F.line = 3909;
			var colontmp__501617 = null;
			F.line = 248;
			colontmp__501617 = cu_500780.blocks;
			F.line = 3911;
			var i_501620 = 0;
			F.line = 3912;
			var l_501622 = (colontmp__501617 != null ? colontmp__501617.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_501620 < l_501622)) break L6;
						F.line = 3914;
						cb_500811 = colontmp__501617[chckIndx(i_501620, 0, colontmp__501617.length+0-1)-0];
						L7: do {
							F.line = 249;
							var instr_501015 = null;
							F.line = 3909;
							var colontmp__501611 = null;
							F.line = 249;
							colontmp__501611 = cb_500811.instrSeq;
							F.line = 3911;
							var i_501614 = 0;
							F.line = 3912;
							var l_501616 = (colontmp__501611 != null ? colontmp__501611.length : 0);
							L8: do {
								F.line = 3913;
									L9: while (true) {
									if (!(i_501614 < l_501616)) break L9;
										F.line = 3914;
										instr_501015 = colontmp__501611[chckIndx(i_501614, 0, colontmp__501611.length+0-1)-0];
										if (isObj(instr_501015.m_type, NTI498048)) {
										F.line = 251;
										var jump_instr_501027 = instr_501015;
										F.line = 252;
										jump_instr_501027.opArg = jump_instr_501027.target.offset;
										}
										
										F.line = 3915;
										i_501614 = addInt(i_501614, 1);
										if (!(((colontmp__501611 != null ? colontmp__501611.length : 0) == l_501616))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 3915;
						i_501620 = addInt(i_501620, 1);
						if (!(((colontmp__501617 != null ? colontmp__501617.length : 0) == l_501622))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!(tcb_500058(cu_500780).seenReturn)) {
		F.line = 256;
		add_load_const_500641(cu_500780, py_none_356044, last_line_no_500154(cu_500780));
		F.line = 257;
		add_op_500445(cu_500780, new_instr_498133(54, last_line_no_500154(cu_500780)));
		}
		
		F.line = 259;
		result_500782 = new_py_code_493257(cu_500780.codeName, file_name_500781, num_codes_500286(cu_500780));
		L10: do {
			F.line = 260;
			var cb_501037 = null;
			F.line = 3909;
			var colontmp__501631 = null;
			F.line = 260;
			colontmp__501631 = cu_500780.blocks;
			F.line = 3911;
			var i_501634 = 0;
			F.line = 3912;
			var l_501636 = (colontmp__501631 != null ? colontmp__501631.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_501634 < l_501636)) break L12;
						F.line = 3914;
						cb_501037 = colontmp__501631[chckIndx(i_501634, 0, colontmp__501631.length+0-1)-0];
						L13: do {
							F.line = 261;
							var instr_501046 = null;
							F.line = 3909;
							var colontmp__501625 = null;
							F.line = 261;
							colontmp__501625 = cb_501037.instrSeq;
							F.line = 3911;
							var i_501628 = 0;
							F.line = 3912;
							var l_501630 = (colontmp__501625 != null ? colontmp__501625.length : 0);
							L14: do {
								F.line = 3913;
									L15: while (true) {
									if (!(i_501628 < l_501630)) break L15;
										F.line = 3914;
										instr_501046 = colontmp__501625[chckIndx(i_501628, 0, colontmp__501625.length+0-1)-0];
										F.line = 262;
										add_op_code_493490(result_500782, to_tuple_499853(instr_501046));
										F.line = 3915;
										i_501628 = addInt(i_501628, 1);
										if (!(((colontmp__501625 != null ? colontmp__501625.length : 0) == l_501630))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 3915;
						i_501634 = addInt(i_501634, 1);
						if (!(((colontmp__501631 != null ? colontmp__501631.length : 0) == l_501636))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 263;
		result_500782.constants = nimCopy(null, cu_500780.constants, NTI498066);
		F.line = 264;
		result_500782.names = nimCopy(null, names_to_seq_448324(cu_500780.ste), NTI448327);
		F.line = 265;
		result_500782.localVars = nimCopy(null, local_vars_to_seq_448342(cu_500780.ste), NTI448345);
		F.line = 267;
		result_500782.cellVars = nimCopy(null, cell_vars_to_seq_448360(cu_500780.ste), NTI448363);
		F.line = 268;
		result_500782.freeVars = nimCopy(null, free_vars_to_seq_448378(cu_500780.ste), NTI448381);
		F.line = 269;
		result_500782.argNames = nimCopy(null, new_seq_447278(chckRange(len_442683(cu_500780.ste.argVars), 0, 2147483647)), NTI447283);
		F.line = 270;
		result_500782.argScopes = nimCopy(null, new_seq_501257(chckRange(len_442683(cu_500780.ste.argVars), 0, 2147483647)), NTI501262);
		L16: do {
			F.line = 271;
			var arg_name_501487 = null;
			F.line = 271;
			var arg_idx_501488 = 0;
			F.line = 270;
			var colontmp__501638 = {data: null, counter: 0};
			F.line = 271;
			nimCopy(colontmp__501638, cu_500780.ste.argVars, NTI432186);
			L17: do {
				F.line = 272;
				var h_501642 = 0;
				F.line = 2104;
				var colontmp__501644 = 0;
				F.line = 272;
				colontmp__501644 = (colontmp__501638.data != null ? (colontmp__501638.data.length-1) : -1);
				F.line = 2107;
				var res_501646 = 0;
				L18: do {
					F.line = 2108;
						L19: while (true) {
						if (!(res_501646 <= colontmp__501644)) break L19;
							F.line = 2109;
							h_501642 = res_501646;
							if (is_filled_146491(colontmp__501638.data[chckIndx(h_501642, 0, colontmp__501638.data.length+0-1)-0].Field0)) {
							F.line = 273;
							arg_name_501487 = colontmp__501638.data[chckIndx(h_501642, 0, colontmp__501638.data.length+0-1)-0].Field1;
							F.line = 273;
							arg_idx_501488 = colontmp__501638.data[chckIndx(h_501642, 0, colontmp__501638.data.length+0-1)-0].Field2;
							F.line = 272;
							var scope_501489 = get_scope_435803(cu_500780.ste, arg_name_501487);
							F.line = 273;
							var scope_idx_501490 = 0;
							F.line = 274;
							switch (scope_501489) {
							case 0:
								F.line = 276;
								scope_idx_501490 = local_id_440666(cu_500780.ste, arg_name_501487);
								break;
							case 3:
								F.line = 278;
								scope_idx_501490 = name_id_442042(cu_500780.ste, arg_name_501487);
								break;
							case 1:
								F.line = 280;
								scope_idx_501490 = cell_id_446176(cu_500780.ste, arg_name_501487);
								break;
							case 2:
								F.line = 2895;
								var e_501500 = null;
								F.line = 2896;
								e_501500 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
								F.line = 282;
								e_501500.message = nimCopy(null, makeNimstrLit("arguments can\'t be free"), NTI138);
								F.line = 2891;
								e_501500.parent = null;
								F.line = 282;
								raiseException(e_501500, "InternalError");
								break;
							}
							F.line = 283;
							result_500782.argNames[chckIndx(arg_idx_501488, 0, result_500782.argNames.length+0-1)-0] = arg_name_501487;
							F.line = 284;
							nimCopy(result_500782.argScopes[chckIndx(arg_idx_501488, 0, result_500782.argScopes.length+0-1)-0], {Field0: scope_501489, Field1: scope_idx_501490}, NTI492148);
							}
							
							F.line = 2110;
							res_501646 = addInt(res_501646, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_500782;

}

function HEX5BHEX5D_499995(s_500001, i_500003) {
	var result_500005 = [null, 0];
	var result_500005_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_500005 = s_500001; result_500005_Idx = chckIndx(subInt((s_500001 != null ? s_500001.length : 0), i_500003), 0, s_500001.length+0-1)-0;
	framePtr = F.prev;

	return [result_500005, result_500005_Idx];

}

function tcu_499986(c_499988) {
		var Tmp1;

	var result_499989 = null;

	var F={procname:"compile.tcu",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 121;
		result_499989 = (Tmp1 = HEX5BHEX5D_499995(c_499988.units, 1), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_499989;

}

function compile_508014(ast_root_508016, file_name_508017) {
	var result_508018 = null;

	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 843;
		F.line = 843;
		var c_508019 = new_compiler_499647(ast_root_508016, new_py_str_176092(file_name_508017));
		F.line = 844;
++excHandler;
		try {
		F.line = 845;
		compile_502538(c_508019, ast_root_508016);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156088))) {
		F.line = 847;
		var e_508020 = getCurrentException();
		F.line = 848;
		result_508018 = from_bltin_syntax_error_491149(e_508020, new_py_str_176092(file_name_508017));
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		result_508018 = assemble_500778(tcu_499986(c_508019), c_508019.fileName);
	} while (false);
	framePtr = F.prev;

	return result_508018;

}

function compile_508054(input_508056, file_name_508057) {
	var result_508058 = null;

	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 860;
++excHandler;
		try {
		F.line = 861;
		var ast_root_508059 = ast_431236(input_508056);
		F.line = 862;
		result_508058 = compile_508014(ast_root_508059, file_name_508057);
		break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156088))) {
		F.line = 864;
		var e_508060 = getCurrentException();
		F.line = 865;
		result_508058 = from_bltin_syntax_error_491149(e_508060, new_py_str_176092(file_name_508057));
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
	} while (false);
	framePtr = F.prev;

	return result_508058;

}

function interactivePython(input_664007) {
			var Tmp2;
			var Tmp3;

	var result_664008 = false;

	var F={procname:"python.interactivePython",prev:framePtr,filename:"jspython.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 16;
		F.line = 16;
		rawEcho(cstrToNimstr(input_664007));
		if (finished_664001[0]) {
		F.line = 18;
		root_cst_664002[0] = null;
		F.line = 19;
		clear_indent_345872(lexer_inst_664003);
		}
		else {
			if (!(!((root_cst_664002[0] === null)))) {
			F.line = 21;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/jspython.nim(21, 5) `not isNil(rootCst)` "));
			}
			
		}
		
		F.line = 23;
++excHandler;
		try {
		F.line = 24;
		root_cst_664002[0] = parse_with_state_351248(cstrToNimstr(input_664007), lexer_inst_664003, 0, root_cst_664002[0]);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156088))) {
		F.line = 26;
		var e_664202 = getCurrentException();
		F.line = 27;
		var excp_obj_664203 = from_bltin_syntax_error_491149(e_664202, new_py_str_176092(makeNimstrLit("<stdin>")));
		F.line = 28;
		print_tb_603216(excp_obj_664203);
		F.line = 29;
		finished_664001[0] = true;
		F.line = 30;
		result_664008 = true;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		if ((root_cst_664002[0] === null)) {
		F.line = 33;
		result_664008 = true;
		break BeforeRet;
		}
		
		F.line = 34;
		finished_664001[0] = finished_350088(root_cst_664002[0]);
		if (!(finished_664001[0])) {
		F.line = 36;
		result_664008 = false;
		break BeforeRet;
		}
		
		F.line = 38;
		var compile_res_664211 = compile_508054(root_cst_664002[0], makeNimstrLit("<stdin>"));
			if (of_py_exception_object_358259(compile_res_664211)) {
			Tmp2 = compile_res_664211.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 40;
		print_tb_603216(compile_res_664211);
		F.line = 41;
		result_664008 = true;
		break BeforeRet;
		}
		
		F.line = 42;
		var co_664212 = compile_res_664211;
		F.line = 47;
		var globals_664401 = null;
		if (!((prev_f_664004[0] == null))) {
		F.line = 49;
		globals_664401 = prev_f_664004[0].globals;
		}
		else {
			F.line = 51;
			globals_664401 = new_py_dict_527257();
		}
		
		F.line = 52;
		var fun_664413 = new_py_func_547057(new_py_string_176075(makeNimstrLit("Bla")), co_664212, globals_664401, null);
		F.line = 53;
		var f_664414 = new_py_frame_556047(fun_664413);
		F.line = 54;
		var ret_obj_664415 = eval_frame_556056(f_664414);
			if (of_py_exception_object_358259(ret_obj_664415)) {
			Tmp3 = ret_obj_664415.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 56;
		print_tb_603216(ret_obj_664415);
		}
		else {
			F.line = 58;
			prev_f_664004[0] = f_664414;
		}
		
		result_664008 = true;
	} while (false);
	framePtr = F.prev;

	return result_664008;

}

function py_init_663214(args_663217) {
	var F={procname:"lifecycle.pyInit",prev:framePtr,filename:"lifecycle.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 12;
			var t_663415 = null;
			F.line = 3911;
			var i_663604 = 0;
			F.line = 3912;
			var l_663606 = (bltin_types_158717[0] != null ? bltin_types_158717[0].length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_663604 < l_663606)) break L3;
						F.line = 3914;
						t_663415 = bltin_types_158717[0][chckIndx(i_663604, 0, bltin_types_158717[0].length+0-1)-0];
						F.line = 13;
						type_ready_632659(t_663415);
						F.line = 3915;
						i_663604 = addInt(i_663604, 1);
						if (!(((bltin_types_158717[0] != null ? bltin_types_158717[0].length : 0) == l_663606))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}
var finished_664001 = [true];
var root_cst_664002 = [null];
var lexer_inst_664003 = new_lexer_345814(makeNimstrLit("<stdin>"));
var prev_f_664004 = [null];
py_init_663214([]);

function sys_fatal_16979(message_16985) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_16987 = null;
		F.line = 2916;
		e_16987 = {m_type: NTI3886, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_16987.message = nimCopy(null, message_16985, NTI138);
		F.line = 2918;
		raiseException(e_16987, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_16976, p_16976_Idx) {
		if ((p_16976_Idx == 0)) {
		sys_fatal_16979(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function HEX24_373878(e_373880) {
	var result_373881 = null;

	var F={procname:"exceptions.$",prev:framePtr,filename:"../Objects/exceptions.nim",line:0};
	framePtr = F;
		F.line = 142;
		result_373881 = nimCopy(null, (makeNimstrLit("Error: ")).concat(reprEnum(e_373880.tk, NTI357160),makeNimstrLit(" ")), NTI138);
		if (!((e_373880.msg === null))) {
		F.line = 144;
		if (result_373881 != null) { result_373881 = (result_373881).concat(HEX24_157579(e_373880.msg)); } else { result_373881 = HEX24_157579(e_373880.msg).slice(); };
		}
		
	framePtr = F.prev;

	return result_373881;

}

function HEX24_176057(str_obj_176059) {
	var result_176060 = null;

	var F={procname:"stringobject.$",prev:framePtr,filename:"../Objects/stringobject.nim",line:0};
	framePtr = F;
		F.line = 10;
		result_176060 = nimCopy(null, (makeNimstrLit("\"")).concat(str_obj_176059.str,makeNimstrLit("\"")), NTI138);
	framePtr = F.prev;

	return result_176060;

}

function HEX24_378297(i_378299) {
	var result_378300 = null;

	var F={procname:"numobjects.$",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 465;
		F.line = 465;
		var str_seq_378302 = null;
		if (zero_375388(i_378299)) {
		F.line = 467;
		result_378300 = nimCopy(null, makeNimstrLit("0"), NTI138);
		break BeforeRet;
		}
		
		F.line = 468;
		var ii_378303 = copy_375438(i_378299);
		F.line = 469;
		var r_378304 = null;
		L1: do {
			F.line = 470;
				L2: while (true) {
				if (!true) break L2;
					F.line = 471;
					var __378305 = do_div_377243(ii_378303, py_int_ten_375349);
					F.line = 471;
					ii_378303 = __378305["Field0"];
					F.line = 471;
					r_378304 = __378305["Field1"];
					F.line = 472;
					if (str_seq_378302 != null) { str_seq_378302.push(cstrToNimstr((((r_378304.digits[chckIndx(0, 0, r_378304.digits.length+0-1)-0])|0))+"")); } else { str_seq_378302 = [cstrToNimstr((((r_378304.digits[chckIndx(0, 0, r_378304.digits.length+0-1)-0])|0))+"")]; };
					if (((ii_378303.digits != null ? ii_378303.digits.length : 0) == 0)) {
					F.line = 474;
					break L1;
					}
					
				}
		} while(false);
		if (negative_375363(i_378299)) {
		F.line = 477;
		if (str_seq_378302 != null) { str_seq_378302.push(makeNimstrLit("-")); } else { str_seq_378302 = [makeNimstrLit("-")]; };
		}
		
		result_378300 = nimCopy(null, nsuJoinSep(reversed_378336(str_seq_378302), []), NTI138);
	} while (false);
	framePtr = F.prev;

	return result_378300;

}

function nucruneLen(s_41507) {
	var result_41508 = 0;

	var F={procname:"unicode.runeLen",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
		F.line = 31;
		var i_41510 = 0;
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!(i_41510 < (s_41507 != null ? s_41507.length : 0))) break L2;
					if ((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] <= 127)) {
					F.line = 33;
					i_41510 = addInt(i_41510, 1);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					F.line = 34;
					i_41510 = addInt(i_41510, 2);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 4) == 14)) {
					F.line = 35;
					i_41510 = addInt(i_41510, 3);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 3) == 30)) {
					F.line = 36;
					i_41510 = addInt(i_41510, 4);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 2) == 62)) {
					F.line = 37;
					i_41510 = addInt(i_41510, 5);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 1) == 126)) {
					F.line = 38;
					i_41510 = addInt(i_41510, 6);
					}
					else {
						F.line = 39;
					i_41510 = addInt(i_41510, 1);
					}
					}}}}}
					F.line = 40;
					result_41508 = addInt(result_41508, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_41508;

}

function rune_len_at_41696(s_41698, i_41699) {
	var result_41700 = 0;

	var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
		if ((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] <= 127)) {
		F.line = 44;
		result_41700 = 1;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 5) == 6)) {
		F.line = 45;
		result_41700 = 2;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 4) == 14)) {
		F.line = 46;
		result_41700 = 3;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 3) == 30)) {
		F.line = 47;
		result_41700 = 4;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 2) == 62)) {
		F.line = 48;
		result_41700 = 5;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 1) == 126)) {
		F.line = 49;
		result_41700 = 6;
		}
		else {
			F.line = 50;
			result_41700 = 1;
		}
		}}}}}
	framePtr = F.prev;

	return result_41700;

}

function rune_offset_46235(s_46237, pos_46238, start_46239) {
	var result_46240 = 0;

	var F={procname:"unicode.runeOffset",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 234;
		var i_46242 = 0;
		F.line = 235;
		var o_46243 = start_46239;
		L1: do {
			F.line = 236;
				L2: while (true) {
				if (!(i_46242 < pos_46238)) break L2;
					F.line = 237;
					o_46243 = addInt(o_46243, chckRange(rune_len_at_41696(s_46237, o_46243), 0, 2147483647));
					if (((s_46237 != null ? s_46237.length : 0) <= o_46243)) {
					F.line = 239;
					result_46240 = -1;
					break BeforeRet;
					}
					
					F.line = 240;
					i_46242 = addInt(i_46242, 1);
				}
		} while(false);
		F.line = 241;
		result_46240 = o_46243;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_46240;

}

function validate_utf8_41958(s_41960) {
	var result_41961 = 0;

	var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 133;
		var i_41963 = 0;
		F.line = 134;
		var l_41964 = (s_41960 != null ? s_41960.length : 0);
		L1: do {
			F.line = 135;
				L2: while (true) {
				if (!(i_41963 < l_41964)) break L2;
					if ((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] <= 127)) {
					F.line = 137;
					i_41963 = addInt(i_41963, 1);
					}
					else {
					if ((((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] < 194)) {
					F.line = 139;
					result_41961 = i_41963;
					break BeforeRet;
					}
					
					if (((addInt(i_41963, 1) < l_41964) && (((s_41960[chckIndx(addInt(i_41963, 1), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2))) {
					F.line = 140;
					i_41963 = addInt(i_41963, 2);
					}
					else {
						F.line = 141;
						result_41961 = i_41963;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] >>> 0) >>> 4) == 14)) {
					if ((((addInt(i_41963, 2) < l_41964) && (((s_41960[chckIndx(addInt(i_41963, 1), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2)) && (((s_41960[chckIndx(addInt(i_41963, 2), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2))) {
					F.line = 144;
					i_41963 = addInt(i_41963, 3);
					}
					else {
						F.line = 145;
						result_41961 = i_41963;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] >>> 0) >>> 3) == 30)) {
					if (((((addInt(i_41963, 3) < l_41964) && (((s_41960[chckIndx(addInt(i_41963, 1), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2)) && (((s_41960[chckIndx(addInt(i_41963, 2), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2)) && (((s_41960[chckIndx(addInt(i_41963, 3), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2))) {
					F.line = 150;
					i_41963 = addInt(i_41963, 4);
					}
					else {
						F.line = 151;
						result_41961 = i_41963;
						break BeforeRet;
					}
					
					}
					else {
						F.line = 153;
						result_41961 = i_41963;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		F.line = 154;
		result_41961 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_41961;

}

function align_string_141827(s_141829, minimum_width_141830, align_141831, fill_141832) {
			var Tmp1;

	var result_141833 = null;

	var F={procname:"strformat.alignString",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		if ((minimum_width_141830 == 0)) {
		F.line = 353;
		result_141833 = nimCopy(null, s_141829, NTI138);
		}
		else {
			F.line = 355;
			if ((validate_utf8_41958(s_141829) == -1)) {
			Tmp1 = nucruneLen(s_141829);
			}
			else {
			Tmp1 = (s_141829 != null ? s_141829.length : 0);
			}
			
			var s_rune_len_141835 = Tmp1;
			F.line = 356;
			var to_fill_141836 = subInt(minimum_width_141830, s_rune_len_141835);
			if ((to_fill_141836 <= 0)) {
			F.line = 358;
			result_141833 = nimCopy(null, s_141829, NTI138);
			}
			else {
			if (((align_141831 == 60) || (align_141831 == 0))) {
			F.line = 360;
			result_141833 = nimCopy(null, (s_141829).concat(nsuRepeatChar(fill_141832, chckRange(to_fill_141836, 0, 2147483647))), NTI138);
			}
			else {
			if ((align_141831 == 94)) {
			F.line = 362;
			var half_141837 = divInt(to_fill_141836, 2);
			F.line = 363;
			result_141833 = nimCopy(null, (nsuRepeatChar(fill_141832, chckRange(half_141837, 0, 2147483647))).concat(s_141829,nsuRepeatChar(fill_141832, chckRange(subInt(to_fill_141836, half_141837), 0, 2147483647))), NTI138);
			}
			else {
				F.line = 365;
				result_141833 = nimCopy(null, (nsuRepeatChar(fill_141832, chckRange(to_fill_141836, 0, 2147483647))).concat(s_141829), NTI138);
			}
			}}
		}
		
	framePtr = F.prev;

	return result_141833;

}

function format_142201(value_142203, specifier_142204, res_142206, res_142206_Idx) {
	var F={procname:"strformat.format",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 567;
		var spec_142207 = parse_standard_format_specifier_141928(specifier_142204, 0, false);
		F.line = 568;
		var value_142208 = nimCopy(null, value_142203, NTI138);
		F.line = 569;
		switch (spec_142207.typ) {
		case 115:
		case 0:
			break;
		default: 
			F.line = 2895;
			var e_142215 = null;
			F.line = 2896;
			e_142215 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 573;
			e_142215.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ")).concat([spec_142207.typ]), NTI138);
			F.line = 2891;
			e_142215.parent = null;
			F.line = 572;
			raiseException(e_142215, "ValueError");
			break;
		}
		if (!((spec_142207.precision == -1))) {
		if ((spec_142207.precision < nucruneLen(value_142208))) {
		F.line = 577;
		value_142208.length = chckRange(rune_offset_46235(value_142208, chckRange(spec_142207.precision, 0, 2147483647), 0), 0, 2147483647);
		}
		
		}
		
		F.line = 578;
		if (res_142206[res_142206_Idx] != null) { res_142206[res_142206_Idx] = (res_142206[res_142206_Idx]).concat(align_string_141827(value_142208, spec_142207.minimumWidth, spec_142207.align, spec_142207.fill)); } else { res_142206[res_142206_Idx] = align_string_141827(value_142208, spec_142207.minimumWidth, spec_142207.align, spec_142207.fill).slice(); };
	framePtr = F.prev;

	
}

function of_py_code_object_492183(obj_492070) {
	var result_492185 = false;

	var F={procname:"codeobject.ofPyCodeObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_492185 = (obj_492070.pyType.kind == 11);
	framePtr = F.prev;

	return result_492185;

}

function HEX24_494229(code_494231) {
	var result_494232 = null;

	var F={procname:"codeobject.$",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 77;
		var s_494234 = null;
		F.line = 78;
		if (s_494234 != null) { s_494234.push((makeNimstrLit("Names: ")).concat(HEX24_494237(code_494231.names))); } else { s_494234 = [(makeNimstrLit("Names: ")).concat(HEX24_494237(code_494231.names))]; };
		F.line = 79;
		if (s_494234 != null) { s_494234.push((makeNimstrLit("Local variables: ")).concat(HEX24_494237(code_494231.localVars))); } else { s_494234 = [(makeNimstrLit("Local variables: ")).concat(HEX24_494237(code_494231.localVars))]; };
		F.line = 80;
		if (s_494234 != null) { s_494234.push((makeNimstrLit("Cell variables: ")).concat(HEX24_494237(code_494231.cellVars))); } else { s_494234 = [(makeNimstrLit("Cell variables: ")).concat(HEX24_494237(code_494231.cellVars))]; };
		F.line = 81;
		if (s_494234 != null) { s_494234.push((makeNimstrLit("Free variables: ")).concat(HEX24_494237(code_494231.freeVars))); } else { s_494234 = [(makeNimstrLit("Free variables: ")).concat(HEX24_494237(code_494231.freeVars))]; };
		F.line = 83;
		var other_codes_494912 = null;
		L1: do {
			F.line = 84;
			var idx_494959 = 0;
			F.line = 84;
			var op_array_494960 = {Field0: 0, Field1: 0};
			F.line = 2352;
			var colontmp__497418 = null;
			F.line = 84;
			colontmp__497418 = code_494231.code;
			F.line = 2354;
			var i_497421 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_497421 < (colontmp__497418 != null ? colontmp__497418.length : 0))) break L3;
						F.line = 2356;
						idx_494959 = i_497421;
						F.line = 2356;
						nimCopy(op_array_494960, colontmp__497418[chckIndx(i_497421, 0, colontmp__497418.length+0-1)-0], NTI492127);
						F.line = 85;
						var op_code_494961 = op_array_494960["Field0"];
						F.line = 86;
						var op_arg_494962 = op_array_494960["Field1"];
						F.line = 87;
						F.line = 87;
						var fmt_res_494965 = [mnewString(0)];
						F.line = 274;
						format_158402(idx_494959, makeNimstrLit(">10"), fmt_res_494965, 0);
						F.line = 87;
						if (fmt_res_494965[0] != null) { fmt_res_494965[0] = (fmt_res_494965[0]).concat(makeNimstrLit(" ")); } else { fmt_res_494965[0] = makeNimstrLit(" "); };
						F.line = 278;
						format_142201(reprEnum(op_code_494961, NTI464016), makeNimstrLit("<30"), fmt_res_494965, 0);
						var line_495612 = nimCopy(null, fmt_res_494965[0], NTI138);
						if ((ConstSet23[op_code_494961] != undefined)) {
						F.line = 89;
						F.line = 89;
						var fmt_res_495624 = [mnewString(0)];
						F.line = 274;
						format_158402(op_arg_494962, makeNimstrLit("<4"), fmt_res_495624, 0);
						if (line_495612 != null) { line_495612 = (line_495612).concat(fmt_res_495624[0]); } else { line_495612 = fmt_res_495624[0].slice(); };
						F.line = 90;
						switch (op_code_494961) {
						case 72:
						case 62:
						case 77:
						case 87:
						case 69:
							F.line = 93;
							F.line = 93;
							var fmt_res_496019 = mnewString(0);
							F.line = 93;
							if (fmt_res_496019 != null) { fmt_res_496019 = (fmt_res_496019).concat(makeNimstrLit(" (")); } else { fmt_res_496019 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_496019 != null) { fmt_res_496019 = (fmt_res_496019).concat(HEX24_157579(code_494231.names[chckIndx(op_arg_494962, 0, code_494231.names.length+0-1)-0])); } else { fmt_res_496019 = HEX24_157579(code_494231.names[chckIndx(op_arg_494962, 0, code_494231.names.length+0-1)-0]).slice(); };
							F.line = 93;
							if (fmt_res_496019 != null) { fmt_res_496019 = (fmt_res_496019).concat(makeNimstrLit(")")); } else { fmt_res_496019 = makeNimstrLit(")"); };
							if (line_495612 != null) { line_495612 = (line_495612).concat(fmt_res_496019); } else { line_495612 = fmt_res_496019.slice(); };
							break;
						case 71:
							F.line = 95;
							var const_obj_496202 = code_494231.constants[chckIndx(op_arg_494962, 0, code_494231.constants.length+0-1)-0];
							if (of_py_code_object_492183(const_obj_496202)) {
							F.line = 97;
							var other_code_496203 = const_obj_496202;
							F.line = 98;
							if (other_codes_494912 != null) { other_codes_494912.push(other_code_496203); } else { other_codes_494912 = [other_code_496203]; };
							F.line = 99;
							var repr_str_496214 = repr_py_code_object_magic_493552(other_code_496203);
							F.line = 100;
							F.line = 100;
							var fmt_res_496217 = mnewString(0);
							F.line = 100;
							if (fmt_res_496217 != null) { fmt_res_496217 = (fmt_res_496217).concat(makeNimstrLit(" (")); } else { fmt_res_496217 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_496217 != null) { fmt_res_496217 = (fmt_res_496217).concat(HEX24_157579(repr_str_496214)); } else { fmt_res_496217 = HEX24_157579(repr_str_496214).slice(); };
							F.line = 100;
							if (fmt_res_496217 != null) { fmt_res_496217 = (fmt_res_496217).concat(makeNimstrLit(")")); } else { fmt_res_496217 = makeNimstrLit(")"); };
							if (line_495612 != null) { line_495612 = (line_495612).concat(fmt_res_496217); } else { line_495612 = fmt_res_496217.slice(); };
							}
							else {
								F.line = 102;
								F.line = 102;
								var fmt_res_496403 = mnewString(0);
								F.line = 102;
								if (fmt_res_496403 != null) { fmt_res_496403 = (fmt_res_496403).concat(makeNimstrLit(" (")); } else { fmt_res_496403 = makeNimstrLit(" ("); };
								F.line = 270;
								if (fmt_res_496403 != null) { fmt_res_496403 = (fmt_res_496403).concat(HEX24_157579(code_494231.constants[chckIndx(op_arg_494962, 0, code_494231.constants.length+0-1)-0])); } else { fmt_res_496403 = HEX24_157579(code_494231.constants[chckIndx(op_arg_494962, 0, code_494231.constants.length+0-1)-0]).slice(); };
								F.line = 102;
								if (fmt_res_496403 != null) { fmt_res_496403 = (fmt_res_496403).concat(makeNimstrLit(")")); } else { fmt_res_496403 = makeNimstrLit(")"); };
							if (line_495612 != null) { line_495612 = (line_495612).concat(fmt_res_496403); } else { line_495612 = fmt_res_496403.slice(); };
							}
							
							break;
						case 89:
						case 90:
							F.line = 104;
							F.line = 104;
							var fmt_res_496605 = mnewString(0);
							F.line = 104;
							if (fmt_res_496605 != null) { fmt_res_496605 = (fmt_res_496605).concat(makeNimstrLit(" (")); } else { fmt_res_496605 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_496605 != null) { fmt_res_496605 = (fmt_res_496605).concat(HEX24_157579(code_494231.localVars[chckIndx(op_arg_494962, 0, code_494231.localVars.length+0-1)-0])); } else { fmt_res_496605 = HEX24_157579(code_494231.localVars[chckIndx(op_arg_494962, 0, code_494231.localVars.length+0-1)-0]).slice(); };
							F.line = 104;
							if (fmt_res_496605 != null) { fmt_res_496605 = (fmt_res_496605).concat(makeNimstrLit(")")); } else { fmt_res_496605 = makeNimstrLit(")"); };
							if (line_495612 != null) { line_495612 = (line_495612).concat(fmt_res_496605); } else { line_495612 = fmt_res_496605.slice(); };
							break;
						case 97:
						case 98:
							if ((op_arg_494962 < (code_494231.cellVars != null ? code_494231.cellVars.length : 0))) {
							F.line = 107;
							F.line = 107;
							var fmt_res_496812 = mnewString(0);
							F.line = 107;
							if (fmt_res_496812 != null) { fmt_res_496812 = (fmt_res_496812).concat(makeNimstrLit(" (")); } else { fmt_res_496812 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_496812 != null) { fmt_res_496812 = (fmt_res_496812).concat(HEX24_157579(code_494231.cellVars[chckIndx(op_arg_494962, 0, code_494231.cellVars.length+0-1)-0])); } else { fmt_res_496812 = HEX24_157579(code_494231.cellVars[chckIndx(op_arg_494962, 0, code_494231.cellVars.length+0-1)-0]).slice(); };
							F.line = 107;
							if (fmt_res_496812 != null) { fmt_res_496812 = (fmt_res_496812).concat(makeNimstrLit(")")); } else { fmt_res_496812 = makeNimstrLit(")"); };
							if (line_495612 != null) { line_495612 = (line_495612).concat(fmt_res_496812); } else { line_495612 = fmt_res_496812.slice(); };
							}
							else {
								F.line = 109;
								F.line = 109;
								var fmt_res_497003 = mnewString(0);
								F.line = 109;
								if (fmt_res_497003 != null) { fmt_res_497003 = (fmt_res_497003).concat(makeNimstrLit(" (")); } else { fmt_res_497003 = makeNimstrLit(" ("); };
								F.line = 270;
								if (fmt_res_497003 != null) { fmt_res_497003 = (fmt_res_497003).concat(HEX24_157579(code_494231.freeVars[chckIndx(subInt(op_arg_494962, (code_494231.cellVars != null ? code_494231.cellVars.length : 0)), 0, code_494231.freeVars.length+0-1)-0])); } else { fmt_res_497003 = HEX24_157579(code_494231.freeVars[chckIndx(subInt(op_arg_494962, (code_494231.cellVars != null ? code_494231.cellVars.length : 0)), 0, code_494231.freeVars.length+0-1)-0]).slice(); };
								F.line = 109;
								if (fmt_res_497003 != null) { fmt_res_497003 = (fmt_res_497003).concat(makeNimstrLit(")")); } else { fmt_res_497003 = makeNimstrLit(")"); };
							if (line_495612 != null) { line_495612 = (line_495612).concat(fmt_res_497003); } else { line_495612 = fmt_res_497003.slice(); };
							}
							
							break;
						case 93:
						case 65:
						case 74:
						case 73:
						case 64:
						case 94:
						case 92:
						case 81:
						case 82:
						case 83:
						case 84:
						case 85:
						case 86:
						case 88:
							break;
						default: 
							F.line = 115;
							if (line_495612 != null) { line_495612 = (line_495612).concat(makeNimstrLit(" (Unknown OpCode)")); } else { line_495612 = makeNimstrLit(" (Unknown OpCode)"); };
							break;
						}
						}
						
						F.line = 116;
						var Tmp4 = nimCopy(null, line_495612, NTI138);
						if (s_494234 != null) { s_494234.push(Tmp4); } else { s_494234 = [Tmp4]; };
						F.line = 2357;
						i_497421 = addInt(i_497421, 1);
					}
			} while(false);
		} while(false);
		F.line = 117;
		if (s_494234 != null) { s_494234.push(makeNimstrLit("\x0A")); } else { s_494234 = [makeNimstrLit("\x0A")]; };
		F.line = 118;
		result_494232 = nimCopy(null, nsuJoinSep(s_494234, makeNimstrLit("\x0A")), NTI138);
		L5: do {
			F.line = 119;
			var other_code_497415 = null;
			F.line = 3911;
			var i_497425 = 0;
			F.line = 3912;
			var l_497427 = (other_codes_494912 != null ? other_codes_494912.length : 0);
			L6: do {
				F.line = 3913;
					L7: while (true) {
					if (!(i_497425 < l_497427)) break L7;
						F.line = 3914;
						other_code_497415 = other_codes_494912[chckIndx(i_497425, 0, other_codes_494912.length+0-1)-0];
						F.line = 120;
						if (result_494232 != null) { result_494232 = (result_494232).concat(HEX24_157579(other_code_497415)); } else { result_494232 = HEX24_157579(other_code_497415).slice(); };
						F.line = 3915;
						i_497425 = addInt(i_497425, 1);
						if (!(((other_codes_494912 != null ? other_codes_494912.length : 0) == l_497427))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_494232;

}

function HEX24_396119(obj_396121) {
	var result_396122 = null;

	var F={procname:"boolobjectImpl.$",prev:framePtr,filename:"../Objects/boolobjectImpl.nim",line:0};
	framePtr = F;
		F.line = 14;
		result_396122 = nimCopy(null, nimBoolToStr(obj_396121.b), NTI138);
	framePtr = F.prev;

	return result_396122;

}

function HEX24_379657(f_379659) {
	var result_379660 = null;

	var F={procname:"numobjects.$",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 489;
		result_379660 = nimCopy(null, cstrToNimstr((f_379659.v)+""), NTI138);
	framePtr = F.prev;

	return result_379660;

}

function HEX24_157574(obj_157576) {
	var result_157577 = null;

	var F={procname:"pyobjectBase.$",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 163;
		result_157577 = nimCopy(null, makeNimstrLit("Python object"), NTI138);
	framePtr = F.prev;

	return result_157577;

}

function HEX24_157579(obj_157576) {
	var result_157582 = null;

	var F={procname:"pyobjectBase.$",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(obj_157576);
		if (isObj(obj_157576.m_type, NTI357244)) {
		F.line = 162;
		result_157582 = HEX24_373878(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI175084)) {
		F.line = 162;
		result_157582 = HEX24_176057(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI374303)) {
		F.line = 162;
		result_157582 = HEX24_378297(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI492125)) {
		F.line = 162;
		result_157582 = HEX24_494229(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI353098)) {
		F.line = 162;
		result_157582 = HEX24_396119(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI378718)) {
		F.line = 162;
		result_157582 = HEX24_379657(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI157273)) {
		F.line = 162;
		result_157582 = HEX24_157574(obj_157576);
		break BeforeRet;
		}
		}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_157582;

}

function hash_143801(x_143803) {
	var result_143804 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 108;
		result_143804 = x_143803;
	framePtr = F.prev;

	return result_143804;

}

function hash_177044(node_177046) {
	var result_177047 = 0;

	var F={procname:"asdl.hash",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 23;
		result_177047 = hash_143801(node_177046);
	framePtr = F.prev;

	return result_177047;

}

function hash_177049(node_177046) {
	var result_177052 = 0;

	var F={procname:"asdl.hash",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 22;
		result_177052 = hash_177044(node_177046);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_177052;

}

function add_182829(x_182835, x_182835_Idx, y_182838) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1612;
		var xl_182846 = (x_182835[x_182835_Idx] != null ? x_182835[x_182835_Idx].length : 0);
		F.line = 1613;
		if (x_182835[x_182835_Idx].length < chckRange(addInt(xl_182846, (y_182838 != null ? y_182838.length : 0)), 0, 2147483647)) { for (var i=x_182835[x_182835_Idx].length;i<chckRange(addInt(xl_182846, (y_182838 != null ? y_182838.length : 0)), 0, 2147483647);++i) x_182835[x_182835_Idx].push(null); }
               else { x_182835[x_182835_Idx].length = chckRange(addInt(xl_182846, (y_182838 != null ? y_182838.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1614;
			var i_182881 = 0;
			F.line = 2104;
			var colontmp__182883 = 0;
			F.line = 1614;
			colontmp__182883 = (y_182838 != null ? (y_182838.length-1) : -1);
			F.line = 2107;
			var res_182886 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_182886 <= colontmp__182883)) break L3;
						F.line = 2109;
						i_182881 = res_182886;
						F.line = 1614;
						x_182835[x_182835_Idx][chckIndx(addInt(xl_182846, i_182881), 0, x_182835[x_182835_Idx].length+0-1)-0] = nimCopy(null, y_182838[chckIndx(i_182881, 0, y_182838.length+0-1)-0], NTI138);
						F.line = 2110;
						res_182886 = addInt(res_182886, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function indent_177636(str_177638, level_177639) {
	var result_177642 = null;

	var F={procname:"asdl.indent",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 136;
		F.line = 136;
		var indent_177643 = [];
		L1: do {
			F.line = 137;
			var i_177654 = 0;
			F.line = 3617;
			var i_178078 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_178078 < level_177639)) break L3;
						F.line = 3619;
						i_177654 = i_178078;
						F.line = 138;
						if (indent_177643 != null) { indent_177643 = (indent_177643).concat(makeNimstrLit("   ")); } else { indent_177643 = makeNimstrLit("   "); };
						F.line = 3620;
						i_178078 = addInt(i_178078, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 139;
			var HEX3Atmp_178009 = nsuSplitString(str_177638, makeNimstrLit("\x0A"), -1);
			F.line = 687;
			var i_178013 = 0;
			F.line = 688;
			var result_178054 = new_seq_178023(chckRange((HEX3Atmp_178009 != null ? HEX3Atmp_178009.length : 0), 0, 2147483647));
			L5: do {
				F.line = 689;
				var it_178063 = null;
				F.line = 3911;
				var i_178084 = 0;
				F.line = 3912;
				var l_178086 = (HEX3Atmp_178009 != null ? HEX3Atmp_178009.length : 0);
				L6: do {
					F.line = 3913;
						L7: while (true) {
						if (!(i_178084 < l_178086)) break L7;
							F.line = 3914;
							it_178063 = HEX3Atmp_178009[chckIndx(i_178084, 0, HEX3Atmp_178009.length+0-1)-0];
							F.line = 139;
							result_178054[chckIndx(i_178013, 0, result_178054.length+0-1)-0] = nimCopy(null, (indent_177643).concat(it_178063), NTI138);
							F.line = 691;
							i_178013 = addInt(i_178013, 1);
							F.line = 3915;
							i_178084 = addInt(i_178084, 1);
							if (!(((HEX3Atmp_178009 != null ? HEX3Atmp_178009.length : 0) == l_178086))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		} while(false);
		result_177642 = nimCopy(null, result_178054, NTI178028);
	framePtr = F.prev;

	return result_177642;

}

function HEX24_182365(node_182367) {
	var result_186913 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 374;
		var string_seq_186926 = [nimCopy(null, [makeNimstrLit("Import")], NTI182673)];
		F.line = 374;
		if (string_seq_186926[0] != null) { string_seq_186926[0].push(makeNimstrLit("   names")); } else { string_seq_186926[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187015 = null;
			F.line = 3909;
			var colontmp__187054 = null;
			F.line = 374;
			colontmp__187054 = node_182367.names;
			F.line = 3911;
			var i_187057 = 0;
			F.line = 3912;
			var l_187059 = (colontmp__187054 != null ? colontmp__187054.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187057 < l_187059)) break L3;
						F.line = 3914;
						child_187015 = colontmp__187054[chckIndx(i_187057, 0, colontmp__187054.length+0-1)-0];
						if ((child_187015 == null)) {
						F.line = 374;
						add_182829(string_seq_186926, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 374;
						add_182829(string_seq_186926, 0, indent_177636(HEX24_177554(child_187015), 2));
						}
						
						F.line = 3915;
						i_187057 = addInt(i_187057, 1);
						if (!(((colontmp__187054 != null ? colontmp__187054.length : 0) == l_187059))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_186913 = nimCopy(null, nsuJoinSep(string_seq_186926[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186913;

}

function HEX24_182371(node_182373) {
	var result_187243 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 377;
		var string_seq_187256 = [nimCopy(null, [makeNimstrLit("Global")], NTI182673)];
		F.line = 377;
		if (string_seq_187256[0] != null) { string_seq_187256[0].push(makeNimstrLit("   names")); } else { string_seq_187256[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187415 = null;
			F.line = 3909;
			var colontmp__187454 = null;
			F.line = 377;
			colontmp__187454 = node_182373.names;
			F.line = 3911;
			var i_187457 = 0;
			F.line = 3912;
			var l_187459 = (colontmp__187454 != null ? colontmp__187454.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187457 < l_187459)) break L3;
						F.line = 3914;
						child_187415 = colontmp__187454[chckIndx(i_187457, 0, colontmp__187454.length+0-1)-0];
						if ((child_187415 == null)) {
						F.line = 377;
						add_182829(string_seq_187256, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 377;
						add_182829(string_seq_187256, 0, indent_177636(HEX24_177554(child_187415), 2));
						}
						
						F.line = 3915;
						i_187457 = addInt(i_187457, 1);
						if (!(((colontmp__187454 != null ? colontmp__187454.length : 0) == l_187459))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_187243 = nimCopy(null, nsuJoinSep(string_seq_187256[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187243;

}

function HEX24_182368(node_182370) {
	var result_187076 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 375;
		var string_seq_187089 = [nimCopy(null, [makeNimstrLit("ImportFrom")], NTI182673)];
		if ((node_182370.module == null)) {
		F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(HEX24_177554(node_182370.module), 1));
		}
		
		F.line = 375;
		if (string_seq_187089[0] != null) { string_seq_187089[0].push(makeNimstrLit("   names")); } else { string_seq_187089[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187145 = null;
			F.line = 3909;
			var colontmp__187221 = null;
			F.line = 375;
			colontmp__187221 = node_182370.names;
			F.line = 3911;
			var i_187224 = 0;
			F.line = 3912;
			var l_187226 = (colontmp__187221 != null ? colontmp__187221.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187224 < l_187226)) break L3;
						F.line = 3914;
						child_187145 = colontmp__187221[chckIndx(i_187224, 0, colontmp__187221.length+0-1)-0];
						if ((child_187145 == null)) {
						F.line = 375;
						add_182829(string_seq_187089, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 375;
						add_182829(string_seq_187089, 0, indent_177636(HEX24_177554(child_187145), 2));
						}
						
						F.line = 3915;
						i_187224 = addInt(i_187224, 1);
						if (!(((colontmp__187221 != null ? colontmp__187221.length : 0) == l_187226))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182370.level == null)) {
		F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(HEX24_177554(node_182370.level), 1));
		}
		
		F.line = 476;
		result_187076 = nimCopy(null, nsuJoinSep(string_seq_187089[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187076;

}

function HEX24_182377(node_182379) {
	var result_187569 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 379;
		var string_seq_187582 = [nimCopy(null, [makeNimstrLit("Expr")], NTI182673)];
		if ((node_182379.value == null)) {
		F.line = 379;
		add_182829(string_seq_187582, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 379;
		add_182829(string_seq_187582, 0, indent_177636(HEX24_177554(node_182379.value), 1));
		}
		
		F.line = 476;
		result_187569 = nimCopy(null, nsuJoinSep(string_seq_187582[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187569;

}

function HEX24_182383(node_182385) {
	var result_187653 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 381;
		result_187653 = nimCopy(null, makeNimstrLit("Break"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187653;

}

function HEX24_182380(node_182382) {
	var result_187636 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 380;
		result_187636 = nimCopy(null, makeNimstrLit("Pass"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187636;

}

function HEX24_182350(node_182352) {
	var result_185864 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 367;
		var string_seq_185877 = [nimCopy(null, [makeNimstrLit("With")], NTI182673)];
		F.line = 367;
		if (string_seq_185877[0] != null) { string_seq_185877[0].push(makeNimstrLit("   items")); } else { string_seq_185877[0] = [makeNimstrLit("   items")]; };
		L1: do {
			F.line = 215;
			var child_186015 = null;
			F.line = 3909;
			var colontmp__186110 = null;
			F.line = 367;
			colontmp__186110 = node_182352.items;
			F.line = 3911;
			var i_186113 = 0;
			F.line = 3912;
			var l_186115 = (colontmp__186110 != null ? colontmp__186110.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_186113 < l_186115)) break L3;
						F.line = 3914;
						child_186015 = colontmp__186110[chckIndx(i_186113, 0, colontmp__186110.length+0-1)-0];
						if ((child_186015 == null)) {
						F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(HEX24_177554(child_186015), 2));
						}
						
						F.line = 3915;
						i_186113 = addInt(i_186113, 1);
						if (!(((colontmp__186110 != null ? colontmp__186110.length : 0) == l_186115))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 367;
		if (string_seq_185877[0] != null) { string_seq_185877[0].push(makeNimstrLit("   body")); } else { string_seq_185877[0] = [makeNimstrLit("   body")]; };
		L4: do {
			F.line = 215;
			var child_186071 = null;
			F.line = 3909;
			var colontmp__186117 = null;
			F.line = 367;
			colontmp__186117 = node_182352.body;
			F.line = 3911;
			var i_186120 = 0;
			F.line = 3912;
			var l_186122 = (colontmp__186117 != null ? colontmp__186117.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_186120 < l_186122)) break L6;
						F.line = 3914;
						child_186071 = colontmp__186117[chckIndx(i_186120, 0, colontmp__186117.length+0-1)-0];
						if ((child_186071 == null)) {
						F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(HEX24_177554(child_186071), 2));
						}
						
						F.line = 3915;
						i_186120 = addInt(i_186120, 1);
						if (!(((colontmp__186117 != null ? colontmp__186117.length : 0) == l_186122))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185864 = nimCopy(null, nsuJoinSep(string_seq_185877[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185864;

}

function HEX24_182374(node_182376) {
	var result_187476 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 378;
		var string_seq_187489 = [nimCopy(null, [makeNimstrLit("Nonlocal")], NTI182673)];
		F.line = 378;
		if (string_seq_187489[0] != null) { string_seq_187489[0].push(makeNimstrLit("   names")); } else { string_seq_187489[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187508 = null;
			F.line = 3909;
			var colontmp__187547 = null;
			F.line = 378;
			colontmp__187547 = node_182376.names;
			F.line = 3911;
			var i_187550 = 0;
			F.line = 3912;
			var l_187552 = (colontmp__187547 != null ? colontmp__187547.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187550 < l_187552)) break L3;
						F.line = 3914;
						child_187508 = colontmp__187547[chckIndx(i_187550, 0, colontmp__187547.length+0-1)-0];
						if ((child_187508 == null)) {
						F.line = 378;
						add_182829(string_seq_187489, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 378;
						add_182829(string_seq_187489, 0, indent_177636(HEX24_177554(child_187508), 2));
						}
						
						F.line = 3915;
						i_187550 = addInt(i_187550, 1);
						if (!(((colontmp__187547 != null ? colontmp__187547.length : 0) == l_187552))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_187476 = nimCopy(null, nsuJoinSep(string_seq_187489[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187476;

}

function HEX24_182395(node_182397) {
	var result_187921 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 389;
		var string_seq_187934 = [nimCopy(null, [makeNimstrLit("BinOp")], NTI182673)];
		if ((node_182397.left == null)) {
		F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(HEX24_177554(node_182397.left), 1));
		}
		
		if ((node_182397.op == null)) {
		F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(HEX24_177554(node_182397.op), 1));
		}
		
		if ((node_182397.right == null)) {
		F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(HEX24_177554(node_182397.right), 1));
		}
		
		F.line = 476;
		result_187921 = nimCopy(null, nsuJoinSep(string_seq_187934[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187921;

}

function HEX24_182401(node_182403) {
	var result_188166 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 391;
		var string_seq_188179 = [nimCopy(null, [makeNimstrLit("Lambda")], NTI182673)];
		if ((node_182403.args == null)) {
		F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(HEX24_177554(node_182403.args), 1));
		}
		
		if ((node_182403.body == null)) {
		F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(HEX24_177554(node_182403.body), 1));
		}
		
		F.line = 476;
		result_188166 = nimCopy(null, nsuJoinSep(string_seq_188179[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188166;

}

function HEX24_182386(node_182388) {
	var result_187670 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 382;
		result_187670 = nimCopy(null, makeNimstrLit("Continue"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187670;

}

function HEX24_182329(node_182331) {
	var result_184569 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 357;
		var string_seq_184582 = [nimCopy(null, [makeNimstrLit("Assign")], NTI182673)];
		F.line = 357;
		if (string_seq_184582[0] != null) { string_seq_184582[0].push(makeNimstrLit("   targets")); } else { string_seq_184582[0] = [makeNimstrLit("   targets")]; };
		L1: do {
			F.line = 215;
			var child_184601 = null;
			F.line = 3909;
			var colontmp__184677 = null;
			F.line = 357;
			colontmp__184677 = node_182331.targets;
			F.line = 3911;
			var i_184680 = 0;
			F.line = 3912;
			var l_184682 = (colontmp__184677 != null ? colontmp__184677.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_184680 < l_184682)) break L3;
						F.line = 3914;
						child_184601 = colontmp__184677[chckIndx(i_184680, 0, colontmp__184677.length+0-1)-0];
						if ((child_184601 == null)) {
						F.line = 357;
						add_182829(string_seq_184582, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 357;
						add_182829(string_seq_184582, 0, indent_177636(HEX24_177554(child_184601), 2));
						}
						
						F.line = 3915;
						i_184680 = addInt(i_184680, 1);
						if (!(((colontmp__184677 != null ? colontmp__184677.length : 0) == l_184682))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182331.value == null)) {
		F.line = 357;
		add_182829(string_seq_184582, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 357;
		add_182829(string_seq_184582, 0, indent_177636(HEX24_177554(node_182331.value), 1));
		}
		
		F.line = 476;
		result_184569 = nimCopy(null, nsuJoinSep(string_seq_184582[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184569;

}

function HEX24_182392(node_182394) {
	var result_187791 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 388;
		var string_seq_187804 = [nimCopy(null, [makeNimstrLit("BoolOp")], NTI182673)];
		if ((node_182394.op == null)) {
		F.line = 388;
		add_182829(string_seq_187804, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 388;
		add_182829(string_seq_187804, 0, indent_177636(HEX24_177554(node_182394.op), 1));
		}
		
		F.line = 388;
		if (string_seq_187804[0] != null) { string_seq_187804[0].push(makeNimstrLit("   values")); } else { string_seq_187804[0] = [makeNimstrLit("   values")]; };
		L1: do {
			F.line = 215;
			var child_187860 = null;
			F.line = 3909;
			var colontmp__187899 = null;
			F.line = 388;
			colontmp__187899 = node_182394.values;
			F.line = 3911;
			var i_187902 = 0;
			F.line = 3912;
			var l_187904 = (colontmp__187899 != null ? colontmp__187899.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187902 < l_187904)) break L3;
						F.line = 3914;
						child_187860 = colontmp__187899[chckIndx(i_187902, 0, colontmp__187899.length+0-1)-0];
						if ((child_187860 == null)) {
						F.line = 388;
						add_182829(string_seq_187804, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 388;
						add_182829(string_seq_187804, 0, indent_177636(HEX24_177554(child_187860), 2));
						}
						
						F.line = 3915;
						i_187902 = addInt(i_187902, 1);
						if (!(((colontmp__187899 != null ? colontmp__187899.length : 0) == l_187904))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_187791 = nimCopy(null, nsuJoinSep(string_seq_187804[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187791;

}

function HEX24_182335(node_182337) {
	var result_184840 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 360;
		var string_seq_184853 = [nimCopy(null, [makeNimstrLit("AnnAssign")], NTI182673)];
		if ((node_182337.target == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.target), 1));
		}
		
		if ((node_182337.annotation == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.annotation), 1));
		}
		
		if ((node_182337.value == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.value), 1));
		}
		
		if ((node_182337.simple == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.simple), 1));
		}
		
		F.line = 476;
		result_184840 = nimCopy(null, nsuJoinSep(string_seq_184853[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184840;

}

function HEX24_182341(node_182343) {
	var result_185248 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 364;
		var string_seq_185261 = [nimCopy(null, [makeNimstrLit("AsyncFor")], NTI182673)];
		if ((node_182343.target == null)) {
		F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(node_182343.target), 1));
		}
		
		if ((node_182343.iter == null)) {
		F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(node_182343.iter), 1));
		}
		
		F.line = 364;
		if (string_seq_185261[0] != null) { string_seq_185261[0].push(makeNimstrLit("   body")); } else { string_seq_185261[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185354 = null;
			F.line = 3909;
			var colontmp__185449 = null;
			F.line = 364;
			colontmp__185449 = node_182343.body;
			F.line = 3911;
			var i_185452 = 0;
			F.line = 3912;
			var l_185454 = (colontmp__185449 != null ? colontmp__185449.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185452 < l_185454)) break L3;
						F.line = 3914;
						child_185354 = colontmp__185449[chckIndx(i_185452, 0, colontmp__185449.length+0-1)-0];
						if ((child_185354 == null)) {
						F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(child_185354), 2));
						}
						
						F.line = 3915;
						i_185452 = addInt(i_185452, 1);
						if (!(((colontmp__185449 != null ? colontmp__185449.length : 0) == l_185454))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 364;
		if (string_seq_185261[0] != null) { string_seq_185261[0].push(makeNimstrLit("   orelse")); } else { string_seq_185261[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185410 = null;
			F.line = 3909;
			var colontmp__185456 = null;
			F.line = 364;
			colontmp__185456 = node_182343.orelse;
			F.line = 3911;
			var i_185459 = 0;
			F.line = 3912;
			var l_185461 = (colontmp__185456 != null ? colontmp__185456.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185459 < l_185461)) break L6;
						F.line = 3914;
						child_185410 = colontmp__185456[chckIndx(i_185459, 0, colontmp__185456.length+0-1)-0];
						if ((child_185410 == null)) {
						F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(child_185410), 2));
						}
						
						F.line = 3915;
						i_185459 = addInt(i_185459, 1);
						if (!(((colontmp__185456 != null ? colontmp__185456.length : 0) == l_185461))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185248 = nimCopy(null, nsuJoinSep(string_seq_185261[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185248;

}

function HEX24_182326(node_182328) {
	var result_184476 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 356;
		var string_seq_184489 = [nimCopy(null, [makeNimstrLit("Delete")], NTI182673)];
		F.line = 356;
		if (string_seq_184489[0] != null) { string_seq_184489[0].push(makeNimstrLit("   targets")); } else { string_seq_184489[0] = [makeNimstrLit("   targets")]; };
		L1: do {
			F.line = 215;
			var child_184508 = null;
			F.line = 3909;
			var colontmp__184547 = null;
			F.line = 356;
			colontmp__184547 = node_182328.targets;
			F.line = 3911;
			var i_184550 = 0;
			F.line = 3912;
			var l_184552 = (colontmp__184547 != null ? colontmp__184547.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_184550 < l_184552)) break L3;
						F.line = 3914;
						child_184508 = colontmp__184547[chckIndx(i_184550, 0, colontmp__184547.length+0-1)-0];
						if ((child_184508 == null)) {
						F.line = 356;
						add_182829(string_seq_184489, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 356;
						add_182829(string_seq_184489, 0, indent_177636(HEX24_177554(child_184508), 2));
						}
						
						F.line = 3915;
						i_184550 = addInt(i_184550, 1);
						if (!(((colontmp__184547 != null ? colontmp__184547.length : 0) == l_184552))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_184476 = nimCopy(null, nsuJoinSep(string_seq_184489[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184476;

}

function HEX24_182347(node_182349) {
	var result_185671 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 366;
		var string_seq_185684 = [nimCopy(null, [makeNimstrLit("If")], NTI182673)];
		if ((node_182349.test == null)) {
		F.line = 366;
		add_182829(string_seq_185684, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 366;
		add_182829(string_seq_185684, 0, indent_177636(HEX24_177554(node_182349.test), 1));
		}
		
		F.line = 366;
		if (string_seq_185684[0] != null) { string_seq_185684[0].push(makeNimstrLit("   body")); } else { string_seq_185684[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185740 = null;
			F.line = 3909;
			var colontmp__185835 = null;
			F.line = 366;
			colontmp__185835 = node_182349.body;
			F.line = 3911;
			var i_185838 = 0;
			F.line = 3912;
			var l_185840 = (colontmp__185835 != null ? colontmp__185835.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185838 < l_185840)) break L3;
						F.line = 3914;
						child_185740 = colontmp__185835[chckIndx(i_185838, 0, colontmp__185835.length+0-1)-0];
						if ((child_185740 == null)) {
						F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(HEX24_177554(child_185740), 2));
						}
						
						F.line = 3915;
						i_185838 = addInt(i_185838, 1);
						if (!(((colontmp__185835 != null ? colontmp__185835.length : 0) == l_185840))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 366;
		if (string_seq_185684[0] != null) { string_seq_185684[0].push(makeNimstrLit("   orelse")); } else { string_seq_185684[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185796 = null;
			F.line = 3909;
			var colontmp__185842 = null;
			F.line = 366;
			colontmp__185842 = node_182349.orelse;
			F.line = 3911;
			var i_185845 = 0;
			F.line = 3912;
			var l_185847 = (colontmp__185842 != null ? colontmp__185842.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185845 < l_185847)) break L6;
						F.line = 3914;
						child_185796 = colontmp__185842[chckIndx(i_185845, 0, colontmp__185842.length+0-1)-0];
						if ((child_185796 == null)) {
						F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(HEX24_177554(child_185796), 2));
						}
						
						F.line = 3915;
						i_185845 = addInt(i_185845, 1);
						if (!(((colontmp__185842 != null ? colontmp__185842.length : 0) == l_185847))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185671 = nimCopy(null, nsuJoinSep(string_seq_185684[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185671;

}

function HEX24_182398(node_182400) {
	var result_188062 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 390;
		var string_seq_188075 = [nimCopy(null, [makeNimstrLit("UnaryOp")], NTI182673)];
		if ((node_182400.op == null)) {
		F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(HEX24_177554(node_182400.op), 1));
		}
		
		if ((node_182400.operand == null)) {
		F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(HEX24_177554(node_182400.operand), 1));
		}
		
		F.line = 476;
		result_188062 = nimCopy(null, nsuJoinSep(string_seq_188075[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188062;

}

function HEX24_182353(node_182355) {
	var result_186139 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 368;
		var string_seq_186152 = [nimCopy(null, [makeNimstrLit("AsyncWith")], NTI182673)];
		F.line = 368;
		if (string_seq_186152[0] != null) { string_seq_186152[0].push(makeNimstrLit("   items")); } else { string_seq_186152[0] = [makeNimstrLit("   items")]; };
		L1: do {
			F.line = 215;
			var child_186171 = null;
			F.line = 3909;
			var colontmp__186266 = null;
			F.line = 368;
			colontmp__186266 = node_182355.items;
			F.line = 3911;
			var i_186269 = 0;
			F.line = 3912;
			var l_186271 = (colontmp__186266 != null ? colontmp__186266.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_186269 < l_186271)) break L3;
						F.line = 3914;
						child_186171 = colontmp__186266[chckIndx(i_186269, 0, colontmp__186266.length+0-1)-0];
						if ((child_186171 == null)) {
						F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(HEX24_177554(child_186171), 2));
						}
						
						F.line = 3915;
						i_186269 = addInt(i_186269, 1);
						if (!(((colontmp__186266 != null ? colontmp__186266.length : 0) == l_186271))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 368;
		if (string_seq_186152[0] != null) { string_seq_186152[0].push(makeNimstrLit("   body")); } else { string_seq_186152[0] = [makeNimstrLit("   body")]; };
		L4: do {
			F.line = 215;
			var child_186227 = null;
			F.line = 3909;
			var colontmp__186273 = null;
			F.line = 368;
			colontmp__186273 = node_182355.body;
			F.line = 3911;
			var i_186276 = 0;
			F.line = 3912;
			var l_186278 = (colontmp__186273 != null ? colontmp__186273.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_186276 < l_186278)) break L6;
						F.line = 3914;
						child_186227 = colontmp__186273[chckIndx(i_186276, 0, colontmp__186273.length+0-1)-0];
						if ((child_186227 == null)) {
						F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(HEX24_177554(child_186227), 2));
						}
						
						F.line = 3915;
						i_186276 = addInt(i_186276, 1);
						if (!(((colontmp__186273 != null ? colontmp__186273.length : 0) == l_186278))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_186139 = nimCopy(null, nsuJoinSep(string_seq_186152[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186139;

}

function HEX24_182338(node_182340) {
	var result_185018 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 363;
		var string_seq_185031 = [nimCopy(null, [makeNimstrLit("For")], NTI182673)];
		if ((node_182340.target == null)) {
		F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(node_182340.target), 1));
		}
		
		if ((node_182340.iter == null)) {
		F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(node_182340.iter), 1));
		}
		
		F.line = 363;
		if (string_seq_185031[0] != null) { string_seq_185031[0].push(makeNimstrLit("   body")); } else { string_seq_185031[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185124 = null;
			F.line = 3909;
			var colontmp__185219 = null;
			F.line = 363;
			colontmp__185219 = node_182340.body;
			F.line = 3911;
			var i_185222 = 0;
			F.line = 3912;
			var l_185224 = (colontmp__185219 != null ? colontmp__185219.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185222 < l_185224)) break L3;
						F.line = 3914;
						child_185124 = colontmp__185219[chckIndx(i_185222, 0, colontmp__185219.length+0-1)-0];
						if ((child_185124 == null)) {
						F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(child_185124), 2));
						}
						
						F.line = 3915;
						i_185222 = addInt(i_185222, 1);
						if (!(((colontmp__185219 != null ? colontmp__185219.length : 0) == l_185224))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 363;
		if (string_seq_185031[0] != null) { string_seq_185031[0].push(makeNimstrLit("   orelse")); } else { string_seq_185031[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185180 = null;
			F.line = 3909;
			var colontmp__185226 = null;
			F.line = 363;
			colontmp__185226 = node_182340.orelse;
			F.line = 3911;
			var i_185229 = 0;
			F.line = 3912;
			var l_185231 = (colontmp__185226 != null ? colontmp__185226.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185229 < l_185231)) break L6;
						F.line = 3914;
						child_185180 = colontmp__185226[chckIndx(i_185229, 0, colontmp__185226.length+0-1)-0];
						if ((child_185180 == null)) {
						F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(child_185180), 2));
						}
						
						F.line = 3915;
						i_185229 = addInt(i_185229, 1);
						if (!(((colontmp__185226 != null ? colontmp__185226.length : 0) == l_185231))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185018 = nimCopy(null, nsuJoinSep(string_seq_185031[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185018;

}

function HEX24_182359(node_182361) {
	var result_186399 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 371;
		var string_seq_186412 = [nimCopy(null, [makeNimstrLit("Try")], NTI182673)];
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   body")); } else { string_seq_186412[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_186431 = null;
			F.line = 3909;
			var colontmp__186766 = null;
			F.line = 371;
			colontmp__186766 = node_182361.body;
			F.line = 3911;
			var i_186769 = 0;
			F.line = 3912;
			var l_186771 = (colontmp__186766 != null ? colontmp__186766.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_186769 < l_186771)) break L3;
						F.line = 3914;
						child_186431 = colontmp__186766[chckIndx(i_186769, 0, colontmp__186766.length+0-1)-0];
						if ((child_186431 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186431), 2));
						}
						
						F.line = 3915;
						i_186769 = addInt(i_186769, 1);
						if (!(((colontmp__186766 != null ? colontmp__186766.length : 0) == l_186771))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   handlers")); } else { string_seq_186412[0] = [makeNimstrLit("   handlers")]; };
		L4: do {
			F.line = 215;
			var child_186615 = null;
			F.line = 3909;
			var colontmp__186773 = null;
			F.line = 371;
			colontmp__186773 = node_182361.handlers;
			F.line = 3911;
			var i_186776 = 0;
			F.line = 3912;
			var l_186778 = (colontmp__186773 != null ? colontmp__186773.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_186776 < l_186778)) break L6;
						F.line = 3914;
						child_186615 = colontmp__186773[chckIndx(i_186776, 0, colontmp__186773.length+0-1)-0];
						if ((child_186615 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186615), 2));
						}
						
						F.line = 3915;
						i_186776 = addInt(i_186776, 1);
						if (!(((colontmp__186773 != null ? colontmp__186773.length : 0) == l_186778))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   orelse")); } else { string_seq_186412[0] = [makeNimstrLit("   orelse")]; };
		L7: do {
			F.line = 215;
			var child_186671 = null;
			F.line = 3909;
			var colontmp__186780 = null;
			F.line = 371;
			colontmp__186780 = node_182361.orelse;
			F.line = 3911;
			var i_186783 = 0;
			F.line = 3912;
			var l_186785 = (colontmp__186780 != null ? colontmp__186780.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_186783 < l_186785)) break L9;
						F.line = 3914;
						child_186671 = colontmp__186780[chckIndx(i_186783, 0, colontmp__186780.length+0-1)-0];
						if ((child_186671 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186671), 2));
						}
						
						F.line = 3915;
						i_186783 = addInt(i_186783, 1);
						if (!(((colontmp__186780 != null ? colontmp__186780.length : 0) == l_186785))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   finalbody")); } else { string_seq_186412[0] = [makeNimstrLit("   finalbody")]; };
		L10: do {
			F.line = 215;
			var child_186727 = null;
			F.line = 3909;
			var colontmp__186787 = null;
			F.line = 371;
			colontmp__186787 = node_182361.finalbody;
			F.line = 3911;
			var i_186790 = 0;
			F.line = 3912;
			var l_186792 = (colontmp__186787 != null ? colontmp__186787.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_186790 < l_186792)) break L12;
						F.line = 3914;
						child_186727 = colontmp__186787[chckIndx(i_186790, 0, colontmp__186787.length+0-1)-0];
						if ((child_186727 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186727), 2));
						}
						
						F.line = 3915;
						i_186790 = addInt(i_186790, 1);
						if (!(((colontmp__186787 != null ? colontmp__186787.length : 0) == l_186792))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_186399 = nimCopy(null, nsuJoinSep(string_seq_186412[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186399;

}

function HEX24_182413(node_182415) {
	var result_188660 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 395;
		var string_seq_188673 = [nimCopy(null, [makeNimstrLit("ListComp")], NTI182673)];
		if ((node_182415.elt == null)) {
		F.line = 395;
		add_182829(string_seq_188673, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 395;
		add_182829(string_seq_188673, 0, indent_177636(HEX24_177554(node_182415.elt), 1));
		}
		
		F.line = 395;
		if (string_seq_188673[0] != null) { string_seq_188673[0].push(makeNimstrLit("   generators")); } else { string_seq_188673[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_188815 = null;
			F.line = 3909;
			var colontmp__188854 = null;
			F.line = 395;
			colontmp__188854 = node_182415.generators;
			F.line = 3911;
			var i_188857 = 0;
			F.line = 3912;
			var l_188859 = (colontmp__188854 != null ? colontmp__188854.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188857 < l_188859)) break L3;
						F.line = 3914;
						child_188815 = colontmp__188854[chckIndx(i_188857, 0, colontmp__188854.length+0-1)-0];
						if ((child_188815 == null)) {
						F.line = 395;
						add_182829(string_seq_188673, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 395;
						add_182829(string_seq_188673, 0, indent_177636(HEX24_177554(child_188815), 2));
						}
						
						F.line = 3915;
						i_188857 = addInt(i_188857, 1);
						if (!(((colontmp__188854 != null ? colontmp__188854.length : 0) == l_188859))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188660 = nimCopy(null, nsuJoinSep(string_seq_188673[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188660;

}

function HEX24_182407(node_182409) {
	var result_188411 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 393;
		var string_seq_188424 = [nimCopy(null, [makeNimstrLit("Dict")], NTI182673)];
		F.line = 393;
		if (string_seq_188424[0] != null) { string_seq_188424[0].push(makeNimstrLit("   keys")); } else { string_seq_188424[0] = [makeNimstrLit("   keys")]; };
		L1: do {
			F.line = 215;
			var child_188443 = null;
			F.line = 3909;
			var colontmp__188538 = null;
			F.line = 393;
			colontmp__188538 = node_182409.keys;
			F.line = 3911;
			var i_188541 = 0;
			F.line = 3912;
			var l_188543 = (colontmp__188538 != null ? colontmp__188538.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188541 < l_188543)) break L3;
						F.line = 3914;
						child_188443 = colontmp__188538[chckIndx(i_188541, 0, colontmp__188538.length+0-1)-0];
						if ((child_188443 == null)) {
						F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(HEX24_177554(child_188443), 2));
						}
						
						F.line = 3915;
						i_188541 = addInt(i_188541, 1);
						if (!(((colontmp__188538 != null ? colontmp__188538.length : 0) == l_188543))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 393;
		if (string_seq_188424[0] != null) { string_seq_188424[0].push(makeNimstrLit("   values")); } else { string_seq_188424[0] = [makeNimstrLit("   values")]; };
		L4: do {
			F.line = 215;
			var child_188499 = null;
			F.line = 3909;
			var colontmp__188545 = null;
			F.line = 393;
			colontmp__188545 = node_182409.values;
			F.line = 3911;
			var i_188548 = 0;
			F.line = 3912;
			var l_188550 = (colontmp__188545 != null ? colontmp__188545.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_188548 < l_188550)) break L6;
						F.line = 3914;
						child_188499 = colontmp__188545[chckIndx(i_188548, 0, colontmp__188545.length+0-1)-0];
						if ((child_188499 == null)) {
						F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(HEX24_177554(child_188499), 2));
						}
						
						F.line = 3915;
						i_188548 = addInt(i_188548, 1);
						if (!(((colontmp__188545 != null ? colontmp__188545.length : 0) == l_188550))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188411 = nimCopy(null, nsuJoinSep(string_seq_188424[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188411;

}

function HEX24_182512(node_182514) {
	var result_191811 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191811 = nimCopy(null, makeNimstrLit("Add"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191811;

}

function HEX24_182344(node_182346) {
	var result_185478 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 365;
		var string_seq_185491 = [nimCopy(null, [makeNimstrLit("While")], NTI182673)];
		if ((node_182346.test == null)) {
		F.line = 365;
		add_182829(string_seq_185491, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 365;
		add_182829(string_seq_185491, 0, indent_177636(HEX24_177554(node_182346.test), 1));
		}
		
		F.line = 365;
		if (string_seq_185491[0] != null) { string_seq_185491[0].push(makeNimstrLit("   body")); } else { string_seq_185491[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185547 = null;
			F.line = 3909;
			var colontmp__185642 = null;
			F.line = 365;
			colontmp__185642 = node_182346.body;
			F.line = 3911;
			var i_185645 = 0;
			F.line = 3912;
			var l_185647 = (colontmp__185642 != null ? colontmp__185642.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185645 < l_185647)) break L3;
						F.line = 3914;
						child_185547 = colontmp__185642[chckIndx(i_185645, 0, colontmp__185642.length+0-1)-0];
						if ((child_185547 == null)) {
						F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(HEX24_177554(child_185547), 2));
						}
						
						F.line = 3915;
						i_185645 = addInt(i_185645, 1);
						if (!(((colontmp__185642 != null ? colontmp__185642.length : 0) == l_185647))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 365;
		if (string_seq_185491[0] != null) { string_seq_185491[0].push(makeNimstrLit("   orelse")); } else { string_seq_185491[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185603 = null;
			F.line = 3909;
			var colontmp__185649 = null;
			F.line = 365;
			colontmp__185649 = node_182346.orelse;
			F.line = 3911;
			var i_185652 = 0;
			F.line = 3912;
			var l_185654 = (colontmp__185649 != null ? colontmp__185649.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185652 < l_185654)) break L6;
						F.line = 3914;
						child_185603 = colontmp__185649[chckIndx(i_185652, 0, colontmp__185649.length+0-1)-0];
						if ((child_185603 == null)) {
						F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(HEX24_177554(child_185603), 2));
						}
						
						F.line = 3915;
						i_185652 = addInt(i_185652, 1);
						if (!(((colontmp__185649 != null ? colontmp__185649.length : 0) == l_185654))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185478 = nimCopy(null, nsuJoinSep(string_seq_185491[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185478;

}

function HEX24_182419(node_182421) {
	var result_189006 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 397;
		var string_seq_189019 = [nimCopy(null, [makeNimstrLit("DictComp")], NTI182673)];
		if ((node_182421.key == null)) {
		F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(HEX24_177554(node_182421.key), 1));
		}
		
		if ((node_182421.value == null)) {
		F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(HEX24_177554(node_182421.value), 1));
		}
		
		F.line = 397;
		if (string_seq_189019[0] != null) { string_seq_189019[0].push(makeNimstrLit("   generators")); } else { string_seq_189019[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_189112 = null;
			F.line = 3909;
			var colontmp__189151 = null;
			F.line = 397;
			colontmp__189151 = node_182421.generators;
			F.line = 3911;
			var i_189154 = 0;
			F.line = 3912;
			var l_189156 = (colontmp__189151 != null ? colontmp__189151.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_189154 < l_189156)) break L3;
						F.line = 3914;
						child_189112 = colontmp__189151[chckIndx(i_189154, 0, colontmp__189151.length+0-1)-0];
						if ((child_189112 == null)) {
						F.line = 397;
						add_182829(string_seq_189019, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 397;
						add_182829(string_seq_189019, 0, indent_177636(HEX24_177554(child_189112), 2));
						}
						
						F.line = 3915;
						i_189154 = addInt(i_189154, 1);
						if (!(((colontmp__189151 != null ? colontmp__189151.length : 0) == l_189156))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189006 = nimCopy(null, nsuJoinSep(string_seq_189019[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189006;

}

function HEX24_182362(node_182364) {
	var result_186809 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 372;
		var string_seq_186822 = [nimCopy(null, [makeNimstrLit("Assert")], NTI182673)];
		if ((node_182364.test == null)) {
		F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(HEX24_177554(node_182364.test), 1));
		}
		
		if ((node_182364.msg == null)) {
		F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(HEX24_177554(node_182364.msg), 1));
		}
		
		F.line = 476;
		result_186809 = nimCopy(null, nsuJoinSep(string_seq_186822[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186809;

}

function HEX24_182494(node_182496) {
	var result_191460 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 424;
		var string_seq_191473 = [nimCopy(null, [makeNimstrLit("ExtSlice")], NTI182673)];
		F.line = 424;
		if (string_seq_191473[0] != null) { string_seq_191473[0].push(makeNimstrLit("   dims")); } else { string_seq_191473[0] = [makeNimstrLit("   dims")]; };
		L1: do {
			F.line = 215;
			var child_191615 = null;
			F.line = 3909;
			var colontmp__191654 = null;
			F.line = 424;
			colontmp__191654 = node_182496.dims;
			F.line = 3911;
			var i_191657 = 0;
			F.line = 3912;
			var l_191659 = (colontmp__191654 != null ? colontmp__191654.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_191657 < l_191659)) break L3;
						F.line = 3914;
						child_191615 = colontmp__191654[chckIndx(i_191657, 0, colontmp__191654.length+0-1)-0];
						if ((child_191615 == null)) {
						F.line = 424;
						add_182829(string_seq_191473, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 424;
						add_182829(string_seq_191473, 0, indent_177636(HEX24_177554(child_191615), 2));
						}
						
						F.line = 3915;
						i_191657 = addInt(i_191657, 1);
						if (!(((colontmp__191654 != null ? colontmp__191654.length : 0) == l_191659))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_191460 = nimCopy(null, nsuJoinSep(string_seq_191473[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191460;

}

function HEX24_182356(node_182358) {
	var result_186295 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 370;
		var string_seq_186308 = [nimCopy(null, [makeNimstrLit("Raise")], NTI182673)];
		if ((node_182358.exc == null)) {
		F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(HEX24_177554(node_182358.exc), 1));
		}
		
		if ((node_182358.cause == null)) {
		F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(HEX24_177554(node_182358.cause), 1));
		}
		
		F.line = 476;
		result_186295 = nimCopy(null, nsuJoinSep(string_seq_186308[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186295;

}

function HEX24_182473(node_182475) {
	var result_191217 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191217 = nimCopy(null, makeNimstrLit("Store"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191217;

}

function HEX24_182416(node_182418) {
	var result_188876 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 396;
		var string_seq_188889 = [nimCopy(null, [makeNimstrLit("SetComp")], NTI182673)];
		if ((node_182418.elt == null)) {
		F.line = 396;
		add_182829(string_seq_188889, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 396;
		add_182829(string_seq_188889, 0, indent_177636(HEX24_177554(node_182418.elt), 1));
		}
		
		F.line = 396;
		if (string_seq_188889[0] != null) { string_seq_188889[0].push(makeNimstrLit("   generators")); } else { string_seq_188889[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_188945 = null;
			F.line = 3909;
			var colontmp__188984 = null;
			F.line = 396;
			colontmp__188984 = node_182418.generators;
			F.line = 3911;
			var i_188987 = 0;
			F.line = 3912;
			var l_188989 = (colontmp__188984 != null ? colontmp__188984.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188987 < l_188989)) break L3;
						F.line = 3914;
						child_188945 = colontmp__188984[chckIndx(i_188987, 0, colontmp__188984.length+0-1)-0];
						if ((child_188945 == null)) {
						F.line = 396;
						add_182829(string_seq_188889, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 396;
						add_182829(string_seq_188889, 0, indent_177636(HEX24_177554(child_188945), 2));
						}
						
						F.line = 3915;
						i_188987 = addInt(i_188987, 1);
						if (!(((colontmp__188984 != null ? colontmp__188984.length : 0) == l_188989))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188876 = nimCopy(null, nsuJoinSep(string_seq_188889[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188876;

}

function HEX24_182506(node_182508) {
	var result_191777 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 428;
		result_191777 = nimCopy(null, makeNimstrLit("Or"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191777;

}

function HEX24_182323(node_182325) {
	var result_184409 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 354;
		var string_seq_184422 = [nimCopy(null, [makeNimstrLit("Return")], NTI182673)];
		if ((node_182325.value == null)) {
		F.line = 354;
		add_182829(string_seq_184422, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 354;
		add_182829(string_seq_184422, 0, indent_177636(HEX24_177554(node_182325.value), 1));
		}
		
		F.line = 476;
		result_184409 = nimCopy(null, nsuJoinSep(string_seq_184422[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184409;

}

function HEX24_182317(node_182319) {
	var result_183720 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 347;
		var string_seq_183733 = [nimCopy(null, [makeNimstrLit("AsyncFunctionDef")], NTI182673)];
		if ((node_182319.name == null)) {
		F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(node_182319.name), 1));
		}
		
		if ((node_182319.args == null)) {
		F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(node_182319.args), 1));
		}
		
		F.line = 349;
		if (string_seq_183733[0] != null) { string_seq_183733[0].push(makeNimstrLit("   body")); } else { string_seq_183733[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_183826 = null;
			F.line = 3909;
			var colontmp__183958 = null;
			F.line = 349;
			colontmp__183958 = node_182319.body;
			F.line = 3911;
			var i_183961 = 0;
			F.line = 3912;
			var l_183963 = (colontmp__183958 != null ? colontmp__183958.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183961 < l_183963)) break L3;
						F.line = 3914;
						child_183826 = colontmp__183958[chckIndx(i_183961, 0, colontmp__183958.length+0-1)-0];
						if ((child_183826 == null)) {
						F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(child_183826), 2));
						}
						
						F.line = 3915;
						i_183961 = addInt(i_183961, 1);
						if (!(((colontmp__183958 != null ? colontmp__183958.length : 0) == l_183963))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 349;
		if (string_seq_183733[0] != null) { string_seq_183733[0].push(makeNimstrLit("   decorator_list")); } else { string_seq_183733[0] = [makeNimstrLit("   decorator_list")]; };
		L4: do {
			F.line = 215;
			var child_183882 = null;
			F.line = 3909;
			var colontmp__183965 = null;
			F.line = 349;
			colontmp__183965 = node_182319.decorator_list;
			F.line = 3911;
			var i_183968 = 0;
			F.line = 3912;
			var l_183970 = (colontmp__183965 != null ? colontmp__183965.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_183968 < l_183970)) break L6;
						F.line = 3914;
						child_183882 = colontmp__183965[chckIndx(i_183968, 0, colontmp__183965.length+0-1)-0];
						if ((child_183882 == null)) {
						F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(child_183882), 2));
						}
						
						F.line = 3915;
						i_183968 = addInt(i_183968, 1);
						if (!(((colontmp__183965 != null ? colontmp__183965.length : 0) == l_183970))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182319.returns == null)) {
		F.line = 349;
		add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 349;
		add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(node_182319.returns), 1));
		}
		
		F.line = 476;
		result_183720 = nimCopy(null, nsuJoinSep(string_seq_183733[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183720;

}

function HEX24_182491(node_182493) {
	var result_191319 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 423;
		var string_seq_191332 = [nimCopy(null, [makeNimstrLit("Slice")], NTI182673)];
		if ((node_182493.lower == null)) {
		F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(HEX24_177554(node_182493.lower), 1));
		}
		
		if ((node_182493.upper == null)) {
		F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(HEX24_177554(node_182493.upper), 1));
		}
		
		if ((node_182493.step == null)) {
		F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(HEX24_177554(node_182493.step), 1));
		}
		
		F.line = 476;
		result_191319 = nimCopy(null, nsuJoinSep(string_seq_191332[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191319;

}

function HEX24_182497(node_182499) {
	var result_191676 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 425;
		var string_seq_191689 = [nimCopy(null, [makeNimstrLit("Index")], NTI182673)];
		if ((node_182499.value == null)) {
		F.line = 425;
		add_182829(string_seq_191689, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 425;
		add_182829(string_seq_191689, 0, indent_177636(HEX24_177554(node_182499.value), 1));
		}
		
		F.line = 476;
		result_191676 = nimCopy(null, nsuJoinSep(string_seq_191689[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191676;

}

function HEX24_182332(node_182334) {
	var result_184699 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 358;
		var string_seq_184712 = [nimCopy(null, [makeNimstrLit("AugAssign")], NTI182673)];
		if ((node_182334.target == null)) {
		F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(HEX24_177554(node_182334.target), 1));
		}
		
		if ((node_182334.op == null)) {
		F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(HEX24_177554(node_182334.op), 1));
		}
		
		if ((node_182334.value == null)) {
		F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(HEX24_177554(node_182334.value), 1));
		}
		
		F.line = 476;
		result_184699 = nimCopy(null, nsuJoinSep(string_seq_184712[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184699;

}

function HEX24_182302(node_182304) {
	var result_182940 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 335;
		var string_seq_182953 = [nimCopy(null, [makeNimstrLit("Interactive")], NTI182673)];
		F.line = 335;
		if (string_seq_182953[0] != null) { string_seq_182953[0].push(makeNimstrLit("   body")); } else { string_seq_182953[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_182972 = null;
			F.line = 3909;
			var colontmp__183011 = null;
			F.line = 335;
			colontmp__183011 = node_182304.body;
			F.line = 3911;
			var i_183014 = 0;
			F.line = 3912;
			var l_183016 = (colontmp__183011 != null ? colontmp__183011.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183014 < l_183016)) break L3;
						F.line = 3914;
						child_182972 = colontmp__183011[chckIndx(i_183014, 0, colontmp__183011.length+0-1)-0];
						if ((child_182972 == null)) {
						F.line = 335;
						add_182829(string_seq_182953, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 335;
						add_182829(string_seq_182953, 0, indent_177636(HEX24_177554(child_182972), 2));
						}
						
						F.line = 3915;
						i_183014 = addInt(i_183014, 1);
						if (!(((colontmp__183011 != null ? colontmp__183011.length : 0) == l_183016))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_182940 = nimCopy(null, nsuJoinSep(string_seq_182953[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_182940;

}

function HEX24_182470(node_182472) {
	var result_191200 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191200 = nimCopy(null, makeNimstrLit("Load"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191200;

}

function HEX24_182308(node_182310) {
	var result_183100 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 337;
		var string_seq_183113 = [nimCopy(null, [makeNimstrLit("Suite")], NTI182673)];
		F.line = 337;
		if (string_seq_183113[0] != null) { string_seq_183113[0].push(makeNimstrLit("   body")); } else { string_seq_183113[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_183132 = null;
			F.line = 3909;
			var colontmp__183171 = null;
			F.line = 337;
			colontmp__183171 = node_182310.body;
			F.line = 3911;
			var i_183174 = 0;
			F.line = 3912;
			var l_183176 = (colontmp__183171 != null ? colontmp__183171.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183174 < l_183176)) break L3;
						F.line = 3914;
						child_183132 = colontmp__183171[chckIndx(i_183174, 0, colontmp__183171.length+0-1)-0];
						if ((child_183132 == null)) {
						F.line = 337;
						add_182829(string_seq_183113, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 337;
						add_182829(string_seq_183113, 0, indent_177636(HEX24_177554(child_183132), 2));
						}
						
						F.line = 3915;
						i_183174 = addInt(i_183174, 1);
						if (!(((colontmp__183171 != null ? colontmp__183171.length : 0) == l_183176))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_183100 = nimCopy(null, nsuJoinSep(string_seq_183113[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183100;

}

function HEX24_182503(node_182505) {
	var result_191760 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 428;
		result_191760 = nimCopy(null, makeNimstrLit("And"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191760;

}

function HEX24_182314(node_182316) {
	var result_183297 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 343;
		var string_seq_183310 = [nimCopy(null, [makeNimstrLit("FunctionDef")], NTI182673)];
		if ((node_182316.name == null)) {
		F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(node_182316.name), 1));
		}
		
		if ((node_182316.args == null)) {
		F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(node_182316.args), 1));
		}
		
		F.line = 345;
		if (string_seq_183310[0] != null) { string_seq_183310[0].push(makeNimstrLit("   body")); } else { string_seq_183310[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_183403 = null;
			F.line = 3909;
			var colontmp__183691 = null;
			F.line = 345;
			colontmp__183691 = node_182316.body;
			F.line = 3911;
			var i_183694 = 0;
			F.line = 3912;
			var l_183696 = (colontmp__183691 != null ? colontmp__183691.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183694 < l_183696)) break L3;
						F.line = 3914;
						child_183403 = colontmp__183691[chckIndx(i_183694, 0, colontmp__183691.length+0-1)-0];
						if ((child_183403 == null)) {
						F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(child_183403), 2));
						}
						
						F.line = 3915;
						i_183694 = addInt(i_183694, 1);
						if (!(((colontmp__183691 != null ? colontmp__183691.length : 0) == l_183696))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 345;
		if (string_seq_183310[0] != null) { string_seq_183310[0].push(makeNimstrLit("   decorator_list")); } else { string_seq_183310[0] = [makeNimstrLit("   decorator_list")]; };
		L4: do {
			F.line = 215;
			var child_183615 = null;
			F.line = 3909;
			var colontmp__183698 = null;
			F.line = 345;
			colontmp__183698 = node_182316.decorator_list;
			F.line = 3911;
			var i_183701 = 0;
			F.line = 3912;
			var l_183703 = (colontmp__183698 != null ? colontmp__183698.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_183701 < l_183703)) break L6;
						F.line = 3914;
						child_183615 = colontmp__183698[chckIndx(i_183701, 0, colontmp__183698.length+0-1)-0];
						if ((child_183615 == null)) {
						F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(child_183615), 2));
						}
						
						F.line = 3915;
						i_183701 = addInt(i_183701, 1);
						if (!(((colontmp__183698 != null ? colontmp__183698.length : 0) == l_183703))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182316.returns == null)) {
		F.line = 345;
		add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 345;
		add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(node_182316.returns), 1));
		}
		
		F.line = 476;
		result_183297 = nimCopy(null, nsuJoinSep(string_seq_183310[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183297;

}

function HEX24_182521(node_182523) {
	var result_191862 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191862 = nimCopy(null, makeNimstrLit("MatMult"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191862;

}

function HEX24_182320(node_182322) {
	var result_183987 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 352;
		var string_seq_184000 = [nimCopy(null, [makeNimstrLit("ClassDef")], NTI182673)];
		if ((node_182322.name == null)) {
		F.line = 352;
		add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 352;
		add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(node_182322.name), 1));
		}
		
		F.line = 352;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   bases")); } else { string_seq_184000[0] = [makeNimstrLit("   bases")]; };
		L1: do {
			F.line = 215;
			var child_184056 = null;
			F.line = 3909;
			var colontmp__184366 = null;
			F.line = 352;
			colontmp__184366 = node_182322.bases;
			F.line = 3911;
			var i_184369 = 0;
			F.line = 3912;
			var l_184371 = (colontmp__184366 != null ? colontmp__184366.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_184369 < l_184371)) break L3;
						F.line = 3914;
						child_184056 = colontmp__184366[chckIndx(i_184369, 0, colontmp__184366.length+0-1)-0];
						if ((child_184056 == null)) {
						F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184056), 2));
						}
						
						F.line = 3915;
						i_184369 = addInt(i_184369, 1);
						if (!(((colontmp__184366 != null ? colontmp__184366.length : 0) == l_184371))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 352;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   keywords")); } else { string_seq_184000[0] = [makeNimstrLit("   keywords")]; };
		L4: do {
			F.line = 215;
			var child_184215 = null;
			F.line = 3909;
			var colontmp__184373 = null;
			F.line = 352;
			colontmp__184373 = node_182322.keywords;
			F.line = 3911;
			var i_184376 = 0;
			F.line = 3912;
			var l_184378 = (colontmp__184373 != null ? colontmp__184373.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_184376 < l_184378)) break L6;
						F.line = 3914;
						child_184215 = colontmp__184373[chckIndx(i_184376, 0, colontmp__184373.length+0-1)-0];
						if ((child_184215 == null)) {
						F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184215), 2));
						}
						
						F.line = 3915;
						i_184376 = addInt(i_184376, 1);
						if (!(((colontmp__184373 != null ? colontmp__184373.length : 0) == l_184378))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 353;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   body")); } else { string_seq_184000[0] = [makeNimstrLit("   body")]; };
		L7: do {
			F.line = 215;
			var child_184271 = null;
			F.line = 3909;
			var colontmp__184380 = null;
			F.line = 353;
			colontmp__184380 = node_182322.body;
			F.line = 3911;
			var i_184383 = 0;
			F.line = 3912;
			var l_184385 = (colontmp__184380 != null ? colontmp__184380.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_184383 < l_184385)) break L9;
						F.line = 3914;
						child_184271 = colontmp__184380[chckIndx(i_184383, 0, colontmp__184380.length+0-1)-0];
						if ((child_184271 == null)) {
						F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184271), 2));
						}
						
						F.line = 3915;
						i_184383 = addInt(i_184383, 1);
						if (!(((colontmp__184380 != null ? colontmp__184380.length : 0) == l_184385))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 353;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   decorator_list")); } else { string_seq_184000[0] = [makeNimstrLit("   decorator_list")]; };
		L10: do {
			F.line = 215;
			var child_184327 = null;
			F.line = 3909;
			var colontmp__184387 = null;
			F.line = 353;
			colontmp__184387 = node_182322.decorator_list;
			F.line = 3911;
			var i_184390 = 0;
			F.line = 3912;
			var l_184392 = (colontmp__184387 != null ? colontmp__184387.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_184390 < l_184392)) break L12;
						F.line = 3914;
						child_184327 = colontmp__184387[chckIndx(i_184390, 0, colontmp__184387.length+0-1)-0];
						if ((child_184327 == null)) {
						F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184327), 2));
						}
						
						F.line = 3915;
						i_184390 = addInt(i_184390, 1);
						if (!(((colontmp__184387 != null ? colontmp__184387.length : 0) == l_184392))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_183987 = nimCopy(null, nsuJoinSep(string_seq_184000[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183987;

}

function HEX24_182536(node_182538) {
	var result_191947 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191947 = nimCopy(null, makeNimstrLit("RShift"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191947;

}

function HEX24_182455(node_182457) {
	var result_190715 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 414;
		var string_seq_190728 = [nimCopy(null, [makeNimstrLit("Starred")], NTI182673)];
		if ((node_182457.value == null)) {
		F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(HEX24_177554(node_182457.value), 1));
		}
		
		if ((node_182457.ctx == null)) {
		F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(HEX24_177554(node_182457.ctx), 1));
		}
		
		F.line = 476;
		result_190715 = nimCopy(null, nsuJoinSep(string_seq_190728[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190715;

}

function HEX24_182515(node_182517) {
	var result_191828 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191828 = nimCopy(null, makeNimstrLit("Sub"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191828;

}

function HEX24_182434(node_182436) {
	var result_189504 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 405;
		var string_seq_189517 = [nimCopy(null, [makeNimstrLit("Compare")], NTI182673)];
		if ((node_182436.left == null)) {
		F.line = 405;
		add_182829(string_seq_189517, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 405;
		add_182829(string_seq_189517, 0, indent_177636(HEX24_177554(node_182436.left), 1));
		}
		
		F.line = 405;
		if (string_seq_189517[0] != null) { string_seq_189517[0].push(makeNimstrLit("   ops")); } else { string_seq_189517[0] = [makeNimstrLit("   ops")]; };
		L1: do {
			F.line = 215;
			var child_189815 = null;
			F.line = 3909;
			var colontmp__189910 = null;
			F.line = 405;
			colontmp__189910 = node_182436.ops;
			F.line = 3911;
			var i_189913 = 0;
			F.line = 3912;
			var l_189915 = (colontmp__189910 != null ? colontmp__189910.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_189913 < l_189915)) break L3;
						F.line = 3914;
						child_189815 = colontmp__189910[chckIndx(i_189913, 0, colontmp__189910.length+0-1)-0];
						if ((child_189815 == null)) {
						F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(HEX24_177554(child_189815), 2));
						}
						
						F.line = 3915;
						i_189913 = addInt(i_189913, 1);
						if (!(((colontmp__189910 != null ? colontmp__189910.length : 0) == l_189915))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 405;
		if (string_seq_189517[0] != null) { string_seq_189517[0].push(makeNimstrLit("   comparators")); } else { string_seq_189517[0] = [makeNimstrLit("   comparators")]; };
		L4: do {
			F.line = 215;
			var child_189871 = null;
			F.line = 3909;
			var colontmp__189917 = null;
			F.line = 405;
			colontmp__189917 = node_182436.comparators;
			F.line = 3911;
			var i_189920 = 0;
			F.line = 3912;
			var l_189922 = (colontmp__189917 != null ? colontmp__189917.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_189920 < l_189922)) break L6;
						F.line = 3914;
						child_189871 = colontmp__189917[chckIndx(i_189920, 0, colontmp__189917.length+0-1)-0];
						if ((child_189871 == null)) {
						F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(HEX24_177554(child_189871), 2));
						}
						
						F.line = 3915;
						i_189920 = addInt(i_189920, 1);
						if (!(((colontmp__189917 != null ? colontmp__189917.length : 0) == l_189922))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189504 = nimCopy(null, nsuJoinSep(string_seq_189517[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189504;

}

function HEX24_182428(node_182430) {
	var result_189370 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 401;
		var string_seq_189383 = [nimCopy(null, [makeNimstrLit("Yield")], NTI182673)];
		if ((node_182430.value == null)) {
		F.line = 401;
		add_182829(string_seq_189383, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 401;
		add_182829(string_seq_189383, 0, indent_177636(HEX24_177554(node_182430.value), 1));
		}
		
		F.line = 476;
		result_189370 = nimCopy(null, nsuJoinSep(string_seq_189383[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189370;

}

function HEX24_182449(node_182451) {
	var result_190433 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 412;
		var string_seq_190446 = [nimCopy(null, [makeNimstrLit("Attribute")], NTI182673)];
		if ((node_182451.value == null)) {
		F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(HEX24_177554(node_182451.value), 1));
		}
		
		if ((node_182451.attr == null)) {
		F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(HEX24_177554(node_182451.attr), 1));
		}
		
		if ((node_182451.ctx == null)) {
		F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(HEX24_177554(node_182451.ctx), 1));
		}
		
		F.line = 476;
		result_190433 = nimCopy(null, nsuJoinSep(string_seq_190446[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190433;

}

function HEX24_182404(node_182406) {
	var result_188270 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 392;
		var string_seq_188283 = [nimCopy(null, [makeNimstrLit("IfExp")], NTI182673)];
		if ((node_182406.test == null)) {
		F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(HEX24_177554(node_182406.test), 1));
		}
		
		if ((node_182406.body == null)) {
		F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(HEX24_177554(node_182406.body), 1));
		}
		
		if ((node_182406.orelse == null)) {
		F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(HEX24_177554(node_182406.orelse), 1));
		}
		
		F.line = 476;
		result_188270 = nimCopy(null, nsuJoinSep(string_seq_188283[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188270;

}

function HEX24_182479(node_182481) {
	var result_191251 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191251 = nimCopy(null, makeNimstrLit("AugLoad"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191251;

}

function HEX24_182518(node_182520) {
	var result_191845 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191845 = nimCopy(null, makeNimstrLit("Mult"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191845;

}

function HEX24_182461(node_182463) {
	var result_190923 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 416;
		var string_seq_190936 = [nimCopy(null, [makeNimstrLit("List")], NTI182673)];
		F.line = 416;
		if (string_seq_190936[0] != null) { string_seq_190936[0].push(makeNimstrLit("   elts")); } else { string_seq_190936[0] = [makeNimstrLit("   elts")]; };
		L1: do {
			F.line = 215;
			var child_190955 = null;
			F.line = 3909;
			var colontmp__191031 = null;
			F.line = 416;
			colontmp__191031 = node_182463.elts;
			F.line = 3911;
			var i_191034 = 0;
			F.line = 3912;
			var l_191036 = (colontmp__191031 != null ? colontmp__191031.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_191034 < l_191036)) break L3;
						F.line = 3914;
						child_190955 = colontmp__191031[chckIndx(i_191034, 0, colontmp__191031.length+0-1)-0];
						if ((child_190955 == null)) {
						F.line = 416;
						add_182829(string_seq_190936, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 416;
						add_182829(string_seq_190936, 0, indent_177636(HEX24_177554(child_190955), 2));
						}
						
						F.line = 3915;
						i_191034 = addInt(i_191034, 1);
						if (!(((colontmp__191031 != null ? colontmp__191031.length : 0) == l_191036))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182463.ctx == null)) {
		F.line = 416;
		add_182829(string_seq_190936, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 416;
		add_182829(string_seq_190936, 0, indent_177636(HEX24_177554(node_182463.ctx), 1));
		}
		
		F.line = 476;
		result_190923 = nimCopy(null, nsuJoinSep(string_seq_190936[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190923;

}

function HEX24_182458(node_182460) {
	var result_190819 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 415;
		var string_seq_190832 = [nimCopy(null, [makeNimstrLit("Name")], NTI182673)];
		if ((node_182460.id == null)) {
		F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(HEX24_177554(node_182460.id), 1));
		}
		
		if ((node_182460.ctx == null)) {
		F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(HEX24_177554(node_182460.ctx), 1));
		}
		
		F.line = 476;
		result_190819 = nimCopy(null, nsuJoinSep(string_seq_190832[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190819;

}

function HEX24_182533(node_182535) {
	var result_191930 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191930 = nimCopy(null, makeNimstrLit("LShift"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191930;

}

function HEX24_182431(node_182433) {
	var result_189437 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 402;
		var string_seq_189450 = [nimCopy(null, [makeNimstrLit("YieldFrom")], NTI182673)];
		if ((node_182433.value == null)) {
		F.line = 402;
		add_182829(string_seq_189450, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 402;
		add_182829(string_seq_189450, 0, indent_177636(HEX24_177554(node_182433.value), 1));
		}
		
		F.line = 476;
		result_189437 = nimCopy(null, nsuJoinSep(string_seq_189450[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189437;

}

function HEX24_182614(node_182616) {
	var result_192813 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 442;
		var string_seq_192826 = [nimCopy(null, [makeNimstrLit("Arguments")], NTI182673)];
		F.line = 442;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   args")); } else { string_seq_192826[0] = [makeNimstrLit("   args")]; };
		L1: do {
			F.line = 215;
			var child_193015 = null;
			F.line = 3909;
			var colontmp__193296 = null;
			F.line = 442;
			colontmp__193296 = node_182616.args;
			F.line = 3911;
			var i_193299 = 0;
			F.line = 3912;
			var l_193301 = (colontmp__193296 != null ? colontmp__193296.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_193299 < l_193301)) break L3;
						F.line = 3914;
						child_193015 = colontmp__193296[chckIndx(i_193299, 0, colontmp__193296.length+0-1)-0];
						if ((child_193015 == null)) {
						F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193015), 2));
						}
						
						F.line = 3915;
						i_193299 = addInt(i_193299, 1);
						if (!(((colontmp__193296 != null ? colontmp__193296.length : 0) == l_193301))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182616.vararg == null)) {
		F.line = 442;
		add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 442;
		add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(node_182616.vararg), 1));
		}
		
		F.line = 442;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   kwonlyargs")); } else { string_seq_192826[0] = [makeNimstrLit("   kwonlyargs")]; };
		L4: do {
			F.line = 215;
			var child_193108 = null;
			F.line = 3909;
			var colontmp__193303 = null;
			F.line = 442;
			colontmp__193303 = node_182616.kwonlyargs;
			F.line = 3911;
			var i_193306 = 0;
			F.line = 3912;
			var l_193308 = (colontmp__193303 != null ? colontmp__193303.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_193306 < l_193308)) break L6;
						F.line = 3914;
						child_193108 = colontmp__193303[chckIndx(i_193306, 0, colontmp__193303.length+0-1)-0];
						if ((child_193108 == null)) {
						F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193108), 2));
						}
						
						F.line = 3915;
						i_193306 = addInt(i_193306, 1);
						if (!(((colontmp__193303 != null ? colontmp__193303.length : 0) == l_193308))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 443;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   kw_defaults")); } else { string_seq_192826[0] = [makeNimstrLit("   kw_defaults")]; };
		L7: do {
			F.line = 215;
			var child_193164 = null;
			F.line = 3909;
			var colontmp__193310 = null;
			F.line = 443;
			colontmp__193310 = node_182616.kw_defaults;
			F.line = 3911;
			var i_193313 = 0;
			F.line = 3912;
			var l_193315 = (colontmp__193310 != null ? colontmp__193310.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_193313 < l_193315)) break L9;
						F.line = 3914;
						child_193164 = colontmp__193310[chckIndx(i_193313, 0, colontmp__193310.length+0-1)-0];
						if ((child_193164 == null)) {
						F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193164), 2));
						}
						
						F.line = 3915;
						i_193313 = addInt(i_193313, 1);
						if (!(((colontmp__193310 != null ? colontmp__193310.length : 0) == l_193315))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182616.kwarg == null)) {
		F.line = 443;
		add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 443;
		add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(node_182616.kwarg), 1));
		}
		
		F.line = 443;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   defaults")); } else { string_seq_192826[0] = [makeNimstrLit("   defaults")]; };
		L10: do {
			F.line = 215;
			var child_193257 = null;
			F.line = 3909;
			var colontmp__193317 = null;
			F.line = 443;
			colontmp__193317 = node_182616.defaults;
			F.line = 3911;
			var i_193320 = 0;
			F.line = 3912;
			var l_193322 = (colontmp__193317 != null ? colontmp__193317.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_193320 < l_193322)) break L12;
						F.line = 3914;
						child_193257 = colontmp__193317[chckIndx(i_193320, 0, colontmp__193317.length+0-1)-0];
						if ((child_193257 == null)) {
						F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193257), 2));
						}
						
						F.line = 3915;
						i_193320 = addInt(i_193320, 1);
						if (!(((colontmp__193317 != null ? colontmp__193317.length : 0) == l_193322))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_192813 = nimCopy(null, nsuJoinSep(string_seq_192826[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192813;

}

function HEX24_182464(node_182466) {
	var result_191053 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 417;
		var string_seq_191066 = [nimCopy(null, [makeNimstrLit("Tuple")], NTI182673)];
		F.line = 417;
		if (string_seq_191066[0] != null) { string_seq_191066[0].push(makeNimstrLit("   elts")); } else { string_seq_191066[0] = [makeNimstrLit("   elts")]; };
		L1: do {
			F.line = 215;
			var child_191085 = null;
			F.line = 3909;
			var colontmp__191161 = null;
			F.line = 417;
			colontmp__191161 = node_182466.elts;
			F.line = 3911;
			var i_191164 = 0;
			F.line = 3912;
			var l_191166 = (colontmp__191161 != null ? colontmp__191161.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_191164 < l_191166)) break L3;
						F.line = 3914;
						child_191085 = colontmp__191161[chckIndx(i_191164, 0, colontmp__191161.length+0-1)-0];
						if ((child_191085 == null)) {
						F.line = 417;
						add_182829(string_seq_191066, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 417;
						add_182829(string_seq_191066, 0, indent_177636(HEX24_177554(child_191085), 2));
						}
						
						F.line = 3915;
						i_191164 = addInt(i_191164, 1);
						if (!(((colontmp__191161 != null ? colontmp__191161.length : 0) == l_191166))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182466.ctx == null)) {
		F.line = 417;
		add_182829(string_seq_191066, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 417;
		add_182829(string_seq_191066, 0, indent_177636(HEX24_177554(node_182466.ctx), 1));
		}
		
		F.line = 476;
		result_191053 = nimCopy(null, nsuJoinSep(string_seq_191066[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191053;

}

function HEX24_182485(node_182487) {
	var result_191285 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191285 = nimCopy(null, makeNimstrLit("Param"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191285;

}

function HEX24_182305(node_182307) {
	var result_183033 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 336;
		var string_seq_183046 = [nimCopy(null, [makeNimstrLit("Expression")], NTI182673)];
		if ((node_182307.body == null)) {
		F.line = 336;
		add_182829(string_seq_183046, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 336;
		add_182829(string_seq_183046, 0, indent_177636(HEX24_177554(node_182307.body), 1));
		}
		
		F.line = 476;
		result_183033 = nimCopy(null, nsuJoinSep(string_seq_183046[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183033;

}

function HEX24_182476(node_182478) {
	var result_191234 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191234 = nimCopy(null, makeNimstrLit("Del"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191234;

}

function HEX24_182539(node_182541) {
	var result_191964 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191964 = nimCopy(null, makeNimstrLit("BitOr"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191964;

}

function HEX24_182482(node_182484) {
	var result_191268 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191268 = nimCopy(null, makeNimstrLit("AugStore"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191268;

}

function HEX24_182437(node_182439) {
	var result_189939 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 406;
		var string_seq_189952 = [nimCopy(null, [makeNimstrLit("Call")], NTI182673)];
		if ((node_182439.fun == null)) {
		F.line = 406;
		add_182829(string_seq_189952, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 406;
		add_182829(string_seq_189952, 0, indent_177636(HEX24_177554(node_182439.fun), 1));
		}
		
		F.line = 406;
		if (string_seq_189952[0] != null) { string_seq_189952[0].push(makeNimstrLit("   args")); } else { string_seq_189952[0] = [makeNimstrLit("   args")]; };
		L1: do {
			F.line = 215;
			var child_190008 = null;
			F.line = 3909;
			var colontmp__190103 = null;
			F.line = 406;
			colontmp__190103 = node_182439.args;
			F.line = 3911;
			var i_190106 = 0;
			F.line = 3912;
			var l_190108 = (colontmp__190103 != null ? colontmp__190103.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_190106 < l_190108)) break L3;
						F.line = 3914;
						child_190008 = colontmp__190103[chckIndx(i_190106, 0, colontmp__190103.length+0-1)-0];
						if ((child_190008 == null)) {
						F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(HEX24_177554(child_190008), 2));
						}
						
						F.line = 3915;
						i_190106 = addInt(i_190106, 1);
						if (!(((colontmp__190103 != null ? colontmp__190103.length : 0) == l_190108))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 406;
		if (string_seq_189952[0] != null) { string_seq_189952[0].push(makeNimstrLit("   keywords")); } else { string_seq_189952[0] = [makeNimstrLit("   keywords")]; };
		L4: do {
			F.line = 215;
			var child_190064 = null;
			F.line = 3909;
			var colontmp__190110 = null;
			F.line = 406;
			colontmp__190110 = node_182439.keywords;
			F.line = 3911;
			var i_190113 = 0;
			F.line = 3912;
			var l_190115 = (colontmp__190110 != null ? colontmp__190110.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_190113 < l_190115)) break L6;
						F.line = 3914;
						child_190064 = colontmp__190110[chckIndx(i_190113, 0, colontmp__190110.length+0-1)-0];
						if ((child_190064 == null)) {
						F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(HEX24_177554(child_190064), 2));
						}
						
						F.line = 3915;
						i_190113 = addInt(i_190113, 1);
						if (!(((colontmp__190110 != null ? colontmp__190110.length : 0) == l_190115))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189939 = nimCopy(null, nsuJoinSep(string_seq_189952[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189939;

}

function HEX24_182410(node_182412) {
	var result_188567 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 394;
		var string_seq_188580 = [nimCopy(null, [makeNimstrLit("Set")], NTI182673)];
		F.line = 394;
		if (string_seq_188580[0] != null) { string_seq_188580[0].push(makeNimstrLit("   elts")); } else { string_seq_188580[0] = [makeNimstrLit("   elts")]; };
		L1: do {
			F.line = 215;
			var child_188599 = null;
			F.line = 3909;
			var colontmp__188638 = null;
			F.line = 394;
			colontmp__188638 = node_182412.elts;
			F.line = 3911;
			var i_188641 = 0;
			F.line = 3912;
			var l_188643 = (colontmp__188638 != null ? colontmp__188638.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188641 < l_188643)) break L3;
						F.line = 3914;
						child_188599 = colontmp__188638[chckIndx(i_188641, 0, colontmp__188638.length+0-1)-0];
						if ((child_188599 == null)) {
						F.line = 394;
						add_182829(string_seq_188580, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 394;
						add_182829(string_seq_188580, 0, indent_177636(HEX24_177554(child_188599), 2));
						}
						
						F.line = 3915;
						i_188641 = addInt(i_188641, 1);
						if (!(((colontmp__188638 != null ? colontmp__188638.length : 0) == l_188643))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188567 = nimCopy(null, nsuJoinSep(string_seq_188580[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188567;

}

function HEX24_182632(node_182634) {
	var result_193685 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 451;
		var string_seq_193698 = [nimCopy(null, [makeNimstrLit("Alias")], NTI182673)];
		if ((node_182634.name == null)) {
		F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(HEX24_177554(node_182634.name), 1));
		}
		
		if ((node_182634.asname == null)) {
		F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(HEX24_177554(node_182634.asname), 1));
		}
		
		F.line = 476;
		result_193685 = nimCopy(null, nsuJoinSep(string_seq_193698[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193685;

}

function HEX24_182422(node_182424) {
	var result_189173 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 398;
		var string_seq_189186 = [nimCopy(null, [makeNimstrLit("GeneratorExp")], NTI182673)];
		if ((node_182424.elt == null)) {
		F.line = 398;
		add_182829(string_seq_189186, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 398;
		add_182829(string_seq_189186, 0, indent_177636(HEX24_177554(node_182424.elt), 1));
		}
		
		F.line = 398;
		if (string_seq_189186[0] != null) { string_seq_189186[0].push(makeNimstrLit("   generators")); } else { string_seq_189186[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_189242 = null;
			F.line = 3909;
			var colontmp__189281 = null;
			F.line = 398;
			colontmp__189281 = node_182424.generators;
			F.line = 3911;
			var i_189284 = 0;
			F.line = 3912;
			var l_189286 = (colontmp__189281 != null ? colontmp__189281.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_189284 < l_189286)) break L3;
						F.line = 3914;
						child_189242 = colontmp__189281[chckIndx(i_189284, 0, colontmp__189281.length+0-1)-0];
						if ((child_189242 == null)) {
						F.line = 398;
						add_182829(string_seq_189186, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 398;
						add_182829(string_seq_189186, 0, indent_177636(HEX24_177554(child_189242), 2));
						}
						
						F.line = 3915;
						i_189284 = addInt(i_189284, 1);
						if (!(((colontmp__189281 != null ? colontmp__189281.length : 0) == l_189286))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189173 = nimCopy(null, nsuJoinSep(string_seq_189186[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189173;

}

function HEX24_182443(node_182445) {
	var result_190273 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 408;
		var string_seq_190286 = [nimCopy(null, [makeNimstrLit("JoinedStr")], NTI182673)];
		F.line = 408;
		if (string_seq_190286[0] != null) { string_seq_190286[0].push(makeNimstrLit("   values")); } else { string_seq_190286[0] = [makeNimstrLit("   values")]; };
		L1: do {
			F.line = 215;
			var child_190305 = null;
			F.line = 3909;
			var colontmp__190344 = null;
			F.line = 408;
			colontmp__190344 = node_182445.values;
			F.line = 3911;
			var i_190347 = 0;
			F.line = 3912;
			var l_190349 = (colontmp__190344 != null ? colontmp__190344.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_190347 < l_190349)) break L3;
						F.line = 3914;
						child_190305 = colontmp__190344[chckIndx(i_190347, 0, colontmp__190344.length+0-1)-0];
						if ((child_190305 == null)) {
						F.line = 408;
						add_182829(string_seq_190286, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 408;
						add_182829(string_seq_190286, 0, indent_177636(HEX24_177554(child_190305), 2));
						}
						
						F.line = 3915;
						i_190347 = addInt(i_190347, 1);
						if (!(((colontmp__190344 != null ? colontmp__190344.length : 0) == l_190349))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_190273 = nimCopy(null, nsuJoinSep(string_seq_190286[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190273;

}

function HEX24_182557(node_182559) {
	var result_192066 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192066 = nimCopy(null, makeNimstrLit("Not"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192066;

}

function HEX24_182578(node_182580) {
	var result_192185 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192185 = nimCopy(null, makeNimstrLit("LtE"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192185;

}

function HEX24_182440(node_182442) {
	var result_190132 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 407;
		var string_seq_190145 = [nimCopy(null, [makeNimstrLit("FormattedValue")], NTI182673)];
		if ((node_182442.value == null)) {
		F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(HEX24_177554(node_182442.value), 1));
		}
		
		if ((node_182442.conversion == null)) {
		F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(HEX24_177554(node_182442.conversion), 1));
		}
		
		if ((node_182442.format_spec == null)) {
		F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(HEX24_177554(node_182442.format_spec), 1));
		}
		
		F.line = 476;
		result_190132 = nimCopy(null, nsuJoinSep(string_seq_190145[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190132;

}

function HEX24_182527(node_182529) {
	var result_191896 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191896 = nimCopy(null, makeNimstrLit("Mod"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191896;

}

function HEX24_182596(node_182598) {
	var result_192287 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192287 = nimCopy(null, makeNimstrLit("NotIn"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192287;

}

function HEX24_182590(node_182592) {
	var result_192253 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192253 = nimCopy(null, makeNimstrLit("IsNot"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192253;

}

function HEX24_182581(node_182583) {
	var result_192202 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192202 = nimCopy(null, makeNimstrLit("Gt"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192202;

}

function HEX24_182446(node_182448) {
	var result_190366 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 409;
		var string_seq_190379 = [nimCopy(null, [makeNimstrLit("Constant")], NTI182673)];
		if ((node_182448.value == null)) {
		F.line = 409;
		add_182829(string_seq_190379, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 409;
		add_182829(string_seq_190379, 0, indent_177636(HEX24_177554(node_182448.value), 1));
		}
		
		F.line = 476;
		result_190366 = nimCopy(null, nsuJoinSep(string_seq_190379[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190366;

}

function HEX24_182575(node_182577) {
	var result_192168 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192168 = nimCopy(null, makeNimstrLit("Lt"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192168;

}

function HEX24_182554(node_182556) {
	var result_192049 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192049 = nimCopy(null, makeNimstrLit("Invert"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192049;

}

function HEX24_182620(node_182622) {
	var result_193443 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 445;
		var string_seq_193456 = [nimCopy(null, [makeNimstrLit("Arg")], NTI182673)];
		if ((node_182622.arg == null)) {
		F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(HEX24_177554(node_182622.arg), 1));
		}
		
		if ((node_182622.annotation == null)) {
		F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(HEX24_177554(node_182622.annotation), 1));
		}
		
		F.line = 476;
		result_193443 = nimCopy(null, nsuJoinSep(string_seq_193456[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193443;

}

function HEX24_182602(node_182604) {
	var result_192321 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 437;
		var string_seq_192334 = [nimCopy(null, [makeNimstrLit("Comprehension")], NTI182673)];
		if ((node_182604.target == null)) {
		F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(node_182604.target), 1));
		}
		
		if ((node_182604.iter == null)) {
		F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(node_182604.iter), 1));
		}
		
		F.line = 437;
		if (string_seq_192334[0] != null) { string_seq_192334[0].push(makeNimstrLit("   ifs")); } else { string_seq_192334[0] = [makeNimstrLit("   ifs")]; };
		L1: do {
			F.line = 215;
			var child_192427 = null;
			F.line = 3909;
			var colontmp__192503 = null;
			F.line = 437;
			colontmp__192503 = node_182604.ifs;
			F.line = 3911;
			var i_192506 = 0;
			F.line = 3912;
			var l_192508 = (colontmp__192503 != null ? colontmp__192503.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_192506 < l_192508)) break L3;
						F.line = 3914;
						child_192427 = colontmp__192503[chckIndx(i_192506, 0, colontmp__192503.length+0-1)-0];
						if ((child_192427 == null)) {
						F.line = 437;
						add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 437;
						add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(child_192427), 2));
						}
						
						F.line = 3915;
						i_192506 = addInt(i_192506, 1);
						if (!(((colontmp__192503 != null ? colontmp__192503.length : 0) == l_192508))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182604.is_async == null)) {
		F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(node_182604.is_async), 1));
		}
		
		F.line = 476;
		result_192321 = nimCopy(null, nsuJoinSep(string_seq_192334[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192321;

}

function HEX24_182593(node_182595) {
	var result_192270 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192270 = nimCopy(null, makeNimstrLit("In"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192270;

}

function HEX24_182626(node_182628) {
	var result_193564 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 448;
		var string_seq_193577 = [nimCopy(null, [makeNimstrLit("Keyword")], NTI182673)];
		if ((node_182628.arg == null)) {
		F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(HEX24_177554(node_182628.arg), 1));
		}
		
		if ((node_182628.value == null)) {
		F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(HEX24_177554(node_182628.value), 1));
		}
		
		F.line = 476;
		result_193564 = nimCopy(null, nsuJoinSep(string_seq_193577[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193564;

}

function HEX24_182524(node_182526) {
	var result_191879 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191879 = nimCopy(null, makeNimstrLit("Div"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191879;

}

function HEX24_182638(node_182640) {
	var result_193806 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 453;
		var string_seq_193819 = [nimCopy(null, [makeNimstrLit("Withitem")], NTI182673)];
		if ((node_182640.context_expr == null)) {
		F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(HEX24_177554(node_182640.context_expr), 1));
		}
		
		if ((node_182640.optional_vars == null)) {
		F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(HEX24_177554(node_182640.optional_vars), 1));
		}
		
		F.line = 476;
		result_193806 = nimCopy(null, nsuJoinSep(string_seq_193819[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193806;

}

function HEX24_182635(node_182637) {
	var result_193789 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 453;
		result_193789 = nimCopy(null, makeNimstrLit("withitem"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193789;

}

function HEX24_182548(node_182550) {
	var result_192015 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_192015 = nimCopy(null, makeNimstrLit("FloorDiv"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192015;

}

function HEX24_182452(node_182454) {
	var result_190574 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 413;
		var string_seq_190587 = [nimCopy(null, [makeNimstrLit("Subscript")], NTI182673)];
		if ((node_182454.value == null)) {
		F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(HEX24_177554(node_182454.value), 1));
		}
		
		if ((node_182454.slice == null)) {
		F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(HEX24_177554(node_182454.slice), 1));
		}
		
		if ((node_182454.ctx == null)) {
		F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(HEX24_177554(node_182454.ctx), 1));
		}
		
		F.line = 476;
		result_190574 = nimCopy(null, nsuJoinSep(string_seq_190587[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190574;

}

function HEX24_182623(node_182625) {
	var result_193547 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 448;
		result_193547 = nimCopy(null, makeNimstrLit("keyword"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193547;

}

function HEX24_182425(node_182427) {
	var result_189303 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 400;
		var string_seq_189316 = [nimCopy(null, [makeNimstrLit("Await")], NTI182673)];
		if ((node_182427.value == null)) {
		F.line = 400;
		add_182829(string_seq_189316, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 400;
		add_182829(string_seq_189316, 0, indent_177636(HEX24_177554(node_182427.value), 1));
		}
		
		F.line = 476;
		result_189303 = nimCopy(null, nsuJoinSep(string_seq_189316[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189303;

}

function HEX24_182584(node_182586) {
	var result_192219 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192219 = nimCopy(null, makeNimstrLit("GtE"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192219;

}

function HEX24_182563(node_182565) {
	var result_192100 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192100 = nimCopy(null, makeNimstrLit("USub"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192100;

}

function HEX24_182569(node_182571) {
	var result_192134 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192134 = nimCopy(null, makeNimstrLit("Eq"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192134;

}

function HEX24_182608(node_182610) {
	var result_192629 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 440;
		var string_seq_192642 = [nimCopy(null, [makeNimstrLit("ExceptHandler")], NTI182673)];
		if ((node_182610.type == null)) {
		F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(HEX24_177554(node_182610.type), 1));
		}
		
		if ((node_182610.name == null)) {
		F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(HEX24_177554(node_182610.name), 1));
		}
		
		F.line = 440;
		if (string_seq_192642[0] != null) { string_seq_192642[0].push(makeNimstrLit("   body")); } else { string_seq_192642[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_192735 = null;
			F.line = 3909;
			var colontmp__192774 = null;
			F.line = 440;
			colontmp__192774 = node_182610.body;
			F.line = 3911;
			var i_192777 = 0;
			F.line = 3912;
			var l_192779 = (colontmp__192774 != null ? colontmp__192774.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_192777 < l_192779)) break L3;
						F.line = 3914;
						child_192735 = colontmp__192774[chckIndx(i_192777, 0, colontmp__192774.length+0-1)-0];
						if ((child_192735 == null)) {
						F.line = 440;
						add_182829(string_seq_192642, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 440;
						add_182829(string_seq_192642, 0, indent_177636(HEX24_177554(child_192735), 2));
						}
						
						F.line = 3915;
						i_192777 = addInt(i_192777, 1);
						if (!(((colontmp__192774 != null ? colontmp__192774.length : 0) == l_192779))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_192629 = nimCopy(null, nsuJoinSep(string_seq_192642[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192629;

}

function HEX24_182560(node_182562) {
	var result_192083 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192083 = nimCopy(null, makeNimstrLit("UAdd"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192083;

}

function HEX24_182542(node_182544) {
	var result_191981 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191981 = nimCopy(null, makeNimstrLit("BitXor"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191981;

}

function HEX24_182587(node_182589) {
	var result_192236 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192236 = nimCopy(null, makeNimstrLit("Is"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192236;

}

function HEX24_182299(node_182301) {
	var result_182661 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 334;
		var string_seq_182674 = [nimCopy(null, [makeNimstrLit("Module")], NTI182673)];
		F.line = 334;
		if (string_seq_182674[0] != null) { string_seq_182674[0].push(makeNimstrLit("   body")); } else { string_seq_182674[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_182815 = null;
			F.line = 3909;
			var colontmp__182918 = null;
			F.line = 334;
			colontmp__182918 = node_182301.body;
			F.line = 3911;
			var i_182921 = 0;
			F.line = 3912;
			var l_182923 = (colontmp__182918 != null ? colontmp__182918.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_182921 < l_182923)) break L3;
						F.line = 3914;
						child_182815 = colontmp__182918[chckIndx(i_182921, 0, colontmp__182918.length+0-1)-0];
						if ((child_182815 == null)) {
						F.line = 334;
						add_182829(string_seq_182674, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 334;
						add_182829(string_seq_182674, 0, indent_177636(HEX24_177554(child_182815), 2));
						}
						
						F.line = 3915;
						i_182921 = addInt(i_182921, 1);
						if (!(((colontmp__182918 != null ? colontmp__182918.length : 0) == l_182923))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_182661 = nimCopy(null, nsuJoinSep(string_seq_182674[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_182661;

}

function HEX24_182572(node_182574) {
	var result_192151 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192151 = nimCopy(null, makeNimstrLit("NotEq"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192151;

}

function HEX24_177605(node_177607) {
	var result_177608 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 131;
		result_177608 = nimCopy(null, HEX24_157579(node_177607.value), NTI138);
	framePtr = F.prev;

	return result_177608;

}

function HEX24_182545(node_182547) {
	var result_191998 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191998 = nimCopy(null, makeNimstrLit("BitAnd"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191998;

}

function HEX24_177588(node_177590) {
	var result_177591 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_177591 = nimCopy(null, HEX24_157579(node_177590.value), NTI138);
	framePtr = F.prev;

	return result_177591;

}

function HEX24_182530(node_182532) {
	var result_191913 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191913 = nimCopy(null, makeNimstrLit("Pow"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191913;

}

function HEX24_182488(node_182490) {
	var result_191302 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 422;
		result_191302 = nimCopy(null, makeNimstrLit("slice"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191302;

}

function HEX24_182296(node_182298) {
	var result_182644 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 333;
		result_182644 = nimCopy(null, makeNimstrLit("modl"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_182644;

}

function HEX24_177571(node_177573) {
	var result_177574 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 125;
		result_177574 = nimCopy(null, cstrToNimstr((node_177573.value)+""), NTI138);
	framePtr = F.prev;

	return result_177574;

}

function HEX24_182311(node_182313) {
	var result_183193 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 342;
		var string_seq_183206 = [nimCopy(null, [makeNimstrLit("stmt")], NTI182673)];
		if ((node_182313.lineno == null)) {
		F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(HEX24_177554(node_182313.lineno), 1));
		}
		
		if ((node_182313.col_offset == null)) {
		F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(HEX24_177554(node_182313.col_offset), 1));
		}
		
		F.line = 476;
		result_183193 = nimCopy(null, nsuJoinSep(string_seq_183206[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183193;

}

function HEX24_182467(node_182469) {
	var result_191183 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191183 = nimCopy(null, makeNimstrLit("expr_context"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191183;

}

function HEX24_182617(node_182619) {
	var result_193339 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 445;
		var string_seq_193352 = [nimCopy(null, [makeNimstrLit("arg")], NTI182673)];
		if ((node_182619.lineno == null)) {
		F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(HEX24_177554(node_182619.lineno), 1));
		}
		
		if ((node_182619.col_offset == null)) {
		F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(HEX24_177554(node_182619.col_offset), 1));
		}
		
		F.line = 476;
		result_193339 = nimCopy(null, nsuJoinSep(string_seq_193352[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193339;

}

function HEX24_182605(node_182607) {
	var result_192525 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 439;
		var string_seq_192538 = [nimCopy(null, [makeNimstrLit("excepthandler")], NTI182673)];
		if ((node_182607.lineno == null)) {
		F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(HEX24_177554(node_182607.lineno), 1));
		}
		
		if ((node_182607.col_offset == null)) {
		F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(HEX24_177554(node_182607.col_offset), 1));
		}
		
		F.line = 476;
		result_192525 = nimCopy(null, nsuJoinSep(string_seq_192538[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192525;

}

function HEX24_182599(node_182601) {
	var result_192304 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 437;
		result_192304 = nimCopy(null, makeNimstrLit("comprehension"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192304;

}

function HEX24_182611(node_182613) {
	var result_192796 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 442;
		result_192796 = nimCopy(null, makeNimstrLit("arguments"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192796;

}

function HEX24_182629(node_182631) {
	var result_193668 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 451;
		result_193668 = nimCopy(null, makeNimstrLit("alias"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193668;

}

function HEX24_182500(node_182502) {
	var result_191743 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 428;
		result_191743 = nimCopy(null, makeNimstrLit("boolop"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191743;

}

function HEX24_182389(node_182391) {
	var result_187687 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 386;
		var string_seq_187700 = [nimCopy(null, [makeNimstrLit("expr")], NTI182673)];
		if ((node_182391.lineno == null)) {
		F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(HEX24_177554(node_182391.lineno), 1));
		}
		
		if ((node_182391.col_offset == null)) {
		F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(HEX24_177554(node_182391.col_offset), 1));
		}
		
		F.line = 476;
		result_187687 = nimCopy(null, nsuJoinSep(string_seq_187700[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187687;

}

function HEX24_182566(node_182568) {
	var result_192117 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192117 = nimCopy(null, makeNimstrLit("cmpop"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192117;

}

function HEX24_182509(node_182511) {
	var result_191794 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191794 = nimCopy(null, makeNimstrLit("operator"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191794;

}

function HEX24_182551(node_182553) {
	var result_192032 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192032 = nimCopy(null, makeNimstrLit("unaryop"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192032;

}

function HEX24_177549(node_177551) {
	var result_177552 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 122;
		result_177552 = nimCopy(null, makeNimstrLit("!!!DUMMY!!!"), NTI138);
	framePtr = F.prev;

	return result_177552;

}

function HEX24_177554(node_177551) {
	var result_177557 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(node_177551);
		if (isObj(node_177551.m_type, NTI179658)) {
		F.line = 119;
		result_177557 = HEX24_182365(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179732)) {
		F.line = 119;
		result_177557 = HEX24_182371(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179693)) {
		F.line = 119;
		result_177557 = HEX24_182368(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179802)) {
		F.line = 119;
		result_177557 = HEX24_182377(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179866)) {
		F.line = 119;
		result_177557 = HEX24_182383(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179835)) {
		F.line = 119;
		result_177557 = HEX24_182380(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179463)) {
		F.line = 119;
		result_177557 = HEX24_182350(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179767)) {
		F.line = 119;
		result_177557 = HEX24_182374(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179965)) {
		F.line = 119;
		result_177557 = HEX24_182395(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180037)) {
		F.line = 119;
		result_177557 = HEX24_182401(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179897)) {
		F.line = 119;
		result_177557 = HEX24_182386(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179182)) {
		F.line = 119;
		result_177557 = HEX24_182329(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179928)) {
		F.line = 119;
		result_177557 = HEX24_182392(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179256)) {
		F.line = 119;
		result_177557 = HEX24_182335(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179338)) {
		F.line = 119;
		result_177557 = HEX24_182341(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179147)) {
		F.line = 119;
		result_177557 = HEX24_182326(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179422)) {
		F.line = 119;
		result_177557 = HEX24_182347(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180002)) {
		F.line = 119;
		result_177557 = HEX24_182398(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179502)) {
		F.line = 119;
		result_177557 = HEX24_182353(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179295)) {
		F.line = 119;
		result_177557 = HEX24_182338(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179576)) {
		F.line = 119;
		result_177557 = HEX24_182359(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180183)) {
		F.line = 119;
		result_177557 = HEX24_182413(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180109)) {
		F.line = 119;
		result_177557 = HEX24_182407(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181190)) {
		F.line = 119;
		result_177557 = HEX24_182512(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179381)) {
		F.line = 119;
		result_177557 = HEX24_182344(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180257)) {
		F.line = 119;
		result_177557 = HEX24_182419(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179623)) {
		F.line = 119;
		result_177557 = HEX24_182362(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181060)) {
		F.line = 119;
		result_177557 = HEX24_182494(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179541)) {
		F.line = 119;
		result_177557 = HEX24_182356(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180868)) {
		F.line = 119;
		result_177557 = HEX24_182473(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180220)) {
		F.line = 119;
		result_177557 = HEX24_182416(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181159)) {
		F.line = 119;
		result_177557 = HEX24_182506(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179114)) {
		F.line = 119;
		result_177557 = HEX24_182323(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179020)) {
		F.line = 119;
		result_177557 = HEX24_182317(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181023)) {
		F.line = 119;
		result_177557 = HEX24_182491(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181095)) {
		F.line = 119;
		result_177557 = HEX24_182497(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179219)) {
		F.line = 119;
		result_177557 = HEX24_182332(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178872)) {
		F.line = 119;
		result_177557 = HEX24_182302(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180837)) {
		F.line = 119;
		result_177557 = HEX24_182470(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178940)) {
		F.line = 119;
		result_177557 = HEX24_182308(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181128)) {
		F.line = 119;
		result_177557 = HEX24_182503(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178975)) {
		F.line = 119;
		result_177557 = HEX24_182314(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181283)) {
		F.line = 119;
		result_177557 = HEX24_182521(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179065)) {
		F.line = 119;
		result_177557 = HEX24_182320(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181438)) {
		F.line = 119;
		result_177557 = HEX24_182536(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180693)) {
		F.line = 119;
		result_177557 = HEX24_182455(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181221)) {
		F.line = 119;
		result_177557 = HEX24_182515(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180432)) {
		F.line = 119;
		result_177557 = HEX24_182434(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180366)) {
		F.line = 119;
		result_177557 = HEX24_182428(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180619)) {
		F.line = 119;
		result_177557 = HEX24_182449(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180072)) {
		F.line = 119;
		result_177557 = HEX24_182404(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180930)) {
		F.line = 119;
		result_177557 = HEX24_182479(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181252)) {
		F.line = 119;
		result_177557 = HEX24_182518(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180763)) {
		F.line = 119;
		result_177557 = HEX24_182461(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180728)) {
		F.line = 119;
		result_177557 = HEX24_182458(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181407)) {
		F.line = 119;
		result_177557 = HEX24_182533(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180399)) {
		F.line = 119;
		result_177557 = HEX24_182431(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182107)) {
		F.line = 119;
		result_177557 = HEX24_182614(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180800)) {
		F.line = 119;
		result_177557 = HEX24_182464(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180992)) {
		F.line = 119;
		result_177557 = HEX24_182485(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178907)) {
		F.line = 119;
		result_177557 = HEX24_182305(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180899)) {
		F.line = 119;
		result_177557 = HEX24_182476(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181469)) {
		F.line = 119;
		result_177557 = HEX24_182539(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180961)) {
		F.line = 119;
		result_177557 = HEX24_182482(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180473)) {
		F.line = 119;
		result_177557 = HEX24_182437(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180148)) {
		F.line = 119;
		result_177557 = HEX24_182410(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182228)) {
		F.line = 119;
		result_177557 = HEX24_182632(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180296)) {
		F.line = 119;
		result_177557 = HEX24_182422(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180551)) {
		F.line = 119;
		result_177557 = HEX24_182443(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181624)) {
		F.line = 119;
		result_177557 = HEX24_182557(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181810)) {
		F.line = 119;
		result_177557 = HEX24_182578(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180514)) {
		F.line = 119;
		result_177557 = HEX24_182440(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181345)) {
		F.line = 119;
		result_177557 = HEX24_182527(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181996)) {
		F.line = 119;
		result_177557 = HEX24_182596(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181934)) {
		F.line = 119;
		result_177557 = HEX24_182590(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181841)) {
		F.line = 119;
		result_177557 = HEX24_182581(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180586)) {
		F.line = 119;
		result_177557 = HEX24_182446(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181779)) {
		F.line = 119;
		result_177557 = HEX24_182575(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181593)) {
		F.line = 119;
		result_177557 = HEX24_182554(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182158)) {
		F.line = 119;
		result_177557 = HEX24_182620(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182027)) {
		F.line = 119;
		result_177557 = HEX24_182602(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181965)) {
		F.line = 119;
		result_177557 = HEX24_182593(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182193)) {
		F.line = 119;
		result_177557 = HEX24_182626(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179065)) {
		F.line = 119;
		result_177557 = HEX24_182320(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181314)) {
		F.line = 119;
		result_177557 = HEX24_182524(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182263)) {
		F.line = 119;
		result_177557 = HEX24_182638(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182263)) {
		F.line = 119;
		result_177557 = HEX24_182638(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178776)) {
		F.line = 119;
		result_177557 = HEX24_182635(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178776)) {
		F.line = 119;
		result_177557 = HEX24_182635(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179732)) {
		F.line = 119;
		result_177557 = HEX24_182371(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179576)) {
		F.line = 119;
		result_177557 = HEX24_182359(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181562)) {
		F.line = 119;
		result_177557 = HEX24_182548(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180656)) {
		F.line = 119;
		result_177557 = HEX24_182452(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182193)) {
		F.line = 119;
		result_177557 = HEX24_182626(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178770)) {
		F.line = 119;
		result_177557 = HEX24_182623(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178770)) {
		F.line = 119;
		result_177557 = HEX24_182623(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180333)) {
		F.line = 119;
		result_177557 = HEX24_182425(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181872)) {
		F.line = 119;
		result_177557 = HEX24_182584(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179020)) {
		F.line = 119;
		result_177557 = HEX24_182317(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181686)) {
		F.line = 119;
		result_177557 = HEX24_182563(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179295)) {
		F.line = 119;
		result_177557 = HEX24_182338(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179802)) {
		F.line = 119;
		result_177557 = HEX24_182377(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179182)) {
		F.line = 119;
		result_177557 = HEX24_182329(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179541)) {
		F.line = 119;
		result_177557 = HEX24_182356(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181717)) {
		F.line = 119;
		result_177557 = HEX24_182569(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182068)) {
		F.line = 119;
		result_177557 = HEX24_182608(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179835)) {
		F.line = 119;
		result_177557 = HEX24_182380(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179693)) {
		F.line = 119;
		result_177557 = HEX24_182368(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179623)) {
		F.line = 119;
		result_177557 = HEX24_182362(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178975)) {
		F.line = 119;
		result_177557 = HEX24_182314(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181655)) {
		F.line = 119;
		result_177557 = HEX24_182560(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179256)) {
		F.line = 119;
		result_177557 = HEX24_182335(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181500)) {
		F.line = 119;
		result_177557 = HEX24_182542(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181903)) {
		F.line = 119;
		result_177557 = HEX24_182587(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179502)) {
		F.line = 119;
		result_177557 = HEX24_182353(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179422)) {
		F.line = 119;
		result_177557 = HEX24_182347(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179767)) {
		F.line = 119;
		result_177557 = HEX24_182374(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178837)) {
		F.line = 119;
		result_177557 = HEX24_182299(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179658)) {
		F.line = 119;
		result_177557 = HEX24_182365(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178837)) {
		F.line = 119;
		result_177557 = HEX24_182299(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181748)) {
		F.line = 119;
		result_177557 = HEX24_182572(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179463)) {
		F.line = 119;
		result_177557 = HEX24_182350(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177030)) {
		F.line = 119;
		result_177557 = HEX24_177605(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179219)) {
		F.line = 119;
		result_177557 = HEX24_182332(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181531)) {
		F.line = 119;
		result_177557 = HEX24_182545(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179114)) {
		F.line = 119;
		result_177557 = HEX24_182323(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179381)) {
		F.line = 119;
		result_177557 = HEX24_182344(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180002)) {
		F.line = 119;
		result_177557 = HEX24_182398(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181095)) {
		F.line = 119;
		result_177557 = HEX24_182497(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178940)) {
		F.line = 119;
		result_177557 = HEX24_182308(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180930)) {
		F.line = 119;
		result_177557 = HEX24_182479(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177027)) {
		F.line = 119;
		result_177557 = HEX24_177588(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181376)) {
		F.line = 119;
		result_177557 = HEX24_182530(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181060)) {
		F.line = 119;
		result_177557 = HEX24_182494(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181023)) {
		F.line = 119;
		result_177557 = HEX24_182491(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178739)) {
		F.line = 119;
		result_177557 = HEX24_182488(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178739)) {
		F.line = 119;
		result_177557 = HEX24_182488(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179338)) {
		F.line = 119;
		result_177557 = HEX24_182341(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180961)) {
		F.line = 119;
		result_177557 = HEX24_182482(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178907)) {
		F.line = 119;
		result_177557 = HEX24_182305(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178872)) {
		F.line = 119;
		result_177557 = HEX24_182302(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178723)) {
		F.line = 119;
		result_177557 = HEX24_182296(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178723)) {
		F.line = 119;
		result_177557 = HEX24_182296(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179965)) {
		F.line = 119;
		result_177557 = HEX24_182395(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180693)) {
		F.line = 119;
		result_177557 = HEX24_182455(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180514)) {
		F.line = 119;
		result_177557 = HEX24_182440(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180899)) {
		F.line = 119;
		result_177557 = HEX24_182476(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177024)) {
		F.line = 119;
		result_177557 = HEX24_177571(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179897)) {
		F.line = 119;
		result_177557 = HEX24_182386(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180656)) {
		F.line = 119;
		result_177557 = HEX24_182452(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180296)) {
		F.line = 119;
		result_177557 = HEX24_182422(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180763)) {
		F.line = 119;
		result_177557 = HEX24_182461(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180037)) {
		F.line = 119;
		result_177557 = HEX24_182401(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179866)) {
		F.line = 119;
		result_177557 = HEX24_182383(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180868)) {
		F.line = 119;
		result_177557 = HEX24_182473(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179928)) {
		F.line = 119;
		result_177557 = HEX24_182392(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180183)) {
		F.line = 119;
		result_177557 = HEX24_182413(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180473)) {
		F.line = 119;
		result_177557 = HEX24_182437(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179147)) {
		F.line = 119;
		result_177557 = HEX24_182326(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178726)) {
		F.line = 119;
		result_177557 = HEX24_182311(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178726)) {
		F.line = 119;
		result_177557 = HEX24_182311(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180992)) {
		F.line = 119;
		result_177557 = HEX24_182485(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180800)) {
		F.line = 119;
		result_177557 = HEX24_182464(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180619)) {
		F.line = 119;
		result_177557 = HEX24_182449(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180257)) {
		F.line = 119;
		result_177557 = HEX24_182419(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180728)) {
		F.line = 119;
		result_177557 = HEX24_182458(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181252)) {
		F.line = 119;
		result_177557 = HEX24_182518(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180432)) {
		F.line = 119;
		result_177557 = HEX24_182434(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180399)) {
		F.line = 119;
		result_177557 = HEX24_182431(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180837)) {
		F.line = 119;
		result_177557 = HEX24_182470(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178736)) {
		F.line = 119;
		result_177557 = HEX24_182467(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178736)) {
		F.line = 119;
		result_177557 = HEX24_182467(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180148)) {
		F.line = 119;
		result_177557 = HEX24_182410(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180109)) {
		F.line = 119;
		result_177557 = HEX24_182407(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180072)) {
		F.line = 119;
		result_177557 = HEX24_182404(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180551)) {
		F.line = 119;
		result_177557 = HEX24_182443(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181128)) {
		F.line = 119;
		result_177557 = HEX24_182503(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182158)) {
		F.line = 119;
		result_177557 = HEX24_182620(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178765)) {
		F.line = 119;
		result_177557 = HEX24_182617(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178765)) {
		F.line = 119;
		result_177557 = HEX24_182617(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180220)) {
		F.line = 119;
		result_177557 = HEX24_182416(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181221)) {
		F.line = 119;
		result_177557 = HEX24_182515(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181190)) {
		F.line = 119;
		result_177557 = HEX24_182512(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180366)) {
		F.line = 119;
		result_177557 = HEX24_182428(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182068)) {
		F.line = 119;
		result_177557 = HEX24_182608(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178757)) {
		F.line = 119;
		result_177557 = HEX24_182605(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178757)) {
		F.line = 119;
		result_177557 = HEX24_182605(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182027)) {
		F.line = 119;
		result_177557 = HEX24_182602(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178754)) {
		F.line = 119;
		result_177557 = HEX24_182599(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182107)) {
		F.line = 119;
		result_177557 = HEX24_182614(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178762)) {
		F.line = 119;
		result_177557 = HEX24_182611(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178762)) {
		F.line = 119;
		result_177557 = HEX24_182611(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181841)) {
		F.line = 119;
		result_177557 = HEX24_182581(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181810)) {
		F.line = 119;
		result_177557 = HEX24_182578(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181779)) {
		F.line = 119;
		result_177557 = HEX24_182575(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180333)) {
		F.line = 119;
		result_177557 = HEX24_182425(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181965)) {
		F.line = 119;
		result_177557 = HEX24_182593(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182228)) {
		F.line = 119;
		result_177557 = HEX24_182632(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178773)) {
		F.line = 119;
		result_177557 = HEX24_182629(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178773)) {
		F.line = 119;
		result_177557 = HEX24_182629(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181159)) {
		F.line = 119;
		result_177557 = HEX24_182506(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178742)) {
		F.line = 119;
		result_177557 = HEX24_182500(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178754)) {
		F.line = 119;
		result_177557 = HEX24_182599(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180586)) {
		F.line = 119;
		result_177557 = HEX24_182446(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178731)) {
		F.line = 119;
		result_177557 = HEX24_182389(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178731)) {
		F.line = 119;
		result_177557 = HEX24_182389(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181686)) {
		F.line = 119;
		result_177557 = HEX24_182563(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181655)) {
		F.line = 119;
		result_177557 = HEX24_182560(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178742)) {
		F.line = 119;
		result_177557 = HEX24_182500(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181469)) {
		F.line = 119;
		result_177557 = HEX24_182539(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181903)) {
		F.line = 119;
		result_177557 = HEX24_182587(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181748)) {
		F.line = 119;
		result_177557 = HEX24_182572(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181717)) {
		F.line = 119;
		result_177557 = HEX24_182569(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181934)) {
		F.line = 119;
		result_177557 = HEX24_182590(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181283)) {
		F.line = 119;
		result_177557 = HEX24_182521(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181872)) {
		F.line = 119;
		result_177557 = HEX24_182584(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181500)) {
		F.line = 119;
		result_177557 = HEX24_182542(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181314)) {
		F.line = 119;
		result_177557 = HEX24_182524(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181407)) {
		F.line = 119;
		result_177557 = HEX24_182533(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181996)) {
		F.line = 119;
		result_177557 = HEX24_182596(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178751)) {
		F.line = 119;
		result_177557 = HEX24_182566(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178751)) {
		F.line = 119;
		result_177557 = HEX24_182566(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181345)) {
		F.line = 119;
		result_177557 = HEX24_182527(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181438)) {
		F.line = 119;
		result_177557 = HEX24_182536(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181531)) {
		F.line = 119;
		result_177557 = HEX24_182545(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181376)) {
		F.line = 119;
		result_177557 = HEX24_182530(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181562)) {
		F.line = 119;
		result_177557 = HEX24_182548(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178745)) {
		F.line = 119;
		result_177557 = HEX24_182509(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178745)) {
		F.line = 119;
		result_177557 = HEX24_182509(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181624)) {
		F.line = 119;
		result_177557 = HEX24_182557(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181593)) {
		F.line = 119;
		result_177557 = HEX24_182554(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178748)) {
		F.line = 119;
		result_177557 = HEX24_182551(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178748)) {
		F.line = 119;
		result_177557 = HEX24_182551(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177022)) {
		F.line = 119;
		result_177557 = HEX24_177549(node_177551);
		break BeforeRet;
		}
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_177557;

}

function new_ast_store_180872() {
	var result_180874 = null;

	var F={procname:"asdl.newAstStore",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180874 = {m_type: NTI180868, kind: 0};
		F.line = 111;
		result_180874.kind = 1;
	framePtr = F.prev;

	return result_180874;

}

function set_store_407447(ast_node_407449) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 257;
		ast_node_407449.ctx = new_ast_store_180872();
	framePtr = F.prev;

	
}

function set_store_407431(ast_node_407433) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 254;
		ast_node_407433.ctx = new_ast_store_180872();
	framePtr = F.prev;

	
}

function set_store_407415(ast_node_407417) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 251;
		ast_node_407417.ctx = new_ast_store_180872();
	framePtr = F.prev;

	
}

function set_store_407463(ast_node_407465) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 260;
		ast_node_407465.ctx = new_ast_store_180872();
		L1: do {
			F.line = 261;
			var elm_407474 = null;
			F.line = 3909;
			var colontmp__407476 = null;
			F.line = 261;
			colontmp__407476 = ast_node_407465.elts;
			F.line = 3911;
			var i_407479 = 0;
			F.line = 3912;
			var l_407481 = (colontmp__407476 != null ? colontmp__407476.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_407479 < l_407481)) break L3;
						F.line = 3914;
						elm_407474 = colontmp__407476[chckIndx(i_407479, 0, colontmp__407476.length+0-1)-0];
						F.line = 262;
						set_store_407278(elm_407474);
						F.line = 3915;
						i_407479 = addInt(i_407479, 1);
						if (!(((colontmp__407476 != null ? colontmp__407476.length : 0) == l_407481))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function set_store_407274(ast_node_407276) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!(isObj(ast_node_407276.m_type, NTI178731))) {
		F.line = 2895;
		var e_407296 = null;
		F.line = 2896;
		e_407296 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 28;
		e_407296.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_407296.parent = null;
		F.line = 247;
		raiseException(e_407296, "InternalError");
		}
		
		F.line = 248;
		raiseException(new_syntax_error_156098(makeNimstrLit("can\'t assign"), [], ast_node_407276.lineno.value, ast_node_407276.col_offset.value), "SyntaxError:ObjectType");
	framePtr = F.prev;

	
}

function set_store_407278(ast_node_407276) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(ast_node_407276);
		if (isObj(ast_node_407276.m_type, NTI180656)) {
		F.line = 245;
		set_store_407447(ast_node_407276);
		}
		else {
		if (isObj(ast_node_407276.m_type, NTI180619)) {
		F.line = 245;
		set_store_407431(ast_node_407276);
		}
		else {
		if (isObj(ast_node_407276.m_type, NTI180728)) {
		F.line = 245;
		set_store_407415(ast_node_407276);
		}
		else {
		if (isObj(ast_node_407276.m_type, NTI180800)) {
		F.line = 245;
		set_store_407463(ast_node_407276);
		}
		else {
		if (isObj(ast_node_407276.m_type, NTI177022)) {
		F.line = 245;
		set_store_407274(ast_node_407276);
		}
		}}}}
	framePtr = F.prev;

	
}

function to_tuple_499873(instr_499875) {
	var result_499877 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"compile.toTuple",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 107;
		nimCopy(result_499877, {Field0: instr_499875.opCode, Field1: instr_499875.opArg, Field2: instr_499875.lineNo}, NTI499876);
	framePtr = F.prev;

	return result_499877;

}

function to_tuple_499847(instr_499849) {
	var result_499851 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"compile.toTuple",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 103;
		nimCopy(result_499851, {Field0: instr_499849.opCode, Field1: -1, Field2: instr_499849.lineNo}, NTI499850);
	framePtr = F.prev;

	return result_499851;

}

function to_tuple_499853(instr_499849) {
	var result_499856 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"compile.toTuple",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(instr_499849);
		if (isObj(instr_499849.m_type, NTI498045)) {
		F.line = 102;
		nimCopy(result_499856, to_tuple_499873(instr_499849), NTI499850);
		break BeforeRet;
		}
		else {
		if (isObj(instr_499849.m_type, NTI498041)) {
		F.line = 102;
		nimCopy(result_499856, to_tuple_499847(instr_499849), NTI499850);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_499856;

}

function to_op_code_502250(ast_node_502252) {
	var result_502253 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 356;
		result_502253 = 15;
	framePtr = F.prev;

	return result_502253;

}

function to_op_code_502232(ast_node_502234) {
	var result_502235 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 355;
		result_502235 = 18;
	framePtr = F.prev;

	return result_502235;

}

function to_op_code_502214(ast_node_502216) {
	var result_502217 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 354;
		result_502217 = 17;
	framePtr = F.prev;

	return result_502217;

}

function to_op_code_502322(ast_node_502324) {
	var result_502325 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 360;
		result_502325 = 20;
	framePtr = F.prev;

	return result_502325;

}

function to_op_code_502304(ast_node_502306) {
	var result_502307 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 359;
		result_502307 = 14;
	framePtr = F.prev;

	return result_502307;

}

function to_op_code_502286(ast_node_502288) {
	var result_502289 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 358;
		result_502289 = 16;
	framePtr = F.prev;

	return result_502289;

}

function to_op_code_502268(ast_node_502270) {
	var result_502271 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 357;
		result_502271 = 21;
	framePtr = F.prev;

	return result_502271;

}

function to_op_code_502082(op_502084) {
	var result_502085 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 348;
		rawEcho(HEX24_177554(op_502084));
		if (true) {
		F.line = 349;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(349, 10) `false` "));
		}
		
	framePtr = F.prev;

	return result_502085;

}

function to_op_code_502087(op_502084) {
	var result_502090 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(op_502084);
		if (isObj(op_502084.m_type, NTI181252)) {
		F.line = 347;
		result_502090 = to_op_code_502250(op_502084);
		break BeforeRet;
		}
		else {
		if (isObj(op_502084.m_type, NTI181221)) {
		F.line = 347;
		result_502090 = to_op_code_502232(op_502084);
		break BeforeRet;
		}
		else {
		if (isObj(op_502084.m_type, NTI181190)) {
		F.line = 347;
		result_502090 = to_op_code_502214(op_502084);
		break BeforeRet;
		}
		else {
		if (isObj(op_502084.m_type, NTI181562)) {
		F.line = 347;
		result_502090 = to_op_code_502322(op_502084);
		break BeforeRet;
		}
		else {
		if (isObj(op_502084.m_type, NTI181376)) {
		F.line = 347;
		result_502090 = to_op_code_502304(op_502084);
		break BeforeRet;
		}
		else {
		if (isObj(op_502084.m_type, NTI181345)) {
		F.line = 347;
		result_502090 = to_op_code_502286(op_502084);
		break BeforeRet;
		}
		else {
		if (isObj(op_502084.m_type, NTI181314)) {
		F.line = 347;
		result_502090 = to_op_code_502268(op_502084);
		break BeforeRet;
		}
		else {
		if (isObj(op_502084.m_type, NTI178745)) {
		F.line = 347;
		result_502090 = to_op_code_502082(op_502084);
		break BeforeRet;
		}
		}}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_502090;

}

function to_op_code_502450(ast_node_502452) {
	var result_502453 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 372;
		result_502453 = 8;
	framePtr = F.prev;

	return result_502453;

}

function to_op_code_502432(ast_node_502434) {
	var result_502435 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 371;
		result_502435 = 10;
	framePtr = F.prev;

	return result_502435;

}

function to_op_code_502414(ast_node_502416) {
	var result_502417 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 370;
		result_502417 = 11;
	framePtr = F.prev;

	return result_502417;

}

function to_op_code_502468(ast_node_502470) {
	var result_502471 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 373;
		result_502471 = 9;
	framePtr = F.prev;

	return result_502471;

}

function to_op_code_502353(op_502355) {
	var result_502356 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_502367 = null;
		F.line = 2896;
		e_502367 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 28;
		e_502367.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_502367.parent = null;
		F.line = 365;
		raiseException(e_502367, "InternalError");
	framePtr = F.prev;

	return result_502356;

}

function to_op_code_502358(op_502355) {
	var result_502361 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(op_502355);
		if (isObj(op_502355.m_type, NTI181655)) {
		F.line = 364;
		result_502361 = to_op_code_502450(op_502355);
		break BeforeRet;
		}
		else {
		if (isObj(op_502355.m_type, NTI181624)) {
		F.line = 364;
		result_502361 = to_op_code_502432(op_502355);
		break BeforeRet;
		}
		else {
		if (isObj(op_502355.m_type, NTI181593)) {
		F.line = 364;
		result_502361 = to_op_code_502414(op_502355);
		break BeforeRet;
		}
		else {
		if (isObj(op_502355.m_type, NTI181686)) {
		F.line = 364;
		result_502361 = to_op_code_502468(op_502355);
		break BeforeRet;
		}
		else {
		if (isObj(op_502355.m_type, NTI178748)) {
		F.line = 364;
		result_502361 = to_op_code_502353(op_502355);
		break BeforeRet;
		}
		}}}}
	} while (false);
	framePtr = F.prev;

	return result_502361;

}

function add_op_500505(c_500507, op_code_500508, line_no_500509) {
	var F={procname:"compile.addOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(!((ConstSet24[op_code_500508] != undefined)))) {
		F.line = 164;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(164, 3) `not contains({OpCode.STORE_NAME, OpCode.DELETE_NAME, OpCode.UNPACK_SEQUENCE,\x0A             OpCode.FOR_ITER, OpCode.UNPACK_EX, OpCode.STORE_ATTR,\x0A             OpCode.DELETE_ATTR, OpCode.STORE_GLOBAL, OpCode.DELETE_GLOBAL,\x0A             OpCode.LOAD_CONST, OpCode.LOAD_NAME, OpCode.BUILD_TUPLE,\x0A             OpCode.BUILD_LIST, OpCode.BUILD_SET, OpCode.BUILD_MAP,\x0A             OpCode.LOAD_ATTR, OpCode.COMPARE_OP, OpCode.IMPORT_NAME,\x0A             OpCode.IMPORT_FROM, OpCode.JUMP_FORWARD, OpCode.JUMP_IF_FALSE_OR_POP,\x0A             OpCode.JUMP_IF_TRUE_OR_POP, OpCode.JUMP_ABSOLUTE,\x0A             OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE,\x0A             OpCode.LOAD_GLOBAL, OpCode.SETUP_FINALLY, OpCode.LOAD_FAST,\x0A             OpCode.STORE_FAST, OpCode.DELETE_FAST, OpCode.RAISE_VARARGS,\x0A             OpCode.CALL_FUNCTION, OpCode.MAKE_FUNCTION, OpCode.BUILD_SLICE,\x0A             OpCode.LOAD_CLOSURE, OpCode.LOAD_DEREF, OpCode.STORE_DEREF,\x0A             OpCode.DELETE_DEREF, OpCode.CALL_FUNCTION_KW,\x0A             OpCode.CALL_FUNCTION_EX, OpCode.SETUP_WITH, OpCode.EXTENDED_ARG,\x0A             OpCode.LIST_APPEND, OpCode.SET_ADD, OpCode.MAP_ADD,\x0A             OpCode.LOAD_CLASSDEREF, OpCode.BUILD_LIST_UNPACK,\x0A             OpCode.BUILD_MAP_UNPACK, OpCode.BUILD_MAP_UNPACK_WITH_CALL,\x0A             OpCode.BUILD_TUPLE_UNPACK, OpCode.BUILD_SET_UNPACK,\x0A             OpCode.SETUP_ASYNC_WITH, OpCode.FORMAT_VALUE,\x0A             OpCode.BUILD_CONST_KEY_MAP, OpCode.BUILD_STRING,\x0A             OpCode.BUILD_TUPLE_UNPACK_WITH_CALL, OpCode.LOAD_METHOD,\x0A             OpCode.CALL_METHOD, OpCode.CALL_FINALLY, OpCode.POP_FINALLY,\x0A             OpCode.EXCEPT_HANDLER}, opCode)` "));
		}
		
		F.line = 165;
		add_op_500445(tcu_499986(c_500507), new_instr_498133(op_code_500508, line_no_500509));
	framePtr = F.prev;

	
}

function compile_507216(c_507218, ast_node_507219) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 755;
		var line_no_507220 = ast_node_507219.lineno.value;
		if (isObj(ast_node_507219.ctx.m_type, NTI180837)) {
		F.line = 757;
		compile_502538(c_507218, ast_node_507219.value);
		F.line = 758;
		compile_502538(c_507218, ast_node_507219.slice);
		F.line = 759;
		add_op_500505(c_507218, 19, line_no_507220);
		}
		else {
		if (isObj(ast_node_507219.ctx.m_type, NTI180868)) {
		F.line = 761;
		compile_502538(c_507218, ast_node_507219.value);
		F.line = 762;
		compile_502538(c_507218, ast_node_507219.slice);
		F.line = 763;
		add_op_500505(c_507218, 33, line_no_507220);
		}
		else {
			F.line = 2895;
			var e_507250 = null;
			F.line = 2896;
			e_507250 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_507250.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_507250.parent = null;
			F.line = 765;
			raiseException(e_507250, "InternalError");
		}
		}
	framePtr = F.prev;

	
}

function tste_500041(c_500043) {
	var result_500044 = null;

	var F={procname:"compile.tste",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 126;
		result_500044 = tcu_499986(c_500043).ste;
	framePtr = F.prev;

	return result_500044;

}

function add_op_500488(c_500490, instr_500491) {
	var F={procname:"compile.addOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 160;
		add_op_500445(tcu_499986(c_500490), instr_500491);
	framePtr = F.prev;

	
}

function compile_507029(c_507031, ast_node_507032) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 744;
		var line_no_507033 = ast_node_507032.lineno.value;
		F.line = 745;
		compile_502538(c_507031, ast_node_507032.value);
		F.line = 746;
		var op_arg_507034 = name_id_442042(tste_500041(c_507031), ast_node_507032.attr.value);
		if (isObj(ast_node_507032.ctx.m_type, NTI180837)) {
		F.line = 748;
		add_op_500488(c_507031, new_arg_instr_498437(77, op_arg_507034, line_no_507033));
		}
		else {
		if (isObj(ast_node_507032.ctx.m_type, NTI180868)) {
		F.line = 750;
		add_op_500488(c_507031, new_arg_instr_498437(67, op_arg_507034, line_no_507033));
		}
		else {
			F.line = 2895;
			var e_507064 = null;
			F.line = 2896;
			e_507064 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_507064.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_507064.parent = null;
			F.line = 752;
			raiseException(e_507064, "InternalError");
		}
		}
	framePtr = F.prev;

	
}

function free_id_446438(ste_446440, name_str_446441) {
		var Tmp1;

	var result_446442 = 0;

	var F={procname:"symtable.freeId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 112;
		result_446442 = addInt((Tmp1 = HEX5BHEX5D_440903(ste_446440.freeVars, name_str_446441), Tmp1[0])[Tmp1[1]], len_442683(ste_446440.cellVars));
	framePtr = F.prev;

	return result_446442;

}

function add_load_op_500680(c_500682, name_str_500683, line_no_500684) {
	var F={procname:"compile.addLoadOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 182;
		var scope_500685 = get_scope_435803(tste_500041(c_500682), name_str_500683);
		F.line = 185;
		var op_arg_500686 = 0;
		F.line = 186;
		var op_code_500687 = 0;
		F.line = 188;
		switch (scope_500685) {
		case 0:
			F.line = 190;
			op_arg_500686 = local_id_440666(tste_500041(c_500682), name_str_500683);
			F.line = 191;
			op_code_500687 = 89;
			break;
		case 3:
			F.line = 193;
			op_arg_500686 = name_id_442042(tste_500041(c_500682), name_str_500683);
			F.line = 194;
			op_code_500687 = 87;
			break;
		case 1:
			F.line = 196;
			op_arg_500686 = cell_id_446176(tste_500041(c_500682), name_str_500683);
			F.line = 197;
			op_code_500687 = 97;
			break;
		case 2:
			F.line = 199;
			op_arg_500686 = free_id_446438(tste_500041(c_500682), name_str_500683);
			F.line = 200;
			op_code_500687 = 97;
			break;
		}
		F.line = 202;
		var instr_500696 = new_arg_instr_498437(op_code_500687, op_arg_500686, line_no_500684);
		F.line = 203;
		add_op_500488(c_500682, instr_500696);
	framePtr = F.prev;

	
}

function add_load_op_500710(c_500712, name_500713, line_no_500714) {
	var F={procname:"compile.addLoadOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 207;
		var name_str_500715 = name_500713.value;
		F.line = 208;
		add_load_op_500680(c_500712, name_str_500715, line_no_500714);
	framePtr = F.prev;

	
}

function add_store_op_500729(c_500731, name_str_500732, line_no_500733) {
	var F={procname:"compile.addStoreOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 212;
		var scope_500734 = get_scope_435803(tste_500041(c_500731), name_str_500732);
		F.line = 215;
		var op_arg_500735 = 0;
		F.line = 216;
		var op_code_500736 = 0;
		F.line = 218;
		switch (scope_500734) {
		case 0:
			F.line = 220;
			op_arg_500735 = local_id_440666(tste_500041(c_500731), name_str_500732);
			F.line = 221;
			op_code_500736 = 90;
			break;
		case 3:
			F.line = 223;
			op_arg_500735 = name_id_442042(tste_500041(c_500731), name_str_500732);
			F.line = 224;
			op_code_500736 = 69;
			break;
		case 1:
			F.line = 226;
			op_arg_500735 = cell_id_446176(tste_500041(c_500731), name_str_500732);
			F.line = 227;
			op_code_500736 = 98;
			break;
		case 2:
			F.line = 229;
			op_arg_500735 = free_id_446438(tste_500041(c_500731), name_str_500732);
			F.line = 230;
			op_code_500736 = 98;
			break;
		}
		F.line = 232;
		var instr_500745 = new_arg_instr_498437(op_code_500736, op_arg_500735, line_no_500733);
		F.line = 233;
		add_op_500488(c_500731, instr_500745);
	framePtr = F.prev;

	
}

function add_store_op_500759(c_500761, name_500762, line_no_500763) {
	var F={procname:"compile.addStoreOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 237;
		var name_str_500764 = name_500762.value;
		F.line = 238;
		add_store_op_500729(c_500761, name_str_500764, line_no_500763);
	framePtr = F.prev;

	
}

function compile_507433(c_507435, ast_node_507436) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 773;
		var line_no_507437 = ast_node_507436.lineno.value;
		if (isObj(ast_node_507436.ctx.m_type, NTI180837)) {
		F.line = 775;
		add_load_op_500710(c_507435, ast_node_507436.id, line_no_507437);
		}
		else {
		if (isObj(ast_node_507436.ctx.m_type, NTI180868)) {
		F.line = 777;
		add_store_op_500759(c_507435, ast_node_507436.id, line_no_507437);
		}
		else {
			F.line = 2895;
			var e_507465 = null;
			F.line = 2896;
			e_507465 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_507465.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_507465.parent = null;
			F.line = 779;
			raiseException(e_507465, "InternalError");
		}
		}
	framePtr = F.prev;

	
}

function compile_507416(c_507418, ast_node_507419) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 769;
		add_load_const_500641(tcu_499986(c_507418), ast_node_507419.value.value, ast_node_507419.lineno.value);
	framePtr = F.prev;

	
}

function last_line_no_500269(c_500271) {
	var result_500272 = 0;

	var F={procname:"compile.lastLineNo",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 149;
		result_500272 = last_line_no_500154(tcu_499986(c_500271));
	framePtr = F.prev;

	return result_500272;

}

function compile_507665(c_507667, ast_node_507668) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 793;
		switch (ast_node_507668.ctx.kind) {
		case 0:
			L1: do {
				F.line = 795;
				var elt_507678 = null;
				F.line = 3909;
				var colontmp__507802 = null;
				F.line = 795;
				colontmp__507802 = ast_node_507668.elts;
				F.line = 3911;
				var i_507805 = 0;
				F.line = 3912;
				var l_507807 = (colontmp__507802 != null ? colontmp__507802.length : 0);
				L2: do {
					F.line = 3913;
						L3: while (true) {
						if (!(i_507805 < l_507807)) break L3;
							F.line = 3914;
							elt_507678 = colontmp__507802[chckIndx(i_507805, 0, colontmp__507802.length+0-1)-0];
							F.line = 796;
							compile_502538(c_507667, elt_507678);
							F.line = 3915;
							i_507805 = addInt(i_507805, 1);
							if (!(((colontmp__507802 != null ? colontmp__507802.length : 0) == l_507807))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			F.line = 797;
			var line_no_507679 = 0;
			if (((ast_node_507668.elts != null ? ast_node_507668.elts.length : 0) == 0)) {
			F.line = 799;
			line_no_507679 = ast_node_507668.lineno.value;
			}
			else {
				F.line = 801;
				line_no_507679 = last_line_no_500269(c_507667);
			}
			
			F.line = 802;
			add_op_500488(c_507667, new_arg_instr_498437(73, (ast_node_507668.elts != null ? ast_node_507668.elts.length : 0), line_no_507679));
			break;
		case 1:
			F.line = 804;
			add_op_500488(c_507667, new_arg_instr_498437(64, (ast_node_507668.elts != null ? ast_node_507668.elts.length : 0), ast_node_507668.lineno.value));
			L4: do {
				F.line = 805;
				var elt_507712 = null;
				F.line = 3909;
				var colontmp__507809 = null;
				F.line = 805;
				colontmp__507809 = ast_node_507668.elts;
				F.line = 3911;
				var i_507812 = 0;
				F.line = 3912;
				var l_507814 = (colontmp__507809 != null ? colontmp__507809.length : 0);
				L5: do {
					F.line = 3913;
						L6: while (true) {
						if (!(i_507812 < l_507814)) break L6;
							F.line = 3914;
							elt_507712 = colontmp__507809[chckIndx(i_507812, 0, colontmp__507809.length+0-1)-0];
							F.line = 806;
							compile_502538(c_507667, elt_507712);
							F.line = 3915;
							i_507812 = addInt(i_507812, 1);
							if (!(((colontmp__507809 != null ? colontmp__507809.length : 0) == l_507814))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			break;
		default: 
			F.line = 2895;
			var e_507718 = null;
			F.line = 2896;
			e_507718 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_507718.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_507718.parent = null;
			F.line = 808;
			raiseException(e_507718, "InternalError");
			break;
		}
	framePtr = F.prev;

	
}

function compile_507616(c_507618, ast_node_507619) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 783;
			var elt_507628 = null;
			F.line = 3909;
			var colontmp__507646 = null;
			F.line = 783;
			colontmp__507646 = ast_node_507619.elts;
			F.line = 3911;
			var i_507649 = 0;
			F.line = 3912;
			var l_507651 = (colontmp__507646 != null ? colontmp__507646.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_507649 < l_507651)) break L3;
						F.line = 3914;
						elt_507628 = colontmp__507646[chckIndx(i_507649, 0, colontmp__507646.length+0-1)-0];
						F.line = 784;
						compile_502538(c_507618, elt_507628);
						F.line = 3915;
						i_507649 = addInt(i_507649, 1);
						if (!(((colontmp__507646 != null ? colontmp__507646.length : 0) == l_507651))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 785;
		var line_no_507629 = 0;
		if (((ast_node_507619.elts != null ? ast_node_507619.elts.length : 0) == 0)) {
		F.line = 787;
		line_no_507629 = ast_node_507619.lineno.value;
		}
		else {
			F.line = 789;
			line_no_507629 = last_line_no_500269(c_507618);
		}
		
		F.line = 790;
		add_op_500488(c_507618, new_arg_instr_498437(74, (ast_node_507619.elts != null ? ast_node_507619.elts.length : 0), line_no_507629));
	framePtr = F.prev;

	
}

function compile_507879(c_507881, ast_node_507882) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 831;
		compile_502538(c_507881, ast_node_507882.value);
	framePtr = F.prev;

	
}

function add_load_const_500662(c_500664, py_object_500665, line_no_500666) {
	var F={procname:"compile.addLoadConst",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 177;
		add_load_const_500641(tcu_499986(c_500664), py_object_500665, line_no_500666);
	framePtr = F.prev;

	
}

function compile_507828(c_507830, ast_node_507831) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 811;
		var line_no_507832 = last_line_no_500269(c_507830);
		F.line = 812;
		var n_507834 = 2;
		if ((ast_node_507831.lower === null)) {
		F.line = 815;
		add_load_const_500662(c_507830, py_none_356044, line_no_507832);
		}
		else {
			F.line = 817;
		compile_502538(c_507830, ast_node_507831.lower);
		}
		
		if ((ast_node_507831.upper === null)) {
		F.line = 820;
		add_load_const_500662(c_507830, py_none_356044, line_no_507832);
		}
		else {
			F.line = 822;
		compile_502538(c_507830, ast_node_507831.upper);
		}
		
		if (!((ast_node_507831.step === null))) {
		F.line = 825;
		compile_502538(c_507830, ast_node_507831.step);
		F.line = 826;
		n_507834 = addInt(n_507834, 1);
		}
		
		F.line = 828;
		add_op_500488(c_507830, new_arg_instr_498437(95, n_507834, line_no_507832));
	framePtr = F.prev;

	
}

function compile_506068(c_506070, ast_node_506071) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 669;
		var n_506079 = (ast_node_506071.values != null ? ast_node_506071.values.length : 0);
		L1: do {
			F.line = 670;
			var i_506097 = 0;
			F.line = 3616;
			var colontmp__506108 = 0;
			F.line = 670;
			colontmp__506108 = (ast_node_506071.keys != null ? ast_node_506071.keys.length : 0);
			F.line = 3617;
			var i_506111 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_506111 < colontmp__506108)) break L3;
						F.line = 3619;
						i_506097 = i_506111;
						F.line = 671;
						compile_502538(c_506070, ast_node_506071.values[chckIndx(i_506097, 0, ast_node_506071.values.length+0-1)-0]);
						F.line = 672;
						compile_502538(c_506070, ast_node_506071.keys[chckIndx(i_506097, 0, ast_node_506071.keys.length+0-1)-0]);
						F.line = 3620;
						i_506111 = addInt(i_506111, 1);
					}
			} while(false);
		} while(false);
		F.line = 673;
		var line_no_506098 = 0;
		if (((ast_node_506071.keys != null ? ast_node_506071.keys.length : 0) == 0)) {
		F.line = 675;
		line_no_506098 = ast_node_506071.lineno.value;
		}
		else {
			F.line = 677;
			line_no_506098 = last_line_no_500269(c_506070);
		}
		
		F.line = 678;
		add_op_500488(c_506070, new_arg_instr_498437(76, n_506079, line_no_506098));
	framePtr = F.prev;

	
}

function compile_507919(c_507921, ast_node_507922) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_507928 = null;
		F.line = 2896;
		e_507928 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 28;
		e_507928.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_507928.parent = null;
		F.line = 840;
		raiseException(e_507928, "InternalError");
	framePtr = F.prev;

	
}

function compile_506243(c_506245, ast_node_506246) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_506246.ops != null ? ast_node_506246.ops.length : 0) == 1))) {
		F.line = 708;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(708, 10) `len(astNode.ops) == 1` "));
		}
		
		if (!(((ast_node_506246.comparators != null ? ast_node_506246.comparators.length : 0) == 1))) {
		F.line = 709;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(709, 10) `len(astNode.comparators) == 1` "));
		}
		
		F.line = 710;
		compile_502538(c_506245, ast_node_506246.left);
		F.line = 711;
		compile_502538(c_506245, ast_node_506246.comparators[chckIndx(0, 0, ast_node_506246.comparators.length+0-1)-0]);
		F.line = 714;
		switch (ast_node_506246.ops[chckIndx(0, 0, ast_node_506246.ops.length+0-1)-0].kind) {
		case 2:
			F.line = 716;
			add_op_500488(c_506245, new_arg_instr_498437(78, 0, ast_node_506246.lineno.value));
			break;
		case 3:
			F.line = 718;
			add_op_500488(c_506245, new_arg_instr_498437(78, 1, ast_node_506246.lineno.value));
			break;
		case 4:
			F.line = 720;
			add_op_500488(c_506245, new_arg_instr_498437(78, 4, ast_node_506246.lineno.value));
			break;
		case 5:
			F.line = 722;
			add_op_500488(c_506245, new_arg_instr_498437(78, 5, ast_node_506246.lineno.value));
			break;
		case 0:
			F.line = 724;
			add_op_500488(c_506245, new_arg_instr_498437(78, 2, ast_node_506246.lineno.value));
			break;
		case 1:
			F.line = 726;
			add_op_500488(c_506245, new_arg_instr_498437(78, 3, ast_node_506246.lineno.value));
			break;
		case 8:
			F.line = 728;
			add_op_500488(c_506245, new_arg_instr_498437(78, 6, ast_node_506246.lineno.value));
			break;
		case 9:
			F.line = 730;
			add_op_500488(c_506245, new_arg_instr_498437(78, 7, ast_node_506246.lineno.value));
			break;
		default: 
			F.line = 2895;
			var e_506639 = null;
			F.line = 2896;
			e_506639 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_506639.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_506639.parent = null;
			F.line = 732;
			raiseException(e_506639, "InternalError");
			break;
		}
	framePtr = F.prev;

	
}

function add_block_500614(c_500616, cb_500617) {
	var F={procname:"compile.addBlock",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 169;
		if (tcu_499986(c_500616).blocks != null) { tcu_499986(c_500616).blocks.push(cb_500617); } else { tcu_499986(c_500616).blocks = [cb_500617]; };
	framePtr = F.prev;

	
}

function new_499003() {
	var result_499008 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_499201 = null;
		F.line = 211;
		r_499201 = {m_type: NTI498048, target: null, opArg: 0, opCode: 0, lineNo: 0};
		F.line = 212;
		result_499008 = r_499201;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_499008;

}

function new_jump_instr_498837(op_code_498839, target_498840, line_no_498841) {
	var result_498842 = null;

	var F={procname:"compile.newJumpInstr",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!((ConstSet25[op_code_498839] != undefined))) {
		F.line = 74;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(74, 10) `contains({OpCode.JUMP_FORWARD, OpCode.JUMP_IF_FALSE_OR_POP,\x0A          OpCode.JUMP_IF_TRUE_OR_POP, OpCode.JUMP_ABSOLUTE,\x0A          OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE, OpCode.FOR_ITER,\x0A          OpCode.SETUP_FINALLY}, opCode)` "));
		}
		
		F.line = 75;
		result_498842 = new_499003();
		F.line = 76;
		result_498842.opCode = op_code_498839;
		F.line = 77;
		result_498842.opArg = -1;
		F.line = 78;
		result_498842.target = target_498840;
		F.line = 79;
		result_498842.lineNo = line_no_498841;
	framePtr = F.prev;

	return result_498842;

}

function has_cell_446916(ste_446918, name_str_446919) {
	var result_446920 = false;

	var F={procname:"symtable.hasCell",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 115;
		result_446920 = has_key_442193(ste_446918.cellVars, name_str_446919);
	framePtr = F.prev;

	return result_446920;

}

function has_free_447089(ste_447091, name_str_447092) {
	var result_447093 = false;

	var F={procname:"symtable.hasFree",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 118;
		result_447093 = has_key_442193(ste_447091.freeVars, name_str_447092);
	framePtr = F.prev;

	return result_447093;

}

function make_function_501662(c_501664, cu_501665, function_name_501666, line_no_501667) {
	var F={procname:"compile.makeFunction",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(!((cu_501665.codeName === null)))) {
		F.line = 289;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(289, 3) `not isNil(cu.codeName)` "));
		}
		
		F.line = 291;
		var co_501801 = assemble_500778(cu_501665, c_501664.fileName);
		F.line = 293;
		var flag_501802 = 0;
		if (!(((co_501801.freeVars != null ? co_501801.freeVars.length : 0) == 0))) {
		L1: do {
			F.line = 308;
			var name_501818 = null;
			F.line = 3909;
			var colontmp__502011 = null;
			F.line = 308;
			colontmp__502011 = co_501801.freeVars;
			F.line = 3911;
			var i_502014 = 0;
			F.line = 3912;
			var l_502016 = (colontmp__502011 != null ? colontmp__502011.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_502014 < l_502016)) break L3;
						F.line = 3914;
						name_501818 = colontmp__502011[chckIndx(i_502014, 0, colontmp__502011.length+0-1)-0];
						if (has_cell_446916(tste_500041(c_501664), name_501818)) {
						F.line = 310;
						add_op_500488(c_501664, new_arg_instr_498437(96, cell_id_446176(tste_500041(c_501664), name_501818), line_no_501667));
						}
						else {
						if (has_free_447089(tste_500041(c_501664), name_501818)) {
						F.line = 312;
						add_op_500488(c_501664, new_arg_instr_498437(96, free_id_446438(tste_500041(c_501664), name_501818), line_no_501667));
						}
						else {
							F.line = 2895;
							var e_501826 = null;
							F.line = 2896;
							e_501826 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 28;
							e_501826.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
							F.line = 2891;
							e_501826.parent = null;
							F.line = 314;
							raiseException(e_501826, "InternalError");
						}
						}
						F.line = 3915;
						i_502014 = addInt(i_502014, 1);
						if (!(((colontmp__502011 != null ? colontmp__502011.length : 0) == l_502016))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 315;
		add_op_500488(c_501664, new_arg_instr_498437(73, (co_501801.freeVars != null ? co_501801.freeVars.length : 0), line_no_501667));
		F.line = 316;
		flag_501802 = (flag_501802 | 8);
		}
		
		F.line = 318;
		add_load_const_500641(tcu_499986(c_501664), co_501801, line_no_501667);
		F.line = 319;
		add_load_const_500641(tcu_499986(c_501664), function_name_501666, line_no_501667);
		F.line = 321;
		add_op_500488(c_501664, new_arg_instr_498437(94, flag_501802, line_no_501667));
	framePtr = F.prev;

	
}

function pop_503014(s_503020, s_503020_Idx) {
	var result_503021 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_503029 = subInt((s_503020[s_503020_Idx] != null ? s_503020[s_503020_Idx].length : 0), 1);
		F.line = 2525;
		result_503021 = s_503020[s_503020_Idx][chckIndx(l_503029, 0, s_503020[s_503020_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_503020[s_503020_Idx].length < chckRange(l_503029, 0, 2147483647)) { for (var i=s_503020[s_503020_Idx].length;i<chckRange(l_503029, 0, 2147483647);++i) s_503020[s_503020_Idx].push(null); }
               else { s_503020[s_503020_Idx].length = chckRange(l_503029, 0, 2147483647); };
	framePtr = F.prev;

	return result_503021;

}

function compile_506126(c_506128, ast_node_506129) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 681;
		var line_no_506130 = ast_node_506129.lineno.value;
		if (!(((ast_node_506129.generators != null ? ast_node_506129.generators.length : 0) == 1))) {
		F.line = 682;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(682, 10) `len(astNode.generators) == 1` "));
		}
		
		F.line = 683;
		var gen_node_506201 = ast_node_506129.generators[chckIndx(0, 0, ast_node_506129.generators.length+0-1)-0];
		F.line = 684;
		if (c_506128.units != null) { c_506128.units.push(new_compiler_unit_499437(c_506128.st, ast_node_506129, new_py_str_176092(makeNimstrLit("<listcomp>")))); } else { c_506128.units = [new_compiler_unit_499437(c_506128.st, ast_node_506129, new_py_str_176092(makeNimstrLit("<listcomp>")))]; };
		F.line = 686;
		var body_506212 = new_basic_block_499238(0);
		F.line = 687;
		var ending_506213 = new_basic_block_499238(0);
		F.line = 688;
		add_op_500488(c_506128, new_arg_instr_498437(74, 0, line_no_506130));
		F.line = 689;
		add_load_op_500680(c_506128, new_py_string_176075(makeNimstrLit(".0")), ast_node_506129.lineno.value);
		F.line = 690;
		add_block_500614(c_506128, body_506212);
		F.line = 691;
		add_op_500488(c_506128, new_jump_instr_498837(65, ending_506213, line_no_506130));
		F.line = 692;
		compile_502538(c_506128, gen_node_506201.target);
		F.line = 693;
		compile_502538(c_506128, ast_node_506129.elt);
		F.line = 695;
		add_op_500488(c_506128, new_arg_instr_498437(104, 2, line_no_506130));
		F.line = 696;
		add_op_500488(c_506128, new_jump_instr_498837(84, body_506212, line_no_506130));
		F.line = 697;
		add_block_500614(c_506128, ending_506213);
		F.line = 698;
		add_op_500505(c_506128, 54, line_no_506130);
		F.line = 700;
		make_function_501662(c_506128, pop_503014(c_506128, "units"), new_py_string_176075(makeNimstrLit("listcomp")), line_no_506130);
		F.line = 702;
		compile_502538(c_506128, gen_node_506201.iter);
		F.line = 703;
		add_op_500505(c_506128, 41, line_no_506130);
		F.line = 704;
		add_op_500488(c_506128, new_arg_instr_498437(93, 1, line_no_506130));
	framePtr = F.prev;

	
}

function compile_505067(c_505069, ast_node_505070) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 583;
		var line_no_505071 = ast_node_505070.lineno.value;
		F.line = 584;
		var ending_505072 = new_basic_block_499238(0);
		F.line = 585;
		compile_502538(c_505069, ast_node_505070.test);
		F.line = 586;
		add_op_500488(c_505069, new_jump_instr_498837(86, ending_505072, line_no_505071));
		F.line = 587;
		add_load_op_500680(c_505069, new_py_string_176075(makeNimstrLit("AssertionError")), line_no_505071);
		if (!((ast_node_505070.msg === null))) {
		F.line = 589;
		compile_502538(c_505069, ast_node_505070.msg);
		F.line = 590;
		add_op_500488(c_505069, new_arg_instr_498437(93, 1, line_no_505071));
		}
		
		F.line = 591;
		add_op_500488(c_505069, new_arg_instr_498437(92, 1, line_no_505071));
		F.line = 592;
		add_block_500614(c_505069, ending_505072);
	framePtr = F.prev;

	
}

function compile_506822(c_506824, ast_node_506825) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 736;
		compile_502538(c_506824, ast_node_506825.fun);
		L1: do {
			F.line = 737;
			var arg_506834 = null;
			F.line = 3909;
			var colontmp__507010 = null;
			F.line = 737;
			colontmp__507010 = ast_node_506825.args;
			F.line = 3911;
			var i_507013 = 0;
			F.line = 3912;
			var l_507015 = (colontmp__507010 != null ? colontmp__507010.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_507013 < l_507015)) break L3;
						F.line = 3914;
						arg_506834 = colontmp__507010[chckIndx(i_507013, 0, colontmp__507010.length+0-1)-0];
						F.line = 738;
						compile_502538(c_506824, arg_506834);
						F.line = 3915;
						i_507013 = addInt(i_507013, 1);
						if (!(((colontmp__507010 != null ? colontmp__507010.length : 0) == l_507015))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!(((ast_node_506825.keywords != null ? ast_node_506825.keywords.length : 0) == 0))) {
		F.line = 739;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(739, 10) `len(astNode.keywords) == 0` "));
		}
		
		F.line = 740;
		add_op_500488(c_506824, new_arg_instr_498437(93, (ast_node_506825.args != null ? ast_node_506825.args.length : 0), ast_node_506825.lineno.value));
	framePtr = F.prev;

	
}

function compile_505216(c_505218, ast_node_505219) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 606;
		var line_no_505220 = ast_node_505219.value.lineno.value;
		F.line = 607;
		compile_502538(c_505218, ast_node_505219.value);
		if (c_505218.interactive) {
		F.line = 609;
		add_op_500488(c_505218, new_instr_498133(43, line_no_505220));
		}
		else {
			F.line = 611;
		add_op_500488(c_505218, new_instr_498133(1, line_no_505220));
		}
		
	framePtr = F.prev;

	
}

function compile_505096(c_505098, ast_node_505099) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 596;
		var line_no_505100 = ast_node_505099.lineno.value;
		if ((~((ast_node_505099.names != null ? ast_node_505099.names.length : 0)) == 1)) {
		F.line = 2895;
		var e_505113 = null;
		F.line = 2896;
		e_505113 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 28;
		e_505113.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_505113.parent = null;
		F.line = 598;
		raiseException(e_505113, "InternalError");
		}
		
		F.line = 599;
		var name_505201 = ast_node_505099.names[chckIndx(0, 0, ast_node_505099.names.length+0-1)-0].name;
		F.line = 600;
		add_op_500488(c_505098, new_arg_instr_498437(79, name_id_442042(tste_500041(c_505098), name_505201.value), line_no_505100));
		F.line = 601;
		add_store_op_500759(c_505098, name_505201, line_no_505100);
	framePtr = F.prev;

	
}

function new_seq_505405(len_505409) {
	var result_505411 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_505411 = new Array(len_505409); for (var i=0;i<len_505409;++i) {result_505411[i]=null;}	framePtr = F.prev;

	return result_505411;

}

function reversed_505304(a_505309, first_505311, last_505313) {
	var result_505315 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		if (!((subInt(first_505311, 1) <= last_505313))) {
		F.line = 54;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(54, 10) `\x0Afirst - 1 <= last` "));
		}
		
		F.line = 55;
		var i_505401 = subInt(last_505313, first_505311);
		F.line = 56;
		var x_505402 = first_505311;
		F.line = 57;
		result_505315 = nimCopy(null, new_seq_505405(chckRange(addInt(i_505401, 1), 0, 2147483647)), NTI505410);
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!(0 <= i_505401)) break L2;
					F.line = 59;
					result_505315[chckIndx(i_505401, 0, result_505315.length+0-1)-0] = a_505309[chckIndx(x_505402, 0, a_505309.length+0-1)-0];
					F.line = 60;
					i_505401 = subInt(i_505401, 1);
					F.line = 61;
					x_505402 = addInt(x_505402, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_505315;

}

function reversed_505288(a_505293) {
	var result_505295 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_505295 = nimCopy(null, reversed_505304(a_505293, 0, (a_505293 != null ? (a_505293.length-1) : -1)), NTI505314);
	framePtr = F.prev;

	return result_505295;

}

function compile_505278(c_505280, ast_node_505281) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 626;
		var loop_block_505282 = null;
		L1: do {
			F.line = 617;
			var basic_block_505493 = null;
			F.line = 3909;
			var colontmp__505515 = null;
			F.line = 617;
			colontmp__505515 = reversed_505288(tcu_499986(c_505280).blocks);
			F.line = 3911;
			var i_505518 = 0;
			F.line = 3912;
			var l_505520 = (colontmp__505515 != null ? colontmp__505515.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_505518 < l_505520)) break L3;
						F.line = 3914;
						basic_block_505493 = colontmp__505515[chckIndx(i_505518, 0, colontmp__505515.length+0-1)-0];
						if ((ConstSet26[basic_block_505493.tp] != undefined)) {
						F.line = 619;
						loop_block_505282 = basic_block_505493;
						F.line = 620;
						break L1;
						}
						
						F.line = 3915;
						i_505518 = addInt(i_505518, 1);
						if (!(((colontmp__505515 != null ? colontmp__505515.length : 0) == l_505520))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((loop_block_505282 === null)) {
		F.line = 622;
		raiseException(new_syntax_error_156098(makeNimstrLit("\'break\' outside loop"), [], ast_node_505281.lineno.value, ast_node_505281.col_offset.value), "SyntaxError:ObjectType");
		}
		
		F.line = 628;
		add_op_500488(c_505280, new_jump_instr_498837(84, loop_block_505282.next, ast_node_505281.lineno.value));
	framePtr = F.prev;

	
}

function compile_505236(c_505238, ast_node_505239) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 614;
		add_op_500505(c_505238, 7, ast_node_505239.lineno.value);
	framePtr = F.prev;

	
}

function compile_505601(c_505603, ast_node_505604) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 638;
		var ending_505605 = new_basic_block_499238(0);
		F.line = 639;
		var num_values_505613 = (ast_node_505604.values != null ? ast_node_505604.values.length : 0);
		F.line = 640;
		var op_505614 = 0;
		if (isObj(ast_node_505604.op.m_type, NTI181128)) {
		F.line = 642;
		op_505614 = 82;
		}
		else {
		if (isObj(ast_node_505604.op.m_type, NTI181159)) {
		F.line = 644;
		op_505614 = 83;
		}
		else {
			F.line = 2895;
			var e_505644 = null;
			F.line = 2896;
			e_505644 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 28;
			e_505644.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_505644.parent = null;
			F.line = 646;
			raiseException(e_505644, "InternalError");
		}
		}
		if (!((1 < num_values_505613))) {
		F.line = 647;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(647, 10) `1 < numValues` "));
		}
		
		L1: do {
			F.line = 648;
			var i_506011 = 0;
			F.line = 3617;
			var i_506017 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_506017 < num_values_505613)) break L3;
						F.line = 3619;
						i_506011 = i_506017;
						F.line = 649;
						compile_502538(c_505603, ast_node_505604.values[chckIndx(i_506011, 0, ast_node_505604.values.length+0-1)-0]);
						if (!((i_506011 == subInt(num_values_505613, 1)))) {
						F.line = 651;
						add_op_500488(c_505603, new_jump_instr_498837(op_505614, ending_505605, last_line_no_500269(c_505603)));
						}
						
						F.line = 3620;
						i_506017 = addInt(i_506017, 1);
					}
			} while(false);
		} while(false);
		F.line = 652;
		add_block_500614(c_505603, ending_505605);
	framePtr = F.prev;

	
}

function compile_505534(c_505536, ast_node_505537) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 632;
		var loop_block_505538 = null;
		L1: do {
			F.line = 617;
			var basic_block_505560 = null;
			F.line = 3909;
			var colontmp__505582 = null;
			F.line = 617;
			colontmp__505582 = reversed_505288(tcu_499986(c_505536).blocks);
			F.line = 3911;
			var i_505585 = 0;
			F.line = 3912;
			var l_505587 = (colontmp__505582 != null ? colontmp__505582.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_505585 < l_505587)) break L3;
						F.line = 3914;
						basic_block_505560 = colontmp__505582[chckIndx(i_505585, 0, colontmp__505582.length+0-1)-0];
						if ((ConstSet27[basic_block_505560.tp] != undefined)) {
						F.line = 619;
						loop_block_505538 = basic_block_505560;
						F.line = 620;
						break L1;
						}
						
						F.line = 3915;
						i_505585 = addInt(i_505585, 1);
						if (!(((colontmp__505582 != null ? colontmp__505582.length : 0) == l_505587))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((loop_block_505538 === null)) {
		F.line = 622;
		raiseException(new_syntax_error_156098(makeNimstrLit("\'break\' outside loop"), [], ast_node_505537.lineno.value, ast_node_505537.col_offset.value), "SyntaxError:ObjectType");
		}
		
		F.line = 634;
		add_op_500488(c_505536, new_jump_instr_498837(84, loop_block_505538, ast_node_505537.lineno.value));
	framePtr = F.prev;

	
}

function compile_506050(c_506052, ast_node_506053) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 664;
		compile_502538(c_506052, ast_node_506053.operand);
		F.line = 665;
		var op_code_506054 = to_op_code_502358(ast_node_506053.op);
		F.line = 666;
		add_op_500488(c_506052, new_instr_498133(op_code_506054, ast_node_506053.lineno.value));
	framePtr = F.prev;

	
}

function compile_506032(c_506034, ast_node_506035) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 656;
		compile_502538(c_506034, ast_node_506035.left);
		F.line = 657;
		compile_502538(c_506034, ast_node_506035.right);
		F.line = 658;
		var op_code_506036 = to_op_code_502087(ast_node_506035.op);
		F.line = 659;
		add_op_500488(c_506034, new_instr_498133(op_code_506036, ast_node_506035.lineno.value));
	framePtr = F.prev;

	
}

function compile_504038(c_504040, ast_node_504041) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 504;
		var has_or_else_504051 = (0 < (ast_node_504041.orelse != null ? ast_node_504041.orelse.length : 0));
		F.line = 505;
		var next_504052 = null;
		F.line = 505;
		var ending_504053 = null;
		F.line = 506;
		ending_504053 = new_basic_block_499238(0);
		if (has_or_else_504051) {
		F.line = 508;
		next_504052 = new_basic_block_499238(0);
		}
		else {
			F.line = 510;
			next_504052 = ending_504053;
		}
		
		F.line = 512;
		compile_502538(c_504040, ast_node_504041.test);
		F.line = 513;
		add_op_500488(c_504040, new_jump_instr_498837(85, next_504052, ast_node_504041.lineno.value));
		L1: do {
			F.line = 401;
			var ast_node_504066 = null;
			F.line = 3909;
			var colontmp__504081 = null;
			F.line = 514;
			colontmp__504081 = ast_node_504041.body;
			F.line = 3911;
			var i_504084 = 0;
			F.line = 3912;
			var l_504086 = (colontmp__504081 != null ? colontmp__504081.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_504084 < l_504086)) break L3;
						F.line = 3914;
						ast_node_504066 = colontmp__504081[chckIndx(i_504084, 0, colontmp__504081.length+0-1)-0];
						F.line = 402;
						compile_502538(c_504040, ast_node_504066);
						F.line = 3915;
						i_504084 = addInt(i_504084, 1);
						if (!(((colontmp__504081 != null ? colontmp__504081.length : 0) == l_504086))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (has_or_else_504051) {
		F.line = 521;
		add_op_500488(c_504040, new_jump_instr_498837(81, ending_504053, last_line_no_500269(c_504040)));
		F.line = 522;
		add_block_500614(c_504040, next_504052);
		L4: do {
			F.line = 401;
			var ast_node_504079 = null;
			F.line = 3909;
			var colontmp__504088 = null;
			F.line = 523;
			colontmp__504088 = ast_node_504041.orelse;
			F.line = 3911;
			var i_504091 = 0;
			F.line = 3912;
			var l_504093 = (colontmp__504088 != null ? colontmp__504088.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_504091 < l_504093)) break L6;
						F.line = 3914;
						ast_node_504079 = colontmp__504088[chckIndx(i_504091, 0, colontmp__504088.length+0-1)-0];
						F.line = 402;
						compile_502538(c_504040, ast_node_504079);
						F.line = 3915;
						i_504091 = addInt(i_504091, 1);
						if (!(((colontmp__504088 != null ? colontmp__504088.length : 0) == l_504093))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 524;
		add_block_500614(c_504040, ending_504053);
	framePtr = F.prev;

	
}

function compile_503839(c_503841, ast_node_503842) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_503842.orelse != null ? ast_node_503842.orelse.length : 0) == 0))) {
		F.line = 490;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(490, 10) `len(astNode.orelse) == 0` "));
		}
		
		F.line = 491;
		var loop_504002 = new_basic_block_499238(1);
		F.line = 492;
		var ending_504003 = new_basic_block_499238(0);
		F.line = 494;
		loop_504002.next = ending_504003;
		F.line = 495;
		add_block_500614(c_503841, loop_504002);
		F.line = 496;
		compile_502538(c_503841, ast_node_503842.test);
		F.line = 497;
		add_op_500488(c_503841, new_jump_instr_498837(85, ending_504003, ast_node_503842.lineno.value));
		L1: do {
			F.line = 401;
			var ast_node_504016 = null;
			F.line = 3909;
			var colontmp__504019 = null;
			F.line = 498;
			colontmp__504019 = ast_node_503842.body;
			F.line = 3911;
			var i_504022 = 0;
			F.line = 3912;
			var l_504024 = (colontmp__504019 != null ? colontmp__504019.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_504022 < l_504024)) break L3;
						F.line = 3914;
						ast_node_504016 = colontmp__504019[chckIndx(i_504022, 0, colontmp__504019.length+0-1)-0];
						F.line = 402;
						compile_502538(c_503841, ast_node_504016);
						F.line = 3915;
						i_504022 = addInt(i_504022, 1);
						if (!(((colontmp__504019 != null ? colontmp__504019.length : 0) == l_504024))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 499;
		add_op_500488(c_503841, new_jump_instr_498837(84, loop_504002, last_line_no_500269(c_503841)));
		F.line = 500;
		add_block_500614(c_503841, ending_504003);
	framePtr = F.prev;

	
}

function compile_504223(c_504225, ast_node_504226) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_504226.orelse != null ? ast_node_504226.orelse.length : 0) == 0))) {
		F.line = 536;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(536, 10) `len(astNode.orelse) == 0` "));
		}
		
		if (!(((ast_node_504226.finalbody != null ? ast_node_504226.finalbody.length : 0) == 0))) {
		F.line = 537;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(537, 10) `len(astNode.finalbody) == 0` "));
		}
		
		if (!((0 < (ast_node_504226.handlers != null ? ast_node_504226.handlers.length : 0)))) {
		F.line = 538;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(538, 10) `0 < len(astNode.handlers)` "));
		}
		
		F.line = 540;
		var body_504801 = new_basic_block_499238(0);
		F.line = 541;
		var excp_blocks_504803 = null;
		L1: do {
			F.line = 542;
			var i_504821 = 0;
			F.line = 3616;
			var colontmp__505029 = 0;
			F.line = 542;
			colontmp__505029 = (ast_node_504226.handlers != null ? ast_node_504226.handlers.length : 0);
			F.line = 3617;
			var i_505032 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_505032 < colontmp__505029)) break L3;
						F.line = 3619;
						i_504821 = i_505032;
						F.line = 543;
						if (excp_blocks_504803 != null) { excp_blocks_504803.push(new_basic_block_499238(0)); } else { excp_blocks_504803 = [new_basic_block_499238(0)]; };
						F.line = 3620;
						i_505032 = addInt(i_505032, 1);
					}
			} while(false);
		} while(false);
		F.line = 544;
		var ending_504832 = new_basic_block_499238(0);
		F.line = 546;
		add_block_500614(c_504225, body_504801);
		F.line = 548;
		add_op_500488(c_504225, new_jump_instr_498837(88, excp_blocks_504803[chckIndx(0, 0, excp_blocks_504803.length+0-1)-0], ast_node_504226.lineno.value));
		L4: do {
			F.line = 401;
			var ast_node_504845 = null;
			F.line = 3909;
			var colontmp__505035 = null;
			F.line = 549;
			colontmp__505035 = ast_node_504226.body;
			F.line = 3911;
			var i_505038 = 0;
			F.line = 3912;
			var l_505040 = (colontmp__505035 != null ? colontmp__505035.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_505038 < l_505040)) break L6;
						F.line = 3914;
						ast_node_504845 = colontmp__505035[chckIndx(i_505038, 0, colontmp__505035.length+0-1)-0];
						F.line = 402;
						compile_502538(c_504225, ast_node_504845);
						F.line = 3915;
						i_505038 = addInt(i_505038, 1);
						if (!(((colontmp__505035 != null ? colontmp__505035.length : 0) == l_505040))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 551;
		add_op_500488(c_504225, new_jump_instr_498837(84, ending_504832, last_line_no_500269(c_504225)));
		L7: do {
			F.line = 553;
			var idx_504893 = 0;
			F.line = 553;
			var handler_obj_504894 = null;
			F.line = 2352;
			var colontmp__505050 = null;
			F.line = 553;
			colontmp__505050 = ast_node_504226.handlers;
			F.line = 2354;
			var i_505053 = 0;
			L8: do {
				F.line = 2355;
					L9: while (true) {
					if (!(i_505053 < (colontmp__505050 != null ? colontmp__505050.length : 0))) break L9;
						F.line = 2356;
						idx_504893 = i_505053;
						F.line = 2356;
						handler_obj_504894 = colontmp__505050[chckIndx(i_505053, 0, colontmp__505050.length+0-1)-0];
						F.line = 554;
						var is_last_504902 = (idx_504893 == subInt((ast_node_504226.handlers != null ? ast_node_504226.handlers.length : 0), 1));
						F.line = 556;
						var handler_504903 = handler_obj_504894;
						if (!((handler_504903.name === null))) {
						F.line = 557;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(557, 12) `isNil(handler.name)` "));
						}
						
						F.line = 558;
						add_block_500614(c_504225, excp_blocks_504803[chckIndx(idx_504893, 0, excp_blocks_504803.length+0-1)-0]);
						if (!((handler_504903.type === null))) {
						F.line = 564;
						compile_502538(c_504225, handler_504903.type);
						F.line = 565;
						add_op_500488(c_504225, new_arg_instr_498437(78, 10, handler_504903.lineno.value));
						if (is_last_504902) {
						F.line = 567;
						add_op_500488(c_504225, new_jump_instr_498837(85, ending_504832, last_line_no_500269(c_504225)));
						}
						else {
							F.line = 569;
						add_op_500488(c_504225, new_jump_instr_498837(85, excp_blocks_504803[chckIndx(addInt(idx_504893, 1), 0, excp_blocks_504803.length+0-1)-0], last_line_no_500269(c_504225)));
						}
						
						}
						
						F.line = 571;
						add_op_500505(c_504225, 1, handler_504903.lineno.value);
						L10: do {
							F.line = 401;
							var ast_node_505024 = null;
							F.line = 3909;
							var colontmp__505044 = null;
							F.line = 572;
							colontmp__505044 = handler_504903.body;
							F.line = 3911;
							var i_505047 = 0;
							F.line = 3912;
							var l_505049 = (colontmp__505044 != null ? colontmp__505044.length : 0);
							L11: do {
								F.line = 3913;
									L12: while (true) {
									if (!(i_505047 < l_505049)) break L12;
										F.line = 3914;
										ast_node_505024 = colontmp__505044[chckIndx(i_505047, 0, colontmp__505044.length+0-1)-0];
										F.line = 402;
										compile_502538(c_504225, ast_node_505024);
										F.line = 3915;
										i_505047 = addInt(i_505047, 1);
										if (!(((colontmp__505044 != null ? colontmp__505044.length : 0) == l_505049))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						if (!(is_last_504902)) {
						F.line = 575;
						add_op_500488(c_504225, new_jump_instr_498837(84, ending_504832, last_line_no_500269(c_504225)));
						}
						
						F.line = 2357;
						i_505053 = addInt(i_505053, 1);
					}
			} while(false);
		} while(false);
		F.line = 577;
		var last_line_no_505026 = last_line_no_500269(c_504225);
		F.line = 578;
		add_block_500614(c_504225, ending_504832);
		F.line = 579;
		add_op_500505(c_504225, 58, last_line_no_505026);
	framePtr = F.prev;

	
}

function compile_504107(c_504109, ast_node_504110) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!((ast_node_504110.cause === null))) {
		F.line = 528;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(528, 10) `isNil(astNode.cause)` "));
		}
		
		if ((ast_node_504110.exc === null)) {
		F.line = 530;
		add_op_500488(c_504109, new_arg_instr_498437(92, 0, ast_node_504110.lineno.value));
		}
		else {
			F.line = 532;
			compile_502538(c_504109, ast_node_504110.exc);
			F.line = 533;
			add_op_500488(c_504109, new_arg_instr_498437(92, 1, ast_node_504110.lineno.value));
		}
		
	framePtr = F.prev;

	
}

function compile_502561(c_502563, ast_node_502564) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 401;
			var ast_node_502576 = null;
			F.line = 3909;
			var colontmp__502578 = null;
			F.line = 413;
			colontmp__502578 = ast_node_502564.body;
			F.line = 3911;
			var i_502581 = 0;
			F.line = 3912;
			var l_502583 = (colontmp__502578 != null ? colontmp__502578.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_502581 < l_502583)) break L3;
						F.line = 3914;
						ast_node_502576 = colontmp__502578[chckIndx(i_502581, 0, colontmp__502578.length+0-1)-0];
						F.line = 402;
						compile_502538(c_502563, ast_node_502576);
						F.line = 3915;
						i_502581 = addInt(i_502581, 1);
						if (!(((colontmp__502578 != null ? colontmp__502578.length : 0) == l_502583))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function compile_503098(c_503100, ast_node_503101) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 436;
			var deco_503110 = null;
			F.line = 3909;
			var colontmp__503156 = null;
			F.line = 436;
			colontmp__503156 = ast_node_503101.decorator_list;
			F.line = 3911;
			var i_503159 = 0;
			F.line = 3912;
			var l_503161 = (colontmp__503156 != null ? colontmp__503156.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_503159 < l_503161)) break L3;
						F.line = 3914;
						deco_503110 = colontmp__503156[chckIndx(i_503159, 0, colontmp__503156.length+0-1)-0];
						F.line = 437;
						compile_502538(c_503100, deco_503110);
						F.line = 3915;
						i_503159 = addInt(i_503159, 1);
						if (!(((colontmp__503156 != null ? colontmp__503156.length : 0) == l_503161))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 438;
		var line_no_503111 = ast_node_503101.lineno.value;
		F.line = 439;
		add_op_500505(c_503100, 44, line_no_503111);
		F.line = 442;
		if (c_503100.units != null) { c_503100.units.push(new_compiler_unit_499437(c_503100.st, ast_node_503101, ast_node_503101.name.value)); } else { c_503100.units = [new_compiler_unit_499437(c_503100.st, ast_node_503101, ast_node_503101.name.value)]; };
		L4: do {
			F.line = 401;
			var ast_node_503134 = null;
			F.line = 3909;
			var colontmp__503163 = null;
			F.line = 443;
			colontmp__503163 = ast_node_503101.body;
			F.line = 3911;
			var i_503166 = 0;
			F.line = 3912;
			var l_503168 = (colontmp__503163 != null ? colontmp__503163.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_503166 < l_503168)) break L6;
						F.line = 3914;
						ast_node_503134 = colontmp__503163[chckIndx(i_503166, 0, colontmp__503163.length+0-1)-0];
						F.line = 402;
						compile_502538(c_503100, ast_node_503134);
						F.line = 3915;
						i_503166 = addInt(i_503166, 1);
						if (!(((colontmp__503163 != null ? colontmp__503163.length : 0) == l_503168))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 444;
		make_function_501662(c_503100, pop_503014(c_503100, "units"), ast_node_503101.name.value, line_no_503111);
		F.line = 446;
		add_load_const_500662(c_503100, ast_node_503101.name.value, ast_node_503101.lineno.value);
		F.line = 448;
		add_op_500488(c_503100, new_arg_instr_498437(93, 2, line_no_503111));
		L7: do {
			F.line = 449;
			var deco_503153 = null;
			F.line = 3909;
			var colontmp__503170 = null;
			F.line = 449;
			colontmp__503170 = ast_node_503101.decorator_list;
			F.line = 3911;
			var i_503173 = 0;
			F.line = 3912;
			var l_503175 = (colontmp__503170 != null ? colontmp__503170.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_503173 < l_503175)) break L9;
						F.line = 3914;
						deco_503153 = colontmp__503170[chckIndx(i_503173, 0, colontmp__503170.length+0-1)-0];
						F.line = 450;
						add_op_500488(c_503100, new_arg_instr_498437(93, 1, deco_503153.lineno.value));
						F.line = 3915;
						i_503173 = addInt(i_503173, 1);
						if (!(((colontmp__503170 != null ? colontmp__503170.length : 0) == l_503175))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 451;
		add_store_op_500729(c_503100, ast_node_503101.name.value, line_no_503111);
	framePtr = F.prev;

	
}

function compile_502633(c_502635, ast_node_502636) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 422;
			var deco_502645 = null;
			F.line = 3909;
			var colontmp__503065 = null;
			F.line = 422;
			colontmp__503065 = ast_node_502636.decorator_list;
			F.line = 3911;
			var i_503068 = 0;
			F.line = 3912;
			var l_503070 = (colontmp__503065 != null ? colontmp__503065.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_503068 < l_503070)) break L3;
						F.line = 3914;
						deco_502645 = colontmp__503065[chckIndx(i_503068, 0, colontmp__503065.length+0-1)-0];
						F.line = 423;
						compile_502538(c_502635, deco_502645);
						F.line = 3915;
						i_503068 = addInt(i_503068, 1);
						if (!(((colontmp__503065 != null ? colontmp__503065.length : 0) == l_503070))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ast_node_502636.returns == null))) {
		F.line = 424;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(424, 10) `astNode.returns == nil` "));
		}
		
		F.line = 425;
		if (c_502635.units != null) { c_502635.units.push(new_compiler_unit_499437(c_502635.st, ast_node_502636, ast_node_502636.name.value)); } else { c_502635.units = [new_compiler_unit_499437(c_502635.st, ast_node_502636, ast_node_502636.name.value)]; };
		if (!(!((tcu_499986(c_502635).codeName === null)))) {
		F.line = 426;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(426, 3) `not isNil(tcu(c).codeName)` "));
		}
		
		L4: do {
			F.line = 401;
			var ast_node_503012 = null;
			F.line = 3909;
			var colontmp__503072 = null;
			F.line = 428;
			colontmp__503072 = ast_node_502636.body;
			F.line = 3911;
			var i_503075 = 0;
			F.line = 3912;
			var l_503077 = (colontmp__503072 != null ? colontmp__503072.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_503075 < l_503077)) break L6;
						F.line = 3914;
						ast_node_503012 = colontmp__503072[chckIndx(i_503075, 0, colontmp__503072.length+0-1)-0];
						F.line = 402;
						compile_502538(c_502635, ast_node_503012);
						F.line = 3915;
						i_503075 = addInt(i_503075, 1);
						if (!(((colontmp__503072 != null ? colontmp__503072.length : 0) == l_503077))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 429;
		make_function_501662(c_502635, pop_503014(c_502635, "units"), ast_node_502636.name.value, ast_node_502636.lineno.value);
		L7: do {
			F.line = 430;
			var deco_503062 = null;
			F.line = 3909;
			var colontmp__503079 = null;
			F.line = 430;
			colontmp__503079 = ast_node_502636.decorator_list;
			F.line = 3911;
			var i_503082 = 0;
			F.line = 3912;
			var l_503084 = (colontmp__503079 != null ? colontmp__503079.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_503082 < l_503084)) break L9;
						F.line = 3914;
						deco_503062 = colontmp__503079[chckIndx(i_503082, 0, colontmp__503079.length+0-1)-0];
						F.line = 431;
						add_op_500488(c_502635, new_arg_instr_498437(93, 1, deco_503062.lineno.value));
						F.line = 3915;
						i_503082 = addInt(i_503082, 1);
						if (!(((colontmp__503079 != null ? colontmp__503079.length : 0) == l_503084))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 432;
		add_store_op_500729(c_502635, ast_node_502636.name.value, ast_node_502636.lineno.value);
	framePtr = F.prev;

	
}

function compile_502597(c_502599, ast_node_502600) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 417;
		c_502599.interactive = true;
		L1: do {
			F.line = 401;
			var ast_node_502612 = null;
			F.line = 3909;
			var colontmp__502614 = null;
			F.line = 418;
			colontmp__502614 = ast_node_502600.body;
			F.line = 3911;
			var i_502617 = 0;
			F.line = 3912;
			var l_502619 = (colontmp__502614 != null ? colontmp__502614.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_502617 < l_502619)) break L3;
						F.line = 3914;
						ast_node_502612 = colontmp__502614[chckIndx(i_502617, 0, colontmp__502614.length+0-1)-0];
						F.line = 402;
						compile_502538(c_502599, ast_node_502612);
						F.line = 3915;
						i_502617 = addInt(i_502617, 1);
						if (!(((colontmp__502614 != null ? colontmp__502614.length : 0) == l_502619))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function tcb_500113(c_500115) {
	var result_500116 = null;

	var F={procname:"compile.tcb",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 134;
		result_500116 = tcb_500058(tcu_499986(c_500115));
	framePtr = F.prev;

	return result_500116;

}

function compile_503189(c_503191, ast_node_503192) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if ((ast_node_503192.value === null)) {
		F.line = 456;
		add_load_const_500662(c_503191, py_none_356044, ast_node_503192.lineno.value);
		}
		else {
			F.line = 458;
		compile_502538(c_503191, ast_node_503192.value);
		}
		
		F.line = 459;
		add_op_500488(c_503191, new_instr_498133(54, ast_node_503192.lineno.value));
		F.line = 460;
		tcb_500113(c_503191).seenReturn = true;
	framePtr = F.prev;

	
}

function compile_503614(c_503616, ast_node_503617) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_503617.orelse != null ? ast_node_503617.orelse.length : 0) == 0))) {
		F.line = 475;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(475, 10) `len(astNode.orelse) == 0` "));
		}
		
		F.line = 476;
		var start_503802 = new_basic_block_499238(2);
		F.line = 477;
		var ending_503803 = new_basic_block_499238(0);
		F.line = 479;
		start_503802.next = ending_503803;
		F.line = 480;
		compile_502538(c_503616, ast_node_503617.iter);
		F.line = 481;
		add_op_500505(c_503616, 41, ast_node_503617.iter.lineno.value);
		F.line = 482;
		add_block_500614(c_503616, start_503802);
		F.line = 483;
		add_op_500488(c_503616, new_jump_instr_498837(65, ending_503803, ast_node_503617.lineno.value));
		F.line = 484;
		compile_502538(c_503616, ast_node_503617.target);
		L1: do {
			F.line = 401;
			var ast_node_503817 = null;
			F.line = 3909;
			var colontmp__503820 = null;
			F.line = 485;
			colontmp__503820 = ast_node_503617.body;
			F.line = 3911;
			var i_503823 = 0;
			F.line = 3912;
			var l_503825 = (colontmp__503820 != null ? colontmp__503820.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_503823 < l_503825)) break L3;
						F.line = 3914;
						ast_node_503817 = colontmp__503820[chckIndx(i_503823, 0, colontmp__503820.length+0-1)-0];
						F.line = 402;
						compile_502538(c_503616, ast_node_503817);
						F.line = 3915;
						i_503823 = addInt(i_503823, 1);
						if (!(((colontmp__503820 != null ? colontmp__503820.length : 0) == l_503825))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 486;
		add_op_500488(c_503616, new_jump_instr_498837(84, start_503802, last_line_no_500269(c_503616)));
		F.line = 487;
		add_block_500614(c_503616, ending_503803);
	framePtr = F.prev;

	
}

function compile_503414(c_503416, ast_node_503417) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_503423 = null;
		F.line = 2896;
		e_503423 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 28;
		e_503423.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_503423.parent = null;
		F.line = 471;
		raiseException(e_503423, "InternalError");
	framePtr = F.prev;

	
}

function compile_503214(c_503216, ast_node_503217) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_503217.targets != null ? ast_node_503217.targets.length : 0) == 1))) {
		F.line = 464;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(464, 10) `len(astNode.targets) == 1` "));
		}
		
		F.line = 465;
		compile_502538(c_503216, ast_node_503217.value);
		F.line = 466;
		compile_502538(c_503216, ast_node_503217.targets[chckIndx(0, 0, ast_node_503217.targets.length+0-1)-0]);
	framePtr = F.prev;

	
}

function compile_502533(c_502535, ast_node_502536) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 406;
		rawEcho(makeNimstrLit("!!!WARNING, ast node compile method not implemented"));
		F.line = 407;
		rawEcho(HEX24_177554(ast_node_502536));
		F.line = 408;
		rawEcho(makeNimstrLit("###WARNING, ast node compile method not implemented"));
	framePtr = F.prev;

	
}

function compile_502538(c_502535, ast_node_502536) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(ast_node_502536);
		if (isObj(ast_node_502536.m_type, NTI180656)) {
		F.line = 405;
		compile_507216(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180619)) {
		F.line = 405;
		compile_507029(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180728)) {
		F.line = 405;
		compile_507433(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180586)) {
		F.line = 405;
		compile_507416(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180800)) {
		F.line = 405;
		compile_507665(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180763)) {
		F.line = 405;
		compile_507616(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI181095)) {
		F.line = 405;
		compile_507879(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI181023)) {
		F.line = 405;
		compile_507828(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180109)) {
		F.line = 405;
		compile_506068(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI182107)) {
		F.line = 405;
		compile_507919(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180432)) {
		F.line = 405;
		compile_506243(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180183)) {
		F.line = 405;
		compile_506126(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179623)) {
		F.line = 405;
		compile_505067(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180473)) {
		F.line = 405;
		compile_506822(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179802)) {
		F.line = 405;
		compile_505216(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179658)) {
		F.line = 405;
		compile_505096(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179866)) {
		F.line = 405;
		compile_505278(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179835)) {
		F.line = 405;
		compile_505236(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179928)) {
		F.line = 405;
		compile_505601(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179897)) {
		F.line = 405;
		compile_505534(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI180002)) {
		F.line = 405;
		compile_506050(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179965)) {
		F.line = 405;
		compile_506032(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179422)) {
		F.line = 405;
		compile_504038(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179381)) {
		F.line = 405;
		compile_503839(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179576)) {
		F.line = 405;
		compile_504223(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179541)) {
		F.line = 405;
		compile_504107(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI178837)) {
		F.line = 405;
		compile_502561(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179065)) {
		F.line = 405;
		compile_503098(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI178975)) {
		F.line = 405;
		compile_502633(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI178872)) {
		F.line = 405;
		compile_502597(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179114)) {
		F.line = 405;
		compile_503189(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179295)) {
		F.line = 405;
		compile_503614(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179219)) {
		F.line = 405;
		compile_503414(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI179182)) {
		F.line = 405;
		compile_503214(c_502535, ast_node_502536);
		}
		else {
		if (isObj(ast_node_502536.m_type, NTI177022)) {
		F.line = 405;
		compile_502533(c_502535, ast_node_502536);
		}
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	framePtr = F.prev;

	
}
