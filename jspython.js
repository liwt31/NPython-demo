/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI500314 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI500410 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI494850 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI494876 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI181531 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181903 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181500 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180333 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182263 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182193 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181593 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181934 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180514 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180552 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180551 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180298 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180296 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180149 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180148 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180961 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181469 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180899 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178907 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180992 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180399 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181407 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180930 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180072 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180366 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180693 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178941 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178940 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179025 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179023 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179020 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180222 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180220 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180868 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181061 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI181060 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180260 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180257 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179505 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179503 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179502 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179148 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179147 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179343 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179341 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179338 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179256 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180037 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179768 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179767 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179466 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178689 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178776 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178722 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179464 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179463 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179695 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179693 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179733 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179732 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182673 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3886 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI496254 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI496262 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI443381 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI443363 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI443345 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI443327 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI442272 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI442283 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI493066 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI493045 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI493034 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI493041 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI493028 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI493055 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI493054 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI493036 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI493048 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI443401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI427248 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI427245 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI427242 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI427217 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI427214 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI427211 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI427192 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI427189 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI427186 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI427175 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI427173 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI427141 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI177015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI427158 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI427155 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI427152 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI178873 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178872 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI403617 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179073 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179067 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179065 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182158 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182116 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182113 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182111 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178680 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178765 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178716 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI182108 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182107 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178980 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178978 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178677 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178762 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178975 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182068 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179583 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179581 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178674 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178757 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178712 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179579 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179577 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179576 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179300 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179298 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179295 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179385 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179383 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179381 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI401647 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179426 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179424 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179422 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI401561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179623 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182228 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178686 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178773 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178720 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179659 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179541 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179897 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179866 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179835 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179183 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179182 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI179802 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI401440 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI179930 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178702 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179928 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181159 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178634 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178742 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180436 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180434 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180432 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181996 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181965 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181748 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181810 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181872 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181717 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181841 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178659 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181779 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181562 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181345 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181314 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181252 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181190 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181686 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181655 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181376 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178638 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178704 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI179965 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181023 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181095 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178629 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178739 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178700 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178683 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178770 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178718 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180477 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180475 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180473 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177030 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177021 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180586 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177027 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177019 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180728 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI348047 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI348043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI348049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180112 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180110 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180109 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI401495 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180764 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180763 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI401736 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI401732 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182027 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178671 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178754 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178710 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180185 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI180837 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI401513 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178621 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178736 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178698 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180801 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI180800 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181624 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178594 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178731 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178696 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178653 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178748 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI180002 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178561 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178723 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178567 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI177022 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177024 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI177017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178726 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI178694 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178838 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178837 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI596676 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI596270 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI596410 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI350389 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI348051 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI208887 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI208886 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI337147 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI326025 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI25907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI275250 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI275249 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI268071 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI260204 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI50534 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI49853 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI49850 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI49744 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI51316 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI50649 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI50646 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI50537 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI279086 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI277238 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI106 = {size: 0,kind: 32,base: null,node: null,finalizer: null};
var NTI277235 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI116 = {size: 0,kind: 41,base: null,node: null,finalizer: null};
var NTI277054 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI320464 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI320466 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI325988 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI325984 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI329872 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI324639 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI320468 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI324650 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI324646 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI324446 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI324445 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI156086 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI626109 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157559 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI607110 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI604304 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI602891 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI600083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI506275 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI551208 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI586657 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI563059 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI590712 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI374108 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI588190 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI547081 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI547143 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI545084 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI542672 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI540122 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI541100 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI464069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI540123 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI535149 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI537089 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI537087 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI521177 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI487124 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI537082 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI537083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI535150 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI156085 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI521194 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI521191 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI521188 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI521178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI505256 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI505255 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI427133 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI487148 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI487147 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI487145 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI487143 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI487141 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI487139 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI175083 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI487137 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI487135 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI487133 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI487131 = {size: 0,kind: 21,base: null,node: null,finalizer: null};
var NTI487129 = {size: 0,kind: 21,base: null,node: null,finalizer: null};
var NTI487068 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI459016 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI487127 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI487126 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI487125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI465059 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI461650 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI464071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI464070 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI462097 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI460191 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI460190 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3866 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134017 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI156081 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI375100 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI374109 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI372501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI371501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI370501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI369501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI368501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI367501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI366501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI365501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI364501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI363501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI362501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI361501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI360501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI359501 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI358415 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI357165 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI357236 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI357230 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI357147 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI357231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI355070 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI353098 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI301986 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI320460 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI301992 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI301989 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI320469 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI110 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI281307 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI108 = {size: 0,kind: 33,base: null,node: null,finalizer: null};
var NTI281228 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI281230 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI281339 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI281333 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI281324 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI41402 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI281313 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI281310 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI281226 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI281297 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI257479 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI249258 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI195498 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI195495 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI195492 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI241189 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178028 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI220231 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI220227 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI250866 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI212058 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI136 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI212015 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI212024 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI212017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI212040 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI212037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI212034 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3854 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI133824 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI202995 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI203987 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI203984 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI203981 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3844 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI175084 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157273 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157214 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI157277 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157318 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157332 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157329 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI157326 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI143056 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI157300 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157297 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI157294 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157353 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157362 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157358 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157346 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157349 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157212 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI157081 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI157218 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI157280 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
NTI157218.base = NTI157280;
var NNI157081 = {kind: 2, offset: 0, typ: null, name: null, len: 17, sons: {"0": {kind: 1, offset: 0, typ: NTI157081, name: "NULL", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI157081, name: "Object", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI157081, name: "None", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI157081, name: "BaseError", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI157081, name: "Int", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI157081, name: "Float", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI157081, name: "Bool", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI157081, name: "Type", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI157081, name: "Tuple", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI157081, name: "List", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI157081, name: "Str", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI157081, name: "Code", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI157081, name: "NimFunc", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI157081, name: "Function", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI157081, name: "BoundMethod", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI157081, name: "Slice", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI157081, name: "Cell", len: 0, sons: null}}};
NTI157081.node = NNI157081;
var NNI157212 = {kind: 2, len: 38, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157349, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157349, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157349, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI157349, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI157349, name: "Field4", sons: null}, 
{kind: 1, offset: "Field5", len: 0, typ: NTI157349, name: "Field5", sons: null}, 
{kind: 1, offset: "Field6", len: 0, typ: NTI157349, name: "Field6", sons: null}, 
{kind: 1, offset: "Field7", len: 0, typ: NTI157346, name: "Field7", sons: null}, 
{kind: 1, offset: "Field8", len: 0, typ: NTI157346, name: "Field8", sons: null}, 
{kind: 1, offset: "Field9", len: 0, typ: NTI157346, name: "Field9", sons: null}, 
{kind: 1, offset: "Field10", len: 0, typ: NTI157346, name: "Field10", sons: null}, 
{kind: 1, offset: "Field11", len: 0, typ: NTI157346, name: "Field11", sons: null}, 
{kind: 1, offset: "Field12", len: 0, typ: NTI157346, name: "Field12", sons: null}, 
{kind: 1, offset: "Field13", len: 0, typ: NTI157349, name: "Field13", sons: null}, 
{kind: 1, offset: "Field14", len: 0, typ: NTI157349, name: "Field14", sons: null}, 
{kind: 1, offset: "Field15", len: 0, typ: NTI157349, name: "Field15", sons: null}, 
{kind: 1, offset: "Field16", len: 0, typ: NTI157349, name: "Field16", sons: null}, 
{kind: 1, offset: "Field17", len: 0, typ: NTI157349, name: "Field17", sons: null}, 
{kind: 1, offset: "Field18", len: 0, typ: NTI157349, name: "Field18", sons: null}, 
{kind: 1, offset: "Field19", len: 0, typ: NTI157349, name: "Field19", sons: null}, 
{kind: 1, offset: "Field20", len: 0, typ: NTI157349, name: "Field20", sons: null}, 
{kind: 1, offset: "Field21", len: 0, typ: NTI157349, name: "Field21", sons: null}, 
{kind: 1, offset: "Field22", len: 0, typ: NTI157349, name: "Field22", sons: null}, 
{kind: 1, offset: "Field23", len: 0, typ: NTI157346, name: "Field23", sons: null}, 
{kind: 1, offset: "Field24", len: 0, typ: NTI157346, name: "Field24", sons: null}, 
{kind: 1, offset: "Field25", len: 0, typ: NTI157346, name: "Field25", sons: null}, 
{kind: 1, offset: "Field26", len: 0, typ: NTI157358, name: "Field26", sons: null}, 
{kind: 1, offset: "Field27", len: 0, typ: NTI157362, name: "Field27", sons: null}, 
{kind: 1, offset: "Field28", len: 0, typ: NTI157349, name: "Field28", sons: null}, 
{kind: 1, offset: "Field29", len: 0, typ: NTI157353, name: "Field29", sons: null}, 
{kind: 1, offset: "Field30", len: 0, typ: NTI157346, name: "Field30", sons: null}, 
{kind: 1, offset: "Field31", len: 0, typ: NTI157362, name: "Field31", sons: null}, 
{kind: 1, offset: "Field32", len: 0, typ: NTI157349, name: "Field32", sons: null}, 
{kind: 1, offset: "Field33", len: 0, typ: NTI157353, name: "Field33", sons: null}, 
{kind: 1, offset: "Field34", len: 0, typ: NTI157349, name: "Field34", sons: null}, 
{kind: 1, offset: "Field35", len: 0, typ: NTI157353, name: "Field35", sons: null}, 
{kind: 1, offset: "Field36", len: 0, typ: NTI157346, name: "Field36", sons: null}, 
{kind: 1, offset: "Field37", len: 0, typ: NTI157346, name: "Field37", sons: null}]};
NTI157212.node = NNI157212;
var NNI157300 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157362, name: "Field2", sons: null}]};
NTI157300.node = NNI157300;
NTI157297.base = NTI157300;
var NNI157294 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI157297, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI157294.node = NNI157294;
var NNI157318 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157346, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157349, name: "Field1", sons: null}]};
NTI157318.node = NNI157318;
var NNI157332 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157318, name: "Field2", sons: null}]};
NTI157332.node = NNI157332;
NTI157329.base = NTI157332;
var NNI157326 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI157329, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI157326.node = NNI157326;
var NNI157280 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "base", len: 0, typ: NTI157218, name: "base", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI157081, name: "kind", sons: null}, 
{kind: 1, offset: "magicMethods", len: 0, typ: NTI157212, name: "magicMethods", sons: null}, 
{kind: 1, offset: "bltinMethods", len: 0, typ: NTI157294, name: "bltinMethods", sons: null}, 
{kind: 1, offset: "getsetDescr", len: 0, typ: NTI157326, name: "getsetDescr", sons: null}]};
NTI157280.node = NNI157280;
var NNI157273 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI104, name: "id", sons: null}, 
{kind: 1, offset: "pyType", len: 0, typ: NTI157218, name: "pyType", sons: null}]};
NTI157273.node = NNI157273;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI157273.base = NTI3808;
NTI157214.base = NTI157273;
var NNI157277 = {kind: 1, offset: "dict", len: 0, typ: NTI157214, name: "dict", sons: null};
NTI157277.node = NNI157277;
NTI157277.base = NTI157273;
NTI157280.base = NTI157277;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
var NNI175084 = {kind: 1, offset: "str", len: 0, typ: NTI138, name: "str", sons: null};
NTI175084.node = NNI175084;
NTI175084.base = NTI157273;
var NNI3844 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3844.node = NNI3844;
NTI3844.base = NTI3842;
var NNI202995 = {kind: 2, offset: 0, typ: null, name: null, len: 178, sons: {"0": {kind: 1, offset: 0, typ: NTI202995, name: "NULLTOKEN", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI202995, name: "Endmarker", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI202995, name: "Name", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI202995, name: "Number", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI202995, name: "String", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI202995, name: "Newline", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI202995, name: "Indent", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI202995, name: "Dedent", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI202995, name: "Lpar", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI202995, name: "Rpar", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI202995, name: "Lsqb", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI202995, name: "Rsqb", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI202995, name: "Colon", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI202995, name: "Comma", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI202995, name: "Semi", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI202995, name: "Plus", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI202995, name: "Minus", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI202995, name: "Star", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI202995, name: "Slash", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI202995, name: "Vbar", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI202995, name: "Amper", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI202995, name: "Less", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI202995, name: "Greater", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI202995, name: "Equal", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI202995, name: "Dot", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI202995, name: "Percent", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI202995, name: "Lbrace", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI202995, name: "Rbrace", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI202995, name: "Eqequal", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI202995, name: "Notequal", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI202995, name: "Lessequal", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI202995, name: "Greaterequal", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI202995, name: "Tilde", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI202995, name: "Circumflex", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI202995, name: "Leftshift", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI202995, name: "Rightshift", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI202995, name: "Doublestar", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI202995, name: "Plusequal", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI202995, name: "Minequal", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI202995, name: "Starequal", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI202995, name: "Slashequal", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI202995, name: "Percentequal", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI202995, name: "Amperequal", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI202995, name: "Vbarequal", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI202995, name: "Circumflexequal", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI202995, name: "Leftshiftequal", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI202995, name: "Rightshiftequal", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI202995, name: "Doublestarequal", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI202995, name: "Doubleslash", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI202995, name: "Doubleslashequal", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI202995, name: "At", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI202995, name: "Atequal", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI202995, name: "Rarrow", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI202995, name: "Ellipsis", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI202995, name: "PEP401", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI202995, name: "not", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI202995, name: "if", len: 0, sons: null}, 
"57": {kind: 1, offset: 57, typ: NTI202995, name: "True", len: 0, sons: null}, 
"58": {kind: 1, offset: 58, typ: NTI202995, name: "break", len: 0, sons: null}, 
"59": {kind: 1, offset: 59, typ: NTI202995, name: "with", len: 0, sons: null}, 
"60": {kind: 1, offset: 60, typ: NTI202995, name: "and", len: 0, sons: null}, 
"61": {kind: 1, offset: 61, typ: NTI202995, name: "lambda", len: 0, sons: null}, 
"62": {kind: 1, offset: 62, typ: NTI202995, name: "is", len: 0, sons: null}, 
"63": {kind: 1, offset: 63, typ: NTI202995, name: "def", len: 0, sons: null}, 
"64": {kind: 1, offset: 64, typ: NTI202995, name: "from", len: 0, sons: null}, 
"65": {kind: 1, offset: 65, typ: NTI202995, name: "pass", len: 0, sons: null}, 
"66": {kind: 1, offset: 66, typ: NTI202995, name: "del", len: 0, sons: null}, 
"67": {kind: 1, offset: 67, typ: NTI202995, name: "False", len: 0, sons: null}, 
"68": {kind: 1, offset: 68, typ: NTI202995, name: "finally", len: 0, sons: null}, 
"69": {kind: 1, offset: 69, typ: NTI202995, name: "try", len: 0, sons: null}, 
"70": {kind: 1, offset: 70, typ: NTI202995, name: "assert", len: 0, sons: null}, 
"71": {kind: 1, offset: 71, typ: NTI202995, name: "async", len: 0, sons: null}, 
"72": {kind: 1, offset: 72, typ: NTI202995, name: "yield", len: 0, sons: null}, 
"73": {kind: 1, offset: 73, typ: NTI202995, name: "or", len: 0, sons: null}, 
"74": {kind: 1, offset: 74, typ: NTI202995, name: "in", len: 0, sons: null}, 
"75": {kind: 1, offset: 75, typ: NTI202995, name: "None", len: 0, sons: null}, 
"76": {kind: 1, offset: 76, typ: NTI202995, name: "for", len: 0, sons: null}, 
"77": {kind: 1, offset: 77, typ: NTI202995, name: "raise", len: 0, sons: null}, 
"78": {kind: 1, offset: 78, typ: NTI202995, name: "nonlocal", len: 0, sons: null}, 
"79": {kind: 1, offset: 79, typ: NTI202995, name: "else", len: 0, sons: null}, 
"80": {kind: 1, offset: 80, typ: NTI202995, name: "continue", len: 0, sons: null}, 
"81": {kind: 1, offset: 81, typ: NTI202995, name: "class", len: 0, sons: null}, 
"82": {kind: 1, offset: 82, typ: NTI202995, name: "except", len: 0, sons: null}, 
"83": {kind: 1, offset: 83, typ: NTI202995, name: "elif", len: 0, sons: null}, 
"84": {kind: 1, offset: 84, typ: NTI202995, name: "global", len: 0, sons: null}, 
"85": {kind: 1, offset: 85, typ: NTI202995, name: "return", len: 0, sons: null}, 
"86": {kind: 1, offset: 86, typ: NTI202995, name: "import", len: 0, sons: null}, 
"87": {kind: 1, offset: 87, typ: NTI202995, name: "while", len: 0, sons: null}, 
"88": {kind: 1, offset: 88, typ: NTI202995, name: "as", len: 0, sons: null}, 
"89": {kind: 1, offset: 89, typ: NTI202995, name: "await", len: 0, sons: null}, 
"90": {kind: 1, offset: 90, typ: NTI202995, name: "boundary", len: 0, sons: null}, 
"91": {kind: 1, offset: 91, typ: NTI202995, name: "single_input", len: 0, sons: null}, 
"92": {kind: 1, offset: 92, typ: NTI202995, name: "file_input", len: 0, sons: null}, 
"93": {kind: 1, offset: 93, typ: NTI202995, name: "eval_input", len: 0, sons: null}, 
"94": {kind: 1, offset: 94, typ: NTI202995, name: "decorator", len: 0, sons: null}, 
"95": {kind: 1, offset: 95, typ: NTI202995, name: "decorators", len: 0, sons: null}, 
"96": {kind: 1, offset: 96, typ: NTI202995, name: "decorated", len: 0, sons: null}, 
"97": {kind: 1, offset: 97, typ: NTI202995, name: "async_funcdef", len: 0, sons: null}, 
"98": {kind: 1, offset: 98, typ: NTI202995, name: "funcdef", len: 0, sons: null}, 
"99": {kind: 1, offset: 99, typ: NTI202995, name: "parameters", len: 0, sons: null}, 
"100": {kind: 1, offset: 100, typ: NTI202995, name: "typedargslist", len: 0, sons: null}, 
"101": {kind: 1, offset: 101, typ: NTI202995, name: "tfpdef", len: 0, sons: null}, 
"102": {kind: 1, offset: 102, typ: NTI202995, name: "varargslist", len: 0, sons: null}, 
"103": {kind: 1, offset: 103, typ: NTI202995, name: "vfpdef", len: 0, sons: null}, 
"104": {kind: 1, offset: 104, typ: NTI202995, name: "stmt", len: 0, sons: null}, 
"105": {kind: 1, offset: 105, typ: NTI202995, name: "simple_stmt", len: 0, sons: null}, 
"106": {kind: 1, offset: 106, typ: NTI202995, name: "small_stmt", len: 0, sons: null}, 
"107": {kind: 1, offset: 107, typ: NTI202995, name: "expr_stmt", len: 0, sons: null}, 
"108": {kind: 1, offset: 108, typ: NTI202995, name: "annassign", len: 0, sons: null}, 
"109": {kind: 1, offset: 109, typ: NTI202995, name: "testlist_star_expr", len: 0, sons: null}, 
"110": {kind: 1, offset: 110, typ: NTI202995, name: "augassign", len: 0, sons: null}, 
"111": {kind: 1, offset: 111, typ: NTI202995, name: "del_stmt", len: 0, sons: null}, 
"112": {kind: 1, offset: 112, typ: NTI202995, name: "pass_stmt", len: 0, sons: null}, 
"113": {kind: 1, offset: 113, typ: NTI202995, name: "flow_stmt", len: 0, sons: null}, 
"114": {kind: 1, offset: 114, typ: NTI202995, name: "break_stmt", len: 0, sons: null}, 
"115": {kind: 1, offset: 115, typ: NTI202995, name: "continue_stmt", len: 0, sons: null}, 
"116": {kind: 1, offset: 116, typ: NTI202995, name: "return_stmt", len: 0, sons: null}, 
"117": {kind: 1, offset: 117, typ: NTI202995, name: "yield_stmt", len: 0, sons: null}, 
"118": {kind: 1, offset: 118, typ: NTI202995, name: "raise_stmt", len: 0, sons: null}, 
"119": {kind: 1, offset: 119, typ: NTI202995, name: "import_stmt", len: 0, sons: null}, 
"120": {kind: 1, offset: 120, typ: NTI202995, name: "import_name", len: 0, sons: null}, 
"121": {kind: 1, offset: 121, typ: NTI202995, name: "import_from", len: 0, sons: null}, 
"122": {kind: 1, offset: 122, typ: NTI202995, name: "import_as_name", len: 0, sons: null}, 
"123": {kind: 1, offset: 123, typ: NTI202995, name: "dotted_as_name", len: 0, sons: null}, 
"124": {kind: 1, offset: 124, typ: NTI202995, name: "import_as_names", len: 0, sons: null}, 
"125": {kind: 1, offset: 125, typ: NTI202995, name: "dotted_as_names", len: 0, sons: null}, 
"126": {kind: 1, offset: 126, typ: NTI202995, name: "dotted_name", len: 0, sons: null}, 
"127": {kind: 1, offset: 127, typ: NTI202995, name: "global_stmt", len: 0, sons: null}, 
"128": {kind: 1, offset: 128, typ: NTI202995, name: "nonlocal_stmt", len: 0, sons: null}, 
"129": {kind: 1, offset: 129, typ: NTI202995, name: "assert_stmt", len: 0, sons: null}, 
"130": {kind: 1, offset: 130, typ: NTI202995, name: "compound_stmt", len: 0, sons: null}, 
"131": {kind: 1, offset: 131, typ: NTI202995, name: "async_stmt", len: 0, sons: null}, 
"132": {kind: 1, offset: 132, typ: NTI202995, name: "if_stmt", len: 0, sons: null}, 
"133": {kind: 1, offset: 133, typ: NTI202995, name: "while_stmt", len: 0, sons: null}, 
"134": {kind: 1, offset: 134, typ: NTI202995, name: "for_stmt", len: 0, sons: null}, 
"135": {kind: 1, offset: 135, typ: NTI202995, name: "try_stmt", len: 0, sons: null}, 
"136": {kind: 1, offset: 136, typ: NTI202995, name: "with_stmt", len: 0, sons: null}, 
"137": {kind: 1, offset: 137, typ: NTI202995, name: "with_item", len: 0, sons: null}, 
"138": {kind: 1, offset: 138, typ: NTI202995, name: "except_clause", len: 0, sons: null}, 
"139": {kind: 1, offset: 139, typ: NTI202995, name: "suite", len: 0, sons: null}, 
"140": {kind: 1, offset: 140, typ: NTI202995, name: "test", len: 0, sons: null}, 
"141": {kind: 1, offset: 141, typ: NTI202995, name: "test_nocond", len: 0, sons: null}, 
"142": {kind: 1, offset: 142, typ: NTI202995, name: "lambdef", len: 0, sons: null}, 
"143": {kind: 1, offset: 143, typ: NTI202995, name: "lambdef_nocond", len: 0, sons: null}, 
"144": {kind: 1, offset: 144, typ: NTI202995, name: "or_test", len: 0, sons: null}, 
"145": {kind: 1, offset: 145, typ: NTI202995, name: "and_test", len: 0, sons: null}, 
"146": {kind: 1, offset: 146, typ: NTI202995, name: "not_test", len: 0, sons: null}, 
"147": {kind: 1, offset: 147, typ: NTI202995, name: "comparison", len: 0, sons: null}, 
"148": {kind: 1, offset: 148, typ: NTI202995, name: "comp_op", len: 0, sons: null}, 
"149": {kind: 1, offset: 149, typ: NTI202995, name: "star_expr", len: 0, sons: null}, 
"150": {kind: 1, offset: 150, typ: NTI202995, name: "expr", len: 0, sons: null}, 
"151": {kind: 1, offset: 151, typ: NTI202995, name: "xor_expr", len: 0, sons: null}, 
"152": {kind: 1, offset: 152, typ: NTI202995, name: "and_expr", len: 0, sons: null}, 
"153": {kind: 1, offset: 153, typ: NTI202995, name: "shift_expr", len: 0, sons: null}, 
"154": {kind: 1, offset: 154, typ: NTI202995, name: "arith_expr", len: 0, sons: null}, 
"155": {kind: 1, offset: 155, typ: NTI202995, name: "term", len: 0, sons: null}, 
"156": {kind: 1, offset: 156, typ: NTI202995, name: "factor", len: 0, sons: null}, 
"157": {kind: 1, offset: 157, typ: NTI202995, name: "power", len: 0, sons: null}, 
"158": {kind: 1, offset: 158, typ: NTI202995, name: "atom_expr", len: 0, sons: null}, 
"159": {kind: 1, offset: 159, typ: NTI202995, name: "atom", len: 0, sons: null}, 
"160": {kind: 1, offset: 160, typ: NTI202995, name: "testlist_comp", len: 0, sons: null}, 
"161": {kind: 1, offset: 161, typ: NTI202995, name: "trailer", len: 0, sons: null}, 
"162": {kind: 1, offset: 162, typ: NTI202995, name: "subscriptlist", len: 0, sons: null}, 
"163": {kind: 1, offset: 163, typ: NTI202995, name: "subscript", len: 0, sons: null}, 
"164": {kind: 1, offset: 164, typ: NTI202995, name: "sliceop", len: 0, sons: null}, 
"165": {kind: 1, offset: 165, typ: NTI202995, name: "exprlist", len: 0, sons: null}, 
"166": {kind: 1, offset: 166, typ: NTI202995, name: "testlist", len: 0, sons: null}, 
"167": {kind: 1, offset: 167, typ: NTI202995, name: "dictorsetmaker", len: 0, sons: null}, 
"168": {kind: 1, offset: 168, typ: NTI202995, name: "classdef", len: 0, sons: null}, 
"169": {kind: 1, offset: 169, typ: NTI202995, name: "arglist", len: 0, sons: null}, 
"170": {kind: 1, offset: 170, typ: NTI202995, name: "argument", len: 0, sons: null}, 
"171": {kind: 1, offset: 171, typ: NTI202995, name: "comp_iter", len: 0, sons: null}, 
"172": {kind: 1, offset: 172, typ: NTI202995, name: "sync_comp_for", len: 0, sons: null}, 
"173": {kind: 1, offset: 173, typ: NTI202995, name: "comp_for", len: 0, sons: null}, 
"174": {kind: 1, offset: 174, typ: NTI202995, name: "comp_if", len: 0, sons: null}, 
"175": {kind: 1, offset: 175, typ: NTI202995, name: "encoding_decl", len: 0, sons: null}, 
"176": {kind: 1, offset: 176, typ: NTI202995, name: "yield_expr", len: 0, sons: null}, 
"177": {kind: 1, offset: 177, typ: NTI202995, name: "yield_arg", len: 0, sons: null}}};
NTI202995.node = NNI202995;
var NNI203987 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI202995, name: "Field2", sons: null}]};
NTI203987.node = NNI203987;
NTI203984.base = NTI203987;
var NNI203981 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI203984, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI203981.node = NNI203981;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
NTI133824.base = NTI138;
var NNI3854 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3854.node = NNI3854;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
NTI3852.base = NTI3828;
NTI3854.base = NTI3852;
var NNI212015 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI212015, name: "None", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI212015, name: "Star", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI212015, name: "Plus", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI212015, name: "Query", len: 0, sons: null}}};
NTI212015.node = NNI212015;
NTI212058.base = NTI212017;
var NNI212024 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI104, name: "id", sons: null}, 
{kind: 1, offset: "father", len: 0, typ: NTI212017, name: "father", sons: null}, 
{kind: 1, offset: "repeat", len: 0, typ: NTI212015, name: "repeat", sons: null}, 
{kind: 1, offset: "epsilonSet", len: 0, typ: NTI212034, name: "epsilonSet", sons: null}, 
{kind: 3, offset: "kind", len: 256, typ: NTI136, name: "kind", sons: [[setConstr(97, 115), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "token", len: 0, typ: NTI202995, name: "token", sons: null}, 
{kind: 1, offset: "nextSet", len: 0, typ: NTI212034, name: "nextSet", sons: null}]}], 
[setConstr([65, 72]), {kind: 1, offset: "children", len: 0, typ: NTI212058, name: "children", sons: null}], 
[setConstr(256), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}]};
NTI212024.node = NNI212024;
NTI212017.base = NTI212024;
var NNI212040 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI212017, name: "Field1", sons: null}]};
NTI212040.node = NNI212040;
NTI212037.base = NTI212040;
var NNI212034 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI212037, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI212034.node = NNI212034;
NTI250866.base = NTI212017;
NTI220231.base = NTI212017;
var NNI220227 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI220231, name: "data", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI104, name: "head", sons: null}, 
{kind: 1, offset: "tail", len: 0, typ: NTI104, name: "tail", sons: null}, 
{kind: 1, offset: "count", len: 0, typ: NTI104, name: "count", sons: null}, 
{kind: 1, offset: "mask", len: 0, typ: NTI104, name: "mask", sons: null}]};
NTI220227.node = NNI220227;
NTI178028.base = NTI138;
NTI241189.base = NTI138;
var NNI195498 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}]};
NTI195498.node = NNI195498;
NTI195495.base = NTI195498;
var NNI195492 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI195495, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI195492.node = NNI195492;
NTI249258.base = NTI138;
NTI257479.base = NTI202995;
var NNI281226 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"0": {kind: 1, offset: 0, typ: NTI281226, name: "flagCaseInsensitive", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI281226, name: "flagNotCaseInsensitive", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI281226, name: "flagMultiLine", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI281226, name: "flagNotMultiLine", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI281226, name: "flagAnyMatchNewLine", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI281226, name: "flagNotAnyMatchNewLine", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI281226, name: "flagUnGreedy", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI281226, name: "flagNotUnGreedy", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI281226, name: "flagUnicode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI281226, name: "flagNotUnicode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI281226, name: "flagVerbose", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI281226, name: "flagNotVerbose", len: 0, sons: null}}};
NTI281226.node = NNI281226;
NTI281297.base = NTI281226;
var NNI281313 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI41402, name: "Field1", sons: null}]};
NTI281313.node = NNI281313;
NTI281310.base = NTI281313;
var NNI281333 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI41402, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI41402, name: "b", sons: null}]};
NTI281333.node = NNI281333;
NTI281324.base = NTI281333;
var NNI281228 = {kind: 2, offset: 0, typ: null, name: null, len: 46, sons: {"0": {kind: 1, offset: 0, typ: NTI281228, name: "reChar", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI281228, name: "reCharCI", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI281228, name: "reJoiner", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI281228, name: "reGroupStart", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI281228, name: "reGroupEnd", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI281228, name: "reOr", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI281228, name: "reZeroOrMore", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI281228, name: "reOneOrMore", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI281228, name: "reZeroOrOne", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI281228, name: "reRepRange", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI281228, name: "reStartSym", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI281228, name: "reEndSym", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI281228, name: "reStartSymML", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI281228, name: "reEndSymML", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI281228, name: "reStart", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI281228, name: "reEnd", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI281228, name: "reWordBoundary", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI281228, name: "reNotWordBoundary", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI281228, name: "reAlphaNum", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI281228, name: "reDigit", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI281228, name: "reWhiteSpace", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI281228, name: "reUCC", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI281228, name: "reNotAlphaNum", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI281228, name: "reNotDigit", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI281228, name: "reNotWhiteSpace", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI281228, name: "reNotUCC", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI281228, name: "reAny", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI281228, name: "reAnyNL", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI281228, name: "reWordBoundaryAscii", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI281228, name: "reNotWordBoundaryAscii", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI281228, name: "reAlphaNumAscii", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI281228, name: "reDigitAscii", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI281228, name: "reWhiteSpaceAscii", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI281228, name: "reNotAlphaNumAscii", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI281228, name: "reNotDigitAscii", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI281228, name: "reNotWhiteSpaceAscii", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI281228, name: "reAnyAscii", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI281228, name: "reAnyNLAscii", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI281228, name: "reSet", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI281228, name: "reNotSet", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI281228, name: "reLookahead", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI281228, name: "reLookbehind", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI281228, name: "reNotLookahead", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI281228, name: "reNotLookbehind", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI281228, name: "reSkip", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI281228, name: "reEOE", len: 0, sons: null}}};
NTI281228.node = NNI281228;
var NNI281307 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI281310, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI281307.node = NNI281307;
var NNI281230 = {kind: 2, len: 15, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI281228, name: "kind", sons: null}, 
{kind: 1, offset: "cp", len: 0, typ: NTI41402, name: "cp", sons: null}, 
{kind: 1, offset: "outA", len: 0, typ: NTI108, name: "outA", sons: null}, 
{kind: 1, offset: "outB", len: 0, typ: NTI108, name: "outB", sons: null}, 
{kind: 1, offset: "isGreedy", len: 0, typ: NTI130, name: "isGreedy", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI108, name: "idx", sons: null}, 
{kind: 1, offset: "isCapturing", len: 0, typ: NTI130, name: "isCapturing", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "flags", len: 0, typ: NTI281297, name: "flags", sons: null}, 
{kind: 1, offset: "min", len: 0, typ: NTI108, name: "min", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI108, name: "max", sons: null}, 
{kind: 1, offset: "cps", len: 0, typ: NTI281307, name: "cps", sons: null}, 
{kind: 1, offset: "ranges", len: 0, typ: NTI281324, name: "ranges", sons: null}, 
{kind: 1, offset: "shorthands", len: 0, typ: NTI281339, name: "shorthands", sons: null}, 
{kind: 1, offset: "cc", len: 0, typ: NTI110, name: "cc", sons: null}]};
NTI281230.node = NNI281230;
NTI281339.base = NTI281230;
NTI320469.base = NTI281230;
var NNI301992 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI108, name: "Field2", sons: null}]};
NTI301992.node = NNI301992;
NTI301989.base = NTI301992;
var NNI301986 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI301989, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI301986.node = NNI301986;
var NNI320460 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "states", len: 0, typ: NTI320469, name: "states", sons: null}, 
{kind: 1, offset: "groupsCount", len: 0, typ: NTI108, name: "groupsCount", sons: null}, 
{kind: 1, offset: "namedGroups", len: 0, typ: NTI301986, name: "namedGroups", sons: null}]};
NTI320460.node = NNI320460;
var NNI353098 = {kind: 1, offset: "b", len: 0, typ: NTI130, name: "b", sons: null};
NTI353098.node = NNI353098;
NTI353098.base = NTI157273;
var NNI355070 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI355070.node = NNI355070;
NTI355070.base = NTI157273;
var NNI357147 = {kind: 2, offset: 0, typ: null, name: null, len: 16, sons: {"0": {kind: 1, offset: 0, typ: NTI357147, name: "Base", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI357147, name: "Name", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI357147, name: "NotImplemented", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI357147, name: "Type", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI357147, name: "Attribute", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI357147, name: "Value", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI357147, name: "Index", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI357147, name: "StopIter", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI357147, name: "Lock", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI357147, name: "Import", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI357147, name: "UnboundLocal", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI357147, name: "Key", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI357147, name: "Assertion", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI357147, name: "ZeroDivision", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI357147, name: "Runtime", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI357147, name: "Syntax", len: 0, sons: null}}};
NTI357147.node = NNI357147;
NTI357230.base = NTI357231;
var NNI357165 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI157214, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157214, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI357165.node = NNI357165;
NTI357236.base = NTI357165;
var NNI357231 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tk", len: 0, typ: NTI357147, name: "tk", sons: null}, 
{kind: 1, offset: "thrown", len: 0, typ: NTI130, name: "thrown", sons: null}, 
{kind: 1, offset: "msg", len: 0, typ: NTI157214, name: "msg", sons: null}, 
{kind: 1, offset: "context", len: 0, typ: NTI357230, name: "context", sons: null}, 
{kind: 1, offset: "traceBacks", len: 0, typ: NTI357236, name: "traceBacks", sons: null}]};
NTI357231.node = NNI357231;
NTI357231.base = NTI157273;
var NNI358415 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI358415.node = NNI358415;
NTI358415.base = NTI357231;
var NNI359501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI359501.node = NNI359501;
NTI359501.base = NTI357231;
var NNI360501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI360501.node = NNI360501;
NTI360501.base = NTI357231;
var NNI361501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI361501.node = NNI361501;
NTI361501.base = NTI357231;
var NNI362501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI362501.node = NNI362501;
NTI362501.base = NTI357231;
var NNI363501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI363501.node = NNI363501;
NTI363501.base = NTI357231;
var NNI364501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI364501.node = NNI364501;
NTI364501.base = NTI357231;
var NNI365501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI365501.node = NNI365501;
NTI365501.base = NTI357231;
var NNI366501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI366501.node = NNI366501;
NTI366501.base = NTI357231;
var NNI367501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI367501.node = NNI367501;
NTI367501.base = NTI357231;
var NNI368501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI368501.node = NNI368501;
NTI368501.base = NTI357231;
var NNI369501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI369501.node = NNI369501;
NTI369501.base = NTI357231;
var NNI370501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI370501.node = NNI370501;
NTI370501.base = NTI357231;
var NNI371501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI371501.node = NNI371501;
NTI371501.base = NTI357231;
var NNI372501 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI372501.node = NNI372501;
NTI372501.base = NTI357231;
var NNI374109 = {kind: 1, offset: "v", len: 0, typ: NTI104, name: "v", sons: null};
NTI374109.node = NNI374109;
NTI374109.base = NTI157273;
var NNI375100 = {kind: 1, offset: "v", len: 0, typ: NTI124, name: "v", sons: null};
NTI375100.node = NNI375100;
NTI375100.base = NTI157273;
var NNI156081 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156081.node = NNI156081;
NTI156081.base = NTI3826;
NTI134017.base = NTI138;
var NNI3866 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3866.node = NNI3866;
NTI3866.base = NTI3828;
NTI460191.base = NTI157214;
var NNI460190 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI460191, name: "items", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI104, name: "idx", sons: null}]};
NTI460190.node = NNI460190;
NTI460190.base = NTI157273;
var NNI462097 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI157214, name: "start", sons: null}, 
{kind: 1, offset: "stop", len: 0, typ: NTI157214, name: "stop", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI157214, name: "step", sons: null}]};
NTI462097.node = NNI462097;
NTI462097.base = NTI157273;
NTI464071.base = NTI157214;
var NNI464070 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI464071, name: "items", sons: null}, 
{kind: 1, offset: "reprLock", len: 0, typ: NTI130, name: "reprLock", sons: null}]};
NTI464070.node = NNI464070;
NTI464070.base = NTI157273;
NTI461650.base = NTI157214;
NTI465059.base = NTI157214;
var NNI459016 = {kind: 2, offset: 0, typ: null, name: null, len: 123, sons: {"0": {kind: 1, offset: 0, typ: NTI459016, name: "NULLCODE", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI459016, name: "POP_TOP", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI459016, name: "ROT_TWO", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI459016, name: "ROT_THREE", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI459016, name: "DUP_TOP", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI459016, name: "DUP_TOP_TWO", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI459016, name: "ROT_FOUR", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI459016, name: "NOP", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI459016, name: "UNARY_POSITIVE", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI459016, name: "UNARY_NEGATIVE", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI459016, name: "UNARY_NOT", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI459016, name: "UNARY_INVERT", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI459016, name: "BINARY_MATRIX_MULTIPLY", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI459016, name: "INPLACE_MATRIX_MULTIPLY", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI459016, name: "BINARY_POWER", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI459016, name: "BINARY_MULTIPLY", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI459016, name: "BINARY_MODULO", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI459016, name: "BINARY_ADD", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI459016, name: "BINARY_SUBTRACT", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI459016, name: "BINARY_SUBSCR", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI459016, name: "BINARY_FLOOR_DIVIDE", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI459016, name: "BINARY_TRUE_DIVIDE", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI459016, name: "INPLACE_FLOOR_DIVIDE", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI459016, name: "INPLACE_TRUE_DIVIDE", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI459016, name: "GET_AITER", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI459016, name: "GET_ANEXT", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI459016, name: "BEFORE_ASYNC_WITH", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI459016, name: "BEGIN_FINALLY", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI459016, name: "END_ASYNC_FOR", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI459016, name: "INPLACE_ADD", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI459016, name: "INPLACE_SUBTRACT", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI459016, name: "INPLACE_MULTIPLY", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI459016, name: "INPLACE_MODULO", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI459016, name: "STORE_SUBSCR", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI459016, name: "DELETE_SUBSCR", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI459016, name: "BINARY_LSHIFT", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI459016, name: "BINARY_RSHIFT", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI459016, name: "BINARY_AND", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI459016, name: "BINARY_XOR", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI459016, name: "BINARY_OR", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI459016, name: "INPLACE_POWER", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI459016, name: "GET_ITER", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI459016, name: "GET_YIELD_FROM_ITER", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI459016, name: "PRINT_EXPR", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI459016, name: "LOAD_BUILD_CLASS", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI459016, name: "YIELD_FROM", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI459016, name: "GET_AWAITABLE", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI459016, name: "INPLACE_LSHIFT", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI459016, name: "INPLACE_RSHIFT", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI459016, name: "INPLACE_AND", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI459016, name: "INPLACE_XOR", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI459016, name: "INPLACE_OR", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI459016, name: "WITH_CLEANUP_START", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI459016, name: "WITH_CLEANUP_FINISH", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI459016, name: "RETURN_VALUE", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI459016, name: "IMPORT_STAR", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI459016, name: "SETUP_ANNOTATIONS", len: 0, sons: null}, 
"57": {kind: 1, offset: 57, typ: NTI459016, name: "YIELD_VALUE", len: 0, sons: null}, 
"58": {kind: 1, offset: 58, typ: NTI459016, name: "POP_BLOCK", len: 0, sons: null}, 
"59": {kind: 1, offset: 59, typ: NTI459016, name: "END_FINALLY", len: 0, sons: null}, 
"60": {kind: 1, offset: 60, typ: NTI459016, name: "POP_EXCEPT", len: 0, sons: null}, 
"61": {kind: 1, offset: 61, typ: NTI459016, name: "HAVE_ARGUMENT", len: 0, sons: null}, 
"62": {kind: 1, offset: 62, typ: NTI459016, name: "STORE_NAME", len: 0, sons: null}, 
"63": {kind: 1, offset: 63, typ: NTI459016, name: "DELETE_NAME", len: 0, sons: null}, 
"64": {kind: 1, offset: 64, typ: NTI459016, name: "UNPACK_SEQUENCE", len: 0, sons: null}, 
"65": {kind: 1, offset: 65, typ: NTI459016, name: "FOR_ITER", len: 0, sons: null}, 
"66": {kind: 1, offset: 66, typ: NTI459016, name: "UNPACK_EX", len: 0, sons: null}, 
"67": {kind: 1, offset: 67, typ: NTI459016, name: "STORE_ATTR", len: 0, sons: null}, 
"68": {kind: 1, offset: 68, typ: NTI459016, name: "DELETE_ATTR", len: 0, sons: null}, 
"69": {kind: 1, offset: 69, typ: NTI459016, name: "STORE_GLOBAL", len: 0, sons: null}, 
"70": {kind: 1, offset: 70, typ: NTI459016, name: "DELETE_GLOBAL", len: 0, sons: null}, 
"71": {kind: 1, offset: 71, typ: NTI459016, name: "LOAD_CONST", len: 0, sons: null}, 
"72": {kind: 1, offset: 72, typ: NTI459016, name: "LOAD_NAME", len: 0, sons: null}, 
"73": {kind: 1, offset: 73, typ: NTI459016, name: "BUILD_TUPLE", len: 0, sons: null}, 
"74": {kind: 1, offset: 74, typ: NTI459016, name: "BUILD_LIST", len: 0, sons: null}, 
"75": {kind: 1, offset: 75, typ: NTI459016, name: "BUILD_SET", len: 0, sons: null}, 
"76": {kind: 1, offset: 76, typ: NTI459016, name: "BUILD_MAP", len: 0, sons: null}, 
"77": {kind: 1, offset: 77, typ: NTI459016, name: "LOAD_ATTR", len: 0, sons: null}, 
"78": {kind: 1, offset: 78, typ: NTI459016, name: "COMPARE_OP", len: 0, sons: null}, 
"79": {kind: 1, offset: 79, typ: NTI459016, name: "IMPORT_NAME", len: 0, sons: null}, 
"80": {kind: 1, offset: 80, typ: NTI459016, name: "IMPORT_FROM", len: 0, sons: null}, 
"81": {kind: 1, offset: 81, typ: NTI459016, name: "JUMP_FORWARD", len: 0, sons: null}, 
"82": {kind: 1, offset: 82, typ: NTI459016, name: "JUMP_IF_FALSE_OR_POP", len: 0, sons: null}, 
"83": {kind: 1, offset: 83, typ: NTI459016, name: "JUMP_IF_TRUE_OR_POP", len: 0, sons: null}, 
"84": {kind: 1, offset: 84, typ: NTI459016, name: "JUMP_ABSOLUTE", len: 0, sons: null}, 
"85": {kind: 1, offset: 85, typ: NTI459016, name: "POP_JUMP_IF_FALSE", len: 0, sons: null}, 
"86": {kind: 1, offset: 86, typ: NTI459016, name: "POP_JUMP_IF_TRUE", len: 0, sons: null}, 
"87": {kind: 1, offset: 87, typ: NTI459016, name: "LOAD_GLOBAL", len: 0, sons: null}, 
"88": {kind: 1, offset: 88, typ: NTI459016, name: "SETUP_FINALLY", len: 0, sons: null}, 
"89": {kind: 1, offset: 89, typ: NTI459016, name: "LOAD_FAST", len: 0, sons: null}, 
"90": {kind: 1, offset: 90, typ: NTI459016, name: "STORE_FAST", len: 0, sons: null}, 
"91": {kind: 1, offset: 91, typ: NTI459016, name: "DELETE_FAST", len: 0, sons: null}, 
"92": {kind: 1, offset: 92, typ: NTI459016, name: "RAISE_VARARGS", len: 0, sons: null}, 
"93": {kind: 1, offset: 93, typ: NTI459016, name: "CALL_FUNCTION", len: 0, sons: null}, 
"94": {kind: 1, offset: 94, typ: NTI459016, name: "MAKE_FUNCTION", len: 0, sons: null}, 
"95": {kind: 1, offset: 95, typ: NTI459016, name: "BUILD_SLICE", len: 0, sons: null}, 
"96": {kind: 1, offset: 96, typ: NTI459016, name: "LOAD_CLOSURE", len: 0, sons: null}, 
"97": {kind: 1, offset: 97, typ: NTI459016, name: "LOAD_DEREF", len: 0, sons: null}, 
"98": {kind: 1, offset: 98, typ: NTI459016, name: "STORE_DEREF", len: 0, sons: null}, 
"99": {kind: 1, offset: 99, typ: NTI459016, name: "DELETE_DEREF", len: 0, sons: null}, 
"100": {kind: 1, offset: 100, typ: NTI459016, name: "CALL_FUNCTION_KW", len: 0, sons: null}, 
"101": {kind: 1, offset: 101, typ: NTI459016, name: "CALL_FUNCTION_EX", len: 0, sons: null}, 
"102": {kind: 1, offset: 102, typ: NTI459016, name: "SETUP_WITH", len: 0, sons: null}, 
"103": {kind: 1, offset: 103, typ: NTI459016, name: "EXTENDED_ARG", len: 0, sons: null}, 
"104": {kind: 1, offset: 104, typ: NTI459016, name: "LIST_APPEND", len: 0, sons: null}, 
"105": {kind: 1, offset: 105, typ: NTI459016, name: "SET_ADD", len: 0, sons: null}, 
"106": {kind: 1, offset: 106, typ: NTI459016, name: "MAP_ADD", len: 0, sons: null}, 
"107": {kind: 1, offset: 107, typ: NTI459016, name: "LOAD_CLASSDEREF", len: 0, sons: null}, 
"108": {kind: 1, offset: 108, typ: NTI459016, name: "BUILD_LIST_UNPACK", len: 0, sons: null}, 
"109": {kind: 1, offset: 109, typ: NTI459016, name: "BUILD_MAP_UNPACK", len: 0, sons: null}, 
"110": {kind: 1, offset: 110, typ: NTI459016, name: "BUILD_MAP_UNPACK_WITH_CALL", len: 0, sons: null}, 
"111": {kind: 1, offset: 111, typ: NTI459016, name: "BUILD_TUPLE_UNPACK", len: 0, sons: null}, 
"112": {kind: 1, offset: 112, typ: NTI459016, name: "BUILD_SET_UNPACK", len: 0, sons: null}, 
"113": {kind: 1, offset: 113, typ: NTI459016, name: "SETUP_ASYNC_WITH", len: 0, sons: null}, 
"114": {kind: 1, offset: 114, typ: NTI459016, name: "FORMAT_VALUE", len: 0, sons: null}, 
"115": {kind: 1, offset: 115, typ: NTI459016, name: "BUILD_CONST_KEY_MAP", len: 0, sons: null}, 
"116": {kind: 1, offset: 116, typ: NTI459016, name: "BUILD_STRING", len: 0, sons: null}, 
"117": {kind: 1, offset: 117, typ: NTI459016, name: "BUILD_TUPLE_UNPACK_WITH_CALL", len: 0, sons: null}, 
"118": {kind: 1, offset: 118, typ: NTI459016, name: "LOAD_METHOD", len: 0, sons: null}, 
"119": {kind: 1, offset: 119, typ: NTI459016, name: "CALL_METHOD", len: 0, sons: null}, 
"120": {kind: 1, offset: 120, typ: NTI459016, name: "CALL_FINALLY", len: 0, sons: null}, 
"121": {kind: 1, offset: 121, typ: NTI459016, name: "POP_FINALLY", len: 0, sons: null}, 
"122": {kind: 1, offset: 122, typ: NTI459016, name: "EXCEPT_HANDLER", len: 0, sons: null}}};
NTI459016.node = NNI459016;
var NNI487127 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI459016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI487068, name: "Field1", sons: null}]};
NTI487127.node = NNI487127;
NTI487126.base = NTI487127;
NTI487129.base = NTI459016;
NTI487131.base = NTI487068;
NTI487133.base = NTI104;
NTI487135.base = NTI157214;
NTI175083.base = NTI175084;
NTI487137.base = NTI175083;
NTI487139.base = NTI175083;
NTI487141.base = NTI175083;
NTI487143.base = NTI175083;
NTI487145.base = NTI175083;
var NNI427133 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI427133, name: "Local", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI427133, name: "Cell", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI427133, name: "Free", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI427133, name: "Global", len: 0, sons: null}}};
NTI427133.node = NNI427133;
var NNI487148 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI427133, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI487148.node = NNI487148;
NTI487147.base = NTI487148;
var NNI487125 = {kind: 2, len: 13, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "code", len: 0, typ: NTI487126, name: "code", sons: null}, 
{kind: 1, offset: "opCodes", len: 0, typ: NTI487129, name: "opCodes", sons: null}, 
{kind: 1, offset: "opArgs", len: 0, typ: NTI487131, name: "opArgs", sons: null}, 
{kind: 1, offset: "lineNos", len: 0, typ: NTI487133, name: "lineNos", sons: null}, 
{kind: 1, offset: "constants", len: 0, typ: NTI487135, name: "constants", sons: null}, 
{kind: 1, offset: "names", len: 0, typ: NTI487137, name: "names", sons: null}, 
{kind: 1, offset: "localVars", len: 0, typ: NTI487139, name: "localVars", sons: null}, 
{kind: 1, offset: "cellVars", len: 0, typ: NTI487141, name: "cellVars", sons: null}, 
{kind: 1, offset: "freeVars", len: 0, typ: NTI487143, name: "freeVars", sons: null}, 
{kind: 1, offset: "argNames", len: 0, typ: NTI487145, name: "argNames", sons: null}, 
{kind: 1, offset: "argScopes", len: 0, typ: NTI487147, name: "argScopes", sons: null}, 
{kind: 1, offset: "codeName", len: 0, typ: NTI175083, name: "codeName", sons: null}, 
{kind: 1, offset: "fileName", len: 0, typ: NTI175083, name: "fileName", sons: null}]};
NTI487125.node = NNI487125;
NTI487125.base = NTI157273;
NTI505256.base = NTI157214;
var NNI505255 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI505256, name: "items", sons: null}, 
{kind: 1, offset: "reprLock", len: 0, typ: NTI130, name: "reprLock", sons: null}, 
{kind: 1, offset: "readNum", len: 0, typ: NTI104, name: "readNum", sons: null}, 
{kind: 1, offset: "writeLock", len: 0, typ: NTI130, name: "writeLock", sons: null}]};
NTI505255.node = NNI505255;
NTI505255.base = NTI157273;
var NNI521194 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI157214, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI157214, name: "Field2", sons: null}]};
NTI521194.node = NNI521194;
NTI521191.base = NTI521194;
var NNI521188 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI521191, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI521188.node = NNI521188;
var NNI521178 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "table", len: 0, typ: NTI521188, name: "table", sons: null}, 
{kind: 1, offset: "reprLock", len: 0, typ: NTI130, name: "reprLock", sons: null}, 
{kind: 1, offset: "readNum", len: 0, typ: NTI104, name: "readNum", sons: null}, 
{kind: 1, offset: "writeLock", len: 0, typ: NTI130, name: "writeLock", sons: null}]};
NTI521178.node = NNI521178;
NTI521178.base = NTI157273;
var NNI156085 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156085.node = NNI156085;
NTI156085.base = NTI3826;
var NNI535150 = {kind: 1, offset: "refObj", len: 0, typ: NTI157214, name: "refObj", sons: null};
NTI535150.node = NNI535150;
NTI535150.base = NTI157273;
NTI537082.base = NTI537083;
NTI487124.base = NTI487125;
NTI521177.base = NTI521178;
NTI537087.base = NTI157214;
NTI535149.base = NTI535150;
NTI537089.base = NTI535149;
var NNI537083 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "back", len: 0, typ: NTI537082, name: "back", sons: null}, 
{kind: 1, offset: "code", len: 0, typ: NTI487124, name: "code", sons: null}, 
{kind: 1, offset: "globals", len: 0, typ: NTI521177, name: "globals", sons: null}, 
{kind: 1, offset: "fastLocals", len: 0, typ: NTI537087, name: "fastLocals", sons: null}, 
{kind: 1, offset: "cellVars", len: 0, typ: NTI537089, name: "cellVars", sons: null}]};
NTI537083.node = NNI537083;
NTI537083.base = NTI157273;
NTI464069.base = NTI464070;
var NNI540123 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null}, 
{kind: 1, offset: "code", len: 0, typ: NTI487124, name: "code", sons: null}, 
{kind: 1, offset: "globals", len: 0, typ: NTI521177, name: "globals", sons: null}, 
{kind: 1, offset: "closure", len: 0, typ: NTI464069, name: "closure", sons: null}]};
NTI540123.node = NNI540123;
NTI540123.base = NTI157273;
NTI540122.base = NTI540123;
var NNI541100 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fun", len: 0, typ: NTI540122, name: "fun", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI157214, name: "self", sons: null}]};
NTI541100.node = NNI541100;
NTI541100.base = NTI157273;
var NNI542672 = {kind: 1, offset: "callable", len: 0, typ: NTI157214, name: "callable", sons: null};
NTI542672.node = NNI542672;
NTI542672.base = NTI157273;
var NNI545084 = {kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null};
NTI545084.node = NNI545084;
NTI545084.base = NTI157277;
var NNI547081 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI547081, name: "BltinFunc", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI547081, name: "UnaryMethod", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI547081, name: "BinaryMethod", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI547081, name: "TernaryMethod", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI547081, name: "BltinMethod", len: 0, sons: null}}};
NTI547081.node = NNI547081;
var NNI547143 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI157214, name: "self", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI547081, name: "kind", sons: null}, 
{kind: 1, offset: "fun", len: 0, typ: NTI104, name: "fun", sons: null}]};
NTI547143.node = NNI547143;
NTI547143.base = NTI157273;
NTI374108.base = NTI374109;
var NNI588190 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI374108, name: "start", sons: null}, 
{kind: 1, offset: "ending", len: 0, typ: NTI374108, name: "ending", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI374108, name: "step", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI374108, name: "length", sons: null}]};
NTI588190.node = NNI588190;
NTI588190.base = NTI157273;
var NNI590712 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI374108, name: "start", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI374108, name: "step", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI374108, name: "length", sons: null}, 
{kind: 1, offset: "index", len: 0, typ: NTI374108, name: "index", sons: null}]};
NTI590712.node = NNI590712;
NTI590712.base = NTI157273;
NTI563059.base = NTI157214;
NTI586657.base = NTI535149;
var NNI551208 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI459016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI487068, name: "Field1", sons: null}]};
NTI551208.node = NNI551208;
NTI506275.base = NTI157214;
var NNI600083 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI175083, name: "name", sons: null}, 
{kind: 1, offset: "dType", len: 0, typ: NTI157218, name: "dType", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI547081, name: "kind", sons: null}, 
{kind: 1, offset: "meth", len: 0, typ: NTI104, name: "meth", sons: null}]};
NTI600083.node = NNI600083;
NTI600083.base = NTI157273;
var NNI602891 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "getter", len: 0, typ: NTI157346, name: "getter", sons: null}, 
{kind: 1, offset: "setter", len: 0, typ: NTI157349, name: "setter", sons: null}]};
NTI602891.node = NNI602891;
NTI602891.base = NTI157273;
var NNI604304 = {kind: 1, offset: "getter", len: 0, typ: NTI157214, name: "getter", sons: null};
NTI604304.node = NNI604304;
NTI604304.base = NTI157273;
var NNI607110 = {kind: 1, offset: "dict", len: 0, typ: NTI157214, name: "dict", sons: null};
NTI607110.node = NNI607110;
NTI607110.base = NTI157273;
NTI157559.base = NTI138;
var NNI626109 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI626109.node = NNI626109;
NTI626109.base = NTI157277;
var NNI156086 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fileName", len: 0, typ: NTI138, name: "fileName", sons: null}, 
{kind: 1, offset: "lineNo", len: 0, typ: NTI104, name: "lineNo", sons: null}, 
{kind: 1, offset: "colNo", len: 0, typ: NTI104, name: "colNo", sons: null}]};
NTI156086.node = NNI156086;
NTI156086.base = NTI3826;
NTI324446.base = NTI110;
var NNI324445 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI324446, name: "s", sons: null}, 
{kind: 1, offset: "key", len: 0, typ: NTI110, name: "key", sons: null}]};
NTI324445.node = NNI324445;
var NNI320468 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI108, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI320468.node = NNI320468;
NTI324650.base = NTI320468;
var NNI324646 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI324650, name: "s", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}]};
NTI324646.node = NNI324646;
var NNI324639 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "states", len: 0, typ: NTI324646, name: "states", sons: null}, 
{kind: 1, offset: "ids", len: 0, typ: NTI324445, name: "ids", sons: null}]};
NTI324639.node = NNI324639;
var NNI320464 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI320464, name: "captStart", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI320464, name: "captEnd", len: 0, sons: null}}};
NTI320464.node = NNI320464;
var NNI320466 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI320464, name: "kind", sons: null}, 
{kind: 1, offset: "prev", len: 0, typ: NTI104, name: "prev", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI108, name: "idx", sons: null}, 
{kind: 1, offset: "cpIdx", len: 0, typ: NTI104, name: "cpIdx", sons: null}]};
NTI320466.node = NNI320466;
NTI325988.base = NTI320466;
var NNI325984 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI325988, name: "s", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}]};
NTI325984.node = NNI325984;
var NNI329872 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI324445, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI324646, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI325984, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI324639, name: "Field3", sons: null}, 
{kind: 1, offset: "Field4", len: 0, typ: NTI324639, name: "Field4", sons: null}]};
NTI329872.node = NNI329872;
NTI277054.base = NTI116;
NTI277235.base = NTI106;
NTI277238.base = NTI108;
NTI279086.base = NTI130;
NTI50537.base = NTI50646;
NTI50649.base = NTI51316;
NTI49744.base = NTI49850;
NTI49853.base = NTI50534;
NTI260204.base = NTI116;
NTI268071.base = NTI116;
NTI275250.base = NTI110;
NTI275249.base = NTI275250;
var NNI25907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI104, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI25907.node = NNI25907;
NTI326025.base = NTI25907;
var NNI208887 = {kind: 3, offset: "token", len: 178, typ: NTI202995, name: "token", sons: [[setConstr([0, 89]), {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineNo", len: 0, typ: NTI104, name: "lineNo", sons: null}, 
{kind: 1, offset: "colNo", len: 0, typ: NTI104, name: "colNo", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI138, name: "content", sons: null}]}], 
[setConstr(178), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]};
NTI208887.node = NNI208887;
NTI208886.base = NTI208887;
NTI337147.base = NTI208886;
NTI348051.base = NTI212017;
NTI350389.base = NTI212017;
NTI596410.base = NTI357165;
NTI596270.base = NTI357165;
NTI596676.base = NTI138;
var NNI177024 = {kind: 1, offset: "value", len: 0, typ: NTI104, name: "value", sons: null};
NTI177024.node = NNI177024;
var NNI177022 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI177022.node = NNI177022;
NTI177022.base = NTI3808;
NTI177024.base = NTI177022;
NTI177017.base = NTI177024;
var NNI178567 = {kind: 2, offset: 0, typ: null, name: null, len: 25, sons: {"0": {kind: 1, offset: 0, typ: NTI178567, name: "FunctionDef", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178567, name: "AsyncFunctionDef", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178567, name: "ClassDef", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178567, name: "Return", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178567, name: "Delete", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178567, name: "Assign", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178567, name: "AugAssign", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178567, name: "AnnAssign", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178567, name: "For", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178567, name: "AsyncFor", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI178567, name: "While", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI178567, name: "If", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI178567, name: "With", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI178567, name: "AsyncWith", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI178567, name: "Raise", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI178567, name: "Try", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI178567, name: "Assert", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI178567, name: "Import", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI178567, name: "ImportFrom", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI178567, name: "Global", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI178567, name: "Nonlocal", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI178567, name: "Expr", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI178567, name: "Pass", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI178567, name: "Break", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI178567, name: "Continue", len: 0, sons: null}}};
NTI178567.node = NNI178567;
var NNI178726 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178567, name: "kind", sons: null}]};
NTI178726.node = NNI178726;
NTI178726.base = NTI177022;
NTI178694.base = NTI178726;
NTI178838.base = NTI178694;
var NNI178837 = {kind: 1, offset: "body", len: 0, typ: NTI178838, name: "body", sons: null};
NTI178837.node = NNI178837;
var NNI178561 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI178561, name: "Module", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178561, name: "Interactive", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178561, name: "Expression", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178561, name: "Suite", len: 0, sons: null}}};
NTI178561.node = NNI178561;
var NNI178723 = {kind: 1, offset: "kind", len: 0, typ: NTI178561, name: "kind", sons: null};
NTI178723.node = NNI178723;
NTI178723.base = NTI177022;
NTI178837.base = NTI178723;
var NNI178653 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI178653, name: "Invert", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178653, name: "Not", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178653, name: "UAdd", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178653, name: "USub", len: 0, sons: null}}};
NTI178653.node = NNI178653;
var NNI178748 = {kind: 1, offset: "kind", len: 0, typ: NTI178653, name: "kind", sons: null};
NTI178748.node = NNI178748;
NTI178748.base = NTI177022;
NTI178706.base = NTI178748;
var NNI178594 = {kind: 2, offset: 0, typ: null, name: null, len: 25, sons: {"0": {kind: 1, offset: 0, typ: NTI178594, name: "BoolOp", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178594, name: "BinOp", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178594, name: "UnaryOp", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178594, name: "Lambda", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178594, name: "IfExp", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178594, name: "Dict", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178594, name: "Set", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178594, name: "ListComp", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178594, name: "SetComp", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178594, name: "DictComp", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI178594, name: "GeneratorExp", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI178594, name: "Await", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI178594, name: "Yield", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI178594, name: "YieldFrom", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI178594, name: "Compare", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI178594, name: "Call", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI178594, name: "FormattedValue", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI178594, name: "JoinedStr", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI178594, name: "Constant", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI178594, name: "Attribute", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI178594, name: "Subscript", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI178594, name: "Starred", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI178594, name: "Name", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI178594, name: "List", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI178594, name: "Tuple", len: 0, sons: null}}};
NTI178594.node = NNI178594;
var NNI178731 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178594, name: "kind", sons: null}]};
NTI178731.node = NNI178731;
NTI178731.base = NTI177022;
NTI178696.base = NTI178731;
var NNI180002 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "op", len: 0, typ: NTI178706, name: "op", sons: null}, 
{kind: 1, offset: "operand", len: 0, typ: NTI178696, name: "operand", sons: null}]};
NTI180002.node = NNI180002;
NTI180002.base = NTI178731;
var NNI181624 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181624.node = NNI181624;
NTI181624.base = NTI178748;
NTI180801.base = NTI178696;
var NNI178621 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI178621, name: "Load", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178621, name: "Store", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178621, name: "Del", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178621, name: "AugLoad", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178621, name: "AugStore", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178621, name: "Param", len: 0, sons: null}}};
NTI178621.node = NNI178621;
var NNI178736 = {kind: 1, offset: "kind", len: 0, typ: NTI178621, name: "kind", sons: null};
NTI178736.node = NNI178736;
NTI178736.base = NTI177022;
NTI178698.base = NTI178736;
var NNI180800 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elts", len: 0, typ: NTI180801, name: "elts", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180800.node = NNI180800;
NTI180800.base = NTI178731;
NTI401513.base = NTI178696;
var NNI180837 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180837.node = NNI180837;
NTI180837.base = NTI178736;
var NNI178671 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178671, name: "Comprehension", len: 0, sons: null}}};
NTI178671.node = NNI178671;
var NNI178754 = {kind: 1, offset: "kind", len: 0, typ: NTI178671, name: "kind", sons: null};
NTI178754.node = NNI178754;
NTI178754.base = NTI177022;
NTI178710.base = NTI178754;
NTI180185.base = NTI178710;
var NNI180183 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elt", len: 0, typ: NTI178696, name: "elt", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180185, name: "generators", sons: null}]};
NTI180183.node = NNI180183;
NTI180183.base = NTI178731;
NTI182030.base = NTI178696;
var NNI182027 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI178696, name: "iter", sons: null}, 
{kind: 1, offset: "ifs", len: 0, typ: NTI182030, name: "ifs", sons: null}, 
{kind: 1, offset: "is_async", len: 0, typ: NTI177017, name: "is_async", sons: null}]};
NTI182027.node = NNI182027;
NTI182027.base = NTI178754;
NTI401732.base = NTI178710;
NTI401736.base = NTI178710;
NTI180764.base = NTI178696;
var NNI180763 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elts", len: 0, typ: NTI180764, name: "elts", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180763.node = NNI180763;
NTI180763.base = NTI178731;
NTI401495.base = NTI178696;
NTI180110.base = NTI178696;
NTI180112.base = NTI178696;
var NNI180109 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "keys", len: 0, typ: NTI180110, name: "keys", sons: null}, 
{kind: 1, offset: "values", len: 0, typ: NTI180112, name: "values", sons: null}]};
NTI180109.node = NNI180109;
NTI180109.base = NTI178731;
var NNI348047 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tokenNode", len: 0, typ: NTI208886, name: "tokenNode", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI348049, name: "children", sons: null}, 
{kind: 1, offset: "grammarNodeSeq", len: 0, typ: NTI348051, name: "grammarNodeSeq", sons: null}]};
NTI348047.node = NNI348047;
NTI348043.base = NTI348047;
NTI348049.base = NTI348043;
var NNI177027 = {kind: 1, offset: "value", len: 0, typ: NTI175083, name: "value", sons: null};
NTI177027.node = NNI177027;
NTI177027.base = NTI177022;
NTI177019.base = NTI177027;
var NNI180728 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI177019, name: "id", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180728.node = NNI180728;
NTI180728.base = NTI178731;
var NNI177030 = {kind: 1, offset: "value", len: 0, typ: NTI157214, name: "value", sons: null};
NTI177030.node = NNI177030;
NTI177030.base = NTI177022;
NTI177021.base = NTI177030;
var NNI180586 = {kind: 1, offset: "value", len: 0, typ: NTI177021, name: "value", sons: null};
NTI180586.node = NNI180586;
NTI180586.base = NTI178731;
NTI180475.base = NTI178696;
var NNI178683 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178683, name: "Keyword", len: 0, sons: null}}};
NTI178683.node = NNI178683;
var NNI178770 = {kind: 1, offset: "kind", len: 0, typ: NTI178683, name: "kind", sons: null};
NTI178770.node = NNI178770;
NTI178770.base = NTI177022;
NTI178718.base = NTI178770;
NTI180477.base = NTI178718;
var NNI180473 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fun", len: 0, typ: NTI178696, name: "fun", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI180475, name: "args", sons: null}, 
{kind: 1, offset: "keywords", len: 0, typ: NTI180477, name: "keywords", sons: null}]};
NTI180473.node = NNI180473;
NTI180473.base = NTI178731;
var NNI178629 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI178629, name: "Slice", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178629, name: "ExtSlice", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178629, name: "Index", len: 0, sons: null}}};
NTI178629.node = NNI178629;
var NNI178739 = {kind: 1, offset: "kind", len: 0, typ: NTI178629, name: "kind", sons: null};
NTI178739.node = NNI178739;
NTI178739.base = NTI177022;
NTI178700.base = NTI178739;
var NNI180656 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "slice", len: 0, typ: NTI178700, name: "slice", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180656.node = NNI180656;
NTI180656.base = NTI178731;
var NNI181095 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI181095.node = NNI181095;
NTI181095.base = NTI178739;
var NNI181023 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lower", len: 0, typ: NTI178696, name: "lower", sons: null}, 
{kind: 1, offset: "upper", len: 0, typ: NTI178696, name: "upper", sons: null}, 
{kind: 1, offset: "step", len: 0, typ: NTI178696, name: "step", sons: null}]};
NTI181023.node = NNI181023;
NTI181023.base = NTI178739;
var NNI180619 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "attr", len: 0, typ: NTI177019, name: "attr", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180619.node = NNI180619;
NTI180619.base = NTI178731;
var NNI178638 = {kind: 2, offset: 0, typ: null, name: null, len: 13, sons: {"0": {kind: 1, offset: 0, typ: NTI178638, name: "Add", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178638, name: "Sub", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178638, name: "Mult", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178638, name: "MatMult", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178638, name: "Div", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178638, name: "Mod", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178638, name: "Pow", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178638, name: "LShift", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178638, name: "RShift", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178638, name: "BitOr", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI178638, name: "BitXor", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI178638, name: "BitAnd", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI178638, name: "FloorDiv", len: 0, sons: null}}};
NTI178638.node = NNI178638;
var NNI178745 = {kind: 1, offset: "kind", len: 0, typ: NTI178638, name: "kind", sons: null};
NTI178745.node = NNI178745;
NTI178745.base = NTI177022;
NTI178704.base = NTI178745;
var NNI179965 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "left", len: 0, typ: NTI178696, name: "left", sons: null}, 
{kind: 1, offset: "op", len: 0, typ: NTI178704, name: "op", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI178696, name: "right", sons: null}]};
NTI179965.node = NNI179965;
NTI179965.base = NTI178731;
var NNI181376 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181376.node = NNI181376;
NTI181376.base = NTI178745;
var NNI181655 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181655.node = NNI181655;
NTI181655.base = NTI178748;
var NNI181686 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181686.node = NNI181686;
NTI181686.base = NTI178748;
var NNI181190 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181190.node = NNI181190;
NTI181190.base = NTI178745;
var NNI181221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181221.node = NNI181221;
NTI181221.base = NTI178745;
var NNI181252 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181252.node = NNI181252;
NTI181252.base = NTI178745;
var NNI181314 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181314.node = NNI181314;
NTI181314.base = NTI178745;
var NNI181345 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181345.node = NNI181345;
NTI181345.base = NTI178745;
var NNI181562 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181562.node = NNI181562;
NTI181562.base = NTI178745;
var NNI181779 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181779.node = NNI181779;
var NNI178659 = {kind: 2, offset: 0, typ: null, name: null, len: 10, sons: {"0": {kind: 1, offset: 0, typ: NTI178659, name: "Eq", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178659, name: "NotEq", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178659, name: "Lt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178659, name: "LtE", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178659, name: "Gt", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI178659, name: "GtE", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI178659, name: "Is", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI178659, name: "IsNot", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI178659, name: "In", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI178659, name: "NotIn", len: 0, sons: null}}};
NTI178659.node = NNI178659;
var NNI178751 = {kind: 1, offset: "kind", len: 0, typ: NTI178659, name: "kind", sons: null};
NTI178751.node = NNI178751;
NTI178751.base = NTI177022;
NTI181779.base = NTI178751;
var NNI181841 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181841.node = NNI181841;
NTI181841.base = NTI178751;
var NNI181717 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181717.node = NNI181717;
NTI181717.base = NTI178751;
var NNI181872 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181872.node = NNI181872;
NTI181872.base = NTI178751;
var NNI181810 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181810.node = NNI181810;
NTI181810.base = NTI178751;
var NNI181748 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181748.node = NNI181748;
NTI181748.base = NTI178751;
var NNI181965 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181965.node = NNI181965;
NTI181965.base = NTI178751;
var NNI181996 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181996.node = NNI181996;
NTI181996.base = NTI178751;
NTI178708.base = NTI178751;
NTI180434.base = NTI178708;
NTI180436.base = NTI178696;
var NNI180432 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "left", len: 0, typ: NTI178696, name: "left", sons: null}, 
{kind: 1, offset: "ops", len: 0, typ: NTI180434, name: "ops", sons: null}, 
{kind: 1, offset: "comparators", len: 0, typ: NTI180436, name: "comparators", sons: null}]};
NTI180432.node = NNI180432;
NTI180432.base = NTI178731;
var NNI181128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181128.node = NNI181128;
var NNI178634 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI178634, name: "And", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178634, name: "Or", len: 0, sons: null}}};
NTI178634.node = NNI178634;
var NNI178742 = {kind: 1, offset: "kind", len: 0, typ: NTI178634, name: "kind", sons: null};
NTI178742.node = NNI178742;
NTI178742.base = NTI177022;
NTI181128.base = NTI178742;
var NNI181159 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181159.node = NNI181159;
NTI181159.base = NTI178742;
NTI178702.base = NTI178742;
NTI179930.base = NTI178696;
var NNI179928 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "op", len: 0, typ: NTI178702, name: "op", sons: null}, 
{kind: 1, offset: "values", len: 0, typ: NTI179930, name: "values", sons: null}]};
NTI179928.node = NNI179928;
NTI179928.base = NTI178731;
NTI401440.base = NTI178696;
var NNI179802 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI179802.node = NNI179802;
NTI179802.base = NTI178726;
NTI179183.base = NTI178696;
var NNI179182 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "targets", len: 0, typ: NTI179183, name: "targets", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}]};
NTI179182.node = NNI179182;
NTI179182.base = NTI178726;
var NNI179835 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI179835.node = NNI179835;
NTI179835.base = NTI178726;
var NNI179866 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI179866.node = NNI179866;
NTI179866.base = NTI178726;
var NNI179897 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI179897.node = NNI179897;
NTI179897.base = NTI178726;
var NNI179114 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI179114.node = NNI179114;
NTI179114.base = NTI178726;
var NNI179541 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "exc", len: 0, typ: NTI178696, name: "exc", sons: null}, 
{kind: 1, offset: "cause", len: 0, typ: NTI178696, name: "cause", sons: null}]};
NTI179541.node = NNI179541;
NTI179541.base = NTI178726;
var NNI178686 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178686, name: "Alias", len: 0, sons: null}}};
NTI178686.node = NNI178686;
var NNI178773 = {kind: 1, offset: "kind", len: 0, typ: NTI178686, name: "kind", sons: null};
NTI178773.node = NNI178773;
NTI178773.base = NTI177022;
NTI178720.base = NTI178773;
NTI179659.base = NTI178720;
var NNI179658 = {kind: 1, offset: "names", len: 0, typ: NTI179659, name: "names", sons: null};
NTI179658.node = NNI179658;
NTI179658.base = NTI178726;
var NNI182228 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "asname", len: 0, typ: NTI177019, name: "asname", sons: null}]};
NTI182228.node = NNI182228;
NTI182228.base = NTI178773;
var NNI179623 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "msg", len: 0, typ: NTI178696, name: "msg", sons: null}]};
NTI179623.node = NNI179623;
NTI179623.base = NTI178726;
NTI401561.base = NTI178694;
NTI179424.base = NTI178694;
NTI179426.base = NTI178694;
var NNI179422 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179424, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179426, name: "orelse", sons: null}]};
NTI179422.node = NNI179422;
NTI179422.base = NTI178726;
NTI401647.base = NTI178694;
NTI179383.base = NTI178694;
NTI179385.base = NTI178694;
var NNI179381 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179383, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179385, name: "orelse", sons: null}]};
NTI179381.node = NNI179381;
NTI179381.base = NTI178726;
NTI179298.base = NTI178694;
NTI179300.base = NTI178694;
var NNI179295 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI178696, name: "iter", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179298, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179300, name: "orelse", sons: null}]};
NTI179295.node = NNI179295;
NTI179295.base = NTI178726;
NTI179577.base = NTI178694;
var NNI178674 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178674, name: "ExceptHandler", len: 0, sons: null}}};
NTI178674.node = NNI178674;
var NNI178757 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178674, name: "kind", sons: null}]};
NTI178757.node = NNI178757;
NTI178757.base = NTI177022;
NTI178712.base = NTI178757;
NTI179579.base = NTI178712;
NTI179581.base = NTI178694;
NTI179583.base = NTI178694;
var NNI179576 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "body", len: 0, typ: NTI179577, name: "body", sons: null}, 
{kind: 1, offset: "handlers", len: 0, typ: NTI179579, name: "handlers", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179581, name: "orelse", sons: null}, 
{kind: 1, offset: "finalbody", len: 0, typ: NTI179583, name: "finalbody", sons: null}]};
NTI179576.node = NNI179576;
NTI179576.base = NTI178726;
NTI182071.base = NTI178694;
var NNI182068 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "type", len: 0, typ: NTI178696, name: "type", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI182071, name: "body", sons: null}]};
NTI182068.node = NNI182068;
NTI182068.base = NTI178757;
var NNI178677 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178677, name: "Arguments", len: 0, sons: null}}};
NTI178677.node = NNI178677;
var NNI178762 = {kind: 1, offset: "kind", len: 0, typ: NTI178677, name: "kind", sons: null};
NTI178762.node = NNI178762;
NTI178762.base = NTI177022;
NTI178714.base = NTI178762;
NTI178978.base = NTI178694;
NTI178980.base = NTI178696;
var NNI178975 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI178714, name: "args", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI178978, name: "body", sons: null}, 
{kind: 1, offset: "decorator_list", len: 0, typ: NTI178980, name: "decorator_list", sons: null}, 
{kind: 1, offset: "returns", len: 0, typ: NTI178696, name: "returns", sons: null}]};
NTI178975.node = NNI178975;
NTI178975.base = NTI178726;
var NNI178680 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178680, name: "Arg", len: 0, sons: null}}};
NTI178680.node = NNI178680;
var NNI178765 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lineno", len: 0, typ: NTI177017, name: "lineno", sons: null}, 
{kind: 1, offset: "col_offset", len: 0, typ: NTI177017, name: "col_offset", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI178680, name: "kind", sons: null}]};
NTI178765.node = NNI178765;
NTI178765.base = NTI177022;
NTI178716.base = NTI178765;
NTI182108.base = NTI178716;
NTI182111.base = NTI178716;
NTI182113.base = NTI178696;
NTI182116.base = NTI178696;
var NNI182107 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "args", len: 0, typ: NTI182108, name: "args", sons: null}, 
{kind: 1, offset: "vararg", len: 0, typ: NTI178716, name: "vararg", sons: null}, 
{kind: 1, offset: "kwonlyargs", len: 0, typ: NTI182111, name: "kwonlyargs", sons: null}, 
{kind: 1, offset: "kw_defaults", len: 0, typ: NTI182113, name: "kw_defaults", sons: null}, 
{kind: 1, offset: "kwarg", len: 0, typ: NTI178716, name: "kwarg", sons: null}, 
{kind: 1, offset: "defaults", len: 0, typ: NTI182116, name: "defaults", sons: null}]};
NTI182107.node = NNI182107;
NTI182107.base = NTI178762;
var NNI182158 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "arg", len: 0, typ: NTI177019, name: "arg", sons: null}, 
{kind: 1, offset: "annotation", len: 0, typ: NTI178696, name: "annotation", sons: null}]};
NTI182158.node = NNI182158;
NTI182158.base = NTI178765;
NTI179067.base = NTI178696;
NTI179069.base = NTI178718;
NTI179071.base = NTI178694;
NTI179073.base = NTI178696;
var NNI179065 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "bases", len: 0, typ: NTI179067, name: "bases", sons: null}, 
{kind: 1, offset: "keywords", len: 0, typ: NTI179069, name: "keywords", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179071, name: "body", sons: null}, 
{kind: 1, offset: "decorator_list", len: 0, typ: NTI179073, name: "decorator_list", sons: null}]};
NTI179065.node = NNI179065;
NTI179065.base = NTI178726;
NTI403617.base = NTI178696;
NTI178873.base = NTI178694;
var NNI178872 = {kind: 1, offset: "body", len: 0, typ: NTI178873, name: "body", sons: null};
NTI178872.node = NNI178872;
NTI178872.base = NTI178723;
NTI177015.base = NTI177022;
NTI427175.base = NTI427141;
var NNI427192 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI175083, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI427192.node = NNI427192;
NTI427189.base = NTI427192;
var NNI427186 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI427189, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI427186.node = NNI427186;
var NNI427217 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI175083, name: "Field1", sons: null}]};
NTI427217.node = NNI427217;
NTI427214.base = NTI427217;
var NNI427211 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI427214, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI427211.node = NNI427211;
var NNI427248 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI175083, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI427133, name: "Field2", sons: null}]};
NTI427248.node = NNI427248;
NTI427245.base = NTI427248;
var NNI427242 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI427245, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI427242.node = NNI427242;
var NNI427173 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI427141, name: "parent", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI427175, name: "children", sons: null}, 
{kind: 1, offset: "argVars", len: 0, typ: NTI427186, name: "argVars", sons: null}, 
{kind: 1, offset: "declaredVars", len: 0, typ: NTI427211, name: "declaredVars", sons: null}, 
{kind: 1, offset: "usedVars", len: 0, typ: NTI427211, name: "usedVars", sons: null}, 
{kind: 1, offset: "scopes", len: 0, typ: NTI427242, name: "scopes", sons: null}, 
{kind: 1, offset: "names", len: 0, typ: NTI427186, name: "names", sons: null}, 
{kind: 1, offset: "localVars", len: 0, typ: NTI427186, name: "localVars", sons: null}, 
{kind: 1, offset: "cellVars", len: 0, typ: NTI427186, name: "cellVars", sons: null}, 
{kind: 1, offset: "freeVars", len: 0, typ: NTI427186, name: "freeVars", sons: null}]};
NTI427173.node = NNI427173;
NTI427141.base = NTI427173;
var NNI427158 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI177015, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI427141, name: "Field2", sons: null}]};
NTI427158.node = NNI427158;
NTI427155.base = NTI427158;
var NNI427152 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI427155, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI427152.node = NNI427152;
var NNI443401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI177015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI427141, name: "Field1", sons: null}]};
NTI443401.node = NNI443401;
var NNI493041 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "opCode", len: 0, typ: NTI459016, name: "opCode", sons: null}, 
{kind: 1, offset: "lineNo", len: 0, typ: NTI104, name: "lineNo", sons: null}]};
NTI493041.node = NNI493041;
NTI493041.base = NTI3808;
NTI493028.base = NTI493041;
NTI493055.base = NTI493028;
var NNI493034 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI493034, name: "Misc", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI493034, name: "While", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI493034, name: "For", len: 0, sons: null}}};
NTI493034.node = NNI493034;
var NNI493054 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "instrSeq", len: 0, typ: NTI493055, name: "instrSeq", sons: null}, 
{kind: 1, offset: "tp", len: 0, typ: NTI493034, name: "tp", sons: null}, 
{kind: 1, offset: "next", len: 0, typ: NTI493036, name: "next", sons: null}, 
{kind: 1, offset: "seenReturn", len: 0, typ: NTI130, name: "seenReturn", sons: null}, 
{kind: 1, offset: "offset", len: 0, typ: NTI104, name: "offset", sons: null}]};
NTI493054.node = NNI493054;
NTI493036.base = NTI493054;
var NNI493048 = {kind: 1, offset: "target", len: 0, typ: NTI493036, name: "target", sons: null};
NTI493048.node = NNI493048;
var NNI493045 = {kind: 1, offset: "opArg", len: 0, typ: NTI104, name: "opArg", sons: null};
NTI493045.node = NNI493045;
NTI493045.base = NTI493041;
NTI493048.base = NTI493045;
NTI493066.base = NTI157214;
NTI442283.base = NTI175083;
NTI442272.base = NTI175083;
NTI443327.base = NTI175083;
NTI443345.base = NTI175083;
NTI443363.base = NTI175083;
NTI443381.base = NTI175083;
var NNI496254 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI427133, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI496254.node = NNI496254;
NTI496262.base = NTI496254;
var NNI3886 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3886.node = NNI3886;
NTI3886.base = NTI3828;
NTI182673.base = NTI138;
NTI179733.base = NTI177019;
var NNI179732 = {kind: 1, offset: "names", len: 0, typ: NTI179733, name: "names", sons: null};
NTI179732.node = NNI179732;
NTI179732.base = NTI178726;
NTI179695.base = NTI178720;
var NNI179693 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "module", len: 0, typ: NTI177019, name: "module", sons: null}, 
{kind: 1, offset: "names", len: 0, typ: NTI179695, name: "names", sons: null}, 
{kind: 1, offset: "level", len: 0, typ: NTI177017, name: "level", sons: null}]};
NTI179693.node = NNI179693;
NTI179693.base = NTI178726;
var NNI178689 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI178689, name: "Withitem", len: 0, sons: null}}};
NTI178689.node = NNI178689;
var NNI178776 = {kind: 1, offset: "kind", len: 0, typ: NTI178689, name: "kind", sons: null};
NTI178776.node = NNI178776;
NTI178776.base = NTI177022;
NTI178722.base = NTI178776;
NTI179464.base = NTI178722;
NTI179466.base = NTI178694;
var NNI179463 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI179464, name: "items", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179466, name: "body", sons: null}]};
NTI179463.node = NNI179463;
NTI179463.base = NTI178726;
NTI179768.base = NTI177019;
var NNI179767 = {kind: 1, offset: "names", len: 0, typ: NTI179768, name: "names", sons: null};
NTI179767.node = NNI179767;
NTI179767.base = NTI178726;
var NNI180037 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "args", len: 0, typ: NTI178714, name: "args", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI178696, name: "body", sons: null}]};
NTI180037.node = NNI180037;
NTI180037.base = NTI178731;
var NNI179256 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "annotation", len: 0, typ: NTI178696, name: "annotation", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "simple", len: 0, typ: NTI177017, name: "simple", sons: null}]};
NTI179256.node = NNI179256;
NTI179256.base = NTI178726;
NTI179341.base = NTI178694;
NTI179343.base = NTI178694;
var NNI179338 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI178696, name: "iter", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179341, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI179343, name: "orelse", sons: null}]};
NTI179338.node = NNI179338;
NTI179338.base = NTI178726;
NTI179148.base = NTI178696;
var NNI179147 = {kind: 1, offset: "targets", len: 0, typ: NTI179148, name: "targets", sons: null};
NTI179147.node = NNI179147;
NTI179147.base = NTI178726;
NTI179503.base = NTI178722;
NTI179505.base = NTI178694;
var NNI179502 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "items", len: 0, typ: NTI179503, name: "items", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179505, name: "body", sons: null}]};
NTI179502.node = NNI179502;
NTI179502.base = NTI178726;
NTI180260.base = NTI178710;
var NNI180257 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "key", len: 0, typ: NTI178696, name: "key", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180260, name: "generators", sons: null}]};
NTI180257.node = NNI180257;
NTI180257.base = NTI178731;
NTI181061.base = NTI178700;
var NNI181060 = {kind: 1, offset: "dims", len: 0, typ: NTI181061, name: "dims", sons: null};
NTI181060.node = NNI181060;
NTI181060.base = NTI178739;
var NNI180868 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180868.node = NNI180868;
NTI180868.base = NTI178736;
NTI180222.base = NTI178710;
var NNI180220 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elt", len: 0, typ: NTI178696, name: "elt", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180222, name: "generators", sons: null}]};
NTI180220.node = NNI180220;
NTI180220.base = NTI178731;
NTI179023.base = NTI178694;
NTI179025.base = NTI178696;
var NNI179020 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI177019, name: "name", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI178714, name: "args", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI179023, name: "body", sons: null}, 
{kind: 1, offset: "decorator_list", len: 0, typ: NTI179025, name: "decorator_list", sons: null}, 
{kind: 1, offset: "returns", len: 0, typ: NTI178696, name: "returns", sons: null}]};
NTI179020.node = NNI179020;
NTI179020.base = NTI178726;
var NNI179219 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI178696, name: "target", sons: null}, 
{kind: 1, offset: "op", len: 0, typ: NTI178704, name: "op", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}]};
NTI179219.node = NNI179219;
NTI179219.base = NTI178726;
NTI178941.base = NTI178694;
var NNI178940 = {kind: 1, offset: "body", len: 0, typ: NTI178941, name: "body", sons: null};
NTI178940.node = NNI178940;
NTI178940.base = NTI178723;
var NNI181283 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181283.node = NNI181283;
NTI181283.base = NTI178745;
var NNI181438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181438.node = NNI181438;
NTI181438.base = NTI178745;
var NNI180693 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "ctx", len: 0, typ: NTI178698, name: "ctx", sons: null}]};
NTI180693.node = NNI180693;
NTI180693.base = NTI178731;
var NNI180366 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI180366.node = NNI180366;
NTI180366.base = NTI178731;
var NNI180072 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "test", len: 0, typ: NTI178696, name: "test", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI178696, name: "body", sons: null}, 
{kind: 1, offset: "orelse", len: 0, typ: NTI178696, name: "orelse", sons: null}]};
NTI180072.node = NNI180072;
NTI180072.base = NTI178731;
var NNI180930 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180930.node = NNI180930;
NTI180930.base = NTI178736;
var NNI181407 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181407.node = NNI181407;
NTI181407.base = NTI178745;
var NNI180399 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI180399.node = NNI180399;
NTI180399.base = NTI178731;
var NNI180992 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180992.node = NNI180992;
NTI180992.base = NTI178736;
var NNI178907 = {kind: 1, offset: "body", len: 0, typ: NTI178696, name: "body", sons: null};
NTI178907.node = NNI178907;
NTI178907.base = NTI178723;
var NNI180899 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180899.node = NNI180899;
NTI180899.base = NTI178736;
var NNI181469 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181469.node = NNI181469;
NTI181469.base = NTI178745;
var NNI180961 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI180961.node = NNI180961;
NTI180961.base = NTI178736;
NTI180149.base = NTI178696;
var NNI180148 = {kind: 1, offset: "elts", len: 0, typ: NTI180149, name: "elts", sons: null};
NTI180148.node = NNI180148;
NTI180148.base = NTI178731;
NTI180298.base = NTI178710;
var NNI180296 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "elt", len: 0, typ: NTI178696, name: "elt", sons: null}, 
{kind: 1, offset: "generators", len: 0, typ: NTI180298, name: "generators", sons: null}]};
NTI180296.node = NNI180296;
NTI180296.base = NTI178731;
NTI180552.base = NTI178696;
var NNI180551 = {kind: 1, offset: "values", len: 0, typ: NTI180552, name: "values", sons: null};
NTI180551.node = NNI180551;
NTI180551.base = NTI178731;
var NNI180514 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}, 
{kind: 1, offset: "conversion", len: 0, typ: NTI177017, name: "conversion", sons: null}, 
{kind: 1, offset: "format_spec", len: 0, typ: NTI178696, name: "format_spec", sons: null}]};
NTI180514.node = NNI180514;
NTI180514.base = NTI178731;
var NNI181934 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181934.node = NNI181934;
NTI181934.base = NTI178751;
var NNI181593 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181593.node = NNI181593;
NTI181593.base = NTI178748;
var NNI182193 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "arg", len: 0, typ: NTI177019, name: "arg", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null}]};
NTI182193.node = NNI182193;
NTI182193.base = NTI178770;
var NNI182263 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "context_expr", len: 0, typ: NTI178696, name: "context_expr", sons: null}, 
{kind: 1, offset: "optional_vars", len: 0, typ: NTI178696, name: "optional_vars", sons: null}]};
NTI182263.node = NNI182263;
NTI182263.base = NTI178776;
var NNI180333 = {kind: 1, offset: "value", len: 0, typ: NTI178696, name: "value", sons: null};
NTI180333.node = NNI180333;
NTI180333.base = NTI178731;
var NNI181500 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181500.node = NNI181500;
NTI181500.base = NTI178745;
var NNI181903 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181903.node = NNI181903;
NTI181903.base = NTI178751;
var NNI181531 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI181531.node = NNI181531;
NTI181531.base = NTI178745;
var NNI494876 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI459016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI487068, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI494876.node = NNI494876;
var NNI494850 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI459016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI487068, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI494850.node = NNI494850;
NTI500410.base = NTI493036;
NTI500314.base = NTI493036;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function divInt(a_16657, b_16658) {
		    if (b_16658 == 0) raiseDivByZero();
    if (b_16658 == -1 && a_16657 == 2147483647) raiseOverflow();
    return Math.trunc(a_16657 / b_16658);
  

	
}

function mulInt(a_16639, b_16640) {
		    var result = a_16639 * b_16640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function eqStrings(a_16454, b_16455) {
		    if (a_16454 == b_16455) return true;
    if (a_16454 === null && b_16455.length == 0) return true;
    if (b_16455 === null && a_16454.length == 0) return true;
    if ((!a_16454) || (!b_16455)) return false;
    var alen = a_16454.length;
    if (alen != b_16455.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16454[i] != b_16455[i]) return false;
    return true;
  

	
}
		var grammar_lines_212094 = nimCopy(null, [makeNimstrLit("# Grammar for Python"), [], makeNimstrLit("# NOTE WELL: You should also follow all the steps listed at"), makeNimstrLit("# https://devguide.python.org/grammar/"), [], makeNimstrLit("# Start symbols for the grammar:"), makeNimstrLit("#       single_input is a single interactive statement;"), makeNimstrLit("#       file_input is a module or sequence of commands read from an input file;"), makeNimstrLit("#       eval_input is the input for the eval() functions."), makeNimstrLit("# NB: compound_stmt in single_input is followed by extra NEWLINE!"), makeNimstrLit("single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE"), makeNimstrLit("file_input: (NEWLINE | stmt)* ENDMARKER"), makeNimstrLit("eval_input: testlist NEWLINE* ENDMARKER"), [], makeNimstrLit("decorator: \'@\' dotted_name [ \'(\' [arglist] \')\' ] NEWLINE"), makeNimstrLit("decorators: decorator+"), makeNimstrLit("decorated: decorators (classdef | funcdef | async_funcdef)"), [], makeNimstrLit("async_funcdef: \'async\' funcdef"), makeNimstrLit("funcdef: \'def\' NAME parameters [\'->\' test] \':\' suite"), [], makeNimstrLit("parameters: \'(\' [typedargslist] \')\'"), makeNimstrLit("typedargslist: (tfpdef [\'=\' test] (\',\' tfpdef [\'=\' test])* [\',\' ["), makeNimstrLit("        \'*\' [tfpdef] (\',\' tfpdef [\'=\' test])* [\',\' [\'**\' tfpdef [\',\']]]"), makeNimstrLit("      | \'**\' tfpdef [\',\']]]"), makeNimstrLit("  | \'*\' [tfpdef] (\',\' tfpdef [\'=\' test])* [\',\' [\'**\' tfpdef [\',\']]]"), makeNimstrLit("  | \'**\' tfpdef [\',\'])"), makeNimstrLit("tfpdef: NAME [\':\' test]"), makeNimstrLit("varargslist: (vfpdef [\'=\' test] (\',\' vfpdef [\'=\' test])* [\',\' ["), makeNimstrLit("        \'*\' [vfpdef] (\',\' vfpdef [\'=\' test])* [\',\' [\'**\' vfpdef [\',\']]]"), makeNimstrLit("      | \'**\' vfpdef [\',\']]]"), makeNimstrLit("  | \'*\' [vfpdef] (\',\' vfpdef [\'=\' test])* [\',\' [\'**\' vfpdef [\',\']]]"), makeNimstrLit("  | \'**\' vfpdef [\',\']"), makeNimstrLit(")"), makeNimstrLit("vfpdef: NAME"), [], makeNimstrLit("stmt: simple_stmt | compound_stmt"), makeNimstrLit("simple_stmt: small_stmt (\';\' small_stmt)* [\';\'] NEWLINE"), makeNimstrLit("small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |"), makeNimstrLit("             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)"), makeNimstrLit("expr_stmt: testlist_star_expr (annassign | augassign (yield_expr|testlist) |"), makeNimstrLit("                     (\'=\' (yield_expr|testlist_star_expr))*)"), makeNimstrLit("annassign: \':\' test [\'=\' test]"), makeNimstrLit("testlist_star_expr: (test|star_expr) (\',\' (test|star_expr))* [\',\']"), makeNimstrLit("augassign: (\'+=\' | \'-=\' | \'*=\' | \'@=\' | \'/=\' | \'%=\' | \'&=\' | \'|=\' | \'^=\' |"), makeNimstrLit("            \'<<=\' | \'>>=\' | \'**=\' | \'//=\')"), makeNimstrLit("# For normal and annotated assignments, additional restrictions enforced by the interpreter"), makeNimstrLit("del_stmt: \'del\' exprlist"), makeNimstrLit("pass_stmt: \'pass\'"), makeNimstrLit("flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt"), makeNimstrLit("break_stmt: \'break\'"), makeNimstrLit("continue_stmt: \'continue\'"), makeNimstrLit("return_stmt: \'return\' [testlist]"), makeNimstrLit("yield_stmt: yield_expr"), makeNimstrLit("raise_stmt: \'raise\' [test [\'from\' test]]"), makeNimstrLit("import_stmt: import_name | import_from"), makeNimstrLit("import_name: \'import\' dotted_as_names"), makeNimstrLit("# note below: the (\'.\' | \'...\') is necessary because \'...\' is tokenized as ELLIPSIS"), makeNimstrLit("import_from: (\'from\' ((\'.\' | \'...\')* dotted_name | (\'.\' | \'...\')+)"), makeNimstrLit("              \'import\' (\'*\' | \'(\' import_as_names \')\' | import_as_names))"), makeNimstrLit("import_as_name: NAME [\'as\' NAME]"), makeNimstrLit("dotted_as_name: dotted_name [\'as\' NAME]"), makeNimstrLit("import_as_names: import_as_name (\',\' import_as_name)* [\',\']"), makeNimstrLit("dotted_as_names: dotted_as_name (\',\' dotted_as_name)*"), makeNimstrLit("dotted_name: NAME (\'.\' NAME)*"), makeNimstrLit("global_stmt: \'global\' NAME (\',\' NAME)*"), makeNimstrLit("nonlocal_stmt: \'nonlocal\' NAME (\',\' NAME)*"), makeNimstrLit("assert_stmt: \'assert\' test [\',\' test]"), [], makeNimstrLit("compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt"), makeNimstrLit("async_stmt: \'async\' (funcdef | with_stmt | for_stmt)"), makeNimstrLit("if_stmt: \'if\' test \':\' suite (\'elif\' test \':\' suite)* [\'else\' \':\' suite]"), makeNimstrLit("while_stmt: \'while\' test \':\' suite [\'else\' \':\' suite]"), makeNimstrLit("for_stmt: \'for\' exprlist \'in\' testlist \':\' suite [\'else\' \':\' suite]"), makeNimstrLit("try_stmt: (\'try\' \':\' suite"), makeNimstrLit("           ((except_clause \':\' suite)+"), makeNimstrLit("            [\'else\' \':\' suite]"), makeNimstrLit("            [\'finally\' \':\' suite] |"), makeNimstrLit("           \'finally\' \':\' suite))"), makeNimstrLit("with_stmt: \'with\' with_item (\',\' with_item)*  \':\' suite"), makeNimstrLit("with_item: test [\'as\' expr]"), makeNimstrLit("# NB compile.c makes sure that the default except clause is last"), makeNimstrLit("except_clause: \'except\' [test [\'as\' NAME]]"), makeNimstrLit("suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT"), [], makeNimstrLit("test: or_test [\'if\' or_test \'else\' test] | lambdef"), makeNimstrLit("test_nocond: or_test | lambdef_nocond"), makeNimstrLit("lambdef: \'lambda\' [varargslist] \':\' test"), makeNimstrLit("lambdef_nocond: \'lambda\' [varargslist] \':\' test_nocond"), makeNimstrLit("or_test: and_test (\'or\' and_test)*"), makeNimstrLit("and_test: not_test (\'and\' not_test)*"), makeNimstrLit("not_test: \'not\' not_test | comparison"), makeNimstrLit("comparison: expr (comp_op expr)*"), makeNimstrLit("# <> isn\'t actually a valid comparison operator in Python. It\'s here for the"), makeNimstrLit("# sake of a __future__ import described in PEP 401 (which really works :-)"), makeNimstrLit("comp_op: \'<\'|\'>\'|\'==\'|\'>=\'|\'<=\'|\'<>\'|\'!=\'|\'in\'|\'not\' \'in\'|\'is\'|\'is\' \'not\'"), makeNimstrLit("star_expr: \'*\' expr"), makeNimstrLit("expr: xor_expr (\'|\' xor_expr)*"), makeNimstrLit("xor_expr: and_expr (\'^\' and_expr)*"), makeNimstrLit("and_expr: shift_expr (\'&\' shift_expr)*"), makeNimstrLit("shift_expr: arith_expr ((\'<<\'|\'>>\') arith_expr)*"), makeNimstrLit("arith_expr: term ((\'+\'|\'-\') term)*"), makeNimstrLit("term: factor ((\'*\'|\'@\'|\'/\'|\'%\'|\'//\') factor)*"), makeNimstrLit("factor: (\'+\'|\'-\'|\'~\') factor | power"), makeNimstrLit("power: atom_expr [\'**\' factor]"), makeNimstrLit("atom_expr: [\'await\'] atom trailer*"), makeNimstrLit("atom: (\'(\' [yield_expr|testlist_comp] \')\' |"), makeNimstrLit("       \'[\' [testlist_comp] \']\' |"), makeNimstrLit("       \'{\' [dictorsetmaker] \'}\' |"), makeNimstrLit("       NAME | NUMBER | STRING+ | \'...\' | \'None\' | \'True\' | \'False\')"), makeNimstrLit("testlist_comp: (test|star_expr) ( comp_for | (\',\' (test|star_expr))* [\',\'] )"), makeNimstrLit("trailer: \'(\' [arglist] \')\' | \'[\' subscriptlist \']\' | \'.\' NAME"), makeNimstrLit("subscriptlist: subscript (\',\' subscript)* [\',\']"), makeNimstrLit("subscript: test | [test] \':\' [test] [sliceop]"), makeNimstrLit("sliceop: \':\' [test]"), makeNimstrLit("exprlist: (expr|star_expr) (\',\' (expr|star_expr))* [\',\']"), makeNimstrLit("testlist: test (\',\' test)* [\',\']"), makeNimstrLit("dictorsetmaker: ( ((test \':\' test | \'**\' expr)"), makeNimstrLit("                   (comp_for | (\',\' (test \':\' test | \'**\' expr))* [\',\'])) |"), makeNimstrLit("                  ((test | star_expr)"), makeNimstrLit("                   (comp_for | (\',\' (test | star_expr))* [\',\'])) )"), [], makeNimstrLit("classdef: \'class\' NAME [\'(\' [arglist] \')\'] \':\' suite"), [], makeNimstrLit("arglist: argument (\',\' argument)*  [\',\']"), [], makeNimstrLit("# The reason that keywords are test nodes instead of NAME is that using NAME"), makeNimstrLit("# results in an ambiguity. ast.c makes sure it\'s a NAME."), makeNimstrLit("# \"test \'=\' test\" is really \"keyword \'=\' test\", but we have no such token."), makeNimstrLit("# These need to be in a single rule to avoid grammar that is ambiguous"), makeNimstrLit("# to our LL(1) parser. Even though \'test\' includes \'*expr\' in star_expr,"), makeNimstrLit("# we explicitly match \'*\' here, too, to give it proper precedence."), makeNimstrLit("# Illegal combinations and orderings are blocked in ast.c:"), makeNimstrLit("# multiple (test comp_for) arguments are blocked; keyword unpackings"), makeNimstrLit("# that precede iterable unpackings are blocked; etc."), makeNimstrLit("argument: ( test [comp_for] |"), makeNimstrLit("            test \'=\' test |"), makeNimstrLit("            \'**\' test |"), makeNimstrLit("            \'*\' test )"), [], makeNimstrLit("comp_iter: comp_for | comp_if"), makeNimstrLit("sync_comp_for: \'for\' exprlist \'in\' or_test [comp_iter]"), makeNimstrLit("comp_for: [\'async\'] sync_comp_for"), makeNimstrLit("comp_if: \'if\' test_nocond [comp_iter]"), [], makeNimstrLit("# not used in grammar, but may appear in \"node\" passed from Parser to Compiler"), makeNimstrLit("encoding_decl: NAME"), [], makeNimstrLit("yield_expr: \'yield\' [yield_arg]"), makeNimstrLit("yield_arg: \'from\' test | testlist"), []], NTI133824);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}

function nimMax(a_16958, b_16959) {
		var Tmp1;

	var result_16960 = 0;

	BeforeRet: do {
		if ((b_16959 <= a_16958)) {
		Tmp1 = a_16958;
		}
		else {
		Tmp1 = b_16959;
		}
		
		result_16960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16960;

}
var ConstSet2 = setConstr(32, 9, 11, 13, 10, 12);

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}
var ConstSet3 = setConstr([97, 122], [65, 90], 95);

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}

function genericReset(x_17690, ti_17691) {
	var result_17692 = null;

		result_17692 = null;
		switch (ti_17691.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (is_fat_pointer_17201(ti_17691)) {
			        result_17692 = [null, 0];
      
			}
			
			break;
		case 19:
			      result_17692 = {};
    
			break;
		case 18:
		case 17:
			if ((ti_17691.kind == 17)) {
			result_17692 = {m_type: ti_17691};
			}
			else {
				result_17692 = {};
			}
			
			break;
		case 24:
		case 27:
			      result_17692 = [];
    
			break;
		case 4:
		case 16:
			      result_17692 = new Array(x_17690.length);
      for (var i = 0; i < x_17690.length; ++i) {
        result_17692[i] = genericReset(x_17690[i], ti_17691.base);
      }
    
			break;
		default: 
			break;
		}

	return result_17692;

}

function reprEnum(e_18481, typ_18482) {
	var result_18483 = null;

	var F={procname:"system.reprEnum",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/reprjs.nim",line:0};
	framePtr = F;
		if (!(is_undefined_18485(typ_18482.node.sons[e_18481]))) {
		F.line = 38;
		result_18483 = nimCopy(null, makeNimstrLit(typ_18482.node.sons[e_18481].name), NTI138);
		}
		else {
			F.line = 40;
			result_18483 = nimCopy(null, (cstrToNimstr((e_18481)+"")).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}
		
	framePtr = F.prev;

	return result_18483;

}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}

function SetPlus(a_16382, b_16383) {
		    var result = {};
    for (var elem in a_16382) { result[elem] = true; }
    for (var elem in b_16383) { result[elem] = true; }
    return result;
  

	
}

function SetCard(a_16293) {
		    var result = 0;
    for (var elem in a_16293) { ++result; }
    return result;
  

	
}

function isObj(obj_17838, subclass_17839) {
	var result_17840 = false;

	BeforeRet: do {
		var x_17841 = obj_17838;
		if ((x_17841 == subclass_17839)) {
		result_17840 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_17841 == subclass_17839))) break L2;
					if ((x_17841 == null)) {
					result_17840 = false;
					break BeforeRet;
					}
					
					x_17841 = x_17841.base;
				}
		} while(false);
		result_17840 = true;
		break BeforeRet;
	} while (false);

	return result_17840;

}
var ConstSet4 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet5 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr(101, 69);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);

function nimParseBiggestFloat(s_17938, number_17940, number_17940_Idx, start_17941) {
	var result_17943 = 0;

	var F={procname:"system.nimParseBiggestFloat",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/jssys.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 673;
		var esign_17944 = 1.0000000000000000e+00;
		F.line = 674;
		var sign_17945 = 1.0000000000000000e+00;
		F.line = 675;
		var i_17946 = start_17941;
		F.line = 676;
		var exponent_17947 = 0;
		F.line = 677;
		var flags_17948 = 0;
		F.line = 678;
		number_17940[number_17940_Idx] = 0.0;
		if ((s_17938[i_17946] == 43)) {
		F.line = 679;
		i_17946 += 1;
		}
		else {
		if ((s_17938[i_17946] == 45)) {
		F.line = 681;
		sign_17945 = -1.0000000000000000e+00;
		F.line = 682;
		i_17946 += 1;
		}
		}
		if (((s_17938[i_17946] == 78) || (s_17938[i_17946] == 110))) {
		if (((s_17938[(i_17946 + 1)] == 65) || (s_17938[(i_17946 + 1)] == 97))) {
		if (((s_17938[(i_17946 + 2)] == 78) || (s_17938[(i_17946 + 2)] == 110))) {
		if (!((ConstSet4[s_17938[(i_17946 + 3)]] != undefined))) {
		F.line = 687;
		number_17940[number_17940_Idx] = NaN;
		F.line = 688;
		result_17943 = ((i_17946 + 3) - start_17941);
		break BeforeRet;
		}
		
		}
		
		}
		
		F.line = 689;
		result_17943 = 0;
		break BeforeRet;
		}
		
		if (((s_17938[i_17946] == 73) || (s_17938[i_17946] == 105))) {
		if (((s_17938[(i_17946 + 1)] == 78) || (s_17938[(i_17946 + 1)] == 110))) {
		if (((s_17938[(i_17946 + 2)] == 70) || (s_17938[(i_17946 + 2)] == 102))) {
		if (!((ConstSet5[s_17938[(i_17946 + 3)]] != undefined))) {
		F.line = 694;
		number_17940[number_17940_Idx] = (Infinity * sign_17945);
		F.line = 695;
		result_17943 = ((i_17946 + 3) - start_17941);
		break BeforeRet;
		}
		
		}
		
		}
		
		F.line = 696;
		result_17943 = 0;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 697;
				L2: while (true) {
				if (!(ConstSet6[s_17938[i_17946]] != undefined)) break L2;
					F.line = 699;
					flags_17948 = (flags_17948 | 1);
					F.line = 700;
					number_17940[number_17940_Idx] = ((number_17940[number_17940_Idx] * 1.0000000000000000e+01) + (s_17938[i_17946] - 48));
					F.line = 701;
					i_17946 += 1;
					L3: do {
						F.line = 702;
							L4: while (true) {
							if (!(s_17938[i_17946] == 95)) break L4;
								F.line = 702;
								i_17946 += 1;
							}
					} while(false);
				}
		} while(false);
		if ((s_17938[i_17946] == 46)) {
		F.line = 705;
		var hd_18027 = 1.0000000000000000e+00;
		F.line = 706;
		i_17946 += 1;
		L5: do {
			F.line = 707;
				L6: while (true) {
				if (!(ConstSet7[s_17938[i_17946]] != undefined)) break L6;
					F.line = 709;
					flags_17948 = (flags_17948 | 2);
					F.line = 710;
					number_17940[number_17940_Idx] = ((number_17940[number_17940_Idx] * 1.0000000000000000e+01) + (s_17938[i_17946] - 48));
					F.line = 711;
					hd_18027 = (hd_18027 * 1.0000000000000000e+01);
					F.line = 712;
					i_17946 += 1;
					L7: do {
						F.line = 713;
							L8: while (true) {
							if (!(s_17938[i_17946] == 95)) break L8;
								F.line = 713;
								i_17946 += 1;
							}
					} while(false);
				}
		} while(false);
		F.line = 714;
		number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] / hd_18027);
		}
		
		if ((flags_17948 == 0)) {
		F.line = 716;
		result_17943 = 0;
		break BeforeRet;
		}
		
		if ((ConstSet8[s_17938[i_17946]] != undefined)) {
		F.line = 719;
		i_17946 += 1;
		if ((s_17938[i_17946] == 43)) {
		F.line = 721;
		i_17946 += 1;
		}
		else {
		if ((s_17938[i_17946] == 45)) {
		F.line = 723;
		esign_17944 = -1.0000000000000000e+00;
		F.line = 724;
		i_17946 += 1;
		}
		}
		if (!((ConstSet9[s_17938[i_17946]] != undefined))) {
		F.line = 726;
		result_17943 = 0;
		break BeforeRet;
		}
		
		L9: do {
			F.line = 727;
				L10: while (true) {
				if (!(ConstSet10[s_17938[i_17946]] != undefined)) break L10;
					F.line = 728;
					exponent_17947 = (((exponent_17947 * 10) + s_17938[i_17946]) - 48);
					F.line = 729;
					i_17946 += 1;
					L11: do {
						F.line = 730;
							L12: while (true) {
							if (!(s_17938[i_17946] == 95)) break L12;
								F.line = 730;
								i_17946 += 1;
							}
					} while(false);
				}
		} while(false);
		}
		
		F.line = 732;
		var hd_18165 = ten_to_the_power_of_17904(exponent_17947);
		if ((0.0 < esign_17944)) {
		F.line = 733;
		number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] * hd_18165);
		}
		else {
			F.line = 734;
			number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] / hd_18165);
		}
		
		F.line = 736;
		number_17940[number_17940_Idx] = (number_17940[number_17940_Idx] * sign_17945);
		F.line = 737;
		result_17943 = (i_17946 - start_17941);
	} while (false);
	framePtr = F.prev;

	return result_17943;

}

function negInt(a_16783) {
	var result_16784 = 0;

		result_16784 = (a_16783 * -1);

	return result_16784;

}
var ConstSet11 = setConstr([48, 57]);
var ConstSet12 = setConstr([48, 57]);

function reraiseException() {
		if ((lastJSError == null)) {
		var e_16033 = null;
		e_16033 = {m_type: NTI3866, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16033.message = nimCopy(null, makeNimstrLit("no exception to reraise"), NTI138);
		e_16033.parent = null;
		raiseException(e_16033, "ReraiseError");
		}
		else {
			if ((excHandler == 0)) {
			if (is_nim_exception_15277()) {
			unhandledException(lastJSError);
			}
			
			}
			
			throw lastJSError;
		}
		

	
}
var ConstSet13 = setConstr(60, 62, 94);
var ConstSet14 = setConstr(60, 62, 94);
var ConstSet15 = setConstr(45, 43, 32);
var ConstSet16 = setConstr([48, 57]);
var ConstSet17 = setConstr([48, 57]);
var ConstSet18 = setConstr([48, 57]);
var ConstSet19 = setConstr([65, 90], [97, 122]);

function modInt(a_16675, b_16676) {
		    if (b_16676 == 0) raiseDivByZero();
    if (b_16676 == -1 && a_16675 == 2147483647) raiseOverflow();
    return Math.trunc(a_16675 % b_16676);
  

	
}
				var magic_names_157558 = nimCopy(null, [makeNimstrLit("__add__"), makeNimstrLit("__sub__"), makeNimstrLit("__mul__"), makeNimstrLit("__truediv__"), makeNimstrLit("__floordiv__"), makeNimstrLit("__mod__"), makeNimstrLit("__pow__"), makeNimstrLit("__not__"), makeNimstrLit("__negative__"), makeNimstrLit("__positive__"), makeNimstrLit("__abs__"), makeNimstrLit("__index__"), makeNimstrLit("__bool__"), makeNimstrLit("__and__"), makeNimstrLit("__xor__"), makeNimstrLit("__or__"), makeNimstrLit("__lt__"), makeNimstrLit("__le__"), makeNimstrLit("__eq__"), makeNimstrLit("__ne__"), makeNimstrLit("__gt__"), makeNimstrLit("__ge__"), makeNimstrLit("__contains__"), makeNimstrLit("__len__"), makeNimstrLit("__str__"), makeNimstrLit("__repr__"), makeNimstrLit("__new__"), makeNimstrLit("__init__"), makeNimstrLit("__getattr__"), makeNimstrLit("__setattr__"), makeNimstrLit("__hash__"), makeNimstrLit("__call__"), makeNimstrLit("__getitem__"), makeNimstrLit("__setitem__"), makeNimstrLit("__get__"), makeNimstrLit("__set__"), makeNimstrLit("__iter__"), makeNimstrLit("__iternext__")], NTI157559);
		var types_offsets_277053 = nimCopy(null, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 34, 35, 36, 37, 38, 39, 34, 34, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 64, 64, 65, 66, 64, 64, 64, 64, 67, 68, 64, 64, 64, 64, 64, 64, 64, 64, 69, 70, 71, 72, 73, 64, 64, 64, 74, 75, 76, 77, 78, 79, 64, 64, 80, 81, 34, 34, 34, 34, 34, 34, 82, 34, 34, 34, 34, 34, 83, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 84, 85, 86, 87, 34, 34, 34, 88, 34, 34, 34, 89, 90, 34, 34, 34, 34, 34, 91, 34, 34, 34, 92, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 93, 94, 95, 34, 34, 34, 34, 34, 34, 96, 97, 34, 34, 34, 34, 34, 34, 34, 34, 98, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 99, 34, 34, 34, 34, 34, 34, 34, 34, 100, 34, 34, 34, 34, 96, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 99, 34, 34, 34, 34, 34, 34, 101, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 102, 103, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 104, 105, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 106, 34, 34, 34, 34, 34, 34, 34, 34, 34, 107, 34, 34, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 120, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 121, 122, 123, 124, 125, 126, 34, 34, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 64, 137, 138, 139, 140, 141, 142, 64, 34, 34, 143, 64, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 64, 155, 64, 156, 64, 157, 158, 159, 160, 161, 162, 163, 64, 164, 165, 64, 166, 167, 168, 169, 64, 170, 171, 64, 64, 172, 173, 64, 64, 174, 175, 176, 177, 64, 178, 64, 64, 34, 34, 34, 34, 34, 34, 34, 179, 180, 34, 181, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 34, 34, 34, 34, 34, 34, 182, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 34, 34, 183, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 34, 34, 184, 185, 186, 187, 64, 64, 64, 64, 188, 189, 190, 191, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 192, 34, 34, 34, 34, 34, 193, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 34, 194, 34, 34, 195, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 196, 197, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 198, 199, 200, 201, 202, 64, 203, 204, 205, 206, 207, 208, 209, 210, 64, 64, 64, 64, 211, 212, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 213, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 214, 215, 64, 64, 64, 64, 64, 216, 217, 64, 64, 218, 219, 64, 64, 64, 64, 220, 221, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 222, 223, 224, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 82, 225, 34, 226, 227, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 228, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 229, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 230, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 231, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 232, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 233, 34, 234, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 235, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 236, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 228, 34, 34, 237, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 34, 106, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], NTI277054);
		var types_indices_277234 = nimCopy(null, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 5, 0, 0, 0, 6, 5, 0, 7, 7, 7, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 5, 5, 3, 3, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 3, 3, 3, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 5, 3, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 3, 5, 3, 3, 5, 5, 4, 3, 5, 5, 5, 4, 4, 4, 4, 3, 8, 5, 3, 8, 5, 3, 8, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 8, 5, 3, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3, 5, 3, 3, 5, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 4, 0, 3, 5, 0, 0, 5, 5, 5, 5, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 0, 3, 0, 3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 3, 3, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 3, 5, 0, 3, 5, 3, 3, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 4, 0, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 0, 4, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 3, 0, 3, 0, 3, 0, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 5, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 5, 3, 3, 3, 5, 5, 3, 3, 3, 5, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 0, 5, 3, 3, 3, 3, 5, 4, 4, 4, 4, 5, 0, 0, 5, 5, 3, 3, 0, 0, 0, 0, 0, 3, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 3, 5, 9, 9, 9, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 3, 5, 3, 3, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 4, 4, 4, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 9, 9, 9, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 4, 4, 9, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 0, 0, 3, 5, 3, 5, 4, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 5, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 0, 3, 3, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 5, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], NTI277235);
		var types_data_277237 = nimCopy(null, [0, 64, 129, 176, 128, 168, 2, 4, 160, 132, 180, 172], NTI277238);
		var nums_279349 = nimCopy(null, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], NTI279086);
				var tolower_ranges_50536 = nimCopy(null, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 398, 399, 702, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1025, 1036, 580, 1038, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 548, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 8544, 8559, 516, 9398, 9423, 526, 65313, 65338, 532], NTI50537);
				var tolower_singlets_50648 = nimCopy(null, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 416, 501, 418, 501, 420, 501, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 902, 538, 908, 564, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1217, 501, 1219, 501, 1223, 501, 1227, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1272, 501, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491], NTI50649);
				var toupper_ranges_49743 = nimCopy(null, [97, 122, 468, 224, 246, 468, 248, 254, 468, 598, 599, 295, 600, 601, 298, 650, 651, 283, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1105, 1116, 420, 1118, 1119, 420, 1377, 1414, 452, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 8560, 8575, 484, 9424, 9449, 474, 65345, 65370, 468], NTI49744);
				var toupper_singlets_49852 = nimCopy(null, [255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 409, 499, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 595, 290, 596, 294, 603, 297, 608, 295, 611, 293, 616, 291, 617, 289, 623, 289, 626, 287, 643, 282, 648, 282, 658, 281, 940, 462, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1224, 499, 1228, 499, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1273, 499, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8131, 509, 8165, 507, 8179, 509], NTI49853);
		var props_offsets_260203 = nimCopy(null, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 41, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 101, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 102, 103, 41, 41, 41, 41, 41, 41, 41, 41, 104, 41, 41, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 122, 123, 124, 125, 126, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 137, 41, 41, 144, 137, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 156, 158, 156, 159, 160, 161, 162, 163, 164, 165, 137, 166, 167, 137, 168, 169, 170, 171, 137, 172, 173, 137, 137, 174, 175, 137, 137, 176, 177, 178, 179, 137, 180, 137, 137, 41, 41, 41, 41, 41, 41, 41, 181, 182, 41, 183, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 41, 41, 41, 41, 184, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 185, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 186, 187, 188, 189, 137, 137, 137, 137, 190, 191, 192, 193, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 194, 41, 41, 41, 41, 41, 195, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 196, 41, 41, 197, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 198, 199, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 78, 200, 201, 202, 203, 204, 205, 137, 206, 207, 208, 209, 210, 211, 212, 213, 78, 78, 78, 78, 214, 215, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 216, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 217, 218, 219, 156, 156, 156, 156, 156, 220, 221, 156, 156, 222, 223, 156, 156, 224, 225, 226, 227, 228, 137, 72, 229, 72, 72, 72, 72, 72, 230, 231, 232, 233, 234, 235, 236, 237, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 239, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 240, 41, 241, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 242, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 243, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 121, 121, 121, 121, 244, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 245, 246, 247, 248, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 238, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 249, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 249], NTI260204);
		var props_indices_268070 = nimCopy(null, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 5, 5, 6, 7, 6, 5, 5, 8, 9, 5, 10, 11, 12, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 5, 14, 14, 14, 5, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 8, 5, 9, 16, 17, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 8, 14, 9, 14, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 5, 7, 7, 7, 7, 20, 5, 21, 20, 22, 23, 14, 24, 20, 21, 25, 26, 27, 27, 21, 28, 5, 5, 21, 27, 22, 29, 30, 30, 30, 5, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 14, 15, 31, 31, 31, 31, 31, 15, 18, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 14, 18, 32, 32, 32, 32, 32, 18, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 18, 33, 28, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 33, 28, 15, 18, 31, 32, 31, 32, 31, 32, 28, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 31, 32, 31, 32, 31, 32, 28, 18, 15, 15, 18, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 15, 15, 15, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 18, 15, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 15, 18, 15, 18, 18, 15, 18, 15, 31, 32, 15, 15, 15, 18, 15, 18, 15, 15, 18, 18, 34, 15, 18, 18, 18, 34, 34, 34, 34, 33, 35, 28, 33, 35, 28, 33, 35, 28, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 33, 35, 28, 31, 32, 15, 15, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 18, 18, 18, 18, 18, 15, 15, 18, 15, 15, 18, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 38, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 16, 16, 16, 16, 16, 16, 21, 21, 21, 21, 21, 21, 16, 16, 36, 36, 36, 36, 36, 16, 16, 16, 16, 16, 16, 16, 37, 16, 38, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 40, 40, 39, 40, 39, 40, 39, 39, 41, 42, 42, 42, 42, 41, 43, 42, 42, 42, 42, 42, 44, 44, 45, 45, 45, 45, 46, 46, 42, 42, 42, 42, 45, 45, 42, 45, 45, 42, 42, 47, 47, 47, 47, 48, 42, 42, 42, 42, 40, 40, 40, 49, 49, 39, 49, 49, 50, 40, 42, 42, 42, 40, 40, 40, 42, 42, 51, 40, 40, 40, 42, 42, 42, 42, 40, 41, 42, 42, 40, 52, 53, 53, 52, 53, 53, 52, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 15, 18, 15, 18, 54, 16, 15, 18, 55, 55, 36, 18, 18, 18, 56, 15, 55, 55, 55, 55, 21, 57, 31, 56, 31, 31, 31, 55, 31, 55, 31, 31, 32, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 15, 15, 15, 15, 15, 15, 31, 31, 32, 32, 32, 32, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 32, 32, 32, 15, 28, 28, 33, 58, 58, 28, 28, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 28, 28, 28, 18, 33, 28, 14, 15, 18, 33, 15, 18, 18, 15, 15, 15, 31, 31, 15, 31, 15, 15, 15, 31, 15, 15, 15, 15, 31, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 18, 32, 18, 18, 18, 32, 18, 18, 18, 18, 32, 32, 32, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 59, 40, 40, 40, 40, 40, 60, 60, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 38, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 28, 18, 61, 62, 55, 55, 20, 20, 7, 63, 42, 40, 40, 40, 40, 42, 40, 40, 40, 64, 42, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 64, 65, 40, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 81, 40, 42, 81, 74, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 84, 84, 84, 84, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 85, 85, 85, 85, 85, 85, 14, 14, 86, 6, 6, 87, 11, 88, 20, 20, 40, 40, 40, 40, 40, 40, 40, 40, 89, 90, 91, 88, 92, 93, 88, 88, 94, 94, 95, 95, 95, 95, 95, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 96, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 97, 98, 99, 89, 90, 91, 100, 101, 39, 39, 45, 42, 40, 40, 40, 40, 40, 42, 40, 40, 42, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 6, 103, 103, 88, 94, 94, 104, 94, 94, 94, 94, 105, 105, 105, 105, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 94, 95, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 88, 94, 40, 40, 40, 40, 40, 40, 40, 85, 20, 40, 40, 40, 40, 42, 40, 96, 96, 40, 40, 20, 42, 40, 40, 42, 94, 94, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94, 94, 94, 106, 106, 94, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 93, 92, 94, 107, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 40, 42, 40, 40, 42, 40, 40, 42, 42, 42, 40, 42, 42, 40, 42, 40, 40, 40, 42, 40, 42, 40, 42, 40, 42, 40, 40, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 40, 40, 40, 42, 40, 109, 109, 20, 5, 5, 5, 109, 63, 63, 42, 110, 110, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 109, 40, 40, 40, 40, 40, 40, 40, 40, 40, 109, 40, 40, 40, 109, 40, 40, 40, 40, 40, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 42, 42, 42, 63, 63, 81, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 93, 94, 94, 94, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 42, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 85, 42, 40, 40, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 97, 98, 99, 40, 40, 40, 42, 40, 40, 42, 42, 40, 40, 40, 40, 40, 51, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 112, 34, 34, 34, 34, 34, 51, 111, 113, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 114, 111, 111, 34, 40, 42, 40, 40, 51, 51, 51, 115, 115, 115, 115, 115, 115, 115, 115, 34, 34, 51, 51, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 55, 34, 34, 34, 34, 55, 55, 117, 34, 118, 111, 111, 51, 51, 51, 51, 55, 55, 111, 111, 55, 55, 119, 119, 114, 34, 55, 55, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 115, 115, 55, 115, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 7, 7, 120, 120, 120, 120, 120, 120, 59, 7, 34, 61, 40, 55, 55, 51, 51, 111, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 115, 55, 34, 115, 55, 34, 34, 55, 55, 117, 55, 111, 111, 111, 51, 51, 55, 55, 55, 55, 51, 51, 55, 55, 51, 51, 114, 55, 55, 55, 51, 55, 55, 55, 55, 55, 55, 55, 115, 115, 115, 34, 55, 115, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 51, 51, 34, 34, 34, 51, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 111, 111, 111, 51, 51, 51, 51, 51, 55, 51, 51, 111, 55, 111, 111, 114, 55, 55, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 7, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 55, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 118, 51, 111, 51, 51, 51, 51, 55, 55, 111, 119, 55, 55, 119, 119, 114, 55, 55, 55, 55, 55, 55, 55, 55, 121, 118, 55, 55, 55, 55, 115, 115, 55, 34, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 59, 34, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 34, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 55, 34, 34, 112, 34, 55, 55, 55, 34, 34, 55, 34, 55, 34, 34, 55, 55, 55, 34, 34, 55, 55, 55, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 118, 111, 51, 111, 111, 55, 55, 55, 111, 111, 111, 55, 119, 119, 119, 114, 55, 55, 34, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 20, 20, 20, 20, 20, 20, 7, 20, 55, 55, 55, 55, 55, 51, 111, 111, 111, 51, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 51, 51, 51, 111, 111, 111, 111, 55, 51, 51, 122, 55, 51, 51, 51, 114, 55, 55, 55, 55, 55, 55, 55, 123, 124, 55, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 59, 34, 51, 111, 111, 61, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 111, 126, 119, 111, 118, 111, 111, 55, 126, 119, 119, 55, 119, 119, 51, 114, 55, 55, 55, 55, 55, 55, 55, 118, 118, 55, 55, 55, 55, 55, 55, 55, 34, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 114, 114, 34, 118, 111, 111, 51, 51, 51, 51, 55, 111, 111, 111, 55, 119, 119, 119, 114, 34, 59, 55, 55, 55, 55, 34, 34, 34, 118, 120, 120, 120, 120, 120, 120, 120, 34, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 59, 34, 34, 34, 34, 34, 34, 55, 55, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 127, 55, 55, 55, 55, 118, 111, 111, 51, 51, 51, 55, 51, 55, 111, 111, 119, 111, 119, 119, 119, 118, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 111, 111, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 128, 128, 114, 55, 55, 55, 55, 7, 34, 34, 34, 34, 34, 34, 38, 51, 129, 129, 129, 129, 51, 51, 51, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 55, 34, 55, 55, 34, 34, 55, 34, 55, 55, 34, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 55, 34, 55, 55, 34, 34, 55, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 130, 130, 55, 51, 51, 34, 55, 55, 34, 34, 34, 34, 34, 55, 38, 55, 131, 131, 131, 131, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 22, 22, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 59, 59, 59, 61, 61, 61, 61, 61, 61, 61, 61, 132, 61, 61, 61, 61, 61, 61, 59, 61, 59, 59, 59, 42, 42, 59, 59, 59, 59, 59, 59, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 59, 42, 59, 42, 59, 133, 8, 9, 8, 9, 111, 111, 34, 34, 34, 115, 34, 34, 34, 34, 55, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 115, 34, 34, 34, 55, 55, 55, 55, 134, 135, 136, 137, 136, 136, 138, 136, 138, 135, 135, 135, 135, 51, 111, 135, 136, 40, 40, 114, 61, 40, 40, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 136, 51, 51, 51, 51, 55, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 136, 51, 51, 51, 55, 59, 59, 59, 59, 59, 59, 59, 59, 42, 59, 59, 59, 59, 59, 59, 55, 59, 59, 61, 61, 61, 61, 61, 59, 59, 59, 59, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 111, 111, 51, 121, 51, 51, 111, 51, 51, 51, 51, 51, 117, 111, 114, 114, 111, 111, 51, 51, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 111, 111, 51, 51, 34, 34, 34, 34, 51, 51, 51, 34, 111, 111, 111, 34, 34, 111, 111, 111, 111, 111, 111, 111, 34, 34, 34, 51, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 51, 51, 111, 111, 111, 111, 111, 111, 42, 34, 111, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 111, 111, 111, 51, 59, 59, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 55, 55, 55, 55, 55, 15, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 36, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 40, 40, 40, 61, 61, 61, 61, 61, 61, 61, 61, 61, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 18, 18, 18, 18, 18, 18, 55, 55, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 4, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 8, 9, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 61, 61, 140, 140, 140, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 51, 51, 114, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 114, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 111, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 111, 111, 111, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 114, 51, 61, 61, 61, 38, 61, 61, 61, 7, 34, 40, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 62, 5, 5, 5, 5, 51, 51, 51, 24, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 65, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 51, 51, 51, 111, 111, 111, 111, 51, 51, 111, 111, 111, 55, 55, 55, 55, 111, 111, 51, 111, 111, 111, 111, 111, 111, 64, 40, 42, 55, 55, 55, 55, 20, 55, 55, 55, 5, 5, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 42, 111, 111, 51, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 111, 51, 51, 51, 51, 51, 51, 51, 55, 114, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 111, 111, 51, 51, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 42, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 61, 61, 61, 38, 61, 61, 61, 61, 61, 61, 55, 55, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 60, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 111, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 34, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 118, 51, 51, 51, 51, 51, 119, 51, 119, 111, 111, 119, 119, 51, 119, 141, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 61, 61, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 42, 40, 40, 40, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 51, 51, 111, 111, 51, 51, 141, 114, 51, 51, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 111, 51, 51, 111, 111, 111, 51, 111, 51, 51, 51, 141, 141, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 51, 117, 55, 55, 55, 61, 61, 61, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 15, 15, 15, 61, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 61, 47, 42, 42, 42, 42, 42, 40, 40, 42, 42, 42, 42, 40, 111, 47, 47, 47, 47, 47, 47, 47, 34, 34, 34, 34, 42, 34, 34, 34, 34, 111, 111, 40, 34, 34, 111, 40, 40, 55, 55, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40, 40, 42, 40, 40, 40, 40, 40, 40, 40, 42, 40, 40, 53, 142, 42, 44, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 65, 65, 42, 55, 40, 52, 42, 40, 42, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 32, 32, 32, 28, 143, 18, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 15, 18, 15, 18, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 55, 31, 55, 31, 55, 31, 55, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 55, 32, 32, 31, 31, 31, 146, 145, 21, 144, 21, 21, 57, 32, 32, 32, 55, 32, 32, 31, 146, 31, 146, 145, 57, 57, 57, 32, 32, 32, 144, 55, 55, 32, 32, 31, 31, 31, 146, 55, 57, 57, 57, 32, 32, 32, 144, 32, 32, 32, 32, 31, 31, 31, 146, 31, 57, 147, 147, 55, 55, 32, 32, 32, 55, 32, 32, 31, 146, 31, 146, 145, 147, 21, 55, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 24, 24, 24, 150, 151, 62, 152, 62, 62, 62, 62, 5, 153, 23, 29, 8, 23, 23, 29, 8, 23, 5, 5, 5, 5, 153, 153, 153, 5, 154, 155, 156, 157, 158, 159, 160, 19, 6, 6, 6, 161, 161, 5, 153, 153, 5, 23, 29, 5, 153, 5, 153, 17, 17, 5, 5, 5, 162, 8, 9, 153, 153, 153, 5, 5, 5, 5, 5, 5, 5, 5, 14, 5, 17, 5, 5, 153, 5, 5, 5, 5, 5, 5, 5, 149, 24, 24, 24, 24, 24, 163, 164, 165, 166, 167, 24, 24, 24, 24, 24, 24, 27, 36, 55, 55, 27, 27, 27, 27, 27, 27, 168, 168, 169, 170, 171, 36, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 168, 168, 169, 170, 171, 55, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 55, 55, 55, 7, 7, 7, 7, 7, 7, 7, 7, 172, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 40, 40, 47, 47, 40, 40, 40, 40, 47, 47, 47, 40, 40, 60, 60, 60, 60, 40, 60, 60, 60, 47, 47, 40, 42, 40, 47, 47, 42, 42, 42, 42, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 174, 174, 33, 174, 20, 174, 174, 33, 20, 174, 28, 33, 33, 33, 28, 28, 33, 33, 33, 28, 20, 33, 174, 20, 14, 33, 33, 33, 33, 33, 20, 20, 174, 174, 174, 20, 33, 20, 146, 20, 33, 20, 146, 146, 33, 33, 25, 28, 33, 33, 15, 33, 28, 22, 22, 22, 22, 28, 20, 174, 28, 28, 33, 33, 169, 14, 14, 14, 14, 33, 28, 28, 28, 28, 20, 14, 20, 20, 18, 59, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 140, 140, 140, 15, 18, 140, 140, 140, 140, 30, 20, 20, 55, 55, 55, 55, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 176, 176, 20, 20, 20, 20, 14, 20, 20, 14, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 176, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 177, 176, 176, 20, 20, 14, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 14, 14, 14, 176, 14, 14, 176, 14, 14, 14, 14, 14, 10, 26, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 169, 169, 14, 169, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 14, 176, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 176, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 14, 14, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 20, 20, 20, 20, 20, 20, 20, 178, 179, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 30, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 169, 169, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 181, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 15, 18, 15, 15, 15, 18, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 18, 15, 18, 18, 18, 18, 18, 18, 36, 36, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 20, 20, 20, 20, 20, 20, 15, 18, 15, 18, 40, 40, 40, 15, 18, 55, 55, 55, 55, 55, 5, 5, 5, 5, 125, 5, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 18, 55, 55, 55, 55, 55, 18, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 36, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 114, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 5, 23, 29, 23, 29, 5, 5, 5, 23, 29, 5, 23, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 5, 5, 62, 5, 23, 29, 5, 5, 23, 29, 8, 9, 8, 9, 8, 9, 8, 9, 5, 5, 5, 5, 5, 37, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 62, 5, 5, 5, 5, 62, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 174, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 174, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 149, 5, 5, 5, 20, 38, 34, 140, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 62, 8, 9, 9, 20, 140, 140, 140, 140, 140, 140, 140, 140, 140, 182, 65, 41, 64, 183, 183, 62, 38, 38, 38, 38, 38, 174, 20, 175, 175, 175, 38, 34, 5, 20, 20, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 112, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 55, 55, 184, 184, 21, 21, 38, 185, 22, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 112, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 112, 112, 112, 112, 5, 38, 38, 185, 22, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 59, 59, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 55, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 120, 120, 120, 120, 120, 120, 120, 120, 174, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 59, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 5, 5, 5, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 34, 40, 60, 60, 60, 5, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 37, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 36, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 40, 40, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 16, 16, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 15, 18, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 37, 187, 187, 15, 18, 15, 18, 34, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 15, 18, 15, 15, 15, 15, 15, 18, 15, 18, 15, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 36, 36, 18, 34, 34, 34, 34, 34, 34, 34, 51, 34, 34, 34, 114, 34, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 51, 51, 111, 20, 20, 20, 20, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 59, 59, 7, 25, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 111, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 114, 51, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 34, 34, 34, 34, 34, 34, 61, 61, 61, 34, 61, 34, 34, 51, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 42, 42, 42, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 141, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 51, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 111, 111, 51, 51, 51, 51, 111, 111, 51, 111, 111, 111, 141, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 55, 38, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 51, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 111, 111, 51, 51, 111, 111, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 59, 59, 59, 34, 111, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 34, 40, 40, 42, 34, 34, 40, 40, 34, 34, 34, 34, 34, 40, 40, 34, 40, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 111, 111, 61, 61, 34, 38, 38, 111, 114, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 187, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 51, 111, 111, 51, 111, 111, 61, 111, 114, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 34, 115, 34, 115, 34, 34, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 115, 34, 115, 34, 34, 115, 115, 34, 34, 34, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 190, 191, 190, 192, 192, 192, 192, 192, 192, 192, 192, 192, 168, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 63, 190, 190, 190, 190, 190, 63, 190, 63, 190, 190, 63, 190, 190, 63, 190, 190, 190, 190, 190, 190, 190, 190, 190, 192, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 9, 8, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 93, 93, 93, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 194, 20, 93, 93, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 153, 153, 153, 153, 153, 153, 153, 170, 171, 153, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 40, 40, 153, 152, 152, 195, 195, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 5, 5, 170, 171, 153, 153, 153, 153, 195, 195, 195, 196, 153, 196, 55, 153, 196, 153, 153, 152, 170, 171, 170, 171, 170, 171, 161, 153, 153, 168, 197, 169, 169, 169, 55, 153, 172, 161, 153, 55, 55, 55, 55, 105, 105, 105, 94, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 24, 55, 153, 153, 161, 172, 161, 153, 153, 170, 171, 153, 168, 196, 197, 196, 196, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 196, 153, 169, 169, 169, 153, 153, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 170, 153, 171, 21, 195, 21, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 170, 169, 171, 169, 170, 171, 153, 170, 171, 153, 153, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 55, 55, 55, 172, 172, 169, 21, 174, 172, 172, 55, 174, 169, 169, 169, 169, 174, 174, 55, 163, 163, 163, 163, 163, 163, 163, 163, 163, 199, 199, 199, 20, 20, 163, 163, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 61, 5, 61, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 125, 125, 20, 59, 59, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 42, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 42, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 34, 34, 34, 34, 34, 34, 34, 34, 140, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 61, 140, 140, 140, 140, 140, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 84, 84, 84, 84, 84, 84, 63, 63, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 84, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 81, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 203, 203, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 63, 63, 63, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 202, 202, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 51, 51, 51, 63, 51, 51, 63, 63, 63, 63, 63, 51, 42, 51, 40, 84, 84, 84, 84, 63, 84, 84, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 40, 47, 42, 63, 63, 63, 63, 114, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 81, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 203, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 42, 63, 63, 63, 63, 202, 202, 202, 202, 202, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 5, 5, 5, 5, 5, 5, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 40, 40, 40, 40, 93, 93, 93, 93, 93, 93, 93, 93, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 63, 63, 63, 63, 63, 63, 63, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 42, 42, 40, 40, 40, 42, 40, 42, 42, 42, 42, 207, 207, 207, 207, 88, 88, 88, 88, 88, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 111, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 114, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 114, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 111, 111, 114, 113, 61, 61, 150, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 150, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 40, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 121, 51, 51, 51, 51, 111, 51, 122, 122, 51, 51, 51, 114, 114, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 34, 111, 111, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 141, 34, 34, 34, 34, 61, 61, 61, 61, 51, 117, 51, 51, 61, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 61, 34, 61, 61, 61, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 111, 111, 51, 141, 117, 51, 61, 61, 61, 61, 61, 61, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 111, 51, 51, 51, 51, 51, 51, 117, 114, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 51, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 117, 117, 34, 118, 111, 51, 111, 111, 111, 111, 55, 55, 111, 111, 55, 55, 119, 119, 141, 55, 55, 34, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 111, 111, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 55, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 114, 51, 51, 111, 117, 34, 34, 34, 34, 61, 61, 61, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 61, 55, 61, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 111, 111, 51, 51, 51, 51, 51, 51, 111, 121, 119, 119, 118, 119, 51, 51, 111, 114, 117, 34, 34, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 111, 111, 51, 51, 51, 51, 55, 55, 111, 111, 119, 119, 51, 51, 111, 114, 117, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 51, 111, 114, 51, 61, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 141, 117, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 111, 111, 51, 51, 51, 51, 111, 51, 51, 51, 51, 114, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 61, 61, 61, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 114, 117, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 51, 51, 51, 51, 51, 51, 126, 126, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 114, 51, 51, 51, 51, 111, 34, 51, 51, 51, 51, 61, 61, 61, 61, 61, 61, 61, 61, 114, 55, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 111, 111, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 51, 114, 61, 61, 61, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 111, 208, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 111, 51, 51, 51, 51, 51, 51, 51, 111, 51, 51, 111, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 55, 55, 55, 51, 55, 51, 51, 55, 51, 51, 51, 117, 51, 114, 114, 34, 51, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 55, 51, 51, 55, 111, 111, 51, 111, 114, 34, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 111, 111, 61, 61, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 55, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 47, 47, 47, 47, 47, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 40, 40, 61, 61, 61, 61, 61, 59, 59, 59, 59, 38, 38, 38, 38, 61, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 120, 120, 120, 120, 120, 120, 120, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 38, 38, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 59, 51, 47, 61, 24, 24, 24, 24, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 209, 209, 209, 209, 209, 209, 209, 210, 210, 47, 47, 47, 59, 59, 59, 211, 210, 210, 210, 210, 210, 24, 24, 24, 24, 24, 24, 24, 24, 42, 42, 42, 42, 42, 42, 42, 42, 59, 59, 40, 40, 40, 40, 40, 42, 42, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 209, 209, 209, 209, 209, 209, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 40, 40, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 55, 33, 33, 55, 55, 33, 55, 55, 33, 33, 55, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 55, 28, 55, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 55, 33, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 212, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 28, 55, 55, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 42, 42, 42, 42, 42, 42, 42, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 40, 40, 40, 40, 40, 40, 117, 63, 63, 63, 63, 63, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 63, 63, 63, 63, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 93, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 106, 207, 207, 207, 87, 207, 207, 207, 207, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 93, 105, 93, 93, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 93, 105, 93, 93, 93, 93, 93, 93, 105, 93, 93, 93, 93, 105, 93, 105, 93, 105, 93, 105, 105, 105, 93, 105, 105, 93, 105, 93, 93, 105, 93, 105, 93, 105, 93, 105, 93, 105, 93, 105, 105, 93, 105, 93, 93, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 105, 105, 105, 93, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 14, 14, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 125, 125, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 20, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 174, 174, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 180, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 180, 180, 180, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 55, 55, 55, 55, 55, 55, 180, 180, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 55, 55, 55, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 163, 163, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 163, 24, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 163, 163], NTI268071);
		var props_data_275248 = nimCopy(null, [[16384, 0, 14, 0], [16384, 0, 16, 0], [16384, 0, 15, 0], [16384, 0, 17, 0], [2048, 0, 17, 0], [33554432, 0, 18, 0], [33554432, 0, 10, 0], [134217728, 0, 10, 0], [2097152, 0, 18, 0], [4194304, 0, 18, 0], [67108864, 0, 9, 0], [33554432, 0, 12, 0], [1048576, 0, 9, 0], [256, 0, 8, 0], [67108864, 0, 18, 0], [4, 0, 0, 0], [268435456, 0, 18, 0], [524288, 0, 18, 0], [8, 0, 0, 0], [2048, 0, 12, 36], [536870912, 0, 18, 0], [268435456, 0, 18, 36], [2, 0, 0, 36], [8388608, 0, 18, 0], [32768, 0, 14, 0], [536870912, 0, 10, 0], [67108864, 0, 10, 0], [1024, 0, 8, 36], [8, 0, 0, 36], [16777216, 0, 18, 0], [1024, 0, 18, 36], [4, 0, 0, 48], [8, 0, 0, 48], [4, 0, 0, 36], [2, 0, 0, 0], [16, 0, 0, 36], [1, 0, 0, 36], [1, 0, 18, 0], [1, 0, 0, 0], [32, 230, 13, 10], [32, 230, 13, 0], [32, 232, 13, 0], [32, 220, 13, 0], [32, 216, 13, 10], [32, 202, 13, 0], [32, 220, 13, 10], [32, 202, 13, 10], [32, 1, 13, 0], [32, 1, 13, 10], [32, 230, 13, 53], [32, 240, 13, 10], [32, 0, 13, 0], [32, 233, 13, 0], [32, 234, 13, 0], [1, 0, 18, 53], [262144, 0, 0, 0], [33554432, 0, 18, 53], [268435456, 0, 18, 52], [4, 0, 0, 52], [536870912, 0, 0, 0], [128, 0, 13, 0], [33554432, 0, 0, 0], [1048576, 0, 18, 0], [262144, 0, 3, 0], [32, 222, 13, 0], [32, 228, 13, 0], [32, 10, 13, 0], [32, 11, 13, 0], [32, 12, 13, 0], [32, 13, 13, 0], [32, 14, 13, 0], [32, 15, 13, 0], [32, 16, 13, 0], [32, 17, 13, 0], [32, 18, 13, 0], [32, 19, 13, 0], [32, 20, 13, 0], [32, 21, 13, 0], [32, 22, 13, 0], [1048576, 0, 3, 0], [32, 23, 13, 0], [33554432, 0, 3, 0], [32, 24, 13, 0], [32, 25, 13, 0], [2, 0, 3, 0], [32768, 0, 11, 0], [67108864, 0, 4, 0], [134217728, 0, 4, 0], [33554432, 0, 4, 0], [32, 30, 13, 0], [32, 31, 13, 0], [32, 32, 13, 0], [32768, 0, 4, 0], [262144, 0, 4, 0], [2, 0, 4, 0], [2, 0, 4, 48], [1, 0, 4, 0], [32, 27, 13, 0], [32, 28, 13, 0], [32, 29, 13, 0], [32, 33, 13, 0], [32, 34, 13, 0], [256, 0, 11, 0], [33554432, 0, 11, 0], [32, 35, 13, 0], [2, 0, 4, 36], [536870912, 0, 4, 0], [32, 36, 13, 0], [256, 0, 3, 0], [1, 0, 3, 0], [134217728, 0, 3, 0], [64, 0, 0, 0], [2, 0, 0, 48], [32, 7, 13, 10], [32, 9, 13, 0], [2, 0, 0, 53], [256, 0, 0, 0], [32, 7, 13, 0], [64, 0, 0, 10], [64, 0, 0, 48], [1024, 0, 0, 0], [32, 0, 13, 10], [32, 0, 13, 48], [32, 84, 13, 0], [32, 91, 13, 10], [1024, 0, 18, 0], [32, 0, 0, 0], [32, 9, 13, 10], [32, 103, 13, 0], [32, 107, 13, 0], [32, 118, 13, 0], [32, 122, 13, 0], [33554432, 0, 0, 36], [32, 216, 13, 0], [32, 129, 13, 0], [32, 130, 13, 0], [32, 0, 13, 53], [32, 132, 13, 0], [32, 0, 13, 36], [2, 0, 0, 10], [512, 0, 0, 0], [64, 9, 0, 0], [32, 214, 13, 0], [8, 0, 0, 52], [8, 0, 0, 53], [16, 0, 0, 48], [4, 0, 0, 53], [268435456, 0, 18, 53], [2048, 0, 17, 53], [2048, 0, 17, 36], [32768, 0, 0, 0], [32768, 0, 3, 0], [1048576, 0, 18, 36], [33554432, 0, 18, 36], [4096, 0, 17, 0], [8192, 0, 15, 0], [32768, 0, 1, 0], [32768, 0, 5, 0], [32768, 0, 7, 0], [32768, 0, 2, 0], [32768, 0, 6, 0], [33554432, 0, 10, 36], [67108864, 0, 12, 0], [262144, 0, 14, 0], [32768, 0, 19, 0], [32768, 0, 20, 0], [32768, 0, 21, 0], [32768, 0, 22, 0], [67108864, 0, 9, 36], [67108864, 0, 18, 36], [2097152, 0, 18, 36], [4194304, 0, 18, 36], [134217728, 0, 10, 36], [262144, 0, 10, 0], [536870912, 0, 18, 36], [512, 0, 0, 36], [67108864, 0, 18, 48], [536870912, 0, 18, 48], [2097152, 0, 18, 53], [4194304, 0, 18, 53], [536870912, 0, 0, 36], [67108864, 0, 18, 53], [32, 218, 13, 0], [64, 224, 0, 0], [32, 8, 13, 10], [1, 0, 0, 48], [1024, 0, 0, 36], [268435456, 0, 0, 0], [65536, 0, 0, 0], [131072, 0, 0, 0], [2, 0, 3, 53], [32, 26, 13, 0], [2, 0, 3, 36], [268435456, 0, 4, 0], [134217728, 0, 4, 36], [524288, 0, 18, 36], [33554432, 0, 12, 36], [1048576, 0, 9, 36], [256, 0, 8, 36], [32768, 0, 18, 0], [512, 0, 18, 0], [1024, 0, 8, 0], [1024, 0, 3, 0], [536870912, 0, 3, 0], [4, 0, 3, 0], [8, 0, 3, 0], [1024, 0, 11, 0], [1024, 0, 4, 0], [32, 9, 0, 0], [536870912, 0, 0, 53], [64, 216, 0, 0], [64, 226, 0, 0], [67108864, 0, 0, 36]], NTI275249);
var ConstSet20 = setConstr(32);
var ConstSet21 = setConstr(13, 10);
var ConstSet22 = setConstr(2, 3, 4);
var ConstSet23 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);
var ConstSet24 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);
var ConstSet25 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);

function nimBoolToStr(x_15245) {
	var result_15246 = null;

		if (x_15245) {
		result_15246 = nimCopy(null, makeNimstrLit("true"), NTI138);
		}
		else {
			result_15246 = nimCopy(null, makeNimstrLit("false"), NTI138);
		}
		

	return result_15246;

}
var ConstSet26 = setConstr(62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122);
var ConstSet27 = setConstr(81, 82, 83, 84, 85, 86, 65, 88);
var ConstSet28 = setConstr(2, 1);
var ConstSet29 = setConstr(2, 1);
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_143246 = [0];
var object_id_157100 = [0];
var bltin_types_158717 = [null];

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function give_id_157814(obj_157816) {
	var F={procname:"pyobjectBase.giveId",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 173;
		obj_157816.id = object_id_157100[0];
		F.line = 175;
		object_id_157100[0] = addInt(object_id_157100[0], 1);
	framePtr = F.prev;

	
}

function is_power_of_two_128047(x_128049) {
		var Tmp1;

	var result_128050 = false;

	BeforeRet: do {
		if (!(0 < x_128049)) Tmp1 = false; else {			Tmp1 = ((x_128049 & (x_128049 - 1)) == 0);		}		result_128050 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_128050;

}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_20445 = null;
		F.line = 2916;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2918;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3872;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3879;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function init_table_158804(initial_size_158809) {
	var result_158811 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_158809))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_158811.counter = 0;
		F.line = 354;
		result_158811.data = new Array(chckRange(initial_size_158809, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_158809, 0, 2147483647);++i) {result_158811.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_158811;

}

function init_table_159031(initial_size_159036) {
	var result_159038 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_159036))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_159038.counter = 0;
		F.line = 354;
		result_159038.data = new Array(chckRange(initial_size_159036, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_159036, 0, 2147483647);++i) {result_159038.data[i]={Field0: 0, Field1: null, Field2: {Field0: null, Field1: null}};}	framePtr = F.prev;

	return result_159038;

}

function new_py_type_private_158731(name_158733) {
	var result_158734 = null;

	var F={procname:"pyobjectBase.newPyTypePrivate",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 187;
		result_158734 = {m_type: NTI157280, name: null, base: null, kind: 0, magicMethods: {Field0: null, Field1: null, Field2: null, Field3: null, Field4: null, Field5: null, Field6: null, Field7: null, Field8: null, Field9: null, Field10: null, Field11: null, Field12: null, Field13: null, Field14: null, Field15: null, Field16: null, Field17: null, Field18: null, Field19: null, Field20: null, Field21: null, Field22: null, Field23: null, Field24: null, Field25: null, Field26: null, Field27: null, Field28: null, Field29: null, Field30: null, Field31: null, Field32: null, Field33: null, Field34: null, Field35: null, Field36: null, Field37: null}, bltinMethods: {data: null, counter: 0}, getsetDescr: {data: null, counter: 0}, dict: null, id: 0, pyType: null};
		F.line = 189;
		give_id_157814(result_158734);
		F.line = 190;
		result_158734.name = nimCopy(null, name_158733, NTI138);
		F.line = 191;
		nimCopy(result_158734.bltinMethods, init_table_158804(64), NTI157294);
		F.line = 192;
		nimCopy(result_158734.getsetDescr, init_table_159031(64), NTI157326);
		F.line = 193;
		if (bltin_types_158717[0] != null) { bltin_types_158717[0].push(result_158734); } else { bltin_types_158717[0] = [result_158734]; };
	framePtr = F.prev;

	return result_158734;

}
var py_object_type_159247 = new_py_type_private_158731(makeNimstrLit("object"));

function new_py_type_159261(name_159263) {
	var result_159264 = null;

	var F={procname:"pyobjectBase.newPyType",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 200;
		result_159264 = new_py_type_private_158731(name_159263);
		F.line = 201;
		result_159264.base = py_object_type_159247;
	framePtr = F.prev;

	return result_159264;

}

function new_175206() {
	var result_175211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_175401 = null;
		F.line = 211;
		r_175401 = {m_type: NTI175084, str: null, id: 0, pyType: null};
		F.line = 212;
		result_175211 = r_175401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_175211;

}

function new_py_str_simple_175201() {
	var result_175203 = null;

	var F={procname:"stringobject.newPyStrSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_175424 = new_175206();
		F.line = 561;
		obj_175424.pyType = py_str_object_type_175090;
		F.line = 563;
		give_id_157814(obj_175424);
		result_175203 = obj_175424;
	framePtr = F.prev;

	return result_175203;

}

function new_py_str_default_175821(args_175039) {
	var result_175824 = null;

	var F={procname:"stringobject.newPyStrDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_175824 = new_py_str_simple_175201();
	framePtr = F.prev;

	return result_175824;

}
var py_str_object_type_175090 = new_py_type_159261(makeNimstrLit("Str"));
py_str_object_type_175090.kind = 10;
py_str_object_type_175090.magicMethods.Field26 = new_py_str_default_175821;

function new_py_string_176075(str_176077) {
	var result_176078 = null;

	var F={procname:"stringobject.newPyString",prev:framePtr,filename:"../Objects/stringobject.nim",line:0};
	framePtr = F;
		F.line = 13;
		result_176078 = new_py_str_simple_175201();
		F.line = 14;
		result_176078.str = nimCopy(null, str_176077, NTI138);
	framePtr = F.prev;

	return result_176078;

}
var new_py_str_176092 = new_py_string_176075;

function init_table_204069(initial_size_204074) {
	var result_204076 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_204074))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_204076.counter = 0;
		F.line = 354;
		result_204076.data = new Array(chckRange(initial_size_204074, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_204074, 0, 2147483647);++i) {result_204076.data[i]={Field0: 0, Field1: null, Field2: 0};}	framePtr = F.prev;

	return result_204076;

}

function next_power_of_two_128066(x_128068) {
	var result_128069 = 0;

		result_128069 = (x_128068 - 1);
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 16));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 8));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 4));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 2));
		result_128069 = (result_128069 | ((result_128069 >>> 0) >>> 1));
		result_128069 += (1 + ((x_128068 <= 0) ? 1:0));

	return result_128069;

}

function raiseDivByZero() {
		var e_16095 = null;
		e_16095 = {m_type: NTI3844, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16095.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_16095.parent = null;
		raiseException(e_16095, "DivByZeroError");

	
}

function right_size_146861(count_146863) {
	var result_146864 = 0;

	var F={procname:"tables.rightSize",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 150;
		result_146864 = next_power_of_two_128066(addInt(divInt(mulInt(count_146863, 3), 2), 4));
	framePtr = F.prev;

	return result_146864;

}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function HEX21HEX26_143057(h_143059, val_143060) {
	var result_143061 = 0;

	var F={procname:"hashes.!&",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 52;
		result_143061 = ((h_143059 + val_143060) >>> 0);
		F.line = 53;
		result_143061 = ((result_143061 + (result_143061 << 10)) >>> 0);
		F.line = 54;
		result_143061 = (result_143061 ^ ((result_143061 >>> 0) >>> 6));
	framePtr = F.prev;

	return result_143061;

}

function HEX21HEX24_143111(h_143113) {
	var result_143114 = 0;

	var F={procname:"hashes.!$",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 59;
		result_143114 = ((h_143113 + (h_143113 << 3)) >>> 0);
		F.line = 60;
		result_143114 = (result_143114 ^ ((result_143114 >>> 0) >>> 11));
		F.line = 61;
		result_143114 = ((result_143114 + (result_143114 << 15)) >>> 0);
	framePtr = F.prev;

	return result_143114;

}

function hash_143900(x_143902) {
	var result_143903 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 132;
		var h_143904 = 0;
		L1: do {
			F.line = 133;
			var i_143916 = 0;
			F.line = 2104;
			var colontmp__143924 = 0;
			F.line = 133;
			colontmp__143924 = subInt((x_143902 != null ? x_143902.length : 0), 1);
			F.line = 2107;
			var res_143927 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_143927 <= colontmp__143924)) break L3;
						F.line = 2109;
						i_143916 = res_143927;
						F.line = 134;
						h_143904 = HEX21HEX26_143057(h_143904, x_143902[chckIndx(i_143916, 0, x_143902.length+0-1)-0]);
						F.line = 2110;
						res_143927 = addInt(res_143927, 1);
					}
			} while(false);
		} while(false);
		F.line = 135;
		result_143903 = HEX21HEX24_143111(h_143904);
	framePtr = F.prev;

	return result_143903;

}

function is_filled_146491(hcode_146493) {
	var result_146494 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_146494 = !((hcode_146493 == 0));
	framePtr = F.prev;

	return result_146494;

}

function next_try_146614(h_146616, max_hash_146617) {
	var result_146618 = 0;

	var F={procname:"tables.nextTry",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_146618 = (addInt(h_146616, 1) & max_hash_146617);
	framePtr = F.prev;

	return result_146618;

}

function raw_get_204430(t_204435, key_204437, hc_204439, hc_204439_Idx) {
						var Tmp3;

	var result_204440 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_204439[hc_204439_Idx] = hash_143900(key_204437);
		if ((hc_204439[hc_204439_Idx] == 0)) {
		F.line = 45;
		hc_204439[hc_204439_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_204452 = (hc_204439[hc_204439_Idx] & (t_204435.data != null ? (t_204435.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_204435.data[chckIndx(h_204452, 0, t_204435.data.length+0-1)-0].Field0)) break L2;
						if (!(t_204435.data[chckIndx(h_204452, 0, t_204435.data.length+0-1)-0].Field0 == hc_204439[hc_204439_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_204435.data[chckIndx(h_204452, 0, t_204435.data.length+0-1)-0].Field1, key_204437);						}					if (Tmp3) {
					F.line = 38;
					result_204440 = h_204452;
					break BeforeRet;
					}
					
					F.line = 39;
					h_204452 = next_try_146614(h_204452, (t_204435.data != null ? (t_204435.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_204440 = subInt(-1, h_204452);
	} while (false);
	framePtr = F.prev;

	return result_204440;

}

function must_rehash_146509(length_146511, counter_146512) {
	var result_146513 = false;

	var F={procname:"tables.mustRehash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		if (!((counter_146512 < length_146511))) {
		F.line = 24;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim(24, 9) `\x0Acounter < length` "));
		}
		
		F.line = 25;
		result_146513 = ((mulInt(length_146511, 2) < mulInt(counter_146512, 3)) || (subInt(length_146511, counter_146512) < 4));
	framePtr = F.prev;

	return result_146513;

}

function raw_insert_206902(t_206909, data_206913, data_206913_Idx, key_206915, val_206917, hc_206919, h_206921) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_206913[data_206913_Idx][chckIndx(h_206921, 0, data_206913[data_206913_Idx].length+0-1)-0].Field1 = nimCopy(null, key_206915, NTI138);
		F.line = 65;
		data_206913[data_206913_Idx][chckIndx(h_206921, 0, data_206913[data_206913_Idx].length+0-1)-0].Field2 = val_206917;
		F.line = 66;
		data_206913[data_206913_Idx][chckIndx(h_206921, 0, data_206913[data_206913_Idx].length+0-1)-0].Field0 = hc_206919;
	framePtr = F.prev;

	
}

function enlarge_205658(t_205665) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_205673 = null;
		F.line = 314;
		n_205673 = new Array(chckRange(mulInt((t_205665.data != null ? t_205665.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_205665.data != null ? t_205665.data.length : 0), 2), 0, 2147483647);++i) {n_205673[i]={Field0: 0, Field1: null, Field2: 0};}		F.line = 315;
		var Tmp1 = t_205665.data; t_205665.data = n_205673; n_205673 = Tmp1;		L2: do {
			F.line = 316;
			var i_205928 = 0;
			F.line = 2088;
			var colontmp__207643 = 0;
			F.line = 316;
			colontmp__207643 = (n_205673 != null ? (n_205673.length-1) : -1);
			F.line = 2094;
			var res_207646 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_207646 <= colontmp__207643)) break L4;
						F.line = 2096;
						i_205928 = res_207646;
						F.line = 317;
						var eh_206164 = n_205673[chckIndx(i_205928, 0, n_205673.length+0-1)-0].Field0;
						if (is_filled_146491(eh_206164)) {
						F.line = 319;
						var j_206173 = (eh_206164 & (t_205665.data != null ? (t_205665.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_205665.data[chckIndx(j_206173, 0, t_205665.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_206173 = next_try_146614(j_206173, (t_205665.data != null ? (t_205665.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_206902(t_205665, t_205665, "data", n_205673[chckIndx(i_205928, 0, n_205673.length+0-1)-0].Field1, n_205673[chckIndx(i_205928, 0, n_205673.length+0-1)-0].Field2, eh_206164, j_206173);
						}
						
						F.line = 2097;
						res_207646 = addInt(res_207646, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_207664(t_207669, key_207671, hc_207673) {
	var result_207674 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_207683 = (hc_207673 & (t_207669.data != null ? (t_207669.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_207669.data[chckIndx(h_207683, 0, t_207669.data.length+0-1)-0].Field0)) break L2;
					if (((t_207669.data[chckIndx(h_207683, 0, t_207669.data.length+0-1)-0].Field0 == hc_207673) && eqStrings(t_207669.data[chckIndx(h_207683, 0, t_207669.data.length+0-1)-0].Field1, key_207671))) {
					F.line = 38;
					result_207674 = h_207683;
					break BeforeRet;
					}
					
					F.line = 39;
					h_207683 = next_try_146614(h_207683, (t_207669.data != null ? (t_207669.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_207674 = subInt(-1, h_207683);
	} while (false);
	framePtr = F.prev;

	return result_207674;

}

function HEX5BHEX5DHEX3D_204416(t_204423, key_204425, val_204427) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_204428 = [0];
		F.line = 98;
		var index_205184 = raw_get_204430(t_204423, key_204425, hc_204428, 0);
		if ((0 <= index_205184)) {
		F.line = 99;
		t_204423.data[chckIndx(index_205184, 0, t_204423.data.length+0-1)-0].Field2 = val_204427;
		}
		else {
			if (must_rehash_146509((t_204423.data != null ? t_204423.data.length : 0), t_204423.counter)) {
			F.line = 90;
			enlarge_205658(t_204423);
			F.line = 91;
			index_205184 = raw_get_known_hc_207664(t_204423, key_204425, hc_204428[0]);
			}
			
			F.line = 92;
			index_205184 = subInt(-1, index_205184);
			F.line = 93;
			raw_insert_206902(t_204423, t_204423, "data", key_204425, val_204427, hc_204428[0], index_205184);
			F.line = 100;
			t_204423.counter = addInt(t_204423.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function to_table_204056(pairs_204063) {
	var result_204065 = [{data: null, counter: 0}];

	var F={procname:"toTable.toTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 358;
		nimCopy(result_204065[0], init_table_204069(right_size_146861(chckRange((pairs_204063 != null ? pairs_204063.length : 0), 0, 2147483647))), NTI203981);
		L1: do {
			F.line = 359;
			var key_204268 = null;
			F.line = 359;
			var val_204269 = 0;
			F.line = 2247;
			var i_208477 = 0;
			L2: do {
				F.line = 2248;
					L3: while (true) {
					if (!(i_208477 < (pairs_204063 != null ? pairs_204063.length : 0))) break L3;
						F.line = 2249;
						key_204268 = pairs_204063[chckIndx(i_208477, 0, pairs_204063.length+0-1)-0]["Field0"];
						F.line = 2249;
						val_204269 = pairs_204063[chckIndx(i_208477, 0, pairs_204063.length+0-1)-0]["Field1"];
						F.line = 359;
						HEX5BHEX5DHEX3D_204416(result_204065[0], key_204268, val_204269);
						F.line = 2250;
						i_208477 = addInt(i_208477, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_204065[0];

}

function new_table_203968(pairs_203975) {
	var result_203999 = null;

	var F={procname:"newTable.newTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 490;
		result_203999 = {data: null, counter: 0};
		F.line = 491;
		nimCopy(result_203999, to_table_204056(pairs_203975), NTI203981);
	framePtr = F.prev;

	return result_203999;

}
var str_token_map_208604 = new_table_203968([{Field0: makeNimstrLit("ENDMARKER"), Field1: 1}, {Field0: makeNimstrLit("NAME"), Field1: 2}, {Field0: makeNimstrLit("NUMBER"), Field1: 3}, {Field0: makeNimstrLit("STRING"), Field1: 4}, {Field0: makeNimstrLit("NEWLINE"), Field1: 5}, {Field0: makeNimstrLit("INDENT"), Field1: 6}, {Field0: makeNimstrLit("DEDENT"), Field1: 7}, {Field0: makeNimstrLit("("), Field1: 8}, {Field0: makeNimstrLit(")"), Field1: 9}, {Field0: makeNimstrLit("["), Field1: 10}, {Field0: makeNimstrLit("]"), Field1: 11}, {Field0: makeNimstrLit(":"), Field1: 12}, {Field0: makeNimstrLit(","), Field1: 13}, {Field0: makeNimstrLit(";"), Field1: 14}, {Field0: makeNimstrLit("+"), Field1: 15}, {Field0: makeNimstrLit("-"), Field1: 16}, {Field0: makeNimstrLit("*"), Field1: 17}, {Field0: makeNimstrLit("/"), Field1: 18}, {Field0: makeNimstrLit("|"), Field1: 19}, {Field0: makeNimstrLit("&"), Field1: 20}, {Field0: makeNimstrLit("<"), Field1: 21}, {Field0: makeNimstrLit(">"), Field1: 22}, {Field0: makeNimstrLit("="), Field1: 23}, {Field0: makeNimstrLit("."), Field1: 24}, {Field0: makeNimstrLit("%"), Field1: 25}, {Field0: makeNimstrLit("{"), Field1: 26}, {Field0: makeNimstrLit("}"), Field1: 27}, {Field0: makeNimstrLit("=="), Field1: 28}, {Field0: makeNimstrLit("!="), Field1: 29}, {Field0: makeNimstrLit("<="), Field1: 30}, {Field0: makeNimstrLit(">="), Field1: 31}, {Field0: makeNimstrLit("~"), Field1: 32}, {Field0: makeNimstrLit("^"), Field1: 33}, {Field0: makeNimstrLit("<<"), Field1: 34}, {Field0: makeNimstrLit(">>"), Field1: 35}, {Field0: makeNimstrLit("**"), Field1: 36}, {Field0: makeNimstrLit("+="), Field1: 37}, {Field0: makeNimstrLit("-="), Field1: 38}, {Field0: makeNimstrLit("*="), Field1: 39}, {Field0: makeNimstrLit("/="), Field1: 40}, {Field0: makeNimstrLit("%="), Field1: 41}, {Field0: makeNimstrLit("&="), Field1: 42}, {Field0: makeNimstrLit("|="), Field1: 43}, {Field0: makeNimstrLit("^="), Field1: 44}, {Field0: makeNimstrLit("<<="), Field1: 45}, {Field0: makeNimstrLit(">>="), Field1: 46}, {Field0: makeNimstrLit("**="), Field1: 47}, {Field0: makeNimstrLit("//"), Field1: 48}, {Field0: makeNimstrLit("//="), Field1: 49}, {Field0: makeNimstrLit("@"), Field1: 50}, {Field0: makeNimstrLit("@="), Field1: 51}, {Field0: makeNimstrLit("->"), Field1: 52}, {Field0: makeNimstrLit("..."), Field1: 53}, {Field0: makeNimstrLit("<>"), Field1: 54}, {Field0: makeNimstrLit("single_input"), Field1: 91}, {Field0: makeNimstrLit("file_input"), Field1: 92}, {Field0: makeNimstrLit("eval_input"), Field1: 93}, {Field0: makeNimstrLit("decorator"), Field1: 94}, {Field0: makeNimstrLit("decorators"), Field1: 95}, {Field0: makeNimstrLit("decorated"), Field1: 96}, {Field0: makeNimstrLit("async_funcdef"), Field1: 97}, {Field0: makeNimstrLit("funcdef"), Field1: 98}, {Field0: makeNimstrLit("parameters"), Field1: 99}, {Field0: makeNimstrLit("typedargslist"), Field1: 100}, {Field0: makeNimstrLit("tfpdef"), Field1: 101}, {Field0: makeNimstrLit("varargslist"), Field1: 102}, {Field0: makeNimstrLit("vfpdef"), Field1: 103}, {Field0: makeNimstrLit("stmt"), Field1: 104}, {Field0: makeNimstrLit("simple_stmt"), Field1: 105}, {Field0: makeNimstrLit("small_stmt"), Field1: 106}, {Field0: makeNimstrLit("expr_stmt"), Field1: 107}, {Field0: makeNimstrLit("annassign"), Field1: 108}, {Field0: makeNimstrLit("testlist_star_expr"), Field1: 109}, {Field0: makeNimstrLit("augassign"), Field1: 110}, {Field0: makeNimstrLit("del_stmt"), Field1: 111}, {Field0: makeNimstrLit("pass_stmt"), Field1: 112}, {Field0: makeNimstrLit("flow_stmt"), Field1: 113}, {Field0: makeNimstrLit("break_stmt"), Field1: 114}, {Field0: makeNimstrLit("continue_stmt"), Field1: 115}, {Field0: makeNimstrLit("return_stmt"), Field1: 116}, {Field0: makeNimstrLit("yield_stmt"), Field1: 117}, {Field0: makeNimstrLit("raise_stmt"), Field1: 118}, {Field0: makeNimstrLit("import_stmt"), Field1: 119}, {Field0: makeNimstrLit("import_name"), Field1: 120}, {Field0: makeNimstrLit("import_from"), Field1: 121}, {Field0: makeNimstrLit("import_as_name"), Field1: 122}, {Field0: makeNimstrLit("dotted_as_name"), Field1: 123}, {Field0: makeNimstrLit("import_as_names"), Field1: 124}, {Field0: makeNimstrLit("dotted_as_names"), Field1: 125}, {Field0: makeNimstrLit("dotted_name"), Field1: 126}, {Field0: makeNimstrLit("global_stmt"), Field1: 127}, {Field0: makeNimstrLit("nonlocal_stmt"), Field1: 128}, {Field0: makeNimstrLit("assert_stmt"), Field1: 129}, {Field0: makeNimstrLit("compound_stmt"), Field1: 130}, {Field0: makeNimstrLit("async_stmt"), Field1: 131}, {Field0: makeNimstrLit("if_stmt"), Field1: 132}, {Field0: makeNimstrLit("while_stmt"), Field1: 133}, {Field0: makeNimstrLit("for_stmt"), Field1: 134}, {Field0: makeNimstrLit("try_stmt"), Field1: 135}, {Field0: makeNimstrLit("with_stmt"), Field1: 136}, {Field0: makeNimstrLit("with_item"), Field1: 137}, {Field0: makeNimstrLit("except_clause"), Field1: 138}, {Field0: makeNimstrLit("suite"), Field1: 139}, {Field0: makeNimstrLit("test"), Field1: 140}, {Field0: makeNimstrLit("test_nocond"), Field1: 141}, {Field0: makeNimstrLit("lambdef"), Field1: 142}, {Field0: makeNimstrLit("lambdef_nocond"), Field1: 143}, {Field0: makeNimstrLit("or_test"), Field1: 144}, {Field0: makeNimstrLit("and_test"), Field1: 145}, {Field0: makeNimstrLit("not_test"), Field1: 146}, {Field0: makeNimstrLit("comparison"), Field1: 147}, {Field0: makeNimstrLit("comp_op"), Field1: 148}, {Field0: makeNimstrLit("star_expr"), Field1: 149}, {Field0: makeNimstrLit("expr"), Field1: 150}, {Field0: makeNimstrLit("xor_expr"), Field1: 151}, {Field0: makeNimstrLit("and_expr"), Field1: 152}, {Field0: makeNimstrLit("shift_expr"), Field1: 153}, {Field0: makeNimstrLit("arith_expr"), Field1: 154}, {Field0: makeNimstrLit("term"), Field1: 155}, {Field0: makeNimstrLit("factor"), Field1: 156}, {Field0: makeNimstrLit("power"), Field1: 157}, {Field0: makeNimstrLit("atom_expr"), Field1: 158}, {Field0: makeNimstrLit("atom"), Field1: 159}, {Field0: makeNimstrLit("testlist_comp"), Field1: 160}, {Field0: makeNimstrLit("trailer"), Field1: 161}, {Field0: makeNimstrLit("subscriptlist"), Field1: 162}, {Field0: makeNimstrLit("subscript"), Field1: 163}, {Field0: makeNimstrLit("sliceop"), Field1: 164}, {Field0: makeNimstrLit("exprlist"), Field1: 165}, {Field0: makeNimstrLit("testlist"), Field1: 166}, {Field0: makeNimstrLit("dictorsetmaker"), Field1: 167}, {Field0: makeNimstrLit("classdef"), Field1: 168}, {Field0: makeNimstrLit("arglist"), Field1: 169}, {Field0: makeNimstrLit("argument"), Field1: 170}, {Field0: makeNimstrLit("comp_iter"), Field1: 171}, {Field0: makeNimstrLit("sync_comp_for"), Field1: 172}, {Field0: makeNimstrLit("comp_for"), Field1: 173}, {Field0: makeNimstrLit("comp_if"), Field1: 174}, {Field0: makeNimstrLit("encoding_decl"), Field1: 175}, {Field0: makeNimstrLit("yield_expr"), Field1: 176}, {Field0: makeNimstrLit("yield_arg"), Field1: 177}, {Field0: makeNimstrLit("not"), Field1: 55}, {Field0: makeNimstrLit("if"), Field1: 56}, {Field0: makeNimstrLit("True"), Field1: 57}, {Field0: makeNimstrLit("break"), Field1: 58}, {Field0: makeNimstrLit("with"), Field1: 59}, {Field0: makeNimstrLit("and"), Field1: 60}, {Field0: makeNimstrLit("lambda"), Field1: 61}, {Field0: makeNimstrLit("is"), Field1: 62}, {Field0: makeNimstrLit("def"), Field1: 63}, {Field0: makeNimstrLit("from"), Field1: 64}, {Field0: makeNimstrLit("pass"), Field1: 65}, {Field0: makeNimstrLit("del"), Field1: 66}, {Field0: makeNimstrLit("False"), Field1: 67}, {Field0: makeNimstrLit("finally"), Field1: 68}, {Field0: makeNimstrLit("try"), Field1: 69}, {Field0: makeNimstrLit("assert"), Field1: 70}, {Field0: makeNimstrLit("async"), Field1: 71}, {Field0: makeNimstrLit("yield"), Field1: 72}, {Field0: makeNimstrLit("or"), Field1: 73}, {Field0: makeNimstrLit("in"), Field1: 74}, {Field0: makeNimstrLit("None"), Field1: 75}, {Field0: makeNimstrLit("for"), Field1: 76}, {Field0: makeNimstrLit("raise"), Field1: 77}, {Field0: makeNimstrLit("nonlocal"), Field1: 78}, {Field0: makeNimstrLit("else"), Field1: 79}, {Field0: makeNimstrLit("continue"), Field1: 80}, {Field0: makeNimstrLit("class"), Field1: 81}, {Field0: makeNimstrLit("except"), Field1: 82}, {Field0: makeNimstrLit("elif"), Field1: 83}, {Field0: makeNimstrLit("global"), Field1: 84}, {Field0: makeNimstrLit("return"), Field1: 85}, {Field0: makeNimstrLit("import"), Field1: 86}, {Field0: makeNimstrLit("while"), Field1: 87}, {Field0: makeNimstrLit("as"), Field1: 88}, {Field0: makeNimstrLit("await"), Field1: 89}]);

function init_table_212098(initial_size_212103) {
	var result_212124 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_212103))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_212124.counter = 0;
		F.line = 354;
		result_212124.data = new Array(chckRange(initial_size_212103, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_212103, 0, 2147483647);++i) {result_212124.data[i]={Field0: 0, Field1: 0, Field2: null};}	framePtr = F.prev;

	return result_212124;

}

function init_table_212230(initial_size_212235) {
	var result_212256 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_212235))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_212256.counter = 0;
		F.line = 354;
		result_212256.data = new Array(chckRange(initial_size_212235, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_212235, 0, 2147483647);++i) {result_212256.data[i]={Field0: 0, Field1: 0, Field2: {}};}	framePtr = F.prev;

	return result_212256;

}
var grammar_set_212224 = [init_table_212098(64)];
var first_set_212424 = [init_table_212230(64)];
var success_grammar_node_212501 = new_grammar_node_212465(makeNimstrLit("s"), []);

function nsuFindChar(s_136416, sub_136417, start_136418, last_136419) {
		var Tmp1;

	var result_136421 = 0;

	BeforeRet: do {
		if ((last_136419 == 0)) {
		Tmp1 = (s_136416 != null ? (s_136416.length-1) : -1);
		}
		else {
		Tmp1 = last_136419;
		}
		
		var last_136423 = Tmp1;
		L2: do {
			var i_136809 = 0;
			var colontmp__137013 = 0;
			colontmp__137013 = start_136418;
			var res_137016 = colontmp__137013;
			L3: do {
					L4: while (true) {
					if (!(res_137016 <= last_136423)) break L4;
						i_136809 = res_137016;
						if ((sub_136417 == s_136416[i_136809])) {
						result_136421 = i_136809;
						break BeforeRet;
						}
						
						res_137016 += 1;
					}
			} while(false);
		} while(false);
		result_136421 = -1;
		break BeforeRet;
	} while (false);

	return result_136421;

}

function quit_19421(errormsg_19423, errorcode_19424) {
	var F={procname:"system.quit",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3588;
		rawEcho(errormsg_19423);
		F.line = 3589;
		exit(errorcode_19424);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_48874(s_48879, x_48882) {
	var result_48883 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3657;
		var a_49001 = x_48882.a;
		F.line = 3658;
		var l_49201 = addInt(subInt(x_48882.b, a_49001), 1);
		F.line = 3659;
		result_48883 = nimCopy(null, mnewString(chckRange(l_49201, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 3660;
			var i_49211 = 0;
			F.line = 3617;
			var i_49223 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_49223 < l_49201)) break L3;
						F.line = 3619;
						i_49211 = i_49223;
						F.line = 3660;
						result_48883[chckIndx(i_49211, 0, result_48883.length+0-1)-0] = s_48879[chckIndx(addInt(i_49211, a_49001), 0, s_48879.length+0-1)-0];
						F.line = 3620;
						i_49223 = addInt(i_49223, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_48883;

}

function HEX2EHEX2E_48828(a_48833, b_48835) {
	var result_48837 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_48837.a = a_48833;
		F.line = 399;
		result_48837.b = b_48835;
	framePtr = F.prev;

	return result_48837;

}

function HEX5BHEX5D_213441(t_213448, key_213450) {
	var result_213452 = [null, 0];
	var result_213452_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_213454 = [0];
		F.line = 161;
		var index_213468 = raw_get_204430(t_213448, key_213450, hc_213454, 0);
		if ((0 <= index_213468)) {
		F.line = 162;
		result_213452 = t_213448.data[chckIndx(index_213468, 0, t_213448.data.length+0-1)-0]; result_213452_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_213807 = null;
			F.line = 2896;
			e_213807 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_213807.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(key_213450), NTI138);
			F.line = 2891;
			e_213807.parent = null;
			F.line = 165;
			raiseException(e_213807, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_213452, result_213452_Idx];

}

function HEX5BHEX5D_212903(t_212909, key_212911) {
	var result_212913 = [null, 0];
	var result_212913_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 432;
		var Tmp1 = HEX5BHEX5D_213441(t_212909, key_212911); result_212913 = Tmp1[0]; result_212913_Idx = Tmp1[1];
	framePtr = F.prev;

	return [result_212913, result_212913_Idx];

}

function skip_whitespace_37912(s_37914, start_37915) {
	var result_37917 = 0;

	var F={procname:"parseutils.skipWhitespace",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 156;
				L2: while (true) {
				if (!((addInt(start_37915, result_37917) < (s_37914 != null ? s_37914.length : 0)) && (ConstSet2[s_37914[chckIndx(addInt(start_37915, result_37917), 0, s_37914.length+0-1)-0]] != undefined))) break L2;
					F.line = 156;
					result_37917 = addInt(result_37917, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_37917;

}

function get_char_249532(grammar_249534) {
	var result_249535 = 0;

	var F={procname:"grammar.getChar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 339;
		grammar_249534.cursor = addInt(grammar_249534.cursor, skip_whitespace_37912(grammar_249534.grammarString, grammar_249534.cursor));
		F.line = 340;
		result_249535 = grammar_249534.grammarString[chckIndx(grammar_249534.cursor, 0, grammar_249534.grammarString.length+0-1)-0];
	framePtr = F.prev;

	return result_249535;

}

function HEX5BHEX5D_81105(s_81110, x_81113) {
	var result_81114 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3657;
		var a_81201 = x_81113.a;
		F.line = 3658;
		var l_81401 = addInt(subInt(subInt((s_81110 != null ? s_81110.length : 0), x_81113.b), a_81201), 1);
		F.line = 3659;
		result_81114 = nimCopy(null, mnewString(chckRange(l_81401, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 3660;
			var i_81411 = 0;
			F.line = 3617;
			var i_81423 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_81423 < l_81401)) break L3;
						F.line = 3619;
						i_81411 = i_81423;
						F.line = 3660;
						result_81114[chckIndx(i_81411, 0, result_81114.length+0-1)-0] = s_81110[chckIndx(addInt(i_81411, a_81201), 0, s_81110.length+0-1)-0];
						F.line = 3620;
						i_81423 = addInt(i_81423, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_81114;

}

function HEX2EHEX2E_81053(a_81058, b_81060) {
	var result_81068 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_81068.a = a_81058;
		F.line = 399;
		result_81068.b = b_81060;
	framePtr = F.prev;

	return result_81068;

}

function error_grammar_229447(grammar_229449) {
	var F={procname:"grammar.errorGrammar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 271;
		var s_229450 = nimCopy(null, grammar_229449.grammarString, NTI138);
		F.line = 272;
		var c_229451 = grammar_229449.cursor;
		F.line = 274;
		F.line = 274;
		var fmt_res_229455 = mnewString(0);
		F.line = 274;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(makeNimstrLit("invalid syntax for ")); } else { fmt_res_229455 = makeNimstrLit("invalid syntax for "); };
		F.line = 260;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(HEX5BHEX5D_48874(s_229450, HEX2EHEX2E_48828(0, subInt(c_229451, 1)))); } else { fmt_res_229455 = HEX5BHEX5D_48874(s_229450, HEX2EHEX2E_48828(0, subInt(c_229451, 1))).slice(); };
		F.line = 274;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(makeNimstrLit(" $$")); } else { fmt_res_229455 = makeNimstrLit(" $$"); };
		F.line = 268;
		if (fmt_res_229455 != null) { addChar(fmt_res_229455, s_229450[chckIndx(c_229451, 0, s_229450.length+0-1)-0]); } else { fmt_res_229455 = [s_229450[chckIndx(c_229451, 0, s_229450.length+0-1)-0]]; };
		F.line = 274;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(makeNimstrLit("$$ ")); } else { fmt_res_229455 = makeNimstrLit("$$ "); };
		F.line = 260;
		if (fmt_res_229455 != null) { fmt_res_229455 = (fmt_res_229455).concat(HEX5BHEX5D_81105(s_229450, HEX2EHEX2E_81053(addInt(c_229451, 1), 1))); } else { fmt_res_229455 = HEX5BHEX5D_81105(s_229450, HEX2EHEX2E_81053(addInt(c_229451, 1), 1)).slice(); };
		var msg_234443 = nimCopy(null, fmt_res_229455, NTI138);
		F.line = 2895;
		var e_234450 = null;
		F.line = 2896;
		e_234450 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 275;
		e_234450.message = nimCopy(null, msg_234443, NTI138);
		F.line = 2891;
		e_234450.parent = null;
		F.line = 275;
		raiseException(e_234450, "ValueError");
	framePtr = F.prev;

	
}

function match_c_212447(grammar_212449) {
	var result_250468 = null;

	var F={procname:"grammar.matchC",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 395;
		switch (get_char_249532(grammar_212449)) {
		case 91:
			F.line = 397;
			grammar_212449.cursor = addInt(grammar_212449.cursor, 1);
			break;
		default: 
			F.line = 399;
			error_grammar_229447(grammar_212449);
			break;
		}
		F.line = 400;
		result_250468 = match_f_212456(grammar_212449);
		F.line = 401;
		result_250468.repeat = 3;
		F.line = 402;
		switch (get_char_249532(grammar_212449)) {
		case 93:
			F.line = 404;
			grammar_212449.cursor = addInt(grammar_212449.cursor, 1);
			break;
		default: 
			F.line = 406;
			error_grammar_229447(grammar_212449);
			break;
		}
	framePtr = F.prev;

	return result_250468;

}

function match_d_212450(grammar_212452) {
	var result_250504 = null;

	var F={procname:"grammar.matchD",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 410;
		switch (get_char_249532(grammar_212452)) {
		case 40:
			F.line = 412;
			grammar_212452.cursor = addInt(grammar_212452.cursor, 1);
			break;
		default: 
			F.line = 414;
			error_grammar_229447(grammar_212452);
			break;
		}
		F.line = 415;
		result_250504 = match_f_212456(grammar_212452);
		F.line = 416;
		switch (get_char_249532(grammar_212452)) {
		case 41:
			F.line = 418;
			grammar_212452.cursor = addInt(grammar_212452.cursor, 1);
			break;
		default: 
			F.line = 420;
			error_grammar_229447(grammar_212452);
			break;
		}
	framePtr = F.prev;

	return result_250504;

}

function skip_until_38050(s_38052, until_38053, start_38054) {
					var Tmp3;

	var result_38056 = 0;

	var F={procname:"parseutils.skipUntil",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 182;
				L2: while (true) {
					if (!(addInt(start_38054, result_38056) < (s_38052 != null ? s_38052.length : 0))) Tmp3 = false; else {						Tmp3 = !((s_38052[chckIndx(addInt(result_38056, start_38054), 0, s_38052.length+0-1)-0] == until_38053));					}				if (!Tmp3) break L2;
					F.line = 182;
					result_38056 = addInt(result_38056, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_38056;

}

function init_212556(s_212562, initial_size_212564) {
	var F={procname:"init.init",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_212564))) {
		F.line = 400;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(400, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 401;
		s_212562.counter = 0;
		F.line = 402;
		s_212562.data = new Array(chckRange(initial_size_212564, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_212564, 0, 2147483647);++i) {s_212562.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_212530(initial_size_212534) {
	var result_212536 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 414;
		init_212556(result_212536[0], initial_size_212534);
	framePtr = F.prev;

	return result_212536[0];

}

function new_grammar_node_212465(name_212467, token_string_212468) {
			var Tmp1;

	var result_212519 = null;

	var F={procname:"grammar.newGrammarNode",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 93;
		result_212519 = {id: 0, father: null, repeat: 0, epsilonSet: {data: null, counter: 0}, kind: 0, token: 0, nextSet: {data: null, counter: 0}, children: null};
		F.line = 94;
		nimCopy(result_212519.epsilonSet, init_set_212530(64), NTI212034);
		F.line = 95;
		switch (name_212467[chckIndx(0, 0, name_212467.length+0-1)-0]) {
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 43:
		case 63:
		case 42:
			F.line = 97;
			result_212519.kind = name_212467[chckIndx(0, 0, name_212467.length+0-1)-0];
			break;
		case 97:
			F.line = 99;
			result_212519.kind = 97;
			F.line = 100;
			result_212519.token = (Tmp1 = HEX5BHEX5D_212903(str_token_map_208604, token_string_212468), Tmp1[0])[Tmp1[1]];
			F.line = 101;
			nimCopy(result_212519.nextSet, init_set_212530(64), NTI212034);
			break;
		case 115:
			F.line = 103;
			result_212519.kind = 115;
			F.line = 104;
			nimCopy(result_212519.nextSet, init_set_212530(64), NTI212034);
			break;
		default: 
			F.line = 2895;
			var e_214006 = null;
			F.line = 2896;
			e_214006 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 106;
			F.line = 106;
			var fmt_res_214016 = mnewString(0);
			F.line = 106;
			if (fmt_res_214016 != null) { fmt_res_214016 = (fmt_res_214016).concat(makeNimstrLit("unknown name: ")); } else { fmt_res_214016 = makeNimstrLit("unknown name: "); };
			F.line = 260;
			if (fmt_res_214016 != null) { fmt_res_214016 = (fmt_res_214016).concat(name_212467); } else { fmt_res_214016 = name_212467.slice(); };
			e_214006.message = nimCopy(null, fmt_res_214016, NTI138);
			F.line = 2891;
			e_214006.parent = null;
			F.line = 106;
			raiseException(e_214006, "ValueError");
			break;
		}
	framePtr = F.prev;

	return result_212519;

}

function skip_while_38080(s_38082, to_skip_38084, start_38085) {
	var result_38087 = 0;

	var F={procname:"parseutils.skipWhile",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 187;
				L2: while (true) {
				if (!((addInt(start_38085, result_38087) < (s_38082 != null ? s_38082.length : 0)) && (to_skip_38084[s_38082[chckIndx(addInt(result_38087, start_38085), 0, s_38082.length+0-1)-0]] != undefined))) break L2;
					F.line = 187;
					result_38087 = addInt(result_38087, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_38087;

}

function match_b_212444(grammar_212446) {
	var result_250258 = null;

	var F={procname:"grammar.matchB",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 375;
		switch (get_char_249532(grammar_212446)) {
		case 91:
			F.line = 377;
			result_250258 = match_c_212447(grammar_212446);
			break;
		case 40:
			F.line = 379;
			result_250258 = match_d_212450(grammar_212446);
			break;
		case 39:
			F.line = 381;
			grammar_212446.cursor = addInt(grammar_212446.cursor, 1);
			F.line = 382;
			var prev_250268 = grammar_212446.cursor;
			F.line = 383;
			grammar_212446.cursor = addInt(grammar_212446.cursor, skip_until_38050(grammar_212446.grammarString, 39, grammar_212446.cursor));
			F.line = 384;
			grammar_212446.cursor = addInt(grammar_212446.cursor, 1);
			F.line = 385;
			var substr_250329 = HEX5BHEX5D_48874(grammar_212446.grammarString, HEX2EHEX2E_48828(prev_250268, subInt(grammar_212446.cursor, 2)));
			F.line = 386;
			result_250258 = new_grammar_node_212465(makeNimstrLit("a"), substr_250329);
			break;
		default: 
			F.line = 388;
			var first_250330 = grammar_212446.cursor;
			F.line = 389;
			grammar_212446.cursor = addInt(grammar_212446.cursor, skip_while_38080(grammar_212446.grammarString, ConstSet3, grammar_212446.cursor));
			F.line = 390;
			var substr_250451 = HEX5BHEX5D_48874(grammar_212446.grammarString, HEX2EHEX2E_48828(first_250330, subInt(grammar_212446.cursor, 1)));
			F.line = 391;
			result_250258 = new_grammar_node_212465(makeNimstrLit("a"), substr_250451);
			break;
		}
	framePtr = F.prev;

	return result_250258;

}

function exhausted_249558(grammar_249560) {
	var result_249561 = false;

	var F={procname:"grammar.exhausted",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 344;
		result_249561 = (grammar_249560.cursor == (grammar_249560.grammarString != null ? grammar_249560.grammarString.length : 0));
	framePtr = F.prev;

	return result_249561;

}

function match_e_212453(grammar_212455) {
	var result_250539 = null;

	var F={procname:"grammar.matchE",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (exhausted_249558(grammar_212455)) {
		F.line = 425;
		break BeforeRet;
		}
		
		F.line = 426;
		switch (get_char_249532(grammar_212455)) {
		case 43:
			F.line = 428;
			result_250539 = new_grammar_node_212465(makeNimstrLit("+"), []);
			F.line = 429;
			grammar_212455.cursor = addInt(grammar_212455.cursor, 1);
			break;
		case 42:
			F.line = 432;
			result_250539 = new_grammar_node_212465(makeNimstrLit("*"), []);
			F.line = 433;
			grammar_212455.cursor = addInt(grammar_212455.cursor, 1);
			break;
		default: 
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_250539;

}

function match_h_212462(grammar_212464) {
	var result_251008 = null;

	var F={procname:"grammar.matchH",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (exhausted_249558(grammar_212464)) {
		F.line = 475;
		break BeforeRet;
		}
		
		F.line = 476;
		switch (get_char_249532(grammar_212464)) {
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 91:
		case 40:
		case 39:
		case 95:
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
			F.line = 478;
			result_251008 = match_a_212441(grammar_212464);
			break;
		default: 
			F.line = 480;
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_251008;

}

function add_child_234491(father_234493, child_234494) {
	var F={procname:"grammar.addChild",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 283;
		if (father_234493.children != null) { father_234493.children.push(child_234494); } else { father_234493.children = [child_234494]; };
		F.line = 284;
		child_234494.father = father_234493;
	framePtr = F.prev;

	
}

function is_grammar_terminator_212485(node_212487) {
		var Tmp1;

	var result_214033 = false;

	var F={procname:"grammar.isGrammarTerminator",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 111;
		if ((node_212487.kind == 97)) Tmp1 = true; else {			Tmp1 = (node_212487.kind == 115);		}		result_214033 = Tmp1;
	framePtr = F.prev;

	return result_214033;

}

function match_a_212441(grammar_212443) {
			var Tmp1;
			var Tmp2;

	var result_249578 = null;

	var F={procname:"grammar.matchA",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 349;
		var b_249579 = match_b_212444(grammar_212443);
		F.line = 350;
		var e_249580 = match_e_212453(grammar_212443);
		F.line = 351;
		var h_249581 = match_h_212462(grammar_212443);
		if (!((e_249580 == null))) {
		F.line = 353;
		switch (e_249580.kind) {
		case 43:
			if (!((b_249579.repeat == 0))) {
			F.line = 355;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(355, 14) `b.repeat == None` "));
			}
			
			F.line = 356;
			b_249579.repeat = 2;
			break;
		case 42:
			if (!((b_249579.repeat == 0))) {
			F.line = 358;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(358, 14) `b.repeat == None` "));
			}
			
			F.line = 359;
			b_249579.repeat = 1;
			break;
		default: 
			if (true) {
			F.line = 361;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(361, 14) `false` "));
			}
			
			break;
		}
		}
		
		if (!((h_249581 == null))) {
		F.line = 363;
		result_249578 = new_grammar_node_212465(makeNimstrLit("A"), []);
		F.line = 364;
		add_child_234491(result_249578, b_249579);
			if (!((h_249581.repeat == 0))) Tmp2 = true; else {				Tmp2 = (h_249581.kind == 70);			}			if (Tmp2) Tmp1 = true; else {				Tmp1 = is_grammar_terminator_212485(h_249581);			}		if (Tmp1) {
		F.line = 366;
		add_child_234491(result_249578, h_249581);
		}
		else {
			L3: do {
				F.line = 368;
				var child_250233 = null;
				F.line = 3909;
				var colontmp__250236 = null;
				F.line = 368;
				colontmp__250236 = h_249581.children;
				F.line = 3911;
				var i_250239 = 0;
				F.line = 3912;
				var l_250241 = (colontmp__250236 != null ? colontmp__250236.length : 0);
				L4: do {
					F.line = 3913;
						L5: while (true) {
						if (!(i_250239 < l_250241)) break L5;
							F.line = 3914;
							child_250233 = colontmp__250236[chckIndx(i_250239, 0, colontmp__250236.length+0-1)-0];
							F.line = 369;
							add_child_234491(result_249578, child_250233);
							F.line = 3915;
							i_250239 = addInt(i_250239, 1);
							if (!(((colontmp__250236 != null ? colontmp__250236.length : 0) == l_250241))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 371;
			result_249578 = b_249579;
		}
		
	framePtr = F.prev;

	return result_249578;

}

function concat_250859(seqs_250865) {
	var result_250867 = null;

	var F={procname:"concat.concat",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sequtils.nim",line:0};
	framePtr = F;
		F.line = 62;
		var l_250869 = 0;
		L1: do {
			F.line = 63;
			var seqitm_250908 = null;
			F.line = 2247;
			var i_250968 = 0;
			L2: do {
				F.line = 2248;
					L3: while (true) {
					if (!(i_250968 < (seqs_250865 != null ? seqs_250865.length : 0))) break L3;
						F.line = 2249;
						seqitm_250908 = seqs_250865[chckIndx(i_250968, 0, seqs_250865.length+0-1)-0];
						F.line = 63;
						l_250869 = addInt(l_250869, (seqitm_250908 != null ? seqitm_250908.length : 0));
						F.line = 2250;
						i_250968 = addInt(i_250968, 1);
					}
			} while(false);
		} while(false);
		F.line = 64;
		result_250867 = new Array(chckRange(l_250869, 0, 2147483647)); for (var i=0;i<chckRange(l_250869, 0, 2147483647);++i) {result_250867[i]=null;}		F.line = 65;
		var i_250936 = 0;
		L4: do {
			F.line = 66;
			var s_250944 = null;
			F.line = 2247;
			var i_250978 = 0;
			L5: do {
				F.line = 2248;
					L6: while (true) {
					if (!(i_250978 < (seqs_250865 != null ? seqs_250865.length : 0))) break L6;
						F.line = 2249;
						s_250944 = seqs_250865[chckIndx(i_250978, 0, seqs_250865.length+0-1)-0];
						L7: do {
							F.line = 67;
							var itm_250953 = null;
							F.line = 3911;
							var i_250973 = 0;
							F.line = 3912;
							var l_250975 = (s_250944 != null ? s_250944.length : 0);
							L8: do {
								F.line = 3913;
									L9: while (true) {
									if (!(i_250973 < l_250975)) break L9;
										F.line = 3914;
										itm_250953 = s_250944[chckIndx(i_250973, 0, s_250944.length+0-1)-0];
										F.line = 68;
										result_250867[chckIndx(i_250936, 0, result_250867.length+0-1)-0] = itm_250953;
										F.line = 69;
										i_250936 = addInt(i_250936, 1);
										F.line = 3915;
										i_250973 = addInt(i_250973, 1);
										if (!(((s_250944 != null ? s_250944.length : 0) == l_250975))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 2250;
						i_250978 = addInt(i_250978, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_250867;

}

function match_g_212459(grammar_212461) {
	var result_250824 = null;

	var F={procname:"grammar.matchG",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (exhausted_249558(grammar_212461)) {
		F.line = 460;
		break BeforeRet;
		}
		
		F.line = 461;
		switch (get_char_249532(grammar_212461)) {
		case 124:
			F.line = 463;
			result_250824 = new_grammar_node_212465(makeNimstrLit("G"), []);
			F.line = 464;
			grammar_212461.cursor = addInt(grammar_212461.cursor, 1);
			F.line = 465;
			add_child_234491(result_250824, match_a_212441(grammar_212461));
			F.line = 466;
			var g_250835 = match_g_212459(grammar_212461);
			if (!((g_250835 == null))) {
			F.line = 468;
			result_250824.children = nimCopy(null, concat_250859([result_250824.children, g_250835.children]), NTI250866);
			}
			
			break;
		default: 
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_250824;

}

function match_f_212456(grammar_212458) {
	var result_250574 = null;

	var F={procname:"grammar.matchF",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 439;
		var a_250575 = match_a_212441(grammar_212458);
		F.line = 440;
		var g_250576 = match_g_212459(grammar_212458);
		if (!((g_250576 == null))) {
		F.line = 442;
		result_250574 = new_grammar_node_212465(makeNimstrLit("F"), []);
		F.line = 443;
		add_child_234491(result_250574, a_250575);
		L1: do {
			F.line = 444;
			var child_250598 = null;
			F.line = 3909;
			var colontmp__250802 = null;
			F.line = 444;
			colontmp__250802 = g_250576.children;
			F.line = 3911;
			var i_250805 = 0;
			F.line = 3912;
			var l_250807 = (colontmp__250802 != null ? colontmp__250802.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_250805 < l_250807)) break L3;
						F.line = 3914;
						child_250598 = colontmp__250802[chckIndx(i_250805, 0, colontmp__250802.length+0-1)-0];
						F.line = 445;
						add_child_234491(result_250574, child_250598);
						F.line = 3915;
						i_250805 = addInt(i_250805, 1);
						if (!(((colontmp__250802 != null ? colontmp__250802.length : 0) == l_250807))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 447;
			switch (a_250575.kind) {
			case 97:
				F.line = 449;
				result_250574 = new_grammar_node_212465(makeNimstrLit("A"), []);
				F.line = 450;
				add_child_234491(result_250574, a_250575);
				break;
			case 65:
			case 70:
				F.line = 452;
				result_250574 = a_250575;
				break;
			default: 
				F.line = 454;
				rawEcho(nimCharToStr(a_250575.kind));
				if (true) {
				F.line = 455;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(455, 14) `false` "));
				}
				
				break;
			}
		}
		
	framePtr = F.prev;

	return result_250574;

}

function init_deque_220220(initial_size_220224) {
	var result_220240 = {data: null, head: 0, tail: 0, count: 0, mask: 0};

	var F={procname:"initDeque.initDeque",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_220224))) {
		F.line = 58;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim(58, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 59;
		result_220240.mask = subInt(initial_size_220224, 1);
		F.line = 60;
		result_220240.data = new Array(chckRange(initial_size_220224, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_220224, 0, 2147483647);++i) {result_220240.data[i]=null;}	framePtr = F.prev;

	return result_220240;

}

function new_seq_221003(len_221007) {
	var result_221009 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_221009 = new Array(len_221007); for (var i=0;i<len_221007;++i) {result_221009[i]=null;}	framePtr = F.prev;

	return result_221009;

}

function expand_if_needed_220468(deq_220474) {
	var F={procname:"expandIfNeeded.expandIfNeeded",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		F.line = 129;
		var cap_220475 = addInt(deq_220474.mask, 1);
		if ((cap_220475 <= deq_220474.count)) {
		F.line = 131;
		var n_221033 = new_seq_221003(chckRange(mulInt(cap_220475, 2), 0, 2147483647));
		L1: do {
			F.line = 132;
			var i_221081 = 0;
			F.line = 132;
			var x_221082 = null;
			F.line = 110;
			var colontmp__221088 = {data: null, head: 0, tail: 0, count: 0, mask: 0};
			F.line = 132;
			nimCopy(colontmp__221088, deq_220474, NTI220227);
			F.line = 112;
			var i_221092 = colontmp__221088.head;
			L2: do {
				F.line = 113;
				var c_221094 = 0;
				F.line = 3616;
				var colontmp__221096 = 0;
				F.line = 113;
				colontmp__221096 = colontmp__221088.count;
				F.line = 3617;
				var i_221098 = 0;
				L3: do {
					F.line = 3618;
						L4: while (true) {
						if (!(i_221098 < colontmp__221096)) break L4;
							F.line = 3619;
							c_221094 = i_221098;
							F.line = 114;
							i_221081 = c_221094;
							F.line = 114;
							x_221082 = colontmp__221088.data[chckIndx(i_221092, 0, colontmp__221088.data.length+0-1)-0];
							F.line = 133;
							n_221033[chckIndx(i_221081, 0, n_221033.length+0-1)-0] = x_221082;
							F.line = 115;
							i_221092 = (addInt(i_221092, 1) & colontmp__221088.mask);
							F.line = 3620;
							i_221098 = addInt(i_221098, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 134;
		deq_220474.data = n_221033;
		F.line = 135;
		deq_220474.mask = subInt(mulInt(cap_220475, 2), 1);
		F.line = 136;
		deq_220474.tail = deq_220474.count;
		F.line = 137;
		deq_220474.head = 0;
		}
		
	framePtr = F.prev;

	
}

function add_last_220442(deq_220448, item_220450) {
	var F={procname:"addLast.addLast",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		F.line = 148;
		expand_if_needed_220468(deq_220448);
		F.line = 149;
		deq_220448.count = addInt(deq_220448.count, 1);
		F.line = 150;
		deq_220448.data[chckIndx(deq_220448.tail, 0, deq_220448.data.length+0-1)-0] = item_220450;
		F.line = 151;
		deq_220448.tail = (addInt(deq_220448.tail, 1) & deq_220448.mask);
	framePtr = F.prev;

	
}

function len_221365(deq_221370) {
	var result_221371 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_221371 = deq_221370.count;
	framePtr = F.prev;

	return result_221371;

}

function pop_first_221403(deq_221409) {
	var result_221410 = null;

	var F={procname:"popFirst.popFirst",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/deques.nim",line:0};
	framePtr = F;
		if ((deq_221409.count < 1)) {
		F.line = 2895;
		var e_222206 = null;
		F.line = 2896;
		e_222206 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 70;
		e_222206.message = nimCopy(null, makeNimstrLit("Empty deque."), NTI138);
		F.line = 2891;
		e_222206.parent = null;
		F.line = 70;
		raiseException(e_222206, "IndexError");
		}
		
		F.line = 169;
		deq_221409.count = subInt(deq_221409.count, 1);
		F.line = 170;
		result_221410 = deq_221409.data[chckIndx(deq_221409.head, 0, deq_221409.data.length+0-1)-0];
		F.line = 171;
deq_221409.data[chckIndx(deq_221409.head, 0, deq_221409.data.length+0-1)-0] = genericReset(deq_221409.data[chckIndx(deq_221409.head, 0, deq_221409.data.length+0-1)-0], NTI212017);
		F.line = 172;
		deq_221409.head = (addInt(deq_221409.head, 1) & deq_221409.mask);
	framePtr = F.prev;

	return result_221410;

}

function assign_id_212472(node_212474) {
	var F={procname:"grammar.assignId",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 162;
		var to_visit_220424 = [init_deque_220220(4)];
		F.line = 163;
		add_last_220442(to_visit_220424[0], node_212474);
		F.line = 164;
		var idx_221138 = 1;
		L1: do {
			F.line = 165;
				L2: while (true) {
				if (!(0 < len_221365(to_visit_220424[0]))) break L2;
					L3: do {
						F.line = 166;
						var node_222253 = pop_first_221403(to_visit_220424[0]);
						F.line = 167;
						node_222253.id = idx_221138;
						F.line = 168;
						idx_221138 = addInt(idx_221138, 1);
						if (is_grammar_terminator_212485(node_222253)) {
						F.line = 170;
						break L3;
						}
						
						L4: do {
							F.line = 171;
							var child_222273 = null;
							F.line = 3909;
							var colontmp__222304 = null;
							F.line = 171;
							colontmp__222304 = node_222253.children;
							F.line = 3911;
							var i_222307 = 0;
							F.line = 3912;
							var l_222309 = (colontmp__222304 != null ? colontmp__222304.length : 0);
							L5: do {
								F.line = 3913;
									L6: while (true) {
									if (!(i_222307 < l_222309)) break L6;
										F.line = 3914;
										child_222273 = colontmp__222304[chckIndx(i_222307, 0, colontmp__222304.length+0-1)-0];
										F.line = 172;
										add_last_220442(to_visit_220424[0], child_222273);
										F.line = 3915;
										i_222307 = addInt(i_222307, 1);
										if (!(((colontmp__222304 != null ? colontmp__222304.length : 0) == l_222309))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function pop_222358(s_222364, s_222364_Idx) {
	var result_222365 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_222373 = subInt((s_222364[s_222364_Idx] != null ? s_222364[s_222364_Idx].length : 0), 1);
		F.line = 2525;
		result_222365 = s_222364[s_222364_Idx][chckIndx(l_222373, 0, s_222364[s_222364_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_222364[s_222364_Idx].length < chckRange(l_222373, 0, 2147483647)) { for (var i=s_222364[s_222364_Idx].length;i<chckRange(l_222373, 0, 2147483647);++i) s_222364[s_222364_Idx].push(null); }
               else { s_222364[s_222364_Idx].length = chckRange(l_222373, 0, 2147483647); };
	framePtr = F.prev;

	return result_222365;

}

function is_valid_214572(s_214577) {
	var result_214578 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_214578 = (0 < (s_214577.data != null ? s_214577.data.length : 0));
	framePtr = F.prev;

	return result_214578;

}

function hash_143414(x_143416, x_143416_Idx) {
	var result_143417 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 85;
		      if (typeof x_143416 == "object") {
        if ("_NimID" in x_143416)
          result_143417 = x_143416["_NimID"];
        else {
          result_143417 = ++object_id_143246[0];
          x_143416["_NimID"] = result_143417;
        }
      }
    
	framePtr = F.prev;

	return result_143417;

}

function hash_212469(node_212471) {
	var result_234476 = 0;

	var F={procname:"grammar.hash",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 279;
		result_234476 = hash_143414(node_212471);
	framePtr = F.prev;

	return result_234476;

}

function is_filled_154282(hcode_154284) {
	var result_154285 = false;

	var F={procname:"sets.isFilled",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 63;
		result_154285 = !((hcode_154284 == 0));
	framePtr = F.prev;

	return result_154285;

}

function next_try_154431(h_154433, max_hash_154434) {
	var result_154435 = 0;

	var F={procname:"sets.nextTry",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 147;
		result_154435 = (addInt(h_154433, 1) & max_hash_154434);
	framePtr = F.prev;

	return result_154435;

}

function raw_get_215021(s_215026, key_215028, hc_215030, hc_215030_Idx) {
						var Tmp3;

	var result_215031 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_215035 = hash_212469(key_215028);
		if ((hc_215035 == 0)) {
		F.line = 164;
		hc_215035 = 314159265;
		}
		
		hc_215030[hc_215030_Idx] = hc_215035;
		F.line = 150;
		var h_215045 = (hc_215030[hc_215030_Idx] & (s_215026.data != null ? (s_215026.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_215026.data[chckIndx(h_215045, 0, s_215026.data.length+0-1)-0].Field0)) break L2;
						if (!(s_215026.data[chckIndx(h_215045, 0, s_215026.data.length+0-1)-0].Field0 == hc_215030[hc_215030_Idx])) Tmp3 = false; else {							Tmp3 = (s_215026.data[chckIndx(h_215045, 0, s_215026.data.length+0-1)-0].Field1 == key_215028);						}					if (Tmp3) {
					F.line = 157;
					result_215031 = h_215045;
					break BeforeRet;
					}
					
					F.line = 158;
					h_215045 = next_try_154431(h_215045, (s_215026.data != null ? (s_215026.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_215031 = subInt(-1, h_215045);
	} while (false);
	framePtr = F.prev;

	return result_215031;

}

function must_rehash_154361(length_154363, counter_154364) {
	var result_154365 = false;

	var F={procname:"sets.mustRehash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!((counter_154364 < length_154363))) {
		F.line = 134;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(134, 9) `\x0Acounter < length` "));
		}
		
		F.line = 135;
		result_154365 = ((mulInt(length_154363, 2) < mulInt(counter_154364, 3)) || (subInt(length_154363, counter_154364) < 4));
	framePtr = F.prev;

	return result_154365;

}

function raw_get_known_hc_217236(s_217241, key_217243, hc_217245) {
	var result_217246 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_217255 = (hc_217245 & (s_217241.data != null ? (s_217241.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_217241.data[chckIndx(h_217255, 0, s_217241.data.length+0-1)-0].Field0)) break L2;
					if (((s_217241.data[chckIndx(h_217255, 0, s_217241.data.length+0-1)-0].Field0 == hc_217245) && (s_217241.data[chckIndx(h_217255, 0, s_217241.data.length+0-1)-0].Field1 == key_217243))) {
					F.line = 157;
					result_217246 = h_217255;
					break BeforeRet;
					}
					
					F.line = 158;
					h_217255 = next_try_154431(h_217255, (s_217241.data != null ? (s_217241.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_217246 = subInt(-1, h_217255);
	} while (false);
	framePtr = F.prev;

	return result_217246;

}

function raw_insert_218645(s_218651, data_218655, data_218655_Idx, key_218657, hc_218659, h_218661) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 172;
		data_218655[data_218655_Idx][chckIndx(h_218661, 0, data_218655[data_218655_Idx].length+0-1)-0].Field1 = key_218657;
		F.line = 173;
		data_218655[data_218655_Idx][chckIndx(h_218661, 0, data_218655[data_218655_Idx].length+0-1)-0].Field0 = hc_218659;
	framePtr = F.prev;

	
}

function enlarge_216132(s_216138) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 225;
		var n_216143 = null;
		F.line = 226;
		n_216143 = new Array(chckRange(mulInt((s_216138.data != null ? s_216138.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_216138.data != null ? s_216138.data.length : 0), 2), 0, 2147483647);++i) {n_216143[i]={Field0: 0, Field1: null};}		F.line = 227;
		var Tmp1 = s_216138.data; s_216138.data = n_216143; n_216143 = Tmp1;		L2: do {
			F.line = 228;
			var i_216414 = 0;
			F.line = 2088;
			var colontmp__219211 = 0;
			F.line = 228;
			colontmp__219211 = (n_216143 != null ? (n_216143.length-1) : -1);
			F.line = 2094;
			var res_219214 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_219214 <= colontmp__219211)) break L4;
						F.line = 2096;
						i_216414 = res_219214;
						if (is_filled_154282(n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field0)) {
						F.line = 230;
						var j_218090 = subInt(-1, raw_get_known_hc_217236(s_216138, n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field1, n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field0));
						F.line = 231;
						raw_insert_218645(s_216138, s_216138, "data", n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field1, n_216143[chckIndx(i_216414, 0, n_216143.length+0-1)-0].Field0, j_218090);
						}
						
						F.line = 2097;
						res_219214 = addInt(res_219214, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_214544(s_214550, key_214552) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_214550))) {
		F.line = 265;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(265, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 234;
		var hc_215001 = [0];
		F.line = 235;
		var index_215881 = raw_get_215021(s_214550, key_214552, hc_215001, 0);
		if ((index_215881 < 0)) {
		if (must_rehash_154361((s_214550.data != null ? s_214550.data.length : 0), s_214550.counter)) {
		F.line = 238;
		enlarge_216132(s_214550);
		F.line = 239;
		index_215881 = raw_get_known_hc_217236(s_214550, key_214552, hc_215001[0]);
		}
		
		F.line = 240;
		raw_insert_218645(s_214550, s_214550, "data", key_214552, hc_215001[0], subInt(-1, index_215881));
		F.line = 241;
		s_214550.counter = addInt(s_214550.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function is_optional_212482(node_212484) {
		var Tmp1;

	var result_234522 = false;

	var F={procname:"grammar.isOptional",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 290;
		if ((node_212484.repeat == 1)) Tmp1 = true; else {			Tmp1 = (node_212484.repeat == 3);		}		result_234522 = Tmp1;
	framePtr = F.prev;

	return result_234522;

}

function incl_222782(s_222788, other_222791) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_222788))) {
		F.line = 279;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(279, 10) `isValid(s)` The set `s` needs to be initialized."));
		}
		
		if (!(is_valid_214572(other_222791))) {
		F.line = 280;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(280, 10) `isValid(other)` The set `other` needs to be initialized."));
		}
		
		L1: do {
			F.line = 281;
			var item_223976 = null;
			if (!(is_valid_214572(other_222791))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_224069 = 0;
				F.line = 2104;
				var colontmp__224071 = 0;
				F.line = 120;
				colontmp__224071 = (other_222791.data != null ? (other_222791.data.length-1) : -1);
				F.line = 2107;
				var res_224073 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_224073 <= colontmp__224071)) break L4;
							F.line = 2109;
							h_224069 = res_224073;
							if (is_filled_154282(other_222791.data[chckIndx(h_224069, 0, other_222791.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_223976 = other_222791.data[chckIndx(h_224069, 0, other_222791.data.length+0-1)-0].Field1;
							F.line = 281;
							incl_214544(s_222788, item_223976);
							}
							
							F.line = 2110;
							res_224073 = addInt(res_224073, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function find_219431(a_219436, item_219438) {
	var result_219439 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_219615 = null;
			F.line = 3911;
			var i_219639 = 0;
			F.line = 3912;
			var l_219641 = (a_219436 != null ? a_219436.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_219639 < l_219641)) break L3;
						F.line = 3914;
						i_219615 = a_219436[chckIndx(i_219639, 0, a_219436.length+0-1)-0];
						if ((i_219615 == item_219438)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_219439 = addInt(result_219439, 1);
						F.line = 3915;
						i_219639 = addInt(i_219639, 1);
						if (!(((a_219436 != null ? a_219436.length : 0) == l_219641))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_219439 = -1;
	} while (false);
	framePtr = F.prev;

	return result_219439;

}

function nsuJoinSep(a_136144, sep_136145) {
	var result_136146 = null;

		if ((0 < (a_136144 != null ? a_136144.length : 0))) {
		var l_136161 = ((sep_136145 != null ? sep_136145.length : 0) * ((a_136144 != null ? a_136144.length : 0) - 1));
		L1: do {
			var i_136180 = 0;
			var colontmp__136210 = 0;
			colontmp__136210 = (a_136144 != null ? (a_136144.length-1) : -1);
			var res_136213 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_136213 <= colontmp__136210)) break L3;
						i_136180 = res_136213;
						l_136161 += (a_136144[i_136180] != null ? a_136144[i_136180].length : 0);
						res_136213 += 1;
					}
			} while(false);
		} while(false);
		result_136146 = nimCopy(null, mnewString(0), NTI138);
		if (result_136146 != null) { result_136146 = (result_136146).concat(a_136144[0]); } else { result_136146 = a_136144[0].slice(); };
		L4: do {
			var i_136208 = 0;
			var colontmp__136218 = 0;
			colontmp__136218 = (a_136144 != null ? (a_136144.length-1) : -1);
			var res_136221 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_136221 <= colontmp__136218)) break L6;
						i_136208 = res_136221;
						if (result_136146 != null) { result_136146 = (result_136146).concat(sep_136145); } else { result_136146 = sep_136145.slice(); };
						if (result_136146 != null) { result_136146 = (result_136146).concat(a_136144[i_136208]); } else { result_136146 = a_136144[i_136208].slice(); };
						res_136221 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			result_136146 = nimCopy(null, [], NTI138);
		}
		

	return result_136146;

}

function new_seq_178023(len_178027) {
	var result_178029 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_178029 = new Array(len_178027); for (var i=0;i<len_178027;++i) {result_178029[i]=null;}	framePtr = F.prev;

	return result_178029;

}

function HEX2A_25022(x_25024, order_25025) {
	var result_25026 = 0;

	var F={procname:"algorithm.*",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 21;
		var y_25033 = subInt(order_25025, 1);
		F.line = 22;
		result_25026 = subInt((x_25024 ^ y_25033), y_25033);
	framePtr = F.prev;

	return result_25026;

}

function merge_241352(a_241358, b_241362, lo_241364, m_241366, hi_241368, cmp_241375, order_241377) {
	var F={procname:"merge.merge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((HEX2A_25022(cmp_241375(a_241358[chckIndx(m_241366, 0, a_241358.length+0-1)-0], a_241358[chckIndx(addInt(m_241366, 1), 0, a_241358.length+0-1)-0]), order_241377) <= 0)) {
		F.line = 197;
		break BeforeRet;
		}
		
		F.line = 198;
		var j_241378 = lo_241364;
		if (!((j_241378 <= m_241366))) {
		F.line = 200;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(200, 10) `j <= m` "));
		}
		
		F.line = 202;
		var bb_241602 = 0;
		L1: do {
			F.line = 203;
				L2: while (true) {
				if (!(j_241378 <= m_241366)) break L2;
					F.line = 204;
					b_241362[chckIndx(bb_241602, 0, b_241362.length+0-1)-0] = a_241358[chckIndx(j_241378, 0, a_241358.length+0-1)-0];
					F.line = 205;
					bb_241602 = addInt(bb_241602, 1);
					F.line = 206;
					j_241378 = addInt(j_241378, 1);
				}
		} while(false);
		F.line = 210;
		var i_241820 = 0;
		F.line = 211;
		var k_241821 = lo_241364;
		L3: do {
			F.line = 213;
				L4: while (true) {
				if (!((k_241821 < j_241378) && (j_241378 <= hi_241368))) break L4;
					if ((HEX2A_25022(cmp_241375(b_241362[chckIndx(i_241820, 0, b_241362.length+0-1)-0], a_241358[chckIndx(j_241378, 0, a_241358.length+0-1)-0]), order_241377) <= 0)) {
					F.line = 215;
					a_241358[chckIndx(k_241821, 0, a_241358.length+0-1)-0] = b_241362[chckIndx(i_241820, 0, b_241362.length+0-1)-0];
					F.line = 216;
					i_241820 = addInt(i_241820, 1);
					}
					else {
						F.line = 218;
						a_241358[chckIndx(k_241821, 0, a_241358.length+0-1)-0] = a_241358[chckIndx(j_241378, 0, a_241358.length+0-1)-0];
						F.line = 219;
						j_241378 = addInt(j_241378, 1);
					}
					
					F.line = 220;
					k_241821 = addInt(k_241821, 1);
				}
		} while(false);
		L5: do {
			F.line = 223;
				L6: while (true) {
				if (!(k_241821 < j_241378)) break L6;
					F.line = 224;
					a_241358[chckIndx(k_241821, 0, a_241358.length+0-1)-0] = b_241362[chckIndx(i_241820, 0, b_241362.length+0-1)-0];
					F.line = 225;
					k_241821 = addInt(k_241821, 1);
					F.line = 226;
					i_241820 = addInt(i_241820, 1);
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function sort_241310(a_241316, cmp_241323, order_241325) {
	var F={procname:"sort.sort",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 259;
		var n_241332 = (a_241316 != null ? a_241316.length : 0);
		F.line = 260;
		var b_241334 = null;
		F.line = 261;
		b_241334 = new Array(chckRange(divInt(n_241332, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_241332, 2), 0, 2147483647);++i) {b_241334[i]=null;}		F.line = 262;
		var s_241346 = 1;
		L1: do {
			F.line = 263;
				L2: while (true) {
				if (!(s_241346 < n_241332)) break L2;
					F.line = 264;
					var m_241347 = subInt(subInt(n_241332, 1), s_241346);
					L3: do {
						F.line = 265;
							L4: while (true) {
							if (!(0 <= m_241347)) break L4;
								F.line = 266;
								merge_241352(a_241316, b_241334, nimMax(addInt(subInt(m_241347, s_241346), 1), 0), m_241347, addInt(m_241347, s_241346), cmp_241323, order_241325);
								F.line = 267;
								m_241347 = subInt(m_241347, mulInt(s_241346, 2));
							}
					} while(false);
					F.line = 268;
					s_241346 = mulInt(s_241346, 2);
				}
		} while(false);
	framePtr = F.prev;

	
}

function sorted_241255(a_241260, cmp_241267, order_241269) {
	var result_241271 = null;

	var F={procname:"sorted.sorted",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 273;
		result_241271 = nimCopy(null, new_seq_178023(chckRange((a_241260 != null ? a_241260.length : 0), 0, 2147483647)), NTI178028);
		L1: do {
			F.line = 274;
			var i_241304 = 0;
			F.line = 2104;
			var colontmp__242660 = 0;
			F.line = 274;
			colontmp__242660 = (a_241260 != null ? (a_241260.length-1) : -1);
			F.line = 2107;
			var res_242663 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_242663 <= colontmp__242660)) break L3;
						F.line = 2109;
						i_241304 = res_242663;
						F.line = 275;
						result_241271[chckIndx(i_241304, 0, result_241271.length+0-1)-0] = nimCopy(null, a_241260[chckIndx(i_241304, 0, a_241260.length+0-1)-0], NTI138);
						F.line = 2110;
						res_242663 = addInt(res_242663, 1);
					}
			} while(false);
		} while(false);
		F.line = 276;
		sort_241310(result_241271, cmp_241267, order_241269);
	framePtr = F.prev;

	return result_241271;

}

function init_195538(s_195544, initial_size_195546) {
	var F={procname:"init.init",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_195546))) {
		F.line = 400;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(400, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 401;
		s_195544.counter = 0;
		F.line = 402;
		s_195544.data = new Array(chckRange(initial_size_195546, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_195546, 0, 2147483647);++i) {s_195544.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_195512(initial_size_195516) {
	var result_195518 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 414;
		init_195538(result_195518[0], initial_size_195516);
	framePtr = F.prev;

	return result_195518[0];

}

function is_valid_195940(s_195945) {
	var result_195946 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_195946 = (0 < (s_195945.data != null ? s_195945.data.length : 0));
	framePtr = F.prev;

	return result_195946;

}

function raw_get_196221(s_196226, key_196228, hc_196230, hc_196230_Idx) {
						var Tmp3;

	var result_196231 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_196237 = hash_143900(key_196228);
		if ((hc_196237 == 0)) {
		F.line = 164;
		hc_196237 = 314159265;
		}
		
		hc_196230[hc_196230_Idx] = hc_196237;
		F.line = 150;
		var h_196247 = (hc_196230[hc_196230_Idx] & (s_196226.data != null ? (s_196226.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_196226.data[chckIndx(h_196247, 0, s_196226.data.length+0-1)-0].Field0)) break L2;
						if (!(s_196226.data[chckIndx(h_196247, 0, s_196226.data.length+0-1)-0].Field0 == hc_196230[hc_196230_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(s_196226.data[chckIndx(h_196247, 0, s_196226.data.length+0-1)-0].Field1, key_196228);						}					if (Tmp3) {
					F.line = 157;
					result_196231 = h_196247;
					break BeforeRet;
					}
					
					F.line = 158;
					h_196247 = next_try_154431(h_196247, (s_196226.data != null ? (s_196226.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_196231 = subInt(-1, h_196247);
	} while (false);
	framePtr = F.prev;

	return result_196231;

}

function raw_get_known_hc_198206(s_198211, key_198213, hc_198215) {
	var result_198216 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_198225 = (hc_198215 & (s_198211.data != null ? (s_198211.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_198211.data[chckIndx(h_198225, 0, s_198211.data.length+0-1)-0].Field0)) break L2;
					if (((s_198211.data[chckIndx(h_198225, 0, s_198211.data.length+0-1)-0].Field0 == hc_198215) && eqStrings(s_198211.data[chckIndx(h_198225, 0, s_198211.data.length+0-1)-0].Field1, key_198213))) {
					F.line = 157;
					result_198216 = h_198225;
					break BeforeRet;
					}
					
					F.line = 158;
					h_198225 = next_try_154431(h_198225, (s_198211.data != null ? (s_198211.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_198216 = subInt(-1, h_198225);
	} while (false);
	framePtr = F.prev;

	return result_198216;

}

function raw_insert_199447(s_199453, data_199457, data_199457_Idx, key_199459, hc_199461, h_199463) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 172;
		data_199457[data_199457_Idx][chckIndx(h_199463, 0, data_199457[data_199457_Idx].length+0-1)-0].Field1 = nimCopy(null, key_199459, NTI138);
		F.line = 173;
		data_199457[data_199457_Idx][chckIndx(h_199463, 0, data_199457[data_199457_Idx].length+0-1)-0].Field0 = hc_199461;
	framePtr = F.prev;

	
}

function enlarge_197214(s_197220) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 225;
		var n_197225 = null;
		F.line = 226;
		n_197225 = new Array(chckRange(mulInt((s_197220.data != null ? s_197220.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_197220.data != null ? s_197220.data.length : 0), 2), 0, 2147483647);++i) {n_197225[i]={Field0: 0, Field1: null};}		F.line = 227;
		var Tmp1 = s_197220.data; s_197220.data = n_197225; n_197225 = Tmp1;		L2: do {
			F.line = 228;
			var i_197480 = 0;
			F.line = 2088;
			var colontmp__199949 = 0;
			F.line = 228;
			colontmp__199949 = (n_197225 != null ? (n_197225.length-1) : -1);
			F.line = 2094;
			var res_199952 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_199952 <= colontmp__199949)) break L4;
						F.line = 2096;
						i_197480 = res_199952;
						if (is_filled_154282(n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field0)) {
						F.line = 230;
						var j_198956 = subInt(-1, raw_get_known_hc_198206(s_197220, n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field1, n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field0));
						F.line = 231;
						raw_insert_199447(s_197220, s_197220, "data", n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field1, n_197225[chckIndx(i_197480, 0, n_197225.length+0-1)-0].Field0, j_198956);
						}
						
						F.line = 2097;
						res_199952 = addInt(res_199952, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_195912(s_195918, key_195920) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_195940(s_195918))) {
		F.line = 265;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(265, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 234;
		var hc_196201 = [0];
		F.line = 235;
		var index_196979 = raw_get_196221(s_195918, key_195920, hc_196201, 0);
		if ((index_196979 < 0)) {
		if (must_rehash_154361((s_195918.data != null ? s_195918.data.length : 0), s_195918.counter)) {
		F.line = 238;
		enlarge_197214(s_195918);
		F.line = 239;
		index_196979 = raw_get_known_hc_198206(s_195918, key_195920, hc_196201[0]);
		}
		
		F.line = 240;
		raw_insert_199447(s_195918, s_195918, "data", key_195920, hc_196201[0], subInt(-1, index_196979));
		F.line = 241;
		s_195918.counter = addInt(s_195918.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function map_241025(data_241031, op_241036) {
	var result_241038 = [{data: null, counter: 0}];

	var F={procname:"map.map",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 617;
		nimCopy(result_241038[0], init_set_195512(64), NTI195492);
		L1: do {
			F.line = 618;
			var item_241054 = null;
			if (!(is_valid_214572(data_241031))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_241148 = 0;
				F.line = 2104;
				var colontmp__241150 = 0;
				F.line = 120;
				colontmp__241150 = (data_241031.data != null ? (data_241031.data.length-1) : -1);
				F.line = 2107;
				var res_241152 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_241152 <= colontmp__241150)) break L4;
							F.line = 2109;
							h_241148 = res_241152;
							if (is_filled_154282(data_241031.data[chckIndx(h_241148, 0, data_241031.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_241054 = data_241031.data[chckIndx(h_241148, 0, data_241031.data.length+0-1)-0].Field1;
							F.line = 618;
							incl_195912(result_241038[0], op_241036(item_241054));
							}
							
							F.line = 2110;
							res_241152 = addInt(res_241152, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_241038[0];

}

function cmpStrings(a_16418, b_16419) {
		    if (a_16418 == b_16419) return 0;
    if (!a_16418) return -1;
    if (!b_16419) return 1;
    for (var i = 0; i < a_16418.length && i < b_16419.length; i++) {
      var result = a_16418[i] - b_16419[i];
      if (result != 0) return result;
    }
    return a_16418.length - b_16419.length;
  

	
}

function cmp_7058(x_7060, y_7061) {
	var result_16438 = 0;

	BeforeRet: do {
		result_16438 = cmpStrings(x_7060, y_7061);
		break BeforeRet;
	} while (false);

	return result_16438;

}

function is_undefined_18485(x_18489) {
	var result_18490 = false;

	var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 34;
		result_18490 = x_18489 === undefined;
	framePtr = F.prev;

	return result_18490;

}

function substr_eq_132789(s_132791, pos_132792, substr_132793) {
	var result_132794 = false;

	BeforeRet: do {
		var i_132796 = 0;
		var length_132797 = (substr_132793 != null ? substr_132793.length : 0);
		L1: do {
				L2: while (true) {
				if (!((i_132796 < length_132797) && (s_132791[(pos_132792 + i_132796)] == substr_132793[i_132796]))) break L2;
					i_132796 += 1;
				}
		} while(false);
		result_132794 = (i_132796 == length_132797);
		break BeforeRet;
	} while (false);

	return result_132794;

}

function substr_23422(s_23424, first_23425, last_23426) {
	var result_23427 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4263;
		var first_23428 = nimMax(first_23425, 0);
		F.line = 4264;
		var l_23430 = nimMax(addInt(subInt(nimMin(last_23426, (s_23424 != null ? (s_23424.length-1) : -1)), first_23428), 1), 0);
		F.line = 4265;
		result_23427 = nimCopy(null, mnewString(chckRange(l_23430, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4266;
			var i_23442 = 0;
			F.line = 2104;
			var colontmp__23444 = 0;
			F.line = 4266;
			colontmp__23444 = subInt(l_23430, 1);
			F.line = 2107;
			var res_23447 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_23447 <= colontmp__23444)) break L3;
						F.line = 2109;
						i_23442 = res_23447;
						F.line = 4267;
						result_23427[chckIndx(i_23442, 0, result_23427.length+0-1)-0] = s_23424[chckIndx(addInt(i_23442, first_23428), 0, s_23424.length+0-1)-0];
						F.line = 2110;
						res_23447 = addInt(res_23447, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_23427;

}

function HEX24_212438(grammar_node_212440) {

		function HEX3Aanonymous_234607(n_234609) {
			var result_234610 = null;

			var F={procname:"$.:anonymous",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
			framePtr = F;
				F.line = 308;
				result_234610 = nimCopy(null, cstrToNimstr((n_234609.id)+""), NTI138);
			framePtr = F.prev;

			return result_234610;

		}

	var result_234557 = null;

	var F={procname:"grammar.$",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((grammar_node_212440 == success_grammar_node_212501)) {
		F.line = 295;
		result_234557 = nimCopy(null, makeNimstrLit("$$SUCCESS_GRAMMAR_NODE$$"), NTI138);
		break BeforeRet;
		}
		
		F.line = 296;
		var string_seq_234569 = null;
		F.line = 297;
		F.line = 297;
		var fmt_res_234572 = mnewString(0);
		F.line = 297;
		if (fmt_res_234572 != null) { fmt_res_234572 = (fmt_res_234572).concat(makeNimstrLit("(")); } else { fmt_res_234572 = makeNimstrLit("("); };
		F.line = 270;
		if (fmt_res_234572 != null) { fmt_res_234572 = (fmt_res_234572).concat(cstrToNimstr((grammar_node_212440.id)+"")); } else { fmt_res_234572 = cstrToNimstr((grammar_node_212440.id)+"").slice(); };
		F.line = 297;
		if (fmt_res_234572 != null) { fmt_res_234572 = (fmt_res_234572).concat(makeNimstrLit(")")); } else { fmt_res_234572 = makeNimstrLit(")"); };
		var head_234601 = nimCopy(null, fmt_res_234572, NTI138);
		F.line = 298;
		var tail_234602 = null;
		F.line = 299;
		switch (grammar_node_212440.repeat) {
		case 0:
			break;
		case 1:
			F.line = 303;
			tail_234602 = nimCopy(null, makeNimstrLit("*"), NTI138);
			break;
		case 2:
			F.line = 305;
			tail_234602 = nimCopy(null, makeNimstrLit("+"), NTI138);
			break;
		case 3:
			F.line = 307;
			tail_234602 = nimCopy(null, makeNimstrLit("?"), NTI138);
			break;
		}
		F.line = 308;
		var map_proc_234624 = HEX3Aanonymous_234607;
		F.line = 309;
		switch (grammar_node_212440.kind) {
		case 97:
			F.line = 311;
			F.line = 532;
			var result_241191 = nimCopy(null, [], NTI241189);
			L1: do {
				F.line = 533;
				var x_241236 = null;
				F.line = 100;
				var colontmp__249453 = {data: null, counter: 0};
				F.line = 311;
				nimCopy(colontmp__249453, map_241025(grammar_node_212440.nextSet, map_proc_234624), NTI195492);
				if (!(is_valid_195940(colontmp__249453))) {
				F.line = 119;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
				}
				
				L2: do {
					F.line = 120;
					var h_249457 = 0;
					F.line = 2104;
					var colontmp__249459 = 0;
					F.line = 120;
					colontmp__249459 = (colontmp__249453.data != null ? (colontmp__249453.data.length-1) : -1);
					F.line = 2107;
					var res_249461 = 0;
					L3: do {
						F.line = 2108;
							L4: while (true) {
							if (!(res_249461 <= colontmp__249459)) break L4;
								F.line = 2109;
								h_249457 = res_249461;
								if (is_filled_154282(colontmp__249453.data[chckIndx(h_249457, 0, colontmp__249453.data.length+0-1)-0].Field0)) {
								F.line = 121;
								x_241236 = colontmp__249453.data[chckIndx(h_249457, 0, colontmp__249453.data.length+0-1)-0].Field1;
								F.line = 534;
								var Tmp5 = nimCopy(null, x_241236, NTI138);
								if (result_241191 != null) { result_241191.push(Tmp5); } else { result_241191 = [Tmp5]; };
								}
								
								F.line = 2110;
								res_249461 = addInt(res_249461, 1);
							}
					} while(false);
				} while(false);
			} while(false);
			var next_set_242680 = nsuJoinSep(sorted_241255(result_241191, cmp_7058, 1), makeNimstrLit(", "));
			F.line = 312;
			F.line = 312;
			var fmt_res_242683 = mnewString(0);
			F.line = 312;
			if (fmt_res_242683 != null) { fmt_res_242683 = (fmt_res_242683).concat(makeNimstrLit("<")); } else { fmt_res_242683 = makeNimstrLit("<"); };
			F.line = 260;
			if (fmt_res_242683 != null) { fmt_res_242683 = (fmt_res_242683).concat(next_set_242680); } else { fmt_res_242683 = next_set_242680.slice(); };
			F.line = 312;
			if (fmt_res_242683 != null) { fmt_res_242683 = (fmt_res_242683).concat(makeNimstrLit(">")); } else { fmt_res_242683 = makeNimstrLit(">"); };
			if (tail_234602 != null) { tail_234602 = (tail_234602).concat(fmt_res_242683); } else { tail_234602 = fmt_res_242683.slice(); };
			break;
		case 65:
		case 70:
			F.line = 314;
			F.line = 532;
			var result_249260 = nimCopy(null, [], NTI249258);
			L6: do {
				F.line = 533;
				var x_249304 = null;
				F.line = 100;
				var colontmp__249465 = {data: null, counter: 0};
				F.line = 314;
				nimCopy(colontmp__249465, map_241025(grammar_node_212440.epsilonSet, map_proc_234624), NTI195492);
				if (!(is_valid_195940(colontmp__249465))) {
				F.line = 119;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
				}
				
				L7: do {
					F.line = 120;
					var h_249469 = 0;
					F.line = 2104;
					var colontmp__249471 = 0;
					F.line = 120;
					colontmp__249471 = (colontmp__249465.data != null ? (colontmp__249465.data.length-1) : -1);
					F.line = 2107;
					var res_249473 = 0;
					L8: do {
						F.line = 2108;
							L9: while (true) {
							if (!(res_249473 <= colontmp__249471)) break L9;
								F.line = 2109;
								h_249469 = res_249473;
								if (is_filled_154282(colontmp__249465.data[chckIndx(h_249469, 0, colontmp__249465.data.length+0-1)-0].Field0)) {
								F.line = 121;
								x_249304 = colontmp__249465.data[chckIndx(h_249469, 0, colontmp__249465.data.length+0-1)-0].Field1;
								F.line = 534;
								var Tmp10 = nimCopy(null, x_249304, NTI138);
								if (result_249260 != null) { result_249260.push(Tmp10); } else { result_249260 = [Tmp10]; };
								}
								
								F.line = 2110;
								res_249473 = addInt(res_249473, 1);
							}
					} while(false);
				} while(false);
			} while(false);
			var epsilon_set_249339 = nsuJoinSep(sorted_241255(result_249260, cmp_7058, 1), makeNimstrLit(", "));
			F.line = 315;
			F.line = 315;
			var fmt_res_249342 = mnewString(0);
			F.line = 315;
			if (fmt_res_249342 != null) { fmt_res_249342 = (fmt_res_249342).concat(makeNimstrLit("<")); } else { fmt_res_249342 = makeNimstrLit("<"); };
			F.line = 260;
			if (fmt_res_249342 != null) { fmt_res_249342 = (fmt_res_249342).concat(epsilon_set_249339); } else { fmt_res_249342 = epsilon_set_249339.slice(); };
			F.line = 315;
			if (fmt_res_249342 != null) { fmt_res_249342 = (fmt_res_249342).concat(makeNimstrLit(">")); } else { fmt_res_249342 = makeNimstrLit(">"); };
			if (tail_234602 != null) { tail_234602 = (tail_234602).concat(fmt_res_249342); } else { tail_234602 = fmt_res_249342.slice(); };
			break;
		default: 
			break;
		}
		F.line = 318;
		var name_249401 = null;
		F.line = 319;
		switch (grammar_node_212440.kind) {
		case 97:
			F.line = 321;
			name_249401 = nimCopy(null, reprEnum(grammar_node_212440.token, NTI202995), NTI138);
			break;
		default: 
			F.line = 323;
			name_249401 = nimCopy(null, nimCharToStr(grammar_node_212440.kind), NTI138);
			break;
		}
		F.line = 324;
		if (string_seq_234569 != null) { string_seq_234569.push((head_234601).concat(name_249401,tail_234602)); } else { string_seq_234569 = [(head_234601).concat(name_249401,tail_234602)]; };
		if (!(is_grammar_terminator_212485(grammar_node_212440))) {
		L11: do {
			F.line = 326;
			var child_249429 = null;
			F.line = 3909;
			var colontmp__249488 = null;
			F.line = 326;
			colontmp__249488 = grammar_node_212440.children;
			F.line = 3911;
			var i_249491 = 0;
			F.line = 3912;
			var l_249493 = (colontmp__249488 != null ? colontmp__249488.length : 0);
			L12: do {
				F.line = 3913;
					L13: while (true) {
					if (!(i_249491 < l_249493)) break L13;
						F.line = 3914;
						child_249429 = colontmp__249488[chckIndx(i_249491, 0, colontmp__249488.length+0-1)-0];
						L14: do {
							if ((child_249429 == null)) {
							F.line = 328;
							break L14;
							}
							
							L15: do {
								F.line = 329;
								var substr_249441 = null;
								F.line = 597;
								var colontmp__249479 = null;
								F.line = 329;
								colontmp__249479 = HEX24_212438(child_249429);
								F.line = 455;
								var last_249483 = 0;
								F.line = 456;
								var splits_249485 = -1;
								L16: do {
									F.line = 614;
										L17: while (true) {
										if (!(last_249483 <= (colontmp__249479 != null ? colontmp__249479.length : 0))) break L17;
											F.line = 459;
											var first_249487 = last_249483;
											L18: do {
												F.line = 460;
													L19: while (true) {
													if (!((last_249483 < (colontmp__249479 != null ? colontmp__249479.length : 0)) && !(substr_eq_132789(colontmp__249479, last_249483, makeNimstrLit("\x0A"))))) break L19;
														F.line = 461;
														last_249483 = addInt(last_249483, 1);
													}
											} while(false);
											if ((splits_249485 == 0)) {
											F.line = 462;
											last_249483 = (colontmp__249479 != null ? colontmp__249479.length : 0);
											}
											
											F.line = 463;
											substr_249441 = substr_23422(colontmp__249479, first_249487, subInt(last_249483, 1));
											F.line = 330;
											if (string_seq_234569 != null) { string_seq_234569.push((makeNimstrLit("    ")).concat(substr_249441)); } else { string_seq_234569 = [(makeNimstrLit("    ")).concat(substr_249441)]; };
											if ((splits_249485 == 0)) {
											F.line = 464;
											break L16;
											}
											
											F.line = 465;
											splits_249485 = subInt(splits_249485, 1);
											F.line = 466;
											last_249483 = addInt(last_249483, 1);
										}
								} while(false);
							} while(false);
						} while(false);
						F.line = 3915;
						i_249491 = addInt(i_249491, 1);
						if (!(((colontmp__249488 != null ? colontmp__249488.length : 0) == l_249493))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 331;
		result_234557 = nimCopy(null, nsuJoinSep(string_seq_234569, makeNimstrLit("\x0A")), NTI138);
	} while (false);
	framePtr = F.prev;

	return result_234557;

}

function next_in_tree_212475(node_212477) {
							var Tmp3;
							var Tmp4;

	var result_214443 = [{data: null, counter: 0}];

	var F={procname:"grammar.nextInTree",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 134;
		nimCopy(result_214443[0], init_set_212530(64), NTI212034);
		F.line = 135;
		var cur_node_214452 = node_212477;
		L1: do {
			F.line = 136;
				L2: while (true) {
				if (!true) break L2;
					F.line = 137;
					var father_214453 = cur_node_214452.father;
					if ((father_214453 == null)) {
					F.line = 139;
					incl_214544(result_214443[0], success_grammar_node_212501);
					F.line = 140;
					break L1;
					}
					
					F.line = 141;
					switch (father_214453.kind) {
					case 70:
							if ((father_214453.repeat == 2)) Tmp3 = true; else {								Tmp3 = (father_214453.repeat == 1);							}						if (Tmp3) {
						F.line = 144;
						incl_214544(result_214443[0], father_214453);
						}
						
						F.line = 145;
						cur_node_214452 = father_214453;
						break;
					case 65:
						F.line = 147;
						var idx_219655 = find_219431(father_214453.children, cur_node_214452);
						if (!(!((idx_219655 == -1)))) {
						F.line = 148;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(148, 14) `\x0Anot (idx == -1)` "));
						}
						
						if ((idx_219655 == subInt((father_214453.children != null ? father_214453.children.length : 0), 1))) {
							if ((father_214453.repeat == 2)) Tmp4 = true; else {								Tmp4 = (father_214453.repeat == 1);							}						if (Tmp4) {
						F.line = 151;
						incl_214544(result_214443[0], father_214453);
						}
						
						F.line = 152;
						cur_node_214452 = father_214453;
						}
						else {
							F.line = 154;
							incl_214544(result_214443[0], father_214453.children[chckIndx(addInt(idx_219655, 1), 0, father_214453.children.length+0-1)-0]);
							F.line = 155;
							break L1;
						}
						
						break;
					default: 
						F.line = 157;
						rawEcho(HEX24_212438(cur_node_214452));
						F.line = 158;
						rawEcho(HEX24_212438(father_214453));
						if (true) {
						F.line = 159;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(159, 14) `false` "));
						}
						
						break;
					}
				}
		} while(false);
	framePtr = F.prev;

	return result_214443[0];

}

function contains_224741(s_224746, key_224748) {
	var result_224749 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_224746))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_224801 = [0];
		F.line = 217;
		var index_224832 = raw_get_215021(s_224746, key_224748, hc_224801, 0);
		F.line = 218;
		result_224749 = (0 <= index_224832);
	framePtr = F.prev;

	return result_224749;

}

function len_225101(s_225106) {
	var result_225107 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 91;
		result_225107 = s_225106.counter;
	framePtr = F.prev;

	return result_225107;

}

function is_empty_154265(hcode_154267) {
	var result_154268 = false;

	var F={procname:"sets.isEmpty",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 60;
		result_154268 = (hcode_154267 == 0);
	framePtr = F.prev;

	return result_154268;

}

function excl_impl_226628(s_226634, key_226636) {
									var Tmp5;
									var Tmp6;
									var Tmp7;
										var Tmp8;
										var Tmp9;

	var result_226637 = false;

	var F={procname:"exclImpl.exclImpl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(is_valid_214572(s_226634))) {
		F.line = 293;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(293, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 294;
		var hc_226801 = [0];
		F.line = 295;
		var i_226832 = raw_get_215021(s_226634, key_226636, hc_226801, 0);
		F.line = 296;
		var msk_226841 = (s_226634.data != null ? (s_226634.data.length-1) : -1);
		F.line = 297;
		result_226637 = true;
		if ((0 <= i_226832)) {
		F.line = 300;
		result_226637 = false;
		F.line = 301;
		s_226634.counter = subInt(s_226634.counter, 1);
		L1: do {
			F.line = 302;
				L2: while (true) {
				if (!true) break L2;
					F.line = 303;
					var j_226852 = i_226832;
					F.line = 304;
					var r_226853 = j_226852;
					F.line = 305;
					s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field0 = 0;
					F.line = 306;
					F.line = 289;
					var v_227661 = null;
					s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field1 = v_227661;
					L3: do {
						F.line = 307;
							L4: while (true) {
							if (!true) break L4;
								F.line = 308;
								i_226832 = (addInt(i_226832, 1) & msk_226841);
								if (is_empty_154265(s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field0)) {
								F.line = 310;
								break BeforeRet;
								}
								
								F.line = 311;
								r_226853 = (s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0].Field0 & msk_226841);
									if (!(r_226853 <= i_226832)) Tmp7 = false; else {										Tmp7 = (j_226852 < r_226853);									}									if (Tmp7) Tmp6 = true; else {										if (!(j_226852 < r_226853)) Tmp8 = false; else {											Tmp8 = (i_226832 < j_226852);										}										Tmp6 = Tmp8;									}									if (Tmp6) Tmp5 = true; else {										if (!(i_226832 < j_226852)) Tmp9 = false; else {											Tmp9 = (r_226853 <= i_226832);										}										Tmp5 = Tmp9;									}								if (!(Tmp5)) {
								F.line = 286;
								break L3;
								}
								
							}
					} while(false);
					F.line = 312;
					nimCopy(s_226634.data[chckIndx(j_226852, 0, s_226634.data.length+0-1)-0], s_226634.data[chckIndx(i_226832, 0, s_226634.data.length+0-1)-0], NTI212040);
				}
		} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	return result_226637;

}

function excl_226299(s_226305, other_226308) {
	var F={procname:"excl.excl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_214572(s_226305))) {
		F.line = 350;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(350, 10) `isValid(s)` The set `s` needs to be initialized."));
		}
		
		if (!(is_valid_214572(other_226308))) {
		F.line = 351;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(351, 10) `isValid(other)` The set `other` needs to be initialized."));
		}
		
		L1: do {
			F.line = 352;
			var item_226608 = null;
			if (!(is_valid_214572(other_226308))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_228749 = 0;
				F.line = 2104;
				var colontmp__228751 = 0;
				F.line = 120;
				colontmp__228751 = (other_226308.data != null ? (other_226308.data.length-1) : -1);
				F.line = 2107;
				var res_228753 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_228753 <= colontmp__228751)) break L4;
							F.line = 2109;
							h_228749 = res_228753;
							if (is_filled_154282(other_226308.data[chckIndx(h_228749, 0, other_226308.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_226608 = other_226308.data[chckIndx(h_228749, 0, other_226308.data.length+0-1)-0].Field1;
							F.line = 352;
							excl_impl_226628(s_226305, item_226608);
							}
							
							F.line = 2110;
							res_228753 = addInt(res_228753, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function gen_epsilon_set_212491(root_212493) {
	var F={procname:"grammar.genEpsilonSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 176;
		var to_visit_222338 = [[root_212493]];
		F.line = 177;
		var all_node_222347 = [init_set_212530(64)];
		L1: do {
			F.line = 179;
				L2: while (true) {
				if (!(0 < (to_visit_222338[0] != null ? to_visit_222338[0].length : 0))) break L2;
					F.line = 180;
					var cur_node_222398 = pop_222358(to_visit_222338, 0);
					F.line = 181;
					incl_214544(all_node_222347[0], cur_node_222398);
					F.line = 182;
					switch (cur_node_222398.kind) {
					case 70:
						L3: do {
							F.line = 184;
							var child_222497 = null;
							F.line = 3909;
							var colontmp__228772 = null;
							F.line = 184;
							colontmp__228772 = cur_node_222398.children;
							F.line = 3911;
							var i_228775 = 0;
							F.line = 3912;
							var l_228777 = (colontmp__228772 != null ? colontmp__228772.length : 0);
							L4: do {
								F.line = 3913;
									L5: while (true) {
									if (!(i_228775 < l_228777)) break L5;
										F.line = 3914;
										child_222497 = colontmp__228772[chckIndx(i_228775, 0, colontmp__228772.length+0-1)-0];
										F.line = 185;
										incl_214544(cur_node_222398.epsilonSet, child_222497);
										F.line = 3915;
										i_228775 = addInt(i_228775, 1);
										if (!(((colontmp__228772 != null ? colontmp__228772.length : 0) == l_228777))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						break;
					case 65:
						F.line = 187;
						incl_214544(cur_node_222398.epsilonSet, cur_node_222398.children[chckIndx(0, 0, cur_node_222398.children.length+0-1)-0]);
						if (is_optional_212482(cur_node_222398)) {
						F.line = 189;
						incl_222782(cur_node_222398.epsilonSet, next_in_tree_212475(cur_node_222398));
						}
						
						L6: do {
							F.line = 190;
							var child_224099 = null;
							F.line = 3909;
							var colontmp__228779 = null;
							F.line = 190;
							colontmp__228779 = cur_node_222398.children;
							F.line = 3911;
							var i_228782 = 0;
							F.line = 3912;
							var l_228784 = (colontmp__228779 != null ? colontmp__228779.length : 0);
							L7: do {
								F.line = 3913;
									L8: while (true) {
									if (!(i_228782 < l_228784)) break L8;
										F.line = 3914;
										child_224099 = colontmp__228779[chckIndx(i_228782, 0, colontmp__228779.length+0-1)-0];
										if (is_optional_212482(child_224099)) {
										F.line = 192;
										incl_222782(child_224099.epsilonSet, next_in_tree_212475(child_224099));
										}
										
										F.line = 3915;
										i_228782 = addInt(i_228782, 1);
										if (!(((colontmp__228779 != null ? colontmp__228779.length : 0) == l_228784))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						break;
					case 97:
						break;
					default: 
						F.line = 196;
						rawEcho(nimCharToStr(cur_node_222398.kind));
						if (true) {
						F.line = 197;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(197, 14) `false` "));
						}
						
						break;
					}
					if (!(is_grammar_terminator_212485(cur_node_222398))) {
					L9: do {
						F.line = 199;
						var child_224411 = null;
						F.line = 3909;
						var colontmp__228786 = null;
						F.line = 199;
						colontmp__228786 = cur_node_222398.children;
						F.line = 3911;
						var i_228789 = 0;
						F.line = 3912;
						var l_228791 = (colontmp__228786 != null ? colontmp__228786.length : 0);
						L10: do {
							F.line = 3913;
								L11: while (true) {
								if (!(i_228789 < l_228791)) break L11;
									F.line = 3914;
									child_224411 = colontmp__228786[chckIndx(i_228789, 0, colontmp__228786.length+0-1)-0];
									F.line = 200;
									if (to_visit_222338[0] != null) { to_visit_222338[0].push(child_224411); } else { to_visit_222338[0] = [child_224411]; };
									F.line = 3915;
									i_228789 = addInt(i_228789, 1);
									if (!(((colontmp__228786 != null ? colontmp__228786.length : 0) == l_228791))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					
				}
		} while(false);
		F.line = 203;
		var collected_224430 = [init_set_212530(64)];
		F.line = 204;
		incl_214544(collected_224430[0], success_grammar_node_212501);
		L12: do {
			F.line = 205;
			var cur_node_224527 = null;
			if (!(is_valid_214572(all_node_222347[0]))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L13: do {
				F.line = 120;
				var h_228847 = 0;
				F.line = 2104;
				var colontmp__228849 = 0;
				F.line = 120;
				colontmp__228849 = (all_node_222347[0].data != null ? (all_node_222347[0].data.length-1) : -1);
				F.line = 2107;
				var res_228851 = 0;
				L14: do {
					F.line = 2108;
						L15: while (true) {
						if (!(res_228851 <= colontmp__228849)) break L15;
							F.line = 2109;
							h_228847 = res_228851;
							if (is_filled_154282(all_node_222347[0].data[chckIndx(h_228847, 0, all_node_222347[0].data.length+0-1)-0].Field0)) {
							F.line = 121;
							cur_node_224527 = all_node_222347[0].data[chckIndx(h_228847, 0, all_node_222347[0].data.length+0-1)-0].Field1;
							L16: do {
								if (!(contains_224741(collected_224430[0], cur_node_224527))) {
								F.line = 207;
								if (to_visit_222338[0] != null) { to_visit_222338[0].push(cur_node_224527); } else { to_visit_222338[0] = [cur_node_224527]; };
								}
								
								L17: do {
									F.line = 208;
										L18: while (true) {
										if (!(0 < (to_visit_222338[0] != null ? to_visit_222338[0].length : 0))) break L18;
											L19: do {
												F.line = 209;
												var cur_node_224875 = pop_222358(to_visit_222338, 0);
												if ((len_225101(cur_node_224875.epsilonSet) == 0)) {
												F.line = 211;
												incl_214544(collected_224430[0], cur_node_224875);
												F.line = 212;
												break L19;
												}
												
												F.line = 213;
												var all_children_collected_225210 = true;
												L20: do {
													F.line = 214;
													var child_225218 = null;
													F.line = 100;
													var colontmp__228797 = {data: null, counter: 0};
													F.line = 214;
													nimCopy(colontmp__228797, cur_node_224875.epsilonSet, NTI212034);
													if (!(is_valid_214572(colontmp__228797))) {
													F.line = 119;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
													}
													
													L21: do {
														F.line = 120;
														var h_228801 = 0;
														F.line = 2104;
														var colontmp__228803 = 0;
														F.line = 120;
														colontmp__228803 = (colontmp__228797.data != null ? (colontmp__228797.data.length-1) : -1);
														F.line = 2107;
														var res_228805 = 0;
														L22: do {
															F.line = 2108;
																L23: while (true) {
																if (!(res_228805 <= colontmp__228803)) break L23;
																	F.line = 2109;
																	h_228801 = res_228805;
																	if (is_filled_154282(colontmp__228797.data[chckIndx(h_228801, 0, colontmp__228797.data.length+0-1)-0].Field0)) {
																	F.line = 121;
																	child_225218 = colontmp__228797.data[chckIndx(h_228801, 0, colontmp__228797.data.length+0-1)-0].Field1;
																	if (!(contains_224741(collected_224430[0], child_225218))) {
																	F.line = 216;
																	all_children_collected_225210 = false;
																	F.line = 217;
																	break L20;
																	}
																	
																	}
																	
																	F.line = 2110;
																	res_228805 = addInt(res_228805, 1);
																}
														} while(false);
													} while(false);
												} while(false);
												if (all_children_collected_225210) {
												L24: do {
													F.line = 219;
													var child_225447 = null;
													F.line = 100;
													var colontmp__228809 = {data: null, counter: 0};
													F.line = 219;
													nimCopy(colontmp__228809, cur_node_224875.epsilonSet, NTI212034);
													if (!(is_valid_214572(colontmp__228809))) {
													F.line = 119;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
													}
													
													L25: do {
														F.line = 120;
														var h_228813 = 0;
														F.line = 2104;
														var colontmp__228815 = 0;
														F.line = 120;
														colontmp__228815 = (colontmp__228809.data != null ? (colontmp__228809.data.length-1) : -1);
														F.line = 2107;
														var res_228817 = 0;
														L26: do {
															F.line = 2108;
																L27: while (true) {
																if (!(res_228817 <= colontmp__228815)) break L27;
																	F.line = 2109;
																	h_228813 = res_228817;
																	if (is_filled_154282(colontmp__228809.data[chckIndx(h_228813, 0, colontmp__228809.data.length+0-1)-0].Field0)) {
																	F.line = 121;
																	child_225447 = colontmp__228809.data[chckIndx(h_228813, 0, colontmp__228809.data.length+0-1)-0].Field1;
																	F.line = 220;
																	incl_222782(cur_node_224875.epsilonSet, child_225447.epsilonSet);
																	}
																	
																	F.line = 2110;
																	res_228817 = addInt(res_228817, 1);
																}
														} while(false);
													} while(false);
												} while(false);
												F.line = 221;
												incl_214544(collected_224430[0], cur_node_224875);
												}
												else {
													F.line = 223;
													if (to_visit_222338[0] != null) { to_visit_222338[0].push(cur_node_224875); } else { to_visit_222338[0] = [cur_node_224875]; };
													L28: do {
														F.line = 224;
														var child_225668 = null;
														F.line = 100;
														var colontmp__228821 = {data: null, counter: 0};
														F.line = 224;
														nimCopy(colontmp__228821, cur_node_224875.epsilonSet, NTI212034);
														if (!(is_valid_214572(colontmp__228821))) {
														F.line = 119;
														failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
														}
														
														L29: do {
															F.line = 120;
															var h_228825 = 0;
															F.line = 2104;
															var colontmp__228827 = 0;
															F.line = 120;
															colontmp__228827 = (colontmp__228821.data != null ? (colontmp__228821.data.length-1) : -1);
															F.line = 2107;
															var res_228829 = 0;
															L30: do {
																F.line = 2108;
																	L31: while (true) {
																	if (!(res_228829 <= colontmp__228827)) break L31;
																		F.line = 2109;
																		h_228825 = res_228829;
																		if (is_filled_154282(colontmp__228821.data[chckIndx(h_228825, 0, colontmp__228821.data.length+0-1)-0].Field0)) {
																		F.line = 121;
																		child_225668 = colontmp__228821.data[chckIndx(h_228825, 0, colontmp__228821.data.length+0-1)-0].Field1;
																		if (!(contains_224741(collected_224430[0], child_225668))) {
																		F.line = 226;
																		if (to_visit_222338[0] != null) { to_visit_222338[0].push(child_225668); } else { to_visit_222338[0] = [child_225668]; };
																		}
																		
																		}
																		
																		F.line = 2110;
																		res_228829 = addInt(res_228829, 1);
																	}
															} while(false);
														} while(false);
													} while(false);
												}
												
											} while(false);
										}
								} while(false);
								if ((len_225101(cur_node_224527.epsilonSet) == 0)) {
								F.line = 230;
								break L16;
								}
								
								F.line = 231;
								var to_exclude_226139 = [init_set_212530(64)];
								L32: do {
									F.line = 232;
									var child_226147 = null;
									F.line = 100;
									var colontmp__228833 = {data: null, counter: 0};
									F.line = 232;
									nimCopy(colontmp__228833, cur_node_224527.epsilonSet, NTI212034);
									if (!(is_valid_214572(colontmp__228833))) {
									F.line = 119;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
									}
									
									L33: do {
										F.line = 120;
										var h_228837 = 0;
										F.line = 2104;
										var colontmp__228839 = 0;
										F.line = 120;
										colontmp__228839 = (colontmp__228833.data != null ? (colontmp__228833.data.length-1) : -1);
										F.line = 2107;
										var res_228841 = 0;
										L34: do {
											F.line = 2108;
												L35: while (true) {
												if (!(res_228841 <= colontmp__228839)) break L35;
													F.line = 2109;
													h_228837 = res_228841;
													if (is_filled_154282(colontmp__228833.data[chckIndx(h_228837, 0, colontmp__228833.data.length+0-1)-0].Field0)) {
													F.line = 121;
													child_226147 = colontmp__228833.data[chckIndx(h_228837, 0, colontmp__228833.data.length+0-1)-0].Field1;
													F.line = 233;
													switch (child_226147.kind) {
													case 65:
													case 70:
														F.line = 235;
														incl_214544(to_exclude_226139[0], child_226147);
														break;
													default: 
														break;
													}
													}
													
													F.line = 2110;
													res_228841 = addInt(res_228841, 1);
												}
										} while(false);
									} while(false);
								} while(false);
								F.line = 238;
								excl_226299(cur_node_224527.epsilonSet, to_exclude_226139[0]);
							} while(false);
							}
							
							F.line = 2110;
							res_228851 = addInt(res_228851, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function add_228920(x_228926, x_228926_Idx, y_228929) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1612;
		var xl_228937 = (x_228926[x_228926_Idx] != null ? x_228926[x_228926_Idx].length : 0);
		F.line = 1613;
		if (x_228926[x_228926_Idx].length < chckRange(addInt(xl_228937, (y_228929 != null ? y_228929.length : 0)), 0, 2147483647)) { for (var i=x_228926[x_228926_Idx].length;i<chckRange(addInt(xl_228937, (y_228929 != null ? y_228929.length : 0)), 0, 2147483647);++i) x_228926[x_228926_Idx].push(null); }
               else { x_228926[x_228926_Idx].length = chckRange(addInt(xl_228937, (y_228929 != null ? y_228929.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1614;
			var i_228972 = 0;
			F.line = 2104;
			var colontmp__228974 = 0;
			F.line = 1614;
			colontmp__228974 = (y_228929 != null ? (y_228929.length-1) : -1);
			F.line = 2107;
			var res_228977 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_228977 <= colontmp__228974)) break L3;
						F.line = 2109;
						i_228972 = res_228977;
						F.line = 1614;
						x_228926[x_228926_Idx][chckIndx(addInt(xl_228937, i_228972), 0, x_228926[x_228926_Idx].length+0-1)-0] = y_228929[chckIndx(i_228972, 0, y_228929.length+0-1)-0];
						F.line = 2110;
						res_228977 = addInt(res_228977, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function gen_next_set_212494(root_212496) {
							var Tmp7;

	var F={procname:"grammar.genNextSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 243;
		var to_visit_228871 = [null];
		if (!(is_grammar_terminator_212485(root_212496))) {
		L1: do {
			F.line = 23;
			var item_228886 = null;
			F.line = 3909;
			var colontmp__229402 = null;
			F.line = 247;
			colontmp__229402 = root_212496.children;
			F.line = 3911;
			var i_229405 = 0;
			F.line = 3912;
			var l_229407 = (colontmp__229402 != null ? colontmp__229402.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_229405 < l_229407)) break L3;
						F.line = 3914;
						item_228886 = colontmp__229402[chckIndx(i_229405, 0, colontmp__229402.length+0-1)-0];
						F.line = 24;
						if (to_visit_228871[0] != null) { to_visit_228871[0].push(item_228886); } else { to_visit_228871[0] = [item_228886]; };
						F.line = 3915;
						i_229405 = addInt(i_229405, 1);
						if (!(((colontmp__229402 != null ? colontmp__229402.length : 0) == l_229407))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		L4: do {
			F.line = 248;
				L5: while (true) {
				if (!(0 < (to_visit_228871[0] != null ? to_visit_228871[0].length : 0))) break L5;
					L6: do {
						F.line = 249;
						var cur_node_228915 = pop_222358(to_visit_228871, 0);
						if (!(is_grammar_terminator_212485(cur_node_228915))) {
						F.line = 251;
						add_228920(to_visit_228871, 0, cur_node_228915.children);
						F.line = 252;
						break L6;
						}
						
						F.line = 254;
						var next_nodes_228996 = [next_in_tree_212475(cur_node_228915)];
							if ((cur_node_228915.repeat == 2)) Tmp7 = true; else {								Tmp7 = (cur_node_228915.repeat == 1);							}						if (Tmp7) {
						F.line = 256;
						incl_214544(next_nodes_228996[0], cur_node_228915);
						}
						
						L8: do {
							F.line = 258;
							var next_node_229111 = null;
							if (!(is_valid_214572(next_nodes_228996[0]))) {
							F.line = 119;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
							}
							
							L9: do {
								F.line = 120;
								var h_229427 = 0;
								F.line = 2104;
								var colontmp__229429 = 0;
								F.line = 120;
								colontmp__229429 = (next_nodes_228996[0].data != null ? (next_nodes_228996[0].data.length-1) : -1);
								F.line = 2107;
								var res_229431 = 0;
								L10: do {
									F.line = 2108;
										L11: while (true) {
										if (!(res_229431 <= colontmp__229429)) break L11;
											F.line = 2109;
											h_229427 = res_229431;
											if (is_filled_154282(next_nodes_228996[0].data[chckIndx(h_229427, 0, next_nodes_228996[0].data.length+0-1)-0].Field0)) {
											F.line = 121;
											next_node_229111 = next_nodes_228996[0].data[chckIndx(h_229427, 0, next_nodes_228996[0].data.length+0-1)-0].Field1;
											L12: do {
												L13: do {
													F.line = 259;
													var epsilon_next_node_229119 = null;
													F.line = 100;
													var colontmp__229413 = {data: null, counter: 0};
													F.line = 259;
													nimCopy(colontmp__229413, next_node_229111.epsilonSet, NTI212034);
													if (!(is_valid_214572(colontmp__229413))) {
													F.line = 119;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
													}
													
													L14: do {
														F.line = 120;
														var h_229417 = 0;
														F.line = 2104;
														var colontmp__229419 = 0;
														F.line = 120;
														colontmp__229419 = (colontmp__229413.data != null ? (colontmp__229413.data.length-1) : -1);
														F.line = 2107;
														var res_229421 = 0;
														L15: do {
															F.line = 2108;
																L16: while (true) {
																if (!(res_229421 <= colontmp__229419)) break L16;
																	F.line = 2109;
																	h_229417 = res_229421;
																	if (is_filled_154282(colontmp__229413.data[chckIndx(h_229417, 0, colontmp__229413.data.length+0-1)-0].Field0)) {
																	F.line = 121;
																	epsilon_next_node_229119 = colontmp__229413.data[chckIndx(h_229417, 0, colontmp__229413.data.length+0-1)-0].Field1;
																	F.line = 260;
																	incl_214544(cur_node_228915.nextSet, epsilon_next_node_229119);
																	}
																	
																	F.line = 2110;
																	res_229421 = addInt(res_229421, 1);
																}
														} while(false);
													} while(false);
												} while(false);
												F.line = 261;
												switch (next_node_229111.kind) {
												case 65:
												case 70:
													F.line = 263;
													break L12;
													break;
												case 97:
												case 115:
													F.line = 265;
													incl_214544(cur_node_228915.nextSet, next_node_229111);
													break;
												default: 
													if (true) {
													F.line = 267;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(267, 16) `false` "));
													}
													
													break;
												}
											} while(false);
											}
											
											F.line = 2110;
											res_229431 = addInt(res_229431, 1);
										}
								} while(false);
							} while(false);
						} while(false);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function new_grammar_214047(name_214049, grammar_string_214050) {
		var Tmp1;

	var result_214051 = null;

	var F={procname:"grammar.newGrammar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 115;
		result_214051 = {token: 0, grammarString: null, rootNode: null, firstSet: {}, cursor: 0};
		F.line = 116;
		result_214051.token = (Tmp1 = HEX5BHEX5D_212903(str_token_map_208604, name_214049), Tmp1[0])[Tmp1[1]];
		F.line = 117;
		result_214051.grammarString = nimCopy(null, grammar_string_214050, NTI138);
		F.line = 118;
		result_214051.rootNode = match_f_212456(result_214051);
		if (!(!(is_grammar_terminator_212485(result_214051.rootNode)))) {
		F.line = 121;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/grammar.nim(121, 3) `not isGrammarTerminator(result.rootNode)` "));
		}
		
		F.line = 122;
		result_214051.cursor = 0;
		F.line = 123;
		assign_id_212472(result_214051.rootNode);
		F.line = 124;
		gen_epsilon_set_212491(result_214051.rootNode);
		F.line = 125;
		gen_next_set_212494(result_214051.rootNode);
	framePtr = F.prev;

	return result_214051;

}

function raw_insert_253509(t_253516, data_253520, data_253520_Idx, key_253522, val_253524, hc_253526, h_253528) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_253520[data_253520_Idx][chckIndx(h_253528, 0, data_253520[data_253520_Idx].length+0-1)-0].Field1 = key_253522;
		F.line = 65;
		data_253520[data_253520_Idx][chckIndx(h_253528, 0, data_253520[data_253520_Idx].length+0-1)-0].Field2 = val_253524;
		F.line = 66;
		data_253520[data_253520_Idx][chckIndx(h_253528, 0, data_253520[data_253520_Idx].length+0-1)-0].Field0 = hc_253526;
	framePtr = F.prev;

	
}

function enlarge_252121(t_252128) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_252136 = null;
		F.line = 314;
		n_252136 = new Array(chckRange(mulInt((t_252128.data != null ? t_252128.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_252128.data != null ? t_252128.data.length : 0), 2), 0, 2147483647);++i) {n_252136[i]={Field0: 0, Field1: 0, Field2: null};}		F.line = 315;
		var Tmp1 = t_252128.data; t_252128.data = n_252136; n_252136 = Tmp1;		L2: do {
			F.line = 316;
			var i_252407 = 0;
			F.line = 2088;
			var colontmp__254346 = 0;
			F.line = 316;
			colontmp__254346 = (n_252136 != null ? (n_252136.length-1) : -1);
			F.line = 2094;
			var res_254349 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_254349 <= colontmp__254346)) break L4;
						F.line = 2096;
						i_252407 = res_254349;
						F.line = 317;
						var eh_252675 = n_252136[chckIndx(i_252407, 0, n_252136.length+0-1)-0].Field0;
						if (is_filled_146491(eh_252675)) {
						F.line = 319;
						var j_252684 = (eh_252675 & (t_252128.data != null ? (t_252128.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_252128.data[chckIndx(j_252684, 0, t_252128.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_252684 = next_try_146614(j_252684, (t_252128.data != null ? (t_252128.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_253509(t_252128, t_252128, "data", n_252136[chckIndx(i_252407, 0, n_252136.length+0-1)-0].Field1, n_252136[chckIndx(i_252407, 0, n_252136.length+0-1)-0].Field2, eh_252675, j_252684);
						}
						
						F.line = 2097;
						res_254349 = addInt(res_254349, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function hash_254380(x_254384) {
	var result_254385 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_254385 = x_254384;
	framePtr = F.prev;

	return result_254385;

}

function raw_get_deep_254368(t_254373, key_254375, hc_254377, hc_254377_Idx) {
	var result_254378 = 0;

	var F={procname:"rawGetDeep.rawGetDeep",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 43;
		hc_254377[hc_254377_Idx] = hash_254380(key_254375);
		if ((hc_254377[hc_254377_Idx] == 0)) {
		F.line = 45;
		hc_254377[hc_254377_Idx] = 314159265;
		}
		
		F.line = 58;
		var h_254414 = (hc_254377[hc_254377_Idx] & (t_254373.data != null ? (t_254373.data.length-1) : -1));
		L1: do {
			F.line = 59;
				L2: while (true) {
				if (!is_filled_146491(t_254373.data[chckIndx(h_254414, 0, t_254373.data.length+0-1)-0].Field0)) break L2;
					F.line = 60;
					h_254414 = next_try_146614(h_254414, (t_254373.data != null ? (t_254373.data.length-1) : -1));
				}
		} while(false);
		F.line = 61;
		result_254378 = h_254414;
	framePtr = F.prev;

	return result_254378;

}

function add_251856(t_251863, key_251865, val_251867) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (must_rehash_146509((t_251863.data != null ? t_251863.data.length : 0), t_251863.counter)) {
		F.line = 82;
		enlarge_252121(t_251863);
		}
		
		F.line = 83;
		var hc_254366 = [0];
		F.line = 84;
		var j_254705 = raw_get_deep_254368(t_251863, key_251865, hc_254366, 0);
		F.line = 85;
		raw_insert_253509(t_251863, t_251863, "data", key_251865, val_251867, hc_254366[0], j_254705);
		F.line = 340;
		t_251863.counter = addInt(t_251863.counter, 1);
	framePtr = F.prev;

	
}

function lex_grammar_251022() {
						var Tmp10;

	var F={procname:"grammar.lexGrammar",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		F.line = 484;
		var lines_251024 = nimCopy(null, grammar_lines_212094, NTI133824);
		F.line = 486;
		var line_idx_251026 = 0;
		L1: do {
			F.line = 487;
				L2: while (true) {
				if (!(line_idx_251026 < (lines_251024 != null ? lines_251024.length : 0))) break L2;
					L3: do {
						F.line = 488;
						var line_251034 = nimCopy(null, lines_251024[chckIndx(line_idx_251026, 0, lines_251024.length+0-1)-0], NTI138);
						if ((((line_251034 != null ? line_251034.length : 0) < 1) || (line_251034[chckIndx(0, 0, line_251034.length+0-1)-0] == 35))) {
						F.line = 490;
						line_idx_251026 = addInt(line_idx_251026, 1);
						F.line = 491;
						break L3;
						}
						
						F.line = 492;
						var colon_idx_251044 = nsuFindChar(line_251034, 58, 0, 0);
						if ((colon_idx_251044 == -1)) {
						F.line = 494;
						quit_19421(makeNimstrLit("Unknown syntax at {lineIdx}: {line}"), 1);
						}
						
						F.line = 495;
						var name_251252 = HEX5BHEX5D_48874(line_251034, HEX2EHEX2E_48828(0, subInt(colon_idx_251044, 1)));
						F.line = 498;
						var num_par_251254 = 0;
						F.line = 499;
						var num_bra_251256 = 0;
						F.line = 500;
						var start_col_idx_251257 = addInt(colon_idx_251044, 1);
						F.line = 501;
						var col_idx_251258 = start_col_idx_251257;
						F.line = 502;
						var grammar_string_251259 = [];
						if ((start_col_idx_251257 == (line_251034 != null ? line_251034.length : 0))) {
						F.line = 504;
						quit_19421(makeNimstrLit("Unknown syntax at {lineIdx}: {line}"), 1);
						}
						
						L4: do {
							F.line = 505;
								L5: while (true) {
								if (!true) break L5;
									L6: do {
										F.line = 506;
											L7: while (true) {
											if (!(col_idx_251258 < (line_251034 != null ? line_251034.length : 0))) break L7;
												F.line = 508;
												switch (line_251034[chckIndx(col_idx_251258, 0, line_251034.length+0-1)-0]) {
												case 40:
													F.line = 510;
													num_par_251254 = addInt(num_par_251254, 1);
													break;
												case 41:
													F.line = 512;
													num_par_251254 = subInt(num_par_251254, 1);
													break;
												case 91:
													F.line = 514;
													num_bra_251256 = addInt(num_bra_251256, 1);
													break;
												case 93:
													F.line = 516;
													num_bra_251256 = subInt(num_bra_251256, 1);
													break;
												default: 
													break;
												}
												F.line = 519;
												col_idx_251258 = addInt(col_idx_251258, 1);
											}
									} while(false);
									F.line = 520;
									if (grammar_string_251259 != null) { grammar_string_251259 = (grammar_string_251259).concat(HEX5BHEX5D_48874(line_251034, HEX2EHEX2E_48828(start_col_idx_251257, subInt(col_idx_251258, 1)))); } else { grammar_string_251259 = HEX5BHEX5D_48874(line_251034, HEX2EHEX2E_48828(start_col_idx_251257, subInt(col_idx_251258, 1))).slice(); };
									if (((num_par_251254 == 0) && (num_bra_251256 == 0))) {
									F.line = 522;
									break L4;
									}
									else {
										F.line = 524;
										line_idx_251026 = addInt(line_idx_251026, 1);
										F.line = 525;
										line_251034 = nimCopy(null, lines_251024[chckIndx(line_idx_251026, 0, lines_251024.length+0-1)-0], NTI138);
										F.line = 526;
										start_col_idx_251257 = 0;
										L8: do {
											F.line = 528;
												L9: while (true) {
												if (!(line_251034[chckIndx(start_col_idx_251257, 0, line_251034.length+0-1)-0] == 32)) break L9;
													F.line = 529;
													start_col_idx_251257 = addInt(start_col_idx_251257, 1);
												}
										} while(false);
										F.line = 531;
										start_col_idx_251257 = nimMax(subInt(start_col_idx_251257, 1), 0);
										F.line = 532;
										col_idx_251258 = start_col_idx_251257;
									}
									
								}
						} while(false);
						F.line = 533;
						line_idx_251026 = addInt(line_idx_251026, 1);
						F.line = 534;
						var grammar_251478 = new_grammar_214047(name_251252, grammar_string_251259);
						F.line = 535;
						add_251856(grammar_set_212224[0], (Tmp10 = HEX5BHEX5D_212903(str_token_map_208604, name_251252), Tmp10[0])[Tmp10[1]], grammar_251478);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_256594(t_256599, key_256601, hc_256603, hc_256603_Idx) {
						var Tmp3;

	var result_256604 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_256603[hc_256603_Idx] = hash_254380(key_256601);
		if ((hc_256603[hc_256603_Idx] == 0)) {
		F.line = 45;
		hc_256603[hc_256603_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_256620 = (hc_256603[hc_256603_Idx] & (t_256599.data != null ? (t_256599.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_256599.data[chckIndx(h_256620, 0, t_256599.data.length+0-1)-0].Field0)) break L2;
						if (!(t_256599.data[chckIndx(h_256620, 0, t_256599.data.length+0-1)-0].Field0 == hc_256603[hc_256603_Idx])) Tmp3 = false; else {							Tmp3 = (t_256599.data[chckIndx(h_256620, 0, t_256599.data.length+0-1)-0].Field1 == key_256601);						}					if (Tmp3) {
					F.line = 38;
					result_256604 = h_256620;
					break BeforeRet;
					}
					
					F.line = 39;
					h_256620 = next_try_146614(h_256620, (t_256599.data != null ? (t_256599.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_256604 = subInt(-1, h_256620);
	} while (false);
	framePtr = F.prev;

	return result_256604;

}

function has_key_256582(t_256588, key_256590) {
	var result_256591 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_256592 = [0];
		F.line = 264;
		result_256591 = (0 <= raw_get_256594(t_256588, key_256590, hc_256592, 0));
	framePtr = F.prev;

	return result_256591;

}

function is_terminator_203174(node_203176) {
	var result_203177 = false;

	var F={procname:"token.isTerminator",prev:framePtr,filename:"../Parser/token.nim",line:0};
	framePtr = F;
		F.line = 132;
		result_203177 = (node_203176 < 90);
	framePtr = F.prev;

	return result_203177;

}

function raw_get_255078(t_255083, key_255085, hc_255087, hc_255087_Idx) {
						var Tmp3;

	var result_255088 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_255087[hc_255087_Idx] = hash_254380(key_255085);
		if ((hc_255087[hc_255087_Idx] == 0)) {
		F.line = 45;
		hc_255087[hc_255087_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_255104 = (hc_255087[hc_255087_Idx] & (t_255083.data != null ? (t_255083.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_255083.data[chckIndx(h_255104, 0, t_255083.data.length+0-1)-0].Field0)) break L2;
						if (!(t_255083.data[chckIndx(h_255104, 0, t_255083.data.length+0-1)-0].Field0 == hc_255087[hc_255087_Idx])) Tmp3 = false; else {							Tmp3 = (t_255083.data[chckIndx(h_255104, 0, t_255083.data.length+0-1)-0].Field1 == key_255085);						}					if (Tmp3) {
					F.line = 38;
					result_255088 = h_255104;
					break BeforeRet;
					}
					
					F.line = 39;
					h_255104 = next_try_146614(h_255104, (t_255083.data != null ? (t_255083.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_255088 = subInt(-1, h_255104);
	} while (false);
	framePtr = F.prev;

	return result_255088;

}

function HEX5BHEX5D_255063(t_255070, key_255072) {
	var result_255074 = [null, 0];
	var result_255074_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_255076 = [0];
		F.line = 161;
		var index_255939 = raw_get_255078(t_255070, key_255072, hc_255076, 0);
		if ((0 <= index_255939)) {
		F.line = 162;
		result_255074 = t_255070.data[chckIndx(index_255939, 0, t_255070.data.length+0-1)-0]; result_255074_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_256412 = null;
			F.line = 2896;
			e_256412 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_256412.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(reprEnum(key_255072, NTI202995)), NTI138);
			F.line = 2891;
			e_256412.parent = null;
			F.line = 165;
			raiseException(e_256412, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_255074, result_255074_Idx];

}

function is_non_terminator_203200(node_203202) {
	var result_203203 = false;

	var F={procname:"token.isNonTerminator",prev:framePtr,filename:"../Parser/token.nim",line:0};
	framePtr = F;
		F.line = 135;
		result_203203 = (90 < node_203202);
	framePtr = F.prev;

	return result_203203;

}

function gen_first_set_254783(grammar_254785) {
			var Tmp1;
							var Tmp6;

	var F={procname:"grammar.genFirstSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((grammar_254785.rootNode.kind == 97)) {
		F.line = 540;
		var root_token_254787 = grammar_254785.rootNode.token;
		if (is_terminator_203174(root_token_254787)) {
		F.line = 542;
		grammar_254785.firstSet[grammar_254785.rootNode.token] = true;
		}
		else {
			F.line = 544;
			var g_256435 = (Tmp1 = HEX5BHEX5D_255063(grammar_set_212224[0], root_token_254787), Tmp1[0])[Tmp1[1]];
			if (!(has_key_256582(first_set_212424[0], root_token_254787))) {
			F.line = 546;
			gen_first_set_254783(g_256435);
			}
			
			F.line = 835;
			nimCopy(grammar_254785.firstSet, SetPlus(grammar_254785.firstSet, g_256435.firstSet), NTI257479);
		}
		
		F.line = 548;
		break BeforeRet;
		}
		
		L2: do {
			F.line = 549;
			var first_node_257487 = null;
			F.line = 100;
			var colontmp__257798 = {data: null, counter: 0};
			F.line = 549;
			nimCopy(colontmp__257798, grammar_254785.rootNode.epsilonSet, NTI212034);
			if (!(is_valid_214572(colontmp__257798))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L3: do {
				F.line = 120;
				var h_257802 = 0;
				F.line = 2104;
				var colontmp__257804 = 0;
				F.line = 120;
				colontmp__257804 = (colontmp__257798.data != null ? (colontmp__257798.data.length-1) : -1);
				F.line = 2107;
				var res_257806 = 0;
				L4: do {
					F.line = 2108;
						L5: while (true) {
						if (!(res_257806 <= colontmp__257804)) break L5;
							F.line = 2109;
							h_257802 = res_257806;
							if (is_filled_154282(colontmp__257798.data[chckIndx(h_257802, 0, colontmp__257798.data.length+0-1)-0].Field0)) {
							F.line = 121;
							first_node_257487 = colontmp__257798.data[chckIndx(h_257802, 0, colontmp__257798.data.length+0-1)-0].Field1;
							if (is_non_terminator_203200(first_node_257487.token)) {
							F.line = 551;
							var first_grammar_257766 = (Tmp6 = HEX5BHEX5D_255063(grammar_set_212224[0], first_node_257487.token), Tmp6[0])[Tmp6[1]];
							if ((SetCard(first_grammar_257766.firstSet) == 0)) {
							F.line = 553;
							gen_first_set_254783(first_grammar_257766);
							}
							
							F.line = 835;
							nimCopy(grammar_254785.firstSet, SetPlus(grammar_254785.firstSet, first_grammar_257766.firstSet), NTI257479);
							}
							else {
								F.line = 556;
							grammar_254785.firstSet[first_node_257487.token] = true;
							}
							
							}
							
							F.line = 2110;
							res_257806 = addInt(res_257806, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function gen_first_set_257822() {
	var F={procname:"grammar.genFirstSet",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 561;
			var grammar_258407 = null;
			L2: do {
				F.line = 288;
				var h_258568 = 0;
				F.line = 2104;
				var colontmp__258570 = 0;
				F.line = 288;
				colontmp__258570 = (grammar_set_212224[0].data != null ? (grammar_set_212224[0].data.length-1) : -1);
				F.line = 2107;
				var res_258572 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_258572 <= colontmp__258570)) break L4;
							F.line = 2109;
							h_258568 = res_258572;
							if (is_filled_146491(grammar_set_212224[0].data[chckIndx(h_258568, 0, grammar_set_212224[0].data.length+0-1)-0].Field0)) {
							F.line = 289;
							grammar_258407 = grammar_set_212224[0].data[chckIndx(h_258568, 0, grammar_set_212224[0].data.length+0-1)-0].Field2;
							L5: do {
								if (has_key_256582(first_set_212424[0], grammar_258407.token)) {
								F.line = 563;
								break L5;
								}
								
								F.line = 564;
								gen_first_set_254783(grammar_258407);
							} while(false);
							}
							
							F.line = 2110;
							res_258572 = addInt(res_258572, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}
lex_grammar_251022();
gen_first_set_257822();

function init_table_337165(initial_size_337170) {
	var result_337191 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_337170))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_337191.counter = 0;
		F.line = 354;
		result_337191.data = new Array(chckRange(initial_size_337170, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_337170, 0, 2147483647);++i) {result_337191.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_337191;

}
var source_files_337224 = [init_table_337165(64)];

function re_343862() {
	var result_343867 = {states: null, groupsCount: 0, namedGroups: {data: null, counter: 0}};

	var F={procname:"re.re",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2867;
		nimCopy(result_343867, {states: nimCopy(null, [{kind: 45, cp: 191, outA: -1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 2, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 3, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 95, Field1: 95}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 1}, ranges: nimCopy(null, [{a: 97, b: 122}, {a: 65, b: 90}], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 7, cp: 43, outA: 2, outB: 5, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 5, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 95, Field1: 95}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 1}, ranges: nimCopy(null, [{a: 97, b: 122}, {a: 65, b: 90}, {a: 48, b: 57}], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 6, cp: 42, outA: 4, outB: 6, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 0, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 44, cp: 191, outA: 1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}], NTI320469), groupsCount: 0, namedGroups: {data: nimCopy(null, [], NTI301989), counter: 0}}, NTI320460);
	framePtr = F.prev;

	return result_343867;

}

function re_343888() {
	var result_343893 = {states: null, groupsCount: 0, namedGroups: {data: null, counter: 0}};

	var F={procname:"re.re",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2867;
		nimCopy(result_343893, {states: nimCopy(null, [{kind: 45, cp: 191, outA: -1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 3, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 19, cp: 100, outA: 3, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 6, cp: 42, outA: 2, outB: 5, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 0, cp: 46, outA: 6, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 8, cp: 63, outA: 4, outB: 6, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 19, cp: 100, outA: 7, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 7, cp: 43, outA: 6, outB: 15, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 10, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 69, Field1: 69}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 101, Field1: 101}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 2}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 38, cp: 191, outA: 11, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 43, Field1: 43}, {Field0: 0, Field1: 0}, {Field0: 45, Field1: 45}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], NTI281310), counter: 2}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 8, cp: 63, outA: 9, outB: 11, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 19, cp: 100, outA: 12, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 7, cp: 43, outA: 11, outB: 14, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 3, cp: 40, outA: 8, outB: -1, isGreedy: false, idx: 0, isCapturing: true, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 4, cp: 41, outA: 16, outB: -1, isGreedy: false, idx: 0, isCapturing: true, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 8, cp: 63, outA: 13, outB: 16, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 16, cp: 98, outA: 0, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}, {kind: 44, cp: 191, outA: 1, outB: -1, isGreedy: false, idx: 0, isCapturing: false, name: [], flags: nimCopy(null, [], NTI281297), min: 0, max: 0, cps: {data: nimCopy(null, [], NTI281310), counter: 0}, ranges: nimCopy(null, [], NTI281324), shorthands: nimCopy(null, [], NTI281339), cc: 0}], NTI320469), groupsCount: 1, namedGroups: {data: nimCopy(null, [], NTI301989), counter: 0}}, NTI320460);
	framePtr = F.prev;

	return result_343893;

}
var regex_name_343885 = [re_343862()];
var regex_number_343908 = [re_343888()];

function new_353206() {
	var result_353211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_353401 = null;
		F.line = 211;
		r_353401 = {m_type: NTI353098, b: false, id: 0, pyType: null};
		F.line = 212;
		result_353211 = r_353401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_353211;

}

function new_py_bool_simple_353201() {
	var result_353203 = null;

	var F={procname:"boolobject.newPyBoolSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_353424 = new_353206();
		F.line = 561;
		obj_353424.pyType = py_bool_object_type_353104;
		F.line = 563;
		give_id_157814(obj_353424);
		result_353203 = obj_353424;
	framePtr = F.prev;

	return result_353203;

}

function new_py_bool_default_353821(args_353053) {
	var result_353824 = null;

	var F={procname:"boolobject.newPyBoolDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_353824 = new_py_bool_simple_353201();
	framePtr = F.prev;

	return result_353824;

}
var py_bool_object_type_353104 = new_py_type_159261(makeNimstrLit("Bool"));
py_bool_object_type_353104.kind = 6;
py_bool_object_type_353104.magicMethods.Field26 = new_py_bool_default_353821;

function new_py_bool_354057(b_354059) {
	var result_354060 = null;

	var F={procname:"boolobject.newPyBool",prev:framePtr,filename:"../Objects/boolobject.nim",line:0};
	framePtr = F;
		F.line = 7;
		result_354060 = new_py_bool_simple_353201();
		F.line = 8;
		result_354060.b = b_354059;
	framePtr = F.prev;

	return result_354060;

}
var py_true_obj_354074 = new_py_bool_354057(true);
var py_false_obj_354075 = new_py_bool_354057(false);

function new_355206() {
	var result_355211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_355401 = null;
		F.line = 211;
		r_355401 = {m_type: NTI355070, id: 0, pyType: null};
		F.line = 212;
		result_355211 = r_355401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_355211;

}

function new_py_none_simple_355201() {
	var result_355203 = null;

	var F={procname:"noneobject.newPyNoneSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_355424 = new_355206();
		F.line = 561;
		obj_355424.pyType = py_none_object_type_355074;
		F.line = 563;
		give_id_157814(obj_355424);
		result_355203 = obj_355424;
	framePtr = F.prev;

	return result_355203;

}

function new_py_none_default_355821(args_355025) {
	var result_355824 = null;

	var F={procname:"noneobject.newPyNoneDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_355824 = new_py_none_simple_355201();
	framePtr = F.prev;

	return result_355824;

}

function of_py_none_object_355076(obj_355015) {
	var result_355078 = false;

	var F={procname:"noneobject.ofPyNoneObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_355078 = (obj_355015.pyType.kind == 2);
	framePtr = F.prev;

	return result_355078;

}

function eq_py_none_object_magic_356046(self_no_cast_356048, other_356049) {
	var result_356050 = null;

	var F={procname:"noneobject.eqPyNoneObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_356048.m_type, NTI355070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNoneObject` "));
		}
		
		F.line = 438;
		var self_356201 = self_no_cast_356048;
		if (of_py_none_object_355076(other_356049)) {
		F.line = 11;
		result_356050 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 13;
			result_356050 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_356050;

}
var py_none_object_type_355074 = new_py_type_159261(makeNimstrLit("None"));
py_none_object_type_355074.kind = 2;
py_none_object_type_355074.magicMethods.Field26 = new_py_none_default_355821;
var py_none_356044 = new_py_none_simple_355201();
py_none_object_type_355074.magicMethods.Field18 = eq_py_none_object_magic_356046;

function new_357406() {
	var result_357411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_357601 = null;
		F.line = 211;
		r_357601 = {m_type: NTI357231, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_357411 = r_357601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_357411;

}

function new_py_base_error_simple_357401() {
	var result_357403 = null;

	var F={procname:"exceptions.newPyBaseErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_357624 = new_357406();
		F.line = 561;
		obj_357624.pyType = py_base_error_object_type_357247;
		F.line = 563;
		give_id_157814(obj_357624);
		result_357403 = obj_357624;
	framePtr = F.prev;

	return result_357403;

}

function new_py_base_error_default_358021(args_357186) {
	var result_358024 = null;

	var F={procname:"exceptions.newPyBaseErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_358024 = new_py_base_error_simple_357401();
	framePtr = F.prev;

	return result_358024;

}
var py_base_error_object_type_357247 = new_py_type_159261(makeNimstrLit("BaseError"));
py_base_error_object_type_357247.kind = 3;
py_base_error_object_type_357247.magicMethods.Field26 = new_py_base_error_default_358021;

function new_358606() {
	var result_358611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_358801 = null;
		F.line = 211;
		r_358801 = {m_type: NTI358415, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_358611 = r_358801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_358611;

}

function new_py_name_error_simple_358601() {
	var result_358603 = null;

	var F={procname:"exceptions.newPyNameErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_358824 = new_358606();
		F.line = 561;
		obj_358824.pyType = py_name_error_object_type_358419;
		F.line = 563;
		give_id_157814(obj_358824);
		result_358603 = obj_358824;
	framePtr = F.prev;

	return result_358603;

}

function new_py_name_error_default_359221(args_358370) {
	var result_359224 = null;

	var F={procname:"exceptions.newPyNameErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_359224 = new_py_name_error_simple_358601();
	framePtr = F.prev;

	return result_359224;

}

function new_359606() {
	var result_359611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_359801 = null;
		F.line = 211;
		r_359801 = {m_type: NTI359501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_359611 = r_359801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_359611;

}

function new_py_not_implemented_error_simple_359601() {
	var result_359603 = null;

	var F={procname:"exceptions.newPyNotImplementedErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_359824 = new_359606();
		F.line = 561;
		obj_359824.pyType = py_not_implemented_error_object_type_359505;
		F.line = 563;
		give_id_157814(obj_359824);
		result_359603 = obj_359824;
	framePtr = F.prev;

	return result_359603;

}

function new_py_not_implemented_error_default_360221(args_359456) {
	var result_360224 = null;

	var F={procname:"exceptions.newPyNotImplementedErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_360224 = new_py_not_implemented_error_simple_359601();
	framePtr = F.prev;

	return result_360224;

}

function new_360606() {
	var result_360611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_360801 = null;
		F.line = 211;
		r_360801 = {m_type: NTI360501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_360611 = r_360801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_360611;

}

function new_py_type_error_simple_360601() {
	var result_360603 = null;

	var F={procname:"exceptions.newPyTypeErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_360824 = new_360606();
		F.line = 561;
		obj_360824.pyType = py_type_error_object_type_360505;
		F.line = 563;
		give_id_157814(obj_360824);
		result_360603 = obj_360824;
	framePtr = F.prev;

	return result_360603;

}

function new_py_type_error_default_361221(args_360456) {
	var result_361224 = null;

	var F={procname:"exceptions.newPyTypeErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_361224 = new_py_type_error_simple_360601();
	framePtr = F.prev;

	return result_361224;

}

function new_361606() {
	var result_361611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_361801 = null;
		F.line = 211;
		r_361801 = {m_type: NTI361501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_361611 = r_361801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_361611;

}

function new_py_attribute_error_simple_361601() {
	var result_361603 = null;

	var F={procname:"exceptions.newPyAttributeErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_361824 = new_361606();
		F.line = 561;
		obj_361824.pyType = py_attribute_error_object_type_361505;
		F.line = 563;
		give_id_157814(obj_361824);
		result_361603 = obj_361824;
	framePtr = F.prev;

	return result_361603;

}

function new_py_attribute_error_default_362221(args_361456) {
	var result_362224 = null;

	var F={procname:"exceptions.newPyAttributeErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_362224 = new_py_attribute_error_simple_361601();
	framePtr = F.prev;

	return result_362224;

}

function new_362606() {
	var result_362611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_362801 = null;
		F.line = 211;
		r_362801 = {m_type: NTI362501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_362611 = r_362801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_362611;

}

function new_py_value_error_simple_362601() {
	var result_362603 = null;

	var F={procname:"exceptions.newPyValueErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_362824 = new_362606();
		F.line = 561;
		obj_362824.pyType = py_value_error_object_type_362505;
		F.line = 563;
		give_id_157814(obj_362824);
		result_362603 = obj_362824;
	framePtr = F.prev;

	return result_362603;

}

function new_py_value_error_default_363221(args_362456) {
	var result_363224 = null;

	var F={procname:"exceptions.newPyValueErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_363224 = new_py_value_error_simple_362601();
	framePtr = F.prev;

	return result_363224;

}

function new_363606() {
	var result_363611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_363801 = null;
		F.line = 211;
		r_363801 = {m_type: NTI363501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_363611 = r_363801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_363611;

}

function new_py_index_error_simple_363601() {
	var result_363603 = null;

	var F={procname:"exceptions.newPyIndexErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_363824 = new_363606();
		F.line = 561;
		obj_363824.pyType = py_index_error_object_type_363505;
		F.line = 563;
		give_id_157814(obj_363824);
		result_363603 = obj_363824;
	framePtr = F.prev;

	return result_363603;

}

function new_py_index_error_default_364221(args_363456) {
	var result_364224 = null;

	var F={procname:"exceptions.newPyIndexErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_364224 = new_py_index_error_simple_363601();
	framePtr = F.prev;

	return result_364224;

}

function new_364606() {
	var result_364611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_364801 = null;
		F.line = 211;
		r_364801 = {m_type: NTI364501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_364611 = r_364801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_364611;

}

function new_py_stop_iter_error_simple_364601() {
	var result_364603 = null;

	var F={procname:"exceptions.newPyStopIterErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_364824 = new_364606();
		F.line = 561;
		obj_364824.pyType = py_stop_iter_error_object_type_364505;
		F.line = 563;
		give_id_157814(obj_364824);
		result_364603 = obj_364824;
	framePtr = F.prev;

	return result_364603;

}

function new_py_stop_iter_error_default_365221(args_364456) {
	var result_365224 = null;

	var F={procname:"exceptions.newPyStopIterErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_365224 = new_py_stop_iter_error_simple_364601();
	framePtr = F.prev;

	return result_365224;

}

function new_365606() {
	var result_365611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_365801 = null;
		F.line = 211;
		r_365801 = {m_type: NTI365501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_365611 = r_365801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_365611;

}

function new_py_lock_error_simple_365601() {
	var result_365603 = null;

	var F={procname:"exceptions.newPyLockErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_365824 = new_365606();
		F.line = 561;
		obj_365824.pyType = py_lock_error_object_type_365505;
		F.line = 563;
		give_id_157814(obj_365824);
		result_365603 = obj_365824;
	framePtr = F.prev;

	return result_365603;

}

function new_py_lock_error_default_366221(args_365456) {
	var result_366224 = null;

	var F={procname:"exceptions.newPyLockErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_366224 = new_py_lock_error_simple_365601();
	framePtr = F.prev;

	return result_366224;

}

function new_366606() {
	var result_366611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_366801 = null;
		F.line = 211;
		r_366801 = {m_type: NTI366501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_366611 = r_366801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_366611;

}

function new_py_import_error_simple_366601() {
	var result_366603 = null;

	var F={procname:"exceptions.newPyImportErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_366824 = new_366606();
		F.line = 561;
		obj_366824.pyType = py_import_error_object_type_366505;
		F.line = 563;
		give_id_157814(obj_366824);
		result_366603 = obj_366824;
	framePtr = F.prev;

	return result_366603;

}

function new_py_import_error_default_367221(args_366456) {
	var result_367224 = null;

	var F={procname:"exceptions.newPyImportErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_367224 = new_py_import_error_simple_366601();
	framePtr = F.prev;

	return result_367224;

}

function new_367606() {
	var result_367611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_367801 = null;
		F.line = 211;
		r_367801 = {m_type: NTI367501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_367611 = r_367801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_367611;

}

function new_py_unbound_local_error_simple_367601() {
	var result_367603 = null;

	var F={procname:"exceptions.newPyUnboundLocalErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_367824 = new_367606();
		F.line = 561;
		obj_367824.pyType = py_unbound_local_error_object_type_367505;
		F.line = 563;
		give_id_157814(obj_367824);
		result_367603 = obj_367824;
	framePtr = F.prev;

	return result_367603;

}

function new_py_unbound_local_error_default_368221(args_367456) {
	var result_368224 = null;

	var F={procname:"exceptions.newPyUnboundLocalErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_368224 = new_py_unbound_local_error_simple_367601();
	framePtr = F.prev;

	return result_368224;

}

function new_368606() {
	var result_368611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_368801 = null;
		F.line = 211;
		r_368801 = {m_type: NTI368501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_368611 = r_368801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_368611;

}

function new_py_key_error_simple_368601() {
	var result_368603 = null;

	var F={procname:"exceptions.newPyKeyErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_368824 = new_368606();
		F.line = 561;
		obj_368824.pyType = py_key_error_object_type_368505;
		F.line = 563;
		give_id_157814(obj_368824);
		result_368603 = obj_368824;
	framePtr = F.prev;

	return result_368603;

}

function new_py_key_error_default_369221(args_368456) {
	var result_369224 = null;

	var F={procname:"exceptions.newPyKeyErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_369224 = new_py_key_error_simple_368601();
	framePtr = F.prev;

	return result_369224;

}

function new_369606() {
	var result_369611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_369801 = null;
		F.line = 211;
		r_369801 = {m_type: NTI369501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_369611 = r_369801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_369611;

}

function new_py_assertion_error_simple_369601() {
	var result_369603 = null;

	var F={procname:"exceptions.newPyAssertionErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_369824 = new_369606();
		F.line = 561;
		obj_369824.pyType = py_assertion_error_object_type_369505;
		F.line = 563;
		give_id_157814(obj_369824);
		result_369603 = obj_369824;
	framePtr = F.prev;

	return result_369603;

}

function new_py_assertion_error_default_370221(args_369456) {
	var result_370224 = null;

	var F={procname:"exceptions.newPyAssertionErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_370224 = new_py_assertion_error_simple_369601();
	framePtr = F.prev;

	return result_370224;

}

function new_370606() {
	var result_370611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_370801 = null;
		F.line = 211;
		r_370801 = {m_type: NTI370501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_370611 = r_370801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_370611;

}

function new_py_zero_division_error_simple_370601() {
	var result_370603 = null;

	var F={procname:"exceptions.newPyZeroDivisionErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_370824 = new_370606();
		F.line = 561;
		obj_370824.pyType = py_zero_division_error_object_type_370505;
		F.line = 563;
		give_id_157814(obj_370824);
		result_370603 = obj_370824;
	framePtr = F.prev;

	return result_370603;

}

function new_py_zero_division_error_default_371221(args_370456) {
	var result_371224 = null;

	var F={procname:"exceptions.newPyZeroDivisionErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_371224 = new_py_zero_division_error_simple_370601();
	framePtr = F.prev;

	return result_371224;

}

function new_371606() {
	var result_371611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_371801 = null;
		F.line = 211;
		r_371801 = {m_type: NTI371501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_371611 = r_371801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_371611;

}

function new_py_runtime_error_simple_371601() {
	var result_371603 = null;

	var F={procname:"exceptions.newPyRuntimeErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_371824 = new_371606();
		F.line = 561;
		obj_371824.pyType = py_runtime_error_object_type_371505;
		F.line = 563;
		give_id_157814(obj_371824);
		result_371603 = obj_371824;
	framePtr = F.prev;

	return result_371603;

}

function new_py_runtime_error_default_372221(args_371456) {
	var result_372224 = null;

	var F={procname:"exceptions.newPyRuntimeErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_372224 = new_py_runtime_error_simple_371601();
	framePtr = F.prev;

	return result_372224;

}

function new_372606() {
	var result_372611 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_372801 = null;
		F.line = 211;
		r_372801 = {m_type: NTI372501, tk: 0, thrown: false, msg: null, context: null, traceBacks: null, id: 0, pyType: null};
		F.line = 212;
		result_372611 = r_372801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_372611;

}

function new_py_syntax_error_simple_372601() {
	var result_372603 = null;

	var F={procname:"exceptions.newPySyntaxErrorSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_372824 = new_372606();
		F.line = 561;
		obj_372824.pyType = py_syntax_error_object_type_372505;
		F.line = 563;
		give_id_157814(obj_372824);
		result_372603 = obj_372824;
	framePtr = F.prev;

	return result_372603;

}

function new_py_syntax_error_default_373221(args_372456) {
	var result_373224 = null;

	var F={procname:"exceptions.newPySyntaxErrorDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_373224 = new_py_syntax_error_simple_372601();
	framePtr = F.prev;

	return result_373224;

}
var py_name_error_object_type_358419 = new_py_type_159261(makeNimstrLit("NameError"));
py_name_error_object_type_358419.magicMethods.Field26 = new_py_name_error_default_359221;
py_name_error_object_type_358419.kind = 3;
py_name_error_object_type_358419.base = py_base_error_object_type_357247;
var py_not_implemented_error_object_type_359505 = new_py_type_159261(makeNimstrLit("NotImplementedError"));
py_not_implemented_error_object_type_359505.magicMethods.Field26 = new_py_not_implemented_error_default_360221;
py_not_implemented_error_object_type_359505.kind = 3;
py_not_implemented_error_object_type_359505.base = py_base_error_object_type_357247;
var py_type_error_object_type_360505 = new_py_type_159261(makeNimstrLit("TypeError"));
py_type_error_object_type_360505.magicMethods.Field26 = new_py_type_error_default_361221;
py_type_error_object_type_360505.kind = 3;
py_type_error_object_type_360505.base = py_base_error_object_type_357247;
var py_attribute_error_object_type_361505 = new_py_type_159261(makeNimstrLit("AttributeError"));
py_attribute_error_object_type_361505.magicMethods.Field26 = new_py_attribute_error_default_362221;
py_attribute_error_object_type_361505.kind = 3;
py_attribute_error_object_type_361505.base = py_base_error_object_type_357247;
var py_value_error_object_type_362505 = new_py_type_159261(makeNimstrLit("ValueError"));
py_value_error_object_type_362505.magicMethods.Field26 = new_py_value_error_default_363221;
py_value_error_object_type_362505.kind = 3;
py_value_error_object_type_362505.base = py_base_error_object_type_357247;
var py_index_error_object_type_363505 = new_py_type_159261(makeNimstrLit("IndexError"));
py_index_error_object_type_363505.magicMethods.Field26 = new_py_index_error_default_364221;
py_index_error_object_type_363505.kind = 3;
py_index_error_object_type_363505.base = py_base_error_object_type_357247;
var py_stop_iter_error_object_type_364505 = new_py_type_159261(makeNimstrLit("StopIterError"));
py_stop_iter_error_object_type_364505.magicMethods.Field26 = new_py_stop_iter_error_default_365221;
py_stop_iter_error_object_type_364505.kind = 3;
py_stop_iter_error_object_type_364505.base = py_base_error_object_type_357247;
var py_lock_error_object_type_365505 = new_py_type_159261(makeNimstrLit("LockError"));
py_lock_error_object_type_365505.magicMethods.Field26 = new_py_lock_error_default_366221;
py_lock_error_object_type_365505.kind = 3;
py_lock_error_object_type_365505.base = py_base_error_object_type_357247;
var py_import_error_object_type_366505 = new_py_type_159261(makeNimstrLit("ImportError"));
py_import_error_object_type_366505.magicMethods.Field26 = new_py_import_error_default_367221;
py_import_error_object_type_366505.kind = 3;
py_import_error_object_type_366505.base = py_base_error_object_type_357247;
var py_unbound_local_error_object_type_367505 = new_py_type_159261(makeNimstrLit("UnboundLocalError"));
py_unbound_local_error_object_type_367505.magicMethods.Field26 = new_py_unbound_local_error_default_368221;
py_unbound_local_error_object_type_367505.kind = 3;
py_unbound_local_error_object_type_367505.base = py_base_error_object_type_357247;
var py_key_error_object_type_368505 = new_py_type_159261(makeNimstrLit("KeyError"));
py_key_error_object_type_368505.magicMethods.Field26 = new_py_key_error_default_369221;
py_key_error_object_type_368505.kind = 3;
py_key_error_object_type_368505.base = py_base_error_object_type_357247;
var py_assertion_error_object_type_369505 = new_py_type_159261(makeNimstrLit("AssertionError"));
py_assertion_error_object_type_369505.magicMethods.Field26 = new_py_assertion_error_default_370221;
py_assertion_error_object_type_369505.kind = 3;
py_assertion_error_object_type_369505.base = py_base_error_object_type_357247;
var py_zero_division_error_object_type_370505 = new_py_type_159261(makeNimstrLit("ZeroDivisionError"));
py_zero_division_error_object_type_370505.magicMethods.Field26 = new_py_zero_division_error_default_371221;
py_zero_division_error_object_type_370505.kind = 3;
py_zero_division_error_object_type_370505.base = py_base_error_object_type_357247;
var py_runtime_error_object_type_371505 = new_py_type_159261(makeNimstrLit("RuntimeError"));
py_runtime_error_object_type_371505.magicMethods.Field26 = new_py_runtime_error_default_372221;
py_runtime_error_object_type_371505.kind = 3;
py_runtime_error_object_type_371505.base = py_base_error_object_type_357247;
var py_syntax_error_object_type_372505 = new_py_type_159261(makeNimstrLit("SyntaxError"));
py_syntax_error_object_type_372505.magicMethods.Field26 = new_py_syntax_error_default_373221;
py_syntax_error_object_type_372505.kind = 3;
py_syntax_error_object_type_372505.base = py_base_error_object_type_357247;

function new_374206() {
	var result_374211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_374401 = null;
		F.line = 211;
		r_374401 = {m_type: NTI374109, v: 0, id: 0, pyType: null};
		F.line = 212;
		result_374211 = r_374401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_374211;

}

function new_py_int_simple_374201() {
	var result_374203 = null;

	var F={procname:"numobjects.newPyIntSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_374424 = new_374206();
		F.line = 561;
		obj_374424.pyType = py_int_object_type_374115;
		F.line = 563;
		give_id_157814(obj_374424);
		result_374203 = obj_374424;
	framePtr = F.prev;

	return result_374203;

}

function new_py_int_default_374821(args_374064) {
	var result_374824 = null;

	var F={procname:"numobjects.newPyIntDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_374824 = new_py_int_simple_374201();
	framePtr = F.prev;

	return result_374824;

}

function new_375206() {
	var result_375211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_375401 = null;
		F.line = 211;
		r_375401 = {m_type: NTI375100, v: 0.0, id: 0, pyType: null};
		F.line = 212;
		result_375211 = r_375401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_375211;

}

function new_py_float_simple_375201() {
	var result_375203 = null;

	var F={procname:"numobjects.newPyFloatSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_375424 = new_375206();
		F.line = 561;
		obj_375424.pyType = py_float_object_type_375106;
		F.line = 563;
		give_id_157814(obj_375424);
		result_375203 = obj_375424;
	framePtr = F.prev;

	return result_375203;

}

function new_py_float_default_375821(args_375055) {
	var result_375824 = null;

	var F={procname:"numobjects.newPyFloatDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_375824 = new_py_float_simple_375201();
	framePtr = F.prev;

	return result_375824;

}
var py_int_object_type_374115 = new_py_type_159261(makeNimstrLit("Int"));
py_int_object_type_374115.kind = 4;
py_int_object_type_374115.magicMethods.Field26 = new_py_int_default_374821;
var py_float_object_type_375106 = new_py_type_159261(makeNimstrLit("Float"));
py_float_object_type_375106.kind = 5;
py_float_object_type_375106.magicMethods.Field26 = new_py_float_default_375821;

function of_py_int_object_374117(obj_374054) {
	var result_374119 = false;

	var F={procname:"numobjects.ofPyIntObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_374119 = (obj_374054.pyType.kind == 4);
	framePtr = F.prev;

	return result_374119;

}

function new_py_int_376142(i_376144) {
	var result_376145 = null;

	var F={procname:"numobjects.newPyInt",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 48;
		result_376145 = new_py_int_simple_374201();
		F.line = 49;
		result_376145.v = i_376144;
	framePtr = F.prev;

	return result_376145;

}

function of_py_float_object_375108(obj_375045) {
	var result_375110 = false;

	var F={procname:"numobjects.ofPyFloatObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_375110 = (obj_375045.pyType.kind == 5);
	framePtr = F.prev;

	return result_375110;

}

function ten_to_the_power_of_17904(b_17906) {
	var result_17907 = 0.0;

	var F={procname:"system.tenToThePowerOf",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system/jssys.nim",line:0};
	framePtr = F;
		F.line = 656;
		var b_17908 = b_17906;
		F.line = 657;
		var a_17909 = 1.0000000000000000e+01;
		F.line = 658;
		result_17907 = 1.0000000000000000e+00;
		L1: do {
			F.line = 659;
				L2: while (true) {
				if (!true) break L2;
					if (((b_17908 & 1) == 1)) {
					F.line = 661;
					result_17907 = (result_17907 * a_17909);
					}
					
					F.line = 662;
					b_17908 = ((b_17908 >>> 0) >>> 1);
					if ((b_17908 == 0)) {
					F.line = 663;
					break L1;
					}
					
					F.line = 664;
					a_17909 = (a_17909 * a_17909);
				}
		} while(false);
	framePtr = F.prev;

	return result_17907;

}

function npuParseFloat(s_38824, number_38826, number_38826_Idx, start_38827) {
	var result_38829 = 0;

	var F={procname:"parseutils.parseFloat",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 371;
		var bf_38830 = [0.0];
		F.line = 372;
		result_38829 = nimParseBiggestFloat(s_38824, bf_38830, 0, start_38827);
		if (!((result_38829 == 0))) {
		F.line = 374;
		number_38826[number_38826_Idx] = bf_38830[0];
		}
		
	framePtr = F.prev;

	return result_38829;

}

function nsuParseFloat(s_134626) {
			var Tmp1;

	var result_134627 = [0.0];

		var l_134629 = npuParseFloat(s_134626, result_134627, 0, 0);
			if (!((l_134629 == (s_134626 != null ? s_134626.length : 0)))) Tmp1 = true; else {				Tmp1 = (l_134629 == 0);			}		if (Tmp1) {
		var e_134636 = null;
		e_134636 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_134636.message = nimCopy(null, (makeNimstrLit("invalid float: ")).concat(s_134626), NTI138);
		e_134636.parent = null;
		raiseException(e_134636, "ValueError");
		}
		

	return result_134627[0];

}

function to_float_376108(py_int_376110) {
	var result_376111 = 0.0;

	var F={procname:"numobjects.toFloat",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 39;
		result_376111 = nsuParseFloat(HEX24_157579(py_int_376110));
	framePtr = F.prev;

	return result_376111;

}

function new_py_float_376159(py_int_376161) {
	var result_376162 = null;

	var F={procname:"numobjects.newPyFloat",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 53;
		result_376162 = new_py_float_simple_375201();
		F.line = 54;
		result_376162.v = to_float_376108(py_int_376161);
	framePtr = F.prev;

	return result_376162;

}

function add_py_int_object_magic_376207(self_no_cast_376209, other_376210) {
	var result_376211 = null;

	var F={procname:"numobjects.addPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_376209.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_376401 = self_no_cast_376209;
		if (of_py_int_object_374117(other_376210)) {
		F.line = 65;
		result_376211 = new_py_int_376142(addInt(self_376401.v, other_376210.v));
		}
		else {
		if (of_py_float_object_375108(other_376210)) {
		F.line = 67;
		var new_float_376407 = new_py_float_376159(self_376401);
		F.line = 68;
		F.line = 56;
		if ((new_float_376407.pyType === null)) {
		F.line = 2895;
		var e_376434 = null;
		F.line = 2896;
		e_376434 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_376434.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_376434.parent = null;
		F.line = 26;
		raiseException(e_376434, "InternalError");
		}
		
		F.line = 27;
		var fun_376602 = new_float_376407.pyType.magicMethods.Field0;
		if ((fun_376602 === null)) {
		F.line = 29;
		var obj_type_str_376611 = new_float_376407.pyType.name;
		F.line = 30;
		var method_str_376613 = makeNimstrLit("add");
		F.line = 31;
		var msg_376615 = (makeNimstrLit("No ")).concat(method_str_376613,makeNimstrLit(" method for "),obj_type_str_376611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_376617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_376617.tk = 3;
		F.line = 106;
		excp_376617.thrown = true;
		F.line = 107;
		excp_376617.msg = new_py_string_176075(msg_376615);
		var excp_376620 = excp_376617;
		F.line = 36;
		result_376211 = excp_376620;
		break BeforeRet;
		}
		
		var fun_376802 = fun_376602;
		F.line = 57;
		var res_376804 = fun_376802(new_float_376407, other_376210);
		result_376211 = res_376804;
		}
		else {
			F.line = 70;
			F.line = 70;
			var fmt_res_377003 = mnewString(0);
			F.line = 70;
			if (fmt_res_377003 != null) { fmt_res_377003 = (fmt_res_377003).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_377003 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_377003 != null) { fmt_res_377003 = (fmt_res_377003).concat(other_376210.pyType.name); } else { fmt_res_377003 = other_376210.pyType.name.slice(); };
			var msg_377202 = (makeNimstrLit("+")).concat(fmt_res_377003);
			F.line = 71;
			F.line = 104;
			var excp_377204 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_377204.tk = 3;
			F.line = 106;
			excp_377204.thrown = true;
			F.line = 107;
			excp_377204.msg = new_py_string_176075(msg_377202);
			result_376211 = excp_377204;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_376211;

}

function sub_py_int_object_magic_377220(self_no_cast_377222, other_377223) {
	var result_377224 = null;

	var F={procname:"numobjects.subPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_377222.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_377401 = self_no_cast_377222;
		if (of_py_int_object_374117(other_377223)) {
		F.line = 65;
		result_377224 = new_py_int_376142(subInt(self_377401.v, other_377223.v));
		}
		else {
		if (of_py_float_object_375108(other_377223)) {
		F.line = 67;
		var new_float_377407 = new_py_float_376159(self_377401);
		F.line = 68;
		F.line = 56;
		if ((new_float_377407.pyType === null)) {
		F.line = 2895;
		var e_377434 = null;
		F.line = 2896;
		e_377434 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_377434.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_377434.parent = null;
		F.line = 26;
		raiseException(e_377434, "InternalError");
		}
		
		F.line = 27;
		var fun_377602 = new_float_377407.pyType.magicMethods.Field1;
		if ((fun_377602 === null)) {
		F.line = 29;
		var obj_type_str_377611 = new_float_377407.pyType.name;
		F.line = 30;
		var method_str_377613 = makeNimstrLit("sub");
		F.line = 31;
		var msg_377615 = (makeNimstrLit("No ")).concat(method_str_377613,makeNimstrLit(" method for "),obj_type_str_377611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_377617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_377617.tk = 3;
		F.line = 106;
		excp_377617.thrown = true;
		F.line = 107;
		excp_377617.msg = new_py_string_176075(msg_377615);
		var excp_377620 = excp_377617;
		F.line = 36;
		result_377224 = excp_377620;
		break BeforeRet;
		}
		
		var fun_377802 = fun_377602;
		F.line = 57;
		var res_377804 = fun_377802(new_float_377407, other_377223);
		result_377224 = res_377804;
		}
		else {
			F.line = 70;
			F.line = 70;
			var fmt_res_378003 = mnewString(0);
			F.line = 70;
			if (fmt_res_378003 != null) { fmt_res_378003 = (fmt_res_378003).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_378003 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_378003 != null) { fmt_res_378003 = (fmt_res_378003).concat(other_377223.pyType.name); } else { fmt_res_378003 = other_377223.pyType.name.slice(); };
			var msg_378202 = (makeNimstrLit("-")).concat(fmt_res_378003);
			F.line = 71;
			F.line = 104;
			var excp_378204 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_378204.tk = 3;
			F.line = 106;
			excp_378204.thrown = true;
			F.line = 107;
			excp_378204.msg = new_py_string_176075(msg_378202);
			result_377224 = excp_378204;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_377224;

}

function mul_py_int_object_magic_378220(self_no_cast_378222, other_378223) {
	var result_378224 = null;

	var F={procname:"numobjects.mulPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_378222.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_378401 = self_no_cast_378222;
		if (of_py_int_object_374117(other_378223)) {
		F.line = 65;
		result_378224 = new_py_int_376142(mulInt(self_378401.v, other_378223.v));
		}
		else {
		if (of_py_float_object_375108(other_378223)) {
		F.line = 67;
		var new_float_378407 = new_py_float_376159(self_378401);
		F.line = 68;
		F.line = 56;
		if ((new_float_378407.pyType === null)) {
		F.line = 2895;
		var e_378434 = null;
		F.line = 2896;
		e_378434 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_378434.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_378434.parent = null;
		F.line = 26;
		raiseException(e_378434, "InternalError");
		}
		
		F.line = 27;
		var fun_378602 = new_float_378407.pyType.magicMethods.Field2;
		if ((fun_378602 === null)) {
		F.line = 29;
		var obj_type_str_378611 = new_float_378407.pyType.name;
		F.line = 30;
		var method_str_378613 = makeNimstrLit("mul");
		F.line = 31;
		var msg_378615 = (makeNimstrLit("No ")).concat(method_str_378613,makeNimstrLit(" method for "),obj_type_str_378611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_378617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_378617.tk = 3;
		F.line = 106;
		excp_378617.thrown = true;
		F.line = 107;
		excp_378617.msg = new_py_string_176075(msg_378615);
		var excp_378620 = excp_378617;
		F.line = 36;
		result_378224 = excp_378620;
		break BeforeRet;
		}
		
		var fun_378802 = fun_378602;
		F.line = 57;
		var res_378804 = fun_378802(new_float_378407, other_378223);
		result_378224 = res_378804;
		}
		else {
			F.line = 70;
			F.line = 70;
			var fmt_res_379003 = mnewString(0);
			F.line = 70;
			if (fmt_res_379003 != null) { fmt_res_379003 = (fmt_res_379003).concat(makeNimstrLit(" not supported by int and ")); } else { fmt_res_379003 = makeNimstrLit(" not supported by int and "); };
			F.line = 260;
			if (fmt_res_379003 != null) { fmt_res_379003 = (fmt_res_379003).concat(other_378223.pyType.name); } else { fmt_res_379003 = other_378223.pyType.name.slice(); };
			var msg_379202 = (makeNimstrLit("*")).concat(fmt_res_379003);
			F.line = 71;
			F.line = 104;
			var excp_379204 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_379204.tk = 3;
			F.line = 106;
			excp_379204.thrown = true;
			F.line = 107;
			excp_379204.msg = new_py_string_176075(msg_379202);
			result_378224 = excp_379204;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_378224;

}

function truediv_py_int_object_magic_379220(self_no_cast_379222, other_379223) {
	var result_379224 = null;

	var F={procname:"numobjects.truedivPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_379222.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_379401 = self_no_cast_379222;
		F.line = 87;
		var casted_379402 = new_py_float_376159(self_379401);
		F.line = 56;
		if ((casted_379402.pyType === null)) {
		F.line = 2895;
		var e_379429 = null;
		F.line = 2896;
		e_379429 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_379429.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_379429.parent = null;
		F.line = 26;
		raiseException(e_379429, "InternalError");
		}
		
		F.line = 27;
		var fun_379602 = casted_379402.pyType.magicMethods.Field3;
		if ((fun_379602 === null)) {
		F.line = 29;
		var obj_type_str_379611 = casted_379402.pyType.name;
		F.line = 30;
		var method_str_379613 = makeNimstrLit("trueDiv");
		F.line = 31;
		var msg_379615 = (makeNimstrLit("No ")).concat(method_str_379613,makeNimstrLit(" method for "),obj_type_str_379611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_379617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_379617.tk = 3;
		F.line = 106;
		excp_379617.thrown = true;
		F.line = 107;
		excp_379617.msg = new_py_string_176075(msg_379615);
		var excp_379620 = excp_379617;
		F.line = 36;
		result_379224 = excp_379620;
		break BeforeRet;
		}
		
		var fun_379802 = fun_379602;
		F.line = 57;
		var res_379804 = fun_379802(casted_379402, other_379223);
		result_379224 = res_379804;
	} while (false);
	framePtr = F.prev;

	return result_379224;

}

function floordiv_py_int_object_magic_380015(self_no_cast_380017, other_380018) {
	var result_380019 = null;

	var F={procname:"numobjects.floordivPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_380017.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_380201 = self_no_cast_380017;
		if (of_py_int_object_374117(other_380018)) {
		F.line = 93;
		var int_other_380202 = other_380018;
		if ((int_other_380202.v == 0)) {
		F.line = 95;
		F.line = 97;
		var excp_380204 = new_py_zero_division_error_simple_370601();
		F.line = 98;
		excp_380204.tk = 13;
		F.line = 99;
		excp_380204.thrown = true;
		result_380019 = excp_380204;
		break BeforeRet;
		}
		
		F.line = 96;
		result_380019 = new_py_int_376142(divInt(self_380201.v, other_380018.v));
		}
		else {
		if (of_py_float_object_375108(other_380018)) {
		F.line = 98;
		var new_float_380206 = new_py_float_376159(self_380201);
		F.line = 99;
		F.line = 56;
		if ((new_float_380206.pyType === null)) {
		F.line = 2895;
		var e_380233 = null;
		F.line = 2896;
		e_380233 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_380233.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_380233.parent = null;
		F.line = 26;
		raiseException(e_380233, "InternalError");
		}
		
		F.line = 27;
		var fun_380402 = new_float_380206.pyType.magicMethods.Field4;
		if ((fun_380402 === null)) {
		F.line = 29;
		var obj_type_str_380411 = new_float_380206.pyType.name;
		F.line = 30;
		var method_str_380413 = makeNimstrLit("floorDiv");
		F.line = 31;
		var msg_380415 = (makeNimstrLit("No ")).concat(method_str_380413,makeNimstrLit(" method for "),obj_type_str_380411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_380417 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_380417.tk = 3;
		F.line = 106;
		excp_380417.thrown = true;
		F.line = 107;
		excp_380417.msg = new_py_string_176075(msg_380415);
		var excp_380420 = excp_380417;
		F.line = 36;
		result_380019 = excp_380420;
		break BeforeRet;
		}
		
		var fun_380602 = fun_380402;
		F.line = 57;
		var res_380604 = fun_380602(new_float_380206, other_380018);
		result_380019 = res_380604;
		}
		else {
			F.line = 101;
			F.line = 104;
			var excp_381002 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_381002.tk = 3;
			F.line = 106;
			excp_381002.thrown = true;
			F.line = 107;
			F.line = 101;
			var fmt_res_380804 = mnewString(0);
			F.line = 101;
			if (fmt_res_380804 != null) { fmt_res_380804 = (fmt_res_380804).concat(makeNimstrLit("floor divide not supported by int and ")); } else { fmt_res_380804 = makeNimstrLit("floor divide not supported by int and "); };
			F.line = 260;
			if (fmt_res_380804 != null) { fmt_res_380804 = (fmt_res_380804).concat(other_380018.pyType.name); } else { fmt_res_380804 = other_380018.pyType.name.slice(); };
			excp_381002.msg = new_py_string_176075(fmt_res_380804);
			result_380019 = excp_381002;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_380019;

}

function positive_py_int_object_magic_381018(self_no_cast_381020) {
	var result_381021 = null;

	var F={procname:"numobjects.positivePyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_381020.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_381201 = self_no_cast_381020;
		result_381021 = self_381201;
	framePtr = F.prev;

	return result_381021;

}

function negative_py_int_object_magic_381216(self_no_cast_381218) {
	var result_381219 = null;

	var F={procname:"numobjects.negativePyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_381218.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_381401 = self_no_cast_381218;
		result_381219 = new_py_int_376142(negInt(self_381401.v));
	framePtr = F.prev;

	return result_381219;

}

function bool_py_int_object_magic_381416(self_no_cast_381418) {
		var Tmp1;

	var result_381419 = null;

	var F={procname:"numobjects.boolPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_381418.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_381601 = self_no_cast_381418;
		if ((self_381601.v == 0)) {
		Tmp1 = py_false_obj_354075;
		}
		else {
		Tmp1 = py_true_obj_354074;
		}
		
		result_381419 = Tmp1;
	framePtr = F.prev;

	return result_381419;

}

function lt_py_int_object_magic_381616(self_no_cast_381618, other_381619) {
	var result_381620 = null;

	var F={procname:"numobjects.ltPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_381618.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_381801 = self_no_cast_381618;
		if (of_py_int_object_374117(other_381619)) {
		if ((self_381801.v < other_381619.v)) {
		F.line = 126;
		result_381620 = py_true_obj_354074;
		}
		else {
			F.line = 128;
			result_381620 = py_false_obj_354075;
		}
		
		}
		else {
		if (of_py_float_object_375108(other_381619)) {
		F.line = 130;
		F.line = 56;
		if ((other_381619.pyType === null)) {
		F.line = 2895;
		var e_381828 = null;
		F.line = 2896;
		e_381828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_381828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_381828.parent = null;
		F.line = 26;
		raiseException(e_381828, "InternalError");
		}
		
		F.line = 27;
		var fun_382002 = other_381619.pyType.magicMethods.Field21;
		if ((fun_382002 === null)) {
		F.line = 29;
		var obj_type_str_382011 = other_381619.pyType.name;
		F.line = 30;
		var method_str_382013 = makeNimstrLit("ge");
		F.line = 31;
		var msg_382015 = (makeNimstrLit("No ")).concat(method_str_382013,makeNimstrLit(" method for "),obj_type_str_382011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_382017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_382017.tk = 3;
		F.line = 106;
		excp_382017.thrown = true;
		F.line = 107;
		excp_382017.msg = new_py_string_176075(msg_382015);
		var excp_382020 = excp_382017;
		F.line = 36;
		result_381620 = excp_382020;
		break BeforeRet;
		}
		
		var fun_382202 = fun_382002;
		F.line = 57;
		var res_382204 = fun_382202(other_381619, self_381801);
		result_381620 = res_382204;
		}
		else {
			F.line = 132;
			F.line = 132;
			var fmt_res_382403 = mnewString(0);
			F.line = 132;
			if (fmt_res_382403 != null) { fmt_res_382403 = (fmt_res_382403).concat(makeNimstrLit("< not supported by int and ")); } else { fmt_res_382403 = makeNimstrLit("< not supported by int and "); };
			F.line = 260;
			if (fmt_res_382403 != null) { fmt_res_382403 = (fmt_res_382403).concat(other_381619.pyType.name); } else { fmt_res_382403 = other_381619.pyType.name.slice(); };
			var msg_382601 = nimCopy(null, fmt_res_382403, NTI138);
			F.line = 133;
			F.line = 104;
			var excp_382603 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_382603.tk = 3;
			F.line = 106;
			excp_382603.thrown = true;
			F.line = 107;
			excp_382603.msg = new_py_string_176075(msg_382601);
			result_381620 = excp_382603;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_381620;

}

function of_py_bool_object_353106(obj_353043) {
	var result_353108 = false;

	var F={procname:"boolobject.ofPyBoolObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_353108 = (obj_353043.pyType.kind == 6);
	framePtr = F.prev;

	return result_353108;

}

function eq_py_int_object_magic_382619(self_no_cast_382621, other_382622) {
	var result_382623 = null;

	var F={procname:"numobjects.eqPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_382621.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_382801 = self_no_cast_382621;
		if (of_py_int_object_374117(other_382622)) {
		if ((self_382801.v == other_382622.v)) {
		F.line = 139;
		result_382623 = py_true_obj_354074;
		}
		else {
			F.line = 141;
			result_382623 = py_false_obj_354075;
		}
		
		}
		else {
		if (of_py_float_object_375108(other_382622)) {
		F.line = 143;
		F.line = 56;
		if ((other_382622.pyType === null)) {
		F.line = 2895;
		var e_382828 = null;
		F.line = 2896;
		e_382828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_382828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_382828.parent = null;
		F.line = 26;
		raiseException(e_382828, "InternalError");
		}
		
		F.line = 27;
		var fun_383002 = other_382622.pyType.magicMethods.Field18;
		if ((fun_383002 === null)) {
		F.line = 29;
		var obj_type_str_383011 = other_382622.pyType.name;
		F.line = 30;
		var method_str_383013 = makeNimstrLit("eq");
		F.line = 31;
		var msg_383015 = (makeNimstrLit("No ")).concat(method_str_383013,makeNimstrLit(" method for "),obj_type_str_383011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_383017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_383017.tk = 3;
		F.line = 106;
		excp_383017.thrown = true;
		F.line = 107;
		excp_383017.msg = new_py_string_176075(msg_383015);
		var excp_383020 = excp_383017;
		F.line = 36;
		result_382623 = excp_383020;
		break BeforeRet;
		}
		
		var fun_383202 = fun_383002;
		F.line = 57;
		var res_383204 = fun_383202(other_382622, self_382801);
		result_382623 = res_383204;
		}
		else {
		if (of_py_bool_object_353106(other_382622)) {
		if ((self_382801.v == 1)) {
		F.line = 146;
		result_382623 = other_382622;
		}
		else {
			F.line = 148;
			F.line = 45;
			if ((other_382622.pyType === null)) {
			F.line = 2895;
			var e_383427 = null;
			F.line = 2896;
			e_383427 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_383427.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_383427.parent = null;
			F.line = 26;
			raiseException(e_383427, "InternalError");
			}
			
			F.line = 27;
			var fun_383602 = other_382622.pyType.magicMethods.Field7;
			if ((fun_383602 === null)) {
			F.line = 29;
			var obj_type_str_383611 = other_382622.pyType.name;
			F.line = 30;
			var method_str_383613 = makeNimstrLit("Not");
			F.line = 31;
			var msg_383615 = (makeNimstrLit("No ")).concat(method_str_383613,makeNimstrLit(" method for "),obj_type_str_383611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_383617 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_383617.tk = 3;
			F.line = 106;
			excp_383617.thrown = true;
			F.line = 107;
			excp_383617.msg = new_py_string_176075(msg_383615);
			var excp_383620 = excp_383617;
			F.line = 36;
			result_382623 = excp_383620;
			break BeforeRet;
			}
			
			var fun_383802 = fun_383602;
			F.line = 46;
			var res_383804 = fun_383802(other_382622);
			result_382623 = res_383804;
		}
		
		}
		else {
			F.line = 150;
			F.line = 150;
			var fmt_res_384003 = mnewString(0);
			F.line = 150;
			if (fmt_res_384003 != null) { fmt_res_384003 = (fmt_res_384003).concat(makeNimstrLit("== not supported by int and ")); } else { fmt_res_384003 = makeNimstrLit("== not supported by int and "); };
			F.line = 260;
			if (fmt_res_384003 != null) { fmt_res_384003 = (fmt_res_384003).concat(other_382622.pyType.name); } else { fmt_res_384003 = other_382622.pyType.name.slice(); };
			var msg_384201 = nimCopy(null, fmt_res_384003, NTI138);
			F.line = 151;
			F.line = 104;
			var excp_384203 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_384203.tk = 3;
			F.line = 106;
			excp_384203.thrown = true;
			F.line = 107;
			excp_384203.msg = new_py_string_176075(msg_384201);
			result_382623 = excp_384203;
		}
		}}
	} while (false);
	framePtr = F.prev;

	return result_382623;

}

function str_py_int_object_magic_384219(self_no_cast_384221) {
	var result_384222 = null;

	var F={procname:"numobjects.strPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_384221.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_384401 = self_no_cast_384221;
		result_384222 = new_py_string_176075(HEX24_157579(self_384401));
	framePtr = F.prev;

	return result_384222;

}

function repr_py_int_object_magic_384416(self_no_cast_384418) {
	var result_384419 = null;

	var F={procname:"numobjects.reprPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_384418.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_384601 = self_no_cast_384418;
		result_384419 = new_py_string_176075(HEX24_157579(self_384601));
	framePtr = F.prev;

	return result_384419;

}

function hash_py_int_object_magic_384616(self_no_cast_384618) {
	var result_384619 = null;

	var F={procname:"numobjects.hashPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_384618.m_type, NTI374109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIntObject` "));
		}
		
		F.line = 438;
		var self_384801 = self_no_cast_384618;
		result_384619 = self_384801;
	framePtr = F.prev;

	return result_384619;

}

function raw_parse_int_38307(s_38309, b_38311, b_38311_Idx, start_38312) {
			var Tmp1;
					var Tmp4;

	var result_38314 = 0;

	var F={procname:"parseutils.rawParseInt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 249;
		var sign_38316 = -1;
		F.line = 250;
		var i_38317 = start_38312;
		if ((i_38317 < (s_38309 != null ? s_38309.length : 0))) {
		if ((s_38309[chckIndx(i_38317, 0, s_38309.length+0-1)-0] == 43)) {
		F.line = 252;
		i_38317 = addInt(i_38317, 1);
		}
		else {
		if ((s_38309[chckIndx(i_38317, 0, s_38309.length+0-1)-0] == 45)) {
		F.line = 254;
		i_38317 = addInt(i_38317, 1);
		F.line = 255;
		sign_38316 = 1;
		}
		}
		}
		
			if (!(i_38317 < (s_38309 != null ? s_38309.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet11[s_38309[chckIndx(i_38317, 0, s_38309.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 257;
		b_38311[b_38311_Idx] = 0;
		L2: do {
			F.line = 258;
				L3: while (true) {
					if (!(i_38317 < (s_38309 != null ? s_38309.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet12[s_38309[chckIndx(i_38317, 0, s_38309.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 259;
					b_38311[b_38311_Idx] = subInt(mulInt(b_38311[b_38311_Idx], 10), subInt(s_38309[chckIndx(i_38317, 0, s_38309.length+0-1)-0], 48));
					F.line = 260;
					i_38317 = addInt(i_38317, 1);
					L5: do {
						F.line = 261;
							L6: while (true) {
							if (!((i_38317 < (s_38309 != null ? s_38309.length : 0)) && (s_38309[chckIndx(i_38317, 0, s_38309.length+0-1)-0] == 95))) break L6;
								F.line = 261;
								i_38317 = addInt(i_38317, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 262;
		b_38311[b_38311_Idx] = mulInt(b_38311[b_38311_Idx], sign_38316);
		F.line = 263;
		result_38314 = subInt(i_38317, start_38312);
		}
		
	framePtr = F.prev;

	return result_38314;

}

function npuParseBiggestInt(s_38403, number_38405, number_38405_Idx, start_38406) {
	var result_38408 = 0;

	var F={procname:"parseutils.parseBiggestInt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 271;
		var res_38409 = [0];
		F.line = 274;
		result_38408 = raw_parse_int_38307(s_38403, res_38409, 0, start_38406);
		F.line = 275;
		number_38405[number_38405_Idx] = res_38409[0];
	framePtr = F.prev;

	return result_38408;

}

function npuParseInt(s_38426, number_38428, number_38428_Idx, start_38429) {
			var Tmp1;
				var Tmp2;

	var result_38431 = 0;

	var F={procname:"parseutils.parseInt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 282;
		var res_38432 = [0];
		F.line = 283;
		result_38431 = npuParseBiggestInt(s_38426, res_38432, 0, start_38429);
			if (!true) Tmp1 = false; else {				if ((res_38432[0] < -2147483648)) Tmp2 = true; else {					Tmp2 = (2147483647 < res_38432[0]);				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 2895;
		var e_38459 = null;
		F.line = 2896;
		e_38459 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 286;
		e_38459.message = nimCopy(null, makeNimstrLit("overflow"), NTI138);
		F.line = 2891;
		e_38459.parent = null;
		F.line = 286;
		raiseException(e_38459, "OverflowError");
		}
		else {
		if (!((result_38431 == 0))) {
		F.line = 288;
		number_38428[number_38428_Idx] = chckRange(res_38432[0], -2147483648, 2147483647);
		}
		}
	framePtr = F.prev;

	return result_38431;

}

function nsuParseInt(s_134490) {
			var Tmp1;

	var result_134491 = [0];

		var l_134493 = npuParseInt(s_134490, result_134491, 0, 0);
			if (!((l_134493 == (s_134490 != null ? s_134490.length : 0)))) Tmp1 = true; else {				Tmp1 = (l_134493 == 0);			}		if (Tmp1) {
		var e_134500 = null;
		e_134500 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_134500.message = nimCopy(null, (makeNimstrLit("invalid integer: ")).concat(s_134490), NTI138);
		e_134500.parent = null;
		raiseException(e_134500, "ValueError");
		}
		

	return result_134491[0];

}

function new_py_int_376125(str_376127) {
	var result_376128 = null;

	var F={procname:"numobjects.newPyInt",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 43;
		result_376128 = new_py_int_simple_374201();
		F.line = 44;
		result_376128.v = nsuParseInt(str_376127);
	framePtr = F.prev;

	return result_376128;

}

function nsuSplitString(s_133820, sep_133821, maxsplit_133823) {
	var result_133825 = null;

		if (!((0 < (sep_133821 != null ? sep_133821.length : 0)))) {
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/strutils.nim(803, 11) `\x0A0 < len(sep)` "));
		}
		
		result_133825 = nimCopy(null, [], NTI134017);
		L1: do {
			var x_134019 = null;
			var last_134034 = 0;
			var splits_134036 = maxsplit_133823;
			L2: do {
					L3: while (true) {
					if (!(last_134034 <= (s_133820 != null ? s_133820.length : 0))) break L3;
						var first_134038 = last_134034;
						L4: do {
								L5: while (true) {
								if (!((last_134034 < (s_133820 != null ? s_133820.length : 0)) && !(substr_eq_132789(s_133820, last_134034, sep_133821)))) break L5;
									last_134034 += 1;
								}
						} while(false);
						if ((splits_134036 == 0)) {
						last_134034 = (s_133820 != null ? s_133820.length : 0);
						}
						
						x_134019 = substr_23422(s_133820, first_134038, (last_134034 - 1));
						var Tmp6 = nimCopy(null, x_134019, NTI138);
						if (result_133825 != null) { result_133825.push(Tmp6); } else { result_133825 = [Tmp6]; };
						if ((splits_134036 == 0)) {
						break L2;
						}
						
						splits_134036 -= 1;
						last_134034 += (sep_133821 != null ? sep_133821.length : 0);
					}
			} while(false);
		} while(false);

	return result_133825;

}

function is_nim_exception_15277() {
		return lastJSError.m_type;

	
}

function new_py_int_object_magic_384816(args_384834) {
	var result_384835 = null;

	var F={procname:"numobjects.newPyIntObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(((args_384834 != null ? args_384834.length : 0) == 2))) {
		F.line = 183;
		var msg_384847 = null;
		if (false) {
		F.line = 185;
		F.line = 185;
		var fmt_res_384852 = mnewString(0);
		F.line = 185;
		if (fmt_res_384852 != null) { fmt_res_384852 = (fmt_res_384852).concat(makeNimstrLit(" argument (")); } else { fmt_res_384852 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_384852 != null) { fmt_res_384852 = (fmt_res_384852).concat(cstrToNimstr(((args_384834 != null ? args_384834.length : 0))+"")); } else { fmt_res_384852 = cstrToNimstr(((args_384834 != null ? args_384834.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_384852 != null) { fmt_res_384852 = (fmt_res_384852).concat(makeNimstrLit(" given)")); } else { fmt_res_384852 = makeNimstrLit(" given)"); };
		msg_384847 = nimCopy(null, (makeNimstrLit(" takes exactly 2")).concat(fmt_res_384852), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_385010 = mnewString(0);
			F.line = 187;
			if (fmt_res_385010 != null) { fmt_res_385010 = (fmt_res_385010).concat(makeNimstrLit(" argument (")); } else { fmt_res_385010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_385010 != null) { fmt_res_385010 = (fmt_res_385010).concat(cstrToNimstr(((args_384834 != null ? args_384834.length : 0))+"")); } else { fmt_res_385010 = cstrToNimstr(((args_384834 != null ? args_384834.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_385010 != null) { fmt_res_385010 = (fmt_res_385010).concat(makeNimstrLit(" given)")); } else { fmt_res_385010 = makeNimstrLit(" given)"); };
			msg_384847 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_385010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_385209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_385209.tk = 3;
		F.line = 106;
		excp_385209.thrown = true;
		F.line = 107;
		excp_385209.msg = new_py_string_176075(msg_384847);
		result_384835 = excp_385209;
		break BeforeRet;
		}
		
		F.line = 167;
		var arg_385211 = args_384834[chckIndx(1, 0, args_384834.length+0-1)-0];
		F.line = 168;
		switch (arg_385211.pyType.kind) {
		case 4:
			F.line = 170;
			result_384835 = arg_385211;
			break BeforeRet;
			break;
		case 5:
			F.line = 172;
			var i_str_385214 = cstrToNimstr((arg_385211.v)+"");
			F.line = 173;
			result_384835 = new_py_int_376125(nsuSplitString(i_str_385214, makeNimstrLit("."), -1)[chckIndx(0, 0, nsuSplitString(i_str_385214, makeNimstrLit("."), -1).length+0-1)-0]);
			break BeforeRet;
			break;
		case 10:
			F.line = 175;
			var str_385216 = nimCopy(null, arg_385211.str, NTI138);
			F.line = 176;
++excHandler;
			try {
			F.line = 177;
			result_384835 = new_py_int_376125(str_385216);
			break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
			framePtr = F;
			if (lastJSError && (isObj(lastJSError.m_type, NTI3852))) {
			F.line = 179;
			F.line = 179;
			var fmt_res_385219 = mnewString(0);
			F.line = 179;
			if (fmt_res_385219 != null) { fmt_res_385219 = (fmt_res_385219).concat(makeNimstrLit("invalid literal for int() with base 10: \'")); } else { fmt_res_385219 = makeNimstrLit("invalid literal for int() with base 10: \'"); };
			F.line = 260;
			if (fmt_res_385219 != null) { fmt_res_385219 = (fmt_res_385219).concat(str_385216); } else { fmt_res_385219 = str_385216.slice(); };
			F.line = 179;
			if (fmt_res_385219 != null) { fmt_res_385219 = (fmt_res_385219).concat(makeNimstrLit("\'")); } else { fmt_res_385219 = makeNimstrLit("\'"); };
			var msg_385401 = nimCopy(null, fmt_res_385219, NTI138);
			F.line = 180;
			F.line = 104;
			var excp_385403 = new_py_value_error_simple_362601();
			F.line = 105;
			excp_385403.tk = 5;
			F.line = 106;
			excp_385403.thrown = true;
			F.line = 107;
			excp_385403.msg = new_py_string_176075(msg_385401);
			result_384835 = excp_385403;
			break BeforeRet;
			}
			else {
				reraiseException();
			}
lastJSError = prevJSError;
			} finally {
			framePtr = F;
			}
			break;
		case 6:
			if (arg_385211.b) {
			F.line = 183;
			result_384835 = new_py_int_376142(1);
			break BeforeRet;
			}
			else {
				F.line = 185;
				result_384835 = new_py_int_376142(0);
				break BeforeRet;
			}
			
			break;
		default: 
			F.line = 187;
			F.line = 104;
			var excp_385602 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_385602.tk = 3;
			F.line = 106;
			excp_385602.thrown = true;
			F.line = 107;
			F.line = 187;
			var fmt_res_385408 = mnewString(0);
			F.line = 187;
			if (fmt_res_385408 != null) { fmt_res_385408 = (fmt_res_385408).concat(makeNimstrLit("Int argument can\'t be \'")); } else { fmt_res_385408 = makeNimstrLit("Int argument can\'t be \'"); };
			F.line = 260;
			if (fmt_res_385408 != null) { fmt_res_385408 = (fmt_res_385408).concat(arg_385211.pyType.name); } else { fmt_res_385408 = arg_385211.pyType.name.slice(); };
			F.line = 187;
			if (fmt_res_385408 != null) { fmt_res_385408 = (fmt_res_385408).concat(makeNimstrLit("\'")); } else { fmt_res_385408 = makeNimstrLit("\'"); };
			excp_385602.msg = new_py_string_176075(fmt_res_385408);
			result_384835 = excp_385602;
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_384835;

}
py_int_object_type_374115.magicMethods.Field0 = add_py_int_object_magic_376207;
py_int_object_type_374115.magicMethods.Field1 = sub_py_int_object_magic_377220;
py_int_object_type_374115.magicMethods.Field2 = mul_py_int_object_magic_378220;
py_int_object_type_374115.magicMethods.Field3 = truediv_py_int_object_magic_379220;
py_int_object_type_374115.magicMethods.Field4 = floordiv_py_int_object_magic_380015;
py_int_object_type_374115.magicMethods.Field9 = positive_py_int_object_magic_381018;
py_int_object_type_374115.magicMethods.Field8 = negative_py_int_object_magic_381216;
py_int_object_type_374115.magicMethods.Field12 = bool_py_int_object_magic_381416;
py_int_object_type_374115.magicMethods.Field16 = lt_py_int_object_magic_381616;
py_int_object_type_374115.magicMethods.Field18 = eq_py_int_object_magic_382619;
py_int_object_type_374115.magicMethods.Field24 = str_py_int_object_magic_384219;
py_int_object_type_374115.magicMethods.Field25 = repr_py_int_object_magic_384416;
py_int_object_type_374115.magicMethods.Field30 = hash_py_int_object_magic_384616;
py_int_object_type_374115.magicMethods.Field26 = new_py_int_object_magic_384816;

function new_py_float_376176(v_376178) {
	var result_376179 = null;

	var F={procname:"numobjects.newPyFloat",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 58;
		result_376179 = new_py_float_simple_375201();
		F.line = 59;
		result_376179.v = v_376178;
	framePtr = F.prev;

	return result_376179;

}

function add_py_float_object_magic_385870(self_no_cast_385872, other_385873) {
	var result_385874 = null;

	var F={procname:"numobjects.addPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_385872.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_386001 = self_no_cast_385872;
		F.line = 190;
		var casted_386002 = null;
		if (of_py_float_object_375108(other_385873)) {
		F.line = 192;
		casted_386002 = other_385873;
		}
		else {
		if (of_py_int_object_374117(other_385873)) {
		F.line = 194;
		casted_386002 = new_py_float_376159(other_385873);
		}
		else {
			F.line = 196;
			F.line = 196;
			var fmt_res_386005 = mnewString(0);
			F.line = 196;
			if (fmt_res_386005 != null) { fmt_res_386005 = (fmt_res_386005).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_386005 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_386005 != null) { fmt_res_386005 = (fmt_res_386005).concat(other_385873.pyType.name); } else { fmt_res_386005 = other_385873.pyType.name.slice(); };
			var msg_386202 = (makeNimstrLit("add")).concat(fmt_res_386005);
			F.line = 197;
			F.line = 104;
			var excp_386204 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_386204.tk = 3;
			F.line = 106;
			excp_386204.thrown = true;
			F.line = 107;
			excp_386204.msg = new_py_string_176075(msg_386202);
			result_385874 = excp_386204;
			break BeforeRet;
		}
		}
		result_385874 = new_py_float_376176((self_386001.v + casted_386002.v));
	} while (false);
	framePtr = F.prev;

	return result_385874;

}

function sub_py_float_object_magic_386222(self_no_cast_386224, other_386225) {
	var result_386226 = null;

	var F={procname:"numobjects.subPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_386224.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_386401 = self_no_cast_386224;
		F.line = 190;
		var casted_386402 = null;
		if (of_py_float_object_375108(other_386225)) {
		F.line = 192;
		casted_386402 = other_386225;
		}
		else {
		if (of_py_int_object_374117(other_386225)) {
		F.line = 194;
		casted_386402 = new_py_float_376159(other_386225);
		}
		else {
			F.line = 196;
			F.line = 196;
			var fmt_res_386405 = mnewString(0);
			F.line = 196;
			if (fmt_res_386405 != null) { fmt_res_386405 = (fmt_res_386405).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_386405 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_386405 != null) { fmt_res_386405 = (fmt_res_386405).concat(other_386225.pyType.name); } else { fmt_res_386405 = other_386225.pyType.name.slice(); };
			var msg_386602 = (makeNimstrLit("sub")).concat(fmt_res_386405);
			F.line = 197;
			F.line = 104;
			var excp_386604 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_386604.tk = 3;
			F.line = 106;
			excp_386604.thrown = true;
			F.line = 107;
			excp_386604.msg = new_py_string_176075(msg_386602);
			result_386226 = excp_386604;
			break BeforeRet;
		}
		}
		result_386226 = new_py_float_376176((self_386401.v - casted_386402.v));
	} while (false);
	framePtr = F.prev;

	return result_386226;

}

function mul_py_float_object_magic_386622(self_no_cast_386624, other_386625) {
	var result_386626 = null;

	var F={procname:"numobjects.mulPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_386624.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_386801 = self_no_cast_386624;
		F.line = 190;
		var casted_386802 = null;
		if (of_py_float_object_375108(other_386625)) {
		F.line = 192;
		casted_386802 = other_386625;
		}
		else {
		if (of_py_int_object_374117(other_386625)) {
		F.line = 194;
		casted_386802 = new_py_float_376159(other_386625);
		}
		else {
			F.line = 196;
			F.line = 196;
			var fmt_res_386805 = mnewString(0);
			F.line = 196;
			if (fmt_res_386805 != null) { fmt_res_386805 = (fmt_res_386805).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_386805 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_386805 != null) { fmt_res_386805 = (fmt_res_386805).concat(other_386625.pyType.name); } else { fmt_res_386805 = other_386625.pyType.name.slice(); };
			var msg_387002 = (makeNimstrLit("mul")).concat(fmt_res_386805);
			F.line = 197;
			F.line = 104;
			var excp_387004 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_387004.tk = 3;
			F.line = 106;
			excp_387004.thrown = true;
			F.line = 107;
			excp_387004.msg = new_py_string_176075(msg_387002);
			result_386626 = excp_387004;
			break BeforeRet;
		}
		}
		result_386626 = new_py_float_376176((self_386801.v * casted_386802.v));
	} while (false);
	framePtr = F.prev;

	return result_386626;

}

function truediv_py_float_object_magic_387022(self_no_cast_387024, other_387025) {
	var result_387026 = null;

	var F={procname:"numobjects.truedivPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_387024.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_387201 = self_no_cast_387024;
		F.line = 190;
		var casted_387202 = null;
		if (of_py_float_object_375108(other_387025)) {
		F.line = 192;
		casted_387202 = other_387025;
		}
		else {
		if (of_py_int_object_374117(other_387025)) {
		F.line = 194;
		casted_387202 = new_py_float_376159(other_387025);
		}
		else {
			F.line = 196;
			F.line = 196;
			var fmt_res_387205 = mnewString(0);
			F.line = 196;
			if (fmt_res_387205 != null) { fmt_res_387205 = (fmt_res_387205).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_387205 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_387205 != null) { fmt_res_387205 = (fmt_res_387205).concat(other_387025.pyType.name); } else { fmt_res_387205 = other_387025.pyType.name.slice(); };
			var msg_387402 = (makeNimstrLit("truediv")).concat(fmt_res_387205);
			F.line = 197;
			F.line = 104;
			var excp_387404 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_387404.tk = 3;
			F.line = 106;
			excp_387404.thrown = true;
			F.line = 107;
			excp_387404.msg = new_py_string_176075(msg_387402);
			result_387026 = excp_387404;
			break BeforeRet;
		}
		}
		result_387026 = new_py_float_376176((self_387201.v / casted_387202.v));
	} while (false);
	framePtr = F.prev;

	return result_387026;

}

function floordiv_py_float_object_magic_387422(self_no_cast_387424, other_387425) {
	var result_387426 = null;

	var F={procname:"numobjects.floordivPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_387424.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_387601 = self_no_cast_387424;
		F.line = 190;
		var casted_387602 = null;
		if (of_py_float_object_375108(other_387425)) {
		F.line = 192;
		casted_387602 = other_387425;
		}
		else {
		if (of_py_int_object_374117(other_387425)) {
		F.line = 194;
		casted_387602 = new_py_float_376159(other_387425);
		}
		else {
			F.line = 196;
			F.line = 196;
			var fmt_res_387605 = mnewString(0);
			F.line = 196;
			if (fmt_res_387605 != null) { fmt_res_387605 = (fmt_res_387605).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_387605 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_387605 != null) { fmt_res_387605 = (fmt_res_387605).concat(other_387425.pyType.name); } else { fmt_res_387605 = other_387425.pyType.name.slice(); };
			var msg_387802 = (makeNimstrLit("floordiv")).concat(fmt_res_387605);
			F.line = 197;
			F.line = 104;
			var excp_387804 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_387804.tk = 3;
			F.line = 106;
			excp_387804.thrown = true;
			F.line = 107;
			excp_387804.msg = new_py_string_176075(msg_387802);
			result_387426 = excp_387804;
			break BeforeRet;
		}
		}
		result_387426 = new_py_float_376176(Math.floor((self_387601.v / casted_387602.v)));
	} while (false);
	framePtr = F.prev;

	return result_387426;

}

function pow_py_float_object_magic_387822(self_no_cast_387824, other_387825) {
	var result_387826 = null;

	var F={procname:"numobjects.powPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_387824.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_388001 = self_no_cast_387824;
		F.line = 190;
		var casted_388002 = null;
		if (of_py_float_object_375108(other_387825)) {
		F.line = 192;
		casted_388002 = other_387825;
		}
		else {
		if (of_py_int_object_374117(other_387825)) {
		F.line = 194;
		casted_388002 = new_py_float_376159(other_387825);
		}
		else {
			F.line = 196;
			F.line = 196;
			var fmt_res_388005 = mnewString(0);
			F.line = 196;
			if (fmt_res_388005 != null) { fmt_res_388005 = (fmt_res_388005).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_388005 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_388005 != null) { fmt_res_388005 = (fmt_res_388005).concat(other_387825.pyType.name); } else { fmt_res_388005 = other_387825.pyType.name.slice(); };
			var msg_388202 = (makeNimstrLit("pow")).concat(fmt_res_388005);
			F.line = 197;
			F.line = 104;
			var excp_388204 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_388204.tk = 3;
			F.line = 106;
			excp_388204.thrown = true;
			F.line = 107;
			excp_388204.msg = new_py_string_176075(msg_388202);
			result_387826 = excp_388204;
			break BeforeRet;
		}
		}
		result_387826 = new_py_float_376176(Math.pow(self_388001.v, casted_388002.v));
	} while (false);
	framePtr = F.prev;

	return result_387826;

}

function positive_py_float_object_magic_388220(self_no_cast_388222) {
	var result_388223 = null;

	var F={procname:"numobjects.positivePyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_388222.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_388401 = self_no_cast_388222;
		result_388223 = self_388401;
	framePtr = F.prev;

	return result_388223;

}

function negative_py_float_object_magic_388416(self_no_cast_388418) {
	var result_388419 = null;

	var F={procname:"numobjects.negativePyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_388418.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_388601 = self_no_cast_388418;
		result_388419 = new_py_float_376176(-(self_388601.v));
	framePtr = F.prev;

	return result_388419;

}

function bool_py_float_object_magic_388616(self_no_cast_388618) {
	var result_388619 = null;

	var F={procname:"numobjects.boolPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_388618.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_388801 = self_no_cast_388618;
		if ((self_388801.v == 0.0)) {
		F.line = 243;
		result_388619 = py_false_obj_354075;
		break BeforeRet;
		}
		else {
			F.line = 245;
			result_388619 = py_true_obj_354074;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_388619;

}

function lt_py_float_object_magic_388818(self_no_cast_388820, other_388821) {
	var result_388822 = null;

	var F={procname:"numobjects.ltPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_388820.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_389001 = self_no_cast_388820;
		F.line = 190;
		var casted_389002 = null;
		if (of_py_float_object_375108(other_388821)) {
		F.line = 192;
		casted_389002 = other_388821;
		}
		else {
		if (of_py_int_object_374117(other_388821)) {
		F.line = 194;
		casted_389002 = new_py_float_376159(other_388821);
		}
		else {
			F.line = 196;
			F.line = 196;
			var fmt_res_389005 = mnewString(0);
			F.line = 196;
			if (fmt_res_389005 != null) { fmt_res_389005 = (fmt_res_389005).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_389005 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_389005 != null) { fmt_res_389005 = (fmt_res_389005).concat(other_388821.pyType.name); } else { fmt_res_389005 = other_388821.pyType.name.slice(); };
			var msg_389202 = (makeNimstrLit("lt")).concat(fmt_res_389005);
			F.line = 197;
			F.line = 104;
			var excp_389204 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_389204.tk = 3;
			F.line = 106;
			excp_389204.thrown = true;
			F.line = 107;
			excp_389204.msg = new_py_string_176075(msg_389202);
			result_388822 = excp_389204;
			break BeforeRet;
		}
		}
		if ((self_389001.v < casted_389002.v)) {
		F.line = 250;
		result_388822 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 252;
			result_388822 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_388822;

}

function eq_py_float_object_magic_389222(self_no_cast_389224, other_389225) {
	var result_389226 = null;

	var F={procname:"numobjects.eqPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_389224.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_389401 = self_no_cast_389224;
		F.line = 190;
		var casted_389402 = null;
		if (of_py_float_object_375108(other_389225)) {
		F.line = 192;
		casted_389402 = other_389225;
		}
		else {
		if (of_py_int_object_374117(other_389225)) {
		F.line = 194;
		casted_389402 = new_py_float_376159(other_389225);
		}
		else {
			F.line = 196;
			F.line = 196;
			var fmt_res_389405 = mnewString(0);
			F.line = 196;
			if (fmt_res_389405 != null) { fmt_res_389405 = (fmt_res_389405).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_389405 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_389405 != null) { fmt_res_389405 = (fmt_res_389405).concat(other_389225.pyType.name); } else { fmt_res_389405 = other_389225.pyType.name.slice(); };
			var msg_389602 = (makeNimstrLit("eq")).concat(fmt_res_389405);
			F.line = 197;
			F.line = 104;
			var excp_389604 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_389604.tk = 3;
			F.line = 106;
			excp_389604.thrown = true;
			F.line = 107;
			excp_389604.msg = new_py_string_176075(msg_389602);
			result_389226 = excp_389604;
			break BeforeRet;
		}
		}
		if ((self_389401.v == casted_389402.v)) {
		F.line = 257;
		result_389226 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 259;
			result_389226 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_389226;

}

function gt_py_float_object_magic_389622(self_no_cast_389624, other_389625) {
	var result_389626 = null;

	var F={procname:"numobjects.gtPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_389624.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_389801 = self_no_cast_389624;
		F.line = 190;
		var casted_389802 = null;
		if (of_py_float_object_375108(other_389625)) {
		F.line = 192;
		casted_389802 = other_389625;
		}
		else {
		if (of_py_int_object_374117(other_389625)) {
		F.line = 194;
		casted_389802 = new_py_float_376159(other_389625);
		}
		else {
			F.line = 196;
			F.line = 196;
			var fmt_res_389805 = mnewString(0);
			F.line = 196;
			if (fmt_res_389805 != null) { fmt_res_389805 = (fmt_res_389805).concat(makeNimstrLit(" not supported by float and ")); } else { fmt_res_389805 = makeNimstrLit(" not supported by float and "); };
			F.line = 260;
			if (fmt_res_389805 != null) { fmt_res_389805 = (fmt_res_389805).concat(other_389625.pyType.name); } else { fmt_res_389805 = other_389625.pyType.name.slice(); };
			var msg_390002 = (makeNimstrLit("gt")).concat(fmt_res_389805);
			F.line = 197;
			F.line = 104;
			var excp_390004 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_390004.tk = 3;
			F.line = 106;
			excp_390004.thrown = true;
			F.line = 107;
			excp_390004.msg = new_py_string_176075(msg_390002);
			result_389626 = excp_390004;
			break BeforeRet;
		}
		}
		if ((casted_389802.v < self_389801.v)) {
		F.line = 264;
		result_389626 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 266;
			result_389626 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_389626;

}

function str_py_float_object_magic_390020(self_no_cast_390022) {
	var result_390023 = null;

	var F={procname:"numobjects.strPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_390022.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_390201 = self_no_cast_390022;
		result_390023 = new_py_string_176075(HEX24_157579(self_390201));
	framePtr = F.prev;

	return result_390023;

}

function repr_py_float_object_magic_390216(self_no_cast_390218) {
	var result_390219 = null;

	var F={procname:"numobjects.reprPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_390218.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_390401 = self_no_cast_390218;
		result_390219 = new_py_string_176075(HEX24_157579(self_390401));
	framePtr = F.prev;

	return result_390219;

}

function hash_144378(x_144380) {
	var result_144381 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 223;
		var y_144382 = [(x_144380 + 1.0000000000000000e+00)];
		F.line = 224;
		result_144381 = y_144382[0];
	framePtr = F.prev;

	return result_144381;

}

function hash_py_float_object_magic_390416(self_no_cast_390418) {
	var result_390419 = null;

	var F={procname:"numobjects.hashPyFloatObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_390418.m_type, NTI375100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFloatObject` "));
		}
		
		F.line = 438;
		var self_390601 = self_no_cast_390418;
		result_390419 = new_py_int_376142(hash_144378(self_390601.v));
	framePtr = F.prev;

	return result_390419;

}
py_float_object_type_375106.magicMethods.Field0 = add_py_float_object_magic_385870;
py_float_object_type_375106.magicMethods.Field1 = sub_py_float_object_magic_386222;
py_float_object_type_375106.magicMethods.Field2 = mul_py_float_object_magic_386622;
py_float_object_type_375106.magicMethods.Field3 = truediv_py_float_object_magic_387022;
py_float_object_type_375106.magicMethods.Field4 = floordiv_py_float_object_magic_387422;
py_float_object_type_375106.magicMethods.Field6 = pow_py_float_object_magic_387822;
py_float_object_type_375106.magicMethods.Field9 = positive_py_float_object_magic_388220;
py_float_object_type_375106.magicMethods.Field8 = negative_py_float_object_magic_388416;
py_float_object_type_375106.magicMethods.Field12 = bool_py_float_object_magic_388616;
py_float_object_type_375106.magicMethods.Field16 = lt_py_float_object_magic_388818;
py_float_object_type_375106.magicMethods.Field18 = eq_py_float_object_magic_389222;
py_float_object_type_375106.magicMethods.Field20 = gt_py_float_object_magic_389622;
py_float_object_type_375106.magicMethods.Field24 = str_py_float_object_magic_390020;
py_float_object_type_375106.magicMethods.Field25 = repr_py_float_object_magic_390216;
py_float_object_type_375106.magicMethods.Field30 = hash_py_float_object_magic_390416;

function not_py_bool_object_magic_391384(self_no_cast_391386) {
		var Tmp1;

	var result_391387 = null;

	var F={procname:"boolobjectImpl.notPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_391386.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_391601 = self_no_cast_391386;
		if ((self_391601 == py_true_obj_354074)) {
		Tmp1 = py_false_obj_354075;
		}
		else {
		Tmp1 = py_true_obj_354074;
		}
		
		result_391387 = Tmp1;
	framePtr = F.prev;

	return result_391387;

}

function bool_py_bool_object_magic_391626(self_no_cast_391628) {
	var result_391629 = null;

	var F={procname:"boolobjectImpl.boolPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_391628.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_391801 = self_no_cast_391628;
		result_391629 = self_391801;
	framePtr = F.prev;

	return result_391629;

}

function and_py_bool_object_magic_391816(self_no_cast_391818, other_391819) {
			var Tmp1;

	var result_391820 = null;

	var F={procname:"boolobjectImpl.andPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_391818.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_392001 = self_no_cast_391818;
		F.line = 30;
		F.line = 45;
		if ((other_391819.pyType === null)) {
		F.line = 2895;
		var e_392028 = null;
		F.line = 2896;
		e_392028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_392028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_392028.parent = null;
		F.line = 26;
		raiseException(e_392028, "InternalError");
		}
		
		F.line = 27;
		var fun_392202 = other_391819.pyType.magicMethods.Field12;
		if ((fun_392202 === null)) {
		F.line = 29;
		var obj_type_str_392211 = other_391819.pyType.name;
		F.line = 30;
		var method_str_392213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_392215 = (makeNimstrLit("No ")).concat(method_str_392213,makeNimstrLit(" method for "),obj_type_str_392211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_392217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_392217.tk = 3;
		F.line = 106;
		excp_392217.thrown = true;
		F.line = 107;
		excp_392217.msg = new_py_string_176075(msg_392215);
		var excp_392220 = excp_392217;
		F.line = 36;
		result_391820 = excp_392220;
		break BeforeRet;
		}
		
		var fun_392402 = fun_392202;
		F.line = 46;
		var res_392404 = fun_392402(other_391819);
		var other_bool_obj_392601 = res_392404;
		if (!(of_py_bool_object_353106(other_bool_obj_392601))) {
		F.line = 163;
		var type_name_392604 = nimCopy(null, other_bool_obj_392601.pyType.name, NTI138);
		F.line = 164;
		F.line = 164;
		var fmt_res_392607 = mnewString(0);
		F.line = 164;
		if (fmt_res_392607 != null) { fmt_res_392607 = (fmt_res_392607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_392607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_392607 != null) { fmt_res_392607 = (fmt_res_392607).concat(type_name_392604); } else { fmt_res_392607 = type_name_392604.slice(); };
		F.line = 164;
		if (fmt_res_392607 != null) { fmt_res_392607 = (fmt_res_392607).concat(makeNimstrLit(")")); } else { fmt_res_392607 = makeNimstrLit(")"); };
		var msg_392802 = (makeNimstrLit("__bool__")).concat(fmt_res_392607);
		F.line = 165;
		F.line = 104;
		var excp_392804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_392804.tk = 3;
		F.line = 106;
		excp_392804.thrown = true;
		F.line = 107;
		excp_392804.msg = new_py_string_176075(msg_392802);
		result_391820 = excp_392804;
		break BeforeRet;
		}
		
			if (!self_392001.b) Tmp1 = false; else {				Tmp1 = other_bool_obj_392601.b;			}		if (Tmp1) {
		F.line = 33;
		result_391820 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 35;
			result_391820 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_391820;

}

function xor_py_bool_object_magic_392820(self_no_cast_392822, other_392823) {
	var result_392824 = null;

	var F={procname:"boolobjectImpl.xorPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_392822.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_393001 = self_no_cast_392822;
		F.line = 38;
		F.line = 45;
		if ((other_392823.pyType === null)) {
		F.line = 2895;
		var e_393028 = null;
		F.line = 2896;
		e_393028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_393028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_393028.parent = null;
		F.line = 26;
		raiseException(e_393028, "InternalError");
		}
		
		F.line = 27;
		var fun_393202 = other_392823.pyType.magicMethods.Field12;
		if ((fun_393202 === null)) {
		F.line = 29;
		var obj_type_str_393211 = other_392823.pyType.name;
		F.line = 30;
		var method_str_393213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_393215 = (makeNimstrLit("No ")).concat(method_str_393213,makeNimstrLit(" method for "),obj_type_str_393211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_393217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_393217.tk = 3;
		F.line = 106;
		excp_393217.thrown = true;
		F.line = 107;
		excp_393217.msg = new_py_string_176075(msg_393215);
		var excp_393220 = excp_393217;
		F.line = 36;
		result_392824 = excp_393220;
		break BeforeRet;
		}
		
		var fun_393402 = fun_393202;
		F.line = 46;
		var res_393404 = fun_393402(other_392823);
		var other_bool_obj_393601 = res_393404;
		if (!(of_py_bool_object_353106(other_bool_obj_393601))) {
		F.line = 163;
		var type_name_393604 = nimCopy(null, other_bool_obj_393601.pyType.name, NTI138);
		F.line = 164;
		F.line = 164;
		var fmt_res_393607 = mnewString(0);
		F.line = 164;
		if (fmt_res_393607 != null) { fmt_res_393607 = (fmt_res_393607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_393607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_393607 != null) { fmt_res_393607 = (fmt_res_393607).concat(type_name_393604); } else { fmt_res_393607 = type_name_393604.slice(); };
		F.line = 164;
		if (fmt_res_393607 != null) { fmt_res_393607 = (fmt_res_393607).concat(makeNimstrLit(")")); } else { fmt_res_393607 = makeNimstrLit(")"); };
		var msg_393802 = (makeNimstrLit("__bool__")).concat(fmt_res_393607);
		F.line = 165;
		F.line = 104;
		var excp_393804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_393804.tk = 3;
		F.line = 106;
		excp_393804.thrown = true;
		F.line = 107;
		excp_393804.msg = new_py_string_176075(msg_393802);
		result_392824 = excp_393804;
		break BeforeRet;
		}
		
		if ((self_393001.b != other_bool_obj_393601.b)) {
		F.line = 41;
		result_392824 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 43;
			result_392824 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_392824;

}

function or_py_bool_object_magic_393820(self_no_cast_393822, other_393823) {
			var Tmp1;

	var result_393824 = null;

	var F={procname:"boolobjectImpl.orPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_393822.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_394001 = self_no_cast_393822;
		F.line = 46;
		F.line = 45;
		if ((other_393823.pyType === null)) {
		F.line = 2895;
		var e_394028 = null;
		F.line = 2896;
		e_394028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_394028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_394028.parent = null;
		F.line = 26;
		raiseException(e_394028, "InternalError");
		}
		
		F.line = 27;
		var fun_394202 = other_393823.pyType.magicMethods.Field12;
		if ((fun_394202 === null)) {
		F.line = 29;
		var obj_type_str_394211 = other_393823.pyType.name;
		F.line = 30;
		var method_str_394213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_394215 = (makeNimstrLit("No ")).concat(method_str_394213,makeNimstrLit(" method for "),obj_type_str_394211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_394217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_394217.tk = 3;
		F.line = 106;
		excp_394217.thrown = true;
		F.line = 107;
		excp_394217.msg = new_py_string_176075(msg_394215);
		var excp_394220 = excp_394217;
		F.line = 36;
		result_393824 = excp_394220;
		break BeforeRet;
		}
		
		var fun_394402 = fun_394202;
		F.line = 46;
		var res_394404 = fun_394402(other_393823);
		var other_bool_obj_394601 = res_394404;
		if (!(of_py_bool_object_353106(other_bool_obj_394601))) {
		F.line = 163;
		var type_name_394604 = nimCopy(null, other_bool_obj_394601.pyType.name, NTI138);
		F.line = 164;
		F.line = 164;
		var fmt_res_394607 = mnewString(0);
		F.line = 164;
		if (fmt_res_394607 != null) { fmt_res_394607 = (fmt_res_394607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_394607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_394607 != null) { fmt_res_394607 = (fmt_res_394607).concat(type_name_394604); } else { fmt_res_394607 = type_name_394604.slice(); };
		F.line = 164;
		if (fmt_res_394607 != null) { fmt_res_394607 = (fmt_res_394607).concat(makeNimstrLit(")")); } else { fmt_res_394607 = makeNimstrLit(")"); };
		var msg_394802 = (makeNimstrLit("__bool__")).concat(fmt_res_394607);
		F.line = 165;
		F.line = 104;
		var excp_394804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_394804.tk = 3;
		F.line = 106;
		excp_394804.thrown = true;
		F.line = 107;
		excp_394804.msg = new_py_string_176075(msg_394802);
		result_393824 = excp_394804;
		break BeforeRet;
		}
		
			if (self_394001.b) Tmp1 = true; else {				Tmp1 = other_bool_obj_394601.b;			}		if (Tmp1) {
		F.line = 49;
		result_393824 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 51;
			result_393824 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_393824;

}

function eq_py_bool_object_magic_394820(self_no_cast_394822, other_394823) {
	var result_394824 = null;

	var F={procname:"boolobjectImpl.eqPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_394822.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_395001 = self_no_cast_394822;
		F.line = 54;
		F.line = 45;
		if ((other_394823.pyType === null)) {
		F.line = 2895;
		var e_395028 = null;
		F.line = 2896;
		e_395028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_395028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_395028.parent = null;
		F.line = 26;
		raiseException(e_395028, "InternalError");
		}
		
		F.line = 27;
		var fun_395202 = other_394823.pyType.magicMethods.Field12;
		if ((fun_395202 === null)) {
		F.line = 29;
		var obj_type_str_395211 = other_394823.pyType.name;
		F.line = 30;
		var method_str_395213 = makeNimstrLit("bool");
		F.line = 31;
		var msg_395215 = (makeNimstrLit("No ")).concat(method_str_395213,makeNimstrLit(" method for "),obj_type_str_395211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_395217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_395217.tk = 3;
		F.line = 106;
		excp_395217.thrown = true;
		F.line = 107;
		excp_395217.msg = new_py_string_176075(msg_395215);
		var excp_395220 = excp_395217;
		F.line = 36;
		result_394824 = excp_395220;
		break BeforeRet;
		}
		
		var fun_395402 = fun_395202;
		F.line = 46;
		var res_395404 = fun_395402(other_394823);
		var other_bool_obj_395601 = res_395404;
		if (!(of_py_bool_object_353106(other_bool_obj_395601))) {
		F.line = 163;
		var type_name_395604 = nimCopy(null, other_bool_obj_395601.pyType.name, NTI138);
		F.line = 164;
		F.line = 164;
		var fmt_res_395607 = mnewString(0);
		F.line = 164;
		if (fmt_res_395607 != null) { fmt_res_395607 = (fmt_res_395607).concat(makeNimstrLit(" returned non-bool (type ")); } else { fmt_res_395607 = makeNimstrLit(" returned non-bool (type "); };
		F.line = 260;
		if (fmt_res_395607 != null) { fmt_res_395607 = (fmt_res_395607).concat(type_name_395604); } else { fmt_res_395607 = type_name_395604.slice(); };
		F.line = 164;
		if (fmt_res_395607 != null) { fmt_res_395607 = (fmt_res_395607).concat(makeNimstrLit(")")); } else { fmt_res_395607 = makeNimstrLit(")"); };
		var msg_395802 = (makeNimstrLit("__bool__")).concat(fmt_res_395607);
		F.line = 165;
		F.line = 104;
		var excp_395804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_395804.tk = 3;
		F.line = 106;
		excp_395804.thrown = true;
		F.line = 107;
		excp_395804.msg = new_py_string_176075(msg_395802);
		result_394824 = excp_395804;
		break BeforeRet;
		}
		
		F.line = 56;
		var other_bool_395806 = other_bool_obj_395601.b;
		if ((self_395001.b == other_bool_395806)) {
		F.line = 58;
		result_394824 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 60;
			result_394824 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_394824;

}

function repr_py_bool_object_magic_395821(self_no_cast_395823) {
	var result_395824 = null;

	var F={procname:"boolobjectImpl.reprPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_395823.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_396001 = self_no_cast_395823;
		if (self_396001.b) {
		F.line = 64;
		result_395824 = new_py_string_176075(makeNimstrLit("True"));
		break BeforeRet;
		}
		else {
			F.line = 66;
			result_395824 = new_py_string_176075(makeNimstrLit("False"));
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_395824;

}

function hash_py_bool_object_magic_396016(self_no_cast_396018) {
	var result_396019 = null;

	var F={procname:"boolobjectImpl.hashPyBoolObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_396018.m_type, NTI353098))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoolObject` "));
		}
		
		F.line = 438;
		var self_396201 = self_no_cast_396018;
		result_396019 = new_py_int_376142(((self_396201.b)|0));
	framePtr = F.prev;

	return result_396019;

}
py_bool_object_type_353104.magicMethods.Field7 = not_py_bool_object_magic_391384;
py_bool_object_type_353104.magicMethods.Field12 = bool_py_bool_object_magic_391626;
py_bool_object_type_353104.magicMethods.Field13 = and_py_bool_object_magic_391816;
py_bool_object_type_353104.magicMethods.Field14 = xor_py_bool_object_magic_392820;
py_bool_object_type_353104.magicMethods.Field15 = or_py_bool_object_magic_393820;
py_bool_object_type_353104.magicMethods.Field18 = eq_py_bool_object_magic_394820;
py_bool_object_type_353104.magicMethods.Field25 = repr_py_bool_object_magic_395821;
py_bool_object_type_353104.magicMethods.Field30 = hash_py_bool_object_magic_396016;

function of_py_str_object_175092(obj_175029) {
	var result_175094 = false;

	var F={procname:"stringobject.ofPyStrObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_175094 = (obj_175029.pyType.kind == 10);
	framePtr = F.prev;

	return result_175094;

}

function eq_py_str_object_magic_398327(self_no_cast_398329, other_398330) {
	var result_398331 = null;

	var F={procname:"stringobjectImpl.eqPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_398329.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_398401 = self_no_cast_398329;
		if (!(of_py_str_object_175092(other_398330))) {
		F.line = 24;
		result_398331 = py_false_obj_354075;
		break BeforeRet;
		}
		
		if (eqStrings(self_398401.str, other_398330.str)) {
		F.line = 26;
		result_398331 = py_true_obj_354074;
		break BeforeRet;
		}
		else {
			F.line = 28;
			result_398331 = py_false_obj_354075;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_398331;

}

function str_py_str_object_magic_398418(self_no_cast_398420) {
	var result_398421 = null;

	var F={procname:"stringobjectImpl.strPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_398420.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_398601 = self_no_cast_398420;
		result_398421 = self_398601;
	framePtr = F.prev;

	return result_398421;

}

function repr_py_str_object_magic_398616(self_no_cast_398618) {
	var result_398619 = null;

	var F={procname:"stringobjectImpl.reprPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_398618.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_398801 = self_no_cast_398618;
		result_398619 = new_py_string_176075(HEX24_157579(self_398801));
	framePtr = F.prev;

	return result_398619;

}

function hash_398040(self_398042) {
	var result_398043 = 0;

	var F={procname:"stringobjectImpl.hash",prev:framePtr,filename:"../Objects/stringobjectImpl.nim",line:0};
	framePtr = F;
		F.line = 10;
		result_398043 = hash_143900(self_398042.str);
	framePtr = F.prev;

	return result_398043;

}

function hash_py_str_object_magic_398816(self_no_cast_398818) {
	var result_398819 = null;

	var F={procname:"stringobjectImpl.hashPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_398818.m_type, NTI175084))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStrObject` "));
		}
		
		F.line = 438;
		var self_399001 = self_no_cast_398818;
		result_398819 = new_py_int_376142(hash_398040(self_399001));
	framePtr = F.prev;

	return result_398819;

}

function new_py_str_object_magic_399016(args_399031) {
	var result_399032 = null;

	var F={procname:"stringobjectImpl.newPyStrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_399031 != null ? args_399031.length : 0) == 2))) {
		F.line = 183;
		var msg_399044 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_399049 = mnewString(0);
		F.line = 185;
		if (fmt_res_399049 != null) { fmt_res_399049 = (fmt_res_399049).concat(makeNimstrLit(" argument (")); } else { fmt_res_399049 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_399049 != null) { fmt_res_399049 = (fmt_res_399049).concat(cstrToNimstr(((args_399031 != null ? args_399031.length : 0))+"")); } else { fmt_res_399049 = cstrToNimstr(((args_399031 != null ? args_399031.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_399049 != null) { fmt_res_399049 = (fmt_res_399049).concat(makeNimstrLit(" given)")); } else { fmt_res_399049 = makeNimstrLit(" given)"); };
		msg_399044 = nimCopy(null, (makeNimstrLit("New takes exactly 2")).concat(fmt_res_399049), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_399210 = mnewString(0);
			F.line = 187;
			if (fmt_res_399210 != null) { fmt_res_399210 = (fmt_res_399210).concat(makeNimstrLit(" argument (")); } else { fmt_res_399210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_399210 != null) { fmt_res_399210 = (fmt_res_399210).concat(cstrToNimstr(((args_399031 != null ? args_399031.length : 0))+"")); } else { fmt_res_399210 = cstrToNimstr(((args_399031 != null ? args_399031.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_399210 != null) { fmt_res_399210 = (fmt_res_399210).concat(makeNimstrLit(" given)")); } else { fmt_res_399210 = makeNimstrLit(" given)"); };
			msg_399044 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_399210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_399409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_399409.tk = 3;
		F.line = 106;
		excp_399409.thrown = true;
		F.line = 107;
		excp_399409.msg = new_py_string_176075(msg_399044);
		result_399032 = excp_399409;
		break BeforeRet;
		}
		
		F.line = 230;
		var tp_399411 = args_399031[chckIndx(0, 0, args_399031.length+0-1)-0];
		F.line = 230;
		var obj_399412 = args_399031[chckIndx(1, 0, args_399031.length+0-1)-0];
		F.line = 45;
		if ((obj_399412.pyType === null)) {
		F.line = 2895;
		var e_399439 = null;
		F.line = 2896;
		e_399439 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_399439.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_399439.parent = null;
		F.line = 26;
		raiseException(e_399439, "InternalError");
		}
		
		F.line = 27;
		var fun_399602 = obj_399412.pyType.magicMethods.Field24;
		if ((fun_399602 === null)) {
		F.line = 29;
		var obj_type_str_399611 = obj_399412.pyType.name;
		F.line = 30;
		var method_str_399613 = makeNimstrLit("str");
		F.line = 31;
		var msg_399615 = (makeNimstrLit("No ")).concat(method_str_399613,makeNimstrLit(" method for "),obj_type_str_399611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_399617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_399617.tk = 3;
		F.line = 106;
		excp_399617.thrown = true;
		F.line = 107;
		excp_399617.msg = new_py_string_176075(msg_399615);
		var excp_399620 = excp_399617;
		F.line = 36;
		result_399032 = excp_399620;
		break BeforeRet;
		}
		
		var fun_399802 = fun_399602;
		F.line = 46;
		var res_399804 = fun_399802(obj_399412);
		result_399032 = res_399804;
	} while (false);
	framePtr = F.prev;

	return result_399032;

}
py_str_object_type_175090.magicMethods.Field18 = eq_py_str_object_magic_398327;
py_str_object_type_175090.magicMethods.Field24 = str_py_str_object_magic_398418;
py_str_object_type_175090.magicMethods.Field25 = repr_py_str_object_magic_398616;
py_str_object_type_175090.magicMethods.Field30 = hash_py_str_object_magic_398816;
py_str_object_type_175090.magicMethods.Field26 = new_py_str_object_magic_399016;

function new_460406() {
	var result_460411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_460601 = null;
		F.line = 211;
		r_460601 = {m_type: NTI460190, items: null, idx: 0, id: 0, pyType: null};
		F.line = 212;
		result_460411 = r_460601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_460411;

}

function new_py_seq_iter_simple_460401() {
	var result_460403 = null;

	var F={procname:"iterobject.newPySeqIterSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_460624 = new_460406();
		F.line = 561;
		obj_460624.pyType = py_seq_iter_object_type_460200;
		F.line = 563;
		give_id_157814(obj_460624);
		result_460403 = obj_460624;
	framePtr = F.prev;

	return result_460403;

}

function new_py_seq_iter_default_461021(args_460145) {
	var result_461024 = null;

	var F={procname:"iterobject.newPySeqIterDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_461024 = new_py_seq_iter_simple_460401();
	framePtr = F.prev;

	return result_461024;

}

function iter_py_seq_iter_object_magic_461244(self_no_cast_461246) {
	var result_461247 = null;

	var F={procname:"iterobject.iterPySeqIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_461246.m_type, NTI460190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PySeqIterObject` "));
		}
		
		F.line = 438;
		var self_461401 = self_no_cast_461246;
		result_461247 = self_461401;
	framePtr = F.prev;

	return result_461247;

}

function iternext_py_seq_iter_object_magic_461416(self_no_cast_461418) {
	var result_461419 = null;

	var F={procname:"iterobject.iternextPySeqIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_461418.m_type, NTI460190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PySeqIterObject` "));
		}
		
		F.line = 438;
		var self_461601 = self_no_cast_461418;
		if ((self_461601.idx == (self_461601.items != null ? self_461601.items.length : 0))) {
		F.line = 14;
		F.line = 97;
		var excp_461610 = new_py_stop_iter_error_simple_364601();
		F.line = 98;
		excp_461610.tk = 7;
		F.line = 99;
		excp_461610.thrown = true;
		result_461419 = excp_461610;
		break BeforeRet;
		}
		
		F.line = 15;
		result_461419 = self_461601.items[chckIndx(self_461601.idx, 0, self_461601.items.length+0-1)-0];
		F.line = 16;
		self_461601.idx = addInt(self_461601.idx, 1);
	} while (false);
	framePtr = F.prev;

	return result_461419;

}
var py_seq_iter_object_type_460200 = new_py_type_159261(makeNimstrLit("SeqIter"));
py_seq_iter_object_type_460200.magicMethods.Field26 = new_py_seq_iter_default_461021;
py_seq_iter_object_type_460200.magicMethods.Field36 = iter_py_seq_iter_object_magic_461244;
py_seq_iter_object_type_460200.magicMethods.Field37 = iternext_py_seq_iter_object_magic_461416;

function new_462206() {
	var result_462211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_462401 = null;
		F.line = 211;
		r_462401 = {m_type: NTI462097, start: null, stop: null, step: null, id: 0, pyType: null};
		F.line = 212;
		result_462211 = r_462401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_462211;

}

function new_py_slice_simple_462201() {
	var result_462203 = null;

	var F={procname:"sliceobject.newPySliceSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_462424 = new_462206();
		F.line = 561;
		obj_462424.pyType = py_slice_object_type_462107;
		F.line = 563;
		give_id_157814(obj_462424);
		result_462203 = obj_462424;
	framePtr = F.prev;

	return result_462203;

}

function new_py_slice_default_462821(args_462052) {
	var result_462824 = null;

	var F={procname:"sliceobject.newPySliceDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_462824 = new_py_slice_simple_462201();
	framePtr = F.prev;

	return result_462824;

}
var py_slice_object_type_462107 = new_py_type_159261(makeNimstrLit("Slice"));
py_slice_object_type_462107.kind = 15;
py_slice_object_type_462107.magicMethods.Field26 = new_py_slice_default_462821;

function new_464206() {
	var result_464211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_464401 = null;
		F.line = 211;
		r_464401 = {m_type: NTI464070, items: null, reprLock: false, id: 0, pyType: null};
		F.line = 212;
		result_464211 = r_464401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_464211;

}

function new_py_tuple_simple_464201() {
	var result_464203 = null;

	var F={procname:"tupleobject.newPyTupleSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_464424 = new_464206();
		F.line = 561;
		obj_464424.pyType = py_tuple_object_type_464080;
		F.line = 563;
		give_id_157814(obj_464424);
		result_464203 = obj_464424;
	framePtr = F.prev;

	return result_464203;

}

function new_py_tuple_default_464821(args_464025) {
	var result_464824 = null;

	var F={procname:"tupleobject.newPyTupleDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_464824 = new_py_tuple_simple_464201();
	framePtr = F.prev;

	return result_464824;

}
var py_tuple_object_type_464080 = new_py_type_159261(makeNimstrLit("Tuple"));
py_tuple_object_type_464080.kind = 8;
py_tuple_object_type_464080.magicMethods.Field26 = new_py_tuple_default_464821;

function of_py_tuple_object_464082(obj_464015) {
	var result_464084 = false;

	var F={procname:"tupleobject.ofPyTupleObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_464084 = (obj_464015.pyType.kind == 8);
	framePtr = F.prev;

	return result_464084;

}

function of_py_base_error_object_357249(obj_357176) {
	var result_357251 = false;

	var F={procname:"exceptions.ofPyBaseErrorObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_357251 = (obj_357176.pyType.kind == 3);
	framePtr = F.prev;

	return result_357251;

}

function of_py_exception_object_358259(obj_358261) {
	var result_358262 = false;

	var F={procname:"exceptions.ofPyExceptionObject",prev:framePtr,filename:"../Objects/exceptions.nim",line:0};
	framePtr = F;
		F.line = 54;
		result_358262 = of_py_base_error_object_357249(obj_358261);
	framePtr = F.prev;

	return result_358262;

}

function eq_py_tuple_object_magic_465075(self_no_cast_465077, other_465078) {
							var Tmp4;

	var result_465079 = null;

	var F={procname:"tupleobject.eqPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_465077.m_type, NTI464070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_465201 = self_no_cast_465077;
		if (!(of_py_tuple_object_464082(other_465078))) {
		F.line = 22;
		result_465079 = py_false_obj_354075;
		break BeforeRet;
		}
		
		F.line = 23;
		var t_other_465202 = other_465078;
		if (!(((self_465201.items != null ? self_465201.items.length : 0) == (t_other_465202.items != null ? t_other_465202.items.length : 0)))) {
		F.line = 25;
		result_465079 = py_false_obj_354075;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 26;
			var i_465234 = 0;
			F.line = 3616;
			var colontmp__466004 = 0;
			F.line = 26;
			colontmp__466004 = (self_465201.items != null ? self_465201.items.length : 0);
			F.line = 3617;
			var i_466007 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_466007 < colontmp__466004)) break L3;
						F.line = 3619;
						i_465234 = i_466007;
						F.line = 27;
						var i1_465235 = self_465201.items[chckIndx(i_465234, 0, self_465201.items.length+0-1)-0];
						F.line = 28;
						var i2_465236 = t_other_465202.items[chckIndx(i_465234, 0, t_other_465202.items.length+0-1)-0];
						F.line = 29;
						F.line = 56;
						if ((i1_465235.pyType === null)) {
						F.line = 2895;
						var e_465263 = null;
						F.line = 2896;
						e_465263 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_465263.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_465263.parent = null;
						F.line = 26;
						raiseException(e_465263, "InternalError");
						}
						
						F.line = 27;
						var fun_465402 = i1_465235.pyType.magicMethods.Field18;
						if ((fun_465402 === null)) {
						F.line = 29;
						var obj_type_str_465411 = i1_465235.pyType.name;
						F.line = 30;
						var method_str_465413 = makeNimstrLit("eq");
						F.line = 31;
						var msg_465415 = (makeNimstrLit("No ")).concat(method_str_465413,makeNimstrLit(" method for "),obj_type_str_465411,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_465417 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_465417.tk = 3;
						F.line = 106;
						excp_465417.thrown = true;
						F.line = 107;
						excp_465417.msg = new_py_string_176075(msg_465415);
						var excp_465420 = excp_465417;
						F.line = 36;
						result_465079 = excp_465420;
						break BeforeRet;
						}
						
						var fun_465602 = fun_465402;
						F.line = 57;
						var res_465604 = fun_465602(i1_465235, i2_465236);
						var ret_obj_465801 = res_465604;
							if (of_py_exception_object_358259(ret_obj_465801)) {
							Tmp4 = ret_obj_465801.thrown;
							}
							else {
							Tmp4 = false;
							}
							
						if (Tmp4) {
						F.line = 31;
						result_465079 = ret_obj_465801;
						break BeforeRet;
						}
						
						if (!(of_py_bool_object_353106(ret_obj_465801))) {
						F.line = 32;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/tupleobject.nim(32, 12) `ofPyBoolObject(retObj)` "));
						}
						
						if (!(ret_obj_465801.b)) {
						F.line = 34;
						result_465079 = py_false_obj_354075;
						break BeforeRet;
						}
						
						F.line = 3620;
						i_466007 = addInt(i_466007, 1);
					}
			} while(false);
		} while(false);
		result_465079 = py_true_obj_354074;
	} while (false);
	framePtr = F.prev;

	return result_465079;

}

function new_py_seq_iter_461648(items_461651) {
	var result_461652 = null;

	var F={procname:"iterobject.newPySeqIter",prev:framePtr,filename:"../Objects/iterobject.nim",line:0};
	framePtr = F;
		F.line = 19;
		result_461652 = new_py_seq_iter_simple_460401();
		F.line = 20;
		result_461652.items = nimCopy(null, items_461651, NTI461650);
	framePtr = F.prev;

	return result_461652;

}

function iter_py_tuple_object_magic_466022(self_no_cast_466024) {
	var result_466025 = null;

	var F={procname:"tupleobject.iterPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_466024.m_type, NTI464070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_466201 = self_no_cast_466024;
		result_466025 = new_py_seq_iter_461648(self_466201.items);
	framePtr = F.prev;

	return result_466025;

}

function repr_py_tuple_object_magic_466216(self_no_cast_466218) {
	var result_466219 = null;

	var F={procname:"tupleobject.reprPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_466218.m_type, NTI464070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_466401 = self_no_cast_466218;
		if (self_466401.reprLock) {
		F.line = 379;
		result_466219 = new_py_string_176075(makeNimstrLit("..."));
		break BeforeRet;
		}
		
		F.line = 380;
		self_466401.reprLock = true;
		F.line = 438;
		try {
		F.line = 43;
		var ss_466403 = null;
		L2: do {
			F.line = 44;
			var item_466615 = null;
			F.line = 3909;
			var colontmp__467418 = null;
			F.line = 44;
			colontmp__467418 = self_466401.items;
			F.line = 3911;
			var i_467421 = 0;
			F.line = 3912;
			var l_467423 = (colontmp__467418 != null ? colontmp__467418.length : 0);
			L3: do {
				F.line = 3913;
					L4: while (true) {
					if (!(i_467421 < l_467423)) break L4;
						F.line = 3914;
						item_466615 = colontmp__467418[chckIndx(i_467421, 0, colontmp__467418.length+0-1)-0];
						F.line = 45;
						var item_repr_466616 = null;
						F.line = 46;
						F.line = 45;
						if ((item_466615.pyType === null)) {
						F.line = 2895;
						var e_466643 = null;
						F.line = 2896;
						e_466643 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_466643.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_466643.parent = null;
						F.line = 26;
						raiseException(e_466643, "InternalError");
						}
						
						F.line = 27;
						var fun_466802 = item_466615.pyType.magicMethods.Field25;
						if ((fun_466802 === null)) {
						F.line = 29;
						var obj_type_str_466811 = item_466615.pyType.name;
						F.line = 30;
						var method_str_466813 = makeNimstrLit("repr");
						F.line = 31;
						var msg_466815 = (makeNimstrLit("No ")).concat(method_str_466813,makeNimstrLit(" method for "),obj_type_str_466811,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_466817 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_466817.tk = 3;
						F.line = 106;
						excp_466817.thrown = true;
						F.line = 107;
						excp_466817.msg = new_py_string_176075(msg_466815);
						var excp_466820 = excp_466817;
						F.line = 36;
						result_466219 = excp_466820;
						break BeforeRet;
						}
						
						var fun_467002 = fun_466802;
						F.line = 46;
						var res_467004 = fun_467002(item_466615);
						var ret_obj_467201 = res_467004;
						if (!(of_py_str_object_175092(ret_obj_467201))) {
						F.line = 157;
						var type_name_467204 = nimCopy(null, ret_obj_467201.pyType.name, NTI138);
						F.line = 158;
						F.line = 158;
						var fmt_res_467207 = mnewString(0);
						F.line = 158;
						if (fmt_res_467207 != null) { fmt_res_467207 = (fmt_res_467207).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_467207 = makeNimstrLit(" returned non-string (type "); };
						F.line = 260;
						if (fmt_res_467207 != null) { fmt_res_467207 = (fmt_res_467207).concat(type_name_467204); } else { fmt_res_467207 = type_name_467204.slice(); };
						F.line = 158;
						if (fmt_res_467207 != null) { fmt_res_467207 = (fmt_res_467207).concat(makeNimstrLit(")")); } else { fmt_res_467207 = makeNimstrLit(")"); };
						var msg_467402 = (makeNimstrLit("__repr__")).concat(fmt_res_467207);
						F.line = 159;
						F.line = 104;
						var excp_467404 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_467404.tk = 3;
						F.line = 106;
						excp_467404.thrown = true;
						F.line = 107;
						excp_467404.msg = new_py_string_176075(msg_467402);
						result_466219 = excp_467404;
						break BeforeRet;
						}
						
						F.line = 48;
						item_repr_466616 = ret_obj_467201;
						F.line = 49;
						var Tmp5 = nimCopy(null, item_repr_466616.str, NTI138);
						if (ss_466403 != null) { ss_466403.push(Tmp5); } else { ss_466403 = [Tmp5]; };
						F.line = 3915;
						i_467421 = addInt(i_467421, 1);
						if (!(((colontmp__467418 != null ? colontmp__467418.length : 0) == l_467423))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 50;
		result_466219 = new_py_string_176075((makeNimstrLit("(")).concat(nsuJoinSep(ss_466403, makeNimstrLit(", ")),makeNimstrLit(")")));
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 383;
		self_466401.reprLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_466219;

}

function len_py_tuple_object_magic_467437(self_no_cast_467439) {
	var result_467440 = null;

	var F={procname:"tupleobject.lenPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_467439.m_type, NTI464070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_467601 = self_no_cast_467439;
		result_467440 = new_py_int_376142((self_467601.items != null ? self_467601.items.length : 0));
	framePtr = F.prev;

	return result_467440;

}

function id_157596(obj_157598) {
	var result_157599 = 0;

	var F={procname:"pyobjectBase.id",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 167;
		result_157599 = obj_157598.id;
	framePtr = F.prev;

	return result_157599;

}

function hash_py_tuple_object_magic_467623(self_no_cast_467625) {
	var result_467626 = null;

	var F={procname:"tupleobject.hashPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_467625.m_type, NTI464070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_467801 = self_no_cast_467625;
		F.line = 57;
		var h_467802 = id_157596(self_467801);
		L1: do {
			F.line = 58;
			var item_467811 = null;
			F.line = 3909;
			var colontmp__467814 = null;
			F.line = 58;
			colontmp__467814 = self_467801.items;
			F.line = 3911;
			var i_467817 = 0;
			F.line = 3912;
			var l_467819 = (colontmp__467814 != null ? colontmp__467814.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_467817 < l_467819)) break L3;
						F.line = 3914;
						item_467811 = colontmp__467814[chckIndx(i_467817, 0, colontmp__467814.length+0-1)-0];
						F.line = 59;
						h_467802 = (h_467802 ^ id_157596(item_467811));
						F.line = 3915;
						i_467817 = addInt(i_467817, 1);
						if (!(((colontmp__467814 != null ? colontmp__467814.length : 0) == l_467819))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 60;
		result_467626 = new_py_int_376142(h_467802);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_467626;

}

function to_int_376091(py_int_376093) {
	var result_376094 = 0;

	var F={procname:"numobjects.toInt",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 36;
		result_376094 = nsuParseInt(HEX24_157579(py_int_376093));
	framePtr = F.prev;

	return result_376094;

}

function of_py_slice_object_462109(obj_462042) {
	var result_462111 = false;

	var F={procname:"sliceobject.ofPySliceObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_462111 = (obj_462042.pyType.kind == 15);
	framePtr = F.prev;

	return result_462111;

}

function get_slice_items_463141(slice_463143, src_463146, src_463146_Idx, dest_463147, dest_463147_Idx) {
			var Tmp1;
			var Tmp2;

	var result_463148 = null;

	var F={procname:"sliceobject.getSliceItems",prev:framePtr,filename:"../Objects/sliceobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 39;
		F.line = 39;
		var start_463149 = 0;
		F.line = 39;
		var stop_463150 = 0;
		F.line = 39;
		var step_463151 = 0;
		F.line = 40;
		var step_obj_463152 = slice_463143.step;
		if (of_py_int_object_374117(step_obj_463152)) {
		F.line = 43;
		step_463151 = to_int_376091(step_obj_463152);
		}
		else {
			if (!(of_py_none_object_355076(step_obj_463152))) {
			F.line = 45;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/sliceobject.nim(45, 12) `ofPyNoneObject(stepObj)` "));
			}
			
			F.line = 46;
			step_463151 = 1;
		}
		
		F.line = 54;
		var start_default_463210 = 0;
		F.line = 54;
		var stop_default_463211 = 0;
		if ((0 < step_463151)) {
		F.line = 56;
		start_default_463210 = 0;
		F.line = 57;
		stop_default_463211 = (src_463146[src_463146_Idx] != null ? src_463146[src_463146_Idx].length : 0);
		}
		else {
			F.line = 59;
			start_default_463210 = subInt((src_463146[src_463146_Idx] != null ? src_463146[src_463146_Idx].length : 0), 1);
			F.line = 60;
			stop_default_463211 = -1;
		}
		
		F.line = 48;
		var name_obj_463232 = slice_463143.start;
		if (of_py_int_object_374117(name_obj_463232)) {
		F.line = 50;
		F.line = 284;
		var idx_463245 = to_int_376091(name_obj_463232);
		if ((idx_463245 < 0)) {
		F.line = 286;
		idx_463245 = addInt((src_463146[src_463146_Idx] != null ? src_463146[src_463146_Idx].length : 0), idx_463245);
		}
		
			if ((idx_463245 < 0)) Tmp1 = true; else {				Tmp1 = ((src_463146[src_463146_Idx] != null ? src_463146[src_463146_Idx].length : 0) <= idx_463245);			}		if (Tmp1) {
		F.line = 288;
		var msg_463247 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_463245)+""),makeNimstrLit(", len: "),cstrToNimstr(((src_463146[src_463146_Idx] != null ? src_463146[src_463146_Idx].length : 0))+""));
		F.line = 289;
		F.line = 104;
		var excp_463249 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_463249.tk = 6;
		F.line = 106;
		excp_463249.thrown = true;
		F.line = 107;
		excp_463249.msg = new_py_string_176075(msg_463247);
		result_463148 = excp_463249;
		break BeforeRet;
		}
		
		start_463149 = idx_463245;
		}
		else {
			if (!(of_py_none_object_355076(name_obj_463232))) {
			F.line = 52;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/sliceobject.nim(52, 14) `ofPyNoneObject(nameObj463232)` "));
			}
			
			F.line = 61;
			start_463149 = start_default_463210;
		}
		
		F.line = 48;
		var name_obj_463404 = slice_463143.stop;
		if (of_py_int_object_374117(name_obj_463404)) {
		F.line = 50;
		F.line = 284;
		var idx_463417 = to_int_376091(name_obj_463404);
		if ((idx_463417 < 0)) {
		F.line = 286;
		idx_463417 = addInt((src_463146[src_463146_Idx] != null ? src_463146[src_463146_Idx].length : 0), idx_463417);
		}
		
			if ((idx_463417 < 0)) Tmp2 = true; else {				Tmp2 = ((src_463146[src_463146_Idx] != null ? src_463146[src_463146_Idx].length : 0) <= idx_463417);			}		if (Tmp2) {
		F.line = 288;
		var msg_463419 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_463417)+""),makeNimstrLit(", len: "),cstrToNimstr(((src_463146[src_463146_Idx] != null ? src_463146[src_463146_Idx].length : 0))+""));
		F.line = 289;
		F.line = 104;
		var excp_463421 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_463421.tk = 6;
		F.line = 106;
		excp_463421.thrown = true;
		F.line = 107;
		excp_463421.msg = new_py_string_176075(msg_463419);
		result_463148 = excp_463421;
		break BeforeRet;
		}
		
		stop_463150 = idx_463417;
		}
		else {
			if (!(of_py_none_object_355076(name_obj_463404))) {
			F.line = 52;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/sliceobject.nim(52, 14) `ofPyNoneObject(nameObj463404)` "));
			}
			
			F.line = 62;
			stop_463150 = stop_default_463211;
		}
		
		if ((0 < step_463151)) {
		L3: do {
			F.line = 65;
				L4: while (true) {
				if (!(start_463149 < stop_463150)) break L4;
					F.line = 66;
					if (dest_463147[dest_463147_Idx] != null) { dest_463147[dest_463147_Idx].push(src_463146[src_463146_Idx][chckIndx(start_463149, 0, src_463146[src_463146_Idx].length+0-1)-0]); } else { dest_463147[dest_463147_Idx] = [src_463146[src_463146_Idx][chckIndx(start_463149, 0, src_463146[src_463146_Idx].length+0-1)-0]]; };
					F.line = 67;
					start_463149 = addInt(start_463149, step_463151);
				}
		} while(false);
		}
		else {
			L5: do {
				F.line = 69;
					L6: while (true) {
					if (!(stop_463150 < start_463149)) break L6;
						F.line = 70;
						if (dest_463147[dest_463147_Idx] != null) { dest_463147[dest_463147_Idx].push(src_463146[src_463146_Idx][chckIndx(start_463149, 0, src_463146[src_463146_Idx].length+0-1)-0]); } else { dest_463147[dest_463147_Idx] = [src_463146[src_463146_Idx][chckIndx(start_463149, 0, src_463146[src_463146_Idx].length+0-1)-0]]; };
						F.line = 71;
						start_463149 = addInt(start_463149, step_463151);
					}
			} while(false);
		}
		
		result_463148 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_463148;

}

function getitem_py_tuple_object_magic_467833(self_no_cast_467835, other_467836) {
			var Tmp1;
			var Tmp2;

	var result_467837 = null;

	var F={procname:"tupleobject.getitemPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_467835.m_type, NTI464070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_468001 = self_no_cast_467835;
		if (of_py_int_object_374117(other_467836)) {
		F.line = 65;
		F.line = 284;
		var idx_468014 = to_int_376091(other_467836);
		if ((idx_468014 < 0)) {
		F.line = 286;
		idx_468014 = addInt((self_468001.items != null ? self_468001.items.length : 0), idx_468014);
		}
		
			if ((idx_468014 < 0)) Tmp1 = true; else {				Tmp1 = ((self_468001.items != null ? self_468001.items.length : 0) <= idx_468014);			}		if (Tmp1) {
		F.line = 288;
		var msg_468016 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_468014)+""),makeNimstrLit(", len: "),cstrToNimstr(((self_468001.items != null ? self_468001.items.length : 0))+""));
		F.line = 289;
		F.line = 104;
		var excp_468018 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_468018.tk = 6;
		F.line = 106;
		excp_468018.thrown = true;
		F.line = 107;
		excp_468018.msg = new_py_string_176075(msg_468016);
		result_467837 = excp_468018;
		break BeforeRet;
		}
		
		var idx_468020 = idx_468014;
		F.line = 66;
		result_467837 = self_468001.items[chckIndx(idx_468020, 0, self_468001.items.length+0-1)-0];
		break BeforeRet;
		}
		
		if (of_py_slice_object_462109(other_467836)) {
		F.line = 68;
		var slice_468021 = other_467836;
		F.line = 69;
		var new_list_468022 = new_py_tuple_simple_464201();
		F.line = 70;
		var ret_obj_468025 = get_slice_items_463141(slice_468021, self_468001, "items", new_list_468022, "items");
			if (of_py_exception_object_358259(ret_obj_468025)) {
			Tmp2 = ret_obj_468025.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 72;
		result_467837 = ret_obj_468025;
		break BeforeRet;
		}
		else {
			F.line = 74;
			result_467837 = new_list_468022;
			break BeforeRet;
		}
		
		}
		
		F.line = 76;
		F.line = 129;
		var name_468032 = other_467836.pyType.name;
		F.line = 130;
		var msg_468034 = (makeNimstrLit("tuple indices must be integers or slices, not ")).concat(name_468032);
		F.line = 104;
		var excp_468036 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_468036.tk = 3;
		F.line = 106;
		excp_468036.thrown = true;
		F.line = 107;
		excp_468036.msg = new_py_string_176075(msg_468034);
		result_467837 = excp_468036;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_467837;

}

function is_stop_iter_373851(obj_373853) {
		var Tmp1;

	var result_373854 = false;

	var F={procname:"exceptions.isStopIter",prev:framePtr,filename:"../Objects/exceptions.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(of_py_exception_object_358259(obj_373853))) {
		F.line = 136;
		result_373854 = false;
		break BeforeRet;
		}
		
		F.line = 137;
		var excp_373855 = obj_373853;
		F.line = 138;
		if (!(excp_373855.tk == 7)) Tmp1 = false; else {			Tmp1 = excp_373855.thrown;		}		result_373854 = Tmp1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_373854;

}

function init_py_tuple_object_magic_468053(self_no_cast_468055, args_468072) {
			var Tmp1;
						var Tmp4;

	var result_468073 = null;

	var F={procname:"tupleobject.initPyTupleObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_468072 != null ? args_468072.length : 0) == 1))) {
		F.line = 183;
		var msg_468085 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_468090 = mnewString(0);
		F.line = 185;
		if (fmt_res_468090 != null) { fmt_res_468090 = (fmt_res_468090).concat(makeNimstrLit(" argument (")); } else { fmt_res_468090 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_468090 != null) { fmt_res_468090 = (fmt_res_468090).concat(cstrToNimstr(((args_468072 != null ? args_468072.length : 0))+"")); } else { fmt_res_468090 = cstrToNimstr(((args_468072 != null ? args_468072.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_468090 != null) { fmt_res_468090 = (fmt_res_468090).concat(makeNimstrLit(" given)")); } else { fmt_res_468090 = makeNimstrLit(" given)"); };
		msg_468085 = nimCopy(null, (makeNimstrLit("init takes exactly 1")).concat(fmt_res_468090), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_468210 = mnewString(0);
			F.line = 187;
			if (fmt_res_468210 != null) { fmt_res_468210 = (fmt_res_468210).concat(makeNimstrLit(" argument (")); } else { fmt_res_468210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_468210 != null) { fmt_res_468210 = (fmt_res_468210).concat(cstrToNimstr(((args_468072 != null ? args_468072.length : 0))+"")); } else { fmt_res_468210 = cstrToNimstr(((args_468072 != null ? args_468072.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_468210 != null) { fmt_res_468210 = (fmt_res_468210).concat(makeNimstrLit(" given)")); } else { fmt_res_468210 = makeNimstrLit(" given)"); };
			msg_468085 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_468210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_468409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_468409.tk = 3;
		F.line = 106;
		excp_468409.thrown = true;
		F.line = 107;
		excp_468409.msg = new_py_string_176075(msg_468085);
		result_468073 = excp_468409;
		break BeforeRet;
		}
		
		F.line = 230;
		var may_be_iterable_468411 = args_468072[chckIndx(0, 0, args_468072.length+0-1)-0];
		if (!(isObj(self_no_cast_468055.m_type, NTI464070))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTupleObject` "));
		}
		
		F.line = 438;
		var self_468601 = self_no_cast_468055;
		F.line = 80;
		F.line = 170;
		var iter_func_468611 = may_be_iterable_468411.pyType.magicMethods.Field36;
		if ((iter_func_468611 === null)) {
		F.line = 172;
		var msg_468619 = (may_be_iterable_468411.pyType.name).concat(makeNimstrLit(" object is not iterable"));
		F.line = 173;
		F.line = 104;
		var excp_468621 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_468621.tk = 3;
		F.line = 106;
		excp_468621.thrown = true;
		F.line = 107;
		excp_468621.msg = new_py_string_176075(msg_468619);
		result_468073 = excp_468621;
		break BeforeRet;
		}
		
		F.line = 174;
		var iter_obj_468624 = iter_func_468611(may_be_iterable_468411);
		if ((iter_obj_468624.pyType.magicMethods.Field37 === null)) {
		F.line = 176;
		F.line = 176;
		var fmt_res_468633 = mnewString(0);
		F.line = 176;
		if (fmt_res_468633 != null) { fmt_res_468633 = (fmt_res_468633).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_468633 = makeNimstrLit("iter() returned non-iterator of type "); };
		var msg_468635 = (fmt_res_468633).concat(iter_obj_468624.pyType.name);
		F.line = 177;
		F.line = 104;
		var excp_468637 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_468637.tk = 3;
		F.line = 106;
		excp_468637.thrown = true;
		F.line = 107;
		excp_468637.msg = new_py_string_176075(msg_468635);
		result_468073 = excp_468637;
		break BeforeRet;
		}
		
		var iterable_468639 = iter_obj_468624;
			if (of_py_exception_object_358259(iterable_468639)) {
			Tmp1 = iterable_468639.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 82;
		result_468073 = iterable_468639;
		break BeforeRet;
		}
		
		F.line = 83;
		var next_method_468640 = iterable_468639.pyType.magicMethods.Field37;
		F.line = 84;
		var new_tuple_468641 = new_py_tuple_simple_464201();
		L2: do {
			F.line = 85;
				L3: while (true) {
				if (!true) break L3;
					F.line = 86;
					var next_obj_468642 = next_method_468640(iterable_468639);
					if (is_stop_iter_373851(next_obj_468642)) {
					F.line = 88;
					break L2;
					}
					
						if (of_py_exception_object_358259(next_obj_468642)) {
						Tmp4 = next_obj_468642.thrown;
						}
						else {
						Tmp4 = false;
						}
						
					if (Tmp4) {
					F.line = 90;
					result_468073 = next_obj_468642;
					break BeforeRet;
					}
					
					F.line = 91;
					if (self_468601.items != null) { self_468601.items.push(next_obj_468642); } else { self_468601.items = [next_obj_468642]; };
				}
		} while(false);
		result_468073 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_468073;

}
py_tuple_object_type_464080.magicMethods.Field18 = eq_py_tuple_object_magic_465075;
py_tuple_object_type_464080.magicMethods.Field36 = iter_py_tuple_object_magic_466022;
py_tuple_object_type_464080.magicMethods.Field25 = repr_py_tuple_object_magic_466216;
py_tuple_object_type_464080.magicMethods.Field23 = len_py_tuple_object_magic_467437;
py_tuple_object_type_464080.magicMethods.Field30 = hash_py_tuple_object_magic_467623;
py_tuple_object_type_464080.magicMethods.Field32 = getitem_py_tuple_object_magic_467833;
py_tuple_object_type_464080.magicMethods.Field27 = init_py_tuple_object_magic_468053;

function repr_py_base_error_object_magic_473314(self_no_cast_473316) {
				var Tmp1;

	var result_473317 = null;

	var F={procname:"exceptionsImpl.reprPyBaseErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_473316.m_type, NTI357231))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBaseErrorObject` "));
		}
		
		F.line = 438;
		var self_473401 = self_no_cast_473316;
		F.line = 23;
		var msg_473403 = null;
		if ((self_473401.msg === null)) {
		F.line = 25;
		msg_473403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_473401.msg)) {
		F.line = 27;
		msg_473403 = nimCopy(null, self_473401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_473401.msg.pyType === null)) {
			F.line = 2895;
			var e_473437 = null;
			F.line = 2896;
			e_473437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_473437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_473437.parent = null;
			F.line = 26;
			raiseException(e_473437, "InternalError");
			}
			
			F.line = 27;
			var fun_473602 = self_473401.msg.pyType.magicMethods.Field25;
			if ((fun_473602 === null)) {
			F.line = 29;
			var obj_type_str_473611 = self_473401.msg.pyType.name;
			F.line = 30;
			var method_str_473613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_473615 = (makeNimstrLit("No ")).concat(method_str_473613,makeNimstrLit(" method for "),obj_type_str_473611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_473617 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_473617.tk = 3;
			F.line = 106;
			excp_473617.thrown = true;
			F.line = 107;
			excp_473617.msg = new_py_string_176075(msg_473615);
			var excp_473620 = excp_473617;
			F.line = 36;
			result_473317 = excp_473620;
			break BeforeRet;
			}
			
			var fun_473802 = fun_473602;
			F.line = 46;
			var res_473804 = fun_473802(self_473401.msg);
			var msg_obj_474002 = res_473804;
				if (of_py_exception_object_358259(msg_obj_474002)) {
				Tmp1 = msg_obj_474002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_473403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_473403 = nimCopy(null, msg_obj_474002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_474010 = (reprEnum(self_473401.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_473403);
		result_473317 = new_py_string_176075(str_474010);
	} while (false);
	framePtr = F.prev;

	return result_473317;

}

function new_py_tuple_465057(items_465060) {
	var result_465061 = null;

	var F={procname:"tupleobject.newPyTuple",prev:framePtr,filename:"../Objects/tupleobject.nim",line:0};
	framePtr = F;
		F.line = 15;
		result_465061 = new_py_tuple_simple_464201();
		F.line = 17;
		result_465061.items = nimCopy(null, items_465060, NTI465059);
	framePtr = F.prev;

	return result_465061;

}

function new_py_base_error_object_magic_474026(args_474041) {
	var result_474042 = null;

	var F={procname:"exceptionsImpl.newPyBaseErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_474044 = new_py_base_error_simple_357401();
		F.line = 41;
		excp_474044.tk = 0;
		F.line = 42;
		excp_474044.msg = new_py_tuple_465057(args_474041);
		result_474042 = excp_474044;
	framePtr = F.prev;

	return result_474042;

}

function repr_py_name_error_object_magic_474059(self_no_cast_474061) {
				var Tmp1;

	var result_474062 = null;

	var F={procname:"exceptionsImpl.reprPyNameErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_474061.m_type, NTI358415))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNameErrorObject` "));
		}
		
		F.line = 438;
		var self_474201 = self_no_cast_474061;
		F.line = 23;
		var msg_474203 = null;
		if ((self_474201.msg === null)) {
		F.line = 25;
		msg_474203 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_474201.msg)) {
		F.line = 27;
		msg_474203 = nimCopy(null, self_474201.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_474201.msg.pyType === null)) {
			F.line = 2895;
			var e_474237 = null;
			F.line = 2896;
			e_474237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_474237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_474237.parent = null;
			F.line = 26;
			raiseException(e_474237, "InternalError");
			}
			
			F.line = 27;
			var fun_474402 = self_474201.msg.pyType.magicMethods.Field25;
			if ((fun_474402 === null)) {
			F.line = 29;
			var obj_type_str_474411 = self_474201.msg.pyType.name;
			F.line = 30;
			var method_str_474413 = makeNimstrLit("repr");
			F.line = 31;
			var msg_474415 = (makeNimstrLit("No ")).concat(method_str_474413,makeNimstrLit(" method for "),obj_type_str_474411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_474417 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_474417.tk = 3;
			F.line = 106;
			excp_474417.thrown = true;
			F.line = 107;
			excp_474417.msg = new_py_string_176075(msg_474415);
			var excp_474420 = excp_474417;
			F.line = 36;
			result_474062 = excp_474420;
			break BeforeRet;
			}
			
			var fun_474602 = fun_474402;
			F.line = 46;
			var res_474604 = fun_474602(self_474201.msg);
			var msg_obj_474802 = res_474604;
				if (of_py_exception_object_358259(msg_obj_474802)) {
				Tmp1 = msg_obj_474802.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_474203 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_474203 = nimCopy(null, msg_obj_474802.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_474810 = (reprEnum(self_474201.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_474203);
		result_474062 = new_py_string_176075(str_474810);
	} while (false);
	framePtr = F.prev;

	return result_474062;

}

function new_py_name_error_object_magic_474826(args_474841) {
	var result_474842 = null;

	var F={procname:"exceptionsImpl.newPyNameErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_474844 = new_py_name_error_simple_358601();
		F.line = 41;
		excp_474844.tk = 1;
		F.line = 42;
		excp_474844.msg = new_py_tuple_465057(args_474841);
		result_474842 = excp_474844;
	framePtr = F.prev;

	return result_474842;

}

function repr_py_not_implemented_error_object_magic_474859(self_no_cast_474861) {
				var Tmp1;

	var result_474862 = null;

	var F={procname:"exceptionsImpl.reprPyNotImplementedErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_474861.m_type, NTI359501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNotImplementedErrorObject` "));
		}
		
		F.line = 438;
		var self_475001 = self_no_cast_474861;
		F.line = 23;
		var msg_475003 = null;
		if ((self_475001.msg === null)) {
		F.line = 25;
		msg_475003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_475001.msg)) {
		F.line = 27;
		msg_475003 = nimCopy(null, self_475001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_475001.msg.pyType === null)) {
			F.line = 2895;
			var e_475037 = null;
			F.line = 2896;
			e_475037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_475037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_475037.parent = null;
			F.line = 26;
			raiseException(e_475037, "InternalError");
			}
			
			F.line = 27;
			var fun_475202 = self_475001.msg.pyType.magicMethods.Field25;
			if ((fun_475202 === null)) {
			F.line = 29;
			var obj_type_str_475211 = self_475001.msg.pyType.name;
			F.line = 30;
			var method_str_475213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_475215 = (makeNimstrLit("No ")).concat(method_str_475213,makeNimstrLit(" method for "),obj_type_str_475211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_475217 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_475217.tk = 3;
			F.line = 106;
			excp_475217.thrown = true;
			F.line = 107;
			excp_475217.msg = new_py_string_176075(msg_475215);
			var excp_475220 = excp_475217;
			F.line = 36;
			result_474862 = excp_475220;
			break BeforeRet;
			}
			
			var fun_475402 = fun_475202;
			F.line = 46;
			var res_475404 = fun_475402(self_475001.msg);
			var msg_obj_475602 = res_475404;
				if (of_py_exception_object_358259(msg_obj_475602)) {
				Tmp1 = msg_obj_475602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_475003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_475003 = nimCopy(null, msg_obj_475602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_475610 = (reprEnum(self_475001.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_475003);
		result_474862 = new_py_string_176075(str_475610);
	} while (false);
	framePtr = F.prev;

	return result_474862;

}

function new_py_not_implemented_error_object_magic_475626(args_475641) {
	var result_475642 = null;

	var F={procname:"exceptionsImpl.newPyNotImplementedErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_475644 = new_py_not_implemented_error_simple_359601();
		F.line = 41;
		excp_475644.tk = 2;
		F.line = 42;
		excp_475644.msg = new_py_tuple_465057(args_475641);
		result_475642 = excp_475644;
	framePtr = F.prev;

	return result_475642;

}

function repr_py_type_error_object_magic_475659(self_no_cast_475661) {
				var Tmp1;

	var result_475662 = null;

	var F={procname:"exceptionsImpl.reprPyTypeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_475661.m_type, NTI360501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeErrorObject` "));
		}
		
		F.line = 438;
		var self_475801 = self_no_cast_475661;
		F.line = 23;
		var msg_475803 = null;
		if ((self_475801.msg === null)) {
		F.line = 25;
		msg_475803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_475801.msg)) {
		F.line = 27;
		msg_475803 = nimCopy(null, self_475801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_475801.msg.pyType === null)) {
			F.line = 2895;
			var e_475837 = null;
			F.line = 2896;
			e_475837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_475837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_475837.parent = null;
			F.line = 26;
			raiseException(e_475837, "InternalError");
			}
			
			F.line = 27;
			var fun_476002 = self_475801.msg.pyType.magicMethods.Field25;
			if ((fun_476002 === null)) {
			F.line = 29;
			var obj_type_str_476011 = self_475801.msg.pyType.name;
			F.line = 30;
			var method_str_476013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_476015 = (makeNimstrLit("No ")).concat(method_str_476013,makeNimstrLit(" method for "),obj_type_str_476011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_476017 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_476017.tk = 3;
			F.line = 106;
			excp_476017.thrown = true;
			F.line = 107;
			excp_476017.msg = new_py_string_176075(msg_476015);
			var excp_476020 = excp_476017;
			F.line = 36;
			result_475662 = excp_476020;
			break BeforeRet;
			}
			
			var fun_476202 = fun_476002;
			F.line = 46;
			var res_476204 = fun_476202(self_475801.msg);
			var msg_obj_476402 = res_476204;
				if (of_py_exception_object_358259(msg_obj_476402)) {
				Tmp1 = msg_obj_476402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_475803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_475803 = nimCopy(null, msg_obj_476402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_476410 = (reprEnum(self_475801.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_475803);
		result_475662 = new_py_string_176075(str_476410);
	} while (false);
	framePtr = F.prev;

	return result_475662;

}

function new_py_type_error_object_magic_476426(args_476441) {
	var result_476442 = null;

	var F={procname:"exceptionsImpl.newPyTypeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_476444 = new_py_type_error_simple_360601();
		F.line = 41;
		excp_476444.tk = 3;
		F.line = 42;
		excp_476444.msg = new_py_tuple_465057(args_476441);
		result_476442 = excp_476444;
	framePtr = F.prev;

	return result_476442;

}

function repr_py_attribute_error_object_magic_476459(self_no_cast_476461) {
				var Tmp1;

	var result_476462 = null;

	var F={procname:"exceptionsImpl.reprPyAttributeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_476461.m_type, NTI361501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyAttributeErrorObject` "));
		}
		
		F.line = 438;
		var self_476601 = self_no_cast_476461;
		F.line = 23;
		var msg_476603 = null;
		if ((self_476601.msg === null)) {
		F.line = 25;
		msg_476603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_476601.msg)) {
		F.line = 27;
		msg_476603 = nimCopy(null, self_476601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_476601.msg.pyType === null)) {
			F.line = 2895;
			var e_476637 = null;
			F.line = 2896;
			e_476637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_476637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_476637.parent = null;
			F.line = 26;
			raiseException(e_476637, "InternalError");
			}
			
			F.line = 27;
			var fun_476802 = self_476601.msg.pyType.magicMethods.Field25;
			if ((fun_476802 === null)) {
			F.line = 29;
			var obj_type_str_476811 = self_476601.msg.pyType.name;
			F.line = 30;
			var method_str_476813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_476815 = (makeNimstrLit("No ")).concat(method_str_476813,makeNimstrLit(" method for "),obj_type_str_476811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_476817 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_476817.tk = 3;
			F.line = 106;
			excp_476817.thrown = true;
			F.line = 107;
			excp_476817.msg = new_py_string_176075(msg_476815);
			var excp_476820 = excp_476817;
			F.line = 36;
			result_476462 = excp_476820;
			break BeforeRet;
			}
			
			var fun_477002 = fun_476802;
			F.line = 46;
			var res_477004 = fun_477002(self_476601.msg);
			var msg_obj_477202 = res_477004;
				if (of_py_exception_object_358259(msg_obj_477202)) {
				Tmp1 = msg_obj_477202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_476603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_476603 = nimCopy(null, msg_obj_477202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_477210 = (reprEnum(self_476601.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_476603);
		result_476462 = new_py_string_176075(str_477210);
	} while (false);
	framePtr = F.prev;

	return result_476462;

}

function new_py_attribute_error_object_magic_477226(args_477241) {
	var result_477242 = null;

	var F={procname:"exceptionsImpl.newPyAttributeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_477244 = new_py_attribute_error_simple_361601();
		F.line = 41;
		excp_477244.tk = 4;
		F.line = 42;
		excp_477244.msg = new_py_tuple_465057(args_477241);
		result_477242 = excp_477244;
	framePtr = F.prev;

	return result_477242;

}

function repr_py_value_error_object_magic_477259(self_no_cast_477261) {
				var Tmp1;

	var result_477262 = null;

	var F={procname:"exceptionsImpl.reprPyValueErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_477261.m_type, NTI362501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyValueErrorObject` "));
		}
		
		F.line = 438;
		var self_477401 = self_no_cast_477261;
		F.line = 23;
		var msg_477403 = null;
		if ((self_477401.msg === null)) {
		F.line = 25;
		msg_477403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_477401.msg)) {
		F.line = 27;
		msg_477403 = nimCopy(null, self_477401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_477401.msg.pyType === null)) {
			F.line = 2895;
			var e_477437 = null;
			F.line = 2896;
			e_477437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_477437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_477437.parent = null;
			F.line = 26;
			raiseException(e_477437, "InternalError");
			}
			
			F.line = 27;
			var fun_477602 = self_477401.msg.pyType.magicMethods.Field25;
			if ((fun_477602 === null)) {
			F.line = 29;
			var obj_type_str_477611 = self_477401.msg.pyType.name;
			F.line = 30;
			var method_str_477613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_477615 = (makeNimstrLit("No ")).concat(method_str_477613,makeNimstrLit(" method for "),obj_type_str_477611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_477617 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_477617.tk = 3;
			F.line = 106;
			excp_477617.thrown = true;
			F.line = 107;
			excp_477617.msg = new_py_string_176075(msg_477615);
			var excp_477620 = excp_477617;
			F.line = 36;
			result_477262 = excp_477620;
			break BeforeRet;
			}
			
			var fun_477802 = fun_477602;
			F.line = 46;
			var res_477804 = fun_477802(self_477401.msg);
			var msg_obj_478002 = res_477804;
				if (of_py_exception_object_358259(msg_obj_478002)) {
				Tmp1 = msg_obj_478002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_477403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_477403 = nimCopy(null, msg_obj_478002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_478010 = (reprEnum(self_477401.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_477403);
		result_477262 = new_py_string_176075(str_478010);
	} while (false);
	framePtr = F.prev;

	return result_477262;

}

function new_py_value_error_object_magic_478026(args_478041) {
	var result_478042 = null;

	var F={procname:"exceptionsImpl.newPyValueErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_478044 = new_py_value_error_simple_362601();
		F.line = 41;
		excp_478044.tk = 5;
		F.line = 42;
		excp_478044.msg = new_py_tuple_465057(args_478041);
		result_478042 = excp_478044;
	framePtr = F.prev;

	return result_478042;

}

function repr_py_index_error_object_magic_478059(self_no_cast_478061) {
				var Tmp1;

	var result_478062 = null;

	var F={procname:"exceptionsImpl.reprPyIndexErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_478061.m_type, NTI363501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyIndexErrorObject` "));
		}
		
		F.line = 438;
		var self_478201 = self_no_cast_478061;
		F.line = 23;
		var msg_478203 = null;
		if ((self_478201.msg === null)) {
		F.line = 25;
		msg_478203 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_478201.msg)) {
		F.line = 27;
		msg_478203 = nimCopy(null, self_478201.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_478201.msg.pyType === null)) {
			F.line = 2895;
			var e_478237 = null;
			F.line = 2896;
			e_478237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_478237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_478237.parent = null;
			F.line = 26;
			raiseException(e_478237, "InternalError");
			}
			
			F.line = 27;
			var fun_478402 = self_478201.msg.pyType.magicMethods.Field25;
			if ((fun_478402 === null)) {
			F.line = 29;
			var obj_type_str_478411 = self_478201.msg.pyType.name;
			F.line = 30;
			var method_str_478413 = makeNimstrLit("repr");
			F.line = 31;
			var msg_478415 = (makeNimstrLit("No ")).concat(method_str_478413,makeNimstrLit(" method for "),obj_type_str_478411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_478417 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_478417.tk = 3;
			F.line = 106;
			excp_478417.thrown = true;
			F.line = 107;
			excp_478417.msg = new_py_string_176075(msg_478415);
			var excp_478420 = excp_478417;
			F.line = 36;
			result_478062 = excp_478420;
			break BeforeRet;
			}
			
			var fun_478602 = fun_478402;
			F.line = 46;
			var res_478604 = fun_478602(self_478201.msg);
			var msg_obj_478802 = res_478604;
				if (of_py_exception_object_358259(msg_obj_478802)) {
				Tmp1 = msg_obj_478802.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_478203 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_478203 = nimCopy(null, msg_obj_478802.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_478810 = (reprEnum(self_478201.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_478203);
		result_478062 = new_py_string_176075(str_478810);
	} while (false);
	framePtr = F.prev;

	return result_478062;

}

function new_py_index_error_object_magic_478826(args_478841) {
	var result_478842 = null;

	var F={procname:"exceptionsImpl.newPyIndexErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_478844 = new_py_index_error_simple_363601();
		F.line = 41;
		excp_478844.tk = 6;
		F.line = 42;
		excp_478844.msg = new_py_tuple_465057(args_478841);
		result_478842 = excp_478844;
	framePtr = F.prev;

	return result_478842;

}

function repr_py_stop_iter_error_object_magic_478859(self_no_cast_478861) {
				var Tmp1;

	var result_478862 = null;

	var F={procname:"exceptionsImpl.reprPyStopIterErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_478861.m_type, NTI364501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStopIterErrorObject` "));
		}
		
		F.line = 438;
		var self_479001 = self_no_cast_478861;
		F.line = 23;
		var msg_479003 = null;
		if ((self_479001.msg === null)) {
		F.line = 25;
		msg_479003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_479001.msg)) {
		F.line = 27;
		msg_479003 = nimCopy(null, self_479001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_479001.msg.pyType === null)) {
			F.line = 2895;
			var e_479037 = null;
			F.line = 2896;
			e_479037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_479037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_479037.parent = null;
			F.line = 26;
			raiseException(e_479037, "InternalError");
			}
			
			F.line = 27;
			var fun_479202 = self_479001.msg.pyType.magicMethods.Field25;
			if ((fun_479202 === null)) {
			F.line = 29;
			var obj_type_str_479211 = self_479001.msg.pyType.name;
			F.line = 30;
			var method_str_479213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_479215 = (makeNimstrLit("No ")).concat(method_str_479213,makeNimstrLit(" method for "),obj_type_str_479211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_479217 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_479217.tk = 3;
			F.line = 106;
			excp_479217.thrown = true;
			F.line = 107;
			excp_479217.msg = new_py_string_176075(msg_479215);
			var excp_479220 = excp_479217;
			F.line = 36;
			result_478862 = excp_479220;
			break BeforeRet;
			}
			
			var fun_479402 = fun_479202;
			F.line = 46;
			var res_479404 = fun_479402(self_479001.msg);
			var msg_obj_479602 = res_479404;
				if (of_py_exception_object_358259(msg_obj_479602)) {
				Tmp1 = msg_obj_479602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_479003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_479003 = nimCopy(null, msg_obj_479602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_479610 = (reprEnum(self_479001.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_479003);
		result_478862 = new_py_string_176075(str_479610);
	} while (false);
	framePtr = F.prev;

	return result_478862;

}

function new_py_stop_iter_error_object_magic_479626(args_479641) {
	var result_479642 = null;

	var F={procname:"exceptionsImpl.newPyStopIterErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_479644 = new_py_stop_iter_error_simple_364601();
		F.line = 41;
		excp_479644.tk = 7;
		F.line = 42;
		excp_479644.msg = new_py_tuple_465057(args_479641);
		result_479642 = excp_479644;
	framePtr = F.prev;

	return result_479642;

}

function repr_py_lock_error_object_magic_479659(self_no_cast_479661) {
				var Tmp1;

	var result_479662 = null;

	var F={procname:"exceptionsImpl.reprPyLockErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_479661.m_type, NTI365501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyLockErrorObject` "));
		}
		
		F.line = 438;
		var self_479801 = self_no_cast_479661;
		F.line = 23;
		var msg_479803 = null;
		if ((self_479801.msg === null)) {
		F.line = 25;
		msg_479803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_479801.msg)) {
		F.line = 27;
		msg_479803 = nimCopy(null, self_479801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_479801.msg.pyType === null)) {
			F.line = 2895;
			var e_479837 = null;
			F.line = 2896;
			e_479837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_479837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_479837.parent = null;
			F.line = 26;
			raiseException(e_479837, "InternalError");
			}
			
			F.line = 27;
			var fun_480002 = self_479801.msg.pyType.magicMethods.Field25;
			if ((fun_480002 === null)) {
			F.line = 29;
			var obj_type_str_480011 = self_479801.msg.pyType.name;
			F.line = 30;
			var method_str_480013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_480015 = (makeNimstrLit("No ")).concat(method_str_480013,makeNimstrLit(" method for "),obj_type_str_480011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_480017 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_480017.tk = 3;
			F.line = 106;
			excp_480017.thrown = true;
			F.line = 107;
			excp_480017.msg = new_py_string_176075(msg_480015);
			var excp_480020 = excp_480017;
			F.line = 36;
			result_479662 = excp_480020;
			break BeforeRet;
			}
			
			var fun_480202 = fun_480002;
			F.line = 46;
			var res_480204 = fun_480202(self_479801.msg);
			var msg_obj_480402 = res_480204;
				if (of_py_exception_object_358259(msg_obj_480402)) {
				Tmp1 = msg_obj_480402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_479803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_479803 = nimCopy(null, msg_obj_480402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_480410 = (reprEnum(self_479801.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_479803);
		result_479662 = new_py_string_176075(str_480410);
	} while (false);
	framePtr = F.prev;

	return result_479662;

}

function new_py_lock_error_object_magic_480426(args_480441) {
	var result_480442 = null;

	var F={procname:"exceptionsImpl.newPyLockErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_480444 = new_py_lock_error_simple_365601();
		F.line = 41;
		excp_480444.tk = 8;
		F.line = 42;
		excp_480444.msg = new_py_tuple_465057(args_480441);
		result_480442 = excp_480444;
	framePtr = F.prev;

	return result_480442;

}

function repr_py_import_error_object_magic_480459(self_no_cast_480461) {
				var Tmp1;

	var result_480462 = null;

	var F={procname:"exceptionsImpl.reprPyImportErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_480461.m_type, NTI366501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyImportErrorObject` "));
		}
		
		F.line = 438;
		var self_480601 = self_no_cast_480461;
		F.line = 23;
		var msg_480603 = null;
		if ((self_480601.msg === null)) {
		F.line = 25;
		msg_480603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_480601.msg)) {
		F.line = 27;
		msg_480603 = nimCopy(null, self_480601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_480601.msg.pyType === null)) {
			F.line = 2895;
			var e_480637 = null;
			F.line = 2896;
			e_480637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_480637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_480637.parent = null;
			F.line = 26;
			raiseException(e_480637, "InternalError");
			}
			
			F.line = 27;
			var fun_480802 = self_480601.msg.pyType.magicMethods.Field25;
			if ((fun_480802 === null)) {
			F.line = 29;
			var obj_type_str_480811 = self_480601.msg.pyType.name;
			F.line = 30;
			var method_str_480813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_480815 = (makeNimstrLit("No ")).concat(method_str_480813,makeNimstrLit(" method for "),obj_type_str_480811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_480817 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_480817.tk = 3;
			F.line = 106;
			excp_480817.thrown = true;
			F.line = 107;
			excp_480817.msg = new_py_string_176075(msg_480815);
			var excp_480820 = excp_480817;
			F.line = 36;
			result_480462 = excp_480820;
			break BeforeRet;
			}
			
			var fun_481002 = fun_480802;
			F.line = 46;
			var res_481004 = fun_481002(self_480601.msg);
			var msg_obj_481202 = res_481004;
				if (of_py_exception_object_358259(msg_obj_481202)) {
				Tmp1 = msg_obj_481202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_480603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_480603 = nimCopy(null, msg_obj_481202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_481210 = (reprEnum(self_480601.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_480603);
		result_480462 = new_py_string_176075(str_481210);
	} while (false);
	framePtr = F.prev;

	return result_480462;

}

function new_py_import_error_object_magic_481226(args_481241) {
	var result_481242 = null;

	var F={procname:"exceptionsImpl.newPyImportErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_481244 = new_py_import_error_simple_366601();
		F.line = 41;
		excp_481244.tk = 9;
		F.line = 42;
		excp_481244.msg = new_py_tuple_465057(args_481241);
		result_481242 = excp_481244;
	framePtr = F.prev;

	return result_481242;

}

function repr_py_unbound_local_error_object_magic_481259(self_no_cast_481261) {
				var Tmp1;

	var result_481262 = null;

	var F={procname:"exceptionsImpl.reprPyUnboundLocalErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_481261.m_type, NTI367501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyUnboundLocalErrorObject` "));
		}
		
		F.line = 438;
		var self_481401 = self_no_cast_481261;
		F.line = 23;
		var msg_481403 = null;
		if ((self_481401.msg === null)) {
		F.line = 25;
		msg_481403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_481401.msg)) {
		F.line = 27;
		msg_481403 = nimCopy(null, self_481401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_481401.msg.pyType === null)) {
			F.line = 2895;
			var e_481437 = null;
			F.line = 2896;
			e_481437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_481437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_481437.parent = null;
			F.line = 26;
			raiseException(e_481437, "InternalError");
			}
			
			F.line = 27;
			var fun_481602 = self_481401.msg.pyType.magicMethods.Field25;
			if ((fun_481602 === null)) {
			F.line = 29;
			var obj_type_str_481611 = self_481401.msg.pyType.name;
			F.line = 30;
			var method_str_481613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_481615 = (makeNimstrLit("No ")).concat(method_str_481613,makeNimstrLit(" method for "),obj_type_str_481611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_481617 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_481617.tk = 3;
			F.line = 106;
			excp_481617.thrown = true;
			F.line = 107;
			excp_481617.msg = new_py_string_176075(msg_481615);
			var excp_481620 = excp_481617;
			F.line = 36;
			result_481262 = excp_481620;
			break BeforeRet;
			}
			
			var fun_481802 = fun_481602;
			F.line = 46;
			var res_481804 = fun_481802(self_481401.msg);
			var msg_obj_482002 = res_481804;
				if (of_py_exception_object_358259(msg_obj_482002)) {
				Tmp1 = msg_obj_482002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_481403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_481403 = nimCopy(null, msg_obj_482002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_482010 = (reprEnum(self_481401.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_481403);
		result_481262 = new_py_string_176075(str_482010);
	} while (false);
	framePtr = F.prev;

	return result_481262;

}

function new_py_unbound_local_error_object_magic_482026(args_482041) {
	var result_482042 = null;

	var F={procname:"exceptionsImpl.newPyUnboundLocalErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_482044 = new_py_unbound_local_error_simple_367601();
		F.line = 41;
		excp_482044.tk = 10;
		F.line = 42;
		excp_482044.msg = new_py_tuple_465057(args_482041);
		result_482042 = excp_482044;
	framePtr = F.prev;

	return result_482042;

}

function repr_py_key_error_object_magic_482059(self_no_cast_482061) {
				var Tmp1;

	var result_482062 = null;

	var F={procname:"exceptionsImpl.reprPyKeyErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_482061.m_type, NTI368501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyKeyErrorObject` "));
		}
		
		F.line = 438;
		var self_482201 = self_no_cast_482061;
		F.line = 23;
		var msg_482203 = null;
		if ((self_482201.msg === null)) {
		F.line = 25;
		msg_482203 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_482201.msg)) {
		F.line = 27;
		msg_482203 = nimCopy(null, self_482201.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_482201.msg.pyType === null)) {
			F.line = 2895;
			var e_482237 = null;
			F.line = 2896;
			e_482237 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_482237.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_482237.parent = null;
			F.line = 26;
			raiseException(e_482237, "InternalError");
			}
			
			F.line = 27;
			var fun_482402 = self_482201.msg.pyType.magicMethods.Field25;
			if ((fun_482402 === null)) {
			F.line = 29;
			var obj_type_str_482411 = self_482201.msg.pyType.name;
			F.line = 30;
			var method_str_482413 = makeNimstrLit("repr");
			F.line = 31;
			var msg_482415 = (makeNimstrLit("No ")).concat(method_str_482413,makeNimstrLit(" method for "),obj_type_str_482411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_482417 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_482417.tk = 3;
			F.line = 106;
			excp_482417.thrown = true;
			F.line = 107;
			excp_482417.msg = new_py_string_176075(msg_482415);
			var excp_482420 = excp_482417;
			F.line = 36;
			result_482062 = excp_482420;
			break BeforeRet;
			}
			
			var fun_482602 = fun_482402;
			F.line = 46;
			var res_482604 = fun_482602(self_482201.msg);
			var msg_obj_482802 = res_482604;
				if (of_py_exception_object_358259(msg_obj_482802)) {
				Tmp1 = msg_obj_482802.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_482203 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_482203 = nimCopy(null, msg_obj_482802.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_482810 = (reprEnum(self_482201.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_482203);
		result_482062 = new_py_string_176075(str_482810);
	} while (false);
	framePtr = F.prev;

	return result_482062;

}

function new_py_key_error_object_magic_482826(args_482841) {
	var result_482842 = null;

	var F={procname:"exceptionsImpl.newPyKeyErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_482844 = new_py_key_error_simple_368601();
		F.line = 41;
		excp_482844.tk = 11;
		F.line = 42;
		excp_482844.msg = new_py_tuple_465057(args_482841);
		result_482842 = excp_482844;
	framePtr = F.prev;

	return result_482842;

}

function repr_py_assertion_error_object_magic_482859(self_no_cast_482861) {
				var Tmp1;

	var result_482862 = null;

	var F={procname:"exceptionsImpl.reprPyAssertionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_482861.m_type, NTI369501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyAssertionErrorObject` "));
		}
		
		F.line = 438;
		var self_483001 = self_no_cast_482861;
		F.line = 23;
		var msg_483003 = null;
		if ((self_483001.msg === null)) {
		F.line = 25;
		msg_483003 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_483001.msg)) {
		F.line = 27;
		msg_483003 = nimCopy(null, self_483001.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_483001.msg.pyType === null)) {
			F.line = 2895;
			var e_483037 = null;
			F.line = 2896;
			e_483037 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_483037.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_483037.parent = null;
			F.line = 26;
			raiseException(e_483037, "InternalError");
			}
			
			F.line = 27;
			var fun_483202 = self_483001.msg.pyType.magicMethods.Field25;
			if ((fun_483202 === null)) {
			F.line = 29;
			var obj_type_str_483211 = self_483001.msg.pyType.name;
			F.line = 30;
			var method_str_483213 = makeNimstrLit("repr");
			F.line = 31;
			var msg_483215 = (makeNimstrLit("No ")).concat(method_str_483213,makeNimstrLit(" method for "),obj_type_str_483211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_483217 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_483217.tk = 3;
			F.line = 106;
			excp_483217.thrown = true;
			F.line = 107;
			excp_483217.msg = new_py_string_176075(msg_483215);
			var excp_483220 = excp_483217;
			F.line = 36;
			result_482862 = excp_483220;
			break BeforeRet;
			}
			
			var fun_483402 = fun_483202;
			F.line = 46;
			var res_483404 = fun_483402(self_483001.msg);
			var msg_obj_483602 = res_483404;
				if (of_py_exception_object_358259(msg_obj_483602)) {
				Tmp1 = msg_obj_483602.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_483003 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_483003 = nimCopy(null, msg_obj_483602.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_483610 = (reprEnum(self_483001.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_483003);
		result_482862 = new_py_string_176075(str_483610);
	} while (false);
	framePtr = F.prev;

	return result_482862;

}

function new_py_assertion_error_object_magic_483626(args_483641) {
	var result_483642 = null;

	var F={procname:"exceptionsImpl.newPyAssertionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_483644 = new_py_assertion_error_simple_369601();
		F.line = 41;
		excp_483644.tk = 12;
		F.line = 42;
		excp_483644.msg = new_py_tuple_465057(args_483641);
		result_483642 = excp_483644;
	framePtr = F.prev;

	return result_483642;

}

function repr_py_zero_division_error_object_magic_483659(self_no_cast_483661) {
				var Tmp1;

	var result_483662 = null;

	var F={procname:"exceptionsImpl.reprPyZeroDivisionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_483661.m_type, NTI370501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyZeroDivisionErrorObject` "));
		}
		
		F.line = 438;
		var self_483801 = self_no_cast_483661;
		F.line = 23;
		var msg_483803 = null;
		if ((self_483801.msg === null)) {
		F.line = 25;
		msg_483803 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_483801.msg)) {
		F.line = 27;
		msg_483803 = nimCopy(null, self_483801.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_483801.msg.pyType === null)) {
			F.line = 2895;
			var e_483837 = null;
			F.line = 2896;
			e_483837 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_483837.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_483837.parent = null;
			F.line = 26;
			raiseException(e_483837, "InternalError");
			}
			
			F.line = 27;
			var fun_484002 = self_483801.msg.pyType.magicMethods.Field25;
			if ((fun_484002 === null)) {
			F.line = 29;
			var obj_type_str_484011 = self_483801.msg.pyType.name;
			F.line = 30;
			var method_str_484013 = makeNimstrLit("repr");
			F.line = 31;
			var msg_484015 = (makeNimstrLit("No ")).concat(method_str_484013,makeNimstrLit(" method for "),obj_type_str_484011,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_484017 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_484017.tk = 3;
			F.line = 106;
			excp_484017.thrown = true;
			F.line = 107;
			excp_484017.msg = new_py_string_176075(msg_484015);
			var excp_484020 = excp_484017;
			F.line = 36;
			result_483662 = excp_484020;
			break BeforeRet;
			}
			
			var fun_484202 = fun_484002;
			F.line = 46;
			var res_484204 = fun_484202(self_483801.msg);
			var msg_obj_484402 = res_484204;
				if (of_py_exception_object_358259(msg_obj_484402)) {
				Tmp1 = msg_obj_484402.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_483803 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_483803 = nimCopy(null, msg_obj_484402.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_484410 = (reprEnum(self_483801.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_483803);
		result_483662 = new_py_string_176075(str_484410);
	} while (false);
	framePtr = F.prev;

	return result_483662;

}

function new_py_zero_division_error_object_magic_484426(args_484441) {
	var result_484442 = null;

	var F={procname:"exceptionsImpl.newPyZeroDivisionErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_484444 = new_py_zero_division_error_simple_370601();
		F.line = 41;
		excp_484444.tk = 13;
		F.line = 42;
		excp_484444.msg = new_py_tuple_465057(args_484441);
		result_484442 = excp_484444;
	framePtr = F.prev;

	return result_484442;

}

function repr_py_runtime_error_object_magic_484459(self_no_cast_484461) {
				var Tmp1;

	var result_484462 = null;

	var F={procname:"exceptionsImpl.reprPyRuntimeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_484461.m_type, NTI371501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRuntimeErrorObject` "));
		}
		
		F.line = 438;
		var self_484601 = self_no_cast_484461;
		F.line = 23;
		var msg_484603 = null;
		if ((self_484601.msg === null)) {
		F.line = 25;
		msg_484603 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_484601.msg)) {
		F.line = 27;
		msg_484603 = nimCopy(null, self_484601.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_484601.msg.pyType === null)) {
			F.line = 2895;
			var e_484637 = null;
			F.line = 2896;
			e_484637 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_484637.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_484637.parent = null;
			F.line = 26;
			raiseException(e_484637, "InternalError");
			}
			
			F.line = 27;
			var fun_484802 = self_484601.msg.pyType.magicMethods.Field25;
			if ((fun_484802 === null)) {
			F.line = 29;
			var obj_type_str_484811 = self_484601.msg.pyType.name;
			F.line = 30;
			var method_str_484813 = makeNimstrLit("repr");
			F.line = 31;
			var msg_484815 = (makeNimstrLit("No ")).concat(method_str_484813,makeNimstrLit(" method for "),obj_type_str_484811,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_484817 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_484817.tk = 3;
			F.line = 106;
			excp_484817.thrown = true;
			F.line = 107;
			excp_484817.msg = new_py_string_176075(msg_484815);
			var excp_484820 = excp_484817;
			F.line = 36;
			result_484462 = excp_484820;
			break BeforeRet;
			}
			
			var fun_485002 = fun_484802;
			F.line = 46;
			var res_485004 = fun_485002(self_484601.msg);
			var msg_obj_485202 = res_485004;
				if (of_py_exception_object_358259(msg_obj_485202)) {
				Tmp1 = msg_obj_485202.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_484603 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_484603 = nimCopy(null, msg_obj_485202.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_485210 = (reprEnum(self_484601.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_484603);
		result_484462 = new_py_string_176075(str_485210);
	} while (false);
	framePtr = F.prev;

	return result_484462;

}

function new_py_runtime_error_object_magic_485226(args_485241) {
	var result_485242 = null;

	var F={procname:"exceptionsImpl.newPyRuntimeErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_485244 = new_py_runtime_error_simple_371601();
		F.line = 41;
		excp_485244.tk = 14;
		F.line = 42;
		excp_485244.msg = new_py_tuple_465057(args_485241);
		result_485242 = excp_485244;
	framePtr = F.prev;

	return result_485242;

}

function repr_py_syntax_error_object_magic_485259(self_no_cast_485261) {
				var Tmp1;

	var result_485262 = null;

	var F={procname:"exceptionsImpl.reprPySyntaxErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_485261.m_type, NTI372501))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PySyntaxErrorObject` "));
		}
		
		F.line = 438;
		var self_485401 = self_no_cast_485261;
		F.line = 23;
		var msg_485403 = null;
		if ((self_485401.msg === null)) {
		F.line = 25;
		msg_485403 = nimCopy(null, [], NTI138);
		}
		else {
		if (of_py_str_object_175092(self_485401.msg)) {
		F.line = 27;
		msg_485403 = nimCopy(null, self_485401.msg.str, NTI138);
		}
		else {
			F.line = 30;
			F.line = 45;
			if ((self_485401.msg.pyType === null)) {
			F.line = 2895;
			var e_485437 = null;
			F.line = 2896;
			e_485437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_485437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_485437.parent = null;
			F.line = 26;
			raiseException(e_485437, "InternalError");
			}
			
			F.line = 27;
			var fun_485602 = self_485401.msg.pyType.magicMethods.Field25;
			if ((fun_485602 === null)) {
			F.line = 29;
			var obj_type_str_485611 = self_485401.msg.pyType.name;
			F.line = 30;
			var method_str_485613 = makeNimstrLit("repr");
			F.line = 31;
			var msg_485615 = (makeNimstrLit("No ")).concat(method_str_485613,makeNimstrLit(" method for "),obj_type_str_485611,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_485617 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_485617.tk = 3;
			F.line = 106;
			excp_485617.thrown = true;
			F.line = 107;
			excp_485617.msg = new_py_string_176075(msg_485615);
			var excp_485620 = excp_485617;
			F.line = 36;
			result_485262 = excp_485620;
			break BeforeRet;
			}
			
			var fun_485802 = fun_485602;
			F.line = 46;
			var res_485804 = fun_485802(self_485401.msg);
			var msg_obj_486002 = res_485804;
				if (of_py_exception_object_358259(msg_obj_486002)) {
				Tmp1 = msg_obj_486002.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 32;
			msg_485403 = nimCopy(null, makeNimstrLit("evaluating __repr__ failed"), NTI138);
			}
			else {
				F.line = 34;
				msg_485403 = nimCopy(null, msg_obj_486002.str, NTI138);
			}
			
		}
		}
		F.line = 35;
		var str_486010 = (reprEnum(self_485401.tk, NTI357147)).concat(makeNimstrLit("Error: "),msg_485403);
		result_485262 = new_py_string_176075(str_486010);
	} while (false);
	framePtr = F.prev;

	return result_485262;

}

function new_py_syntax_error_object_magic_486026(args_486041) {
	var result_486042 = null;

	var F={procname:"exceptionsImpl.newPySyntaxErrorObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 40;
		F.line = 40;
		var excp_486044 = new_py_syntax_error_simple_372601();
		F.line = 41;
		excp_486044.tk = 15;
		F.line = 42;
		excp_486044.msg = new_py_tuple_465057(args_486041);
		result_486042 = excp_486044;
	framePtr = F.prev;

	return result_486042;

}
py_base_error_object_type_357247.magicMethods.Field25 = repr_py_base_error_object_magic_473314;
py_base_error_object_type_357247.magicMethods.Field26 = new_py_base_error_object_magic_474026;
py_name_error_object_type_358419.magicMethods.Field25 = repr_py_name_error_object_magic_474059;
py_name_error_object_type_358419.magicMethods.Field26 = new_py_name_error_object_magic_474826;
py_not_implemented_error_object_type_359505.magicMethods.Field25 = repr_py_not_implemented_error_object_magic_474859;
py_not_implemented_error_object_type_359505.magicMethods.Field26 = new_py_not_implemented_error_object_magic_475626;
py_type_error_object_type_360505.magicMethods.Field25 = repr_py_type_error_object_magic_475659;
py_type_error_object_type_360505.magicMethods.Field26 = new_py_type_error_object_magic_476426;
py_attribute_error_object_type_361505.magicMethods.Field25 = repr_py_attribute_error_object_magic_476459;
py_attribute_error_object_type_361505.magicMethods.Field26 = new_py_attribute_error_object_magic_477226;
py_value_error_object_type_362505.magicMethods.Field25 = repr_py_value_error_object_magic_477259;
py_value_error_object_type_362505.magicMethods.Field26 = new_py_value_error_object_magic_478026;
py_index_error_object_type_363505.magicMethods.Field25 = repr_py_index_error_object_magic_478059;
py_index_error_object_type_363505.magicMethods.Field26 = new_py_index_error_object_magic_478826;
py_stop_iter_error_object_type_364505.magicMethods.Field25 = repr_py_stop_iter_error_object_magic_478859;
py_stop_iter_error_object_type_364505.magicMethods.Field26 = new_py_stop_iter_error_object_magic_479626;
py_lock_error_object_type_365505.magicMethods.Field25 = repr_py_lock_error_object_magic_479659;
py_lock_error_object_type_365505.magicMethods.Field26 = new_py_lock_error_object_magic_480426;
py_import_error_object_type_366505.magicMethods.Field25 = repr_py_import_error_object_magic_480459;
py_import_error_object_type_366505.magicMethods.Field26 = new_py_import_error_object_magic_481226;
py_unbound_local_error_object_type_367505.magicMethods.Field25 = repr_py_unbound_local_error_object_magic_481259;
py_unbound_local_error_object_type_367505.magicMethods.Field26 = new_py_unbound_local_error_object_magic_482026;
py_key_error_object_type_368505.magicMethods.Field25 = repr_py_key_error_object_magic_482059;
py_key_error_object_type_368505.magicMethods.Field26 = new_py_key_error_object_magic_482826;
py_assertion_error_object_type_369505.magicMethods.Field25 = repr_py_assertion_error_object_magic_482859;
py_assertion_error_object_type_369505.magicMethods.Field26 = new_py_assertion_error_object_magic_483626;
py_zero_division_error_object_type_370505.magicMethods.Field25 = repr_py_zero_division_error_object_magic_483659;
py_zero_division_error_object_type_370505.magicMethods.Field26 = new_py_zero_division_error_object_magic_484426;
py_runtime_error_object_type_371505.magicMethods.Field25 = repr_py_runtime_error_object_magic_484459;
py_runtime_error_object_type_371505.magicMethods.Field26 = new_py_runtime_error_object_magic_485226;
py_syntax_error_object_type_372505.magicMethods.Field25 = repr_py_syntax_error_object_magic_485259;
py_syntax_error_object_type_372505.magicMethods.Field26 = new_py_syntax_error_object_magic_486026;

function new_487406() {
	var result_487411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_487601 = null;
		F.line = 211;
		r_487601 = {m_type: NTI487125, code: null, opCodes: [null, 0], opArgs: [null, 0], lineNos: null, constants: null, names: null, localVars: null, cellVars: null, freeVars: null, argNames: null, argScopes: null, codeName: null, fileName: null, id: 0, pyType: null};
		F.line = 212;
		result_487411 = r_487601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_487411;

}

function new_py_code_simple_487401() {
	var result_487403 = null;

	var F={procname:"codeobject.newPyCodeSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_487624 = new_487406();
		F.line = 561;
		obj_487624.pyType = py_code_object_type_487181;
		F.line = 563;
		give_id_157814(obj_487624);
		result_487403 = obj_487624;
	framePtr = F.prev;

	return result_487403;

}

function new_py_code_default_488021(args_487080) {
	var result_488024 = null;

	var F={procname:"codeobject.newPyCodeDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_488024 = new_py_code_simple_487401();
	framePtr = F.prev;

	return result_488024;

}
var py_code_object_type_487181 = new_py_type_159261(makeNimstrLit("Code"));
py_code_object_type_487181.kind = 11;
py_code_object_type_487181.magicMethods.Field26 = new_py_code_default_488021;

function parse_saturated_natural_38485(s_38487, b_38489, b_38489_Idx, start_38490) {
			var Tmp1;
					var Tmp4;

	var result_38492 = 0;

	var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 301;
		var i_38493 = start_38490;
		if (((i_38493 < (s_38487 != null ? s_38487.length : 0)) && (s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0] == 43))) {
		F.line = 302;
		i_38493 = addInt(i_38493, 1);
		}
		
			if (!(i_38493 < (s_38487 != null ? s_38487.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet17[s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 304;
		b_38489[b_38489_Idx] = 0;
		L2: do {
			F.line = 305;
				L3: while (true) {
					if (!(i_38493 < (s_38487 != null ? s_38487.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet18[s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 306;
					var c_38535 = subInt(s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0], 48);
					if ((b_38489[b_38489_Idx] <= divInt(subInt(2147483647, c_38535), 10))) {
					F.line = 308;
					b_38489[b_38489_Idx] = addInt(mulInt(b_38489[b_38489_Idx], 10), c_38535);
					}
					else {
						F.line = 310;
						b_38489[b_38489_Idx] = 2147483647;
					}
					
					F.line = 311;
					i_38493 = addInt(i_38493, 1);
					L5: do {
						F.line = 312;
							L6: while (true) {
							if (!((i_38493 < (s_38487 != null ? s_38487.length : 0)) && (s_38487[chckIndx(i_38493, 0, s_38487.length+0-1)-0] == 95))) break L6;
								F.line = 312;
								i_38493 = addInt(i_38493, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 313;
		result_38492 = subInt(i_38493, start_38490);
		}
		
	framePtr = F.prev;

	return result_38492;

}

function parse_standard_format_specifier_141928(s_141930, start_141931, ignore_unknown_suffix_141933) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_141934 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

	var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 449;
		result_141934.fill = 32;
		F.line = 450;
		result_141934.align = 0;
		F.line = 451;
		result_141934.sign = 45;
		F.line = 452;
		var i_141937 = start_141931;
		if (((addInt(i_141937, 1) < (s_141930 != null ? s_141930.length : 0)) && (ConstSet13[s_141930[chckIndx(addInt(i_141937, 1), 0, s_141930.length+0-1)-0]] != undefined))) {
		F.line = 454;
		result_141934.fill = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 455;
		result_141934.align = s_141930[chckIndx(addInt(i_141937, 1), 0, s_141930.length+0-1)-0];
		F.line = 456;
		i_141937 = addInt(i_141937, 2);
		}
		else {
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (ConstSet14[s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0]] != undefined))) {
		F.line = 458;
		result_141934.align = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 459;
		i_141937 = addInt(i_141937, 1);
		}
		}
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (ConstSet15[s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0]] != undefined))) {
		F.line = 462;
		result_141934.sign = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 463;
		i_141937 = addInt(i_141937, 1);
		}
		
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0] == 35))) {
		F.line = 466;
		result_141934.alternateForm = true;
		F.line = 467;
		i_141937 = addInt(i_141937, 1);
		}
		
			if (!((addInt(i_141937, 1) < (s_141930 != null ? s_141930.length : 0)) && (s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet16[s_141930[chckIndx(addInt(i_141937, 1), 0, s_141930.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 470;
		result_141934.padWithZero = true;
		F.line = 471;
		i_141937 = addInt(i_141937, 1);
		}
		
		F.line = 473;
		var parsed_length_142022 = parse_saturated_natural_38485(s_141930, result_141934, "minimumWidth", i_141937);
		F.line = 474;
		i_141937 = addInt(i_141937, parsed_length_142022);
		if (((i_141937 < (s_141930 != null ? s_141930.length : 0)) && (s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0] == 46))) {
		F.line = 476;
		i_141937 = addInt(i_141937, 1);
		F.line = 477;
		var parsed_length_b_142042 = parse_saturated_natural_38485(s_141930, result_141934, "precision", i_141937);
		F.line = 478;
		i_141937 = addInt(i_141937, parsed_length_b_142042);
		}
		else {
			F.line = 480;
			result_141934.precision = -1;
		}
		
			if (!(i_141937 < (s_141930 != null ? s_141930.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet19[s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0]] != undefined);			}		if (Tmp2) {
		F.line = 483;
		result_141934.typ = s_141930[chckIndx(i_141937, 0, s_141930.length+0-1)-0];
		F.line = 484;
		i_141937 = addInt(i_141937, 1);
		}
		
		F.line = 485;
		result_141934.endPosition = i_141937;
			if (!!((i_141937 == (s_141930 != null ? s_141930.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_141933);			}		if (Tmp3) {
		F.line = 2895;
		var e_142120 = null;
		F.line = 2896;
		e_142120 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 488;
		e_142120.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ")).concat(HEX5BHEX5D_81105(s_141930, HEX2EHEX2E_81053(i_141937, 1))), NTI138);
		F.line = 2891;
		e_142120.parent = null;
		F.line = 487;
		raiseException(e_142120, "ValueError");
		}
		
	framePtr = F.prev;

	return result_141934;

}

function mk_digit_141621(v_141623, typ_141624) {
			var Tmp1;

	var result_141625 = null;

	var F={procname:"strformat.mkDigit",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		if (!((v_141623 < 26))) {
		F.line = 342;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim(342, 9) `v < 26` "));
		}
		
		if ((v_141623 < 10)) {
		F.line = 344;
		result_141625 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_141623), 0, 255)), NTI138);
		}
		else {
			F.line = 346;
			if ((typ_141624 == 120)) {
			Tmp1 = 97;
			}
			else {
			Tmp1 = 65;
			}
			
			result_141625 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_141623), 10), 0, 255)), NTI138);
		}
		
	framePtr = F.prev;

	return result_141625;

}

function nsuRepeatChar(c_134984, count_134985) {
	var result_134986 = null;

		result_134986 = nimCopy(null, mnewString(count_134985), NTI138);
		L1: do {
			var i_134998 = 0;
			var colontmp__135000 = 0;
			colontmp__135000 = (count_134985 - 1);
			var res_135003 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_135003 <= colontmp__135000)) break L3;
						i_134998 = res_135003;
						result_134986[i_134998] = c_134984;
						res_135003 += 1;
					}
			} while(false);
		} while(false);

	return result_134986;

}

function format_int_158429(n_158433, radix_158435, spec_158437) {
		var Tmp7;

	var result_158438 = null;

	var F={procname:"formatInt.formatInt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 388;
		var v_158601 = n_158433;
		F.line = 389;
		var negative_158602 = (v_158601 < 0);
		if (negative_158602) {
		F.line = 392;
		v_158601 = mulInt(v_158601, -1);
		}
		
		F.line = 394;
		var xx_158604 = [];
		if (spec_158437.alternateForm) {
		F.line = 396;
		switch (spec_158437.typ) {
		case 88:
			F.line = 397;
			xx_158604 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 120:
			F.line = 398;
			xx_158604 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 98:
			F.line = 399;
			xx_158604 = nimCopy(null, makeNimstrLit("0b"), NTI138);
			break;
		case 111:
			F.line = 400;
			xx_158604 = nimCopy(null, makeNimstrLit("0o"), NTI138);
			break;
		default: 
			break;
		}
		}
		
		if ((v_158601 == 0)) {
		F.line = 404;
		result_158438 = nimCopy(null, makeNimstrLit("0"), NTI138);
		}
		else {
			F.line = 406;
			result_158438 = nimCopy(null, [], NTI138);
			L1: do {
				F.line = 407;
					L2: while (true) {
					if (!(0 < v_158601)) break L2;
						F.line = 408;
						var d_158607 = modInt(v_158601, radix_158435);
						F.line = 409;
						v_158601 = divInt(v_158601, radix_158435);
						F.line = 410;
						if (result_158438 != null) { result_158438 = (result_158438).concat(mk_digit_141621(chckRange(d_158607, -2147483648, 2147483647), spec_158437.typ)); } else { result_158438 = mk_digit_141621(chckRange(d_158607, -2147483648, 2147483647), spec_158437.typ).slice(); };
					}
			} while(false);
			L3: do {
				F.line = 411;
				var idx_158618 = 0;
				F.line = 3616;
				var colontmp__158664 = 0;
				F.line = 411;
				colontmp__158664 = divInt((result_158438 != null ? result_158438.length : 0), 2);
				F.line = 3617;
				var i_158667 = 0;
				L4: do {
					F.line = 3618;
						L5: while (true) {
						if (!(i_158667 < colontmp__158664)) break L5;
							F.line = 3619;
							idx_158618 = i_158667;
							F.line = 412;
							var Tmp6 = result_158438[chckIndx(idx_158618, 0, result_158438.length+0-1)-0]; result_158438[chckIndx(idx_158618, 0, result_158438.length+0-1)-0] = result_158438[chckIndx(subInt(subInt((result_158438 != null ? result_158438.length : 0), idx_158618), 1), 0, result_158438.length+0-1)-0]; result_158438[chckIndx(subInt(subInt((result_158438 != null ? result_158438.length : 0), idx_158618), 1), 0, result_158438.length+0-1)-0] = Tmp6;							F.line = 3620;
							i_158667 = addInt(i_158667, 1);
						}
				} while(false);
			} while(false);
		}
		
		if (spec_158437.padWithZero) {
		F.line = 414;
		if (negative_158602) Tmp7 = true; else {			Tmp7 = !((spec_158437.sign == 45));		}		var sign_158637 = Tmp7;
		F.line = 415;
		var to_fill_158644 = subInt(subInt(subInt(spec_158437.minimumWidth, (result_158438 != null ? result_158438.length : 0)), (xx_158604 != null ? xx_158604.length : 0)), (sign_158637 ? 1:0));
		if ((0 < to_fill_158644)) {
		F.line = 417;
		result_158438 = nimCopy(null, (nsuRepeatChar(48, chckRange(to_fill_158644, 0, 2147483647))).concat(result_158438), NTI138);
		}
		
		}
		
		if (negative_158602) {
		F.line = 420;
		result_158438 = nimCopy(null, (makeNimstrLit("-")).concat(xx_158604,result_158438), NTI138);
		}
		else {
		if (!((spec_158437.sign == 45))) {
		F.line = 422;
		result_158438 = nimCopy(null, [spec_158437.sign].concat(xx_158604,result_158438), NTI138);
		}
		else {
			F.line = 424;
			result_158438 = nimCopy(null, (xx_158604).concat(result_158438), NTI138);
		}
		}
		if ((spec_158437.align == 60)) {
		L8: do {
			F.line = 427;
			var i_158655 = 0;
			F.line = 3616;
			var colontmp__158670 = 0;
			F.line = 3616;
			var colontmp__158671 = 0;
			F.line = 427;
			colontmp__158670 = (result_158438 != null ? result_158438.length : 0);
			F.line = 427;
			colontmp__158671 = spec_158437.minimumWidth;
			F.line = 3617;
			var i_158674 = colontmp__158670;
			L9: do {
				F.line = 3618;
					L10: while (true) {
					if (!(i_158674 < colontmp__158671)) break L10;
						F.line = 3619;
						i_158655 = i_158674;
						F.line = 428;
						if (result_158438 != null) { addChar(result_158438, spec_158437.fill); } else { result_158438 = [spec_158437.fill]; };
						F.line = 3620;
						i_158674 = addInt(i_158674, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 430;
			var to_fill_158656 = subInt(spec_158437.minimumWidth, (result_158438 != null ? result_158438.length : 0));
			if ((spec_158437.align == 94)) {
			F.line = 432;
			var half_158657 = divInt(to_fill_158656, 2);
			F.line = 433;
			result_158438 = nimCopy(null, (nsuRepeatChar(spec_158437.fill, chckRange(half_158657, 0, 2147483647))).concat(result_158438,nsuRepeatChar(spec_158437.fill, chckRange(subInt(to_fill_158656, half_158657), 0, 2147483647))), NTI138);
			}
			else {
				if ((0 < to_fill_158656)) {
				F.line = 436;
				result_158438 = nimCopy(null, (nsuRepeatChar(spec_158437.fill, chckRange(to_fill_158656, 0, 2147483647))).concat(result_158438), NTI138);
				}
				
			}
			
		}
		
	framePtr = F.prev;

	return result_158438;

}

function format_158402(value_158406, specifier_158408, res_158410, res_158410_Idx) {
	var F={procname:"format.format",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 495;
		var spec_158411 = parse_standard_format_specifier_141928(specifier_158408, 0, false);
		F.line = 496;
		var radix_158413 = 10;
		F.line = 497;
		switch (spec_158411.typ) {
		case 120:
		case 88:
			F.line = 498;
			radix_158413 = 16;
			break;
		case 100:
		case 0:
			break;
		case 98:
			F.line = 500;
			radix_158413 = 2;
			break;
		case 111:
			F.line = 501;
			radix_158413 = 8;
			break;
		default: 
			F.line = 2895;
			var e_158419 = null;
			F.line = 2896;
			e_158419 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 505;
			e_158419.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ")).concat([spec_158411.typ]), NTI138);
			F.line = 2891;
			e_158419.parent = null;
			F.line = 503;
			raiseException(e_158419, "ValueError");
			break;
		}
		F.line = 506;
		if (res_158410[res_158410_Idx] != null) { res_158410[res_158410_Idx] = (res_158410[res_158410_Idx]).concat(format_int_158429(value_158406, radix_158413, spec_158411)); } else { res_158410[res_158410_Idx] = format_int_158429(value_158406, radix_158413, spec_158411).slice(); };
	framePtr = F.prev;

	
}

function id_str_158001(obj_158003) {
	var result_158004 = null;

	var F={procname:"pyobjectBase.idStr",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 179;
		F.line = 179;
		var fmt_res_158007 = [mnewString(0)];
		F.line = 274;
		format_158402(obj_158003.id, makeNimstrLit("#x"), fmt_res_158007, 0);
		result_158004 = nimCopy(null, fmt_res_158007[0], NTI138);
	framePtr = F.prev;

	return result_158004;

}

function repr_py_code_object_magic_488552(self_no_cast_488554) {
	var result_488555 = null;

	var F={procname:"codeobject.reprPyCodeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_488554.m_type, NTI487125))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyCodeObject` "));
		}
		
		F.line = 438;
		var self_488601 = self_no_cast_488554;
		F.line = 71;
		var code_name_488602 = nimCopy(null, self_488601.codeName.str, NTI138);
		F.line = 72;
		var file_name_488603 = nimCopy(null, self_488601.fileName.str, NTI138);
		F.line = 73;
		F.line = 73;
		var fmt_res_488607 = mnewString(0);
		F.line = 73;
		if (fmt_res_488607 != null) { fmt_res_488607 = (fmt_res_488607).concat(makeNimstrLit("<code object ")); } else { fmt_res_488607 = makeNimstrLit("<code object "); };
		F.line = 260;
		if (fmt_res_488607 != null) { fmt_res_488607 = (fmt_res_488607).concat(code_name_488602); } else { fmt_res_488607 = code_name_488602.slice(); };
		F.line = 73;
		if (fmt_res_488607 != null) { fmt_res_488607 = (fmt_res_488607).concat(makeNimstrLit(" at ")); } else { fmt_res_488607 = makeNimstrLit(" at "); };
		F.line = 260;
		if (fmt_res_488607 != null) { fmt_res_488607 = (fmt_res_488607).concat(id_str_158001(self_488601)); } else { fmt_res_488607 = id_str_158001(self_488601).slice(); };
		F.line = 73;
		if (fmt_res_488607 != null) { fmt_res_488607 = (fmt_res_488607).concat(makeNimstrLit(", file \"")); } else { fmt_res_488607 = makeNimstrLit(", file \""); };
		F.line = 260;
		if (fmt_res_488607 != null) { fmt_res_488607 = (fmt_res_488607).concat(file_name_488603); } else { fmt_res_488607 = file_name_488603.slice(); };
		F.line = 73;
		if (fmt_res_488607 != null) { fmt_res_488607 = (fmt_res_488607).concat(makeNimstrLit("\">")); } else { fmt_res_488607 = makeNimstrLit("\">"); };
		var msg_489201 = nimCopy(null, fmt_res_488607, NTI138);
		result_488555 = new_py_str_176092(msg_489201);
	framePtr = F.prev;

	return result_488555;

}
py_code_object_type_487181.magicMethods.Field25 = repr_py_code_object_magic_488552;
var py_config_504072 = [{filepath: null, filename: null, path: null}];

function new_505406() {
	var result_505411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_505601 = null;
		F.line = 211;
		r_505601 = {m_type: NTI505255, items: null, reprLock: false, readNum: 0, writeLock: false, id: 0, pyType: null};
		F.line = 212;
		result_505411 = r_505601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_505411;

}

function new_py_list_simple_505401() {
	var result_505403 = null;

	var F={procname:"listobject.newPyListSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_505624 = new_505406();
		F.line = 561;
		obj_505624.pyType = py_list_object_type_505269;
		F.line = 563;
		give_id_157814(obj_505624);
		result_505403 = obj_505624;
	framePtr = F.prev;

	return result_505403;

}

function new_py_list_default_506021(args_505210) {
	var result_506024 = null;

	var F={procname:"listobject.newPyListDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_506024 = new_py_list_simple_505401();
	framePtr = F.prev;

	return result_506024;

}
var py_list_object_type_505269 = new_py_type_159261(makeNimstrLit("List"));
py_list_object_type_505269.kind = 9;
py_list_object_type_505269.magicMethods.Field26 = new_py_list_default_506021;

function contains_py_list_object_magic_506293(self_no_cast_506295, other_506296) {
							var Tmp5;

	var result_506297 = null;

	var F={procname:"listobject.containsPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_506295.m_type, NTI505255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_506401 = self_no_cast_506295;
		if (self_506401.writeLock) {
		F.line = 414;
		var msg_506403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_506405 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_506405.tk = 8;
		F.line = 106;
		excp_506405.thrown = true;
		F.line = 107;
		excp_506405.msg = new_py_string_176075(msg_506403);
		result_506297 = excp_506405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_506401.readNum = addInt(self_506401.readNum, 1);
		F.line = 438;
		try {
		L2: do {
			F.line = 26;
			var idx_506462 = 0;
			F.line = 26;
			var item_506463 = null;
			F.line = 2352;
			var colontmp__507025 = null;
			F.line = 26;
			colontmp__507025 = self_506401.items;
			F.line = 2354;
			var i_507028 = 0;
			L3: do {
				F.line = 2355;
					L4: while (true) {
					if (!(i_507028 < (colontmp__507025 != null ? colontmp__507025.length : 0))) break L4;
						F.line = 2356;
						idx_506462 = i_507028;
						F.line = 2356;
						item_506463 = colontmp__507025[chckIndx(i_507028, 0, colontmp__507025.length+0-1)-0];
						F.line = 27;
						F.line = 56;
						if ((item_506463.pyType === null)) {
						F.line = 2895;
						var e_506490 = null;
						F.line = 2896;
						e_506490 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_506490.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_506490.parent = null;
						F.line = 26;
						raiseException(e_506490, "InternalError");
						}
						
						F.line = 27;
						var fun_506602 = item_506463.pyType.magicMethods.Field18;
						if ((fun_506602 === null)) {
						F.line = 29;
						var obj_type_str_506611 = item_506463.pyType.name;
						F.line = 30;
						var method_str_506613 = makeNimstrLit("eq");
						F.line = 31;
						var msg_506615 = (makeNimstrLit("No ")).concat(method_str_506613,makeNimstrLit(" method for "),obj_type_str_506611,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_506617 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_506617.tk = 3;
						F.line = 106;
						excp_506617.thrown = true;
						F.line = 107;
						excp_506617.msg = new_py_string_176075(msg_506615);
						var excp_506620 = excp_506617;
						F.line = 36;
						result_506297 = excp_506620;
						break BeforeRet;
						}
						
						var fun_506802 = fun_506602;
						F.line = 57;
						var res_506804 = fun_506802(item_506463, other_506296);
						var ret_obj_507001 = res_506804;
							if (of_py_exception_object_358259(ret_obj_507001)) {
							Tmp5 = ret_obj_507001.thrown;
							}
							else {
							Tmp5 = false;
							}
							
						if (Tmp5) {
						F.line = 29;
						result_506297 = ret_obj_507001;
						break BeforeRet;
						}
						
						if ((ret_obj_507001 == py_true_obj_354074)) {
						F.line = 31;
						result_506297 = py_true_obj_354074;
						break BeforeRet;
						}
						
						F.line = 2357;
						i_507028 = addInt(i_507028, 1);
					}
			} while(false);
		} while(false);
		F.line = 32;
		result_506297 = py_false_obj_354075;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_506401.readNum = subInt(self_506401.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_506297;

}

function iter_py_list_object_magic_507044(self_no_cast_507046) {
		var Tmp1;

	var result_507047 = null;

	var F={procname:"listobject.iterPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_507046.m_type, NTI505255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_507201 = self_no_cast_507046;
		if (self_507201.writeLock) {
		F.line = 414;
		var msg_507203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_507205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_507205.tk = 8;
		F.line = 106;
		excp_507205.thrown = true;
		F.line = 107;
		excp_507205.msg = new_py_string_176075(msg_507203);
		result_507047 = excp_507205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_507201.readNum = addInt(self_507201.readNum, 1);
		F.line = 438;
		try {
		Tmp1 = new_py_seq_iter_461648(self_507201.items);
		} finally {
		framePtr = F;
		F.line = 417;
		self_507201.readNum = subInt(self_507201.readNum, 1);
		}
		result_507047 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_507047;

}

function repr_py_list_object_magic_507241(self_no_cast_507243) {
	var result_507244 = null;

	var F={procname:"listobject.reprPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_507243.m_type, NTI505255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_507401 = self_no_cast_507243;
		if (self_507401.reprLock) {
		F.line = 379;
		result_507244 = new_py_string_176075(makeNimstrLit("..."));
		break BeforeRet;
		}
		
		F.line = 380;
		self_507401.reprLock = true;
		F.line = 438;
		try {
		if (self_507401.writeLock) {
		F.line = 414;
		var msg_507403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_507405 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_507405.tk = 8;
		F.line = 106;
		excp_507405.thrown = true;
		F.line = 107;
		excp_507405.msg = new_py_string_176075(msg_507403);
		result_507244 = excp_507405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_507401.readNum = addInt(self_507401.readNum, 1);
		F.line = 438;
		try {
		F.line = 40;
		var ss_507417 = null;
		L3: do {
			F.line = 41;
			var item_507426 = null;
			F.line = 3909;
			var colontmp__508227 = null;
			F.line = 41;
			colontmp__508227 = self_507401.items;
			F.line = 3911;
			var i_508230 = 0;
			F.line = 3912;
			var l_508232 = (colontmp__508227 != null ? colontmp__508227.length : 0);
			L4: do {
				F.line = 3913;
					L5: while (true) {
					if (!(i_508230 < l_508232)) break L5;
						F.line = 3914;
						item_507426 = colontmp__508227[chckIndx(i_508230, 0, colontmp__508227.length+0-1)-0];
						F.line = 42;
						var item_repr_507427 = null;
						F.line = 43;
						F.line = 45;
						if ((item_507426.pyType === null)) {
						F.line = 2895;
						var e_507454 = null;
						F.line = 2896;
						e_507454 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_507454.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_507454.parent = null;
						F.line = 26;
						raiseException(e_507454, "InternalError");
						}
						
						F.line = 27;
						var fun_507602 = item_507426.pyType.magicMethods.Field25;
						if ((fun_507602 === null)) {
						F.line = 29;
						var obj_type_str_507611 = item_507426.pyType.name;
						F.line = 30;
						var method_str_507613 = makeNimstrLit("repr");
						F.line = 31;
						var msg_507615 = (makeNimstrLit("No ")).concat(method_str_507613,makeNimstrLit(" method for "),obj_type_str_507611,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_507617 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_507617.tk = 3;
						F.line = 106;
						excp_507617.thrown = true;
						F.line = 107;
						excp_507617.msg = new_py_string_176075(msg_507615);
						var excp_507620 = excp_507617;
						F.line = 36;
						result_507244 = excp_507620;
						break BeforeRet;
						}
						
						var fun_507802 = fun_507602;
						F.line = 46;
						var res_507804 = fun_507802(item_507426);
						var ret_obj_508001 = res_507804;
						if (!(of_py_str_object_175092(ret_obj_508001))) {
						F.line = 157;
						var type_name_508004 = nimCopy(null, ret_obj_508001.pyType.name, NTI138);
						F.line = 158;
						F.line = 158;
						var fmt_res_508007 = mnewString(0);
						F.line = 158;
						if (fmt_res_508007 != null) { fmt_res_508007 = (fmt_res_508007).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_508007 = makeNimstrLit(" returned non-string (type "); };
						F.line = 260;
						if (fmt_res_508007 != null) { fmt_res_508007 = (fmt_res_508007).concat(type_name_508004); } else { fmt_res_508007 = type_name_508004.slice(); };
						F.line = 158;
						if (fmt_res_508007 != null) { fmt_res_508007 = (fmt_res_508007).concat(makeNimstrLit(")")); } else { fmt_res_508007 = makeNimstrLit(")"); };
						var msg_508202 = (makeNimstrLit("__repr__")).concat(fmt_res_508007);
						F.line = 159;
						F.line = 104;
						var excp_508204 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_508204.tk = 3;
						F.line = 106;
						excp_508204.thrown = true;
						F.line = 107;
						excp_508204.msg = new_py_string_176075(msg_508202);
						result_507244 = excp_508204;
						break BeforeRet;
						}
						
						F.line = 45;
						item_repr_507427 = ret_obj_508001;
						F.line = 46;
						var Tmp6 = nimCopy(null, item_repr_507427.str, NTI138);
						if (ss_507417 != null) { ss_507417.push(Tmp6); } else { ss_507417 = [Tmp6]; };
						F.line = 3915;
						i_508230 = addInt(i_508230, 1);
						if (!(((colontmp__508227 != null ? colontmp__508227.length : 0) == l_508232))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 47;
		result_507244 = new_py_string_176075((makeNimstrLit("[")).concat(nsuJoinSep(ss_507417, makeNimstrLit(", ")),makeNimstrLit("]")));
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_507401.readNum = subInt(self_507401.readNum, 1);
		}
		} finally {
		framePtr = F;
		F.line = 383;
		self_507401.reprLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_507244;

}

function len_py_list_object_magic_508248(self_no_cast_508250) {
		var Tmp1;

	var result_508251 = null;

	var F={procname:"listobject.lenPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_508250.m_type, NTI505255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_508401 = self_no_cast_508250;
		if (self_508401.writeLock) {
		F.line = 414;
		var msg_508403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_508405 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_508405.tk = 8;
		F.line = 106;
		excp_508405.thrown = true;
		F.line = 107;
		excp_508405.msg = new_py_string_176075(msg_508403);
		result_508251 = excp_508405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_508401.readNum = addInt(self_508401.readNum, 1);
		F.line = 438;
		try {
		Tmp1 = new_py_int_376142((self_508401.items != null ? self_508401.items.length : 0));
		} finally {
		framePtr = F;
		F.line = 417;
		self_508401.readNum = subInt(self_508401.readNum, 1);
		}
		result_508251 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_508251;

}

function new_py_list_506257() {
	var result_506259 = null;

	var F={procname:"listobject.newPyList",prev:framePtr,filename:"../Objects/listobject.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_506259 = new_py_list_simple_505401();
	framePtr = F.prev;

	return result_506259;

}

function getitem_py_list_object_magic_508448(self_no_cast_508450, other_508451) {
			var Tmp2;
			var Tmp3;

	var result_508452 = null;

	var F={procname:"listobject.getitemPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_508450.m_type, NTI505255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_508601 = self_no_cast_508450;
		if (self_508601.writeLock) {
		F.line = 414;
		var msg_508603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_508605 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_508605.tk = 8;
		F.line = 106;
		excp_508605.thrown = true;
		F.line = 107;
		excp_508605.msg = new_py_string_176075(msg_508603);
		result_508452 = excp_508605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_508601.readNum = addInt(self_508601.readNum, 1);
		F.line = 438;
		try {
		if (of_py_int_object_374117(other_508451)) {
		F.line = 55;
		F.line = 284;
		var idx_508628 = to_int_376091(other_508451);
		if ((idx_508628 < 0)) {
		F.line = 286;
		idx_508628 = addInt((self_508601.items != null ? self_508601.items.length : 0), idx_508628);
		}
		
			if ((idx_508628 < 0)) Tmp2 = true; else {				Tmp2 = ((self_508601.items != null ? self_508601.items.length : 0) <= idx_508628);			}		if (Tmp2) {
		F.line = 288;
		var msg_508630 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_508628)+""),makeNimstrLit(", len: "),cstrToNimstr(((self_508601.items != null ? self_508601.items.length : 0))+""));
		F.line = 289;
		F.line = 104;
		var excp_508632 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_508632.tk = 6;
		F.line = 106;
		excp_508632.thrown = true;
		F.line = 107;
		excp_508632.msg = new_py_string_176075(msg_508630);
		result_508452 = excp_508632;
		break BeforeRet;
		}
		
		var idx_508634 = idx_508628;
		F.line = 56;
		result_508452 = self_508601.items[chckIndx(idx_508634, 0, self_508601.items.length+0-1)-0];
		break BeforeRet;
		}
		
		if (of_py_slice_object_462109(other_508451)) {
		F.line = 58;
		var slice_508635 = other_508451;
		F.line = 59;
		var new_list_508636 = new_py_list_506257();
		F.line = 60;
		var ret_obj_508639 = get_slice_items_463141(slice_508635, self_508601, "items", new_list_508636, "items");
			if (of_py_exception_object_358259(ret_obj_508639)) {
			Tmp3 = ret_obj_508639.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 62;
		result_508452 = ret_obj_508639;
		break BeforeRet;
		}
		else {
			F.line = 64;
			result_508452 = new_list_508636;
			break BeforeRet;
		}
		
		}
		
		F.line = 66;
		F.line = 129;
		var name_508646 = other_508451.pyType.name;
		F.line = 130;
		var msg_508648 = (makeNimstrLit("list indices must be integers or slices, not ")).concat(name_508646);
		F.line = 104;
		var excp_508650 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_508650.tk = 3;
		F.line = 106;
		excp_508650.thrown = true;
		F.line = 107;
		excp_508650.msg = new_py_string_176075(msg_508648);
		result_508452 = excp_508650;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_508601.readNum = subInt(self_508601.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_508452;

}

function setitem_py_list_object_magic_508678(self_no_cast_508680, arg1_508681, arg2_508682) {
			var Tmp1;
			var Tmp3;

	var result_508683 = null;

	var F={procname:"listobject.setitemPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_508680.m_type, NTI505255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_508801 = self_no_cast_508680;
			if ((0 < self_508801.readNum)) Tmp1 = true; else {				Tmp1 = self_508801.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_508805 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_508807 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_508807.tk = 8;
		F.line = 106;
		excp_508807.thrown = true;
		F.line = 107;
		excp_508807.msg = new_py_string_176075(msg_508805);
		result_508683 = excp_508807;
		break BeforeRet;
		}
		
		F.line = 408;
		self_508801.writeLock = true;
		F.line = 438;
		try {
		if (of_py_int_object_374117(arg1_508681)) {
		F.line = 71;
		F.line = 284;
		var idx_508821 = to_int_376091(arg1_508681);
		if ((idx_508821 < 0)) {
		F.line = 286;
		idx_508821 = addInt((self_508801.items != null ? self_508801.items.length : 0), idx_508821);
		}
		
			if ((idx_508821 < 0)) Tmp3 = true; else {				Tmp3 = ((self_508801.items != null ? self_508801.items.length : 0) <= idx_508821);			}		if (Tmp3) {
		F.line = 288;
		var msg_508823 = (makeNimstrLit("index out of range. idx: ")).concat(cstrToNimstr((idx_508821)+""),makeNimstrLit(", len: "),cstrToNimstr(((self_508801.items != null ? self_508801.items.length : 0))+""));
		F.line = 289;
		F.line = 104;
		var excp_508825 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_508825.tk = 6;
		F.line = 106;
		excp_508825.thrown = true;
		F.line = 107;
		excp_508825.msg = new_py_string_176075(msg_508823);
		result_508683 = excp_508825;
		break BeforeRet;
		}
		
		var idx_508827 = idx_508821;
		F.line = 72;
		self_508801.items[chckIndx(idx_508827, 0, self_508801.items.length+0-1)-0] = arg2_508682;
		F.line = 73;
		result_508683 = py_none_356044;
		break BeforeRet;
		}
		
		if (of_py_slice_object_462109(arg1_508681)) {
		F.line = 75;
		F.line = 104;
		var excp_508829 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_508829.tk = 3;
		F.line = 106;
		excp_508829.thrown = true;
		F.line = 107;
		excp_508829.msg = new_py_string_176075(makeNimstrLit("store to slice not implemented"));
		result_508683 = excp_508829;
		break BeforeRet;
		}
		
		F.line = 76;
		F.line = 129;
		var name_508837 = arg1_508681.pyType.name;
		F.line = 130;
		var msg_508839 = (makeNimstrLit("list indices must be integers or slices, not ")).concat(name_508837);
		F.line = 104;
		var excp_508841 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_508841.tk = 3;
		F.line = 106;
		excp_508841.thrown = true;
		F.line = 107;
		excp_508841.msg = new_py_string_176075(msg_508839);
		result_508683 = excp_508841;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 410;
		self_508801.writeLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_508683;

}

function raw_get_160346(t_160351, key_160353, hc_160355, hc_160355_Idx) {
						var Tmp3;

	var result_160356 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_160355[hc_160355_Idx] = hash_143900(key_160353);
		if ((hc_160355[hc_160355_Idx] == 0)) {
		F.line = 45;
		hc_160355[hc_160355_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_160368 = (hc_160355[hc_160355_Idx] & (t_160351.data != null ? (t_160351.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_160351.data[chckIndx(h_160368, 0, t_160351.data.length+0-1)-0].Field0)) break L2;
						if (!(t_160351.data[chckIndx(h_160368, 0, t_160351.data.length+0-1)-0].Field0 == hc_160355[hc_160355_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_160351.data[chckIndx(h_160368, 0, t_160351.data.length+0-1)-0].Field1, key_160353);						}					if (Tmp3) {
					F.line = 38;
					result_160356 = h_160368;
					break BeforeRet;
					}
					
					F.line = 39;
					h_160368 = next_try_146614(h_160368, (t_160351.data != null ? (t_160351.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_160356 = subInt(-1, h_160368);
	} while (false);
	framePtr = F.prev;

	return result_160356;

}

function has_key_160333(t_160339, key_160341) {
	var result_160342 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_160343 = [0];
		F.line = 264;
		result_160342 = (0 <= raw_get_160346(t_160339, key_160341, hc_160343, 0));
	framePtr = F.prev;

	return result_160342;

}

function raw_insert_163490(t_163497, data_163501, data_163501_Idx, key_163503, val_163505, hc_163507, h_163509) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_163501[data_163501_Idx][chckIndx(h_163509, 0, data_163501[data_163501_Idx].length+0-1)-0].Field1 = nimCopy(null, key_163503, NTI138);
		F.line = 65;
		data_163501[data_163501_Idx][chckIndx(h_163509, 0, data_163501[data_163501_Idx].length+0-1)-0].Field2 = val_163505;
		F.line = 66;
		data_163501[data_163501_Idx][chckIndx(h_163509, 0, data_163501[data_163501_Idx].length+0-1)-0].Field0 = hc_163507;
	framePtr = F.prev;

	
}

function enlarge_162246(t_162253) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_162261 = null;
		F.line = 314;
		n_162261 = new Array(chckRange(mulInt((t_162253.data != null ? t_162253.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_162253.data != null ? t_162253.data.length : 0), 2), 0, 2147483647);++i) {n_162261[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_162253.data; t_162253.data = n_162261; n_162261 = Tmp1;		L2: do {
			F.line = 316;
			var i_162516 = 0;
			F.line = 2088;
			var colontmp__164231 = 0;
			F.line = 316;
			colontmp__164231 = (n_162261 != null ? (n_162261.length-1) : -1);
			F.line = 2094;
			var res_164234 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_164234 <= colontmp__164231)) break L4;
						F.line = 2096;
						i_162516 = res_164234;
						F.line = 317;
						var eh_162752 = n_162261[chckIndx(i_162516, 0, n_162261.length+0-1)-0].Field0;
						if (is_filled_146491(eh_162752)) {
						F.line = 319;
						var j_162761 = (eh_162752 & (t_162253.data != null ? (t_162253.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_162253.data[chckIndx(j_162761, 0, t_162253.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_162761 = next_try_146614(j_162761, (t_162253.data != null ? (t_162253.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_163490(t_162253, t_162253, "data", n_162261[chckIndx(i_162516, 0, n_162261.length+0-1)-0].Field1, n_162261[chckIndx(i_162516, 0, n_162261.length+0-1)-0].Field2, eh_162752, j_162761);
						}
						
						F.line = 2097;
						res_164234 = addInt(res_164234, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_164253(t_164258, key_164260, hc_164262) {
	var result_164263 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_164272 = (hc_164262 & (t_164258.data != null ? (t_164258.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_164258.data[chckIndx(h_164272, 0, t_164258.data.length+0-1)-0].Field0)) break L2;
					if (((t_164258.data[chckIndx(h_164272, 0, t_164258.data.length+0-1)-0].Field0 == hc_164262) && eqStrings(t_164258.data[chckIndx(h_164272, 0, t_164258.data.length+0-1)-0].Field1, key_164260))) {
					F.line = 38;
					result_164263 = h_164272;
					break BeforeRet;
					}
					
					F.line = 39;
					h_164272 = next_try_146614(h_164272, (t_164258.data != null ? (t_164258.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_164263 = subInt(-1, h_164272);
	} while (false);
	framePtr = F.prev;

	return result_164263;

}

function HEX5BHEX5DHEX3D_161747(t_161754, key_161756, val_161758) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_161759 = [0];
		F.line = 98;
		var index_161772 = raw_get_160346(t_161754, key_161756, hc_161759, 0);
		if ((0 <= index_161772)) {
		F.line = 99;
		t_161754.data[chckIndx(index_161772, 0, t_161754.data.length+0-1)-0].Field2 = val_161758;
		}
		else {
			if (must_rehash_146509((t_161754.data != null ? t_161754.data.length : 0), t_161754.counter)) {
			F.line = 90;
			enlarge_162246(t_161754);
			F.line = 91;
			index_161772 = raw_get_known_hc_164253(t_161754, key_161756, hc_161759[0]);
			}
			
			F.line = 92;
			index_161772 = subInt(-1, index_161772);
			F.line = 93;
			raw_insert_163490(t_161754, t_161754, "data", key_161756, val_161758, hc_161759[0], index_161772);
			F.line = 100;
			t_161754.counter = addInt(t_161754.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function register_bltin_method_160182(t_160184, name_160185, fun_160186) {
	var F={procname:"pyobject.registerBltinMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		if (has_key_160333(t_160184.bltinMethods, name_160185)) {
		F.line = 2895;
		var e_161406 = null;
		F.line = 2896;
		e_161406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 92;
		F.line = 92;
		var fmt_res_161416 = mnewString(0);
		F.line = 92;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(makeNimstrLit("Method ")); } else { fmt_res_161416 = makeNimstrLit("Method "); };
		F.line = 260;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(name_160185); } else { fmt_res_161416 = name_160185.slice(); };
		F.line = 92;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(makeNimstrLit(" is registered twice for type ")); } else { fmt_res_161416 = makeNimstrLit(" is registered twice for type "); };
		F.line = 260;
		if (fmt_res_161416 != null) { fmt_res_161416 = (fmt_res_161416).concat(t_160184.name); } else { fmt_res_161416 = t_160184.name.slice(); };
		e_161406.message = nimCopy(null, fmt_res_161416, NTI138);
		F.line = 2891;
		e_161406.parent = null;
		F.line = 92;
		raiseException(e_161406, "InternalError");
		}
		
		F.line = 93;
		HEX5BHEX5DHEX3D_161747(t_160184.bltinMethods, name_160185, fun_160186);
	framePtr = F.prev;

	
}

function append_py_list_object_method_508859(self_no_cast_508861, args_508875) {
			var Tmp1;
		var Tmp2;

	var result_508876 = null;

	var F={procname:"listobject.appendPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_508875 != null ? args_508875.length : 0) == 1))) {
		F.line = 183;
		var msg_508888 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_508893 = mnewString(0);
		F.line = 185;
		if (fmt_res_508893 != null) { fmt_res_508893 = (fmt_res_508893).concat(makeNimstrLit(" argument (")); } else { fmt_res_508893 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_508893 != null) { fmt_res_508893 = (fmt_res_508893).concat(cstrToNimstr(((args_508875 != null ? args_508875.length : 0))+"")); } else { fmt_res_508893 = cstrToNimstr(((args_508875 != null ? args_508875.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_508893 != null) { fmt_res_508893 = (fmt_res_508893).concat(makeNimstrLit(" given)")); } else { fmt_res_508893 = makeNimstrLit(" given)"); };
		msg_508888 = nimCopy(null, (makeNimstrLit("append takes exactly 1")).concat(fmt_res_508893), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_509010 = mnewString(0);
			F.line = 187;
			if (fmt_res_509010 != null) { fmt_res_509010 = (fmt_res_509010).concat(makeNimstrLit(" argument (")); } else { fmt_res_509010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_509010 != null) { fmt_res_509010 = (fmt_res_509010).concat(cstrToNimstr(((args_508875 != null ? args_508875.length : 0))+"")); } else { fmt_res_509010 = cstrToNimstr(((args_508875 != null ? args_508875.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_509010 != null) { fmt_res_509010 = (fmt_res_509010).concat(makeNimstrLit(" given)")); } else { fmt_res_509010 = makeNimstrLit(" given)"); };
			msg_508888 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_509010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_509209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_509209.tk = 3;
		F.line = 106;
		excp_509209.thrown = true;
		F.line = 107;
		excp_509209.msg = new_py_string_176075(msg_508888);
		result_508876 = excp_509209;
		break BeforeRet;
		}
		
		F.line = 230;
		var item_509211 = args_508875[chckIndx(0, 0, args_508875.length+0-1)-0];
		if (!(isObj(self_no_cast_508861.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_509401 = self_no_cast_508861;
			if ((0 < self_509401.readNum)) Tmp1 = true; else {				Tmp1 = self_509401.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_509405 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_509407 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_509407.tk = 8;
		F.line = 106;
		excp_509407.thrown = true;
		F.line = 107;
		excp_509407.msg = new_py_string_176075(msg_509405);
		result_508876 = excp_509407;
		break BeforeRet;
		}
		
		F.line = 408;
		self_509401.writeLock = true;
		F.line = 444;
		try {
		F.line = 80;
		if (self_509401.items != null) { self_509401.items.push(item_509211); } else { self_509401.items = [item_509211]; };
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_509401.writeLock = false;
		}
		result_508876 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_508876;

}

function clear_py_list_object_method_509435(self_no_cast_509437, args_509451) {
			var Tmp1;
		var Tmp2;

	var result_509452 = null;

	var F={procname:"listobject.clearPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_509451 != null ? args_509451.length : 0) == 0))) {
		F.line = 183;
		var msg_509464 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_509469 = mnewString(0);
		F.line = 185;
		if (fmt_res_509469 != null) { fmt_res_509469 = (fmt_res_509469).concat(makeNimstrLit(" argument (")); } else { fmt_res_509469 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_509469 != null) { fmt_res_509469 = (fmt_res_509469).concat(cstrToNimstr(((args_509451 != null ? args_509451.length : 0))+"")); } else { fmt_res_509469 = cstrToNimstr(((args_509451 != null ? args_509451.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_509469 != null) { fmt_res_509469 = (fmt_res_509469).concat(makeNimstrLit(" given)")); } else { fmt_res_509469 = makeNimstrLit(" given)"); };
		msg_509464 = nimCopy(null, (makeNimstrLit("clear takes exactly 0")).concat(fmt_res_509469), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_509610 = mnewString(0);
			F.line = 187;
			if (fmt_res_509610 != null) { fmt_res_509610 = (fmt_res_509610).concat(makeNimstrLit(" argument (")); } else { fmt_res_509610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_509610 != null) { fmt_res_509610 = (fmt_res_509610).concat(cstrToNimstr(((args_509451 != null ? args_509451.length : 0))+"")); } else { fmt_res_509610 = cstrToNimstr(((args_509451 != null ? args_509451.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_509610 != null) { fmt_res_509610 = (fmt_res_509610).concat(makeNimstrLit(" given)")); } else { fmt_res_509610 = makeNimstrLit(" given)"); };
			msg_509464 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_509610), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_509809 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_509809.tk = 3;
		F.line = 106;
		excp_509809.thrown = true;
		F.line = 107;
		excp_509809.msg = new_py_string_176075(msg_509464);
		result_509452 = excp_509809;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_509437.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_510001 = self_no_cast_509437;
			if ((0 < self_510001.readNum)) Tmp1 = true; else {				Tmp1 = self_510001.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_510005 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_510007 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_510007.tk = 8;
		F.line = 106;
		excp_510007.thrown = true;
		F.line = 107;
		excp_510007.msg = new_py_string_176075(msg_510005);
		result_509452 = excp_510007;
		break BeforeRet;
		}
		
		F.line = 408;
		self_510001.writeLock = true;
		F.line = 444;
		try {
		F.line = 85;
		if (self_510001.items.length < 0) { for (var i=self_510001.items.length;i<0;++i) self_510001.items.push(null); }
               else { self_510001.items.length = 0; };
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_510001.writeLock = false;
		}
		result_509452 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_509452;

}

function copy_py_list_object_method_510035(self_no_cast_510037, args_510051) {
		var Tmp1;

	var result_510052 = null;

	var F={procname:"listobject.copyPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_510051 != null ? args_510051.length : 0) == 0))) {
		F.line = 183;
		var msg_510064 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_510069 = mnewString(0);
		F.line = 185;
		if (fmt_res_510069 != null) { fmt_res_510069 = (fmt_res_510069).concat(makeNimstrLit(" argument (")); } else { fmt_res_510069 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_510069 != null) { fmt_res_510069 = (fmt_res_510069).concat(cstrToNimstr(((args_510051 != null ? args_510051.length : 0))+"")); } else { fmt_res_510069 = cstrToNimstr(((args_510051 != null ? args_510051.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_510069 != null) { fmt_res_510069 = (fmt_res_510069).concat(makeNimstrLit(" given)")); } else { fmt_res_510069 = makeNimstrLit(" given)"); };
		msg_510064 = nimCopy(null, (makeNimstrLit("copy takes exactly 0")).concat(fmt_res_510069), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_510210 = mnewString(0);
			F.line = 187;
			if (fmt_res_510210 != null) { fmt_res_510210 = (fmt_res_510210).concat(makeNimstrLit(" argument (")); } else { fmt_res_510210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_510210 != null) { fmt_res_510210 = (fmt_res_510210).concat(cstrToNimstr(((args_510051 != null ? args_510051.length : 0))+"")); } else { fmt_res_510210 = cstrToNimstr(((args_510051 != null ? args_510051.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_510210 != null) { fmt_res_510210 = (fmt_res_510210).concat(makeNimstrLit(" given)")); } else { fmt_res_510210 = makeNimstrLit(" given)"); };
			msg_510064 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_510210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_510409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_510409.tk = 3;
		F.line = 106;
		excp_510409.thrown = true;
		F.line = 107;
		excp_510409.msg = new_py_string_176075(msg_510064);
		result_510052 = excp_510409;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_510037.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_510601 = self_no_cast_510037;
		if (self_510601.writeLock) {
		F.line = 414;
		var msg_510603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_510605 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_510605.tk = 8;
		F.line = 106;
		excp_510605.thrown = true;
		F.line = 107;
		excp_510605.msg = new_py_string_176075(msg_510603);
		result_510052 = excp_510605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_510601.readNum = addInt(self_510601.readNum, 1);
		F.line = 444;
		try {
		F.line = 90;
		var new_l_510616 = new_py_list_506257();
		F.line = 91;
		new_l_510616.items = nimCopy(null, self_510601.items, NTI505256);
		Tmp1 = new_l_510616;
		} finally {
		framePtr = F;
		F.line = 417;
		self_510601.readNum = subInt(self_510601.readNum, 1);
		}
		result_510052 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_510052;

}

function count_py_list_object_method_510642(self_no_cast_510644, args_510658) {
		var Tmp1;
							var Tmp6;

	var result_510659 = null;

	var F={procname:"listobject.countPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_510658 != null ? args_510658.length : 0) == 1))) {
		F.line = 183;
		var msg_510671 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_510676 = mnewString(0);
		F.line = 185;
		if (fmt_res_510676 != null) { fmt_res_510676 = (fmt_res_510676).concat(makeNimstrLit(" argument (")); } else { fmt_res_510676 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_510676 != null) { fmt_res_510676 = (fmt_res_510676).concat(cstrToNimstr(((args_510658 != null ? args_510658.length : 0))+"")); } else { fmt_res_510676 = cstrToNimstr(((args_510658 != null ? args_510658.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_510676 != null) { fmt_res_510676 = (fmt_res_510676).concat(makeNimstrLit(" given)")); } else { fmt_res_510676 = makeNimstrLit(" given)"); };
		msg_510671 = nimCopy(null, (makeNimstrLit("count takes exactly 1")).concat(fmt_res_510676), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_510810 = mnewString(0);
			F.line = 187;
			if (fmt_res_510810 != null) { fmt_res_510810 = (fmt_res_510810).concat(makeNimstrLit(" argument (")); } else { fmt_res_510810 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_510810 != null) { fmt_res_510810 = (fmt_res_510810).concat(cstrToNimstr(((args_510658 != null ? args_510658.length : 0))+"")); } else { fmt_res_510810 = cstrToNimstr(((args_510658 != null ? args_510658.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_510810 != null) { fmt_res_510810 = (fmt_res_510810).concat(makeNimstrLit(" given)")); } else { fmt_res_510810 = makeNimstrLit(" given)"); };
			msg_510671 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_510810), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_511009 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_511009.tk = 3;
		F.line = 106;
		excp_511009.thrown = true;
		F.line = 107;
		excp_511009.msg = new_py_string_176075(msg_510671);
		result_510659 = excp_511009;
		break BeforeRet;
		}
		
		F.line = 230;
		var target_511011 = args_510658[chckIndx(0, 0, args_510658.length+0-1)-0];
		if (!(isObj(self_no_cast_510644.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_511201 = self_no_cast_510644;
		if (self_511201.writeLock) {
		F.line = 414;
		var msg_511203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_511205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_511205.tk = 8;
		F.line = 106;
		excp_511205.thrown = true;
		F.line = 107;
		excp_511205.msg = new_py_string_176075(msg_511203);
		result_510659 = excp_511205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_511201.readNum = addInt(self_511201.readNum, 1);
		F.line = 444;
		try {
		F.line = 96;
		var count_511216 = 0;
		L3: do {
			F.line = 97;
			var item_511225 = null;
			F.line = 3909;
			var colontmp__511834 = null;
			F.line = 97;
			colontmp__511834 = self_511201.items;
			F.line = 3911;
			var i_511837 = 0;
			F.line = 3912;
			var l_511839 = (colontmp__511834 != null ? colontmp__511834.length : 0);
			L4: do {
				F.line = 3913;
					L5: while (true) {
					if (!(i_511837 < l_511839)) break L5;
						F.line = 3914;
						item_511225 = colontmp__511834[chckIndx(i_511837, 0, colontmp__511834.length+0-1)-0];
						F.line = 98;
						F.line = 56;
						if ((item_511225.pyType === null)) {
						F.line = 2895;
						var e_511252 = null;
						F.line = 2896;
						e_511252 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_511252.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_511252.parent = null;
						F.line = 26;
						raiseException(e_511252, "InternalError");
						}
						
						F.line = 27;
						var fun_511402 = item_511225.pyType.magicMethods.Field18;
						if ((fun_511402 === null)) {
						F.line = 29;
						var obj_type_str_511411 = item_511225.pyType.name;
						F.line = 30;
						var method_str_511413 = makeNimstrLit("eq");
						F.line = 31;
						var msg_511415 = (makeNimstrLit("No ")).concat(method_str_511413,makeNimstrLit(" method for "),obj_type_str_511411,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_511417 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_511417.tk = 3;
						F.line = 106;
						excp_511417.thrown = true;
						F.line = 107;
						excp_511417.msg = new_py_string_176075(msg_511415);
						var excp_511420 = excp_511417;
						F.line = 36;
						result_510659 = excp_511420;
						break BeforeRet;
						}
						
						var fun_511602 = fun_511402;
						F.line = 57;
						var res_511604 = fun_511602(item_511225, target_511011);
						var ret_obj_511801 = res_511604;
							if (of_py_exception_object_358259(ret_obj_511801)) {
							Tmp6 = ret_obj_511801.thrown;
							}
							else {
							Tmp6 = false;
							}
							
						if (Tmp6) {
						F.line = 100;
						result_510659 = ret_obj_511801;
						break BeforeRet;
						}
						
						if ((ret_obj_511801 == py_true_obj_354074)) {
						F.line = 102;
						count_511216 = addInt(count_511216, 1);
						}
						
						F.line = 3915;
						i_511837 = addInt(i_511837, 1);
						if (!(((colontmp__511834 != null ? colontmp__511834.length : 0) == l_511839))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		Tmp1 = new_py_int_376142(count_511216);
		} finally {
		framePtr = F;
		F.line = 417;
		self_511201.readNum = subInt(self_511201.readNum, 1);
		}
		result_510659 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_510659;

}

function doclear_py_list_object_method_511855(self_no_cast_511857, args_511871) {
		var Tmp1;

	var result_511872 = null;

	var F={procname:"listobject.doclearPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_511871 != null ? args_511871.length : 0) == 0))) {
		F.line = 183;
		var msg_511884 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_511889 = mnewString(0);
		F.line = 185;
		if (fmt_res_511889 != null) { fmt_res_511889 = (fmt_res_511889).concat(makeNimstrLit(" argument (")); } else { fmt_res_511889 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_511889 != null) { fmt_res_511889 = (fmt_res_511889).concat(cstrToNimstr(((args_511871 != null ? args_511871.length : 0))+"")); } else { fmt_res_511889 = cstrToNimstr(((args_511871 != null ? args_511871.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_511889 != null) { fmt_res_511889 = (fmt_res_511889).concat(makeNimstrLit(" given)")); } else { fmt_res_511889 = makeNimstrLit(" given)"); };
		msg_511884 = nimCopy(null, (makeNimstrLit("doClear takes exactly 0")).concat(fmt_res_511889), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_512010 = mnewString(0);
			F.line = 187;
			if (fmt_res_512010 != null) { fmt_res_512010 = (fmt_res_512010).concat(makeNimstrLit(" argument (")); } else { fmt_res_512010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_512010 != null) { fmt_res_512010 = (fmt_res_512010).concat(cstrToNimstr(((args_511871 != null ? args_511871.length : 0))+"")); } else { fmt_res_512010 = cstrToNimstr(((args_511871 != null ? args_511871.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_512010 != null) { fmt_res_512010 = (fmt_res_512010).concat(makeNimstrLit(" given)")); } else { fmt_res_512010 = makeNimstrLit(" given)"); };
			msg_511884 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_512010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_512209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_512209.tk = 3;
		F.line = 106;
		excp_512209.thrown = true;
		F.line = 107;
		excp_512209.msg = new_py_string_176075(msg_511884);
		result_511872 = excp_512209;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_511857.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_512401 = self_no_cast_511857;
		if (self_512401.writeLock) {
		F.line = 414;
		var msg_512403 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_512405 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_512405.tk = 8;
		F.line = 106;
		excp_512405.thrown = true;
		F.line = 107;
		excp_512405.msg = new_py_string_176075(msg_512403);
		result_511872 = excp_512405;
		break BeforeRet;
		}
		
		F.line = 412;
		self_512401.readNum = addInt(self_512401.readNum, 1);
		F.line = 444;
		try {
		Tmp1 = clear_py_list_object_method_509435(self_512401, []);
		} finally {
		framePtr = F;
		F.line = 417;
		self_512401.readNum = subInt(self_512401.readNum, 1);
		}
		result_511872 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_511872;

}

function doread_py_list_object_method_512441(self_no_cast_512443, args_512457) {
			var Tmp1;

	var result_512458 = null;

	var F={procname:"listobject.doreadPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(((args_512457 != null ? args_512457.length : 0) == 0))) {
		F.line = 183;
		var msg_512470 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_512475 = mnewString(0);
		F.line = 185;
		if (fmt_res_512475 != null) { fmt_res_512475 = (fmt_res_512475).concat(makeNimstrLit(" argument (")); } else { fmt_res_512475 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_512475 != null) { fmt_res_512475 = (fmt_res_512475).concat(cstrToNimstr(((args_512457 != null ? args_512457.length : 0))+"")); } else { fmt_res_512475 = cstrToNimstr(((args_512457 != null ? args_512457.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_512475 != null) { fmt_res_512475 = (fmt_res_512475).concat(makeNimstrLit(" given)")); } else { fmt_res_512475 = makeNimstrLit(" given)"); };
		msg_512470 = nimCopy(null, (makeNimstrLit("doRead takes exactly 0")).concat(fmt_res_512475), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_512610 = mnewString(0);
			F.line = 187;
			if (fmt_res_512610 != null) { fmt_res_512610 = (fmt_res_512610).concat(makeNimstrLit(" argument (")); } else { fmt_res_512610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_512610 != null) { fmt_res_512610 = (fmt_res_512610).concat(cstrToNimstr(((args_512457 != null ? args_512457.length : 0))+"")); } else { fmt_res_512610 = cstrToNimstr(((args_512457 != null ? args_512457.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_512610 != null) { fmt_res_512610 = (fmt_res_512610).concat(makeNimstrLit(" given)")); } else { fmt_res_512610 = makeNimstrLit(" given)"); };
			msg_512470 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_512610), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_512809 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_512809.tk = 3;
		F.line = 106;
		excp_512809.thrown = true;
		F.line = 107;
		excp_512809.msg = new_py_string_176075(msg_512470);
		result_512458 = excp_512809;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_512443.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_513001 = self_no_cast_512443;
			if ((0 < self_513001.readNum)) Tmp1 = true; else {				Tmp1 = self_513001.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_513005 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_513007 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_513007.tk = 8;
		F.line = 106;
		excp_513007.thrown = true;
		F.line = 107;
		excp_513007.msg = new_py_string_176075(msg_513005);
		result_512458 = excp_513007;
		break BeforeRet;
		}
		
		F.line = 408;
		self_513001.writeLock = true;
		F.line = 444;
		try {
		F.line = 114;
		result_512458 = doclear_py_list_object_method_511855(self_513001, []);
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 410;
		self_513001.writeLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_512458;

}

function aint_py_list_object_method_513027(self_no_cast_513029, args_513043) {
		var Tmp1;

	var result_513044 = null;

	var F={procname:"listobject.aintPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_513043 != null ? args_513043.length : 0) == 1))) {
		F.line = 183;
		var msg_513056 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_513061 = mnewString(0);
		F.line = 185;
		if (fmt_res_513061 != null) { fmt_res_513061 = (fmt_res_513061).concat(makeNimstrLit(" argument (")); } else { fmt_res_513061 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_513061 != null) { fmt_res_513061 = (fmt_res_513061).concat(cstrToNimstr(((args_513043 != null ? args_513043.length : 0))+"")); } else { fmt_res_513061 = cstrToNimstr(((args_513043 != null ? args_513043.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_513061 != null) { fmt_res_513061 = (fmt_res_513061).concat(makeNimstrLit(" given)")); } else { fmt_res_513061 = makeNimstrLit(" given)"); };
		msg_513056 = nimCopy(null, (makeNimstrLit("aInt takes exactly 1")).concat(fmt_res_513061), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_513210 = mnewString(0);
			F.line = 187;
			if (fmt_res_513210 != null) { fmt_res_513210 = (fmt_res_513210).concat(makeNimstrLit(" argument (")); } else { fmt_res_513210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_513210 != null) { fmt_res_513210 = (fmt_res_513210).concat(cstrToNimstr(((args_513043 != null ? args_513043.length : 0))+"")); } else { fmt_res_513210 = cstrToNimstr(((args_513043 != null ? args_513043.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_513210 != null) { fmt_res_513210 = (fmt_res_513210).concat(makeNimstrLit(" given)")); } else { fmt_res_513210 = makeNimstrLit(" given)"); };
			msg_513056 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_513210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_513409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_513409.tk = 3;
		F.line = 106;
		excp_513409.thrown = true;
		F.line = 107;
		excp_513409.msg = new_py_string_176075(msg_513056);
		result_513044 = excp_513409;
		break BeforeRet;
		}
		
		if (!(isObj(args_513043[chckIndx(0, 0, args_513043.length+0-1)-0].m_type, NTI374109))) {
		F.line = 185;
		var expected_513422 = nimCopy(null, py_int_object_type_374115.name, NTI138);
		F.line = 186;
		var got_513423 = nimCopy(null, args_513043[chckIndx(0, 0, args_513043.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_513424 = makeNimstrLit("aInt");
		F.line = 188;
		F.line = 188;
		var fmt_res_513428 = mnewString(0);
		F.line = 260;
		if (fmt_res_513428 != null) { fmt_res_513428 = (fmt_res_513428).concat(expected_513422); } else { fmt_res_513428 = expected_513422.slice(); };
		F.line = 188;
		if (fmt_res_513428 != null) { fmt_res_513428 = (fmt_res_513428).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_513428 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_513428 != null) { fmt_res_513428 = (fmt_res_513428).concat(m_name_513424); } else { fmt_res_513428 = m_name_513424.slice(); };
		F.line = 188;
		if (fmt_res_513428 != null) { fmt_res_513428 = (fmt_res_513428).concat(makeNimstrLit(" (got ")); } else { fmt_res_513428 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_513428 != null) { fmt_res_513428 = (fmt_res_513428).concat(got_513423); } else { fmt_res_513428 = got_513423.slice(); };
		F.line = 188;
		if (fmt_res_513428 != null) { fmt_res_513428 = (fmt_res_513428).concat(makeNimstrLit(")")); } else { fmt_res_513428 = makeNimstrLit(")"); };
		var msg_514002 = nimCopy(null, fmt_res_513428, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_514004 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_514004.tk = 3;
		F.line = 106;
		excp_514004.thrown = true;
		F.line = 107;
		excp_514004.msg = new_py_string_176075(msg_514002);
		result_513044 = excp_514004;
		break BeforeRet;
		}
		
		F.line = 237;
		var i_514006 = args_513043[chckIndx(0, 0, args_513043.length+0-1)-0];
		if (!(isObj(self_no_cast_513029.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_514201 = self_no_cast_513029;
		if (self_514201.writeLock) {
		F.line = 414;
		var msg_514203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_514205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_514205.tk = 8;
		F.line = 106;
		excp_514205.thrown = true;
		F.line = 107;
		excp_514205.msg = new_py_string_176075(msg_514203);
		result_513044 = excp_514205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_514201.readNum = addInt(self_514201.readNum, 1);
		F.line = 444;
		try {
		F.line = 119;
		if (self_514201.items != null) { self_514201.items.push(i_514006); } else { self_514201.items = [i_514006]; };
		Tmp1 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 417;
		self_514201.readNum = subInt(self_514201.readNum, 1);
		}
		result_513044 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_513044;

}

function hello_py_list_object_method_514273(self_no_cast_514275, args_514289) {
	var result_514290 = null;

	var F={procname:"listobject.helloPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_514289 != null ? args_514289.length : 0) == 0))) {
		F.line = 183;
		var msg_514302 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_514307 = mnewString(0);
		F.line = 185;
		if (fmt_res_514307 != null) { fmt_res_514307 = (fmt_res_514307).concat(makeNimstrLit(" argument (")); } else { fmt_res_514307 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_514307 != null) { fmt_res_514307 = (fmt_res_514307).concat(cstrToNimstr(((args_514289 != null ? args_514289.length : 0))+"")); } else { fmt_res_514307 = cstrToNimstr(((args_514289 != null ? args_514289.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_514307 != null) { fmt_res_514307 = (fmt_res_514307).concat(makeNimstrLit(" given)")); } else { fmt_res_514307 = makeNimstrLit(" given)"); };
		msg_514302 = nimCopy(null, (makeNimstrLit("hello takes exactly 0")).concat(fmt_res_514307), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_514410 = mnewString(0);
			F.line = 187;
			if (fmt_res_514410 != null) { fmt_res_514410 = (fmt_res_514410).concat(makeNimstrLit(" argument (")); } else { fmt_res_514410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_514410 != null) { fmt_res_514410 = (fmt_res_514410).concat(cstrToNimstr(((args_514289 != null ? args_514289.length : 0))+"")); } else { fmt_res_514410 = cstrToNimstr(((args_514289 != null ? args_514289.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_514410 != null) { fmt_res_514410 = (fmt_res_514410).concat(makeNimstrLit(" given)")); } else { fmt_res_514410 = makeNimstrLit(" given)"); };
			msg_514302 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_514410), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_514609 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_514609.tk = 3;
		F.line = 106;
		excp_514609.thrown = true;
		F.line = 107;
		excp_514609.msg = new_py_string_176075(msg_514302);
		result_514290 = excp_514609;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_514275.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_514801 = self_no_cast_514275;
		F.line = 14;
		rawEcho(makeNimstrLit("hello"));
		L1: do {
			F.line = 15;
			var line_514808 = null;
			F.line = 455;
			var last_514814 = 0;
			F.line = 456;
			var splits_514816 = -1;
			L2: do {
				F.line = 614;
					L3: while (true) {
					if (!(last_514814 <= 5)) break L3;
						F.line = 459;
						var first_514818 = last_514814;
						L4: do {
							F.line = 460;
								L5: while (true) {
								if (!((last_514814 < 5) && !(substr_eq_132789(makeNimstrLit("hello"), last_514814, makeNimstrLit("\x0A"))))) break L5;
									F.line = 461;
									last_514814 = addInt(last_514814, 1);
								}
						} while(false);
						if ((splits_514816 == 0)) {
						F.line = 462;
						last_514814 = 5;
						}
						
						F.line = 463;
						line_514808 = substr_23422(makeNimstrLit("hello"), first_514818, subInt(last_514814, 1));
						F.line = 16;
						log(" ", toJSStr(line_514808));
						if ((splits_514816 == 0)) {
						F.line = 464;
						break L2;
						}
						
						F.line = 465;
						splits_514816 = subInt(splits_514816, 1);
						F.line = 466;
						last_514814 = addInt(last_514814, 1);
					}
			} while(false);
		} while(false);
		result_514290 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_514290;

}

function index_py_list_object_method_515003(self_no_cast_515005, args_515019) {
		var Tmp1;
							var Tmp6;

	var result_515020 = null;

	var F={procname:"listobject.indexPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_515019 != null ? args_515019.length : 0) == 1))) {
		F.line = 183;
		var msg_515032 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_515037 = mnewString(0);
		F.line = 185;
		if (fmt_res_515037 != null) { fmt_res_515037 = (fmt_res_515037).concat(makeNimstrLit(" argument (")); } else { fmt_res_515037 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_515037 != null) { fmt_res_515037 = (fmt_res_515037).concat(cstrToNimstr(((args_515019 != null ? args_515019.length : 0))+"")); } else { fmt_res_515037 = cstrToNimstr(((args_515019 != null ? args_515019.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_515037 != null) { fmt_res_515037 = (fmt_res_515037).concat(makeNimstrLit(" given)")); } else { fmt_res_515037 = makeNimstrLit(" given)"); };
		msg_515032 = nimCopy(null, (makeNimstrLit("index takes exactly 1")).concat(fmt_res_515037), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_515210 = mnewString(0);
			F.line = 187;
			if (fmt_res_515210 != null) { fmt_res_515210 = (fmt_res_515210).concat(makeNimstrLit(" argument (")); } else { fmt_res_515210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_515210 != null) { fmt_res_515210 = (fmt_res_515210).concat(cstrToNimstr(((args_515019 != null ? args_515019.length : 0))+"")); } else { fmt_res_515210 = cstrToNimstr(((args_515019 != null ? args_515019.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_515210 != null) { fmt_res_515210 = (fmt_res_515210).concat(makeNimstrLit(" given)")); } else { fmt_res_515210 = makeNimstrLit(" given)"); };
			msg_515032 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_515210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_515409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_515409.tk = 3;
		F.line = 106;
		excp_515409.thrown = true;
		F.line = 107;
		excp_515409.msg = new_py_string_176075(msg_515032);
		result_515020 = excp_515409;
		break BeforeRet;
		}
		
		F.line = 230;
		var target_515411 = args_515019[chckIndx(0, 0, args_515019.length+0-1)-0];
		if (!(isObj(self_no_cast_515005.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_515601 = self_no_cast_515005;
		if (self_515601.writeLock) {
		F.line = 414;
		var msg_515603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_515605 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_515605.tk = 8;
		F.line = 106;
		excp_515605.thrown = true;
		F.line = 107;
		excp_515605.msg = new_py_string_176075(msg_515603);
		result_515020 = excp_515605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_515601.readNum = addInt(self_515601.readNum, 1);
		F.line = 444;
		try {
		L3: do {
			F.line = 135;
			var idx_515629 = 0;
			F.line = 135;
			var item_515630 = null;
			F.line = 2352;
			var colontmp__516417 = null;
			F.line = 135;
			colontmp__516417 = self_515601.items;
			F.line = 2354;
			var i_516420 = 0;
			L4: do {
				F.line = 2355;
					L5: while (true) {
					if (!(i_516420 < (colontmp__516417 != null ? colontmp__516417.length : 0))) break L5;
						F.line = 2356;
						idx_515629 = i_516420;
						F.line = 2356;
						item_515630 = colontmp__516417[chckIndx(i_516420, 0, colontmp__516417.length+0-1)-0];
						F.line = 136;
						F.line = 56;
						if ((item_515630.pyType === null)) {
						F.line = 2895;
						var e_515657 = null;
						F.line = 2896;
						e_515657 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_515657.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_515657.parent = null;
						F.line = 26;
						raiseException(e_515657, "InternalError");
						}
						
						F.line = 27;
						var fun_515802 = item_515630.pyType.magicMethods.Field18;
						if ((fun_515802 === null)) {
						F.line = 29;
						var obj_type_str_515811 = item_515630.pyType.name;
						F.line = 30;
						var method_str_515813 = makeNimstrLit("eq");
						F.line = 31;
						var msg_515815 = (makeNimstrLit("No ")).concat(method_str_515813,makeNimstrLit(" method for "),obj_type_str_515811,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_515817 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_515817.tk = 3;
						F.line = 106;
						excp_515817.thrown = true;
						F.line = 107;
						excp_515817.msg = new_py_string_176075(msg_515815);
						var excp_515820 = excp_515817;
						F.line = 36;
						result_515020 = excp_515820;
						break BeforeRet;
						}
						
						var fun_516002 = fun_515802;
						F.line = 57;
						var res_516004 = fun_516002(item_515630, target_515411);
						var ret_obj_516201 = res_516004;
							if (of_py_exception_object_358259(ret_obj_516201)) {
							Tmp6 = ret_obj_516201.thrown;
							}
							else {
							Tmp6 = false;
							}
							
						if (Tmp6) {
						F.line = 138;
						result_515020 = ret_obj_516201;
						break BeforeRet;
						}
						
						if ((ret_obj_516201 == py_true_obj_354074)) {
						F.line = 140;
						result_515020 = new_py_int_376142(idx_515629);
						break BeforeRet;
						}
						
						F.line = 2357;
						i_516420 = addInt(i_516420, 1);
					}
			} while(false);
		} while(false);
		F.line = 141;
		F.line = 141;
		var fmt_res_516215 = mnewString(0);
		F.line = 270;
		if (fmt_res_516215 != null) { fmt_res_516215 = (fmt_res_516215).concat(HEX24_157579(target_515411)); } else { fmt_res_516215 = HEX24_157579(target_515411).slice(); };
		F.line = 141;
		if (fmt_res_516215 != null) { fmt_res_516215 = (fmt_res_516215).concat(makeNimstrLit(" is not in list")); } else { fmt_res_516215 = makeNimstrLit(" is not in list"); };
		var msg_516401 = nimCopy(null, fmt_res_516215, NTI138);
		F.line = 104;
		var excp_516403 = new_py_value_error_simple_362601();
		F.line = 105;
		excp_516403.tk = 5;
		F.line = 106;
		excp_516403.thrown = true;
		F.line = 107;
		excp_516403.msg = new_py_string_176075(msg_516401);
		Tmp1 = excp_516403;
		} finally {
		framePtr = F;
		F.line = 417;
		self_515601.readNum = subInt(self_515601.readNum, 1);
		}
		result_515020 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_515020;

}

function insert_517627(x_517633, x_517633_Idx, item_517635, i_517637) {
	var F={procname:"insert.insert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1664;
		var it_518001 = null;
		F.line = 1665;
		x_517633[x_517633_Idx].splice(i_517637, 0, it_518001);
		F.line = 1668;
		x_517633[x_517633_Idx][chckIndx(i_517637, 0, x_517633[x_517633_Idx].length+0-1)-0] = item_517635;
	framePtr = F.prev;

	
}

function insert_py_list_object_method_516438(self_no_cast_516440, args_516454) {
			var Tmp1;
		var Tmp2;

	var result_516455 = null;

	var F={procname:"listobject.insertPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_516454 != null ? args_516454.length : 0) == 2))) {
		F.line = 183;
		var msg_516467 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_516472 = mnewString(0);
		F.line = 185;
		if (fmt_res_516472 != null) { fmt_res_516472 = (fmt_res_516472).concat(makeNimstrLit(" argument (")); } else { fmt_res_516472 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_516472 != null) { fmt_res_516472 = (fmt_res_516472).concat(cstrToNimstr(((args_516454 != null ? args_516454.length : 0))+"")); } else { fmt_res_516472 = cstrToNimstr(((args_516454 != null ? args_516454.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_516472 != null) { fmt_res_516472 = (fmt_res_516472).concat(makeNimstrLit(" given)")); } else { fmt_res_516472 = makeNimstrLit(" given)"); };
		msg_516467 = nimCopy(null, (makeNimstrLit("insert takes exactly 2")).concat(fmt_res_516472), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_516610 = mnewString(0);
			F.line = 187;
			if (fmt_res_516610 != null) { fmt_res_516610 = (fmt_res_516610).concat(makeNimstrLit(" argument (")); } else { fmt_res_516610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_516610 != null) { fmt_res_516610 = (fmt_res_516610).concat(cstrToNimstr(((args_516454 != null ? args_516454.length : 0))+"")); } else { fmt_res_516610 = cstrToNimstr(((args_516454 != null ? args_516454.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_516610 != null) { fmt_res_516610 = (fmt_res_516610).concat(makeNimstrLit(" given)")); } else { fmt_res_516610 = makeNimstrLit(" given)"); };
			msg_516467 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_516610), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_516809 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_516809.tk = 3;
		F.line = 106;
		excp_516809.thrown = true;
		F.line = 107;
		excp_516809.msg = new_py_string_176075(msg_516467);
		result_516455 = excp_516809;
		break BeforeRet;
		}
		
		if (!(isObj(args_516454[chckIndx(0, 0, args_516454.length+0-1)-0].m_type, NTI374109))) {
		F.line = 185;
		var expected_516822 = nimCopy(null, py_int_object_type_374115.name, NTI138);
		F.line = 186;
		var got_516823 = nimCopy(null, args_516454[chckIndx(0, 0, args_516454.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_516824 = makeNimstrLit("insert");
		F.line = 188;
		F.line = 188;
		var fmt_res_516828 = mnewString(0);
		F.line = 260;
		if (fmt_res_516828 != null) { fmt_res_516828 = (fmt_res_516828).concat(expected_516822); } else { fmt_res_516828 = expected_516822.slice(); };
		F.line = 188;
		if (fmt_res_516828 != null) { fmt_res_516828 = (fmt_res_516828).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_516828 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_516828 != null) { fmt_res_516828 = (fmt_res_516828).concat(m_name_516824); } else { fmt_res_516828 = m_name_516824.slice(); };
		F.line = 188;
		if (fmt_res_516828 != null) { fmt_res_516828 = (fmt_res_516828).concat(makeNimstrLit(" (got ")); } else { fmt_res_516828 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_516828 != null) { fmt_res_516828 = (fmt_res_516828).concat(got_516823); } else { fmt_res_516828 = got_516823.slice(); };
		F.line = 188;
		if (fmt_res_516828 != null) { fmt_res_516828 = (fmt_res_516828).concat(makeNimstrLit(")")); } else { fmt_res_516828 = makeNimstrLit(")"); };
		var msg_517402 = nimCopy(null, fmt_res_516828, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_517404 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_517404.tk = 3;
		F.line = 106;
		excp_517404.thrown = true;
		F.line = 107;
		excp_517404.msg = new_py_string_176075(msg_517402);
		result_516455 = excp_517404;
		break BeforeRet;
		}
		
		F.line = 237;
		var idx_517406 = args_516454[chckIndx(0, 0, args_516454.length+0-1)-0];
		F.line = 230;
		var item_517407 = args_516454[chckIndx(1, 0, args_516454.length+0-1)-0];
		if (!(isObj(self_no_cast_516440.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_517601 = self_no_cast_516440;
			if ((0 < self_517601.readNum)) Tmp1 = true; else {				Tmp1 = self_517601.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_517605 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_517607 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_517607.tk = 8;
		F.line = 106;
		excp_517607.thrown = true;
		F.line = 107;
		excp_517607.msg = new_py_string_176075(msg_517605);
		result_516455 = excp_517607;
		break BeforeRet;
		}
		
		F.line = 408;
		self_517601.writeLock = true;
		F.line = 444;
		try {
		F.line = 147;
		var int_idx_517609 = 0;
		if ((0 < idx_517406.v)) {
		F.line = 149;
		int_idx_517609 = 0;
		}
		else {
		if (((self_517601.items != null ? self_517601.items.length : 0) < idx_517406.v)) {
		F.line = 151;
		int_idx_517609 = (self_517601.items != null ? self_517601.items.length : 0);
		}
		else {
			F.line = 153;
			int_idx_517609 = to_int_376091(idx_517406);
		}
		}
		F.line = 154;
		insert_517627(self_517601, "items", item_517407, chckRange(int_idx_517609, 0, 2147483647));
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_517601.writeLock = false;
		}
		result_516455 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_516455;

}

function pop_518821(s_518827, s_518827_Idx) {
	var result_518828 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_518836 = subInt((s_518827[s_518827_Idx] != null ? s_518827[s_518827_Idx].length : 0), 1);
		F.line = 2525;
		result_518828 = s_518827[s_518827_Idx][chckIndx(l_518836, 0, s_518827[s_518827_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_518827[s_518827_Idx].length < chckRange(l_518836, 0, 2147483647)) { for (var i=s_518827[s_518827_Idx].length;i<chckRange(l_518836, 0, 2147483647);++i) s_518827[s_518827_Idx].push(null); }
               else { s_518827[s_518827_Idx].length = chckRange(l_518836, 0, 2147483647); };
	framePtr = F.prev;

	return result_518828;

}

function pop_py_list_object_method_518233(self_no_cast_518235, args_518249) {
			var Tmp1;
		var Tmp2;

	var result_518250 = null;

	var F={procname:"listobject.popPyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_518249 != null ? args_518249.length : 0) == 0))) {
		F.line = 183;
		var msg_518262 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_518267 = mnewString(0);
		F.line = 185;
		if (fmt_res_518267 != null) { fmt_res_518267 = (fmt_res_518267).concat(makeNimstrLit(" argument (")); } else { fmt_res_518267 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_518267 != null) { fmt_res_518267 = (fmt_res_518267).concat(cstrToNimstr(((args_518249 != null ? args_518249.length : 0))+"")); } else { fmt_res_518267 = cstrToNimstr(((args_518249 != null ? args_518249.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_518267 != null) { fmt_res_518267 = (fmt_res_518267).concat(makeNimstrLit(" given)")); } else { fmt_res_518267 = makeNimstrLit(" given)"); };
		msg_518262 = nimCopy(null, (makeNimstrLit("pop takes exactly 0")).concat(fmt_res_518267), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_518410 = mnewString(0);
			F.line = 187;
			if (fmt_res_518410 != null) { fmt_res_518410 = (fmt_res_518410).concat(makeNimstrLit(" argument (")); } else { fmt_res_518410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_518410 != null) { fmt_res_518410 = (fmt_res_518410).concat(cstrToNimstr(((args_518249 != null ? args_518249.length : 0))+"")); } else { fmt_res_518410 = cstrToNimstr(((args_518249 != null ? args_518249.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_518410 != null) { fmt_res_518410 = (fmt_res_518410).concat(makeNimstrLit(" given)")); } else { fmt_res_518410 = makeNimstrLit(" given)"); };
			msg_518262 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_518410), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_518609 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_518609.tk = 3;
		F.line = 106;
		excp_518609.thrown = true;
		F.line = 107;
		excp_518609.msg = new_py_string_176075(msg_518262);
		result_518250 = excp_518609;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_518235.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_518801 = self_no_cast_518235;
			if ((0 < self_518801.readNum)) Tmp1 = true; else {				Tmp1 = self_518801.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_518805 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_518807 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_518807.tk = 8;
		F.line = 106;
		excp_518807.thrown = true;
		F.line = 107;
		excp_518807.msg = new_py_string_176075(msg_518805);
		result_518250 = excp_518807;
		break BeforeRet;
		}
		
		F.line = 408;
		self_518801.writeLock = true;
		F.line = 444;
		try {
		if (((self_518801.items != null ? self_518801.items.length : 0) == 0)) {
		F.line = 160;
		var msg_518816 = makeNimstrLit("pop from empty list");
		F.line = 161;
		F.line = 104;
		var excp_518818 = new_py_index_error_simple_363601();
		F.line = 105;
		excp_518818.tk = 6;
		F.line = 106;
		excp_518818.thrown = true;
		F.line = 107;
		excp_518818.msg = new_py_string_176075(msg_518816);
		result_518250 = excp_518818;
		break BeforeRet;
		}
		
		Tmp2 = pop_518821(self_518801, "items");
		} finally {
		framePtr = F;
		F.line = 410;
		self_518801.writeLock = false;
		}
		result_518250 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_518250;

}

function delete_519603(s_519609, s_519609_Idx, first_519611, last_519613) {
	var F={procname:"delete.delete",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sequtils.nim",line:0};
	framePtr = F;
		F.line = 365;
		var i_519614 = first_519611;
		F.line = 366;
		var j_519615 = addInt(last_519613, 1);
		F.line = 367;
		var new_len_519623 = addInt(subInt((s_519609[s_519609_Idx] != null ? s_519609[s_519609_Idx].length : 0), j_519615), i_519614);
		L1: do {
			F.line = 368;
				L2: while (true) {
				if (!(i_519614 < new_len_519623)) break L2;
					F.line = 369;
					s_519609[s_519609_Idx][chckIndx(i_519614, 0, s_519609[s_519609_Idx].length+0-1)-0] = s_519609[s_519609_Idx][chckIndx(j_519615, 0, s_519609[s_519609_Idx].length+0-1)-0];
					F.line = 370;
					i_519614 = addInt(i_519614, 1);
					F.line = 371;
					j_519615 = addInt(j_519615, 1);
				}
		} while(false);
		F.line = 372;
		if (s_519609[s_519609_Idx].length < chckRange(new_len_519623, 0, 2147483647)) { for (var i=s_519609[s_519609_Idx].length;i<chckRange(new_len_519623, 0, 2147483647);++i) s_519609[s_519609_Idx].push(null); }
               else { s_519609[s_519609_Idx].length = chckRange(new_len_519623, 0, 2147483647); };
	framePtr = F.prev;

	
}

function remove_py_list_object_method_518877(self_no_cast_518879, args_518893) {
			var Tmp1;
			var Tmp3;

	var result_518894 = null;

	var F={procname:"listobject.removePyListObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(((args_518893 != null ? args_518893.length : 0) == 1))) {
		F.line = 183;
		var msg_518906 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_518911 = mnewString(0);
		F.line = 185;
		if (fmt_res_518911 != null) { fmt_res_518911 = (fmt_res_518911).concat(makeNimstrLit(" argument (")); } else { fmt_res_518911 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_518911 != null) { fmt_res_518911 = (fmt_res_518911).concat(cstrToNimstr(((args_518893 != null ? args_518893.length : 0))+"")); } else { fmt_res_518911 = cstrToNimstr(((args_518893 != null ? args_518893.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_518911 != null) { fmt_res_518911 = (fmt_res_518911).concat(makeNimstrLit(" given)")); } else { fmt_res_518911 = makeNimstrLit(" given)"); };
		msg_518906 = nimCopy(null, (makeNimstrLit("remove takes exactly 1")).concat(fmt_res_518911), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_519010 = mnewString(0);
			F.line = 187;
			if (fmt_res_519010 != null) { fmt_res_519010 = (fmt_res_519010).concat(makeNimstrLit(" argument (")); } else { fmt_res_519010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_519010 != null) { fmt_res_519010 = (fmt_res_519010).concat(cstrToNimstr(((args_518893 != null ? args_518893.length : 0))+"")); } else { fmt_res_519010 = cstrToNimstr(((args_518893 != null ? args_518893.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_519010 != null) { fmt_res_519010 = (fmt_res_519010).concat(makeNimstrLit(" given)")); } else { fmt_res_519010 = makeNimstrLit(" given)"); };
			msg_518906 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_519010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_519209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_519209.tk = 3;
		F.line = 106;
		excp_519209.thrown = true;
		F.line = 107;
		excp_519209.msg = new_py_string_176075(msg_518906);
		result_518894 = excp_519209;
		break BeforeRet;
		}
		
		F.line = 230;
		var target_519211 = args_518893[chckIndx(0, 0, args_518893.length+0-1)-0];
		if (!(isObj(self_no_cast_518879.m_type, NTI505255))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PyListObject` "));
		}
		
		F.line = 444;
		var self_519401 = self_no_cast_518879;
			if ((0 < self_519401.readNum)) Tmp1 = true; else {				Tmp1 = self_519401.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_519405 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_519407 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_519407.tk = 8;
		F.line = 106;
		excp_519407.thrown = true;
		F.line = 107;
		excp_519407.msg = new_py_string_176075(msg_519405);
		result_518894 = excp_519407;
		break BeforeRet;
		}
		
		F.line = 408;
		self_519401.writeLock = true;
		F.line = 444;
		try {
		F.line = 165;
		var ret_obj_519421 = index_py_list_object_method_515003(self_no_cast_518879, [target_519211]);
			if (of_py_exception_object_358259(ret_obj_519421)) {
			Tmp3 = ret_obj_519421.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 167;
		result_518894 = ret_obj_519421;
		break BeforeRet;
		}
		
		if (!(of_py_int_object_374117(ret_obj_519421))) {
		F.line = 168;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/listobject.nim(168, 10) `ofPyIntObject(retObj)` "));
		}
		
		F.line = 169;
		var idx_519601 = to_int_376091(ret_obj_519421);
		F.line = 170;
		delete_519603(self_519401, "items", chckRange(idx_519601, 0, 2147483647), chckRange(addInt(idx_519601, 1), 0, 2147483647));
		} finally {
		framePtr = F;
		F.line = 410;
		self_519401.writeLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_518894;

}

function init_py_list_object_magic_519699(self_no_cast_519701, args_519715) {
				var Tmp1;
							var Tmp4;

	var result_519716 = null;

	var F={procname:"listobject.initPyListObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_519701.m_type, NTI505255))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyListObject` "));
		}
		
		F.line = 438;
		var self_519801 = self_no_cast_519701;
		F.line = 176;
		switch ((args_519715 != null ? args_519715.length : 0)) {
		case 0:
			break;
		case 1:
			F.line = 180;
			F.line = 170;
			var iter_func_519818 = args_519715[chckIndx(0, 0, args_519715.length+0-1)-0].pyType.magicMethods.Field36;
			if ((iter_func_519818 === null)) {
			F.line = 172;
			var msg_519826 = (args_519715[chckIndx(0, 0, args_519715.length+0-1)-0].pyType.name).concat(makeNimstrLit(" object is not iterable"));
			F.line = 173;
			F.line = 104;
			var excp_519828 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_519828.tk = 3;
			F.line = 106;
			excp_519828.thrown = true;
			F.line = 107;
			excp_519828.msg = new_py_string_176075(msg_519826);
			result_519716 = excp_519828;
			break BeforeRet;
			}
			
			F.line = 174;
			var iter_obj_519831 = iter_func_519818(args_519715[chckIndx(0, 0, args_519715.length+0-1)-0]);
			if ((iter_obj_519831.pyType.magicMethods.Field37 === null)) {
			F.line = 176;
			F.line = 176;
			var fmt_res_519840 = mnewString(0);
			F.line = 176;
			if (fmt_res_519840 != null) { fmt_res_519840 = (fmt_res_519840).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_519840 = makeNimstrLit("iter() returned non-iterator of type "); };
			var msg_519842 = (fmt_res_519840).concat(iter_obj_519831.pyType.name);
			F.line = 177;
			F.line = 104;
			var excp_519844 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_519844.tk = 3;
			F.line = 106;
			excp_519844.thrown = true;
			F.line = 107;
			excp_519844.msg = new_py_string_176075(msg_519842);
			result_519716 = excp_519844;
			break BeforeRet;
			}
			
			var iterable_519846 = iter_obj_519831;
				if (of_py_exception_object_358259(iterable_519846)) {
				Tmp1 = iterable_519846.thrown;
				}
				else {
				Tmp1 = false;
				}
				
			if (Tmp1) {
			F.line = 182;
			result_519716 = iterable_519846;
			break BeforeRet;
			}
			
			F.line = 183;
			var next_method_519847 = iterable_519846.pyType.magicMethods.Field37;
			F.line = 184;
			var new_list_519848 = new_py_list_simple_505401();
			L2: do {
				F.line = 185;
					L3: while (true) {
					if (!true) break L3;
						F.line = 186;
						var next_obj_519849 = next_method_519847(iterable_519846);
						if (is_stop_iter_373851(next_obj_519849)) {
						F.line = 188;
						break L2;
						}
						
							if (of_py_exception_object_358259(next_obj_519849)) {
							Tmp4 = next_obj_519849.thrown;
							}
							else {
							Tmp4 = false;
							}
							
						if (Tmp4) {
						F.line = 190;
						result_519716 = next_obj_519849;
						break BeforeRet;
						}
						
						F.line = 191;
						if (self_519801.items != null) { self_519801.items.push(next_obj_519849); } else { self_519801.items = [next_obj_519849]; };
					}
			} while(false);
			break;
		default: 
			F.line = 193;
			F.line = 193;
			var fmt_res_519862 = mnewString(0);
			F.line = 193;
			if (fmt_res_519862 != null) { fmt_res_519862 = (fmt_res_519862).concat(makeNimstrLit("list expected at most 1 args, got ")); } else { fmt_res_519862 = makeNimstrLit("list expected at most 1 args, got "); };
			F.line = 270;
			if (fmt_res_519862 != null) { fmt_res_519862 = (fmt_res_519862).concat(cstrToNimstr(((args_519715 != null ? args_519715.length : 0))+"")); } else { fmt_res_519862 = cstrToNimstr(((args_519715 != null ? args_519715.length : 0))+"").slice(); };
			var msg_520008 = nimCopy(null, fmt_res_519862, NTI138);
			F.line = 194;
			F.line = 104;
			var excp_520010 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_520010.tk = 3;
			F.line = 106;
			excp_520010.thrown = true;
			F.line = 107;
			excp_520010.msg = new_py_string_176075(msg_520008);
			result_519716 = excp_520010;
			break BeforeRet;
			break;
		}
		result_519716 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_519716;

}
py_list_object_type_505269.magicMethods.Field22 = contains_py_list_object_magic_506293;
py_list_object_type_505269.magicMethods.Field36 = iter_py_list_object_magic_507044;
py_list_object_type_505269.magicMethods.Field25 = repr_py_list_object_magic_507241;
py_list_object_type_505269.magicMethods.Field23 = len_py_list_object_magic_508248;
py_list_object_type_505269.magicMethods.Field32 = getitem_py_list_object_magic_508448;
py_list_object_type_505269.magicMethods.Field33 = setitem_py_list_object_magic_508678;
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("append"), append_py_list_object_method_508859);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("clear"), clear_py_list_object_method_509435);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("copy"), copy_py_list_object_method_510035);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("count"), count_py_list_object_method_510642);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("doClear"), doclear_py_list_object_method_511855);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("doRead"), doread_py_list_object_method_512441);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("aInt"), aint_py_list_object_method_513027);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("hello"), hello_py_list_object_method_514273);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("index"), index_py_list_object_method_515003);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("insert"), insert_py_list_object_method_516438);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("pop"), pop_py_list_object_method_518233);
register_bltin_method_160182(py_list_object_type_505269, makeNimstrLit("remove"), remove_py_list_object_method_518877);
py_list_object_type_505269.magicMethods.Field27 = init_py_list_object_magic_519699;

function new_521406() {
	var result_521411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_521601 = null;
		F.line = 211;
		r_521601 = {m_type: NTI521178, table: {data: null, counter: 0}, reprLock: false, readNum: 0, writeLock: false, id: 0, pyType: null};
		F.line = 212;
		result_521411 = r_521601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_521411;

}

function new_pydict_simple_521401() {
	var result_521403 = null;

	var F={procname:"dictobject.newPydictSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_521624 = new_521406();
		F.line = 561;
		obj_521624.pyType = pydict_object_type_521222;
		F.line = 563;
		give_id_157814(obj_521624);
		result_521403 = obj_521624;
	framePtr = F.prev;

	return result_521403;

}

function new_pydict_default_522021(args_521133) {
	var result_522024 = null;

	var F={procname:"dictobject.newPydictDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_522024 = new_pydict_simple_521401();
	framePtr = F.prev;

	return result_522024;

}
var pydict_object_type_521222 = new_py_type_159261(makeNimstrLit("dict"));
pydict_object_type_521222.magicMethods.Field26 = new_pydict_default_522021;

function hash_143801(x_143803) {
	var result_143804 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 108;
		result_143804 = x_143803;
	framePtr = F.prev;

	return result_143804;

}

function hash_521040(obj_521042) {
	var result_521043 = 0;

	var F={procname:"dictobject.hash",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 17;
		var fun_521044 = obj_521042.pyType.magicMethods.Field30;
		if ((fun_521044 === null)) {
		F.line = 19;
		result_521043 = hash_143414(obj_521042);
		break BeforeRet;
		}
		else {
			F.line = 21;
			var ret_obj_521052 = fun_521044(obj_521042);
			if (!(of_py_int_object_374117(ret_obj_521052))) {
			F.line = 2895;
			var e_521059 = null;
			F.line = 2896;
			e_521059 = {m_type: NTI156085, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 23;
			e_521059.message = nimCopy(null, ret_obj_521052.pyType.name, NTI138);
			F.line = 2891;
			e_521059.parent = null;
			F.line = 23;
			raiseException(e_521059, "DictError");
			}
			
			F.line = 24;
			result_521043 = hash_143801(ret_obj_521052.v);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_521043;

}

function HEX3DHEX3D_521081(obj1_521083, obj2_521084) {
	var result_521085 = false;

	var F={procname:"dictobject.==",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 28;
		var fun_521086 = obj1_521083.pyType.magicMethods.Field18;
		if ((fun_521086 === null)) {
		F.line = 30;
		result_521085 = (id_157596(obj1_521083) == id_157596(obj2_521084));
		break BeforeRet;
		}
		else {
			F.line = 32;
			var ret_obj_521093 = fun_521086(obj1_521083, obj2_521084);
			if (!(of_py_bool_object_353106(ret_obj_521093))) {
			F.line = 2895;
			var e_521100 = null;
			F.line = 2896;
			e_521100 = {m_type: NTI156085, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 34;
			e_521100.message = nimCopy(null, ret_obj_521093.pyType.name, NTI138);
			F.line = 2891;
			e_521100.parent = null;
			F.line = 34;
			raiseException(e_521100, "DictError");
			}
			
			F.line = 35;
			result_521085 = ret_obj_521093.b;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_521085;

}

function raw_get_522600(t_522605, key_522607, hc_522609, hc_522609_Idx) {
						var Tmp3;

	var result_522610 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_522609[hc_522609_Idx] = hash_521040(key_522607);
		if ((hc_522609[hc_522609_Idx] == 0)) {
		F.line = 45;
		hc_522609[hc_522609_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_522620 = (hc_522609[hc_522609_Idx] & (t_522605.data != null ? (t_522605.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_522605.data[chckIndx(h_522620, 0, t_522605.data.length+0-1)-0].Field0)) break L2;
						if (!(t_522605.data[chckIndx(h_522620, 0, t_522605.data.length+0-1)-0].Field0 == hc_522609[hc_522609_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_521081(t_522605.data[chckIndx(h_522620, 0, t_522605.data.length+0-1)-0].Field1, key_522607);						}					if (Tmp3) {
					F.line = 38;
					result_522610 = h_522620;
					break BeforeRet;
					}
					
					F.line = 39;
					h_522620 = next_try_146614(h_522620, (t_522605.data != null ? (t_522605.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_522610 = subInt(-1, h_522620);
	} while (false);
	framePtr = F.prev;

	return result_522610;

}

function get_or_default_527528(t_527534, key_527536, default_527538) {
		var Tmp1;

	var result_527539 = null;

	var F={procname:"getOrDefault.getOrDefault",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 177;
		var hc_527545 = [0];
		F.line = 178;
		var index_527559 = raw_get_522600(t_527534, key_527536, hc_527545, 0);
		F.line = 179;
		if ((0 <= index_527559)) {
		Tmp1 = t_527534.data[chckIndx(index_527559, 0, t_527534.data.length+0-1)-0].Field2;
		}
		else {
		Tmp1 = default_527538;
		}
		
		result_527539 = Tmp1;
	framePtr = F.prev;

	return result_527539;

}

function contains_pydict_object_magic_527051(self_no_cast_527053, other_527054) {
	var result_527055 = null;

	var F={procname:"dictobject.containsPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_527053.m_type, NTI521178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_527201 = self_no_cast_527053;
		if (self_527201.writeLock) {
		F.line = 414;
		var msg_527203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_527205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_527205.tk = 8;
		F.line = 106;
		excp_527205.thrown = true;
		F.line = 107;
		excp_527205.msg = new_py_string_176075(msg_527203);
		result_527055 = excp_527205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_527201.readNum = addInt(self_527201.readNum, 1);
		F.line = 438;
		try {
		F.line = 61;
		var hash_func_527223 = other_527054.pyType.magicMethods.Field30;
		if ((hash_func_527223 === null)) {
		F.line = 63;
		var tp_name_527231 = nimCopy(null, other_527054.pyType.name, NTI138);
		F.line = 64;
		var msg_527233 = (makeNimstrLit("unhashable type: ")).concat(tp_name_527231);
		F.line = 65;
		F.line = 104;
		var excp_527235 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_527235.tk = 3;
		F.line = 106;
		excp_527235.thrown = true;
		F.line = 107;
		excp_527235.msg = new_py_string_176075(msg_527233);
		result_527055 = excp_527235;
		break BeforeRet;
		}
		
		F.line = 70;
++excHandler;
		try {
		F.line = 71;
		result_527055 = get_or_default_527528(self_527201.table, other_527054, null);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156085))) {
		F.line = 73;
		var msg_527791 = makeNimstrLit("__hash__ method doesn\'t return an integer or __eq__ method doesn\'t return a bool");
		F.line = 74;
		F.line = 104;
		var excp_527793 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_527793.tk = 3;
		F.line = 106;
		excp_527793.thrown = true;
		F.line = 107;
		excp_527793.msg = new_py_string_176075(msg_527791);
		result_527055 = excp_527793;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		if ((result_527055 === null)) {
		F.line = 76;
		result_527055 = py_false_obj_354075;
		break BeforeRet;
		}
		else {
			F.line = 78;
			result_527055 = py_true_obj_354074;
			break BeforeRet;
		}
		
		} finally {
		framePtr = F;
		F.line = 417;
		self_527201.readNum = subInt(self_527201.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_527055;

}

function repr_pydict_object_magic_527827(self_no_cast_527829) {
	var result_527830 = null;

	var F={procname:"dictobject.reprPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_527829.m_type, NTI521178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_528001 = self_no_cast_527829;
		if (self_528001.reprLock) {
		F.line = 379;
		result_527830 = new_py_string_176075(makeNimstrLit("..."));
		break BeforeRet;
		}
		
		F.line = 380;
		self_528001.reprLock = true;
		F.line = 438;
		try {
		if (self_528001.writeLock) {
		F.line = 414;
		var msg_528003 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_528005 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_528005.tk = 8;
		F.line = 106;
		excp_528005.thrown = true;
		F.line = 107;
		excp_528005.msg = new_py_string_176075(msg_528003);
		result_527830 = excp_528005;
		break BeforeRet;
		}
		
		F.line = 412;
		self_528001.readNum = addInt(self_528001.readNum, 1);
		F.line = 438;
		try {
		F.line = 81;
		var ss_528017 = null;
		L3: do {
			F.line = 82;
			var k_528720 = null;
			F.line = 82;
			var v_528721 = null;
			F.line = 270;
			var colontmp__530622 = {data: null, counter: 0};
			F.line = 82;
			nimCopy(colontmp__530622, self_528001.table, NTI521188);
			L4: do {
				F.line = 272;
				var h_530626 = 0;
				F.line = 2104;
				var colontmp__530628 = 0;
				F.line = 272;
				colontmp__530628 = (colontmp__530622.data != null ? (colontmp__530622.data.length-1) : -1);
				F.line = 2107;
				var res_530630 = 0;
				L5: do {
					F.line = 2108;
						L6: while (true) {
						if (!(res_530630 <= colontmp__530628)) break L6;
							F.line = 2109;
							h_530626 = res_530630;
							if (is_filled_146491(colontmp__530622.data[chckIndx(h_530626, 0, colontmp__530622.data.length+0-1)-0].Field0)) {
							F.line = 273;
							k_528720 = colontmp__530622.data[chckIndx(h_530626, 0, colontmp__530622.data.length+0-1)-0].Field1;
							F.line = 273;
							v_528721 = colontmp__530622.data[chckIndx(h_530626, 0, colontmp__530622.data.length+0-1)-0].Field2;
							F.line = 83;
							F.line = 45;
							if ((k_528720.pyType === null)) {
							F.line = 2895;
							var e_528748 = null;
							F.line = 2896;
							e_528748 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 26;
							e_528748.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
							F.line = 2891;
							e_528748.parent = null;
							F.line = 26;
							raiseException(e_528748, "InternalError");
							}
							
							F.line = 27;
							var fun_528802 = k_528720.pyType.magicMethods.Field25;
							if ((fun_528802 === null)) {
							F.line = 29;
							var obj_type_str_528811 = k_528720.pyType.name;
							F.line = 30;
							var method_str_528813 = makeNimstrLit("repr");
							F.line = 31;
							var msg_528815 = (makeNimstrLit("No ")).concat(method_str_528813,makeNimstrLit(" method for "),obj_type_str_528811,makeNimstrLit(" defined"));
							F.line = 32;
							F.line = 104;
							var excp_528817 = new_py_type_error_simple_360601();
							F.line = 105;
							excp_528817.tk = 3;
							F.line = 106;
							excp_528817.thrown = true;
							F.line = 107;
							excp_528817.msg = new_py_string_176075(msg_528815);
							var excp_528820 = excp_528817;
							F.line = 36;
							result_527830 = excp_528820;
							break BeforeRet;
							}
							
							var fun_529002 = fun_528802;
							F.line = 46;
							var res_529004 = fun_529002(k_528720);
							var k_repr_529201 = res_529004;
							F.line = 84;
							F.line = 45;
							if ((v_528721.pyType === null)) {
							F.line = 2895;
							var e_529228 = null;
							F.line = 2896;
							e_529228 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 26;
							e_529228.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
							F.line = 2891;
							e_529228.parent = null;
							F.line = 26;
							raiseException(e_529228, "InternalError");
							}
							
							F.line = 27;
							var fun_529402 = v_528721.pyType.magicMethods.Field25;
							if ((fun_529402 === null)) {
							F.line = 29;
							var obj_type_str_529411 = v_528721.pyType.name;
							F.line = 30;
							var method_str_529413 = makeNimstrLit("repr");
							F.line = 31;
							var msg_529415 = (makeNimstrLit("No ")).concat(method_str_529413,makeNimstrLit(" method for "),obj_type_str_529411,makeNimstrLit(" defined"));
							F.line = 32;
							F.line = 104;
							var excp_529417 = new_py_type_error_simple_360601();
							F.line = 105;
							excp_529417.tk = 3;
							F.line = 106;
							excp_529417.thrown = true;
							F.line = 107;
							excp_529417.msg = new_py_string_176075(msg_529415);
							var excp_529420 = excp_529417;
							F.line = 36;
							result_527830 = excp_529420;
							break BeforeRet;
							}
							
							var fun_529602 = fun_529402;
							F.line = 46;
							var res_529604 = fun_529602(v_528721);
							var v_repr_529801 = res_529604;
							if (!(of_py_str_object_175092(k_repr_529201))) {
							F.line = 157;
							var type_name_529804 = nimCopy(null, k_repr_529201.pyType.name, NTI138);
							F.line = 158;
							F.line = 158;
							var fmt_res_529807 = mnewString(0);
							F.line = 158;
							if (fmt_res_529807 != null) { fmt_res_529807 = (fmt_res_529807).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_529807 = makeNimstrLit(" returned non-string (type "); };
							F.line = 260;
							if (fmt_res_529807 != null) { fmt_res_529807 = (fmt_res_529807).concat(type_name_529804); } else { fmt_res_529807 = type_name_529804.slice(); };
							F.line = 158;
							if (fmt_res_529807 != null) { fmt_res_529807 = (fmt_res_529807).concat(makeNimstrLit(")")); } else { fmt_res_529807 = makeNimstrLit(")"); };
							var msg_530002 = (makeNimstrLit("__str__")).concat(fmt_res_529807);
							F.line = 159;
							F.line = 104;
							var excp_530004 = new_py_type_error_simple_360601();
							F.line = 105;
							excp_530004.tk = 3;
							F.line = 106;
							excp_530004.thrown = true;
							F.line = 107;
							excp_530004.msg = new_py_string_176075(msg_530002);
							result_527830 = excp_530004;
							break BeforeRet;
							}
							
							if (!(of_py_str_object_175092(v_repr_529801))) {
							F.line = 157;
							var type_name_530008 = nimCopy(null, v_repr_529801.pyType.name, NTI138);
							F.line = 158;
							F.line = 158;
							var fmt_res_530011 = mnewString(0);
							F.line = 158;
							if (fmt_res_530011 != null) { fmt_res_530011 = (fmt_res_530011).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_530011 = makeNimstrLit(" returned non-string (type "); };
							F.line = 260;
							if (fmt_res_530011 != null) { fmt_res_530011 = (fmt_res_530011).concat(type_name_530008); } else { fmt_res_530011 = type_name_530008.slice(); };
							F.line = 158;
							if (fmt_res_530011 != null) { fmt_res_530011 = (fmt_res_530011).concat(makeNimstrLit(")")); } else { fmt_res_530011 = makeNimstrLit(")"); };
							var msg_530202 = (makeNimstrLit("__str__")).concat(fmt_res_530011);
							F.line = 159;
							F.line = 104;
							var excp_530204 = new_py_type_error_simple_360601();
							F.line = 105;
							excp_530204.tk = 3;
							F.line = 106;
							excp_530204.thrown = true;
							F.line = 107;
							excp_530204.msg = new_py_string_176075(msg_530202);
							result_527830 = excp_530204;
							break BeforeRet;
							}
							
							F.line = 87;
							F.line = 87;
							var fmt_res_530209 = mnewString(0);
							F.line = 260;
							if (fmt_res_530209 != null) { fmt_res_530209 = (fmt_res_530209).concat(k_repr_529201.str); } else { fmt_res_530209 = k_repr_529201.str.slice(); };
							F.line = 87;
							if (fmt_res_530209 != null) { fmt_res_530209 = (fmt_res_530209).concat(makeNimstrLit(": ")); } else { fmt_res_530209 = makeNimstrLit(": "); };
							F.line = 260;
							if (fmt_res_530209 != null) { fmt_res_530209 = (fmt_res_530209).concat(v_repr_529801.str); } else { fmt_res_530209 = v_repr_529801.str.slice(); };
							var Tmp7 = nimCopy(null, fmt_res_530209, NTI138);
							if (ss_528017 != null) { ss_528017.push(Tmp7); } else { ss_528017 = [Tmp7]; };
							}
							
							F.line = 2110;
							res_530630 = addInt(res_530630, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 88;
		result_527830 = new_py_string_176075((makeNimstrLit("{")).concat(nsuJoinSep(ss_528017, makeNimstrLit(", ")),makeNimstrLit("}")));
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_528001.readNum = subInt(self_528001.readNum, 1);
		}
		} finally {
		framePtr = F;
		F.line = 383;
		self_528001.reprLock = false;
		}
	} while (false);
	framePtr = F.prev;

	return result_527830;

}

function len_530983(t_530989) {
	var result_530990 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 154;
		result_530990 = t_530989.counter;
	framePtr = F.prev;

	return result_530990;

}

function len_pydict_object_magic_530648(self_no_cast_530650) {
		var Tmp1;

	var result_530651 = null;

	var F={procname:"dictobject.lenPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_530650.m_type, NTI521178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_530801 = self_no_cast_530650;
		if (self_530801.writeLock) {
		F.line = 414;
		var msg_530803 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_530805 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_530805.tk = 8;
		F.line = 106;
		excp_530805.thrown = true;
		F.line = 107;
		excp_530805.msg = new_py_string_176075(msg_530803);
		result_530651 = excp_530805;
		break BeforeRet;
		}
		
		F.line = 412;
		self_530801.readNum = addInt(self_530801.readNum, 1);
		F.line = 438;
		try {
		Tmp1 = new_py_int_376142(len_530983(self_530801.table));
		} finally {
		framePtr = F;
		F.line = 417;
		self_530801.readNum = subInt(self_530801.readNum, 1);
		}
		result_530651 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_530651;

}

function init_table_522263(initial_size_522268) {
	var result_522270 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_522268))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_522270.counter = 0;
		F.line = 354;
		result_522270.data = new Array(chckRange(initial_size_522268, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_522268, 0, 2147483647);++i) {result_522270.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_522270;

}

function new_py_dict_522257() {
	var result_522259 = null;

	var F={procname:"dictobject.newPyDict",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		F.line = 46;
		result_522259 = new_pydict_simple_521401();
		F.line = 47;
		nimCopy(result_522259.table, init_table_522263(64), NTI521188);
	framePtr = F.prev;

	return result_522259;

}

function new_pydict_object_magic_531027(args_531042) {
	var result_531043 = null;

	var F={procname:"dictobject.newPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 95;
		result_531043 = new_py_dict_522257();
	framePtr = F.prev;

	return result_531043;

}

function getitem_pydict_object_magic_531059(self_no_cast_531061, other_531062) {
			var Tmp3;

	var result_531063 = null;

	var F={procname:"dictobject.getitemPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_531061.m_type, NTI521178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_531201 = self_no_cast_531061;
		if (self_531201.writeLock) {
		F.line = 414;
		var msg_531203 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_531205 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_531205.tk = 8;
		F.line = 106;
		excp_531205.thrown = true;
		F.line = 107;
		excp_531205.msg = new_py_string_176075(msg_531203);
		result_531063 = excp_531205;
		break BeforeRet;
		}
		
		F.line = 412;
		self_531201.readNum = addInt(self_531201.readNum, 1);
		F.line = 438;
		try {
		F.line = 61;
		var hash_func_531223 = other_531062.pyType.magicMethods.Field30;
		if ((hash_func_531223 === null)) {
		F.line = 63;
		var tp_name_531231 = nimCopy(null, other_531062.pyType.name, NTI138);
		F.line = 64;
		var msg_531233 = (makeNimstrLit("unhashable type: ")).concat(tp_name_531231);
		F.line = 65;
		F.line = 104;
		var excp_531235 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_531235.tk = 3;
		F.line = 106;
		excp_531235.thrown = true;
		F.line = 107;
		excp_531235.msg = new_py_string_176075(msg_531233);
		result_531063 = excp_531235;
		break BeforeRet;
		}
		
		F.line = 100;
++excHandler;
		try {
		F.line = 101;
		result_531063 = get_or_default_527528(self_531201.table, other_531062, null);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156085))) {
		F.line = 103;
		var msg_531539 = makeNimstrLit("__hash__ method doesn\'t return an integer or __eq__ method doesn\'t return a bool");
		F.line = 104;
		F.line = 104;
		var excp_531541 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_531541.tk = 3;
		F.line = 106;
		excp_531541.thrown = true;
		F.line = 107;
		excp_531541.msg = new_py_string_176075(msg_531539);
		result_531063 = excp_531541;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		if (!((result_531063 === null))) {
		F.line = 106;
		break BeforeRet;
		}
		
		F.line = 108;
		var msg_531550 = null;
		F.line = 109;
		var repr_531551 = other_531062.pyType.magicMethods.Field25(other_531062);
			if (of_py_exception_object_358259(repr_531551)) {
			Tmp3 = repr_531551.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 111;
		msg_531550 = nimCopy(null, makeNimstrLit("exception occured when generating key error msg calling repr"), NTI138);
		}
		else {
			F.line = 113;
			msg_531550 = nimCopy(null, repr_531551.str, NTI138);
		}
		
		F.line = 114;
		F.line = 104;
		var excp_531553 = new_py_key_error_simple_368601();
		F.line = 105;
		excp_531553.tk = 11;
		F.line = 106;
		excp_531553.thrown = true;
		F.line = 107;
		excp_531553.msg = new_py_string_176075(msg_531550);
		result_531063 = excp_531553;
		break BeforeRet;
		} finally {
		framePtr = F;
		F.line = 417;
		self_531201.readNum = subInt(self_531201.readNum, 1);
		}
	} while (false);
	framePtr = F.prev;

	return result_531063;

}

function raw_insert_525562(t_525569, data_525573, data_525573_Idx, key_525575, val_525577, hc_525579, h_525581) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_525573[data_525573_Idx][chckIndx(h_525581, 0, data_525573[data_525573_Idx].length+0-1)-0].Field1 = key_525575;
		F.line = 65;
		data_525573[data_525573_Idx][chckIndx(h_525581, 0, data_525573[data_525573_Idx].length+0-1)-0].Field2 = val_525577;
		F.line = 66;
		data_525573[data_525573_Idx][chckIndx(h_525581, 0, data_525573[data_525573_Idx].length+0-1)-0].Field0 = hc_525579;
	framePtr = F.prev;

	
}

function enlarge_524432(t_524439) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_524447 = null;
		F.line = 314;
		n_524447 = new Array(chckRange(mulInt((t_524439.data != null ? t_524439.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_524439.data != null ? t_524439.data.length : 0), 2), 0, 2147483647);++i) {n_524447[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_524439.data; t_524439.data = n_524447; n_524447 = Tmp1;		L2: do {
			F.line = 316;
			var i_524660 = 0;
			F.line = 2088;
			var colontmp__526249 = 0;
			F.line = 316;
			colontmp__526249 = (n_524447 != null ? (n_524447.length-1) : -1);
			F.line = 2094;
			var res_526252 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_526252 <= colontmp__526249)) break L4;
						F.line = 2096;
						i_524660 = res_526252;
						F.line = 317;
						var eh_524878 = n_524447[chckIndx(i_524660, 0, n_524447.length+0-1)-0].Field0;
						if (is_filled_146491(eh_524878)) {
						F.line = 319;
						var j_524887 = (eh_524878 & (t_524439.data != null ? (t_524439.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_524439.data[chckIndx(j_524887, 0, t_524439.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_524887 = next_try_146614(j_524887, (t_524439.data != null ? (t_524439.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_525562(t_524439, t_524439, "data", n_524447[chckIndx(i_524660, 0, n_524447.length+0-1)-0].Field1, n_524447[chckIndx(i_524660, 0, n_524447.length+0-1)-0].Field2, eh_524878, j_524887);
						}
						
						F.line = 2097;
						res_526252 = addInt(res_526252, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_526270(t_526275, key_526277, hc_526279) {
	var result_526280 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_526289 = (hc_526279 & (t_526275.data != null ? (t_526275.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_526275.data[chckIndx(h_526289, 0, t_526275.data.length+0-1)-0].Field0)) break L2;
					if (((t_526275.data[chckIndx(h_526289, 0, t_526275.data.length+0-1)-0].Field0 == hc_526279) && HEX3DHEX3D_521081(t_526275.data[chckIndx(h_526289, 0, t_526275.data.length+0-1)-0].Field1, key_526277))) {
					F.line = 38;
					result_526280 = h_526289;
					break BeforeRet;
					}
					
					F.line = 39;
					h_526289 = next_try_146614(h_526289, (t_526275.data != null ? (t_526275.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_526280 = subInt(-1, h_526289);
	} while (false);
	framePtr = F.prev;

	return result_526280;

}

function HEX5BHEX5DHEX3D_523993(t_524000, key_524002, val_524004) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_524005 = [0];
		F.line = 98;
		var index_524018 = raw_get_522600(t_524000, key_524002, hc_524005, 0);
		if ((0 <= index_524018)) {
		F.line = 99;
		t_524000.data[chckIndx(index_524018, 0, t_524000.data.length+0-1)-0].Field2 = val_524004;
		}
		else {
			if (must_rehash_146509((t_524000.data != null ? t_524000.data.length : 0), t_524000.counter)) {
			F.line = 90;
			enlarge_524432(t_524000);
			F.line = 91;
			index_524018 = raw_get_known_hc_526270(t_524000, key_524002, hc_524005[0]);
			}
			
			F.line = 92;
			index_524018 = subInt(-1, index_524018);
			F.line = 93;
			raw_insert_525562(t_524000, t_524000, "data", key_524002, val_524004, hc_524005[0], index_524018);
			F.line = 100;
			t_524000.counter = addInt(t_524000.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function setitem_pydict_object_magic_531581(self_no_cast_531583, arg1_531584, arg2_531585) {
			var Tmp1;
		var Tmp2;

	var result_531586 = null;

	var F={procname:"dictobject.setitemPydictObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_531583.m_type, NTI521178))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PydictObject` "));
		}
		
		F.line = 438;
		var self_531801 = self_no_cast_531583;
			if ((0 < self_531801.readNum)) Tmp1 = true; else {				Tmp1 = self_531801.writeLock;			}		if (Tmp1) {
		F.line = 406;
		var msg_531805 = makeNimstrLit("Write failed because object is been read or written.");
		F.line = 407;
		F.line = 104;
		var excp_531807 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_531807.tk = 8;
		F.line = 106;
		excp_531807.thrown = true;
		F.line = 107;
		excp_531807.msg = new_py_string_176075(msg_531805);
		result_531586 = excp_531807;
		break BeforeRet;
		}
		
		F.line = 408;
		self_531801.writeLock = true;
		F.line = 438;
		try {
		F.line = 61;
		var hash_func_531816 = arg1_531584.pyType.magicMethods.Field30;
		if ((hash_func_531816 === null)) {
		F.line = 63;
		var tp_name_531824 = nimCopy(null, arg1_531584.pyType.name, NTI138);
		F.line = 64;
		var msg_531826 = (makeNimstrLit("unhashable type: ")).concat(tp_name_531824);
		F.line = 65;
		F.line = 104;
		var excp_531828 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_531828.tk = 3;
		F.line = 106;
		excp_531828.thrown = true;
		F.line = 107;
		excp_531828.msg = new_py_string_176075(msg_531826);
		result_531586 = excp_531828;
		break BeforeRet;
		}
		
		F.line = 119;
++excHandler;
		try {
		F.line = 120;
		HEX5BHEX5DHEX3D_523993(self_531801.table, arg1_531584, arg2_531585);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156085))) {
		F.line = 122;
		var msg_531989 = makeNimstrLit("__hash__ method doesn\'t return an integer or __eq__ method doesn\'t return a bool");
		F.line = 123;
		F.line = 104;
		var excp_531991 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_531991.tk = 3;
		F.line = 106;
		excp_531991.thrown = true;
		F.line = 107;
		excp_531991.msg = new_py_string_176075(msg_531989);
		result_531586 = excp_531991;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		Tmp2 = py_none_356044;
		} finally {
		framePtr = F;
		F.line = 410;
		self_531801.writeLock = false;
		}
		result_531586 = Tmp2;
	} while (false);
	framePtr = F.prev;

	return result_531586;

}

function copy_pydict_object_method_532009(self_no_cast_532011, args_532025) {
		var Tmp1;

	var result_532026 = null;

	var F={procname:"dictobject.copyPydictObjectMethod",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 444;
		if (!(((args_532025 != null ? args_532025.length : 0) == 0))) {
		F.line = 183;
		var msg_532038 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_532043 = mnewString(0);
		F.line = 185;
		if (fmt_res_532043 != null) { fmt_res_532043 = (fmt_res_532043).concat(makeNimstrLit(" argument (")); } else { fmt_res_532043 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_532043 != null) { fmt_res_532043 = (fmt_res_532043).concat(cstrToNimstr(((args_532025 != null ? args_532025.length : 0))+"")); } else { fmt_res_532043 = cstrToNimstr(((args_532025 != null ? args_532025.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_532043 != null) { fmt_res_532043 = (fmt_res_532043).concat(makeNimstrLit(" given)")); } else { fmt_res_532043 = makeNimstrLit(" given)"); };
		msg_532038 = nimCopy(null, (makeNimstrLit("copy takes exactly 0")).concat(fmt_res_532043), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_532210 = mnewString(0);
			F.line = 187;
			if (fmt_res_532210 != null) { fmt_res_532210 = (fmt_res_532210).concat(makeNimstrLit(" argument (")); } else { fmt_res_532210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_532210 != null) { fmt_res_532210 = (fmt_res_532210).concat(cstrToNimstr(((args_532025 != null ? args_532025.length : 0))+"")); } else { fmt_res_532210 = cstrToNimstr(((args_532025 != null ? args_532025.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_532210 != null) { fmt_res_532210 = (fmt_res_532210).concat(makeNimstrLit(" given)")); } else { fmt_res_532210 = makeNimstrLit(" given)"); };
			msg_532038 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_532210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_532409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_532409.tk = 3;
		F.line = 106;
		excp_532409.thrown = true;
		F.line = 107;
		excp_532409.msg = new_py_string_176075(msg_532038);
		result_532026 = excp_532409;
		break BeforeRet;
		}
		
		if (!(isObj(self_no_cast_532011.m_type, NTI521178))) {
		F.line = 444;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(444, 32) `selfNoCast of PydictObject` "));
		}
		
		F.line = 444;
		var self_532601 = self_no_cast_532011;
		if (self_532601.writeLock) {
		F.line = 414;
		var msg_532603 = makeNimstrLit("Read failed because object is been written.");
		F.line = 415;
		F.line = 104;
		var excp_532605 = new_py_lock_error_simple_365601();
		F.line = 105;
		excp_532605.tk = 8;
		F.line = 106;
		excp_532605.thrown = true;
		F.line = 107;
		excp_532605.msg = new_py_string_176075(msg_532603);
		result_532026 = excp_532605;
		break BeforeRet;
		}
		
		F.line = 412;
		self_532601.readNum = addInt(self_532601.readNum, 1);
		F.line = 444;
		try {
		F.line = 127;
		var new_t_532616 = new_py_dict_522257();
		F.line = 128;
		nimCopy(new_t_532616.table, self_532601.table, NTI521188);
		Tmp1 = new_t_532616;
		} finally {
		framePtr = F;
		F.line = 417;
		self_532601.readNum = subInt(self_532601.readNum, 1);
		}
		result_532026 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_532026;

}
pydict_object_type_521222.magicMethods.Field22 = contains_pydict_object_magic_527051;
pydict_object_type_521222.magicMethods.Field25 = repr_pydict_object_magic_527827;
pydict_object_type_521222.magicMethods.Field23 = len_pydict_object_magic_530648;
pydict_object_type_521222.magicMethods.Field26 = new_pydict_object_magic_531027;
pydict_object_type_521222.magicMethods.Field32 = getitem_pydict_object_magic_531059;
pydict_object_type_521222.magicMethods.Field33 = setitem_pydict_object_magic_531581;
register_bltin_method_160182(pydict_object_type_521222, makeNimstrLit("copy"), copy_pydict_object_method_532009);
var bltin_dict_534014 = new_py_dict_522257();

function new_535206() {
	var result_535211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_535401 = null;
		F.line = 211;
		r_535401 = {m_type: NTI535150, refObj: null, id: 0, pyType: null};
		F.line = 212;
		result_535211 = r_535401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_535211;

}

function new_py_cell_simple_535201() {
	var result_535203 = null;

	var F={procname:"cellobject.newPyCellSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_535424 = new_535206();
		F.line = 561;
		obj_535424.pyType = py_cell_object_type_535156;
		F.line = 563;
		give_id_157814(obj_535424);
		result_535203 = obj_535424;
	framePtr = F.prev;

	return result_535203;

}

function new_py_cell_default_535821(args_535105) {
	var result_535824 = null;

	var F={procname:"cellobject.newPyCellDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_535824 = new_py_cell_simple_535201();
	framePtr = F.prev;

	return result_535824;

}
var py_cell_object_type_535156 = new_py_type_159261(makeNimstrLit("Cell"));
py_cell_object_type_535156.kind = 16;
py_cell_object_type_535156.magicMethods.Field26 = new_py_cell_default_535821;

function new_537206() {
	var result_537211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_537401 = null;
		F.line = 211;
		r_537401 = {m_type: NTI537083, back: null, code: null, globals: null, fastLocals: null, cellVars: null, id: 0, pyType: null};
		F.line = 212;
		result_537211 = r_537401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_537211;

}

function new_py_frame_simple_537201() {
	var result_537203 = null;

	var F={procname:"frameobject.newPyFrameSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_537424 = new_537206();
		F.line = 561;
		obj_537424.pyType = py_frame_object_type_537101;
		F.line = 563;
		give_id_157814(obj_537424);
		result_537203 = obj_537424;
	framePtr = F.prev;

	return result_537203;

}

function new_py_frame_default_537821(args_537038) {
	var result_537824 = null;

	var F={procname:"frameobject.newPyFrameDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_537824 = new_py_frame_simple_537201();
	framePtr = F.prev;

	return result_537824;

}
var py_frame_object_type_537101 = new_py_type_159261(makeNimstrLit("Frame"));
py_frame_object_type_537101.magicMethods.Field26 = new_py_frame_default_537821;

function new_540206() {
	var result_540211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_540401 = null;
		F.line = 211;
		r_540401 = {m_type: NTI540123, name: null, code: null, globals: null, closure: null, id: 0, pyType: null};
		F.line = 212;
		result_540211 = r_540401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_540211;

}

function new_py_function_simple_540201() {
	var result_540203 = null;

	var F={procname:"funcobject.newPyFunctionSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_540424 = new_540206();
		F.line = 561;
		obj_540424.pyType = py_function_object_type_540135;
		F.line = 563;
		give_id_157814(obj_540424);
		result_540203 = obj_540424;
	framePtr = F.prev;

	return result_540203;

}

function new_py_function_default_540821(args_540078) {
	var result_540824 = null;

	var F={procname:"funcobject.newPyFunctionDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_540824 = new_py_function_simple_540201();
	framePtr = F.prev;

	return result_540824;

}

function new_541206() {
	var result_541211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_541401 = null;
		F.line = 211;
		r_541401 = {m_type: NTI541100, fun: null, self: null, id: 0, pyType: null};
		F.line = 212;
		result_541211 = r_541401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_541211;

}

function new_py_bound_method_simple_541201() {
	var result_541203 = null;

	var F={procname:"funcobject.newPyBoundMethodSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_541424 = new_541206();
		F.line = 561;
		obj_541424.pyType = py_bound_method_object_type_541108;
		F.line = 563;
		give_id_157814(obj_541424);
		result_541203 = obj_541424;
	framePtr = F.prev;

	return result_541203;

}

function new_py_bound_method_default_541821(args_541055) {
	var result_541824 = null;

	var F={procname:"funcobject.newPyBoundMethodDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_541824 = new_py_bound_method_simple_541201();
	framePtr = F.prev;

	return result_541824;

}
var py_function_object_type_540135 = new_py_type_159261(makeNimstrLit("Function"));
py_function_object_type_540135.kind = 13;
py_function_object_type_540135.magicMethods.Field26 = new_py_function_default_540821;
var py_bound_method_object_type_541108 = new_py_type_159261(makeNimstrLit("BoundMethod"));
py_bound_method_object_type_541108.kind = 14;
py_bound_method_object_type_541108.magicMethods.Field26 = new_py_bound_method_default_541821;

function new_bound_method_542214(fun_542216, self_542217) {
	var result_542218 = null;

	var F={procname:"funcobject.newBoundMethod",prev:framePtr,filename:"../Objects/funcobject.nim",line:0};
	framePtr = F;
		F.line = 33;
		result_542218 = new_py_bound_method_simple_541201();
		F.line = 34;
		result_542218.fun = fun_542216;
		F.line = 35;
		result_542218.self = self_542217;
	framePtr = F.prev;

	return result_542218;

}

function get_py_function_object_magic_542232(self_no_cast_542234, other_542235) {
	var result_542236 = null;

	var F={procname:"funcobject.getPyFunctionObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_542234.m_type, NTI540123))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFunctionObject` "));
		}
		
		F.line = 438;
		var self_542401 = self_no_cast_542234;
		result_542236 = new_bound_method_542214(self_542401, other_542235);
	framePtr = F.prev;

	return result_542236;

}

function get_py_bound_method_object_magic_542416(self_no_cast_542418, other_542419) {
	var result_542420 = null;

	var F={procname:"funcobject.getPyBoundMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_542418.m_type, NTI541100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoundMethodObject` "));
		}
		
		F.line = 438;
		var self_542601 = self_no_cast_542418;
		result_542420 = self_542601;
	framePtr = F.prev;

	return result_542420;

}

function new_542806() {
	var result_542811 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_543001 = null;
		F.line = 211;
		r_543001 = {m_type: NTI542672, callable: null, id: 0, pyType: null};
		F.line = 212;
		result_542811 = r_543001;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_542811;

}

function new_py_static_method_simple_542801() {
	var result_542803 = null;

	var F={procname:"funcobject.newPyStaticMethodSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_543024 = new_542806();
		F.line = 561;
		obj_543024.pyType = py_static_method_object_type_542678;
		F.line = 563;
		give_id_157814(obj_543024);
		result_542803 = obj_543024;
	framePtr = F.prev;

	return result_542803;

}

function new_py_static_method_default_543421(args_542627) {
	var result_543424 = null;

	var F={procname:"funcobject.newPyStaticMethodDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_543424 = new_py_static_method_simple_542801();
	framePtr = F.prev;

	return result_543424;

}

function get_py_static_method_object_magic_543644(self_no_cast_543646, other_543647) {
	var result_543648 = null;

	var F={procname:"funcobject.getPyStaticMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_543646.m_type, NTI542672))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStaticMethodObject` "));
		}
		
		F.line = 438;
		var self_543801 = self_no_cast_543646;
		result_543648 = self_543801.callable;
	framePtr = F.prev;

	return result_543648;

}

function init_py_static_method_object_magic_543816(self_no_cast_543818, args_543832) {
	var result_543833 = null;

	var F={procname:"funcobject.initPyStaticMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_543832 != null ? args_543832.length : 0) == 1))) {
		F.line = 183;
		var msg_543845 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_543850 = mnewString(0);
		F.line = 185;
		if (fmt_res_543850 != null) { fmt_res_543850 = (fmt_res_543850).concat(makeNimstrLit(" argument (")); } else { fmt_res_543850 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_543850 != null) { fmt_res_543850 = (fmt_res_543850).concat(cstrToNimstr(((args_543832 != null ? args_543832.length : 0))+"")); } else { fmt_res_543850 = cstrToNimstr(((args_543832 != null ? args_543832.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_543850 != null) { fmt_res_543850 = (fmt_res_543850).concat(makeNimstrLit(" given)")); } else { fmt_res_543850 = makeNimstrLit(" given)"); };
		msg_543845 = nimCopy(null, (makeNimstrLit("init takes exactly 1")).concat(fmt_res_543850), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_544010 = mnewString(0);
			F.line = 187;
			if (fmt_res_544010 != null) { fmt_res_544010 = (fmt_res_544010).concat(makeNimstrLit(" argument (")); } else { fmt_res_544010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_544010 != null) { fmt_res_544010 = (fmt_res_544010).concat(cstrToNimstr(((args_543832 != null ? args_543832.length : 0))+"")); } else { fmt_res_544010 = cstrToNimstr(((args_543832 != null ? args_543832.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_544010 != null) { fmt_res_544010 = (fmt_res_544010).concat(makeNimstrLit(" given)")); } else { fmt_res_544010 = makeNimstrLit(" given)"); };
			msg_543845 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_544010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_544209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_544209.tk = 3;
		F.line = 106;
		excp_544209.thrown = true;
		F.line = 107;
		excp_544209.msg = new_py_string_176075(msg_543845);
		result_543833 = excp_544209;
		break BeforeRet;
		}
		
		F.line = 230;
		var callable_544211 = args_543832[chckIndx(0, 0, args_543832.length+0-1)-0];
		if (!(isObj(self_no_cast_543818.m_type, NTI542672))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyStaticMethodObject` "));
		}
		
		F.line = 438;
		var self_544401 = self_no_cast_543818;
		F.line = 52;
		self_544401.callable = callable_544211;
		result_543833 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_543833;

}
py_function_object_type_540135.magicMethods.Field34 = get_py_function_object_magic_542232;
py_bound_method_object_type_541108.magicMethods.Field34 = get_py_bound_method_object_magic_542416;
var py_static_method_object_type_542678 = new_py_type_159261(makeNimstrLit("StaticMethod"));
py_static_method_object_type_542678.magicMethods.Field26 = new_py_static_method_default_543421;
py_static_method_object_type_542678.magicMethods.Field34 = get_py_static_method_object_magic_543644;
py_static_method_object_type_542678.magicMethods.Field27 = init_py_static_method_object_magic_543816;

function new_545206() {
	var result_545211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_545401 = null;
		F.line = 211;
		r_545401 = {m_type: NTI545084, name: null, dict: null, id: 0, pyType: null};
		F.line = 212;
		result_545211 = r_545401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_545211;

}

function new_py_module_simple_545201() {
	var result_545203 = null;

	var F={procname:"moduleobject.newPyModuleSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_545424 = new_545206();
		F.line = 561;
		obj_545424.pyType = py_module_object_type_545090;
		F.line = 563;
		give_id_157814(obj_545424);
		F.line = 565;
		obj_545424.dict = new_py_dict_522257();
		result_545203 = obj_545424;
	framePtr = F.prev;

	return result_545203;

}

function new_py_module_default_545821(args_545039) {
	var result_545824 = null;

	var F={procname:"moduleobject.newPyModuleDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_545824 = new_py_module_simple_545201();
	framePtr = F.prev;

	return result_545824;

}
var py_module_object_type_545090 = new_py_type_159261(makeNimstrLit("Module"));
py_module_object_type_545090.magicMethods.Field26 = new_py_module_default_545821;

function new_547206() {
	var result_547211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_547401 = null;
		F.line = 211;
		r_547401 = {m_type: NTI547143, name: null, self: null, kind: 0, fun: 0, id: 0, pyType: null};
		F.line = 212;
		result_547211 = r_547401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_547211;

}

function new_py_nim_func_simple_547201() {
	var result_547203 = null;

	var F={procname:"methodobject.newPyNimFuncSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_547424 = new_547206();
		F.line = 561;
		obj_547424.pyType = py_nim_func_object_type_547155;
		F.line = 563;
		give_id_157814(obj_547424);
		result_547203 = obj_547424;
	framePtr = F.prev;

	return result_547203;

}

function new_py_nim_func_default_547821(args_547098) {
	var result_547824 = null;

	var F={procname:"methodobject.newPyNimFuncDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_547824 = new_py_nim_func_simple_547201();
	framePtr = F.prev;

	return result_547824;

}

function call_py_nim_func_object_magic_548044(self_no_cast_548046, args_548060) {
	var result_548061 = null;

	var F={procname:"methodobject.callPyNimFuncObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_548046.m_type, NTI547143))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyNimFuncObject` "));
		}
		
		F.line = 438;
		var self_548201 = self_no_cast_548046;
		F.line = 29;
		switch (self_548201.kind) {
		case 0:
			F.line = 31;
			result_548061 = self_548201.fun(args_548060);
			break BeforeRet;
			break;
		case 1:
			if (!(((args_548060 != null ? args_548060.length : 0) == 0))) {
			F.line = 183;
			var msg_548215 = null;
			if (false) {
			F.line = 185;
			F.line = 185;
			var fmt_res_548220 = mnewString(0);
			F.line = 185;
			if (fmt_res_548220 != null) { fmt_res_548220 = (fmt_res_548220).concat(makeNimstrLit(" argument (")); } else { fmt_res_548220 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_548220 != null) { fmt_res_548220 = (fmt_res_548220).concat(cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"")); } else { fmt_res_548220 = cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"").slice(); };
			F.line = 185;
			if (fmt_res_548220 != null) { fmt_res_548220 = (fmt_res_548220).concat(makeNimstrLit(" given)")); } else { fmt_res_548220 = makeNimstrLit(" given)"); };
			msg_548215 = nimCopy(null, (makeNimstrLit(" takes exactly 0")).concat(fmt_res_548220), NTI138);
			}
			else {
				F.line = 187;
				F.line = 187;
				var fmt_res_548410 = mnewString(0);
				F.line = 187;
				if (fmt_res_548410 != null) { fmt_res_548410 = (fmt_res_548410).concat(makeNimstrLit(" argument (")); } else { fmt_res_548410 = makeNimstrLit(" argument ("); };
				F.line = 270;
				if (fmt_res_548410 != null) { fmt_res_548410 = (fmt_res_548410).concat(cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"")); } else { fmt_res_548410 = cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"").slice(); };
				F.line = 187;
				if (fmt_res_548410 != null) { fmt_res_548410 = (fmt_res_548410).concat(makeNimstrLit(" given)")); } else { fmt_res_548410 = makeNimstrLit(" given)"); };
				msg_548215 = nimCopy(null, (makeNimstrLit("expected 0")).concat(fmt_res_548410), NTI138);
			}
			
			F.line = 188;
			F.line = 104;
			var excp_548609 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_548609.tk = 3;
			F.line = 106;
			excp_548609.thrown = true;
			F.line = 107;
			excp_548609.msg = new_py_string_176075(msg_548215);
			result_548061 = excp_548609;
			break BeforeRet;
			}
			
			F.line = 34;
			result_548061 = self_548201.fun(self_548201.self);
			break BeforeRet;
			break;
		case 2:
			if (!(((args_548060 != null ? args_548060.length : 0) == 1))) {
			F.line = 183;
			var msg_548623 = null;
			if (false) {
			F.line = 185;
			F.line = 185;
			var fmt_res_548628 = mnewString(0);
			F.line = 185;
			if (fmt_res_548628 != null) { fmt_res_548628 = (fmt_res_548628).concat(makeNimstrLit(" argument (")); } else { fmt_res_548628 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_548628 != null) { fmt_res_548628 = (fmt_res_548628).concat(cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"")); } else { fmt_res_548628 = cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"").slice(); };
			F.line = 185;
			if (fmt_res_548628 != null) { fmt_res_548628 = (fmt_res_548628).concat(makeNimstrLit(" given)")); } else { fmt_res_548628 = makeNimstrLit(" given)"); };
			msg_548623 = nimCopy(null, (makeNimstrLit(" takes exactly 1")).concat(fmt_res_548628), NTI138);
			}
			else {
				F.line = 187;
				F.line = 187;
				var fmt_res_548810 = mnewString(0);
				F.line = 187;
				if (fmt_res_548810 != null) { fmt_res_548810 = (fmt_res_548810).concat(makeNimstrLit(" argument (")); } else { fmt_res_548810 = makeNimstrLit(" argument ("); };
				F.line = 270;
				if (fmt_res_548810 != null) { fmt_res_548810 = (fmt_res_548810).concat(cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"")); } else { fmt_res_548810 = cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"").slice(); };
				F.line = 187;
				if (fmt_res_548810 != null) { fmt_res_548810 = (fmt_res_548810).concat(makeNimstrLit(" given)")); } else { fmt_res_548810 = makeNimstrLit(" given)"); };
				msg_548623 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_548810), NTI138);
			}
			
			F.line = 188;
			F.line = 104;
			var excp_549009 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_549009.tk = 3;
			F.line = 106;
			excp_549009.thrown = true;
			F.line = 107;
			excp_549009.msg = new_py_string_176075(msg_548623);
			result_548061 = excp_549009;
			break BeforeRet;
			}
			
			F.line = 37;
			result_548061 = self_548201.fun(self_548201.self, args_548060[chckIndx(0, 0, args_548060.length+0-1)-0]);
			break BeforeRet;
			break;
		case 3:
			if (!(((args_548060 != null ? args_548060.length : 0) == 2))) {
			F.line = 183;
			var msg_549023 = null;
			if (false) {
			F.line = 185;
			F.line = 185;
			var fmt_res_549028 = mnewString(0);
			F.line = 185;
			if (fmt_res_549028 != null) { fmt_res_549028 = (fmt_res_549028).concat(makeNimstrLit(" argument (")); } else { fmt_res_549028 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_549028 != null) { fmt_res_549028 = (fmt_res_549028).concat(cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"")); } else { fmt_res_549028 = cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"").slice(); };
			F.line = 185;
			if (fmt_res_549028 != null) { fmt_res_549028 = (fmt_res_549028).concat(makeNimstrLit(" given)")); } else { fmt_res_549028 = makeNimstrLit(" given)"); };
			msg_549023 = nimCopy(null, (makeNimstrLit(" takes exactly 2")).concat(fmt_res_549028), NTI138);
			}
			else {
				F.line = 187;
				F.line = 187;
				var fmt_res_549210 = mnewString(0);
				F.line = 187;
				if (fmt_res_549210 != null) { fmt_res_549210 = (fmt_res_549210).concat(makeNimstrLit(" argument (")); } else { fmt_res_549210 = makeNimstrLit(" argument ("); };
				F.line = 270;
				if (fmt_res_549210 != null) { fmt_res_549210 = (fmt_res_549210).concat(cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"")); } else { fmt_res_549210 = cstrToNimstr(((args_548060 != null ? args_548060.length : 0))+"").slice(); };
				F.line = 187;
				if (fmt_res_549210 != null) { fmt_res_549210 = (fmt_res_549210).concat(makeNimstrLit(" given)")); } else { fmt_res_549210 = makeNimstrLit(" given)"); };
				msg_549023 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_549210), NTI138);
			}
			
			F.line = 188;
			F.line = 104;
			var excp_549409 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_549409.tk = 3;
			F.line = 106;
			excp_549409.thrown = true;
			F.line = 107;
			excp_549409.msg = new_py_string_176075(msg_549023);
			result_548061 = excp_549409;
			break BeforeRet;
			}
			
			F.line = 40;
			result_548061 = self_548201.fun(self_548201.self, args_548060[chckIndx(0, 0, args_548060.length+0-1)-0], args_548060[chckIndx(1, 0, args_548060.length+0-1)-0]);
			break BeforeRet;
			break;
		case 4:
			F.line = 42;
			result_548061 = self_548201.fun(self_548201.self, args_548060);
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_548061;

}
var py_nim_func_object_type_547155 = new_py_type_159261(makeNimstrLit("NimFunc"));
py_nim_func_object_type_547155.kind = 12;
py_nim_func_object_type_547155.magicMethods.Field26 = new_py_nim_func_default_547821;
py_nim_func_object_type_547155.magicMethods.Field31 = call_py_nim_func_object_magic_548044;
var val_stack_551095 = [null];

function new_588406() {
	var result_588411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_588601 = null;
		F.line = 211;
		r_588601 = {m_type: NTI588190, start: null, ending: null, step: null, length: null, id: 0, pyType: null};
		F.line = 212;
		result_588411 = r_588601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_588411;

}

function new_py_range_simple_588401() {
	var result_588403 = null;

	var F={procname:"rangeobject.newPyRangeSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_588624 = new_588406();
		F.line = 561;
		obj_588624.pyType = py_range_object_type_588202;
		F.line = 563;
		give_id_157814(obj_588624);
		result_588403 = obj_588624;
	framePtr = F.prev;

	return result_588403;

}

function new_py_range_default_589021(args_588145) {
	var result_589024 = null;

	var F={procname:"rangeobject.newPyRangeDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_589024 = new_py_range_simple_588401();
	framePtr = F.prev;

	return result_589024;

}

function len_py_range_object_magic_589244(self_no_cast_589246) {
	var result_589247 = null;

	var F={procname:"rangeobject.lenPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_589246.m_type, NTI588190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_589401 = self_no_cast_589246;
		result_589247 = self_589401.length;
	framePtr = F.prev;

	return result_589247;

}

function repr_py_range_object_magic_589416(self_no_cast_589418) {
	var result_589419 = null;

	var F={procname:"rangeobject.reprPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_589418.m_type, NTI588190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_589601 = self_no_cast_589418;
		F.line = 21;
		var fmt_res_589605 = mnewString(0);
		F.line = 21;
		if (fmt_res_589605 != null) { fmt_res_589605 = (fmt_res_589605).concat(makeNimstrLit("range(")); } else { fmt_res_589605 = makeNimstrLit("range("); };
		F.line = 270;
		if (fmt_res_589605 != null) { fmt_res_589605 = (fmt_res_589605).concat(cstrToNimstr((self_589601.start.v)+"")); } else { fmt_res_589605 = cstrToNimstr((self_589601.start.v)+"").slice(); };
		F.line = 21;
		if (fmt_res_589605 != null) { fmt_res_589605 = (fmt_res_589605).concat(makeNimstrLit(", ")); } else { fmt_res_589605 = makeNimstrLit(", "); };
		F.line = 270;
		if (fmt_res_589605 != null) { fmt_res_589605 = (fmt_res_589605).concat(cstrToNimstr((self_589601.ending.v)+"")); } else { fmt_res_589605 = cstrToNimstr((self_589601.ending.v)+"").slice(); };
		F.line = 21;
		if (fmt_res_589605 != null) { fmt_res_589605 = (fmt_res_589605).concat(makeNimstrLit(", ")); } else { fmt_res_589605 = makeNimstrLit(", "); };
		F.line = 270;
		if (fmt_res_589605 != null) { fmt_res_589605 = (fmt_res_589605).concat(cstrToNimstr((self_589601.step.v)+"")); } else { fmt_res_589605 = cstrToNimstr((self_589601.step.v)+"").slice(); };
		F.line = 21;
		if (fmt_res_589605 != null) { fmt_res_589605 = (fmt_res_589605).concat(makeNimstrLit(", ")); } else { fmt_res_589605 = makeNimstrLit(", "); };
		F.line = 270;
		if (fmt_res_589605 != null) { fmt_res_589605 = (fmt_res_589605).concat(cstrToNimstr((self_589601.length.v)+"")); } else { fmt_res_589605 = cstrToNimstr((self_589601.length.v)+"").slice(); };
		F.line = 21;
		if (fmt_res_589605 != null) { fmt_res_589605 = (fmt_res_589605).concat(makeNimstrLit(")")); } else { fmt_res_589605 = makeNimstrLit(")"); };
		result_589419 = new_py_string_176075(fmt_res_589605);
	framePtr = F.prev;

	return result_589419;

}

function init_py_range_object_magic_590415(self_no_cast_590417, args_590431) {
	var result_590432 = null;

	var F={procname:"rangeobject.initPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_590417.m_type, NTI588190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_590601 = self_no_cast_590417;
		L1: do {
			F.line = 25;
			var arg_590610 = null;
			F.line = 3911;
			var i_590640 = 0;
			F.line = 3912;
			var l_590642 = (args_590431 != null ? args_590431.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_590640 < l_590642)) break L3;
						F.line = 3914;
						arg_590610 = args_590431[chckIndx(i_590640, 0, args_590431.length+0-1)-0];
						if (!(of_py_int_object_374117(arg_590610))) {
						F.line = 29;
						var msg_590611 = makeNimstrLit("range() only support int arguments");
						F.line = 30;
						F.line = 104;
						var excp_590613 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_590613.tk = 3;
						F.line = 106;
						excp_590613.thrown = true;
						F.line = 107;
						excp_590613.msg = new_py_string_176075(msg_590611);
						result_590432 = excp_590613;
						break BeforeRet;
						}
						
						F.line = 3915;
						i_590640 = addInt(i_590640, 1);
						if (!(((args_590431 != null ? args_590431.length : 0) == l_590642))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 31;
		var start_590615 = null;
		F.line = 31;
		var ending_590616 = null;
		F.line = 31;
		var step_590617 = null;
		F.line = 32;
		switch ((args_590431 != null ? args_590431.length : 0)) {
		case 1:
			F.line = 34;
			start_590615 = new_py_int_376142(0);
			F.line = 35;
			ending_590616 = args_590431[chckIndx(0, 0, args_590431.length+0-1)-0];
			F.line = 36;
			step_590617 = new_py_int_376142(1);
			break;
		case 2:
			F.line = 38;
			start_590615 = args_590431[chckIndx(0, 0, args_590431.length+0-1)-0];
			F.line = 39;
			ending_590616 = args_590431[chckIndx(1, 0, args_590431.length+0-1)-0];
			F.line = 40;
			step_590617 = new_py_int_376142(1);
			break;
		case 3:
			F.line = 42;
			start_590615 = args_590431[chckIndx(0, 0, args_590431.length+0-1)-0];
			F.line = 43;
			ending_590616 = args_590431[chckIndx(1, 0, args_590431.length+0-1)-0];
			F.line = 44;
			step_590617 = args_590431[chckIndx(2, 0, args_590431.length+0-1)-0];
			if ((step_590617.v == 0)) {
			F.line = 46;
			var msg_590625 = makeNimstrLit("range() step must not be 0");
			F.line = 47;
			F.line = 104;
			var excp_590627 = new_py_value_error_simple_362601();
			F.line = 105;
			excp_590627.tk = 5;
			F.line = 106;
			excp_590627.thrown = true;
			F.line = 107;
			excp_590627.msg = new_py_string_176075(msg_590625);
			result_590432 = excp_590627;
			break BeforeRet;
			}
			
			break;
		default: 
			F.line = 49;
			var msg_590629 = makeNimstrLit("range() expected 1-3 arguments");
			F.line = 50;
			F.line = 104;
			var excp_590631 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_590631.tk = 3;
			F.line = 106;
			excp_590631.thrown = true;
			F.line = 107;
			excp_590631.msg = new_py_string_176075(msg_590629);
			result_590432 = excp_590631;
			break BeforeRet;
			break;
		}
		F.line = 51;
		var length_590633 = 0;
		if ((0 < step_590617.v)) {
		F.line = 57;
		length_590633 = divInt(subInt(addInt(subInt(ending_590616.v, start_590615.v), step_590617.v), 1), step_590617.v);
		}
		else {
		if ((step_590617.v < 0)) {
		F.line = 60;
		length_590633 = divInt(subInt(subInt(addInt(negInt(ending_590616.v), start_590615.v), step_590617.v), 1), negInt(step_590617.v));
		}
		}
		if ((length_590633 < 0)) {
		F.line = 62;
		length_590633 = 0;
		}
		
		F.line = 63;
		self_590601.start = start_590615;
		F.line = 64;
		self_590601.ending = ending_590616;
		F.line = 65;
		self_590601.step = step_590617;
		F.line = 66;
		self_590601.length = new_py_int_376142(length_590633);
		result_590432 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_590432;

}

function new_590806() {
	var result_590811 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_591001 = null;
		F.line = 211;
		r_591001 = {m_type: NTI590712, start: null, step: null, length: null, index: null, id: 0, pyType: null};
		F.line = 212;
		result_590811 = r_591001;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_590811;

}

function new_py_range_iter_simple_590801() {
	var result_590803 = null;

	var F={procname:"rangeobject.newPyRangeIterSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_591024 = new_590806();
		F.line = 561;
		obj_591024.pyType = py_range_iter_object_type_590724;
		F.line = 563;
		give_id_157814(obj_591024);
		result_590803 = obj_591024;
	framePtr = F.prev;

	return result_590803;

}

function new_py_range_iter_default_591421(args_590667) {
	var result_591424 = null;

	var F={procname:"rangeobject.newPyRangeIterDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_591424 = new_py_range_iter_simple_590801();
	framePtr = F.prev;

	return result_591424;

}

function iter_py_range_object_magic_591644(self_no_cast_591646) {
	var result_591647 = null;

	var F={procname:"rangeobject.iterPyRangeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_591646.m_type, NTI588190))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeObject` "));
		}
		
		F.line = 438;
		var self_591801 = self_no_cast_591646;
		F.line = 78;
		var iter_591802 = new_py_range_iter_simple_590801();
		F.line = 79;
		iter_591802.start = self_591801.start;
		F.line = 80;
		iter_591802.step = self_591801.step;
		F.line = 81;
		iter_591802.length = self_591801.length;
		F.line = 82;
		iter_591802.index = new_py_int_376142(0);
		result_591647 = iter_591802;
	framePtr = F.prev;

	return result_591647;

}

function iter_py_range_iter_object_magic_591817(self_no_cast_591819) {
	var result_591820 = null;

	var F={procname:"rangeobject.iterPyRangeIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_591819.m_type, NTI590712))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeIterObject` "));
		}
		
		F.line = 438;
		var self_592001 = self_no_cast_591819;
		result_591820 = self_592001;
	framePtr = F.prev;

	return result_591820;

}

function iternext_py_range_iter_object_magic_592016(self_no_cast_592018) {
	var result_592019 = null;

	var F={procname:"rangeobject.iternextPyRangeIterObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_592018.m_type, NTI590712))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyRangeIterObject` "));
		}
		
		F.line = 438;
		var self_592201 = self_no_cast_592018;
			F.line = 56;
			if ((self_592201.index.pyType === null)) {
			F.line = 2895;
			var e_592228 = null;
			F.line = 2896;
			e_592228 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_592228.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_592228.parent = null;
			F.line = 26;
			raiseException(e_592228, "InternalError");
			}
			
			F.line = 27;
			var fun_592402 = self_592201.index.pyType.magicMethods.Field16;
			if ((fun_592402 === null)) {
			F.line = 29;
			var obj_type_str_592411 = self_592201.index.pyType.name;
			F.line = 30;
			var method_str_592413 = makeNimstrLit("lt");
			F.line = 31;
			var msg_592415 = (makeNimstrLit("No ")).concat(method_str_592413,makeNimstrLit(" method for "),obj_type_str_592411,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_592417 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_592417.tk = 3;
			F.line = 106;
			excp_592417.thrown = true;
			F.line = 107;
			excp_592417.msg = new_py_string_176075(msg_592415);
			var excp_592420 = excp_592417;
			F.line = 36;
			result_592019 = excp_592420;
			break BeforeRet;
			}
			
			var fun_592602 = fun_592402;
			F.line = 57;
			var res_592604 = fun_592602(self_592201.index, self_592201.length);
		if ((res_592604 == py_true_obj_354074)) {
		F.line = 91;
		result_592019 = new_py_int_376142(addInt(self_592201.start.v, mulInt(self_592201.index.v, self_592201.step.v)));
		F.line = 92;
		F.line = 56;
		if ((self_592201.index.pyType === null)) {
		F.line = 2895;
		var e_592838 = null;
		F.line = 2896;
		e_592838 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_592838.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_592838.parent = null;
		F.line = 26;
		raiseException(e_592838, "InternalError");
		}
		
		F.line = 27;
		var fun_593002 = self_592201.index.pyType.magicMethods.Field0;
		if ((fun_593002 === null)) {
		F.line = 29;
		var obj_type_str_593011 = self_592201.index.pyType.name;
		F.line = 30;
		var method_str_593013 = makeNimstrLit("add");
		F.line = 31;
		var msg_593015 = (makeNimstrLit("No ")).concat(method_str_593013,makeNimstrLit(" method for "),obj_type_str_593011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_593017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_593017.tk = 3;
		F.line = 106;
		excp_593017.thrown = true;
		F.line = 107;
		excp_593017.msg = new_py_string_176075(msg_593015);
		var excp_593020 = excp_593017;
		F.line = 36;
		result_592019 = excp_593020;
		break BeforeRet;
		}
		
		var fun_593202 = fun_593002;
		F.line = 57;
		var res_593204 = fun_593202(self_592201.index, new_py_int_376142(1));
		var new_index_593401 = res_593204;
		F.line = 93;
		self_592201.index = new_index_593401;
		}
		else {
			F.line = 95;
			F.line = 97;
			var excp_593403 = new_py_stop_iter_error_simple_364601();
			F.line = 98;
			excp_593403.tk = 7;
			F.line = 99;
			excp_593403.thrown = true;
			result_592019 = excp_593403;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_592019;

}
var py_range_object_type_588202 = new_py_type_159261(makeNimstrLit("Range"));
py_range_object_type_588202.magicMethods.Field26 = new_py_range_default_589021;
py_range_object_type_588202.magicMethods.Field23 = len_py_range_object_magic_589244;
py_range_object_type_588202.magicMethods.Field25 = repr_py_range_object_magic_589416;
py_range_object_type_588202.magicMethods.Field27 = init_py_range_object_magic_590415;
var py_range_iter_object_type_590724 = new_py_type_159261(makeNimstrLit("RangeIter"));
py_range_iter_object_type_590724.magicMethods.Field26 = new_py_range_iter_default_591421;
py_range_object_type_588202.magicMethods.Field36 = iter_py_range_object_magic_591644;
py_range_iter_object_type_590724.magicMethods.Field36 = iter_py_range_iter_object_magic_591817;
py_range_iter_object_type_590724.magicMethods.Field37 = iternext_py_range_iter_object_magic_592016;

function add_quoted_489609(s_489613, s_489613_Idx, x_489615) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4110;
		if (s_489613[s_489613_Idx] != null) { s_489613[s_489613_Idx] = (s_489613[s_489613_Idx]).concat(HEX24_157579(x_489615)); } else { s_489613[s_489613_Idx] = HEX24_157579(x_489615).slice(); };
	framePtr = F.prev;

	
}

function collection_to_string_489245(x_489249, prefix_489251, separator_489253, suffix_489255) {
	var result_489256 = [null];

	var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2631;
		result_489256[0] = nimCopy(null, prefix_489251, NTI138);
		F.line = 2632;
		var first_element_489257 = true;
		L1: do {
			F.line = 2633;
			var value_489415 = null;
			F.line = 3911;
			var i_489818 = 0;
			F.line = 3912;
			var l_489820 = (x_489249 != null ? x_489249.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_489818 < l_489820)) break L3;
						F.line = 3914;
						value_489415 = x_489249[chckIndx(i_489818, 0, x_489249.length+0-1)-0];
						if (first_element_489257) {
						F.line = 2635;
						first_element_489257 = false;
						}
						else {
							F.line = 2637;
						if (result_489256[0] != null) { result_489256[0] = (result_489256[0]).concat(separator_489253); } else { result_489256[0] = separator_489253.slice(); };
						}
						
						if ((value_489415 === null)) {
						F.line = 2642;
						if (result_489256[0] != null) { result_489256[0] = (result_489256[0]).concat(makeNimstrLit("nil")); } else { result_489256[0] = makeNimstrLit("nil"); };
						}
						else {
							F.line = 2644;
						add_quoted_489609(result_489256, 0, value_489415);
						}
						
						F.line = 3915;
						i_489818 = addInt(i_489818, 1);
						if (!(((x_489249 != null ? x_489249.length : 0) == l_489820))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2648;
		if (result_489256[0] != null) { result_489256[0] = (result_489256[0]).concat(suffix_489255); } else { result_489256[0] = suffix_489255.slice(); };
	framePtr = F.prev;

	return result_489256[0];

}

function HEX24_489237(x_489242) {
	var result_489243 = null;

	var F={procname:"$.$",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2659;
		result_489243 = nimCopy(null, collection_to_string_489245(x_489242, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);
	framePtr = F.prev;

	return result_489243;

}

function HEX5BHEX5D_584249(s_584256, x_584259) {
	var result_584261 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_584407 = subInt((s_584256 != null ? s_584256.length : 0), x_584259.a);
		F.line = 3707;
		var l_584607 = addInt(subInt(subInt((s_584256 != null ? s_584256.length : 0), x_584259.b), a_584407), 1);
		F.line = 3708;
		result_584261 = new Array(chckRange(l_584607, 0, 2147483647)); for (var i=0;i<chckRange(l_584607, 0, 2147483647);++i) {result_584261[i]=null;}		L1: do {
			F.line = 3709;
			var i_584627 = 0;
			F.line = 3617;
			var i_584635 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_584635 < l_584607)) break L3;
						F.line = 3619;
						i_584627 = i_584635;
						F.line = 3709;
						result_584261[chckIndx(i_584627, 0, result_584261.length+0-1)-0] = s_584256[chckIndx(addInt(i_584627, a_584407), 0, s_584256.length+0-1)-0];
						F.line = 3620;
						i_584635 = addInt(i_584635, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_584261;

}

function HEX2EHEX2E_584206(a_584211, b_584213) {
	var result_584221 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_584221.a = a_584211;
		F.line = 399;
		result_584221.b = b_584213;
	framePtr = F.prev;

	return result_584221;

}

function new_py_frame_538057() {
	var result_538059 = null;

	var F={procname:"frameobject.newPyFrame",prev:framePtr,filename:"../Objects/frameobject.nim",line:0};
	framePtr = F;
		F.line = 25;
		result_538059 = new_py_frame_simple_537201();
	framePtr = F.prev;

	return result_538059;

}

function new_seq_563054(len_563058) {
	var result_563060 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_563060 = new Array(len_563058); for (var i=0;i<len_563058;++i) {result_563060[i]=null;}	framePtr = F.prev;

	return result_563060;

}

function new_seq_586652(len_586656) {
	var result_586658 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_586658 = new Array(len_586656); for (var i=0;i<len_586656;++i) {result_586658[i]=null;}	framePtr = F.prev;

	return result_586658;

}

function new_py_cell_536057(content_536059) {
	var result_536060 = null;

	var F={procname:"cellobject.newPyCell",prev:framePtr,filename:"../Objects/cellobject.nim",line:0};
	framePtr = F;
		F.line = 8;
		result_536060 = new_py_cell_simple_535201();
		F.line = 9;
		result_536060.refObj = content_536059;
	framePtr = F.prev;

	return result_536060;

}

function of_py_cell_object_535158(obj_535095) {
	var result_535160 = false;

	var F={procname:"cellobject.ofPyCellObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_535160 = (obj_535095.pyType.kind == 16);
	framePtr = F.prev;

	return result_535160;

}

function new_py_frame_551050(fun_551052, args_551054, back_551055) {
	var result_583221 = null;

	var F={procname:"neval.newPyFrame",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 645;
		F.line = 645;
		var code_583222 = fun_551052.code;
		if (((code_583222.argScopes != null ? code_583222.argScopes.length : 0) < (args_551054 != null ? args_551054.length : 0))) {
		F.line = 648;
		F.line = 648;
		var fmt_res_583240 = mnewString(0);
		F.line = 260;
		if (fmt_res_583240 != null) { fmt_res_583240 = (fmt_res_583240).concat(fun_551052.name.str); } else { fmt_res_583240 = fun_551052.name.str.slice(); };
		F.line = 648;
		if (fmt_res_583240 != null) { fmt_res_583240 = (fmt_res_583240).concat(makeNimstrLit("() takes ")); } else { fmt_res_583240 = makeNimstrLit("() takes "); };
		F.line = 270;
		if (fmt_res_583240 != null) { fmt_res_583240 = (fmt_res_583240).concat(cstrToNimstr(((code_583222.argScopes != null ? code_583222.argScopes.length : 0))+"")); } else { fmt_res_583240 = cstrToNimstr(((code_583222.argScopes != null ? code_583222.argScopes.length : 0))+"").slice(); };
		F.line = 648;
		if (fmt_res_583240 != null) { fmt_res_583240 = (fmt_res_583240).concat(makeNimstrLit(" positional arguments but ")); } else { fmt_res_583240 = makeNimstrLit(" positional arguments but "); };
		F.line = 270;
		if (fmt_res_583240 != null) { fmt_res_583240 = (fmt_res_583240).concat(cstrToNimstr(((args_551054 != null ? args_551054.length : 0))+"")); } else { fmt_res_583240 = cstrToNimstr(((args_551054 != null ? args_551054.length : 0))+"").slice(); };
		F.line = 648;
		if (fmt_res_583240 != null) { fmt_res_583240 = (fmt_res_583240).concat(makeNimstrLit(" were given")); } else { fmt_res_583240 = makeNimstrLit(" were given"); };
		var msg_583808 = nimCopy(null, fmt_res_583240, NTI138);
		F.line = 649;
		F.line = 104;
		var excp_583810 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_583810.tk = 3;
		F.line = 106;
		excp_583810.thrown = true;
		F.line = 107;
		excp_583810.msg = new_py_string_176075(msg_583808);
		result_583221 = excp_583810;
		break BeforeRet;
		}
		else {
		if (((args_551054 != null ? args_551054.length : 0) < (code_583222.argScopes != null ? code_583222.argScopes.length : 0))) {
		F.line = 651;
		var diff_583840 = subInt((code_583222.argScopes != null ? code_583222.argScopes.length : 0), (args_551054 != null ? args_551054.length : 0));
		F.line = 652;
		F.line = 652;
		var fmt_res_583844 = mnewString(0);
		F.line = 260;
		if (fmt_res_583844 != null) { fmt_res_583844 = (fmt_res_583844).concat(fun_551052.name.str); } else { fmt_res_583844 = fun_551052.name.str.slice(); };
		F.line = 652;
		if (fmt_res_583844 != null) { fmt_res_583844 = (fmt_res_583844).concat(makeNimstrLit("() missing ")); } else { fmt_res_583844 = makeNimstrLit("() missing "); };
		F.line = 270;
		if (fmt_res_583844 != null) { fmt_res_583844 = (fmt_res_583844).concat(cstrToNimstr((diff_583840)+"")); } else { fmt_res_583844 = cstrToNimstr((diff_583840)+"").slice(); };
		F.line = 652;
		if (fmt_res_583844 != null) { fmt_res_583844 = (fmt_res_583844).concat(makeNimstrLit(" required positional argument: ")); } else { fmt_res_583844 = makeNimstrLit(" required positional argument: "); };
		F.line = 653;
		var fmt_res_584204 = mnewString(0);
		F.line = 270;
		if (fmt_res_584204 != null) { fmt_res_584204 = (fmt_res_584204).concat(HEX24_489237(HEX5BHEX5D_584249(code_583222.argNames, HEX2EHEX2E_584206(diff_583840, 1)))); } else { fmt_res_584204 = HEX24_489237(HEX5BHEX5D_584249(code_583222.argNames, HEX2EHEX2E_584206(diff_583840, 1))).slice(); };
		F.line = 653;
		if (fmt_res_584204 != null) { fmt_res_584204 = (fmt_res_584204).concat(makeNimstrLit(". ")); } else { fmt_res_584204 = makeNimstrLit(". "); };
		F.line = 270;
		if (fmt_res_584204 != null) { fmt_res_584204 = (fmt_res_584204).concat(cstrToNimstr(((args_551054 != null ? args_551054.length : 0))+"")); } else { fmt_res_584204 = cstrToNimstr(((args_551054 != null ? args_551054.length : 0))+"").slice(); };
		F.line = 653;
		if (fmt_res_584204 != null) { fmt_res_584204 = (fmt_res_584204).concat(makeNimstrLit(" args are given.")); } else { fmt_res_584204 = makeNimstrLit(" args are given."); };
		var msg_586608 = (fmt_res_583844).concat(fmt_res_584204);
		F.line = 654;
		F.line = 104;
		var excp_586610 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_586610.tk = 3;
		F.line = 106;
		excp_586610.thrown = true;
		F.line = 107;
		excp_586610.msg = new_py_string_176075(msg_586608);
		result_583221 = excp_586610;
		break BeforeRet;
		}
		}
		F.line = 655;
		var frame_586612 = new_py_frame_538057();
		F.line = 656;
		frame_586612.back = back_551055;
		F.line = 657;
		frame_586612.code = code_583222;
		F.line = 658;
		frame_586612.globals = fun_551052.globals;
		F.line = 660;
		frame_586612.fastLocals = nimCopy(null, new_seq_563054(chckRange((code_583222.localVars != null ? code_583222.localVars.length : 0), 0, 2147483647)), NTI563059);
		F.line = 661;
		frame_586612.cellVars = nimCopy(null, new_seq_586652(chckRange(addInt((code_583222.cellVars != null ? code_583222.cellVars.length : 0), (code_583222.freeVars != null ? code_583222.freeVars.length : 0)), 0, 2147483647)), NTI586657);
		L1: do {
			F.line = 663;
			var i_586731 = 0;
			F.line = 3616;
			var colontmp__587611 = 0;
			F.line = 663;
			colontmp__587611 = (code_583222.cellVars != null ? code_583222.cellVars.length : 0);
			F.line = 3617;
			var i_587614 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_587614 < colontmp__587611)) break L3;
						F.line = 3619;
						i_586731 = i_587614;
						F.line = 664;
						frame_586612.cellVars[chckIndx(i_586731, 0, frame_586612.cellVars.length+0-1)-0] = new_py_cell_536057(null);
						F.line = 3620;
						i_587614 = addInt(i_587614, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 666;
			var i_586749 = 0;
			F.line = 3616;
			var colontmp__587617 = 0;
			F.line = 666;
			colontmp__587617 = (args_551054 != null ? args_551054.length : 0);
			F.line = 3617;
			var i_587620 = 0;
			L5: do {
				F.line = 3618;
					L6: while (true) {
					if (!(i_587620 < colontmp__587617)) break L6;
						F.line = 3619;
						i_586749 = i_587620;
						F.line = 667;
						var colontmp__598153 = {Field0: 0, Field1: 0};
						F.line = 667;
						var scope_586750 = 0;
						F.line = 667;
						var scope_idx_586751 = 0;
						F.line = 667;
						nimCopy(colontmp__598153, code_583222.argScopes[chckIndx(i_586749, 0, code_583222.argScopes.length+0-1)-0], NTI487148);
						F.line = 667;
						scope_586750 = colontmp__598153["Field0"];
						F.line = 667;
						scope_idx_586751 = colontmp__598153["Field1"];
						F.line = 668;
						switch (scope_586750) {
						case 0:
							F.line = 670;
							frame_586612.fastLocals[chckIndx(scope_idx_586751, 0, frame_586612.fastLocals.length+0-1)-0] = args_551054[chckIndx(i_586749, 0, args_551054.length+0-1)-0];
							break;
						case 3:
							F.line = 2895;
							var e_586759 = null;
							F.line = 2896;
							e_586759 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 25;
							e_586759.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
							F.line = 2891;
							e_586759.parent = null;
							F.line = 672;
							raiseException(e_586759, "InternalError");
							break;
						case 1:
							F.line = 674;
							frame_586612.cellVars[chckIndx(scope_idx_586751, 0, frame_586612.cellVars.length+0-1)-0].refObj = args_551054[chckIndx(i_586749, 0, args_551054.length+0-1)-0];
							break;
						case 2:
							F.line = 2895;
							var e_586808 = null;
							F.line = 2896;
							e_586808 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 676;
							e_586808.message = nimCopy(null, makeNimstrLit("arguments can\'t be free"), NTI138);
							F.line = 2891;
							e_586808.parent = null;
							F.line = 676;
							raiseException(e_586808, "InternalError");
							break;
						}
						F.line = 3620;
						i_587620 = addInt(i_587620, 1);
					}
			} while(false);
		} while(false);
		if ((fun_551052.closure === null)) {
		if (!(((code_583222.freeVars != null ? code_583222.freeVars.length : 0) == 0))) {
		F.line = 679;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(679, 12) `len(code.freeVars) == 0` "));
		}
		
		}
		else {
			if (!(((code_583222.freeVars != null ? code_583222.freeVars.length : 0) == (fun_551052.closure.items != null ? fun_551052.closure.items.length : 0)))) {
			F.line = 681;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(681, 12) `len(code.freeVars) == len(fun.closure.items)` "));
			}
			
			L7: do {
				F.line = 682;
				var idx_587414 = 0;
				F.line = 682;
				var c_587415 = null;
				F.line = 2352;
				var colontmp__587623 = null;
				F.line = 682;
				colontmp__587623 = fun_551052.closure.items;
				F.line = 2354;
				var i_587626 = 0;
				L8: do {
					F.line = 2355;
						L9: while (true) {
						if (!(i_587626 < (colontmp__587623 != null ? colontmp__587623.length : 0))) break L9;
							F.line = 2356;
							idx_587414 = i_587626;
							F.line = 2356;
							c_587415 = colontmp__587623[chckIndx(i_587626, 0, colontmp__587623.length+0-1)-0];
							if (!(of_py_cell_object_535158(c_587415))) {
							F.line = 683;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(683, 14) `ofPyCellObject(c)` "));
							}
							
							F.line = 684;
							frame_586612.cellVars[chckIndx(addInt((code_583222.cellVars != null ? code_583222.cellVars.length : 0), idx_587414), 0, frame_586612.cellVars.length+0-1)-0] = c_587415;
							F.line = 2357;
							i_587626 = addInt(i_587626, 1);
						}
				} while(false);
			} while(false);
		}
		
		result_583221 = frame_586612;
	} while (false);
	framePtr = F.prev;

	return result_583221;

}

function HEX5BHEX5D_551617(s_551623, i_551625) {
	var result_551627 = [null, 0];
	var result_551627_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_551627 = s_551623; result_551627_Idx = chckIndx(subInt((s_551623 != null ? s_551623.length : 0), i_551625), 0, s_551623.length+0-1)-0;
	framePtr = F.prev;

	return [result_551627, result_551627_Idx];

}

function HEX5BHEX5DHEX3D_552604(s_552610, i_552612, x_552614) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3735;
		s_552610[chckIndx(subInt((s_552610 != null ? s_552610.length : 0), i_552612), 0, s_552610.length+0-1)-0] = x_552614;
	framePtr = F.prev;

	
}

function HEX5BHEX5D_523542(t_523549, key_523551) {
	var result_523553 = [null, 0];
	var result_523553_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_523555 = [0];
		F.line = 161;
		var index_523569 = raw_get_522600(t_523549, key_523551, hc_523555, 0);
		if ((0 <= index_523569)) {
		F.line = 162;
		result_523553 = t_523549.data[chckIndx(index_523569, 0, t_523549.data.length+0-1)-0]; result_523553_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_523806 = null;
			F.line = 2896;
			e_523806 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_523806.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_157579(key_523551)), NTI138);
			F.line = 2891;
			e_523806.parent = null;
			F.line = 165;
			raiseException(e_523806, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_523553, result_523553_Idx];

}

function HEX5BHEX5D_523323(dict_523325, key_523326) {
		var Tmp1;

	var result_523327 = null;

	var F={procname:"dictobject.[]",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 53;
		result_523327 = (Tmp1 = HEX5BHEX5D_523542(dict_523325.table, key_523326), Tmp1[0])[Tmp1[1]];
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_523327;

}

function HEX5BHEX5D_561636(s_561642, i_561644) {
	var result_561646 = [null, 0];
	var result_561646_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_561646 = s_561642; result_561646_Idx = chckIndx(subInt((s_561642 != null ? s_561642.length : 0), i_561644), 0, s_561642.length+0-1)-0;
	framePtr = F.prev;

	return [result_561646, result_561646_Idx];

}

function pop_561671(s_561677, s_561677_Idx) {
	var result_561678 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_561686 = subInt((s_561677[s_561677_Idx] != null ? s_561677[s_561677_Idx].length : 0), 1);
		F.line = 2525;
		result_561678 = s_561677[s_561677_Idx][chckIndx(l_561686, 0, s_561677[s_561677_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_561677[s_561677_Idx].length < chckRange(l_561686, 0, 2147483647)) { for (var i=s_561677[s_561677_Idx].length;i<chckRange(l_561686, 0, 2147483647);++i) s_561677[s_561677_Idx].push(null); }
               else { s_561677[s_561677_Idx].length = chckRange(l_561686, 0, 2147483647); };
	framePtr = F.prev;

	return result_561678;

}

function of_py_list_object_505271(obj_505200) {
	var result_505273 = false;

	var F={procname:"listobject.ofPyListObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_505273 = (obj_505200.pyType.kind == 9);
	framePtr = F.prev;

	return result_505273;

}

function HEX5BHEX5DHEX3D_523842(dict_523844, key_523845, value_523846) {
	var F={procname:"dictobject.[]=",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		F.line = 57;
		HEX5BHEX5DHEX3D_523993(dict_523844.table, key_523845, value_523846);
	framePtr = F.prev;

	
}

function new_py_list_506273(items_506276) {
	var result_506277 = null;

	var F={procname:"listobject.newPyList",prev:framePtr,filename:"../Objects/listobject.nim",line:0};
	framePtr = F;
		F.line = 21;
		result_506277 = new_py_list_506257();
		F.line = 22;
		result_506277.items = nimCopy(null, items_506276, NTI506275);
	framePtr = F.prev;

	return result_506277;

}

function is_exception_type_486113(obj_486115) {
	var result_486116 = false;

	var F={procname:"exceptionsImpl.isExceptionType",prev:framePtr,filename:"../Objects/exceptionsImpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 66;
		if (!((obj_486115.pyType.kind == 7))) {
		F.line = 67;
		result_486116 = false;
		break BeforeRet;
		}
		
		F.line = 68;
		var obj_type_486126 = obj_486115;
		result_486116 = (obj_type_486126.kind == 3);
	} while (false);
	framePtr = F.prev;

	return result_486116;

}

function match_excp_486072(target_486074, current_486075) {
	var result_486076 = null;

	var F={procname:"exceptionsImpl.matchExcp",prev:framePtr,filename:"../Objects/exceptionsImpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 57;
		F.line = 57;
		var tp_486077 = current_486075.pyType;
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!!((tp_486077 == null))) break L2;
					if ((tp_486077 == target_486074)) {
					F.line = 60;
					result_486076 = py_true_obj_354074;
					break BeforeRet;
					}
					
					F.line = 61;
					tp_486077 = tp_486077.base;
				}
		} while(false);
		result_486076 = py_false_obj_354075;
	} while (false);
	framePtr = F.prev;

	return result_486076;

}

function py_import_551059(name_551061) {
	var result_582980 = null;

	var F={procname:"neval.pyImport",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
		F.line = 609;
		F.line = 104;
		var excp_582982 = new_py_runtime_error_simple_371601();
		F.line = 105;
		excp_582982.tk = 14;
		F.line = 106;
		excp_582982.thrown = true;
		F.line = 107;
		excp_582982.msg = new_py_string_176075(makeNimstrLit("Can\'t import in js mode"));
		result_582980 = excp_582982;
	framePtr = F.prev;

	return result_582980;

}

function has_key_522588(t_522594, key_522596) {
	var result_522597 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_522598 = [0];
		F.line = 264;
		result_522597 = (0 <= raw_get_522600(t_522594, key_522596, hc_522598, 0));
	framePtr = F.prev;

	return result_522597;

}

function has_key_522437(dict_522439, key_522440) {
	var result_522441 = false;

	var F={procname:"dictobject.hasKey",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 50;
		result_522441 = has_key_522588(dict_522439.table, key_522440);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_522441;

}

function is_class_159414(obj_159416) {
	var result_159417 = false;

	var F={procname:"pyobjectBase.isClass",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 212;
		result_159417 = (obj_159416.pyType.kind == 7);
	framePtr = F.prev;

	return result_159417;

}

function of_py_function_object_540137(obj_540068) {
	var result_540139 = false;

	var F={procname:"funcobject.ofPyFunctionObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_540139 = (obj_540068.pyType.kind == 13);
	framePtr = F.prev;

	return result_540139;

}

function new_py_func_542057(name_542059, code_542060, globals_542061, closure_542062) {
	var result_542063 = null;

	var F={procname:"funcobject.newPyFunc",prev:framePtr,filename:"../Objects/funcobject.nim",line:0};
	framePtr = F;
		F.line = 23;
		result_542063 = new_py_function_simple_540201();
		F.line = 24;
		result_542063.name = name_542059;
		F.line = 25;
		result_542063.code = code_542060;
		F.line = 26;
		result_542063.globals = globals_542061;
		if (!((closure_542062 === null))) {
		if (!(of_py_tuple_object_464082(closure_542062))) {
		F.line = 28;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/funcobject.nim(28, 12) `ofPyTupleObject(closure)` "));
		}
		
		}
		
		F.line = 29;
		result_542063.closure = closure_542062;
	framePtr = F.prev;

	return result_542063;

}

function new_py_slice_463057(start_463059, stop_463060, step_463061) {
			var Tmp1;

	var result_463062 = null;

	var F={procname:"sliceobject.newPySlice",prev:framePtr,filename:"../Objects/sliceobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 15;
		F.line = 15;
		var slice_463063 = new_py_slice_simple_462201();
		if ((of_py_int_object_374117(start_463059) || of_py_none_object_355076(start_463059))) {
		F.line = 28;
		slice_463063.start = start_463059;
		}
		else {
			F.line = 21;
			var index_fun_463079 = start_463059.pyType.magicMethods.Field11;
			if ((index_fun_463079 === null)) {
			F.line = 23;
			var msg_463087 = makeNimstrLit("slice indices must be integers or None or have an __index__ method");
			F.line = 24;
			F.line = 104;
			var excp_463089 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_463089.tk = 3;
			F.line = 106;
			excp_463089.thrown = true;
			F.line = 107;
			excp_463089.msg = new_py_string_176075(msg_463087);
			result_463062 = excp_463089;
			break BeforeRet;
			}
			else {
				F.line = 26;
				slice_463063.start = index_fun_463079(start_463059);
			}
			
		}
		
		if ((of_py_int_object_374117(stop_463060) || of_py_none_object_355076(stop_463060))) {
		F.line = 29;
		slice_463063.stop = stop_463060;
		}
		else {
			F.line = 21;
			var index_fun_463096 = stop_463060.pyType.magicMethods.Field11;
			if ((index_fun_463096 === null)) {
			F.line = 23;
			var msg_463104 = makeNimstrLit("slice indices must be integers or None or have an __index__ method");
			F.line = 24;
			F.line = 104;
			var excp_463106 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_463106.tk = 3;
			F.line = 106;
			excp_463106.thrown = true;
			F.line = 107;
			excp_463106.msg = new_py_string_176075(msg_463104);
			result_463062 = excp_463106;
			break BeforeRet;
			}
			else {
				F.line = 26;
				slice_463063.stop = index_fun_463096(stop_463060);
			}
			
		}
		
		if ((of_py_int_object_374117(step_463061) || of_py_none_object_355076(step_463061))) {
		F.line = 30;
		slice_463063.step = step_463061;
		}
		else {
			F.line = 21;
			var index_fun_463113 = step_463061.pyType.magicMethods.Field11;
			if ((index_fun_463113 === null)) {
			F.line = 23;
			var msg_463121 = makeNimstrLit("slice indices must be integers or None or have an __index__ method");
			F.line = 24;
			F.line = 104;
			var excp_463123 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_463123.tk = 3;
			F.line = 106;
			excp_463123.thrown = true;
			F.line = 107;
			excp_463123.msg = new_py_string_176075(msg_463121);
			result_463062 = excp_463123;
			break BeforeRet;
			}
			else {
				F.line = 26;
				slice_463063.step = index_fun_463113(step_463061);
			}
			
		}
		
			if (!of_py_int_object_374117(slice_463063.step)) Tmp1 = false; else {				Tmp1 = (to_int_376091(slice_463063.step) == 0);			}		if (Tmp1) {
		F.line = 33;
		F.line = 104;
		var excp_463126 = new_py_value_error_simple_362601();
		F.line = 105;
		excp_463126.tk = 5;
		F.line = 106;
		excp_463126.thrown = true;
		F.line = 107;
		excp_463126.msg = new_py_string_176075(makeNimstrLit("slice step cannot be zero"));
		result_463062 = excp_463126;
		break BeforeRet;
		}
		
		result_463062 = slice_463063;
	} while (false);
	framePtr = F.prev;

	return result_463062;

}

function eval_frame_551056(f_551058) {
										var Tmp7;
										var Tmp8;
											var Tmp9;
										var Tmp10;
											var Tmp11;
										var Tmp12;
											var Tmp13;
										var Tmp14;
											var Tmp15;
										var Tmp16;
											var Tmp17;
										var Tmp18;
											var Tmp19;
											var Tmp20;
										var Tmp21;
											var Tmp22;
										var Tmp23;
											var Tmp24;
										var Tmp25;
											var Tmp26;
										var Tmp27;
											var Tmp28;
										var Tmp29;
											var Tmp30;
										var Tmp31;
											var Tmp32;
											var Tmp33;
											var Tmp34;
										var Tmp35;
											var Tmp36;
											var Tmp37;
												var Tmp38;
														var Tmp42;
														var Tmp46;
												var Tmp47;
																var Tmp51;
															var Tmp55;
										var Tmp56;
											var Tmp57;
											var Tmp58;
															var Tmp68;
										var Tmp69;
											var Tmp70;
											var Tmp71;
												var Tmp72;
											var Tmp73;
												var Tmp74;
											var Tmp75;
												var Tmp76;
											var Tmp77;
												var Tmp78;
											var Tmp79;
												var Tmp80;
											var Tmp81;
												var Tmp82;
											var Tmp83;
												var Tmp84;
											var Tmp85;
												var Tmp86;
												var Tmp87;
													var Tmp88;
													var Tmp89;
											var Tmp90;
											var Tmp91;
										var Tmp92;
												var Tmp93;
										var Tmp94;
												var Tmp95;
												var Tmp96;
												var Tmp97;
										var Tmp98;
												var Tmp99;
													var Tmp100;
												var Tmp101;
											var Tmp105;
											var Tmp106;
										var Tmp107;
											var Tmp108;
										var Tmp109;

						function set_trace_back_551218(excp_551220) {
							var F={procname:"evalFrame.setTraceBack",prev:framePtr,filename:"neval.nim",line:0};
							framePtr = F;
								F.line = 99;
								var line_no_551221 = f_551058.code.lineNos[chckIndx(last_i_551203, 0, f_551058.code.lineNos.length+0-1)-0];
								F.line = 101;
								if (excp_551220.traceBacks != null) { excp_551220.traceBacks.push({Field0: f_551058.code.fileName, Field1: f_551058.code.codeName, Field2: line_no_551221, Field3: -1}); } else { excp_551220.traceBacks = [{Field0: f_551058.code.fileName, Field1: f_551058.code.codeName, Field2: line_no_551221, Field3: -1}]; };
							framePtr = F.prev;

							
						}
									var Tmp113;
										var Tmp114;

	var result_551112 = null;

	var F={procname:"neval.evalFrame",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 81;
		var last_i_551203 = -1;
		F.line = 84;
		var op_code_551204 = 0;
		F.line = 85;
		var op_arg_551205 = 0;
		F.line = 143;
		var constants_551287 = f_551058.code, constants_551287_Idx = "constants";
		F.line = 144;
		var names_551289 = f_551058.code, names_551289_Idx = "names";
		F.line = 145;
		var fast_locals_551291 = f_551058, fast_locals_551291_Idx = "fastLocals";
		F.line = 146;
		var cell_vars_551293 = f_551058, cell_vars_551293_Idx = "cellVars";
		F.line = 150;
		var block_stack_551295 = null;
		F.line = 175;
		try {
		L2: do {
			F.line = 177;
				L3: while (true) {
				if (!true) break L3;
					F.line = 178;
					var excp_obj_551322 = null;
					L4: do {
						F.line = 180;
							L5: while (true) {
							if (!true) break L5;
								L6: do {
									F.line = 182;
									var colontmp__598154 = {Field0: 0, Field1: 0};
									F.line = 182;
									var op_code_551405 = 0;
									F.line = 182;
									var op_arg_551406 = 0;
									F.line = 182;
									F.line = 87;
									last_i_551203 = addInt(last_i_551203, 1);
									nimCopy(colontmp__598154, f_551058.code.code[chckIndx(last_i_551203, 0, f_551058.code.code.length+0-1)-0], NTI551208);
									F.line = 182;
									op_code_551405 = colontmp__598154["Field0"];
									F.line = 182;
									op_arg_551406 = colontmp__598154["Field1"];
									F.line = 185;
									switch (op_code_551405) {
									case 1:
										F.line = 187;
										pop_518821(val_stack_551095, 0);
										break;
									case 4:
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push((Tmp7 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp7[0])[Tmp7[1]]); } else { val_stack_551095[0] = [(Tmp7 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp7[0])[Tmp7[1]]]; };
										break;
									case 7:
										F.line = 193;
										break L6;
										break;
									case 8:
										F.line = 43;
										var top_551833 = (Tmp8 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp8[0])[Tmp8[1]];
										F.line = 44;
										F.line = 45;
										if ((top_551833.pyType === null)) {
										F.line = 2895;
										var e_551860 = null;
										F.line = 2896;
										e_551860 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_551860.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_551860.parent = null;
										F.line = 26;
										raiseException(e_551860, "InternalError");
										}
										
										F.line = 27;
										var fun_552002 = top_551833.pyType.magicMethods.Field9;
										if ((fun_552002 === null)) {
										F.line = 29;
										var obj_type_str_552011 = top_551833.pyType.name;
										F.line = 30;
										var method_str_552013 = makeNimstrLit("positive");
										F.line = 31;
										var msg_552015 = (makeNimstrLit("No ")).concat(method_str_552013,makeNimstrLit(" method for "),obj_type_str_552011,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_552017 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_552017.tk = 3;
										F.line = 106;
										excp_552017.thrown = true;
										F.line = 107;
										excp_552017.msg = new_py_string_176075(msg_552015);
										var excp_552020 = excp_552017;
										F.line = 34;
										excp_obj_551322 = excp_552020;
										F.line = 34;
										break L4;
										}
										
										var fun_552202 = fun_552002;
										F.line = 46;
										var res_552204 = fun_552202(top_551833);
											if (of_py_exception_object_358259(res_552204)) {
											Tmp9 = res_552204.thrown;
											}
											else {
											Tmp9 = false;
											}
											
										if (Tmp9) {
										F.line = 49;
										excp_obj_551322 = res_552204;
										F.line = 49;
										break L4;
										}
										
										var res_552402 = res_552204;
										F.line = 196;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_552402);
										break;
									case 9:
										F.line = 43;
										var top_552656 = (Tmp10 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp10[0])[Tmp10[1]];
										F.line = 44;
										F.line = 45;
										if ((top_552656.pyType === null)) {
										F.line = 2895;
										var e_552683 = null;
										F.line = 2896;
										e_552683 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_552683.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_552683.parent = null;
										F.line = 26;
										raiseException(e_552683, "InternalError");
										}
										
										F.line = 27;
										var fun_552802 = top_552656.pyType.magicMethods.Field8;
										if ((fun_552802 === null)) {
										F.line = 29;
										var obj_type_str_552811 = top_552656.pyType.name;
										F.line = 30;
										var method_str_552813 = makeNimstrLit("negative");
										F.line = 31;
										var msg_552815 = (makeNimstrLit("No ")).concat(method_str_552813,makeNimstrLit(" method for "),obj_type_str_552811,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_552817 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_552817.tk = 3;
										F.line = 106;
										excp_552817.thrown = true;
										F.line = 107;
										excp_552817.msg = new_py_string_176075(msg_552815);
										var excp_552820 = excp_552817;
										F.line = 34;
										excp_obj_551322 = excp_552820;
										F.line = 34;
										break L4;
										}
										
										var fun_553002 = fun_552802;
										F.line = 46;
										var res_553004 = fun_553002(top_552656);
											if (of_py_exception_object_358259(res_553004)) {
											Tmp11 = res_553004.thrown;
											}
											else {
											Tmp11 = false;
											}
											
										if (Tmp11) {
										F.line = 49;
										excp_obj_551322 = res_553004;
										F.line = 49;
										break L4;
										}
										
										var res_553202 = res_553004;
										F.line = 199;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_553202);
										break;
									case 10:
										F.line = 43;
										var top_553436 = (Tmp12 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp12[0])[Tmp12[1]];
										F.line = 44;
										F.line = 45;
										if ((top_553436.pyType === null)) {
										F.line = 2895;
										var e_553463 = null;
										F.line = 2896;
										e_553463 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_553463.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_553463.parent = null;
										F.line = 26;
										raiseException(e_553463, "InternalError");
										}
										
										F.line = 27;
										var fun_553602 = top_553436.pyType.magicMethods.Field7;
										if ((fun_553602 === null)) {
										F.line = 29;
										var obj_type_str_553611 = top_553436.pyType.name;
										F.line = 30;
										var method_str_553613 = makeNimstrLit("Not");
										F.line = 31;
										var msg_553615 = (makeNimstrLit("No ")).concat(method_str_553613,makeNimstrLit(" method for "),obj_type_str_553611,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_553617 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_553617.tk = 3;
										F.line = 106;
										excp_553617.thrown = true;
										F.line = 107;
										excp_553617.msg = new_py_string_176075(msg_553615);
										var excp_553620 = excp_553617;
										F.line = 34;
										excp_obj_551322 = excp_553620;
										F.line = 34;
										break L4;
										}
										
										var fun_553802 = fun_553602;
										F.line = 46;
										var res_553804 = fun_553802(top_553436);
											if (of_py_exception_object_358259(res_553804)) {
											Tmp13 = res_553804.thrown;
											}
											else {
											Tmp13 = false;
											}
											
										if (Tmp13) {
										F.line = 49;
										excp_obj_551322 = res_553804;
										F.line = 49;
										break L4;
										}
										
										var res_554002 = res_553804;
										F.line = 202;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_554002);
										break;
									case 14:
										F.line = 48;
										var op2_554232 = pop_518821(val_stack_551095, 0);
										F.line = 49;
										var op1_554249 = (Tmp14 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp14[0])[Tmp14[1]];
										F.line = 50;
										F.line = 56;
										if ((op1_554249.pyType === null)) {
										F.line = 2895;
										var e_554276 = null;
										F.line = 2896;
										e_554276 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_554276.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_554276.parent = null;
										F.line = 26;
										raiseException(e_554276, "InternalError");
										}
										
										F.line = 27;
										var fun_554402 = op1_554249.pyType.magicMethods.Field6;
										if ((fun_554402 === null)) {
										F.line = 29;
										var obj_type_str_554411 = op1_554249.pyType.name;
										F.line = 30;
										var method_str_554413 = makeNimstrLit("pow");
										F.line = 31;
										var msg_554415 = (makeNimstrLit("No ")).concat(method_str_554413,makeNimstrLit(" method for "),obj_type_str_554411,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_554417 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_554417.tk = 3;
										F.line = 106;
										excp_554417.thrown = true;
										F.line = 107;
										excp_554417.msg = new_py_string_176075(msg_554415);
										var excp_554420 = excp_554417;
										F.line = 34;
										excp_obj_551322 = excp_554420;
										F.line = 34;
										break L4;
										}
										
										var fun_554602 = fun_554402;
										F.line = 57;
										var res_554604 = fun_554602(op1_554249, op2_554232);
											if (of_py_exception_object_358259(res_554604)) {
											Tmp15 = res_554604.thrown;
											}
											else {
											Tmp15 = false;
											}
											
										if (Tmp15) {
										F.line = 60;
										excp_obj_551322 = res_554604;
										F.line = 60;
										break L4;
										}
										
										var res_554802 = res_554604;
										F.line = 205;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_554802);
										break;
									case 15:
										F.line = 48;
										var op2_555032 = pop_518821(val_stack_551095, 0);
										F.line = 49;
										var op1_555049 = (Tmp16 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp16[0])[Tmp16[1]];
										F.line = 50;
										F.line = 56;
										if ((op1_555049.pyType === null)) {
										F.line = 2895;
										var e_555076 = null;
										F.line = 2896;
										e_555076 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_555076.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_555076.parent = null;
										F.line = 26;
										raiseException(e_555076, "InternalError");
										}
										
										F.line = 27;
										var fun_555202 = op1_555049.pyType.magicMethods.Field2;
										if ((fun_555202 === null)) {
										F.line = 29;
										var obj_type_str_555211 = op1_555049.pyType.name;
										F.line = 30;
										var method_str_555213 = makeNimstrLit("mul");
										F.line = 31;
										var msg_555215 = (makeNimstrLit("No ")).concat(method_str_555213,makeNimstrLit(" method for "),obj_type_str_555211,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_555217 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_555217.tk = 3;
										F.line = 106;
										excp_555217.thrown = true;
										F.line = 107;
										excp_555217.msg = new_py_string_176075(msg_555215);
										var excp_555220 = excp_555217;
										F.line = 34;
										excp_obj_551322 = excp_555220;
										F.line = 34;
										break L4;
										}
										
										var fun_555402 = fun_555202;
										F.line = 57;
										var res_555404 = fun_555402(op1_555049, op2_555032);
											if (of_py_exception_object_358259(res_555404)) {
											Tmp17 = res_555404.thrown;
											}
											else {
											Tmp17 = false;
											}
											
										if (Tmp17) {
										F.line = 60;
										excp_obj_551322 = res_555404;
										F.line = 60;
										break L4;
										}
										
										var res_555602 = res_555404;
										F.line = 208;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_555602);
										break;
									case 16:
										F.line = 48;
										var op2_555832 = pop_518821(val_stack_551095, 0);
										F.line = 49;
										var op1_555849 = (Tmp18 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp18[0])[Tmp18[1]];
										F.line = 50;
										F.line = 56;
										if ((op1_555849.pyType === null)) {
										F.line = 2895;
										var e_555876 = null;
										F.line = 2896;
										e_555876 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_555876.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_555876.parent = null;
										F.line = 26;
										raiseException(e_555876, "InternalError");
										}
										
										F.line = 27;
										var fun_556002 = op1_555849.pyType.magicMethods.Field5;
										if ((fun_556002 === null)) {
										F.line = 29;
										var obj_type_str_556011 = op1_555849.pyType.name;
										F.line = 30;
										var method_str_556013 = makeNimstrLit("Mod");
										F.line = 31;
										var msg_556015 = (makeNimstrLit("No ")).concat(method_str_556013,makeNimstrLit(" method for "),obj_type_str_556011,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_556017 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_556017.tk = 3;
										F.line = 106;
										excp_556017.thrown = true;
										F.line = 107;
										excp_556017.msg = new_py_string_176075(msg_556015);
										var excp_556020 = excp_556017;
										F.line = 34;
										excp_obj_551322 = excp_556020;
										F.line = 34;
										break L4;
										}
										
										var fun_556202 = fun_556002;
										F.line = 57;
										var res_556204 = fun_556202(op1_555849, op2_555832);
											if (of_py_exception_object_358259(res_556204)) {
											Tmp19 = res_556204.thrown;
											}
											else {
											Tmp19 = false;
											}
											
										if (Tmp19) {
										F.line = 60;
										excp_obj_551322 = res_556204;
										F.line = 60;
										break L4;
										}
										
										var res_556402 = res_556204;
										F.line = 211;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_556402);
										break;
									case 33:
										F.line = 214;
										var idx_556625 = pop_518821(val_stack_551095, 0);
										F.line = 215;
										var obj_556635 = pop_518821(val_stack_551095, 0);
										F.line = 216;
										var value_556645 = pop_518821(val_stack_551095, 0);
										F.line = 217;
										F.line = 67;
										if ((obj_556635.pyType === null)) {
										F.line = 2895;
										var e_556672 = null;
										F.line = 2896;
										e_556672 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_556672.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_556672.parent = null;
										F.line = 26;
										raiseException(e_556672, "InternalError");
										}
										
										F.line = 27;
										var fun_556802 = obj_556635.pyType.magicMethods.Field33;
										if ((fun_556802 === null)) {
										F.line = 29;
										var obj_type_str_556811 = obj_556635.pyType.name;
										F.line = 30;
										var method_str_556813 = makeNimstrLit("setitem");
										F.line = 31;
										var msg_556815 = (makeNimstrLit("No ")).concat(method_str_556813,makeNimstrLit(" method for "),obj_type_str_556811,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_556817 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_556817.tk = 3;
										F.line = 106;
										excp_556817.thrown = true;
										F.line = 107;
										excp_556817.msg = new_py_string_176075(msg_556815);
										var excp_556820 = excp_556817;
										F.line = 34;
										excp_obj_551322 = excp_556820;
										F.line = 34;
										break L4;
										}
										
										var fun_557002 = fun_556802;
										F.line = 68;
										var res_557004 = fun_557002(obj_556635, idx_556625, value_556645);
											if (of_py_exception_object_358259(res_557004)) {
											Tmp20 = res_557004.thrown;
											}
											else {
											Tmp20 = false;
											}
											
										if (Tmp20) {
										F.line = 71;
										excp_obj_551322 = res_557004;
										F.line = 71;
										break L4;
										}
										
										res_557004;
										break;
									case 17:
										F.line = 48;
										var op2_557218 = pop_518821(val_stack_551095, 0);
										F.line = 49;
										var op1_557235 = (Tmp21 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp21[0])[Tmp21[1]];
										F.line = 50;
										F.line = 56;
										if ((op1_557235.pyType === null)) {
										F.line = 2895;
										var e_557262 = null;
										F.line = 2896;
										e_557262 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_557262.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_557262.parent = null;
										F.line = 26;
										raiseException(e_557262, "InternalError");
										}
										
										F.line = 27;
										var fun_557402 = op1_557235.pyType.magicMethods.Field0;
										if ((fun_557402 === null)) {
										F.line = 29;
										var obj_type_str_557411 = op1_557235.pyType.name;
										F.line = 30;
										var method_str_557413 = makeNimstrLit("add");
										F.line = 31;
										var msg_557415 = (makeNimstrLit("No ")).concat(method_str_557413,makeNimstrLit(" method for "),obj_type_str_557411,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_557417 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_557417.tk = 3;
										F.line = 106;
										excp_557417.thrown = true;
										F.line = 107;
										excp_557417.msg = new_py_string_176075(msg_557415);
										var excp_557420 = excp_557417;
										F.line = 34;
										excp_obj_551322 = excp_557420;
										F.line = 34;
										break L4;
										}
										
										var fun_557602 = fun_557402;
										F.line = 57;
										var res_557604 = fun_557602(op1_557235, op2_557218);
											if (of_py_exception_object_358259(res_557604)) {
											Tmp22 = res_557604.thrown;
											}
											else {
											Tmp22 = false;
											}
											
										if (Tmp22) {
										F.line = 60;
										excp_obj_551322 = res_557604;
										F.line = 60;
										break L4;
										}
										
										var res_557802 = res_557604;
										F.line = 220;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_557802);
										break;
									case 18:
										F.line = 48;
										var op2_558032 = pop_518821(val_stack_551095, 0);
										F.line = 49;
										var op1_558049 = (Tmp23 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp23[0])[Tmp23[1]];
										F.line = 50;
										F.line = 56;
										if ((op1_558049.pyType === null)) {
										F.line = 2895;
										var e_558076 = null;
										F.line = 2896;
										e_558076 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_558076.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_558076.parent = null;
										F.line = 26;
										raiseException(e_558076, "InternalError");
										}
										
										F.line = 27;
										var fun_558202 = op1_558049.pyType.magicMethods.Field1;
										if ((fun_558202 === null)) {
										F.line = 29;
										var obj_type_str_558211 = op1_558049.pyType.name;
										F.line = 30;
										var method_str_558213 = makeNimstrLit("sub");
										F.line = 31;
										var msg_558215 = (makeNimstrLit("No ")).concat(method_str_558213,makeNimstrLit(" method for "),obj_type_str_558211,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_558217 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_558217.tk = 3;
										F.line = 106;
										excp_558217.thrown = true;
										F.line = 107;
										excp_558217.msg = new_py_string_176075(msg_558215);
										var excp_558220 = excp_558217;
										F.line = 34;
										excp_obj_551322 = excp_558220;
										F.line = 34;
										break L4;
										}
										
										var fun_558402 = fun_558202;
										F.line = 57;
										var res_558404 = fun_558402(op1_558049, op2_558032);
											if (of_py_exception_object_358259(res_558404)) {
											Tmp24 = res_558404.thrown;
											}
											else {
											Tmp24 = false;
											}
											
										if (Tmp24) {
										F.line = 60;
										excp_obj_551322 = res_558404;
										F.line = 60;
										break L4;
										}
										
										var res_558602 = res_558404;
										F.line = 223;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_558602);
										break;
									case 19:
										F.line = 48;
										var op2_558832 = pop_518821(val_stack_551095, 0);
										F.line = 49;
										var op1_558849 = (Tmp25 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp25[0])[Tmp25[1]];
										F.line = 50;
										F.line = 56;
										if ((op1_558849.pyType === null)) {
										F.line = 2895;
										var e_558876 = null;
										F.line = 2896;
										e_558876 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_558876.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_558876.parent = null;
										F.line = 26;
										raiseException(e_558876, "InternalError");
										}
										
										F.line = 27;
										var fun_559002 = op1_558849.pyType.magicMethods.Field32;
										if ((fun_559002 === null)) {
										F.line = 29;
										var obj_type_str_559011 = op1_558849.pyType.name;
										F.line = 30;
										var method_str_559013 = makeNimstrLit("getitem");
										F.line = 31;
										var msg_559015 = (makeNimstrLit("No ")).concat(method_str_559013,makeNimstrLit(" method for "),obj_type_str_559011,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_559017 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_559017.tk = 3;
										F.line = 106;
										excp_559017.thrown = true;
										F.line = 107;
										excp_559017.msg = new_py_string_176075(msg_559015);
										var excp_559020 = excp_559017;
										F.line = 34;
										excp_obj_551322 = excp_559020;
										F.line = 34;
										break L4;
										}
										
										var fun_559202 = fun_559002;
										F.line = 57;
										var res_559204 = fun_559202(op1_558849, op2_558832);
											if (of_py_exception_object_358259(res_559204)) {
											Tmp26 = res_559204.thrown;
											}
											else {
											Tmp26 = false;
											}
											
										if (Tmp26) {
										F.line = 60;
										excp_obj_551322 = res_559204;
										F.line = 60;
										break L4;
										}
										
										var res_559402 = res_559204;
										F.line = 226;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_559402);
										break;
									case 20:
										F.line = 48;
										var op2_559632 = pop_518821(val_stack_551095, 0);
										F.line = 49;
										var op1_559649 = (Tmp27 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp27[0])[Tmp27[1]];
										F.line = 50;
										F.line = 56;
										if ((op1_559649.pyType === null)) {
										F.line = 2895;
										var e_559676 = null;
										F.line = 2896;
										e_559676 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_559676.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_559676.parent = null;
										F.line = 26;
										raiseException(e_559676, "InternalError");
										}
										
										F.line = 27;
										var fun_559802 = op1_559649.pyType.magicMethods.Field4;
										if ((fun_559802 === null)) {
										F.line = 29;
										var obj_type_str_559811 = op1_559649.pyType.name;
										F.line = 30;
										var method_str_559813 = makeNimstrLit("floorDiv");
										F.line = 31;
										var msg_559815 = (makeNimstrLit("No ")).concat(method_str_559813,makeNimstrLit(" method for "),obj_type_str_559811,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_559817 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_559817.tk = 3;
										F.line = 106;
										excp_559817.thrown = true;
										F.line = 107;
										excp_559817.msg = new_py_string_176075(msg_559815);
										var excp_559820 = excp_559817;
										F.line = 34;
										excp_obj_551322 = excp_559820;
										F.line = 34;
										break L4;
										}
										
										var fun_560002 = fun_559802;
										F.line = 57;
										var res_560004 = fun_560002(op1_559649, op2_559632);
											if (of_py_exception_object_358259(res_560004)) {
											Tmp28 = res_560004.thrown;
											}
											else {
											Tmp28 = false;
											}
											
										if (Tmp28) {
										F.line = 60;
										excp_obj_551322 = res_560004;
										F.line = 60;
										break L4;
										}
										
										var res_560202 = res_560004;
										F.line = 229;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_560202);
										break;
									case 21:
										F.line = 48;
										var op2_560432 = pop_518821(val_stack_551095, 0);
										F.line = 49;
										var op1_560449 = (Tmp29 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp29[0])[Tmp29[1]];
										F.line = 50;
										F.line = 56;
										if ((op1_560449.pyType === null)) {
										F.line = 2895;
										var e_560476 = null;
										F.line = 2896;
										e_560476 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_560476.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_560476.parent = null;
										F.line = 26;
										raiseException(e_560476, "InternalError");
										}
										
										F.line = 27;
										var fun_560602 = op1_560449.pyType.magicMethods.Field3;
										if ((fun_560602 === null)) {
										F.line = 29;
										var obj_type_str_560611 = op1_560449.pyType.name;
										F.line = 30;
										var method_str_560613 = makeNimstrLit("trueDiv");
										F.line = 31;
										var msg_560615 = (makeNimstrLit("No ")).concat(method_str_560613,makeNimstrLit(" method for "),obj_type_str_560611,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_560617 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_560617.tk = 3;
										F.line = 106;
										excp_560617.thrown = true;
										F.line = 107;
										excp_560617.msg = new_py_string_176075(msg_560615);
										var excp_560620 = excp_560617;
										F.line = 34;
										excp_obj_551322 = excp_560620;
										F.line = 34;
										break L4;
										}
										
										var fun_560802 = fun_560602;
										F.line = 57;
										var res_560804 = fun_560802(op1_560449, op2_560432);
											if (of_py_exception_object_358259(res_560804)) {
											Tmp30 = res_560804.thrown;
											}
											else {
											Tmp30 = false;
											}
											
										if (Tmp30) {
										F.line = 60;
										excp_obj_551322 = res_560804;
										F.line = 60;
										break L4;
										}
										
										var res_561002 = res_560804;
										F.line = 232;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_561002);
										break;
									case 41:
										F.line = 235;
										var top_561231 = (Tmp31 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp31[0])[Tmp31[1]];
										F.line = 236;
										F.line = 170;
										var iter_func_561241 = top_561231.pyType.magicMethods.Field36;
										if ((iter_func_561241 === null)) {
										F.line = 172;
										var msg_561249 = (top_561231.pyType.name).concat(makeNimstrLit(" object is not iterable"));
										F.line = 173;
										F.line = 104;
										var excp_561251 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_561251.tk = 3;
										F.line = 106;
										excp_561251.thrown = true;
										F.line = 107;
										excp_561251.msg = new_py_string_176075(msg_561249);
										result_551112 = excp_561251;
										break BeforeRet;
										}
										
										F.line = 174;
										var iter_obj_561254 = iter_func_561241(top_561231);
										if ((iter_obj_561254.pyType.magicMethods.Field37 === null)) {
										F.line = 176;
										F.line = 176;
										var fmt_res_561263 = mnewString(0);
										F.line = 176;
										if (fmt_res_561263 != null) { fmt_res_561263 = (fmt_res_561263).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_561263 = makeNimstrLit("iter() returned non-iterator of type "); };
										var msg_561265 = (fmt_res_561263).concat(iter_obj_561254.pyType.name);
										F.line = 177;
										F.line = 104;
										var excp_561267 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_561267.tk = 3;
										F.line = 106;
										excp_561267.thrown = true;
										F.line = 107;
										excp_561267.msg = new_py_string_176075(msg_561265);
										result_551112 = excp_561267;
										break BeforeRet;
										}
										
										var iter_obj_561269 = iter_obj_561254;
											if (of_py_exception_object_358259(iter_obj_561269)) {
											Tmp32 = iter_obj_561269.thrown;
											}
											else {
											Tmp32 = false;
											}
											
										if (Tmp32) {
										F.line = 238;
										excp_obj_551322 = iter_obj_561269;
										F.line = 238;
										break L4;
										}
										
										F.line = 239;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, iter_obj_561269);
										break;
									case 43:
										F.line = 242;
										var top_561425 = pop_518821(val_stack_551095, 0);
										if (!((id_157596(top_561425) == id_157596(py_none_356044)))) {
										F.line = 245;
										var repr_obj_561426 = top_561425.pyType.magicMethods.Field25(top_561425);
											if (of_py_exception_object_358259(repr_obj_561426)) {
											Tmp33 = repr_obj_561426.thrown;
											}
											else {
											Tmp33 = false;
											}
											
										if (Tmp33) {
										F.line = 247;
										excp_obj_551322 = repr_obj_561426;
										F.line = 247;
										break L4;
										}
										
										F.line = 250;
										var print_function_561427 = HEX5BHEX5D_523323(bltin_dict_534014, new_py_str_176092(makeNimstrLit("print")));
										F.line = 251;
										var ret_obj_561440 = call_py_nim_func_object_magic_548044(print_function_561427, [repr_obj_561426]);
											if (of_py_exception_object_358259(ret_obj_561440)) {
											Tmp34 = ret_obj_561440.thrown;
											}
											else {
											Tmp34 = false;
											}
											
										if (Tmp34) {
										F.line = 253;
										excp_obj_551322 = ret_obj_561440;
										F.line = 253;
										break L4;
										}
										
										}
										
										break;
									case 44:
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(HEX5BHEX5D_523323(bltin_dict_534014, new_py_str_176092(makeNimstrLit("__build_class__")))); } else { val_stack_551095[0] = [HEX5BHEX5D_523323(bltin_dict_534014, new_py_str_176092(makeNimstrLit("__build_class__")))]; };
										break;
									case 54:
										F.line = 259;
										result_551112 = pop_518821(val_stack_551095, 0);
										break BeforeRet;
										break;
									case 58:
										if (((val_stack_551095[0] != null ? val_stack_551095[0].length : 0) == 0)) {
										F.line = 264;
										F.line = 166;
										var ret_561669 = (Tmp35 = HEX5BHEX5D_561636(block_stack_551295, 1), Tmp35[0])[Tmp35[1]].sPtr;
										F.line = 167;
										pop_561671(block_stack_551295, 0);
										ret_561669;
										}
										else {
											F.line = 266;
											var top_561726 = (Tmp36 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp36[0])[Tmp36[1]];
											F.line = 267;
											F.line = 166;
											var ret_561745 = (Tmp37 = HEX5BHEX5D_561636(block_stack_551295, 1), Tmp37[0])[Tmp37[1]].sPtr;
											F.line = 167;
											pop_561671(block_stack_551295, 0);
											if (val_stack_551095[0].length < chckRange(ret_561745, 0, 2147483647)) { for (var i=val_stack_551095[0].length;i<chckRange(ret_561745, 0, 2147483647);++i) val_stack_551095[0].push(null); }
               else { val_stack_551095[0].length = chckRange(ret_561745, 0, 2147483647); };
												if (of_py_exception_object_358259(top_561726)) {
												Tmp38 = top_561726.thrown;
												}
												else {
												Tmp38 = false;
												}
												
											if (Tmp38) {
											F.line = 270;
											excp_obj_551322 = top_561726;
											F.line = 270;
											break L4;
											}
											
										}
										
										break;
									case 62:
										F.line = 2895;
										var e_561771 = null;
										F.line = 2896;
										e_561771 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 273;
										e_561771.message = nimCopy(null, makeNimstrLit("locals() scope not implemented"), NTI138);
										F.line = 2891;
										e_561771.parent = null;
										F.line = 273;
										raiseException(e_561771, "InternalError");
										break;
									case 64:
										F.line = 281;
										var s_561819 = pop_518821(val_stack_551095, 0);
										if (of_py_tuple_object_464082(s_561819)) {
										F.line = 283;
										var t_561820 = s_561819;
										if (!((op_arg_551406 == (t_561820.items != null ? t_561820.items.length : 0)))) {
										F.line = 277;
										var got_561839 = cstrToNimstr(((t_561820.items != null ? t_561820.items.length : 0))+"");
										F.line = 278;
										F.line = 278;
										var fmt_res_561843 = mnewString(0);
										F.line = 278;
										if (fmt_res_561843 != null) { fmt_res_561843 = (fmt_res_561843).concat(makeNimstrLit("not enough values to unpack (expected ")); } else { fmt_res_561843 = makeNimstrLit("not enough values to unpack (expected "); };
										F.line = 270;
										if (fmt_res_561843 != null) { fmt_res_561843 = (fmt_res_561843).concat(cstrToNimstr((op_arg_551406)+"")); } else { fmt_res_561843 = cstrToNimstr((op_arg_551406)+"").slice(); };
										F.line = 278;
										if (fmt_res_561843 != null) { fmt_res_561843 = (fmt_res_561843).concat(makeNimstrLit(", got ")); } else { fmt_res_561843 = makeNimstrLit(", got "); };
										F.line = 260;
										if (fmt_res_561843 != null) { fmt_res_561843 = (fmt_res_561843).concat(got_561839); } else { fmt_res_561843 = got_561839.slice(); };
										F.line = 278;
										if (fmt_res_561843 != null) { fmt_res_561843 = (fmt_res_561843).concat(makeNimstrLit(")")); } else { fmt_res_561843 = makeNimstrLit(")"); };
										var msg_562202 = nimCopy(null, fmt_res_561843, NTI138);
										F.line = 279;
										F.line = 104;
										var excp_562204 = new_py_value_error_simple_362601();
										F.line = 105;
										excp_562204.tk = 5;
										F.line = 106;
										excp_562204.thrown = true;
										F.line = 107;
										excp_562204.msg = new_py_string_176075(msg_562202);
										var excp_562207 = excp_562204;
										F.line = 280;
										excp_obj_551322 = excp_562207;
										F.line = 285;
										break L4;
										}
										
										L39: do {
											F.line = 286;
											var i_562219 = 0;
											F.line = 2107;
											var res_582852 = 1;
											L40: do {
												F.line = 2108;
													L41: while (true) {
													if (!(res_582852 <= op_arg_551406)) break L41;
														F.line = 2109;
														i_562219 = res_582852;
														F.line = 127;
														if (val_stack_551095[0] != null) { val_stack_551095[0].push((Tmp42 = HEX5BHEX5D_551617(t_561820.items, i_562219), Tmp42[0])[Tmp42[1]]); } else { val_stack_551095[0] = [(Tmp42 = HEX5BHEX5D_551617(t_561820.items, i_562219), Tmp42[0])[Tmp42[1]]]; };
														F.line = 2110;
														res_582852 = addInt(res_582852, 1);
													}
											} while(false);
										} while(false);
										}
										else {
										if (of_py_list_object_505271(s_561819)) {
										F.line = 289;
										var l_562411 = s_561819;
										if (!((op_arg_551406 == (l_562411.items != null ? l_562411.items.length : 0)))) {
										F.line = 277;
										var got_562430 = cstrToNimstr(((l_562411.items != null ? l_562411.items.length : 0))+"");
										F.line = 278;
										F.line = 278;
										var fmt_res_562434 = mnewString(0);
										F.line = 278;
										if (fmt_res_562434 != null) { fmt_res_562434 = (fmt_res_562434).concat(makeNimstrLit("not enough values to unpack (expected ")); } else { fmt_res_562434 = makeNimstrLit("not enough values to unpack (expected "); };
										F.line = 270;
										if (fmt_res_562434 != null) { fmt_res_562434 = (fmt_res_562434).concat(cstrToNimstr((op_arg_551406)+"")); } else { fmt_res_562434 = cstrToNimstr((op_arg_551406)+"").slice(); };
										F.line = 278;
										if (fmt_res_562434 != null) { fmt_res_562434 = (fmt_res_562434).concat(makeNimstrLit(", got ")); } else { fmt_res_562434 = makeNimstrLit(", got "); };
										F.line = 260;
										if (fmt_res_562434 != null) { fmt_res_562434 = (fmt_res_562434).concat(got_562430); } else { fmt_res_562434 = got_562430.slice(); };
										F.line = 278;
										if (fmt_res_562434 != null) { fmt_res_562434 = (fmt_res_562434).concat(makeNimstrLit(")")); } else { fmt_res_562434 = makeNimstrLit(")"); };
										var msg_562802 = nimCopy(null, fmt_res_562434, NTI138);
										F.line = 279;
										F.line = 104;
										var excp_562804 = new_py_value_error_simple_362601();
										F.line = 105;
										excp_562804.tk = 5;
										F.line = 106;
										excp_562804.thrown = true;
										F.line = 107;
										excp_562804.msg = new_py_string_176075(msg_562802);
										var excp_562807 = excp_562804;
										F.line = 280;
										excp_obj_551322 = excp_562807;
										F.line = 291;
										break L4;
										}
										
										L43: do {
											F.line = 292;
											var i_562819 = 0;
											F.line = 2107;
											var res_582860 = 1;
											L44: do {
												F.line = 2108;
													L45: while (true) {
													if (!(res_582860 <= op_arg_551406)) break L45;
														F.line = 2109;
														i_562819 = res_582860;
														F.line = 127;
														if (val_stack_551095[0] != null) { val_stack_551095[0].push((Tmp46 = HEX5BHEX5D_551617(l_562411.items, i_562819), Tmp46[0])[Tmp46[1]]); } else { val_stack_551095[0] = [(Tmp46 = HEX5BHEX5D_551617(l_562411.items, i_562819), Tmp46[0])[Tmp46[1]]]; };
														F.line = 2110;
														res_582860 = addInt(res_582860, 1);
													}
											} while(false);
										} while(false);
										}
										else {
											F.line = 295;
											F.line = 170;
											var iter_func_563020 = s_561819.pyType.magicMethods.Field36;
											if ((iter_func_563020 === null)) {
											F.line = 172;
											var msg_563028 = (s_561819.pyType.name).concat(makeNimstrLit(" object is not iterable"));
											F.line = 173;
											F.line = 104;
											var excp_563030 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_563030.tk = 3;
											F.line = 106;
											excp_563030.thrown = true;
											F.line = 107;
											excp_563030.msg = new_py_string_176075(msg_563028);
											result_551112 = excp_563030;
											break BeforeRet;
											}
											
											F.line = 174;
											var iter_obj_563033 = iter_func_563020(s_561819);
											if ((iter_obj_563033.pyType.magicMethods.Field37 === null)) {
											F.line = 176;
											F.line = 176;
											var fmt_res_563042 = mnewString(0);
											F.line = 176;
											if (fmt_res_563042 != null) { fmt_res_563042 = (fmt_res_563042).concat(makeNimstrLit("iter() returned non-iterator of type ")); } else { fmt_res_563042 = makeNimstrLit("iter() returned non-iterator of type "); };
											var msg_563044 = (fmt_res_563042).concat(iter_obj_563033.pyType.name);
											F.line = 177;
											F.line = 104;
											var excp_563046 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_563046.tk = 3;
											F.line = 106;
											excp_563046.thrown = true;
											F.line = 107;
											excp_563046.msg = new_py_string_176075(msg_563044);
											result_551112 = excp_563046;
											break BeforeRet;
											}
											
											var iterable_563048 = iter_obj_563033;
												if (of_py_exception_object_358259(iterable_563048)) {
												Tmp47 = iterable_563048.thrown;
												}
												else {
												Tmp47 = false;
												}
												
											if (Tmp47) {
											F.line = 297;
											excp_obj_551322 = iterable_563048;
											F.line = 297;
											break L4;
											}
											
											F.line = 298;
											var next_func_563049 = iterable_563048.pyType.magicMethods.Field37;
											F.line = 301;
											var items_563102 = new_seq_563054(chckRange(op_arg_551406, 0, 2147483647));
											L48: do {
												F.line = 302;
												var i_563113 = 0;
												F.line = 3617;
												var i_582869 = 0;
												L49: do {
													F.line = 3618;
														L50: while (true) {
														if (!(i_582869 < op_arg_551406)) break L50;
															F.line = 3619;
															i_563113 = i_582869;
															F.line = 303;
															var ret_obj_563114 = next_func_563049(iterable_563048);
															if (is_stop_iter_373851(ret_obj_563114)) {
															F.line = 277;
															var got_563119 = cstrToNimstr((i_563113)+"");
															F.line = 278;
															F.line = 278;
															var fmt_res_563123 = mnewString(0);
															F.line = 278;
															if (fmt_res_563123 != null) { fmt_res_563123 = (fmt_res_563123).concat(makeNimstrLit("not enough values to unpack (expected ")); } else { fmt_res_563123 = makeNimstrLit("not enough values to unpack (expected "); };
															F.line = 270;
															if (fmt_res_563123 != null) { fmt_res_563123 = (fmt_res_563123).concat(cstrToNimstr((op_arg_551406)+"")); } else { fmt_res_563123 = cstrToNimstr((op_arg_551406)+"").slice(); };
															F.line = 278;
															if (fmt_res_563123 != null) { fmt_res_563123 = (fmt_res_563123).concat(makeNimstrLit(", got ")); } else { fmt_res_563123 = makeNimstrLit(", got "); };
															F.line = 260;
															if (fmt_res_563123 != null) { fmt_res_563123 = (fmt_res_563123).concat(got_563119); } else { fmt_res_563123 = got_563119.slice(); };
															F.line = 278;
															if (fmt_res_563123 != null) { fmt_res_563123 = (fmt_res_563123).concat(makeNimstrLit(")")); } else { fmt_res_563123 = makeNimstrLit(")"); };
															var msg_563402 = nimCopy(null, fmt_res_563123, NTI138);
															F.line = 279;
															F.line = 104;
															var excp_563404 = new_py_value_error_simple_362601();
															F.line = 105;
															excp_563404.tk = 5;
															F.line = 106;
															excp_563404.thrown = true;
															F.line = 107;
															excp_563404.msg = new_py_string_176075(msg_563402);
															var excp_563407 = excp_563404;
															F.line = 280;
															excp_obj_551322 = excp_563407;
															F.line = 305;
															break L48;
															}
															else {
																if (of_py_exception_object_358259(ret_obj_563114)) {
																Tmp51 = ret_obj_563114.thrown;
																}
																else {
																Tmp51 = false;
																}
																
															if (Tmp51) {
															F.line = 307;
															excp_obj_551322 = ret_obj_563114;
															F.line = 307;
															break L48;
															}
															else {
																F.line = 309;
																items_563102[chckIndx(i_563113, 0, items_563102.length+0-1)-0] = ret_obj_563114;
															}
															}
															F.line = 3620;
															i_582869 = addInt(i_582869, 1);
														}
												} while(false);
											} while(false);
											L52: do {
												F.line = 310;
												var i_563419 = 0;
												F.line = 2107;
												var res_582875 = 1;
												L53: do {
													F.line = 2108;
														L54: while (true) {
														if (!(res_582875 <= op_arg_551406)) break L54;
															F.line = 2109;
															i_563419 = res_582875;
															F.line = 127;
															if (val_stack_551095[0] != null) { val_stack_551095[0].push((Tmp55 = HEX5BHEX5D_551617(items_563102, i_563419), Tmp55[0])[Tmp55[1]]); } else { val_stack_551095[0] = [(Tmp55 = HEX5BHEX5D_551617(items_563102, i_563419), Tmp55[0])[Tmp55[1]]]; };
															F.line = 2110;
															res_582875 = addInt(res_582875, 1);
														}
												} while(false);
											} while(false);
										}
										}
										break;
									case 65:
										F.line = 314;
										var top_563627 = (Tmp56 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp56[0])[Tmp56[1]];
										F.line = 315;
										var next_func_563628 = top_563627.pyType.magicMethods.Field37;
										if ((next_func_563628 === null)) {
										F.line = 317;
										rawEcho(top_563627.pyType.name);
										F.line = 2895;
										var e_563643 = null;
										F.line = 2896;
										e_563643 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 25;
										e_563643.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_563643.parent = null;
										F.line = 318;
										raiseException(e_563643, "InternalError");
										}
										
										F.line = 319;
										var ret_obj_563801 = next_func_563628(top_563627);
										if (is_stop_iter_373851(ret_obj_563801)) {
										F.line = 321;
										pop_518821(val_stack_551095, 0);
										F.line = 96;
										last_i_551203 = subInt(op_arg_551406, 1);
										}
										else {
											if (of_py_exception_object_358259(ret_obj_563801)) {
											Tmp57 = ret_obj_563801.thrown;
											}
											else {
											Tmp57 = false;
											}
											
										if (Tmp57) {
										F.line = 324;
										excp_obj_551322 = ret_obj_563801;
										F.line = 324;
										break L4;
										}
										else {
											F.line = 127;
											if (val_stack_551095[0] != null) { val_stack_551095[0].push(ret_obj_563801); } else { val_stack_551095[0] = [ret_obj_563801]; };
										}
										}
										break;
									case 67:
										F.line = 329;
										var name_564012 = names_551289[names_551289_Idx][chckIndx(op_arg_551406, 0, names_551289[names_551289_Idx].length+0-1)-0];
										F.line = 330;
										var owner_564022 = pop_518821(val_stack_551095, 0);
										F.line = 331;
										var v_564032 = pop_518821(val_stack_551095, 0);
										F.line = 332;
										F.line = 67;
										if ((owner_564022.pyType === null)) {
										F.line = 2895;
										var e_564059 = null;
										F.line = 2896;
										e_564059 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_564059.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_564059.parent = null;
										F.line = 26;
										raiseException(e_564059, "InternalError");
										}
										
										F.line = 27;
										var fun_564202 = owner_564022.pyType.magicMethods.Field29;
										if ((fun_564202 === null)) {
										F.line = 29;
										var obj_type_str_564211 = owner_564022.pyType.name;
										F.line = 30;
										var method_str_564213 = makeNimstrLit("setattr");
										F.line = 31;
										var msg_564215 = (makeNimstrLit("No ")).concat(method_str_564213,makeNimstrLit(" method for "),obj_type_str_564211,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_564217 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_564217.tk = 3;
										F.line = 106;
										excp_564217.thrown = true;
										F.line = 107;
										excp_564217.msg = new_py_string_176075(msg_564215);
										var excp_564220 = excp_564217;
										F.line = 34;
										excp_obj_551322 = excp_564220;
										F.line = 34;
										break L4;
										}
										
										var fun_564402 = fun_564202;
										F.line = 68;
										var res_564404 = fun_564402(owner_564022, name_564012, v_564032);
											if (of_py_exception_object_358259(res_564404)) {
											Tmp58 = res_564404.thrown;
											}
											else {
											Tmp58 = false;
											}
											
										if (Tmp58) {
										F.line = 71;
										excp_obj_551322 = res_564404;
										F.line = 71;
										break L4;
										}
										
										res_564404;
										break;
									case 69:
										F.line = 335;
										var name_564602 = names_551289[names_551289_Idx][chckIndx(op_arg_551406, 0, names_551289[names_551289_Idx].length+0-1)-0];
										F.line = 336;
										HEX5BHEX5DHEX3D_523842(f_551058.globals, name_564602, pop_518821(val_stack_551095, 0));
										break;
									case 71:
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(constants_551287[constants_551287_Idx][chckIndx(op_arg_551406, 0, constants_551287[constants_551287_Idx].length+0-1)-0]); } else { val_stack_551095[0] = [constants_551287[constants_551287_Idx][chckIndx(op_arg_551406, 0, constants_551287[constants_551287_Idx].length+0-1)-0]]; };
										break;
									case 72:
										F.line = 2895;
										var e_564817 = null;
										F.line = 2896;
										e_564817 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 342;
										e_564817.message = nimCopy(null, makeNimstrLit("locals() scope not implemented"), NTI138);
										F.line = 2891;
										e_564817.parent = null;
										F.line = 342;
										raiseException(e_564817, "InternalError");
										break;
									case 73:
										F.line = 345;
										var args_565030 = new_seq_563054(chckRange(op_arg_551406, 0, 2147483647));
										L59: do {
											F.line = 346;
											var i_565042 = 0;
											F.line = 2107;
											var res_582886 = 1;
											L60: do {
												F.line = 2108;
													L61: while (true) {
													if (!(res_582886 <= op_arg_551406)) break L61;
														F.line = 2109;
														i_565042 = res_582886;
														F.line = 347;
														HEX5BHEX5DHEX3D_552604(args_565030, i_565042, pop_518821(val_stack_551095, 0));
														F.line = 2110;
														res_582886 = addInt(res_582886, 1);
													}
											} while(false);
										} while(false);
										F.line = 348;
										var new_tuple_565066 = new_py_tuple_465057(args_565030);
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(new_tuple_565066); } else { val_stack_551095[0] = [new_tuple_565066]; };
										break;
									case 74:
										F.line = 352;
										var args_565240 = new_seq_563054(chckRange(op_arg_551406, 0, 2147483647));
										L62: do {
											F.line = 353;
											var i_565252 = 0;
											F.line = 2107;
											var res_582894 = 1;
											L63: do {
												F.line = 2108;
													L64: while (true) {
													if (!(res_582894 <= op_arg_551406)) break L64;
														F.line = 2109;
														i_565252 = res_582894;
														F.line = 354;
														HEX5BHEX5DHEX3D_552604(args_565240, i_565252, pop_518821(val_stack_551095, 0));
														F.line = 2110;
														res_582894 = addInt(res_582894, 1);
													}
											} while(false);
										} while(false);
										F.line = 356;
										var new_list_565276 = new_py_list_506273(args_565240);
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(new_list_565276); } else { val_stack_551095[0] = [new_list_565276]; };
										break;
									case 76:
										F.line = 360;
										var d_565412 = new_py_dict_522257();
										L65: do {
											F.line = 361;
											var i_565423 = 0;
											F.line = 3617;
											var i_582902 = 0;
											L66: do {
												F.line = 3618;
													L67: while (true) {
													if (!(i_582902 < op_arg_551406)) break L67;
														F.line = 3619;
														i_565423 = i_582902;
														F.line = 362;
														var key_565433 = pop_518821(val_stack_551095, 0);
														F.line = 363;
														var value_565443 = pop_518821(val_stack_551095, 0);
														F.line = 364;
														var ret_obj_565444 = setitem_pydict_object_magic_531581(d_565412, key_565433, value_565443);
															if (of_py_exception_object_358259(ret_obj_565444)) {
															Tmp68 = ret_obj_565444.thrown;
															}
															else {
															Tmp68 = false;
															}
															
														if (Tmp68) {
														F.line = 366;
														excp_obj_551322 = ret_obj_565444;
														F.line = 366;
														break L65;
														}
														
														F.line = 3620;
														i_582902 = addInt(i_582902, 1);
													}
											} while(false);
										} while(false);
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(d_565412); } else { val_stack_551095[0] = [d_565412]; };
										break;
									case 77:
										F.line = 370;
										var name_565612 = names_551289[names_551289_Idx][chckIndx(op_arg_551406, 0, names_551289[names_551289_Idx].length+0-1)-0];
										F.line = 371;
										var obj_565628 = (Tmp69 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp69[0])[Tmp69[1]];
										F.line = 372;
										F.line = 56;
										if ((obj_565628.pyType === null)) {
										F.line = 2895;
										var e_565655 = null;
										F.line = 2896;
										e_565655 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 26;
										e_565655.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
										F.line = 2891;
										e_565655.parent = null;
										F.line = 26;
										raiseException(e_565655, "InternalError");
										}
										
										F.line = 27;
										var fun_565802 = obj_565628.pyType.magicMethods.Field28;
										if ((fun_565802 === null)) {
										F.line = 29;
										var obj_type_str_565811 = obj_565628.pyType.name;
										F.line = 30;
										var method_str_565813 = makeNimstrLit("getattr");
										F.line = 31;
										var msg_565815 = (makeNimstrLit("No ")).concat(method_str_565813,makeNimstrLit(" method for "),obj_type_str_565811,makeNimstrLit(" defined"));
										F.line = 32;
										F.line = 104;
										var excp_565817 = new_py_type_error_simple_360601();
										F.line = 105;
										excp_565817.tk = 3;
										F.line = 106;
										excp_565817.thrown = true;
										F.line = 107;
										excp_565817.msg = new_py_string_176075(msg_565815);
										var excp_565820 = excp_565817;
										F.line = 34;
										excp_obj_551322 = excp_565820;
										F.line = 34;
										break L4;
										}
										
										var fun_566002 = fun_565802;
										F.line = 57;
										var res_566004 = fun_566002(obj_565628, name_565612);
											if (of_py_exception_object_358259(res_566004)) {
											Tmp70 = res_566004.thrown;
											}
											else {
											Tmp70 = false;
											}
											
										if (Tmp70) {
										F.line = 60;
										excp_obj_551322 = res_566004;
										F.line = 60;
										break L4;
										}
										
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_566004);
										break;
									case 78:
										F.line = 375;
										var cmp_op_566416 = chckRange(op_arg_551406, 0, 10);
										F.line = 376;
										switch (cmp_op_566416) {
										case 0:
											F.line = 48;
											var op2_566434 = pop_518821(val_stack_551095, 0);
											F.line = 49;
											var op1_566451 = (Tmp71 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp71[0])[Tmp71[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_566451.pyType === null)) {
											F.line = 2895;
											var e_566478 = null;
											F.line = 2896;
											e_566478 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_566478.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_566478.parent = null;
											F.line = 26;
											raiseException(e_566478, "InternalError");
											}
											
											F.line = 27;
											var fun_566602 = op1_566451.pyType.magicMethods.Field16;
											if ((fun_566602 === null)) {
											F.line = 29;
											var obj_type_str_566611 = op1_566451.pyType.name;
											F.line = 30;
											var method_str_566613 = makeNimstrLit("lt");
											F.line = 31;
											var msg_566615 = (makeNimstrLit("No ")).concat(method_str_566613,makeNimstrLit(" method for "),obj_type_str_566611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_566617 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_566617.tk = 3;
											F.line = 106;
											excp_566617.thrown = true;
											F.line = 107;
											excp_566617.msg = new_py_string_176075(msg_566615);
											var excp_566620 = excp_566617;
											F.line = 34;
											excp_obj_551322 = excp_566620;
											F.line = 34;
											break L4;
											}
											
											var fun_566802 = fun_566602;
											F.line = 57;
											var res_566804 = fun_566802(op1_566451, op2_566434);
												if (of_py_exception_object_358259(res_566804)) {
												Tmp72 = res_566804.thrown;
												}
												else {
												Tmp72 = false;
												}
												
											if (Tmp72) {
											F.line = 60;
											excp_obj_551322 = res_566804;
											F.line = 60;
											break L4;
											}
											
											var res_567002 = res_566804;
											F.line = 378;
											HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_567002);
											break;
										case 1:
											F.line = 48;
											var op2_567232 = pop_518821(val_stack_551095, 0);
											F.line = 49;
											var op1_567249 = (Tmp73 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp73[0])[Tmp73[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_567249.pyType === null)) {
											F.line = 2895;
											var e_567276 = null;
											F.line = 2896;
											e_567276 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_567276.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_567276.parent = null;
											F.line = 26;
											raiseException(e_567276, "InternalError");
											}
											
											F.line = 27;
											var fun_567402 = op1_567249.pyType.magicMethods.Field17;
											if ((fun_567402 === null)) {
											F.line = 29;
											var obj_type_str_567411 = op1_567249.pyType.name;
											F.line = 30;
											var method_str_567413 = makeNimstrLit("le");
											F.line = 31;
											var msg_567415 = (makeNimstrLit("No ")).concat(method_str_567413,makeNimstrLit(" method for "),obj_type_str_567411,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_567417 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_567417.tk = 3;
											F.line = 106;
											excp_567417.thrown = true;
											F.line = 107;
											excp_567417.msg = new_py_string_176075(msg_567415);
											var excp_567420 = excp_567417;
											F.line = 34;
											excp_obj_551322 = excp_567420;
											F.line = 34;
											break L4;
											}
											
											var fun_567602 = fun_567402;
											F.line = 57;
											var res_567604 = fun_567602(op1_567249, op2_567232);
												if (of_py_exception_object_358259(res_567604)) {
												Tmp74 = res_567604.thrown;
												}
												else {
												Tmp74 = false;
												}
												
											if (Tmp74) {
											F.line = 60;
											excp_obj_551322 = res_567604;
											F.line = 60;
											break L4;
											}
											
											var res_567802 = res_567604;
											F.line = 380;
											HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_567802);
											break;
										case 2:
											F.line = 48;
											var op2_568032 = pop_518821(val_stack_551095, 0);
											F.line = 49;
											var op1_568049 = (Tmp75 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp75[0])[Tmp75[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_568049.pyType === null)) {
											F.line = 2895;
											var e_568076 = null;
											F.line = 2896;
											e_568076 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_568076.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_568076.parent = null;
											F.line = 26;
											raiseException(e_568076, "InternalError");
											}
											
											F.line = 27;
											var fun_568202 = op1_568049.pyType.magicMethods.Field18;
											if ((fun_568202 === null)) {
											F.line = 29;
											var obj_type_str_568211 = op1_568049.pyType.name;
											F.line = 30;
											var method_str_568213 = makeNimstrLit("eq");
											F.line = 31;
											var msg_568215 = (makeNimstrLit("No ")).concat(method_str_568213,makeNimstrLit(" method for "),obj_type_str_568211,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_568217 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_568217.tk = 3;
											F.line = 106;
											excp_568217.thrown = true;
											F.line = 107;
											excp_568217.msg = new_py_string_176075(msg_568215);
											var excp_568220 = excp_568217;
											F.line = 34;
											excp_obj_551322 = excp_568220;
											F.line = 34;
											break L4;
											}
											
											var fun_568402 = fun_568202;
											F.line = 57;
											var res_568404 = fun_568402(op1_568049, op2_568032);
												if (of_py_exception_object_358259(res_568404)) {
												Tmp76 = res_568404.thrown;
												}
												else {
												Tmp76 = false;
												}
												
											if (Tmp76) {
											F.line = 60;
											excp_obj_551322 = res_568404;
											F.line = 60;
											break L4;
											}
											
											var res_568602 = res_568404;
											F.line = 382;
											HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_568602);
											break;
										case 3:
											F.line = 48;
											var op2_568832 = pop_518821(val_stack_551095, 0);
											F.line = 49;
											var op1_568849 = (Tmp77 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp77[0])[Tmp77[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_568849.pyType === null)) {
											F.line = 2895;
											var e_568876 = null;
											F.line = 2896;
											e_568876 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_568876.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_568876.parent = null;
											F.line = 26;
											raiseException(e_568876, "InternalError");
											}
											
											F.line = 27;
											var fun_569002 = op1_568849.pyType.magicMethods.Field19;
											if ((fun_569002 === null)) {
											F.line = 29;
											var obj_type_str_569011 = op1_568849.pyType.name;
											F.line = 30;
											var method_str_569013 = makeNimstrLit("ne");
											F.line = 31;
											var msg_569015 = (makeNimstrLit("No ")).concat(method_str_569013,makeNimstrLit(" method for "),obj_type_str_569011,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_569017 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_569017.tk = 3;
											F.line = 106;
											excp_569017.thrown = true;
											F.line = 107;
											excp_569017.msg = new_py_string_176075(msg_569015);
											var excp_569020 = excp_569017;
											F.line = 34;
											excp_obj_551322 = excp_569020;
											F.line = 34;
											break L4;
											}
											
											var fun_569202 = fun_569002;
											F.line = 57;
											var res_569204 = fun_569202(op1_568849, op2_568832);
												if (of_py_exception_object_358259(res_569204)) {
												Tmp78 = res_569204.thrown;
												}
												else {
												Tmp78 = false;
												}
												
											if (Tmp78) {
											F.line = 60;
											excp_obj_551322 = res_569204;
											F.line = 60;
											break L4;
											}
											
											var res_569402 = res_569204;
											F.line = 384;
											HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_569402);
											break;
										case 4:
											F.line = 48;
											var op2_569632 = pop_518821(val_stack_551095, 0);
											F.line = 49;
											var op1_569649 = (Tmp79 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp79[0])[Tmp79[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_569649.pyType === null)) {
											F.line = 2895;
											var e_569676 = null;
											F.line = 2896;
											e_569676 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_569676.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_569676.parent = null;
											F.line = 26;
											raiseException(e_569676, "InternalError");
											}
											
											F.line = 27;
											var fun_569802 = op1_569649.pyType.magicMethods.Field20;
											if ((fun_569802 === null)) {
											F.line = 29;
											var obj_type_str_569811 = op1_569649.pyType.name;
											F.line = 30;
											var method_str_569813 = makeNimstrLit("gt");
											F.line = 31;
											var msg_569815 = (makeNimstrLit("No ")).concat(method_str_569813,makeNimstrLit(" method for "),obj_type_str_569811,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_569817 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_569817.tk = 3;
											F.line = 106;
											excp_569817.thrown = true;
											F.line = 107;
											excp_569817.msg = new_py_string_176075(msg_569815);
											var excp_569820 = excp_569817;
											F.line = 34;
											excp_obj_551322 = excp_569820;
											F.line = 34;
											break L4;
											}
											
											var fun_570002 = fun_569802;
											F.line = 57;
											var res_570004 = fun_570002(op1_569649, op2_569632);
												if (of_py_exception_object_358259(res_570004)) {
												Tmp80 = res_570004.thrown;
												}
												else {
												Tmp80 = false;
												}
												
											if (Tmp80) {
											F.line = 60;
											excp_obj_551322 = res_570004;
											F.line = 60;
											break L4;
											}
											
											var res_570202 = res_570004;
											F.line = 386;
											HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_570202);
											break;
										case 5:
											F.line = 48;
											var op2_570432 = pop_518821(val_stack_551095, 0);
											F.line = 49;
											var op1_570449 = (Tmp81 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp81[0])[Tmp81[1]];
											F.line = 50;
											F.line = 56;
											if ((op1_570449.pyType === null)) {
											F.line = 2895;
											var e_570476 = null;
											F.line = 2896;
											e_570476 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_570476.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_570476.parent = null;
											F.line = 26;
											raiseException(e_570476, "InternalError");
											}
											
											F.line = 27;
											var fun_570602 = op1_570449.pyType.magicMethods.Field21;
											if ((fun_570602 === null)) {
											F.line = 29;
											var obj_type_str_570611 = op1_570449.pyType.name;
											F.line = 30;
											var method_str_570613 = makeNimstrLit("ge");
											F.line = 31;
											var msg_570615 = (makeNimstrLit("No ")).concat(method_str_570613,makeNimstrLit(" method for "),obj_type_str_570611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_570617 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_570617.tk = 3;
											F.line = 106;
											excp_570617.thrown = true;
											F.line = 107;
											excp_570617.msg = new_py_string_176075(msg_570615);
											var excp_570620 = excp_570617;
											F.line = 34;
											excp_obj_551322 = excp_570620;
											F.line = 34;
											break L4;
											}
											
											var fun_570802 = fun_570602;
											F.line = 57;
											var res_570804 = fun_570802(op1_570449, op2_570432);
												if (of_py_exception_object_358259(res_570804)) {
												Tmp82 = res_570804.thrown;
												}
												else {
												Tmp82 = false;
												}
												
											if (Tmp82) {
											F.line = 60;
											excp_obj_551322 = res_570804;
											F.line = 60;
											break L4;
											}
											
											var res_571002 = res_570804;
											F.line = 388;
											HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, res_571002);
											break;
										case 6:
											F.line = 127;
											F.line = 55;
											var op1_571232 = pop_518821(val_stack_551095, 0);
											F.line = 56;
											var op2_571249 = (Tmp83 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp83[0])[Tmp83[1]];
											F.line = 57;
											F.line = 56;
											if ((op1_571232.pyType === null)) {
											F.line = 2895;
											var e_571276 = null;
											F.line = 2896;
											e_571276 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_571276.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_571276.parent = null;
											F.line = 26;
											raiseException(e_571276, "InternalError");
											}
											
											F.line = 27;
											var fun_571402 = op1_571232.pyType.magicMethods.Field22;
											if ((fun_571402 === null)) {
											F.line = 29;
											var obj_type_str_571411 = op1_571232.pyType.name;
											F.line = 30;
											var method_str_571413 = makeNimstrLit("contains");
											F.line = 31;
											var msg_571415 = (makeNimstrLit("No ")).concat(method_str_571413,makeNimstrLit(" method for "),obj_type_str_571411,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_571417 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_571417.tk = 3;
											F.line = 106;
											excp_571417.thrown = true;
											F.line = 107;
											excp_571417.msg = new_py_string_176075(msg_571415);
											var excp_571420 = excp_571417;
											F.line = 34;
											excp_obj_551322 = excp_571420;
											F.line = 34;
											break L4;
											}
											
											var fun_571602 = fun_571402;
											F.line = 57;
											var res_571604 = fun_571602(op1_571232, op2_571249);
												if (of_py_exception_object_358259(res_571604)) {
												Tmp84 = res_571604.thrown;
												}
												else {
												Tmp84 = false;
												}
												
											if (Tmp84) {
											F.line = 60;
											excp_obj_551322 = res_571604;
											F.line = 60;
											break L4;
											}
											
											var res_571802 = res_571604;
											if (val_stack_551095[0] != null) { val_stack_551095[0].push(res_571802); } else { val_stack_551095[0] = [res_571802]; };
											break;
										case 7:
											F.line = 392;
											F.line = 55;
											var op1_572028 = pop_518821(val_stack_551095, 0);
											F.line = 56;
											var op2_572045 = (Tmp85 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp85[0])[Tmp85[1]];
											F.line = 57;
											F.line = 56;
											if ((op1_572028.pyType === null)) {
											F.line = 2895;
											var e_572072 = null;
											F.line = 2896;
											e_572072 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_572072.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_572072.parent = null;
											F.line = 26;
											raiseException(e_572072, "InternalError");
											}
											
											F.line = 27;
											var fun_572202 = op1_572028.pyType.magicMethods.Field22;
											if ((fun_572202 === null)) {
											F.line = 29;
											var obj_type_str_572211 = op1_572028.pyType.name;
											F.line = 30;
											var method_str_572213 = makeNimstrLit("contains");
											F.line = 31;
											var msg_572215 = (makeNimstrLit("No ")).concat(method_str_572213,makeNimstrLit(" method for "),obj_type_str_572211,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_572217 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_572217.tk = 3;
											F.line = 106;
											excp_572217.thrown = true;
											F.line = 107;
											excp_572217.msg = new_py_string_176075(msg_572215);
											var excp_572220 = excp_572217;
											F.line = 34;
											excp_obj_551322 = excp_572220;
											F.line = 34;
											break L4;
											}
											
											var fun_572402 = fun_572202;
											F.line = 57;
											var res_572404 = fun_572402(op1_572028, op2_572045);
												if (of_py_exception_object_358259(res_572404)) {
												Tmp86 = res_572404.thrown;
												}
												else {
												Tmp86 = false;
												}
												
											if (Tmp86) {
											F.line = 60;
											excp_obj_551322 = res_572404;
											F.line = 60;
											break L4;
											}
											
											var res_572602 = res_572404;
											var obj_572603 = res_572602;
											if (of_py_bool_object_353106(obj_572603)) {
											F.line = 127;
											F.line = 45;
											if ((obj_572603.pyType === null)) {
											F.line = 2895;
											var e_572630 = null;
											F.line = 2896;
											e_572630 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_572630.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_572630.parent = null;
											F.line = 26;
											raiseException(e_572630, "InternalError");
											}
											
											F.line = 27;
											var fun_572802 = obj_572603.pyType.magicMethods.Field7;
											if ((fun_572802 === null)) {
											F.line = 29;
											var obj_type_str_572811 = obj_572603.pyType.name;
											F.line = 30;
											var method_str_572813 = makeNimstrLit("Not");
											F.line = 31;
											var msg_572815 = (makeNimstrLit("No ")).concat(method_str_572813,makeNimstrLit(" method for "),obj_type_str_572811,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_572817 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_572817.tk = 3;
											F.line = 106;
											excp_572817.thrown = true;
											F.line = 107;
											excp_572817.msg = new_py_string_176075(msg_572815);
											var excp_572820 = excp_572817;
											F.line = 34;
											excp_obj_551322 = excp_572820;
											F.line = 34;
											break L4;
											}
											
											var fun_573002 = fun_572802;
											F.line = 46;
											var res_573004 = fun_573002(obj_572603);
												if (of_py_exception_object_358259(res_573004)) {
												Tmp87 = res_573004.thrown;
												}
												else {
												Tmp87 = false;
												}
												
											if (Tmp87) {
											F.line = 49;
											excp_obj_551322 = res_573004;
											F.line = 49;
											break L4;
											}
											
											if (val_stack_551095[0] != null) { val_stack_551095[0].push(res_573004); } else { val_stack_551095[0] = [res_573004]; };
											}
											else {
												F.line = 396;
												F.line = 45;
												if ((obj_572603.pyType === null)) {
												F.line = 2895;
												var e_573437 = null;
												F.line = 2896;
												e_573437 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_573437.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_573437.parent = null;
												F.line = 26;
												raiseException(e_573437, "InternalError");
												}
												
												F.line = 27;
												var fun_573602 = obj_572603.pyType.magicMethods.Field12;
												if ((fun_573602 === null)) {
												F.line = 29;
												var obj_type_str_573611 = obj_572603.pyType.name;
												F.line = 30;
												var method_str_573613 = makeNimstrLit("bool");
												F.line = 31;
												var msg_573615 = (makeNimstrLit("No ")).concat(method_str_573613,makeNimstrLit(" method for "),obj_type_str_573611,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_573617 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_573617.tk = 3;
												F.line = 106;
												excp_573617.thrown = true;
												F.line = 107;
												excp_573617.msg = new_py_string_176075(msg_573615);
												var excp_573620 = excp_573617;
												F.line = 34;
												excp_obj_551322 = excp_573620;
												F.line = 34;
												break L4;
												}
												
												var fun_573802 = fun_573602;
												F.line = 46;
												var res_573804 = fun_573802(obj_572603);
													if (of_py_exception_object_358259(res_573804)) {
													Tmp88 = res_573804.thrown;
													}
													else {
													Tmp88 = false;
													}
													
												if (Tmp88) {
												F.line = 49;
												excp_obj_551322 = res_573804;
												F.line = 49;
												break L4;
												}
												
												var bool_obj_574001 = res_573804;
												if (!(of_py_bool_object_353106(bool_obj_574001))) {
												F.line = 2895;
												var e_574007 = null;
												F.line = 2896;
												e_574007 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 25;
												e_574007.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
												F.line = 2891;
												e_574007.parent = null;
												F.line = 398;
												raiseException(e_574007, "InternalError");
												}
												
												F.line = 127;
												F.line = 45;
												if ((bool_obj_574001.pyType === null)) {
												F.line = 2895;
												var e_574227 = null;
												F.line = 2896;
												e_574227 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
												F.line = 26;
												e_574227.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
												F.line = 2891;
												e_574227.parent = null;
												F.line = 26;
												raiseException(e_574227, "InternalError");
												}
												
												F.line = 27;
												var fun_574402 = bool_obj_574001.pyType.magicMethods.Field7;
												if ((fun_574402 === null)) {
												F.line = 29;
												var obj_type_str_574411 = bool_obj_574001.pyType.name;
												F.line = 30;
												var method_str_574413 = makeNimstrLit("Not");
												F.line = 31;
												var msg_574415 = (makeNimstrLit("No ")).concat(method_str_574413,makeNimstrLit(" method for "),obj_type_str_574411,makeNimstrLit(" defined"));
												F.line = 32;
												F.line = 104;
												var excp_574417 = new_py_type_error_simple_360601();
												F.line = 105;
												excp_574417.tk = 3;
												F.line = 106;
												excp_574417.thrown = true;
												F.line = 107;
												excp_574417.msg = new_py_string_176075(msg_574415);
												var excp_574420 = excp_574417;
												F.line = 34;
												excp_obj_551322 = excp_574420;
												F.line = 34;
												break L4;
												}
												
												var fun_574602 = fun_574402;
												F.line = 46;
												var res_574604 = fun_574602(bool_obj_574001);
													if (of_py_exception_object_358259(res_574604)) {
													Tmp89 = res_574604.thrown;
													}
													else {
													Tmp89 = false;
													}
													
												if (Tmp89) {
												F.line = 49;
												excp_obj_551322 = res_574604;
												F.line = 49;
												break L4;
												}
												
												if (val_stack_551095[0] != null) { val_stack_551095[0].push(res_574604); } else { val_stack_551095[0] = [res_574604]; };
											}
											
											break;
										case 10:
											F.line = 401;
											var target_excp_575021 = pop_518821(val_stack_551095, 0);
											if (!(is_exception_type_486113(target_excp_575021))) {
											F.line = 403;
											var msg_575022 = makeNimstrLit("catching classes that do not inherit from BaseException is not allowed");
											F.line = 405;
											F.line = 104;
											var excp_575024 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_575024.tk = 3;
											F.line = 106;
											excp_575024.thrown = true;
											F.line = 107;
											excp_575024.msg = new_py_string_176075(msg_575022);
											excp_obj_551322 = excp_575024;
											F.line = 405;
											break L4;
											}
											
											F.line = 406;
											var current_excp_575041 = (Tmp90 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp90[0])[Tmp90[1]];
											F.line = 127;
											if (val_stack_551095[0] != null) { val_stack_551095[0].push(match_excp_486072(target_excp_575021, current_excp_575041)); } else { val_stack_551095[0] = [match_excp_486072(target_excp_575021, current_excp_575041)]; };
											break;
										default: 
											F.line = 2895;
											var e_575216 = null;
											F.line = 2896;
											e_575216 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 25;
											e_575216.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
											F.line = 2891;
											e_575216.parent = null;
											F.line = 409;
											raiseException(e_575216, "InternalError");
											break;
										}
										break;
									case 79:
										F.line = 412;
										var name_575402 = names_551289[names_551289_Idx][chckIndx(op_arg_551406, 0, names_551289[names_551289_Idx].length+0-1)-0];
										F.line = 413;
										var ret_obj_575403 = py_import_551059(name_575402);
											if (of_py_exception_object_358259(ret_obj_575403)) {
											Tmp91 = ret_obj_575403.thrown;
											}
											else {
											Tmp91 = false;
											}
											
										if (Tmp91) {
										F.line = 415;
										excp_obj_551322 = ret_obj_575403;
										F.line = 415;
										break L4;
										}
										
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(ret_obj_575403); } else { val_stack_551095[0] = [ret_obj_575403]; };
										break;
									case 82:
										F.line = 419;
										var top_575627 = (Tmp92 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp92[0])[Tmp92[1]];
											F.line = 62;
											var ret_575633 = false;
											if (of_py_bool_object_353106(top_575627)) {
											F.line = 64;
											ret_575633 = top_575627.b;
											}
											
											F.line = 67;
											F.line = 45;
											if ((top_575627.pyType === null)) {
											F.line = 2895;
											var e_575660 = null;
											F.line = 2896;
											e_575660 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_575660.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_575660.parent = null;
											F.line = 26;
											raiseException(e_575660, "InternalError");
											}
											
											F.line = 27;
											var fun_575802 = top_575627.pyType.magicMethods.Field12;
											if ((fun_575802 === null)) {
											F.line = 29;
											var obj_type_str_575811 = top_575627.pyType.name;
											F.line = 30;
											var method_str_575813 = makeNimstrLit("bool");
											F.line = 31;
											var msg_575815 = (makeNimstrLit("No ")).concat(method_str_575813,makeNimstrLit(" method for "),obj_type_str_575811,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_575817 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_575817.tk = 3;
											F.line = 106;
											excp_575817.thrown = true;
											F.line = 107;
											excp_575817.msg = new_py_string_176075(msg_575815);
											var excp_575820 = excp_575817;
											F.line = 34;
											excp_obj_551322 = excp_575820;
											F.line = 34;
											break L4;
											}
											
											var fun_576002 = fun_575802;
											F.line = 46;
											var res_576004 = fun_576002(top_575627);
												if (of_py_exception_object_358259(res_576004)) {
												Tmp93 = res_576004.thrown;
												}
												else {
												Tmp93 = false;
												}
												
											if (Tmp93) {
											F.line = 49;
											excp_obj_551322 = res_576004;
											F.line = 49;
											break L4;
											}
											
											var bool_obj_576202 = res_576004;
										if ((bool_obj_576202.b == false)) {
										F.line = 96;
										last_i_551203 = subInt(op_arg_551406, 1);
										}
										else {
											F.line = 423;
										pop_518821(val_stack_551095, 0);
										}
										
										break;
									case 83:
										F.line = 426;
										var top_576228 = (Tmp94 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp94[0])[Tmp94[1]];
											F.line = 62;
											var ret_576234 = false;
											if (of_py_bool_object_353106(top_576228)) {
											F.line = 64;
											ret_576234 = top_576228.b;
											}
											
											F.line = 67;
											F.line = 45;
											if ((top_576228.pyType === null)) {
											F.line = 2895;
											var e_576261 = null;
											F.line = 2896;
											e_576261 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_576261.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_576261.parent = null;
											F.line = 26;
											raiseException(e_576261, "InternalError");
											}
											
											F.line = 27;
											var fun_576402 = top_576228.pyType.magicMethods.Field12;
											if ((fun_576402 === null)) {
											F.line = 29;
											var obj_type_str_576411 = top_576228.pyType.name;
											F.line = 30;
											var method_str_576413 = makeNimstrLit("bool");
											F.line = 31;
											var msg_576415 = (makeNimstrLit("No ")).concat(method_str_576413,makeNimstrLit(" method for "),obj_type_str_576411,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_576417 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_576417.tk = 3;
											F.line = 106;
											excp_576417.thrown = true;
											F.line = 107;
											excp_576417.msg = new_py_string_176075(msg_576415);
											var excp_576420 = excp_576417;
											F.line = 34;
											excp_obj_551322 = excp_576420;
											F.line = 34;
											break L4;
											}
											
											var fun_576602 = fun_576402;
											F.line = 46;
											var res_576604 = fun_576602(top_576228);
												if (of_py_exception_object_358259(res_576604)) {
												Tmp95 = res_576604.thrown;
												}
												else {
												Tmp95 = false;
												}
												
											if (Tmp95) {
											F.line = 49;
											excp_obj_551322 = res_576604;
											F.line = 49;
											break L4;
											}
											
											var bool_obj_576802 = res_576604;
										if ((bool_obj_576802.b == true)) {
										F.line = 96;
										last_i_551203 = subInt(op_arg_551406, 1);
										}
										else {
											F.line = 430;
										pop_518821(val_stack_551095, 0);
										}
										
										break;
									case 81:
									case 84:
										F.line = 96;
										last_i_551203 = subInt(op_arg_551406, 1);
										break;
									case 85:
										F.line = 436;
										var top_576824 = pop_518821(val_stack_551095, 0);
											F.line = 62;
											var ret_576830 = false;
											if (of_py_bool_object_353106(top_576824)) {
											F.line = 64;
											ret_576830 = top_576824.b;
											}
											
											F.line = 67;
											F.line = 45;
											if ((top_576824.pyType === null)) {
											F.line = 2895;
											var e_576857 = null;
											F.line = 2896;
											e_576857 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_576857.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_576857.parent = null;
											F.line = 26;
											raiseException(e_576857, "InternalError");
											}
											
											F.line = 27;
											var fun_577002 = top_576824.pyType.magicMethods.Field12;
											if ((fun_577002 === null)) {
											F.line = 29;
											var obj_type_str_577011 = top_576824.pyType.name;
											F.line = 30;
											var method_str_577013 = makeNimstrLit("bool");
											F.line = 31;
											var msg_577015 = (makeNimstrLit("No ")).concat(method_str_577013,makeNimstrLit(" method for "),obj_type_str_577011,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_577017 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_577017.tk = 3;
											F.line = 106;
											excp_577017.thrown = true;
											F.line = 107;
											excp_577017.msg = new_py_string_176075(msg_577015);
											var excp_577020 = excp_577017;
											F.line = 34;
											excp_obj_551322 = excp_577020;
											F.line = 34;
											break L4;
											}
											
											var fun_577202 = fun_577002;
											F.line = 46;
											var res_577204 = fun_577202(top_576824);
												if (of_py_exception_object_358259(res_577204)) {
												Tmp96 = res_577204.thrown;
												}
												else {
												Tmp96 = false;
												}
												
											if (Tmp96) {
											F.line = 49;
											excp_obj_551322 = res_577204;
											F.line = 49;
											break L4;
											}
											
											var bool_obj_577402 = res_577204;
										if ((bool_obj_577402.b == false)) {
										F.line = 96;
										last_i_551203 = subInt(op_arg_551406, 1);
										}
										
										break;
									case 86:
										F.line = 441;
										var top_577413 = pop_518821(val_stack_551095, 0);
											F.line = 62;
											var ret_577419 = false;
											if (of_py_bool_object_353106(top_577413)) {
											F.line = 64;
											ret_577419 = top_577413.b;
											}
											
											F.line = 67;
											F.line = 45;
											if ((top_577413.pyType === null)) {
											F.line = 2895;
											var e_577446 = null;
											F.line = 2896;
											e_577446 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 26;
											e_577446.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
											F.line = 2891;
											e_577446.parent = null;
											F.line = 26;
											raiseException(e_577446, "InternalError");
											}
											
											F.line = 27;
											var fun_577602 = top_577413.pyType.magicMethods.Field12;
											if ((fun_577602 === null)) {
											F.line = 29;
											var obj_type_str_577611 = top_577413.pyType.name;
											F.line = 30;
											var method_str_577613 = makeNimstrLit("bool");
											F.line = 31;
											var msg_577615 = (makeNimstrLit("No ")).concat(method_str_577613,makeNimstrLit(" method for "),obj_type_str_577611,makeNimstrLit(" defined"));
											F.line = 32;
											F.line = 104;
											var excp_577617 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_577617.tk = 3;
											F.line = 106;
											excp_577617.thrown = true;
											F.line = 107;
											excp_577617.msg = new_py_string_176075(msg_577615);
											var excp_577620 = excp_577617;
											F.line = 34;
											excp_obj_551322 = excp_577620;
											F.line = 34;
											break L4;
											}
											
											var fun_577802 = fun_577602;
											F.line = 46;
											var res_577804 = fun_577802(top_577413);
												if (of_py_exception_object_358259(res_577804)) {
												Tmp97 = res_577804.thrown;
												}
												else {
												Tmp97 = false;
												}
												
											if (Tmp97) {
											F.line = 49;
											excp_obj_551322 = res_577804;
											F.line = 49;
											break L4;
											}
											
											var bool_obj_578002 = res_577804;
										if ((bool_obj_578002.b == true)) {
										F.line = 96;
										last_i_551203 = subInt(op_arg_551406, 1);
										}
										
										break;
									case 87:
										F.line = 446;
										var name_578004 = names_551289[names_551289_Idx][chckIndx(op_arg_551406, 0, names_551289[names_551289_Idx].length+0-1)-0];
										F.line = 447;
										var obj_578005 = null;
										if (has_key_522437(f_551058.globals, name_578004)) {
										F.line = 449;
										obj_578005 = HEX5BHEX5D_523323(f_551058.globals, name_578004);
										}
										else {
										if (has_key_522437(bltin_dict_534014, name_578004)) {
										F.line = 451;
										obj_578005 = HEX5BHEX5D_523323(bltin_dict_534014, name_578004);
										}
										else {
											F.line = 453;
											F.line = 453;
											var fmt_res_578008 = mnewString(0);
											F.line = 453;
											if (fmt_res_578008 != null) { fmt_res_578008 = (fmt_res_578008).concat(makeNimstrLit("name \'")); } else { fmt_res_578008 = makeNimstrLit("name \'"); };
											F.line = 260;
											if (fmt_res_578008 != null) { fmt_res_578008 = (fmt_res_578008).concat(name_578004.str); } else { fmt_res_578008 = name_578004.str.slice(); };
											F.line = 453;
											if (fmt_res_578008 != null) { fmt_res_578008 = (fmt_res_578008).concat(makeNimstrLit("\' is not defined")); } else { fmt_res_578008 = makeNimstrLit("\' is not defined"); };
											var msg_578201 = nimCopy(null, fmt_res_578008, NTI138);
											F.line = 454;
											F.line = 104;
											var excp_578203 = new_py_name_error_simple_358601();
											F.line = 105;
											excp_578203.tk = 1;
											F.line = 106;
											excp_578203.thrown = true;
											F.line = 107;
											excp_578203.msg = new_py_string_176075(msg_578201);
											excp_obj_551322 = excp_578203;
											F.line = 454;
											break L4;
										}
										}
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(obj_578005); } else { val_stack_551095[0] = [obj_578005]; };
										break;
									case 88:
										if ((0 < (block_stack_551295 != null ? block_stack_551295.length : 0))) {
										F.line = 459;
										if (block_stack_551295 != null) { block_stack_551295.push({handler: op_arg_551406, sPtr: (val_stack_551095[0] != null ? val_stack_551095[0].length : 0), context: (Tmp98 = HEX5BHEX5D_561636(block_stack_551295, 1), Tmp98[0])[Tmp98[1]].context, status: 0}); } else { block_stack_551295 = [{handler: op_arg_551406, sPtr: (val_stack_551095[0] != null ? val_stack_551095[0].length : 0), context: (Tmp98 = HEX5BHEX5D_561636(block_stack_551295, 1), Tmp98[0])[Tmp98[1]].context, status: 0}]; };
										}
										else {
											F.line = 461;
										if (block_stack_551295 != null) { block_stack_551295.push({handler: op_arg_551406, sPtr: (val_stack_551095[0] != null ? val_stack_551095[0].length : 0), context: null, status: 0}); } else { block_stack_551295 = [{handler: op_arg_551406, sPtr: (val_stack_551095[0] != null ? val_stack_551095[0].length : 0), context: null, status: 0}]; };
										}
										
										break;
									case 89:
										F.line = 464;
										var obj_578471 = fast_locals_551291[fast_locals_551291_Idx][chckIndx(op_arg_551406, 0, fast_locals_551291[fast_locals_551291_Idx].length+0-1)-0];
										if ((obj_578471 === null)) {
										F.line = 466;
										var name_578479 = f_551058.code.localVars[chckIndx(op_arg_551406, 0, f_551058.code.localVars.length+0-1)-0];
										F.line = 467;
										F.line = 467;
										var fmt_res_578482 = mnewString(0);
										F.line = 467;
										if (fmt_res_578482 != null) { fmt_res_578482 = (fmt_res_578482).concat(makeNimstrLit("local variable ")); } else { fmt_res_578482 = makeNimstrLit("local variable "); };
										F.line = 270;
										if (fmt_res_578482 != null) { fmt_res_578482 = (fmt_res_578482).concat(HEX24_157579(name_578479)); } else { fmt_res_578482 = HEX24_157579(name_578479).slice(); };
										F.line = 467;
										if (fmt_res_578482 != null) { fmt_res_578482 = (fmt_res_578482).concat(makeNimstrLit(" referenced before assignment")); } else { fmt_res_578482 = makeNimstrLit(" referenced before assignment"); };
										var msg_578601 = nimCopy(null, fmt_res_578482, NTI138);
										F.line = 468;
										F.line = 104;
										var excp_578603 = new_py_unbound_local_error_simple_367601();
										F.line = 105;
										excp_578603.tk = 10;
										F.line = 106;
										excp_578603.thrown = true;
										F.line = 107;
										excp_578603.msg = new_py_string_176075(msg_578601);
										var excp_578605 = excp_578603;
										F.line = 469;
										excp_obj_551322 = excp_578605;
										F.line = 469;
										break L4;
										}
										
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(obj_578471); } else { val_stack_551095[0] = [obj_578471]; };
										break;
									case 90:
										F.line = 473;
										fast_locals_551291[fast_locals_551291_Idx][chckIndx(op_arg_551406, 0, fast_locals_551291[fast_locals_551291_Idx].length+0-1)-0] = pop_518821(val_stack_551095, 0);
										break;
									case 92:
										F.line = 476;
										switch (op_arg_551406) {
										case 0:
												if (!((0 < (block_stack_551295 != null ? block_stack_551295.length : 0)))) Tmp99 = true; else {													Tmp99 = ((Tmp100 = HEX5BHEX5D_561636(block_stack_551295, 1), Tmp100[0])[Tmp100[1]].context === null);												}											if (Tmp99) {
											F.line = 479;
											F.line = 104;
											var excp_578854 = new_py_runtime_error_simple_371601();
											F.line = 105;
											excp_578854.tk = 14;
											F.line = 106;
											excp_578854.thrown = true;
											F.line = 107;
											excp_578854.msg = new_py_string_176075(makeNimstrLit("No active exception to reraise"));
											var excp_578856 = excp_578854;
											F.line = 480;
											excp_obj_551322 = excp_578856;
											F.line = 480;
											break L4;
											}
											else {
												F.line = 482;
												excp_obj_551322 = (Tmp101 = HEX5BHEX5D_561636(block_stack_551295, 1), Tmp101[0])[Tmp101[1]].context;
												F.line = 482;
												break L4;
											}
											
											break;
										case 1:
											F.line = 484;
											var obj_578881 = pop_518821(val_stack_551095, 0);
											F.line = 485;
											var excp_578882 = null;
											if (is_class_159414(obj_578881)) {
											F.line = 487;
											var new_func_578883 = obj_578881.magicMethods.Field26;
											if ((new_func_578883 === null)) {
											F.line = 2895;
											var e_578895 = null;
											F.line = 2896;
											e_578895 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 489;
											e_578895.message = nimCopy(null, makeNimstrLit("__new__ of exceptions should be initialized"), NTI138);
											F.line = 2891;
											e_578895.parent = null;
											F.line = 489;
											raiseException(e_578895, "InternalError");
											}
											
											F.line = 490;
											excp_578882 = new_func_578883([]);
											}
											else {
												F.line = 492;
												excp_578882 = obj_578881;
											}
											
											if (!(of_py_exception_object_358259(excp_578882))) {
											F.line = 2895;
											var e_579020 = null;
											F.line = 2896;
											e_579020 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 25;
											e_579020.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
											F.line = 2891;
											e_579020.parent = null;
											F.line = 494;
											raiseException(e_579020, "InternalError");
											}
											
											F.line = 495;
											excp_578882.thrown = true;
											F.line = 496;
											excp_obj_551322 = excp_578882;
											F.line = 496;
											break L4;
											break;
										default: 
											F.line = 2895;
											var e_579406 = null;
											F.line = 2896;
											e_579406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
											F.line = 498;
											F.line = 498;
											var fmt_res_579416 = mnewString(0);
											F.line = 498;
											if (fmt_res_579416 != null) { fmt_res_579416 = (fmt_res_579416).concat(makeNimstrLit("RaiseVarargs has opArg ")); } else { fmt_res_579416 = makeNimstrLit("RaiseVarargs has opArg "); };
											F.line = 270;
											if (fmt_res_579416 != null) { fmt_res_579416 = (fmt_res_579416).concat(cstrToNimstr((op_arg_551406)+"")); } else { fmt_res_579416 = cstrToNimstr((op_arg_551406)+"").slice(); };
											e_579406.message = nimCopy(null, fmt_res_579416, NTI138);
											F.line = 2891;
											e_579406.parent = null;
											F.line = 498;
											raiseException(e_579406, "InternalError");
											break;
										}
										break;
									case 93:
										F.line = 501;
										var args_579630 = new_seq_563054(chckRange(op_arg_551406, 0, 2147483647));
										L102: do {
											F.line = 502;
											var i_579642 = 0;
											F.line = 2107;
											var res_582949 = 1;
											L103: do {
												F.line = 2108;
													L104: while (true) {
													if (!(res_582949 <= op_arg_551406)) break L104;
														F.line = 2109;
														i_579642 = res_582949;
														F.line = 503;
														HEX5BHEX5DHEX3D_552604(args_579630, i_579642, pop_518821(val_stack_551095, 0));
														F.line = 2110;
														res_582949 = addInt(res_582949, 1);
													}
											} while(false);
										} while(false);
										F.line = 504;
										var func_obj_no_cast_579675 = pop_518821(val_stack_551095, 0);
										F.line = 505;
										var ret_obj_579676 = null;
										if (of_py_function_object_540137(func_obj_no_cast_579675)) {
										F.line = 508;
										var func_obj_579677 = func_obj_no_cast_579675;
										F.line = 510;
										var new_f_579678 = new_py_frame_551050(func_obj_579677, args_579630, f_551058);
											if (of_py_exception_object_358259(new_f_579678)) {
											Tmp105 = new_f_579678.thrown;
											}
											else {
											Tmp105 = false;
											}
											
										if (Tmp105) {
										F.line = 512;
										excp_obj_551322 = new_f_579678;
										F.line = 512;
										break L4;
										}
										
										F.line = 513;
										ret_obj_579676 = eval_frame_551056(new_f_579678);
										}
										else {
											F.line = 517;
											var call_func_579679 = func_obj_no_cast_579675.pyType.magicMethods.Field31;
											if ((call_func_579679 === null)) {
											F.line = 519;
											F.line = 519;
											var fmt_res_579688 = mnewString(0);
											F.line = 260;
											if (fmt_res_579688 != null) { fmt_res_579688 = (fmt_res_579688).concat(func_obj_no_cast_579675.pyType.name); } else { fmt_res_579688 = func_obj_no_cast_579675.pyType.name.slice(); };
											F.line = 519;
											if (fmt_res_579688 != null) { fmt_res_579688 = (fmt_res_579688).concat(makeNimstrLit(" is not callable")); } else { fmt_res_579688 = makeNimstrLit(" is not callable"); };
											var msg_579801 = nimCopy(null, fmt_res_579688, NTI138);
											F.line = 520;
											F.line = 104;
											var excp_579803 = new_py_type_error_simple_360601();
											F.line = 105;
											excp_579803.tk = 3;
											F.line = 106;
											excp_579803.thrown = true;
											F.line = 107;
											excp_579803.msg = new_py_string_176075(msg_579801);
											ret_obj_579676 = excp_579803;
											}
											else {
												F.line = 522;
												ret_obj_579676 = call_func_579679(func_obj_no_cast_579675, args_579630);
											}
											
										}
										
											if (of_py_exception_object_358259(ret_obj_579676)) {
											Tmp106 = ret_obj_579676.thrown;
											}
											else {
											Tmp106 = false;
											}
											
										if (Tmp106) {
										F.line = 524;
										excp_obj_551322 = ret_obj_579676;
										F.line = 524;
										break L4;
										}
										
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(ret_obj_579676); } else { val_stack_551095[0] = [ret_obj_579676]; };
										break;
									case 94:
										if (!(((op_arg_551406 == 0) || (op_arg_551406 == 8)))) {
										F.line = 529;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(529, 18) `opArg == 0 or opArg == 8` "));
										}
										
										F.line = 530;
										var name_580210 = pop_518821(val_stack_551095, 0);
										F.line = 531;
										var code_580220 = pop_518821(val_stack_551095, 0);
										F.line = 532;
										var closure_580221 = null;
										if (!(((op_arg_551406 & 8) == 0))) {
										F.line = 534;
										closure_580221 = pop_518821(val_stack_551095, 0);
										}
										
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(new_py_func_542057(name_580210, code_580220, f_551058.globals, closure_580221)); } else { val_stack_551095[0] = [new_py_func_542057(name_580210, code_580220, f_551058.globals, closure_580221)]; };
										break;
									case 95:
										F.line = 538;
										var lower_580412 = null;
										F.line = 538;
										var upper_580413 = null;
										F.line = 538;
										var step_580414 = null;
										if ((op_arg_551406 == 3)) {
										F.line = 540;
										step_580414 = pop_518821(val_stack_551095, 0);
										}
										else {
											if (!((op_arg_551406 == 2))) {
											F.line = 542;
											failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(542, 20) `opArg == 2` "));
											}
											
											F.line = 543;
											step_580414 = py_none_356044;
										}
										
										F.line = 544;
										upper_580413 = pop_518821(val_stack_551095, 0);
										F.line = 545;
										lower_580412 = (Tmp107 = HEX5BHEX5D_551617(val_stack_551095[0], 1), Tmp107[0])[Tmp107[1]];
										F.line = 546;
										var slice_580625 = new_py_slice_463057(lower_580412, upper_580413, step_580414);
											if (of_py_exception_object_358259(slice_580625)) {
											Tmp108 = slice_580625.thrown;
											}
											else {
											Tmp108 = false;
											}
											
										if (Tmp108) {
										F.line = 548;
										excp_obj_551322 = slice_580625;
										F.line = 548;
										break L4;
										}
										
										F.line = 549;
										HEX5BHEX5DHEX3D_552604(val_stack_551095[0], 1, slice_580625);
										break;
									case 96:
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(cell_vars_551293[cell_vars_551293_Idx][chckIndx(op_arg_551406, 0, cell_vars_551293[cell_vars_551293_Idx].length+0-1)-0]); } else { val_stack_551095[0] = [cell_vars_551293[cell_vars_551293_Idx][chckIndx(op_arg_551406, 0, cell_vars_551293[cell_vars_551293_Idx].length+0-1)-0]]; };
										break;
									case 97:
										F.line = 555;
										var c_581012 = cell_vars_551293[cell_vars_551293_Idx][chckIndx(op_arg_551406, 0, cell_vars_551293[cell_vars_551293_Idx].length+0-1)-0];
										if ((c_581012.refObj === null)) {
										F.line = 557;
										var name_581020 = f_551058.code.cellVars[chckIndx(op_arg_551406, 0, f_551058.code.cellVars.length+0-1)-0];
										F.line = 558;
										F.line = 558;
										var fmt_res_581023 = mnewString(0);
										F.line = 558;
										if (fmt_res_581023 != null) { fmt_res_581023 = (fmt_res_581023).concat(makeNimstrLit("local variable ")); } else { fmt_res_581023 = makeNimstrLit("local variable "); };
										F.line = 270;
										if (fmt_res_581023 != null) { fmt_res_581023 = (fmt_res_581023).concat(HEX24_157579(name_581020)); } else { fmt_res_581023 = HEX24_157579(name_581020).slice(); };
										F.line = 558;
										if (fmt_res_581023 != null) { fmt_res_581023 = (fmt_res_581023).concat(makeNimstrLit(" referenced before assignment")); } else { fmt_res_581023 = makeNimstrLit(" referenced before assignment"); };
										var msg_581201 = nimCopy(null, fmt_res_581023, NTI138);
										F.line = 559;
										F.line = 104;
										var excp_581203 = new_py_unbound_local_error_simple_367601();
										F.line = 105;
										excp_581203.tk = 10;
										F.line = 106;
										excp_581203.thrown = true;
										F.line = 107;
										excp_581203.msg = new_py_string_176075(msg_581201);
										var excp_581205 = excp_581203;
										F.line = 560;
										excp_obj_551322 = excp_581205;
										F.line = 560;
										break L4;
										}
										
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(c_581012.refObj); } else { val_stack_551095[0] = [c_581012.refObj]; };
										break;
									case 98:
										F.line = 564;
										cell_vars_551293[cell_vars_551293_Idx][chckIndx(op_arg_551406, 0, cell_vars_551293[cell_vars_551293_Idx].length+0-1)-0].refObj = pop_518821(val_stack_551095, 0);
										break;
									case 104:
										F.line = 567;
										var top_581431 = pop_518821(val_stack_551095, 0);
										F.line = 568;
										var l_581447 = (Tmp109 = HEX5BHEX5D_551617(val_stack_551095[0], op_arg_551406), Tmp109[0])[Tmp109[1]];
										if (!(of_py_list_object_505271(l_581447))) {
										F.line = 569;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(569, 18) `ofPyListObject(l)` "));
										}
										
										F.line = 570;
										if (l_581447.items != null) { l_581447.items.push(top_581431); } else { l_581447.items = [top_581431]; };
										break;
									default: 
										F.line = 573;
										F.line = 573;
										var fmt_res_581613 = mnewString(0);
										F.line = 573;
										if (fmt_res_581613 != null) { fmt_res_581613 = (fmt_res_581613).concat(makeNimstrLit("!!! NOT IMPLEMENTED OPCODE ")); } else { fmt_res_581613 = makeNimstrLit("!!! NOT IMPLEMENTED OPCODE "); };
										F.line = 270;
										if (fmt_res_581613 != null) { fmt_res_581613 = (fmt_res_581613).concat(reprEnum(op_code_551405, NTI459016)); } else { fmt_res_581613 = reprEnum(op_code_551405, NTI459016).slice(); };
										F.line = 573;
										if (fmt_res_581613 != null) { fmt_res_581613 = (fmt_res_581613).concat(makeNimstrLit(" IN EVAL FRAME !!!")); } else { fmt_res_581613 = makeNimstrLit(" IN EVAL FRAME !!!"); };
										var msg_581807 = nimCopy(null, fmt_res_581613, NTI138);
										F.line = 574;
										F.line = 104;
										var excp_581809 = new_py_not_implemented_error_simple_359601();
										F.line = 105;
										excp_581809.tk = 2;
										F.line = 106;
										excp_581809.thrown = true;
										F.line = 107;
										excp_581809.msg = new_py_string_176075(msg_581807);
										result_551112 = excp_581809;
										break BeforeRet;
										break;
									}
								} while(false);
							}
					} while(false);
					L110: do {
						if (!(!((excp_obj_551322 === null)))) {
						F.line = 578;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(578, 9) `not isNil(excpObj)` "));
						}
						
						if (!(of_py_exception_object_358259(excp_obj_551322))) {
						F.line = 579;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/neval.nim(579, 16) `ofPyExceptionObject(excpObj)` "));
						}
						
						F.line = 580;
						var excp_582201 = excp_obj_551322;
						F.line = 581;
						set_trace_back_551218(excp_582201);
						L111: do {
							F.line = 582;
								L112: while (true) {
								if (!(0 < (block_stack_551295 != null ? block_stack_551295.length : 0))) break L112;
									F.line = 583;
									var top_block_582226 = (Tmp113 = HEX5BHEX5D_561636(block_stack_551295, 1), Tmp113[0])[Tmp113[1]];
									F.line = 584;
									switch (top_block_582226.status) {
									case 0:
										F.line = 586;
										excp_582201.context = top_block_582226.context;
										F.line = 587;
										top_block_582226.context = excp_582201;
										F.line = 588;
										top_block_582226.status = 1;
										F.line = 589;
										if (val_stack_551095[0].length < chckRange(top_block_582226.sPtr, 0, 2147483647)) { for (var i=val_stack_551095[0].length;i<chckRange(top_block_582226.sPtr, 0, 2147483647);++i) val_stack_551095[0].push(null); }
               else { val_stack_551095[0].length = chckRange(top_block_582226.sPtr, 0, 2147483647); };
										F.line = 127;
										if (val_stack_551095[0] != null) { val_stack_551095[0].push(excp_582201); } else { val_stack_551095[0] = [excp_582201]; };
										F.line = 96;
										last_i_551203 = subInt(top_block_582226.handler, 1);
										F.line = 594;
										break L110;
										break;
									case 1:
										if ((excp_582201.context === null)) {
										F.line = 597;
										excp_582201.context = top_block_582226.context;
										}
										
										F.line = 599;
										F.line = 166;
										var ret_582627 = (Tmp114 = HEX5BHEX5D_561636(block_stack_551295, 1), Tmp114[0])[Tmp114[1]].sPtr;
										F.line = 167;
										pop_561671(block_stack_551295, 0);
										if (val_stack_551095[0].length < chckRange(ret_582627, 0, 2147483647)) { for (var i=val_stack_551095[0].length;i<chckRange(ret_582627, 0, 2147483647);++i) val_stack_551095[0].push(null); }
               else { val_stack_551095[0].length = chckRange(ret_582627, 0, 2147483647); };
										break;
									default: 
										F.line = 2895;
										var e_582652 = null;
										F.line = 2896;
										e_582652 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 25;
										e_582652.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_582652.parent = null;
										F.line = 601;
										raiseException(e_582652, "InternalError");
										break;
									}
								}
						} while(false);
						F.line = 602;
						result_551112 = excp_582201;
						break BeforeRet;
					} while(false);
				}
		} while(false);
		} finally {
		framePtr = F;
		}
	} while (false);
	framePtr = F.prev;

	return result_551112;

}

function call_py_function_object_magic_597735(self_no_cast_597737, args_597751) {
			var Tmp1;

	var result_597752 = null;

	var F={procname:"funcobjectImpl.callPyFunctionObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_597737.m_type, NTI540123))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyFunctionObject` "));
		}
		
		F.line = 438;
		var self_597801 = self_no_cast_597737;
		F.line = 16;
		var f_597802 = new_py_frame_551050(self_597801, args_597751, null);
			if (of_py_exception_object_358259(f_597802)) {
			Tmp1 = f_597802.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 18;
		result_597752 = f_597802;
		break BeforeRet;
		}
		
		result_597752 = eval_frame_551056(f_597802);
	} while (false);
	framePtr = F.prev;

	return result_597752;

}

function HEX26_598015(x_598020, y_598023) {
	var result_598025 = null;

	var F={procname:"&.&",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2446;
		result_598025 = new Array(chckRange(addInt((x_598020 != null ? x_598020.length : 0), (y_598023 != null ? y_598023.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_598020 != null ? x_598020.length : 0), (y_598023 != null ? y_598023.length : 0)), 0, 2147483647);++i) {result_598025[i]=null;}		L1: do {
			F.line = 2447;
			var i_598068 = 0;
			F.line = 2104;
			var colontmp__598096 = 0;
			F.line = 2447;
			colontmp__598096 = subInt((x_598020 != null ? x_598020.length : 0), 1);
			F.line = 2107;
			var res_598099 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_598099 <= colontmp__598096)) break L3;
						F.line = 2109;
						i_598068 = res_598099;
						F.line = 2448;
						result_598025[chckIndx(i_598068, 0, result_598025.length+0-1)-0] = x_598020[chckIndx(i_598068, 0, x_598020.length+0-1)-0];
						F.line = 2110;
						res_598099 = addInt(res_598099, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 2449;
			var i_598087 = 0;
			F.line = 2104;
			var colontmp__598104 = 0;
			F.line = 2449;
			colontmp__598104 = subInt((y_598023 != null ? y_598023.length : 0), 1);
			F.line = 2107;
			var res_598107 = 0;
			L5: do {
				F.line = 2108;
					L6: while (true) {
					if (!(res_598107 <= colontmp__598104)) break L6;
						F.line = 2109;
						i_598087 = res_598107;
						F.line = 2450;
						result_598025[chckIndx(addInt(i_598087, (x_598020 != null ? x_598020.length : 0)), 0, result_598025.length+0-1)-0] = y_598023[chckIndx(i_598087, 0, y_598023.length+0-1)-0];
						F.line = 2110;
						res_598107 = addInt(res_598107, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_598025;

}

function call_py_bound_method_object_magic_597818(self_no_cast_597820, args_597834) {
			var Tmp1;

	var result_597835 = null;

	var F={procname:"funcobjectImpl.callPyBoundMethodObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_597820.m_type, NTI541100))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyBoundMethodObject` "));
		}
		
		F.line = 438;
		var self_598001 = self_no_cast_597820;
		F.line = 24;
		var f_598124 = new_py_frame_551050(self_598001.fun, HEX26_598015([self_598001.self], args_597834), null);
			if (of_py_exception_object_358259(f_598124)) {
			Tmp1 = f_598124.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 26;
		result_597835 = f_598124;
		break BeforeRet;
		}
		
		result_597835 = eval_frame_551056(f_598124);
	} while (false);
	framePtr = F.prev;

	return result_597835;

}
py_function_object_type_540135.magicMethods.Field31 = call_py_function_object_magic_597735;
py_bound_method_object_type_541108.magicMethods.Field31 = call_py_bound_method_object_magic_597818;

function new_600206() {
	var result_600211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_600401 = null;
		F.line = 211;
		r_600401 = {m_type: NTI600083, name: null, dType: null, kind: 0, meth: 0, id: 0, pyType: null};
		F.line = 212;
		result_600211 = r_600401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_600211;

}

function new_py_method_descr_simple_600201() {
	var result_600203 = null;

	var F={procname:"descrobject.newPyMethodDescrSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_600424 = new_600206();
		F.line = 561;
		obj_600424.pyType = py_method_descr_object_type_600095;
		F.line = 563;
		give_id_157814(obj_600424);
		result_600203 = obj_600424;
	framePtr = F.prev;

	return result_600203;

}

function new_py_method_descr_default_600821(args_600038) {
	var result_600824 = null;

	var F={procname:"descrobject.newPyMethodDescrDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_600824 = new_py_method_descr_simple_600201();
	framePtr = F.prev;

	return result_600824;

}
var py_method_descr_object_type_600095 = new_py_type_159261(makeNimstrLit("MethodDescr"));
py_method_descr_object_type_600095.magicMethods.Field26 = new_py_method_descr_default_600821;

function new_py_nim_func_549444(fun_549446, name_549447) {
	var result_549448 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		F.line = 47;
		result_549448 = new_py_nim_func_simple_547201();
		F.line = 48;
		result_549448.name = name_549447;
		F.line = 49;
		result_549448.kind = 0;
		F.line = 50;
		result_549448.fun = fun_549446;
	framePtr = F.prev;

	return result_549448;

}

function new_py_nim_func_549485(fun_549480, name_549482, self_549484) {
	var result_549487 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_549484 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self549484)` "));
		}
		
		F.line = 58;
		result_549487 = new_py_nim_func_simple_547201();
		F.line = 59;
		result_549487.name = name_549482;
		F.line = 60;
		result_549487.kind = 1;
		F.line = 61;
		result_549487.fun = fun_549480;
		F.line = 62;
		result_549487.self = self_549484;
	framePtr = F.prev;

	return result_549487;

}

function new_py_nim_func_549622(fun_549617, name_549619, self_549621) {
	var result_549624 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_549621 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self549621)` "));
		}
		
		F.line = 58;
		result_549624 = new_py_nim_func_simple_547201();
		F.line = 59;
		result_549624.name = name_549619;
		F.line = 60;
		result_549624.kind = 2;
		F.line = 61;
		result_549624.fun = fun_549617;
		F.line = 62;
		result_549624.self = self_549621;
	framePtr = F.prev;

	return result_549624;

}

function new_py_nim_func_549822(fun_549817, name_549819, self_549821) {
	var result_549824 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_549821 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self549821)` "));
		}
		
		F.line = 58;
		result_549824 = new_py_nim_func_simple_547201();
		F.line = 59;
		result_549824.name = name_549819;
		F.line = 60;
		result_549824.kind = 3;
		F.line = 61;
		result_549824.fun = fun_549817;
		F.line = 62;
		result_549824.self = self_549821;
	framePtr = F.prev;

	return result_549824;

}

function new_py_nim_func_550022(fun_550017, name_550019, self_550021) {
	var result_550024 = null;

	var F={procname:"methodobject.newPyNimFunc",prev:framePtr,filename:"../Objects/methodobject.nim",line:0};
	framePtr = F;
		if (!(!((self_550021 === null)))) {
		F.line = 57;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/methodobject.nim(57, 5) `not isNil(self550021)` "));
		}
		
		F.line = 58;
		result_550024 = new_py_nim_func_simple_547201();
		F.line = 59;
		result_550024.name = name_550019;
		F.line = 60;
		result_550024.kind = 4;
		F.line = 61;
		result_550024.fun = fun_550017;
		F.line = 62;
		result_550024.self = self_550021;
	framePtr = F.prev;

	return result_550024;

}

function get_py_method_descr_object_magic_602014(self_no_cast_602016, other_602017) {
	var result_602018 = null;

	var F={procname:"descrobject.getPyMethodDescrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_602016.m_type, NTI600083))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyMethodDescrObject` "));
		}
		
		F.line = 438;
		var self_602201 = self_no_cast_602016;
		if (!((other_602017.pyType == self_602201.dType))) {
		F.line = 49;
		F.line = 49;
		var fmt_res_602215 = mnewString(0);
		F.line = 49;
		if (fmt_res_602215 != null) { fmt_res_602215 = (fmt_res_602215).concat(makeNimstrLit("descriptor ")); } else { fmt_res_602215 = makeNimstrLit("descriptor "); };
		F.line = 270;
		if (fmt_res_602215 != null) { fmt_res_602215 = (fmt_res_602215).concat(HEX24_157579(self_602201.name)); } else { fmt_res_602215 = HEX24_157579(self_602201.name).slice(); };
		F.line = 49;
		if (fmt_res_602215 != null) { fmt_res_602215 = (fmt_res_602215).concat(makeNimstrLit(" for ")); } else { fmt_res_602215 = makeNimstrLit(" for "); };
		F.line = 260;
		if (fmt_res_602215 != null) { fmt_res_602215 = (fmt_res_602215).concat(self_602201.dType.name); } else { fmt_res_602215 = self_602201.dType.name.slice(); };
		F.line = 49;
		if (fmt_res_602215 != null) { fmt_res_602215 = (fmt_res_602215).concat(makeNimstrLit(" objects ")); } else { fmt_res_602215 = makeNimstrLit(" objects "); };
		F.line = 50;
		var fmt_res_602603 = mnewString(0);
		F.line = 50;
		if (fmt_res_602603 != null) { fmt_res_602603 = (fmt_res_602603).concat(makeNimstrLit("doesn\'t apply to ")); } else { fmt_res_602603 = makeNimstrLit("doesn\'t apply to "); };
		F.line = 260;
		if (fmt_res_602603 != null) { fmt_res_602603 = (fmt_res_602603).concat(other_602017.pyType.name); } else { fmt_res_602603 = other_602017.pyType.name.slice(); };
		F.line = 50;
		if (fmt_res_602603 != null) { fmt_res_602603 = (fmt_res_602603).concat(makeNimstrLit(" object")); } else { fmt_res_602603 = makeNimstrLit(" object"); };
		var msg_602801 = (fmt_res_602215).concat(fmt_res_602603);
		F.line = 51;
		F.line = 104;
		var excp_602803 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_602803.tk = 3;
		F.line = 106;
		excp_602803.thrown = true;
		F.line = 107;
		excp_602803.msg = new_py_string_176075(msg_602801);
		result_602018 = excp_602803;
		break BeforeRet;
		}
		
		F.line = 52;
		var owner_602805 = other_602017;
		F.line = 53;
		switch (self_602201.kind) {
		case 0:
			F.line = 55;
			result_602018 = new_py_nim_func_549444(self_602201.meth, self_602201.name);
			break BeforeRet;
			break;
		case 1:
			F.line = 57;
			result_602018 = new_py_nim_func_549485(self_602201.meth, self_602201.name, owner_602805);
			break BeforeRet;
			break;
		case 2:
			F.line = 59;
			result_602018 = new_py_nim_func_549622(self_602201.meth, self_602201.name, owner_602805);
			break BeforeRet;
			break;
		case 3:
			F.line = 61;
			result_602018 = new_py_nim_func_549822(self_602201.meth, self_602201.name, owner_602805);
			break BeforeRet;
			break;
		case 4:
			F.line = 63;
			result_602018 = new_py_nim_func_550022(self_602201.meth, self_602201.name, owner_602805);
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_602018;

}

function new_603006() {
	var result_603011 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_603201 = null;
		F.line = 211;
		r_603201 = {m_type: NTI602891, getter: null, setter: null, id: 0, pyType: null};
		F.line = 212;
		result_603011 = r_603201;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_603011;

}

function new_py_get_set_descr_simple_603001() {
	var result_603003 = null;

	var F={procname:"descrobject.newPyGetSetDescrSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_603224 = new_603006();
		F.line = 561;
		obj_603224.pyType = py_get_set_descr_object_type_602899;
		F.line = 563;
		give_id_157814(obj_603224);
		result_603003 = obj_603224;
	framePtr = F.prev;

	return result_603003;

}

function new_py_get_set_descr_default_603621(args_602846) {
	var result_603624 = null;

	var F={procname:"descrobject.newPyGetSetDescrDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_603624 = new_py_get_set_descr_simple_603001();
	framePtr = F.prev;

	return result_603624;

}

function get_py_get_set_descr_object_magic_603844(self_no_cast_603846, other_603847) {
	var result_603848 = null;

	var F={procname:"descrobject.getPyGetSetDescrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_603846.m_type, NTI602891))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyGetSetDescrObject` "));
		}
		
		F.line = 438;
		var self_604001 = self_no_cast_603846;
		result_603848 = self_604001.getter(other_603847);
	framePtr = F.prev;

	return result_603848;

}

function set_py_get_set_descr_object_magic_604016(self_no_cast_604018, arg1_604019, arg2_604020) {
	var result_604021 = null;

	var F={procname:"descrobject.setPyGetSetDescrObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_604018.m_type, NTI602891))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyGetSetDescrObject` "));
		}
		
		F.line = 438;
		var self_604201 = self_no_cast_604018;
		result_604021 = self_604201.setter(arg1_604019, arg2_604020);
	framePtr = F.prev;

	return result_604021;

}
py_method_descr_object_type_600095.magicMethods.Field34 = get_py_method_descr_object_magic_602014;
var py_get_set_descr_object_type_602899 = new_py_type_159261(makeNimstrLit("GetSetDescr"));
py_get_set_descr_object_type_602899.magicMethods.Field26 = new_py_get_set_descr_default_603621;
py_get_set_descr_object_type_602899.magicMethods.Field34 = get_py_get_set_descr_object_magic_603844;
py_get_set_descr_object_type_602899.magicMethods.Field35 = set_py_get_set_descr_object_magic_604016;

function new_604406() {
	var result_604411 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_604601 = null;
		F.line = 211;
		r_604601 = {m_type: NTI604304, getter: null, id: 0, pyType: null};
		F.line = 212;
		result_604411 = r_604601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_604411;

}

function new_py_property_simple_604401() {
	var result_604403 = null;

	var F={procname:"descrobject.newPyPropertySimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_604624 = new_604406();
		F.line = 561;
		obj_604624.pyType = py_property_object_type_604310;
		F.line = 563;
		give_id_157814(obj_604624);
		result_604403 = obj_604624;
	framePtr = F.prev;

	return result_604403;

}

function new_py_property_default_605021(args_604259) {
	var result_605024 = null;

	var F={procname:"descrobject.newPyPropertyDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_605024 = new_py_property_simple_604401();
	framePtr = F.prev;

	return result_605024;

}

function init_py_property_object_magic_605244(self_no_cast_605246, args_605260) {
	var result_605261 = null;

	var F={procname:"descrobject.initPyPropertyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_605246.m_type, NTI604304))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyPropertyObject` "));
		}
		
		F.line = 438;
		var self_605401 = self_no_cast_605246;
		if (!(((args_605260 != null ? args_605260.length : 0) == 1))) {
		F.line = 183;
		var msg_605413 = null;
		if (false) {
		F.line = 185;
		F.line = 185;
		var fmt_res_605418 = mnewString(0);
		F.line = 185;
		if (fmt_res_605418 != null) { fmt_res_605418 = (fmt_res_605418).concat(makeNimstrLit(" argument (")); } else { fmt_res_605418 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_605418 != null) { fmt_res_605418 = (fmt_res_605418).concat(cstrToNimstr(((args_605260 != null ? args_605260.length : 0))+"")); } else { fmt_res_605418 = cstrToNimstr(((args_605260 != null ? args_605260.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_605418 != null) { fmt_res_605418 = (fmt_res_605418).concat(makeNimstrLit(" given)")); } else { fmt_res_605418 = makeNimstrLit(" given)"); };
		msg_605413 = nimCopy(null, (makeNimstrLit(" takes exactly 1")).concat(fmt_res_605418), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_605610 = mnewString(0);
			F.line = 187;
			if (fmt_res_605610 != null) { fmt_res_605610 = (fmt_res_605610).concat(makeNimstrLit(" argument (")); } else { fmt_res_605610 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_605610 != null) { fmt_res_605610 = (fmt_res_605610).concat(cstrToNimstr(((args_605260 != null ? args_605260.length : 0))+"")); } else { fmt_res_605610 = cstrToNimstr(((args_605260 != null ? args_605260.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_605610 != null) { fmt_res_605610 = (fmt_res_605610).concat(makeNimstrLit(" given)")); } else { fmt_res_605610 = makeNimstrLit(" given)"); };
			msg_605413 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_605610), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_605809 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_605809.tk = 3;
		F.line = 106;
		excp_605809.thrown = true;
		F.line = 107;
		excp_605809.msg = new_py_string_176075(msg_605413);
		result_605261 = excp_605809;
		break BeforeRet;
		}
		
		F.line = 93;
		self_605401.getter = args_605260[chckIndx(0, 0, args_605260.length+0-1)-0];
		result_605261 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_605261;

}

function of_py_nim_func_object_547157(obj_547088) {
	var result_547159 = false;

	var F={procname:"methodobject.ofPyNimFuncObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_547159 = (obj_547088.pyType.kind == 12);
	framePtr = F.prev;

	return result_547159;

}

function fast_call_599133(callable_599135, args_599137) {
	var result_599138 = null;

	var F={procname:"call.fastCall",prev:framePtr,filename:"call.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (of_py_nim_func_object_547157(callable_599135)) {
		F.line = 7;
		result_599138 = call_py_nim_func_object_magic_548044(callable_599135, args_599137);
		break BeforeRet;
		}
		else {
		if (of_py_function_object_540137(callable_599135)) {
		F.line = 9;
		result_599138 = call_py_function_object_magic_597735(callable_599135, args_599137);
		break BeforeRet;
		}
		else {
			F.line = 11;
			if ((callable_599135.pyType === null)) {
			F.line = 2895;
			var e_599161 = null;
			F.line = 2896;
			e_599161 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 26;
			e_599161.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
			F.line = 2891;
			e_599161.parent = null;
			F.line = 26;
			raiseException(e_599161, "InternalError");
			}
			
			F.line = 27;
			var fun_599202 = callable_599135.pyType.magicMethods.Field31;
			if ((fun_599202 === null)) {
			F.line = 29;
			var obj_type_str_599211 = callable_599135.pyType.name;
			F.line = 30;
			var method_str_599213 = makeNimstrLit("call");
			F.line = 31;
			var msg_599215 = (makeNimstrLit("No ")).concat(method_str_599213,makeNimstrLit(" method for "),obj_type_str_599211,makeNimstrLit(" defined"));
			F.line = 32;
			F.line = 104;
			var excp_599217 = new_py_type_error_simple_360601();
			F.line = 105;
			excp_599217.tk = 3;
			F.line = 106;
			excp_599217.thrown = true;
			F.line = 107;
			excp_599217.msg = new_py_string_176075(msg_599215);
			var excp_599220 = excp_599217;
			F.line = 36;
			result_599138 = excp_599220;
			break BeforeRet;
			}
			
			var fun_599401 = fun_599202;
			F.line = 12;
			result_599138 = fun_599401(callable_599135, args_599137);
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_599138;

}

function get_py_property_object_magic_605825(self_no_cast_605827, other_605828) {
	var result_605829 = null;

	var F={procname:"descrobject.getPyPropertyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_605827.m_type, NTI604304))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyPropertyObject` "));
		}
		
		F.line = 438;
		var self_606001 = self_no_cast_605827;
		result_605829 = fast_call_599133(self_606001.getter, [other_605828]);
	framePtr = F.prev;

	return result_605829;

}
var py_property_object_type_604310 = new_py_type_159261(makeNimstrLit("Property"));
py_property_object_type_604310.magicMethods.Field26 = new_py_property_default_605021;
py_property_object_type_604310.magicMethods.Field27 = init_py_property_object_magic_605244;
py_property_object_type_604310.magicMethods.Field34 = get_py_property_object_magic_605825;

function new_607206() {
	var result_607211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_607401 = null;
		F.line = 211;
		r_607401 = {m_type: NTI607110, dict: null, id: 0, pyType: null};
		F.line = 212;
		result_607211 = r_607401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_607211;

}

function new_py_dict_proxy_simple_607201() {
	var result_607203 = null;

	var F={procname:"dictproxyobject.newPyDictProxySimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_607424 = new_607206();
		F.line = 561;
		obj_607424.pyType = py_dict_proxy_object_type_607116;
		F.line = 563;
		give_id_157814(obj_607424);
		result_607203 = obj_607424;
	framePtr = F.prev;

	return result_607203;

}

function new_py_dict_proxy_default_607821(args_607065) {
	var result_607824 = null;

	var F={procname:"dictproxyobject.newPyDictProxyDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_607824 = new_py_dict_proxy_simple_607201();
	framePtr = F.prev;

	return result_607824;

}

function repr_py_dict_proxy_object_magic_608044(self_no_cast_608046) {
	var result_608047 = null;

	var F={procname:"dictproxyobject.reprPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_608046.m_type, NTI607110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_608201 = self_no_cast_608046;
		F.line = 45;
		if ((self_608201.dict.pyType === null)) {
		F.line = 2895;
		var e_608228 = null;
		F.line = 2896;
		e_608228 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_608228.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_608228.parent = null;
		F.line = 26;
		raiseException(e_608228, "InternalError");
		}
		
		F.line = 27;
		var fun_608402 = self_608201.dict.pyType.magicMethods.Field25;
		if ((fun_608402 === null)) {
		F.line = 29;
		var obj_type_str_608411 = self_608201.dict.pyType.name;
		F.line = 30;
		var method_str_608413 = makeNimstrLit("repr");
		F.line = 31;
		var msg_608415 = (makeNimstrLit("No ")).concat(method_str_608413,makeNimstrLit(" method for "),obj_type_str_608411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_608417 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_608417.tk = 3;
		F.line = 106;
		excp_608417.thrown = true;
		F.line = 107;
		excp_608417.msg = new_py_string_176075(msg_608415);
		var excp_608420 = excp_608417;
		F.line = 36;
		result_608047 = excp_608420;
		break BeforeRet;
		}
		
		var fun_608602 = fun_608402;
		F.line = 46;
		var res_608604 = fun_608602(self_608201.dict);
		result_608047 = res_608604;
	} while (false);
	framePtr = F.prev;

	return result_608047;

}

function str_py_dict_proxy_object_magic_608815(self_no_cast_608817) {
	var result_608818 = null;

	var F={procname:"dictproxyobject.strPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_608817.m_type, NTI607110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_609001 = self_no_cast_608817;
		F.line = 45;
		if ((self_609001.dict.pyType === null)) {
		F.line = 2895;
		var e_609028 = null;
		F.line = 2896;
		e_609028 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_609028.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_609028.parent = null;
		F.line = 26;
		raiseException(e_609028, "InternalError");
		}
		
		F.line = 27;
		var fun_609202 = self_609001.dict.pyType.magicMethods.Field24;
		if ((fun_609202 === null)) {
		F.line = 29;
		var obj_type_str_609211 = self_609001.dict.pyType.name;
		F.line = 30;
		var method_str_609213 = makeNimstrLit("str");
		F.line = 31;
		var msg_609215 = (makeNimstrLit("No ")).concat(method_str_609213,makeNimstrLit(" method for "),obj_type_str_609211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_609217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_609217.tk = 3;
		F.line = 106;
		excp_609217.thrown = true;
		F.line = 107;
		excp_609217.msg = new_py_string_176075(msg_609215);
		var excp_609220 = excp_609217;
		F.line = 36;
		result_608818 = excp_609220;
		break BeforeRet;
		}
		
		var fun_609402 = fun_609202;
		F.line = 46;
		var res_609404 = fun_609402(self_609001.dict);
		result_608818 = res_609404;
	} while (false);
	framePtr = F.prev;

	return result_608818;

}

function getitem_py_dict_proxy_object_magic_609615(self_no_cast_609617, other_609618) {
	var result_609619 = null;

	var F={procname:"dictproxyobject.getitemPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_609617.m_type, NTI607110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_609801 = self_no_cast_609617;
		F.line = 56;
		if ((self_609801.dict.pyType === null)) {
		F.line = 2895;
		var e_609828 = null;
		F.line = 2896;
		e_609828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_609828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_609828.parent = null;
		F.line = 26;
		raiseException(e_609828, "InternalError");
		}
		
		F.line = 27;
		var fun_610002 = self_609801.dict.pyType.magicMethods.Field32;
		if ((fun_610002 === null)) {
		F.line = 29;
		var obj_type_str_610011 = self_609801.dict.pyType.name;
		F.line = 30;
		var method_str_610013 = makeNimstrLit("getitem");
		F.line = 31;
		var msg_610015 = (makeNimstrLit("No ")).concat(method_str_610013,makeNimstrLit(" method for "),obj_type_str_610011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_610017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_610017.tk = 3;
		F.line = 106;
		excp_610017.thrown = true;
		F.line = 107;
		excp_610017.msg = new_py_string_176075(msg_610015);
		var excp_610020 = excp_610017;
		F.line = 36;
		result_609619 = excp_610020;
		break BeforeRet;
		}
		
		var fun_610202 = fun_610002;
		F.line = 57;
		var res_610204 = fun_610202(self_609801.dict, other_609618);
		result_609619 = res_610204;
	} while (false);
	framePtr = F.prev;

	return result_609619;

}

function len_py_dict_proxy_object_magic_610415(self_no_cast_610417) {
	var result_610418 = null;

	var F={procname:"dictproxyobject.lenPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(isObj(self_no_cast_610417.m_type, NTI607110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_610601 = self_no_cast_610417;
		F.line = 45;
		if ((self_610601.dict.pyType === null)) {
		F.line = 2895;
		var e_610628 = null;
		F.line = 2896;
		e_610628 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_610628.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_610628.parent = null;
		F.line = 26;
		raiseException(e_610628, "InternalError");
		}
		
		F.line = 27;
		var fun_610802 = self_610601.dict.pyType.magicMethods.Field23;
		if ((fun_610802 === null)) {
		F.line = 29;
		var obj_type_str_610811 = self_610601.dict.pyType.name;
		F.line = 30;
		var method_str_610813 = makeNimstrLit("len");
		F.line = 31;
		var msg_610815 = (makeNimstrLit("No ")).concat(method_str_610813,makeNimstrLit(" method for "),obj_type_str_610811,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_610817 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_610817.tk = 3;
		F.line = 106;
		excp_610817.thrown = true;
		F.line = 107;
		excp_610817.msg = new_py_string_176075(msg_610815);
		var excp_610820 = excp_610817;
		F.line = 36;
		result_610418 = excp_610820;
		break BeforeRet;
		}
		
		var fun_611002 = fun_610802;
		F.line = 46;
		var res_611004 = fun_611002(self_610601.dict);
		result_610418 = res_611004;
	} while (false);
	framePtr = F.prev;

	return result_610418;

}

function init_py_dict_proxy_object_magic_611215(self_no_cast_611217, args_611231) {
	var result_611232 = null;

	var F={procname:"dictproxyobject.initPyDictProxyObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_611231 != null ? args_611231.length : 0) == 1))) {
		F.line = 183;
		var msg_611244 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_611249 = mnewString(0);
		F.line = 185;
		if (fmt_res_611249 != null) { fmt_res_611249 = (fmt_res_611249).concat(makeNimstrLit(" argument (")); } else { fmt_res_611249 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_611249 != null) { fmt_res_611249 = (fmt_res_611249).concat(cstrToNimstr(((args_611231 != null ? args_611231.length : 0))+"")); } else { fmt_res_611249 = cstrToNimstr(((args_611231 != null ? args_611231.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_611249 != null) { fmt_res_611249 = (fmt_res_611249).concat(makeNimstrLit(" given)")); } else { fmt_res_611249 = makeNimstrLit(" given)"); };
		msg_611244 = nimCopy(null, (makeNimstrLit("init takes exactly 1")).concat(fmt_res_611249), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_611410 = mnewString(0);
			F.line = 187;
			if (fmt_res_611410 != null) { fmt_res_611410 = (fmt_res_611410).concat(makeNimstrLit(" argument (")); } else { fmt_res_611410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_611410 != null) { fmt_res_611410 = (fmt_res_611410).concat(cstrToNimstr(((args_611231 != null ? args_611231.length : 0))+"")); } else { fmt_res_611410 = cstrToNimstr(((args_611231 != null ? args_611231.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_611410 != null) { fmt_res_611410 = (fmt_res_611410).concat(makeNimstrLit(" given)")); } else { fmt_res_611410 = makeNimstrLit(" given)"); };
			msg_611244 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_611410), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_611609 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_611609.tk = 3;
		F.line = 106;
		excp_611609.thrown = true;
		F.line = 107;
		excp_611609.msg = new_py_string_176075(msg_611244);
		result_611232 = excp_611609;
		break BeforeRet;
		}
		
		F.line = 230;
		var mapping_611611 = args_611231[chckIndx(0, 0, args_611231.length+0-1)-0];
		if (!(isObj(self_no_cast_611217.m_type, NTI607110))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyDictProxyObject` "));
		}
		
		F.line = 438;
		var self_611801 = self_no_cast_611217;
		F.line = 23;
		self_611801.dict = mapping_611611;
		result_611232 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_611232;

}
var py_dict_proxy_object_type_607116 = new_py_type_159261(makeNimstrLit("DictProxy"));
py_dict_proxy_object_type_607116.magicMethods.Field26 = new_py_dict_proxy_default_607821;
py_dict_proxy_object_type_607116.magicMethods.Field25 = repr_py_dict_proxy_object_magic_608044;
py_dict_proxy_object_type_607116.magicMethods.Field24 = str_py_dict_proxy_object_magic_608815;
py_dict_proxy_object_type_607116.magicMethods.Field32 = getitem_py_dict_proxy_object_magic_609615;
py_dict_proxy_object_type_607116.magicMethods.Field23 = len_py_dict_proxy_object_magic_610415;
py_dict_proxy_object_type_607116.magicMethods.Field27 = init_py_dict_proxy_object_magic_611215;

function repr_py_type_object_magic_612363(self_no_cast_612365) {
	var result_612366 = null;

	var F={procname:"typeobject.reprPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_612365.m_type, NTI157280))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 438;
		var self_612401 = self_no_cast_612365;
		result_612366 = new_py_string_176075(self_612401.name);
	framePtr = F.prev;

	return result_612366;

}

function str_py_type_object_magic_612416(self_no_cast_612418) {
	var result_612419 = null;

	var F={procname:"typeobject.strPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 438;
		if (!(isObj(self_no_cast_612418.m_type, NTI157280))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 438;
		var self_612601 = self_no_cast_612418;
		F.line = 34;
		var fmt_res_612604 = mnewString(0);
		F.line = 34;
		if (fmt_res_612604 != null) { fmt_res_612604 = (fmt_res_612604).concat(makeNimstrLit("<class \'")); } else { fmt_res_612604 = makeNimstrLit("<class \'"); };
		F.line = 260;
		if (fmt_res_612604 != null) { fmt_res_612604 = (fmt_res_612604).concat(self_612601.name); } else { fmt_res_612604 = self_612601.name.slice(); };
		F.line = 34;
		if (fmt_res_612604 != null) { fmt_res_612604 = (fmt_res_612604).concat(makeNimstrLit("\'>")); } else { fmt_res_612604 = makeNimstrLit("\'>"); };
		result_612419 = new_py_string_176075(fmt_res_612604);
	framePtr = F.prev;

	return result_612419;

}

function raw_get_613579(t_613584, key_613586, hc_613588, hc_613588_Idx) {
						var Tmp3;

	var result_613589 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_613588[hc_613588_Idx] = hash_143900(key_613586);
		if ((hc_613588[hc_613588_Idx] == 0)) {
		F.line = 45;
		hc_613588[hc_613588_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_613601 = (hc_613588[hc_613588_Idx] & (t_613584.data != null ? (t_613584.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_613584.data[chckIndx(h_613601, 0, t_613584.data.length+0-1)-0].Field0)) break L2;
						if (!(t_613584.data[chckIndx(h_613601, 0, t_613584.data.length+0-1)-0].Field0 == hc_613588[hc_613588_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_613584.data[chckIndx(h_613601, 0, t_613584.data.length+0-1)-0].Field1, key_613586);						}					if (Tmp3) {
					F.line = 38;
					result_613589 = h_613601;
					break BeforeRet;
					}
					
					F.line = 39;
					h_613601 = next_try_146614(h_613601, (t_613584.data != null ? (t_613584.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_613589 = subInt(-1, h_613601);
	} while (false);
	framePtr = F.prev;

	return result_613589;

}

function raw_insert_615823(t_615830, data_615834, data_615834_Idx, key_615836, val_615838, hc_615840, h_615842) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_615834[data_615834_Idx][chckIndx(h_615842, 0, data_615834[data_615834_Idx].length+0-1)-0].Field1 = nimCopy(null, key_615836, NTI138);
		F.line = 65;
		nimCopy(data_615834[data_615834_Idx][chckIndx(h_615842, 0, data_615834[data_615834_Idx].length+0-1)-0].Field2, val_615838, NTI157318);
		F.line = 66;
		data_615834[data_615834_Idx][chckIndx(h_615842, 0, data_615834[data_615834_Idx].length+0-1)-0].Field0 = hc_615840;
	framePtr = F.prev;

	
}

function enlarge_614693(t_614700) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_614708 = null;
		F.line = 314;
		n_614708 = new Array(chckRange(mulInt((t_614700.data != null ? t_614700.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_614700.data != null ? t_614700.data.length : 0), 2), 0, 2147483647);++i) {n_614708[i]={Field0: 0, Field1: null, Field2: {Field0: null, Field1: null}};}		F.line = 315;
		var Tmp1 = t_614700.data; t_614700.data = n_614708; n_614708 = Tmp1;		L2: do {
			F.line = 316;
			var i_614921 = 0;
			F.line = 2088;
			var colontmp__616510 = 0;
			F.line = 316;
			colontmp__616510 = (n_614708 != null ? (n_614708.length-1) : -1);
			F.line = 2094;
			var res_616513 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_616513 <= colontmp__616510)) break L4;
						F.line = 2096;
						i_614921 = res_616513;
						F.line = 317;
						var eh_615139 = n_614708[chckIndx(i_614921, 0, n_614708.length+0-1)-0].Field0;
						if (is_filled_146491(eh_615139)) {
						F.line = 319;
						var j_615148 = (eh_615139 & (t_614700.data != null ? (t_614700.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_614700.data[chckIndx(j_615148, 0, t_614700.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_615148 = next_try_146614(j_615148, (t_614700.data != null ? (t_614700.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_615823(t_614700, t_614700, "data", n_614708[chckIndx(i_614921, 0, n_614708.length+0-1)-0].Field1, n_614708[chckIndx(i_614921, 0, n_614708.length+0-1)-0].Field2, eh_615139, j_615148);
						}
						
						F.line = 2097;
						res_616513 = addInt(res_616513, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_616531(t_616536, key_616538, hc_616540) {
	var result_616541 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_616550 = (hc_616540 & (t_616536.data != null ? (t_616536.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_616536.data[chckIndx(h_616550, 0, t_616536.data.length+0-1)-0].Field0)) break L2;
					if (((t_616536.data[chckIndx(h_616550, 0, t_616536.data.length+0-1)-0].Field0 == hc_616540) && eqStrings(t_616536.data[chckIndx(h_616550, 0, t_616536.data.length+0-1)-0].Field1, key_616538))) {
					F.line = 38;
					result_616541 = h_616550;
					break BeforeRet;
					}
					
					F.line = 39;
					h_616550 = next_try_146614(h_616550, (t_616536.data != null ? (t_616536.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_616541 = subInt(-1, h_616550);
	} while (false);
	framePtr = F.prev;

	return result_616541;

}

function HEX5BHEX5DHEX3D_613565(t_613572, key_613574, val_613576) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_613577 = [0];
		F.line = 98;
		var index_614279 = raw_get_613579(t_613572, key_613574, hc_613577, 0);
		if ((0 <= index_614279)) {
		F.line = 99;
		nimCopy(t_613572.data[chckIndx(index_614279, 0, t_613572.data.length+0-1)-0].Field2, val_613576, NTI157318);
		}
		else {
			if (must_rehash_146509((t_613572.data != null ? t_613572.data.length : 0), t_613572.counter)) {
			F.line = 90;
			enlarge_614693(t_613572);
			F.line = 91;
			index_614279 = raw_get_known_hc_616531(t_613572, key_613574, hc_613577[0]);
			}
			
			F.line = 92;
			index_614279 = subInt(-1, index_614279);
			F.line = 93;
			raw_insert_615823(t_613572, t_613572, "data", key_613574, val_613576, hc_613577[0], index_614279);
			F.line = 100;
			t_613572.counter = addInt(t_613572.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function new_py_dict_proxy_611829(mapping_611831) {
	var result_611832 = null;

	var F={procname:"dictproxyobject.newPyDictProxy",prev:framePtr,filename:"../Objects/dictproxyobject.nim",line:0};
	framePtr = F;
		F.line = 27;
		F.line = 27;
		var d_611833 = new_py_dict_proxy_simple_607201();
		F.line = 28;
		d_611833.dict = mapping_611831;
		result_611832 = d_611833;
	framePtr = F.prev;

	return result_611832;

}

function dict_py_type_object_getter_612815(self_no_cast_612817) {
	var result_612818 = null;

	var F={procname:"typeobject.dictPyTypeObjectGetter",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 450;
		if (!(isObj(self_no_cast_612817.m_type, NTI157280))) {
		F.line = 450;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(450, 32) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 450;
		var self_613001 = self_no_cast_612817;
		result_612818 = new_py_dict_proxy_611829(self_613001.dict);
	framePtr = F.prev;

	return result_612818;

}

function dict_py_type_object_setter_613016(self_no_cast_613018, other_613019) {
	var result_613020 = null;

	var F={procname:"typeobject.dictPyTypeObjectSetter",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 456;
		if (!(isObj(self_no_cast_613018.m_type, NTI157280))) {
		F.line = 456;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(456, 32) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 456;
		var self_613201 = self_no_cast_613018;
		F.line = 104;
		var excp_613402 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_613402.tk = 3;
		F.line = 106;
		excp_613402.thrown = true;
		F.line = 107;
		F.line = 40;
		var fmt_res_613205 = mnewString(0);
		F.line = 40;
		if (fmt_res_613205 != null) { fmt_res_613205 = (fmt_res_613205).concat(makeNimstrLit("can\'t set attributes of built-in/extension type ")); } else { fmt_res_613205 = makeNimstrLit("can\'t set attributes of built-in/extension type "); };
		F.line = 260;
		if (fmt_res_613205 != null) { fmt_res_613205 = (fmt_res_613205).concat(self_613201.name); } else { fmt_res_613205 = self_613201.name.slice(); };
		excp_613402.msg = new_py_string_176075(fmt_res_613205);
		result_613020 = excp_613402;
	framePtr = F.prev;

	return result_613020;

}
var magic_name_strs_612041 = [null];
L20: do {
	var name_612102 = [null];
	var i_617290 = 0;
	if ((i_617290 <= 37)) {
	L21: do {
			L22: while (true) {
			if (!true) break L22;
				name_612102[0] = magic_names_157558[i_617290];
				if (magic_name_strs_612041[0] != null) { magic_name_strs_612041[0].push(new_py_str_176092(name_612102[0])); } else { magic_name_strs_612041[0] = [new_py_str_176092(name_612102[0])]; };
				if ((37 <= i_617290)) {
				break L21;
				}
				
				i_617290 += 1;
			}
	} while(false);
	}
	
} while(false);
var py_type_object_type_612361 = new_py_type_159261(makeNimstrLit("type"));
py_type_object_type_612361.kind = 7;
py_type_object_type_612361.magicMethods.Field25 = repr_py_type_object_magic_612363;
py_type_object_type_612361.magicMethods.Field24 = str_py_type_object_magic_612416;
HEX5BHEX5DHEX3D_613565(py_type_object_type_612361.getsetDescr, makeNimstrLit("__dict__"), {Field0: dict_py_type_object_getter_612815, Field1: dict_py_type_object_setter_613016});

function default_le_617321(o1_617323, o2_617324) {
	var result_617325 = null;

	var F={procname:"typeobject.defaultLe",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 49;
		F.line = 49;
		F.line = 56;
		if ((o1_617323.pyType === null)) {
		F.line = 2895;
		var e_617352 = null;
		F.line = 2896;
		e_617352 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_617352.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_617352.parent = null;
		F.line = 26;
		raiseException(e_617352, "InternalError");
		}
		
		F.line = 27;
		var fun_617402 = o1_617323.pyType.magicMethods.Field16;
		if ((fun_617402 === null)) {
		F.line = 29;
		var obj_type_str_617411 = o1_617323.pyType.name;
		F.line = 30;
		var method_str_617413 = makeNimstrLit("lt");
		F.line = 31;
		var msg_617415 = (makeNimstrLit("No ")).concat(method_str_617413,makeNimstrLit(" method for "),obj_type_str_617411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_617417 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_617417.tk = 3;
		F.line = 106;
		excp_617417.thrown = true;
		F.line = 107;
		excp_617417.msg = new_py_string_176075(msg_617415);
		var excp_617420 = excp_617417;
		F.line = 36;
		result_617325 = excp_617420;
		break BeforeRet;
		}
		
		var fun_617602 = fun_617402;
		F.line = 57;
		var res_617604 = fun_617602(o1_617323, o2_617324);
		var lt_617801 = res_617604;
		F.line = 50;
		F.line = 56;
		if ((o1_617323.pyType === null)) {
		F.line = 2895;
		var e_617828 = null;
		F.line = 2896;
		e_617828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_617828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_617828.parent = null;
		F.line = 26;
		raiseException(e_617828, "InternalError");
		}
		
		F.line = 27;
		var fun_618002 = o1_617323.pyType.magicMethods.Field18;
		if ((fun_618002 === null)) {
		F.line = 29;
		var obj_type_str_618011 = o1_617323.pyType.name;
		F.line = 30;
		var method_str_618013 = makeNimstrLit("eq");
		F.line = 31;
		var msg_618015 = (makeNimstrLit("No ")).concat(method_str_618013,makeNimstrLit(" method for "),obj_type_str_618011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_618017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_618017.tk = 3;
		F.line = 106;
		excp_618017.thrown = true;
		F.line = 107;
		excp_618017.msg = new_py_string_176075(msg_618015);
		var excp_618020 = excp_618017;
		F.line = 36;
		result_617325 = excp_618020;
		break BeforeRet;
		}
		
		var fun_618202 = fun_618002;
		F.line = 57;
		var res_618204 = fun_618202(o1_617323, o2_617324);
		var eq_618401 = res_618204;
		F.line = 56;
		if ((lt_617801.pyType === null)) {
		F.line = 2895;
		var e_618428 = null;
		F.line = 2896;
		e_618428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_618428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_618428.parent = null;
		F.line = 26;
		raiseException(e_618428, "InternalError");
		}
		
		F.line = 27;
		var fun_618602 = lt_617801.pyType.magicMethods.Field15;
		if ((fun_618602 === null)) {
		F.line = 29;
		var obj_type_str_618611 = lt_617801.pyType.name;
		F.line = 30;
		var method_str_618613 = makeNimstrLit("Or");
		F.line = 31;
		var msg_618615 = (makeNimstrLit("No ")).concat(method_str_618613,makeNimstrLit(" method for "),obj_type_str_618611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_618617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_618617.tk = 3;
		F.line = 106;
		excp_618617.thrown = true;
		F.line = 107;
		excp_618617.msg = new_py_string_176075(msg_618615);
		var excp_618620 = excp_618617;
		F.line = 36;
		result_617325 = excp_618620;
		break BeforeRet;
		}
		
		var fun_618802 = fun_618602;
		F.line = 57;
		var res_618804 = fun_618802(lt_617801, eq_618401);
		result_617325 = res_618804;
	} while (false);
	framePtr = F.prev;

	return result_617325;

}

function default_ne_619014(o1_619016, o2_619017) {
	var result_619018 = null;

	var F={procname:"typeobject.defaultNe",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 54;
		F.line = 54;
		F.line = 56;
		if ((o1_619016.pyType === null)) {
		F.line = 2895;
		var e_619045 = null;
		F.line = 2896;
		e_619045 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_619045.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_619045.parent = null;
		F.line = 26;
		raiseException(e_619045, "InternalError");
		}
		
		F.line = 27;
		var fun_619202 = o1_619016.pyType.magicMethods.Field18;
		if ((fun_619202 === null)) {
		F.line = 29;
		var obj_type_str_619211 = o1_619016.pyType.name;
		F.line = 30;
		var method_str_619213 = makeNimstrLit("eq");
		F.line = 31;
		var msg_619215 = (makeNimstrLit("No ")).concat(method_str_619213,makeNimstrLit(" method for "),obj_type_str_619211,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_619217 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_619217.tk = 3;
		F.line = 106;
		excp_619217.thrown = true;
		F.line = 107;
		excp_619217.msg = new_py_string_176075(msg_619215);
		var excp_619220 = excp_619217;
		F.line = 36;
		result_619018 = excp_619220;
		break BeforeRet;
		}
		
		var fun_619402 = fun_619202;
		F.line = 57;
		var res_619404 = fun_619402(o1_619016, o2_619017);
		var eq_619601 = res_619404;
		F.line = 45;
		if ((eq_619601.pyType === null)) {
		F.line = 2895;
		var e_619628 = null;
		F.line = 2896;
		e_619628 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_619628.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_619628.parent = null;
		F.line = 26;
		raiseException(e_619628, "InternalError");
		}
		
		F.line = 27;
		var fun_619802 = eq_619601.pyType.magicMethods.Field7;
		if ((fun_619802 === null)) {
		F.line = 29;
		var obj_type_str_619811 = eq_619601.pyType.name;
		F.line = 30;
		var method_str_619813 = makeNimstrLit("Not");
		F.line = 31;
		var msg_619815 = (makeNimstrLit("No ")).concat(method_str_619813,makeNimstrLit(" method for "),obj_type_str_619811,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_619817 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_619817.tk = 3;
		F.line = 106;
		excp_619817.thrown = true;
		F.line = 107;
		excp_619817.msg = new_py_string_176075(msg_619815);
		var excp_619820 = excp_619817;
		F.line = 36;
		result_619018 = excp_619820;
		break BeforeRet;
		}
		
		var fun_620002 = fun_619802;
		F.line = 46;
		var res_620004 = fun_620002(eq_619601);
		result_619018 = res_620004;
	} while (false);
	framePtr = F.prev;

	return result_619018;

}

function default_ge_620214(o1_620216, o2_620217) {
	var result_620218 = null;

	var F={procname:"typeobject.defaultGe",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 58;
		F.line = 58;
		F.line = 56;
		if ((o1_620216.pyType === null)) {
		F.line = 2895;
		var e_620245 = null;
		F.line = 2896;
		e_620245 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_620245.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_620245.parent = null;
		F.line = 26;
		raiseException(e_620245, "InternalError");
		}
		
		F.line = 27;
		var fun_620402 = o1_620216.pyType.magicMethods.Field20;
		if ((fun_620402 === null)) {
		F.line = 29;
		var obj_type_str_620411 = o1_620216.pyType.name;
		F.line = 30;
		var method_str_620413 = makeNimstrLit("gt");
		F.line = 31;
		var msg_620415 = (makeNimstrLit("No ")).concat(method_str_620413,makeNimstrLit(" method for "),obj_type_str_620411,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_620417 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_620417.tk = 3;
		F.line = 106;
		excp_620417.thrown = true;
		F.line = 107;
		excp_620417.msg = new_py_string_176075(msg_620415);
		var excp_620420 = excp_620417;
		F.line = 36;
		result_620218 = excp_620420;
		break BeforeRet;
		}
		
		var fun_620602 = fun_620402;
		F.line = 57;
		var res_620604 = fun_620602(o1_620216, o2_620217);
		var gt_620801 = res_620604;
		F.line = 59;
		F.line = 56;
		if ((o1_620216.pyType === null)) {
		F.line = 2895;
		var e_620828 = null;
		F.line = 2896;
		e_620828 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_620828.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_620828.parent = null;
		F.line = 26;
		raiseException(e_620828, "InternalError");
		}
		
		F.line = 27;
		var fun_621002 = o1_620216.pyType.magicMethods.Field18;
		if ((fun_621002 === null)) {
		F.line = 29;
		var obj_type_str_621011 = o1_620216.pyType.name;
		F.line = 30;
		var method_str_621013 = makeNimstrLit("eq");
		F.line = 31;
		var msg_621015 = (makeNimstrLit("No ")).concat(method_str_621013,makeNimstrLit(" method for "),obj_type_str_621011,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_621017 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_621017.tk = 3;
		F.line = 106;
		excp_621017.thrown = true;
		F.line = 107;
		excp_621017.msg = new_py_string_176075(msg_621015);
		var excp_621020 = excp_621017;
		F.line = 36;
		result_620218 = excp_621020;
		break BeforeRet;
		}
		
		var fun_621202 = fun_621002;
		F.line = 57;
		var res_621204 = fun_621202(o1_620216, o2_620217);
		var eq_621401 = res_621204;
		F.line = 56;
		if ((gt_620801.pyType === null)) {
		F.line = 2895;
		var e_621428 = null;
		F.line = 2896;
		e_621428 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_621428.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_621428.parent = null;
		F.line = 26;
		raiseException(e_621428, "InternalError");
		}
		
		F.line = 27;
		var fun_621602 = gt_620801.pyType.magicMethods.Field15;
		if ((fun_621602 === null)) {
		F.line = 29;
		var obj_type_str_621611 = gt_620801.pyType.name;
		F.line = 30;
		var method_str_621613 = makeNimstrLit("Or");
		F.line = 31;
		var msg_621615 = (makeNimstrLit("No ")).concat(method_str_621613,makeNimstrLit(" method for "),obj_type_str_621611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_621617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_621617.tk = 3;
		F.line = 106;
		excp_621617.thrown = true;
		F.line = 107;
		excp_621617.msg = new_py_string_176075(msg_621615);
		var excp_621620 = excp_621617;
		F.line = 36;
		result_620218 = excp_621620;
		break BeforeRet;
		}
		
		var fun_621802 = fun_621602;
		F.line = 57;
		var res_621804 = fun_621802(gt_620801, eq_621401);
		result_620218 = res_621804;
	} while (false);
	framePtr = F.prev;

	return result_620218;

}

function get_type_dict_617304(obj_617306) {
	var result_617307 = null;

	var F={procname:"typeobject.getTypeDict",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		F.line = 45;
		result_617307 = obj_617306.pyType.dict;
	framePtr = F.prev;

	return result_617307;

}

function has_dict_159278(obj_159280) {
	var result_159281 = false;

	var F={procname:"pyobjectBase.hasDict",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 204;
		result_159281 = isObj(obj_159280.m_type, NTI157277);
	framePtr = F.prev;

	return result_159281;

}

function get_dict_159307(obj_159309) {
	var result_159310 = null;

	var F={procname:"pyobjectBase.getDict",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 207;
		if (!(has_dict_159278(obj_159309))) {
		F.line = 2895;
		var e_159316 = null;
		F.line = 2896;
		e_159316 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 208;
		e_159316.message = nimCopy(null, makeNimstrLit("obj has no dict. Use hasDict before getDict"), NTI138);
		F.line = 2891;
		e_159316.parent = null;
		F.line = 208;
		raiseException(e_159316, "InternalError");
		}
		
		result_159310 = obj_159309.dict;
	framePtr = F.prev;

	return result_159310;

}

function get_attr_622414(self_622416, name_obj_622417) {
	var result_622418 = null;

	var F={procname:"typeobject.getAttr",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(of_py_str_object_175092(name_obj_622417))) {
		F.line = 68;
		var type_str_622419 = nimCopy(null, name_obj_622417.pyType.name, NTI138);
		F.line = 69;
		F.line = 69;
		var fmt_res_622422 = mnewString(0);
		F.line = 69;
		if (fmt_res_622422 != null) { fmt_res_622422 = (fmt_res_622422).concat(makeNimstrLit("attribute name must be string, not ")); } else { fmt_res_622422 = makeNimstrLit("attribute name must be string, not "); };
		F.line = 260;
		if (fmt_res_622422 != null) { fmt_res_622422 = (fmt_res_622422).concat(type_str_622419); } else { fmt_res_622422 = type_str_622419.slice(); };
		var msg_622601 = nimCopy(null, fmt_res_622422, NTI138);
		F.line = 70;
		F.line = 104;
		var excp_622603 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_622603.tk = 3;
		F.line = 106;
		excp_622603.thrown = true;
		F.line = 107;
		excp_622603.msg = new_py_string_176075(msg_622601);
		result_622418 = excp_622603;
		break BeforeRet;
		}
		
		F.line = 71;
		var name_622605 = name_obj_622417;
		F.line = 72;
		var type_dict_622606 = get_type_dict_617304(self_622416);
		if ((type_dict_622606 === null)) {
		F.line = 2895;
		var e_622619 = null;
		F.line = 2896;
		e_622619 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 74;
		e_622619.message = nimCopy(null, makeNimstrLit("for type object dict must not be nil"), NTI138);
		F.line = 2891;
		e_622619.parent = null;
		F.line = 74;
		raiseException(e_622619, "InternalError");
		}
		
		F.line = 75;
		var descr_622801 = null;
		if (has_key_522437(type_dict_622606, name_622605)) {
		F.line = 77;
		descr_622801 = HEX5BHEX5D_523323(type_dict_622606, name_622605);
		F.line = 78;
		var descr_get_622802 = descr_622801.pyType.magicMethods.Field34;
		if (!((descr_get_622802 === null))) {
		F.line = 80;
		result_622418 = descr_get_622802(descr_622801, self_622416);
		break BeforeRet;
		}
		
		}
		
		if (has_dict_159278(self_622416)) {
		F.line = 83;
		var inst_dict_622809 = get_dict_159307(self_622416);
		if (has_key_522437(inst_dict_622809, name_622605)) {
		F.line = 85;
		result_622418 = HEX5BHEX5D_523323(inst_dict_622809, name_622605);
		break BeforeRet;
		}
		
		}
		
		if (!((descr_622801 === null))) {
		F.line = 88;
		result_622418 = descr_622801;
		break BeforeRet;
		}
		
		F.line = 90;
		F.line = 123;
		var msg_622821 = (self_622416.pyType.name).concat(makeNimstrLit(" has no attribute "),HEX24_157579(name_622605));
		F.line = 104;
		var excp_622823 = new_py_attribute_error_simple_361601();
		F.line = 105;
		excp_622823.tk = 4;
		F.line = 106;
		excp_622823.thrown = true;
		F.line = 107;
		excp_622823.msg = new_py_string_176075(msg_622821);
		result_622418 = excp_622823;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_622418;

}

function set_attr_622838(self_622840, name_obj_622841, value_622842) {
	var result_622843 = null;

	var F={procname:"typeobject.setAttr",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(of_py_str_object_175092(name_obj_622841))) {
		F.line = 95;
		var type_str_622844 = nimCopy(null, name_obj_622841.pyType.name, NTI138);
		F.line = 96;
		F.line = 96;
		var fmt_res_622847 = mnewString(0);
		F.line = 96;
		if (fmt_res_622847 != null) { fmt_res_622847 = (fmt_res_622847).concat(makeNimstrLit("attribute name must be string, not ")); } else { fmt_res_622847 = makeNimstrLit("attribute name must be string, not "); };
		F.line = 260;
		if (fmt_res_622847 != null) { fmt_res_622847 = (fmt_res_622847).concat(type_str_622844); } else { fmt_res_622847 = type_str_622844.slice(); };
		var msg_623001 = nimCopy(null, fmt_res_622847, NTI138);
		F.line = 97;
		F.line = 104;
		var excp_623003 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_623003.tk = 3;
		F.line = 106;
		excp_623003.thrown = true;
		F.line = 107;
		excp_623003.msg = new_py_string_176075(msg_623001);
		result_622843 = excp_623003;
		break BeforeRet;
		}
		
		F.line = 98;
		var name_623005 = name_obj_622841;
		F.line = 99;
		var type_dict_623006 = get_type_dict_617304(self_622840);
		if ((type_dict_623006 === null)) {
		F.line = 2895;
		var e_623019 = null;
		F.line = 2896;
		e_623019 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 101;
		e_623019.message = nimCopy(null, makeNimstrLit("for type object dict must not be nil"), NTI138);
		F.line = 2891;
		e_623019.parent = null;
		F.line = 101;
		raiseException(e_623019, "InternalError");
		}
		
		F.line = 102;
		var descr_623201 = null;
		if (has_key_522437(type_dict_623006, name_623005)) {
		F.line = 104;
		descr_623201 = HEX5BHEX5D_523323(type_dict_623006, name_623005);
		F.line = 105;
		var descr_set_623202 = descr_623201.pyType.magicMethods.Field35;
		if (!((descr_set_623202 === null))) {
		F.line = 107;
		result_622843 = descr_set_623202(descr_623201, self_622840, value_622842);
		break BeforeRet;
		}
		
		}
		
		if (has_dict_159278(self_622840)) {
		F.line = 110;
		var inst_dict_623209 = get_dict_159307(self_622840);
		F.line = 111;
		HEX5BHEX5DHEX3D_523842(inst_dict_623209, name_623005, value_622842);
		F.line = 112;
		result_622843 = py_none_356044;
		break BeforeRet;
		}
		
		F.line = 114;
		F.line = 123;
		var msg_623214 = (self_622840.pyType.name).concat(makeNimstrLit(" has no attribute "),HEX24_157579(name_623005));
		F.line = 104;
		var excp_623216 = new_py_attribute_error_simple_361601();
		F.line = 105;
		excp_623216.tk = 4;
		F.line = 106;
		excp_623216.thrown = true;
		F.line = 107;
		excp_623216.msg = new_py_string_176075(msg_623214);
		result_622843 = excp_623216;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_622843;

}

function repr_default_622014(self_622016) {
	var result_622017 = null;

	var F={procname:"typeobject.reprDefault",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		F.line = 63;
		F.line = 63;
		var fmt_res_622020 = mnewString(0);
		F.line = 63;
		if (fmt_res_622020 != null) { fmt_res_622020 = (fmt_res_622020).concat(makeNimstrLit("<")); } else { fmt_res_622020 = makeNimstrLit("<"); };
		F.line = 260;
		if (fmt_res_622020 != null) { fmt_res_622020 = (fmt_res_622020).concat(self_622016.pyType.name); } else { fmt_res_622020 = self_622016.pyType.name.slice(); };
		F.line = 63;
		if (fmt_res_622020 != null) { fmt_res_622020 = (fmt_res_622020).concat(makeNimstrLit(" at ")); } else { fmt_res_622020 = makeNimstrLit(" at "); };
		F.line = 260;
		if (fmt_res_622020 != null) { fmt_res_622020 = (fmt_res_622020).concat(id_str_158001(self_622016)); } else { fmt_res_622020 = id_str_158001(self_622016).slice(); };
		F.line = 63;
		if (fmt_res_622020 != null) { fmt_res_622020 = (fmt_res_622020).concat(makeNimstrLit(">")); } else { fmt_res_622020 = makeNimstrLit(">"); };
		result_622017 = new_py_string_176075(fmt_res_622020);
	framePtr = F.prev;

	return result_622017;

}

function add_generic_623231(t_623233) {
			var Tmp1;
			var Tmp2;

	var F={procname:"typeobject.addGeneric",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
			if (!!((t_623233.magicMethods.Field16 === null))) Tmp1 = false; else {				Tmp1 = !((t_623233.magicMethods.Field18 === null));			}		if (Tmp1) {
		if ((t_623233.magicMethods.Field17 === null)) {
		F.line = 126;
		t_623233.magicMethods.Field17 = default_le_617321;
		}
		
		}
		
		if (!((t_623233.magicMethods.Field18 === null))) {
		if ((t_623233.magicMethods.Field19 === null)) {
		F.line = 128;
		t_623233.magicMethods.Field19 = default_ne_619014;
		}
		
		}
		
			if (!!((t_623233.magicMethods.Field21 === null))) Tmp2 = false; else {				Tmp2 = !((t_623233.magicMethods.Field18 === null));			}		if (Tmp2) {
		if ((t_623233.magicMethods.Field21 === null)) {
		F.line = 130;
		t_623233.magicMethods.Field21 = default_ge_620214;
		}
		
		}
		
		if ((t_623233.magicMethods.Field28 === null)) {
		F.line = 131;
		t_623233.magicMethods.Field28 = get_attr_622414;
		}
		
		if ((t_623233.magicMethods.Field29 === null)) {
		F.line = 132;
		t_623233.magicMethods.Field29 = set_attr_622838;
		}
		
		if ((t_623233.magicMethods.Field25 === null)) {
		F.line = 133;
		t_623233.magicMethods.Field25 = repr_default_622014;
		}
		
		if ((t_623233.magicMethods.Field24 === null)) {
		F.line = 134;
		t_623233.magicMethods.Field24 = t_623233.magicMethods.Field25;
		}
		
	framePtr = F.prev;

	
}

function new_py_static_method_544429(callable_544431) {
	var result_544432 = null;

	var F={procname:"funcobject.newPyStaticMethod",prev:framePtr,filename:"../Objects/funcobject.nim",line:0};
	framePtr = F;
		F.line = 56;
		result_544432 = new_py_static_method_simple_542801();
		F.line = 57;
		result_544432.callable = callable_544431;
	framePtr = F.prev;

	return result_544432;

}

function new_py_method_descr_601221(t_601216, meth_601218, name_601220) {
	var result_601223 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_601223 = new_py_method_descr_simple_600201();
		F.line = 27;
		result_601223.dType = t_601216;
		F.line = 28;
		result_601223.kind = 2;
		if (!(!((result_601223.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_601223.meth = meth_601218;
		F.line = 31;
		result_601223.name = name_601220;
	framePtr = F.prev;

	return result_601223;

}

function new_py_method_descr_601078(t_601073, meth_601075, name_601077) {
	var result_601080 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_601080 = new_py_method_descr_simple_600201();
		F.line = 27;
		result_601080.dType = t_601073;
		F.line = 28;
		result_601080.kind = 1;
		if (!(!((result_601080.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_601080.meth = meth_601075;
		F.line = 31;
		result_601080.name = name_601077;
	framePtr = F.prev;

	return result_601080;

}

function new_py_method_descr_601828(t_601830, meth_601831, name_601832) {
	var result_601833 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_601839 = null;
		F.line = 2896;
		e_601839 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 43;
		e_601839.message = nimCopy(null, makeNimstrLit("bltin function shouldn\'t be method. This is a placeholder to fool the compiler"), NTI138);
		F.line = 2891;
		e_601839.parent = null;
		F.line = 43;
		raiseException(e_601839, "InternalError");
	framePtr = F.prev;

	return result_601833;

}

function new_py_method_descr_601621(t_601616, meth_601618, name_601620) {
	var result_601623 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_601623 = new_py_method_descr_simple_600201();
		F.line = 27;
		result_601623.dType = t_601616;
		F.line = 28;
		result_601623.kind = 4;
		if (!(!((result_601623.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_601623.meth = meth_601618;
		F.line = 31;
		result_601623.name = name_601620;
	framePtr = F.prev;

	return result_601623;

}

function new_py_method_descr_601421(t_601416, meth_601418, name_601420) {
	var result_601423 = null;

	var F={procname:"descrobject.newPyMethodDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_601423 = new_py_method_descr_simple_600201();
		F.line = 27;
		result_601423.dType = t_601416;
		F.line = 28;
		result_601423.kind = 3;
		if (!(!((result_601423.kind == 0)))) {
		F.line = 29;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/descrobject.nim(29, 12) `\x0Anot (result.kind == BltinFunc)` "));
		}
		
		F.line = 30;
		result_601423.meth = meth_601418;
		F.line = 31;
		result_601423.name = name_601420;
	framePtr = F.prev;

	return result_601423;

}

function new_py_get_set_descr_604229(getter_604231, setter_604232) {
	var result_604233 = null;

	var F={procname:"descrobject.newPyGetSetDescr",prev:framePtr,filename:"../Objects/descrobject.nim",line:0};
	framePtr = F;
		F.line = 79;
		F.line = 79;
		var descr_604234 = new_py_get_set_descr_simple_603001();
		F.line = 80;
		descr_604234.getter = getter_604231;
		F.line = 81;
		descr_604234.setter = setter_604232;
		result_604233 = descr_604234;
	framePtr = F.prev;

	return result_604233;

}

function init_type_dict_623342(tp_623344) {
	var F={procname:"typeobject.initTypeDict",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		if (!((tp_623344.dict === null))) {
		F.line = 139;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/typeobject.nim(139, 10) `isNil(tp.dict)` "));
		}
		
		F.line = 140;
		var d_623401 = new_py_dict_522257();
		F.line = 143;
		var i_623404 = -1;
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field0"] === null))) {
		F.line = 147;
		var name_py_str_623426 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623426, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field0"], name_py_str_623426, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623426, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field0"], name_py_str_623426));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field1"] === null))) {
		F.line = 147;
		var name_py_str_623444 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623444, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field1"], name_py_str_623444, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623444, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field1"], name_py_str_623444));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field2"] === null))) {
		F.line = 147;
		var name_py_str_623462 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623462, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field2"], name_py_str_623462, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623462, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field2"], name_py_str_623462));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field3"] === null))) {
		F.line = 147;
		var name_py_str_623480 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623480, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field3"], name_py_str_623480, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623480, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field3"], name_py_str_623480));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field4"] === null))) {
		F.line = 147;
		var name_py_str_623498 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623498, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field4"], name_py_str_623498, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623498, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field4"], name_py_str_623498));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field5"] === null))) {
		F.line = 147;
		var name_py_str_623516 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623516, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field5"], name_py_str_623516, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623516, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field5"], name_py_str_623516));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field6"] === null))) {
		F.line = 147;
		var name_py_str_623534 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623534, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field6"], name_py_str_623534, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623534, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field6"], name_py_str_623534));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field7"] === null))) {
		F.line = 147;
		var name_py_str_623552 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623552, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field7"], name_py_str_623552, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623552, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field7"], name_py_str_623552));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field8"] === null))) {
		F.line = 147;
		var name_py_str_623570 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623570, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field8"], name_py_str_623570, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623570, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field8"], name_py_str_623570));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field9"] === null))) {
		F.line = 147;
		var name_py_str_623588 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623588, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field9"], name_py_str_623588, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623588, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field9"], name_py_str_623588));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field10"] === null))) {
		F.line = 147;
		var name_py_str_623606 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623606, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field10"], name_py_str_623606, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623606, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field10"], name_py_str_623606));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field11"] === null))) {
		F.line = 147;
		var name_py_str_623624 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623624, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field11"], name_py_str_623624, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623624, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field11"], name_py_str_623624));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field12"] === null))) {
		F.line = 147;
		var name_py_str_623642 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623642, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field12"], name_py_str_623642, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623642, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field12"], name_py_str_623642));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field13"] === null))) {
		F.line = 147;
		var name_py_str_623660 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623660, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field13"], name_py_str_623660, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623660, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field13"], name_py_str_623660));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field14"] === null))) {
		F.line = 147;
		var name_py_str_623678 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623678, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field14"], name_py_str_623678, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623678, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field14"], name_py_str_623678));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field15"] === null))) {
		F.line = 147;
		var name_py_str_623696 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623696, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field15"], name_py_str_623696, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623696, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field15"], name_py_str_623696));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field16"] === null))) {
		F.line = 147;
		var name_py_str_623714 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623714, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field16"], name_py_str_623714, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623714, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field16"], name_py_str_623714));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field17"] === null))) {
		F.line = 147;
		var name_py_str_623732 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623732, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field17"], name_py_str_623732, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623732, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field17"], name_py_str_623732));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field18"] === null))) {
		F.line = 147;
		var name_py_str_623750 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623750, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field18"], name_py_str_623750, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623750, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field18"], name_py_str_623750));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field19"] === null))) {
		F.line = 147;
		var name_py_str_623768 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623768, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field19"], name_py_str_623768, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623768, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field19"], name_py_str_623768));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field20"] === null))) {
		F.line = 147;
		var name_py_str_623786 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623786, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field20"], name_py_str_623786, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623786, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field20"], name_py_str_623786));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field21"] === null))) {
		F.line = 147;
		var name_py_str_623804 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623804, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field21"], name_py_str_623804, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623804, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field21"], name_py_str_623804));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field22"] === null))) {
		F.line = 147;
		var name_py_str_623822 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623822, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field22"], name_py_str_623822, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623822, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field22"], name_py_str_623822));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field23"] === null))) {
		F.line = 147;
		var name_py_str_623840 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623840, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field23"], name_py_str_623840, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623840, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field23"], name_py_str_623840));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field24"] === null))) {
		F.line = 147;
		var name_py_str_623858 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623858, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field24"], name_py_str_623858, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623858, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field24"], name_py_str_623858));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field25"] === null))) {
		F.line = 147;
		var name_py_str_623876 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623876, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field25"], name_py_str_623876, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623876, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field25"], name_py_str_623876));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field26"] === null))) {
		F.line = 147;
		var name_py_str_623894 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (true) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623894, new_py_static_method_544429(new_py_nim_func_549444(tp_623344.magicMethods["Field26"], name_py_str_623894)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623894, new_py_method_descr_601828(tp_623344, tp_623344.magicMethods["Field26"], name_py_str_623894));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field27"] === null))) {
		F.line = 147;
		var name_py_str_623912 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623912, new_py_static_method_544429(new_py_nim_func_550022(tp_623344.magicMethods["Field27"], name_py_str_623912, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623912, new_py_method_descr_601621(tp_623344, tp_623344.magicMethods["Field27"], name_py_str_623912));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field28"] === null))) {
		F.line = 147;
		var name_py_str_623930 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623930, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field28"], name_py_str_623930, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623930, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field28"], name_py_str_623930));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field29"] === null))) {
		F.line = 147;
		var name_py_str_623948 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623948, new_py_static_method_544429(new_py_nim_func_549822(tp_623344.magicMethods["Field29"], name_py_str_623948, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623948, new_py_method_descr_601421(tp_623344, tp_623344.magicMethods["Field29"], name_py_str_623948));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field30"] === null))) {
		F.line = 147;
		var name_py_str_623966 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623966, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field30"], name_py_str_623966, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623966, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field30"], name_py_str_623966));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field31"] === null))) {
		F.line = 147;
		var name_py_str_623984 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623984, new_py_static_method_544429(new_py_nim_func_550022(tp_623344.magicMethods["Field31"], name_py_str_623984, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_623984, new_py_method_descr_601621(tp_623344, tp_623344.magicMethods["Field31"], name_py_str_623984));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field32"] === null))) {
		F.line = 147;
		var name_py_str_624002 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624002, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field32"], name_py_str_624002, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624002, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field32"], name_py_str_624002));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field33"] === null))) {
		F.line = 147;
		var name_py_str_624020 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624020, new_py_static_method_544429(new_py_nim_func_549822(tp_623344.magicMethods["Field33"], name_py_str_624020, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624020, new_py_method_descr_601421(tp_623344, tp_623344.magicMethods["Field33"], name_py_str_624020));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field34"] === null))) {
		F.line = 147;
		var name_py_str_624038 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624038, new_py_static_method_544429(new_py_nim_func_549622(tp_623344.magicMethods["Field34"], name_py_str_624038, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624038, new_py_method_descr_601221(tp_623344, tp_623344.magicMethods["Field34"], name_py_str_624038));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field35"] === null))) {
		F.line = 147;
		var name_py_str_624056 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624056, new_py_static_method_544429(new_py_nim_func_549822(tp_623344.magicMethods["Field35"], name_py_str_624056, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624056, new_py_method_descr_601421(tp_623344, tp_623344.magicMethods["Field35"], name_py_str_624056));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field36"] === null))) {
		F.line = 147;
		var name_py_str_624074 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624074, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field36"], name_py_str_624074, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624074, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field36"], name_py_str_624074));
		}
		
		}
		
		F.line = 145;
		i_623404 = addInt(i_623404, 1);
		if (!((tp_623344.magicMethods["Field37"] === null))) {
		F.line = 147;
		var name_py_str_624092 = magic_name_strs_612041[0][chckIndx(i_623404, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (false) {
		F.line = 149;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624092, new_py_static_method_544429(new_py_nim_func_549485(tp_623344.magicMethods["Field37"], name_py_str_624092, null)));
		}
		else {
			F.line = 151;
		HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624092, new_py_method_descr_601078(tp_623344, tp_623344.magicMethods["Field37"], name_py_str_624092));
		}
		
		}
		
		L1: do {
			F.line = 153;
			var key_624797 = null;
			F.line = 153;
			var value_624798 = {Field0: null, Field1: null};
			F.line = 270;
			var colontmp__625509 = {data: null, counter: 0};
			F.line = 153;
			nimCopy(colontmp__625509, tp_623344.getsetDescr, NTI157326);
			L2: do {
				F.line = 272;
				var h_625513 = 0;
				F.line = 2104;
				var colontmp__625515 = 0;
				F.line = 272;
				colontmp__625515 = (colontmp__625509.data != null ? (colontmp__625509.data.length-1) : -1);
				F.line = 2107;
				var res_625517 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_625517 <= colontmp__625515)) break L4;
							F.line = 2109;
							h_625513 = res_625517;
							if (is_filled_146491(colontmp__625509.data[chckIndx(h_625513, 0, colontmp__625509.data.length+0-1)-0].Field0)) {
							F.line = 273;
							key_624797 = colontmp__625509.data[chckIndx(h_625513, 0, colontmp__625509.data.length+0-1)-0].Field1;
							F.line = 273;
							nimCopy(value_624798, colontmp__625509.data[chckIndx(h_625513, 0, colontmp__625509.data.length+0-1)-0].Field2, NTI157318);
							F.line = 154;
							var getter_624799 = value_624798["Field0"];
							F.line = 155;
							var setter_624800 = value_624798["Field1"];
							F.line = 156;
							var descr_624801 = new_py_get_set_descr_604229(getter_624799, setter_624800);
							F.line = 157;
							var name_py_str_624802 = new_py_str_176092(key_624797);
							F.line = 158;
							HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_624802, descr_624801);
							}
							
							F.line = 2110;
							res_625517 = addInt(res_625517, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		L5: do {
			F.line = 161;
			var name_625505 = null;
			F.line = 161;
			var meth_625506 = null;
			F.line = 270;
			var colontmp__625521 = {data: null, counter: 0};
			F.line = 161;
			nimCopy(colontmp__625521, tp_623344.bltinMethods, NTI157294);
			L6: do {
				F.line = 272;
				var h_625525 = 0;
				F.line = 2104;
				var colontmp__625527 = 0;
				F.line = 272;
				colontmp__625527 = (colontmp__625521.data != null ? (colontmp__625521.data.length-1) : -1);
				F.line = 2107;
				var res_625529 = 0;
				L7: do {
					F.line = 2108;
						L8: while (true) {
						if (!(res_625529 <= colontmp__625527)) break L8;
							F.line = 2109;
							h_625525 = res_625529;
							if (is_filled_146491(colontmp__625521.data[chckIndx(h_625525, 0, colontmp__625521.data.length+0-1)-0].Field0)) {
							F.line = 273;
							name_625505 = colontmp__625521.data[chckIndx(h_625525, 0, colontmp__625521.data.length+0-1)-0].Field1;
							F.line = 273;
							meth_625506 = colontmp__625521.data[chckIndx(h_625525, 0, colontmp__625521.data.length+0-1)-0].Field2;
							F.line = 162;
							var name_py_str_625507 = new_py_string_176075(name_625505);
							F.line = 163;
							HEX5BHEX5DHEX3D_523842(d_623401, name_py_str_625507, new_py_method_descr_601621(tp_623344, meth_625506, name_py_str_625507));
							}
							
							F.line = 2110;
							res_625529 = addInt(res_625529, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 165;
		tp_623344.dict = d_623401;
	framePtr = F.prev;

	
}

function type_ready_625659(tp_625661) {
	var F={procname:"typeobject.typeReady",prev:framePtr,filename:"../Objects/typeobject.nim",line:0};
	framePtr = F;
		F.line = 168;
		tp_625661.pyType = py_type_object_type_612361;
		F.line = 169;
		add_generic_623231(tp_625661);
		if ((tp_625661.dict === null)) {
		F.line = 171;
		init_type_dict_623342(tp_625661);
		}
		
	framePtr = F.prev;

	
}

function call_py_type_object_magic_625682(self_no_cast_625684, args_625698) {
			var Tmp1;
			var Tmp2;

	var result_625699 = null;

	var F={procname:"typeobject.callPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_625684.m_type, NTI157280))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyTypeObject` "));
		}
		
		F.line = 438;
		var self_625801 = self_no_cast_625684;
		if (((self_625801 == py_type_object_type_612361) && ((args_625698 != null ? args_625698.length : 0) == 1))) {
		F.line = 180;
		result_625699 = args_625698[chckIndx(0, 0, args_625698.length+0-1)-0].pyType;
		break BeforeRet;
		}
		
		F.line = 182;
		var new_func_625819 = self_625801.magicMethods.Field26;
		if ((new_func_625819 === null)) {
		F.line = 184;
		F.line = 184;
		var fmt_res_625829 = mnewString(0);
		F.line = 184;
		if (fmt_res_625829 != null) { fmt_res_625829 = (fmt_res_625829).concat(makeNimstrLit("cannot create \'")); } else { fmt_res_625829 = makeNimstrLit("cannot create \'"); };
		F.line = 260;
		if (fmt_res_625829 != null) { fmt_res_625829 = (fmt_res_625829).concat(self_625801.name); } else { fmt_res_625829 = self_625801.name.slice(); };
		F.line = 184;
		if (fmt_res_625829 != null) { fmt_res_625829 = (fmt_res_625829).concat(makeNimstrLit("\' instances because __new__ is not set")); } else { fmt_res_625829 = makeNimstrLit("\' instances because __new__ is not set"); };
		var msg_626001 = nimCopy(null, fmt_res_625829, NTI138);
		F.line = 185;
		F.line = 104;
		var excp_626003 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_626003.tk = 3;
		F.line = 106;
		excp_626003.thrown = true;
		F.line = 107;
		excp_626003.msg = new_py_string_176075(msg_626001);
		result_625699 = excp_626003;
		break BeforeRet;
		}
		
		F.line = 186;
		var new_obj_626028 = new_func_625819(HEX26_598015([self_625801], args_625698));
			if (of_py_exception_object_358259(new_obj_626028)) {
			Tmp1 = new_obj_626028.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 188;
		result_625699 = new_obj_626028;
		break BeforeRet;
		}
		
		F.line = 189;
		var init_func_626029 = self_625801.magicMethods.Field27;
		if (!((init_func_626029 === null))) {
		F.line = 191;
		var init_ret_626036 = init_func_626029(new_obj_626028, args_625698);
			if (of_py_exception_object_358259(init_ret_626036)) {
			Tmp2 = init_ret_626036.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 193;
		result_625699 = init_ret_626036;
		break BeforeRet;
		}
		
		}
		
		F.line = 195;
		result_625699 = new_obj_626028;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_625699;

}

function new_626206() {
	var result_626211 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_626401 = null;
		F.line = 211;
		r_626401 = {m_type: NTI626109, dict: null, id: 0, pyType: null};
		F.line = 212;
		result_626211 = r_626401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_626211;

}

function new_py_instance_simple_626201() {
	var result_626203 = null;

	var F={procname:"typeobject.newPyInstanceSimple",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 560;
		F.line = 560;
		var obj_626424 = new_626206();
		F.line = 561;
		obj_626424.pyType = py_instance_object_type_626113;
		F.line = 563;
		give_id_157814(obj_626424);
		F.line = 565;
		obj_626424.dict = new_py_dict_522257();
		result_626203 = obj_626424;
	framePtr = F.prev;

	return result_626203;

}

function new_py_instance_default_626821(args_626064) {
	var result_626824 = null;

	var F={procname:"typeobject.newPyInstanceDefault",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 581;
		result_626824 = new_py_instance_simple_626201();
	framePtr = F.prev;

	return result_626824;

}

function HEX5BHEX5D_627438(s_627445, x_627448) {
	var result_627450 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_627601 = x_627448.a;
		F.line = 3707;
		var l_627807 = addInt(subInt(subInt((s_627445 != null ? s_627445.length : 0), x_627448.b), a_627601), 1);
		F.line = 3708;
		result_627450 = new Array(chckRange(l_627807, 0, 2147483647)); for (var i=0;i<chckRange(l_627807, 0, 2147483647);++i) {result_627450[i]=null;}		L1: do {
			F.line = 3709;
			var i_627827 = 0;
			F.line = 3617;
			var i_627835 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_627835 < l_627807)) break L3;
						F.line = 3619;
						i_627827 = i_627835;
						F.line = 3709;
						result_627450[chckIndx(i_627827, 0, result_627450.length+0-1)-0] = s_627445[chckIndx(addInt(i_627827, a_627601), 0, s_627445.length+0-1)-0];
						F.line = 3620;
						i_627835 = addInt(i_627835, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_627450;

}

function new_py_instance_object_magic_627046(args_627061) {
	var result_627062 = null;

	var F={procname:"typeobject.newPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((args_627061 != null ? args_627061.length : 0) < 1)) {
		F.line = 193;
		var msg_627073 = null;
		if (true) {
		F.line = 195;
		F.line = 195;
		var fmt_res_627078 = mnewString(0);
		F.line = 195;
		if (fmt_res_627078 != null) { fmt_res_627078 = (fmt_res_627078).concat(makeNimstrLit(" argument (")); } else { fmt_res_627078 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_627078 != null) { fmt_res_627078 = (fmt_res_627078).concat(cstrToNimstr(((args_627061 != null ? args_627061.length : 0))+"")); } else { fmt_res_627078 = cstrToNimstr(((args_627061 != null ? args_627061.length : 0))+"").slice(); };
		F.line = 195;
		if (fmt_res_627078 != null) { fmt_res_627078 = (fmt_res_627078).concat(makeNimstrLit(" given)")); } else { fmt_res_627078 = makeNimstrLit(" given)"); };
		msg_627073 = nimCopy(null, (makeNimstrLit("New takes at least 1")).concat(fmt_res_627078), NTI138);
		}
		else {
			F.line = 197;
			F.line = 197;
			var fmt_res_627210 = mnewString(0);
			F.line = 197;
			if (fmt_res_627210 != null) { fmt_res_627210 = (fmt_res_627210).concat(makeNimstrLit(" argument (")); } else { fmt_res_627210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_627210 != null) { fmt_res_627210 = (fmt_res_627210).concat(cstrToNimstr(((args_627061 != null ? args_627061.length : 0))+"")); } else { fmt_res_627210 = cstrToNimstr(((args_627061 != null ? args_627061.length : 0))+"").slice(); };
			F.line = 197;
			if (fmt_res_627210 != null) { fmt_res_627210 = (fmt_res_627210).concat(makeNimstrLit(" given)")); } else { fmt_res_627210 = makeNimstrLit(" given)"); };
			msg_627073 = nimCopy(null, (makeNimstrLit("expected at least 1")).concat(fmt_res_627210), NTI138);
		}
		
		F.line = 198;
		F.line = 104;
		var excp_627409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_627409.tk = 3;
		F.line = 106;
		excp_627409.thrown = true;
		F.line = 107;
		excp_627409.msg = new_py_string_176075(msg_627073);
		result_627062 = excp_627409;
		break BeforeRet;
		}
		
		F.line = 215;
		var actual_args_627850 = HEX5BHEX5D_627438(args_627061, HEX2EHEX2E_81053(1, 1));
		if (!(isObj(args_627061[chckIndx(0, 0, args_627061.length+0-1)-0].m_type, NTI157280))) {
		F.line = 185;
		var expected_627862 = nimCopy(null, py_type_object_type_612361.name, NTI138);
		F.line = 186;
		var got_627863 = nimCopy(null, args_627061[chckIndx(0, 0, args_627061.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_627864 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_627868 = mnewString(0);
		F.line = 260;
		if (fmt_res_627868 != null) { fmt_res_627868 = (fmt_res_627868).concat(expected_627862); } else { fmt_res_627868 = expected_627862.slice(); };
		F.line = 188;
		if (fmt_res_627868 != null) { fmt_res_627868 = (fmt_res_627868).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_627868 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_627868 != null) { fmt_res_627868 = (fmt_res_627868).concat(m_name_627864); } else { fmt_res_627868 = m_name_627864.slice(); };
		F.line = 188;
		if (fmt_res_627868 != null) { fmt_res_627868 = (fmt_res_627868).concat(makeNimstrLit(" (got ")); } else { fmt_res_627868 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_627868 != null) { fmt_res_627868 = (fmt_res_627868).concat(got_627863); } else { fmt_res_627868 = got_627863.slice(); };
		F.line = 188;
		if (fmt_res_627868 != null) { fmt_res_627868 = (fmt_res_627868).concat(makeNimstrLit(")")); } else { fmt_res_627868 = makeNimstrLit(")"); };
		var msg_628402 = nimCopy(null, fmt_res_627868, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_628404 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_628404.tk = 3;
		F.line = 106;
		excp_628404.thrown = true;
		F.line = 107;
		excp_628404.msg = new_py_string_176075(msg_628402);
		result_627062 = excp_628404;
		break BeforeRet;
		}
		
		F.line = 237;
		var tp_628406 = args_627061[chckIndx(0, 0, args_627061.length+0-1)-0];
		F.line = 210;
		result_627062 = new_py_instance_simple_626201();
		F.line = 211;
		result_627062.pyType = tp_628406;
	} while (false);
	framePtr = F.prev;

	return result_627062;

}
type_ready_625659(py_type_object_type_612361);
py_type_object_type_612361.magicMethods.Field31 = call_py_type_object_magic_625682;
var py_instance_object_type_626113 = new_py_type_159261(makeNimstrLit("Instance"));
py_instance_object_type_626113.magicMethods.Field26 = new_py_instance_default_626821;
py_instance_object_type_626113.magicMethods.Field26 = new_py_instance_object_magic_627046;

function add_py_instance_object_magic_636163(self_no_cast_636165, other_636166) {
	var result_636167 = null;

	var F={procname:"typeobject.addPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_636165.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_636201 = self_no_cast_636165;
		F.line = 221;
		var magic_name_str_636207 = magic_name_strs_612041[0][chckIndx(0, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_636209 = HEX5BHEX5D_523323(get_type_dict_617304(self_636201), magic_name_str_636207);
		F.line = 223;
		result_636167 = fast_call_599133(fun_636209, [self_636201, other_636166]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_636167;

}

function sub_py_instance_object_magic_636236(self_no_cast_636238, other_636239) {
	var result_636240 = null;

	var F={procname:"typeobject.subPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_636238.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_636401 = self_no_cast_636238;
		F.line = 221;
		var magic_name_str_636407 = magic_name_strs_612041[0][chckIndx(1, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_636409 = HEX5BHEX5D_523323(get_type_dict_617304(self_636401), magic_name_str_636407);
		F.line = 223;
		result_636240 = fast_call_599133(fun_636409, [self_636401, other_636239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_636240;

}

function mul_py_instance_object_magic_636436(self_no_cast_636438, other_636439) {
	var result_636440 = null;

	var F={procname:"typeobject.mulPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_636438.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_636601 = self_no_cast_636438;
		F.line = 221;
		var magic_name_str_636607 = magic_name_strs_612041[0][chckIndx(2, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_636609 = HEX5BHEX5D_523323(get_type_dict_617304(self_636601), magic_name_str_636607);
		F.line = 223;
		result_636440 = fast_call_599133(fun_636609, [self_636601, other_636439]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_636440;

}

function truediv_py_instance_object_magic_636636(self_no_cast_636638, other_636639) {
	var result_636640 = null;

	var F={procname:"typeobject.truedivPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_636638.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_636801 = self_no_cast_636638;
		F.line = 221;
		var magic_name_str_636807 = magic_name_strs_612041[0][chckIndx(3, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_636809 = HEX5BHEX5D_523323(get_type_dict_617304(self_636801), magic_name_str_636807);
		F.line = 223;
		result_636640 = fast_call_599133(fun_636809, [self_636801, other_636639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_636640;

}

function floordiv_py_instance_object_magic_636836(self_no_cast_636838, other_636839) {
	var result_636840 = null;

	var F={procname:"typeobject.floordivPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_636838.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_637001 = self_no_cast_636838;
		F.line = 221;
		var magic_name_str_637007 = magic_name_strs_612041[0][chckIndx(4, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_637009 = HEX5BHEX5D_523323(get_type_dict_617304(self_637001), magic_name_str_637007);
		F.line = 223;
		result_636840 = fast_call_599133(fun_637009, [self_637001, other_636839]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_636840;

}

function mod_py_instance_object_magic_637036(self_no_cast_637038, other_637039) {
	var result_637040 = null;

	var F={procname:"typeobject.modPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_637038.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_637201 = self_no_cast_637038;
		F.line = 221;
		var magic_name_str_637207 = magic_name_strs_612041[0][chckIndx(5, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_637209 = HEX5BHEX5D_523323(get_type_dict_617304(self_637201), magic_name_str_637207);
		F.line = 223;
		result_637040 = fast_call_599133(fun_637209, [self_637201, other_637039]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_637040;

}

function pow_py_instance_object_magic_637236(self_no_cast_637238, other_637239) {
	var result_637240 = null;

	var F={procname:"typeobject.powPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_637238.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_637401 = self_no_cast_637238;
		F.line = 221;
		var magic_name_str_637407 = magic_name_strs_612041[0][chckIndx(6, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_637409 = HEX5BHEX5D_523323(get_type_dict_617304(self_637401), magic_name_str_637407);
		F.line = 223;
		result_637240 = fast_call_599133(fun_637409, [self_637401, other_637239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_637240;

}

function not_py_instance_object_magic_637436(self_no_cast_637438) {
	var result_637439 = null;

	var F={procname:"typeobject.notPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_637438.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_637601 = self_no_cast_637438;
		F.line = 215;
		var magic_name_str_637607 = magic_name_strs_612041[0][chckIndx(7, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_637609 = HEX5BHEX5D_523323(get_type_dict_617304(self_637601), magic_name_str_637607);
		F.line = 217;
		result_637439 = fast_call_599133(fun_637609, [self_637601]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_637439;

}

function negative_py_instance_object_magic_637636(self_no_cast_637638) {
	var result_637639 = null;

	var F={procname:"typeobject.negativePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_637638.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_637801 = self_no_cast_637638;
		F.line = 215;
		var magic_name_str_637807 = magic_name_strs_612041[0][chckIndx(8, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_637809 = HEX5BHEX5D_523323(get_type_dict_617304(self_637801), magic_name_str_637807);
		F.line = 217;
		result_637639 = fast_call_599133(fun_637809, [self_637801]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_637639;

}

function positive_py_instance_object_magic_637836(self_no_cast_637838) {
	var result_637839 = null;

	var F={procname:"typeobject.positivePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_637838.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_638001 = self_no_cast_637838;
		F.line = 215;
		var magic_name_str_638007 = magic_name_strs_612041[0][chckIndx(9, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_638009 = HEX5BHEX5D_523323(get_type_dict_617304(self_638001), magic_name_str_638007);
		F.line = 217;
		result_637839 = fast_call_599133(fun_638009, [self_638001]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_637839;

}

function abs_py_instance_object_magic_638036(self_no_cast_638038) {
	var result_638039 = null;

	var F={procname:"typeobject.absPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_638038.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_638201 = self_no_cast_638038;
		F.line = 215;
		var magic_name_str_638207 = magic_name_strs_612041[0][chckIndx(10, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_638209 = HEX5BHEX5D_523323(get_type_dict_617304(self_638201), magic_name_str_638207);
		F.line = 217;
		result_638039 = fast_call_599133(fun_638209, [self_638201]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_638039;

}

function index_py_instance_object_magic_638236(self_no_cast_638238) {
	var result_638239 = null;

	var F={procname:"typeobject.indexPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_638238.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_638401 = self_no_cast_638238;
		F.line = 215;
		var magic_name_str_638407 = magic_name_strs_612041[0][chckIndx(11, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_638409 = HEX5BHEX5D_523323(get_type_dict_617304(self_638401), magic_name_str_638407);
		F.line = 217;
		result_638239 = fast_call_599133(fun_638409, [self_638401]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_638239;

}

function bool_py_instance_object_magic_638436(self_no_cast_638438) {
	var result_638439 = null;

	var F={procname:"typeobject.boolPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_638438.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_638601 = self_no_cast_638438;
		F.line = 215;
		var magic_name_str_638607 = magic_name_strs_612041[0][chckIndx(12, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_638609 = HEX5BHEX5D_523323(get_type_dict_617304(self_638601), magic_name_str_638607);
		F.line = 217;
		result_638439 = fast_call_599133(fun_638609, [self_638601]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_638439;

}

function and_py_instance_object_magic_638636(self_no_cast_638638, other_638639) {
	var result_638640 = null;

	var F={procname:"typeobject.andPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_638638.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_638801 = self_no_cast_638638;
		F.line = 221;
		var magic_name_str_638807 = magic_name_strs_612041[0][chckIndx(13, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_638809 = HEX5BHEX5D_523323(get_type_dict_617304(self_638801), magic_name_str_638807);
		F.line = 223;
		result_638640 = fast_call_599133(fun_638809, [self_638801, other_638639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_638640;

}

function xor_py_instance_object_magic_638836(self_no_cast_638838, other_638839) {
	var result_638840 = null;

	var F={procname:"typeobject.xorPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_638838.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_639001 = self_no_cast_638838;
		F.line = 221;
		var magic_name_str_639007 = magic_name_strs_612041[0][chckIndx(14, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_639009 = HEX5BHEX5D_523323(get_type_dict_617304(self_639001), magic_name_str_639007);
		F.line = 223;
		result_638840 = fast_call_599133(fun_639009, [self_639001, other_638839]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_638840;

}

function or_py_instance_object_magic_639036(self_no_cast_639038, other_639039) {
	var result_639040 = null;

	var F={procname:"typeobject.orPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_639038.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_639201 = self_no_cast_639038;
		F.line = 221;
		var magic_name_str_639207 = magic_name_strs_612041[0][chckIndx(15, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_639209 = HEX5BHEX5D_523323(get_type_dict_617304(self_639201), magic_name_str_639207);
		F.line = 223;
		result_639040 = fast_call_599133(fun_639209, [self_639201, other_639039]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_639040;

}

function lt_py_instance_object_magic_639236(self_no_cast_639238, other_639239) {
	var result_639240 = null;

	var F={procname:"typeobject.ltPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_639238.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_639401 = self_no_cast_639238;
		F.line = 221;
		var magic_name_str_639407 = magic_name_strs_612041[0][chckIndx(16, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_639409 = HEX5BHEX5D_523323(get_type_dict_617304(self_639401), magic_name_str_639407);
		F.line = 223;
		result_639240 = fast_call_599133(fun_639409, [self_639401, other_639239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_639240;

}

function le_py_instance_object_magic_639436(self_no_cast_639438, other_639439) {
	var result_639440 = null;

	var F={procname:"typeobject.lePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_639438.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_639601 = self_no_cast_639438;
		F.line = 221;
		var magic_name_str_639607 = magic_name_strs_612041[0][chckIndx(17, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_639609 = HEX5BHEX5D_523323(get_type_dict_617304(self_639601), magic_name_str_639607);
		F.line = 223;
		result_639440 = fast_call_599133(fun_639609, [self_639601, other_639439]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_639440;

}

function eq_py_instance_object_magic_639636(self_no_cast_639638, other_639639) {
	var result_639640 = null;

	var F={procname:"typeobject.eqPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_639638.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_639801 = self_no_cast_639638;
		F.line = 221;
		var magic_name_str_639807 = magic_name_strs_612041[0][chckIndx(18, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_639809 = HEX5BHEX5D_523323(get_type_dict_617304(self_639801), magic_name_str_639807);
		F.line = 223;
		result_639640 = fast_call_599133(fun_639809, [self_639801, other_639639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_639640;

}

function ne_py_instance_object_magic_639836(self_no_cast_639838, other_639839) {
	var result_639840 = null;

	var F={procname:"typeobject.nePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_639838.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_640001 = self_no_cast_639838;
		F.line = 221;
		var magic_name_str_640007 = magic_name_strs_612041[0][chckIndx(19, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_640009 = HEX5BHEX5D_523323(get_type_dict_617304(self_640001), magic_name_str_640007);
		F.line = 223;
		result_639840 = fast_call_599133(fun_640009, [self_640001, other_639839]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_639840;

}

function gt_py_instance_object_magic_640036(self_no_cast_640038, other_640039) {
	var result_640040 = null;

	var F={procname:"typeobject.gtPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_640038.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_640201 = self_no_cast_640038;
		F.line = 221;
		var magic_name_str_640207 = magic_name_strs_612041[0][chckIndx(20, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_640209 = HEX5BHEX5D_523323(get_type_dict_617304(self_640201), magic_name_str_640207);
		F.line = 223;
		result_640040 = fast_call_599133(fun_640209, [self_640201, other_640039]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_640040;

}

function ge_py_instance_object_magic_640236(self_no_cast_640238, other_640239) {
	var result_640240 = null;

	var F={procname:"typeobject.gePyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_640238.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_640401 = self_no_cast_640238;
		F.line = 221;
		var magic_name_str_640407 = magic_name_strs_612041[0][chckIndx(21, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_640409 = HEX5BHEX5D_523323(get_type_dict_617304(self_640401), magic_name_str_640407);
		F.line = 223;
		result_640240 = fast_call_599133(fun_640409, [self_640401, other_640239]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_640240;

}

function contains_py_instance_object_magic_640436(self_no_cast_640438, other_640439) {
	var result_640440 = null;

	var F={procname:"typeobject.containsPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_640438.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_640601 = self_no_cast_640438;
		F.line = 221;
		var magic_name_str_640607 = magic_name_strs_612041[0][chckIndx(22, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_640609 = HEX5BHEX5D_523323(get_type_dict_617304(self_640601), magic_name_str_640607);
		F.line = 223;
		result_640440 = fast_call_599133(fun_640609, [self_640601, other_640439]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_640440;

}

function len_py_instance_object_magic_640636(self_no_cast_640638) {
	var result_640639 = null;

	var F={procname:"typeobject.lenPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_640638.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_640801 = self_no_cast_640638;
		F.line = 215;
		var magic_name_str_640807 = magic_name_strs_612041[0][chckIndx(23, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_640809 = HEX5BHEX5D_523323(get_type_dict_617304(self_640801), magic_name_str_640807);
		F.line = 217;
		result_640639 = fast_call_599133(fun_640809, [self_640801]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_640639;

}

function str_py_instance_object_magic_640836(self_no_cast_640838) {
	var result_640839 = null;

	var F={procname:"typeobject.strPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_640838.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_641001 = self_no_cast_640838;
		F.line = 215;
		var magic_name_str_641007 = magic_name_strs_612041[0][chckIndx(24, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_641009 = HEX5BHEX5D_523323(get_type_dict_617304(self_641001), magic_name_str_641007);
		F.line = 217;
		result_640839 = fast_call_599133(fun_641009, [self_641001]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_640839;

}

function repr_py_instance_object_magic_641036(self_no_cast_641038) {
	var result_641039 = null;

	var F={procname:"typeobject.reprPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_641038.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_641201 = self_no_cast_641038;
		F.line = 215;
		var magic_name_str_641207 = magic_name_strs_612041[0][chckIndx(25, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_641209 = HEX5BHEX5D_523323(get_type_dict_617304(self_641201), magic_name_str_641207);
		F.line = 217;
		result_641039 = fast_call_599133(fun_641209, [self_641201]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_641039;

}

function init_py_instance_object_magic_641236(self_no_cast_641238, args_641252) {
	var result_641253 = null;

	var F={procname:"typeobject.initPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_641238.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_641401 = self_no_cast_641238;
		F.line = 239;
		var magic_name_str_641407 = magic_name_strs_612041[0][chckIndx(27, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 240;
		var fun_641409 = HEX5BHEX5D_523323(get_type_dict_617304(self_641401), magic_name_str_641407);
		F.line = 241;
		result_641253 = fast_call_599133(fun_641409, HEX26_598015([self_641401], args_641252));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_641253;

}

function getattr_py_instance_object_magic_641447(self_no_cast_641449, other_641450) {
	var result_641451 = null;

	var F={procname:"typeobject.getattrPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_641449.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_641601 = self_no_cast_641449;
		F.line = 221;
		var magic_name_str_641607 = magic_name_strs_612041[0][chckIndx(28, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_641609 = HEX5BHEX5D_523323(get_type_dict_617304(self_641601), magic_name_str_641607);
		F.line = 223;
		result_641451 = fast_call_599133(fun_641609, [self_641601, other_641450]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_641451;

}

function setattr_py_instance_object_magic_641636(self_no_cast_641638, arg1_641639, arg2_641640) {
	var result_641641 = null;

	var F={procname:"typeobject.setattrPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_641638.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_641801 = self_no_cast_641638;
		F.line = 227;
		var magic_name_str_641807 = magic_name_strs_612041[0][chckIndx(29, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 228;
		var fun_641809 = HEX5BHEX5D_523323(get_type_dict_617304(self_641801), magic_name_str_641807);
		F.line = 229;
		result_641641 = fast_call_599133(fun_641809, [self_641801, arg1_641639, arg2_641640]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_641641;

}

function hash_py_instance_object_magic_641836(self_no_cast_641838) {
	var result_641839 = null;

	var F={procname:"typeobject.hashPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_641838.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_642001 = self_no_cast_641838;
		F.line = 215;
		var magic_name_str_642007 = magic_name_strs_612041[0][chckIndx(30, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_642009 = HEX5BHEX5D_523323(get_type_dict_617304(self_642001), magic_name_str_642007);
		F.line = 217;
		result_641839 = fast_call_599133(fun_642009, [self_642001]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_641839;

}

function call_py_instance_object_magic_642036(self_no_cast_642038, args_642052) {
	var result_642053 = null;

	var F={procname:"typeobject.callPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_642038.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_642201 = self_no_cast_642038;
		F.line = 239;
		var magic_name_str_642207 = magic_name_strs_612041[0][chckIndx(31, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 240;
		var fun_642209 = HEX5BHEX5D_523323(get_type_dict_617304(self_642201), magic_name_str_642207);
		F.line = 241;
		result_642053 = fast_call_599133(fun_642209, HEX26_598015([self_642201], args_642052));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_642053;

}

function getitem_py_instance_object_magic_642247(self_no_cast_642249, other_642250) {
	var result_642251 = null;

	var F={procname:"typeobject.getitemPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_642249.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_642401 = self_no_cast_642249;
		F.line = 221;
		var magic_name_str_642407 = magic_name_strs_612041[0][chckIndx(32, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_642409 = HEX5BHEX5D_523323(get_type_dict_617304(self_642401), magic_name_str_642407);
		F.line = 223;
		result_642251 = fast_call_599133(fun_642409, [self_642401, other_642250]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_642251;

}

function setitem_py_instance_object_magic_642436(self_no_cast_642438, arg1_642439, arg2_642440) {
	var result_642441 = null;

	var F={procname:"typeobject.setitemPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_642438.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_642601 = self_no_cast_642438;
		F.line = 227;
		var magic_name_str_642607 = magic_name_strs_612041[0][chckIndx(33, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 228;
		var fun_642609 = HEX5BHEX5D_523323(get_type_dict_617304(self_642601), magic_name_str_642607);
		F.line = 229;
		result_642441 = fast_call_599133(fun_642609, [self_642601, arg1_642439, arg2_642440]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_642441;

}

function get_py_instance_object_magic_642636(self_no_cast_642638, other_642639) {
	var result_642640 = null;

	var F={procname:"typeobject.getPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_642638.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_642801 = self_no_cast_642638;
		F.line = 221;
		var magic_name_str_642807 = magic_name_strs_612041[0][chckIndx(34, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 222;
		var fun_642809 = HEX5BHEX5D_523323(get_type_dict_617304(self_642801), magic_name_str_642807);
		F.line = 223;
		result_642640 = fast_call_599133(fun_642809, [self_642801, other_642639]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_642640;

}

function set_py_instance_object_magic_642836(self_no_cast_642838, arg1_642839, arg2_642840) {
	var result_642841 = null;

	var F={procname:"typeobject.setPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_642838.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_643001 = self_no_cast_642838;
		F.line = 227;
		var magic_name_str_643007 = magic_name_strs_612041[0][chckIndx(35, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 228;
		var fun_643009 = HEX5BHEX5D_523323(get_type_dict_617304(self_643001), magic_name_str_643007);
		F.line = 229;
		result_642841 = fast_call_599133(fun_643009, [self_643001, arg1_642839, arg2_642840]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_642841;

}

function iter_py_instance_object_magic_643036(self_no_cast_643038) {
	var result_643039 = null;

	var F={procname:"typeobject.iterPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_643038.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_643201 = self_no_cast_643038;
		F.line = 215;
		var magic_name_str_643207 = magic_name_strs_612041[0][chckIndx(36, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_643209 = HEX5BHEX5D_523323(get_type_dict_617304(self_643201), magic_name_str_643207);
		F.line = 217;
		result_643039 = fast_call_599133(fun_643209, [self_643201]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_643039;

}

function iternext_py_instance_object_magic_643236(self_no_cast_643238) {
	var result_643239 = null;

	var F={procname:"typeobject.iternextPyInstanceObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(isObj(self_no_cast_643238.m_type, NTI626109))) {
		F.line = 438;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/pyobject.nim(438, 33) `selfNoCast of PyInstanceObject` "));
		}
		
		F.line = 438;
		var self_643401 = self_no_cast_643238;
		F.line = 215;
		var magic_name_str_643407 = magic_name_strs_612041[0][chckIndx(37, 0, magic_name_strs_612041[0].length+0-1)-0];
		F.line = 216;
		var fun_643409 = HEX5BHEX5D_523323(get_type_dict_617304(self_643401), magic_name_str_643407);
		F.line = 217;
		result_643239 = fast_call_599133(fun_643409, [self_643401]);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_643239;

}
py_instance_object_type_626113.magicMethods.Field0 = add_py_instance_object_magic_636163;
py_instance_object_type_626113.magicMethods.Field1 = sub_py_instance_object_magic_636236;
py_instance_object_type_626113.magicMethods.Field2 = mul_py_instance_object_magic_636436;
py_instance_object_type_626113.magicMethods.Field3 = truediv_py_instance_object_magic_636636;
py_instance_object_type_626113.magicMethods.Field4 = floordiv_py_instance_object_magic_636836;
py_instance_object_type_626113.magicMethods.Field5 = mod_py_instance_object_magic_637036;
py_instance_object_type_626113.magicMethods.Field6 = pow_py_instance_object_magic_637236;
py_instance_object_type_626113.magicMethods.Field7 = not_py_instance_object_magic_637436;
py_instance_object_type_626113.magicMethods.Field8 = negative_py_instance_object_magic_637636;
py_instance_object_type_626113.magicMethods.Field9 = positive_py_instance_object_magic_637836;
py_instance_object_type_626113.magicMethods.Field10 = abs_py_instance_object_magic_638036;
py_instance_object_type_626113.magicMethods.Field11 = index_py_instance_object_magic_638236;
py_instance_object_type_626113.magicMethods.Field12 = bool_py_instance_object_magic_638436;
py_instance_object_type_626113.magicMethods.Field13 = and_py_instance_object_magic_638636;
py_instance_object_type_626113.magicMethods.Field14 = xor_py_instance_object_magic_638836;
py_instance_object_type_626113.magicMethods.Field15 = or_py_instance_object_magic_639036;
py_instance_object_type_626113.magicMethods.Field16 = lt_py_instance_object_magic_639236;
py_instance_object_type_626113.magicMethods.Field17 = le_py_instance_object_magic_639436;
py_instance_object_type_626113.magicMethods.Field18 = eq_py_instance_object_magic_639636;
py_instance_object_type_626113.magicMethods.Field19 = ne_py_instance_object_magic_639836;
py_instance_object_type_626113.magicMethods.Field20 = gt_py_instance_object_magic_640036;
py_instance_object_type_626113.magicMethods.Field21 = ge_py_instance_object_magic_640236;
py_instance_object_type_626113.magicMethods.Field22 = contains_py_instance_object_magic_640436;
py_instance_object_type_626113.magicMethods.Field23 = len_py_instance_object_magic_640636;
py_instance_object_type_626113.magicMethods.Field24 = str_py_instance_object_magic_640836;
py_instance_object_type_626113.magicMethods.Field25 = repr_py_instance_object_magic_641036;
py_instance_object_type_626113.magicMethods.Field27 = init_py_instance_object_magic_641236;
py_instance_object_type_626113.magicMethods.Field28 = getattr_py_instance_object_magic_641447;
py_instance_object_type_626113.magicMethods.Field29 = setattr_py_instance_object_magic_641636;
py_instance_object_type_626113.magicMethods.Field30 = hash_py_instance_object_magic_641836;
py_instance_object_type_626113.magicMethods.Field31 = call_py_instance_object_magic_642036;
py_instance_object_type_626113.magicMethods.Field32 = getitem_py_instance_object_magic_642247;
py_instance_object_type_626113.magicMethods.Field33 = setitem_py_instance_object_magic_642436;
py_instance_object_type_626113.magicMethods.Field34 = get_py_instance_object_magic_642636;
py_instance_object_type_626113.magicMethods.Field35 = set_py_instance_object_magic_642836;
py_instance_object_type_626113.magicMethods.Field36 = iter_py_instance_object_magic_643036;
py_instance_object_type_626113.magicMethods.Field37 = iternext_py_instance_object_magic_643236;

function len_468684(t_468686) {
	var result_468687 = 0;

	var F={procname:"tupleobject.len",prev:framePtr,filename:"../Objects/tupleobject.nim",line:0};
	framePtr = F;
		F.line = 96;
		result_468687 = (t_468686.items != null ? t_468686.items.length : 0);
	framePtr = F.prev;

	return result_468687;

}

function new_py_type_object_magic_643921(args_643936) {
	var result_643937 = null;

	var F={procname:"typeobject.newPyTypeObjectMagic",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 438;
		if (!(((args_643936 != null ? args_643936.length : 0) == 4))) {
		F.line = 183;
		var msg_643949 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_643954 = mnewString(0);
		F.line = 185;
		if (fmt_res_643954 != null) { fmt_res_643954 = (fmt_res_643954).concat(makeNimstrLit(" argument (")); } else { fmt_res_643954 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_643954 != null) { fmt_res_643954 = (fmt_res_643954).concat(cstrToNimstr(((args_643936 != null ? args_643936.length : 0))+"")); } else { fmt_res_643954 = cstrToNimstr(((args_643936 != null ? args_643936.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_643954 != null) { fmt_res_643954 = (fmt_res_643954).concat(makeNimstrLit(" given)")); } else { fmt_res_643954 = makeNimstrLit(" given)"); };
		msg_643949 = nimCopy(null, (makeNimstrLit("New takes exactly 4")).concat(fmt_res_643954), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_644010 = mnewString(0);
			F.line = 187;
			if (fmt_res_644010 != null) { fmt_res_644010 = (fmt_res_644010).concat(makeNimstrLit(" argument (")); } else { fmt_res_644010 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_644010 != null) { fmt_res_644010 = (fmt_res_644010).concat(cstrToNimstr(((args_643936 != null ? args_643936.length : 0))+"")); } else { fmt_res_644010 = cstrToNimstr(((args_643936 != null ? args_643936.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_644010 != null) { fmt_res_644010 = (fmt_res_644010).concat(makeNimstrLit(" given)")); } else { fmt_res_644010 = makeNimstrLit(" given)"); };
			msg_643949 = nimCopy(null, (makeNimstrLit("expected 4")).concat(fmt_res_644010), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_644209 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_644209.tk = 3;
		F.line = 106;
		excp_644209.thrown = true;
		F.line = 107;
		excp_644209.msg = new_py_string_176075(msg_643949);
		result_643937 = excp_644209;
		break BeforeRet;
		}
		
		if (!(isObj(args_643936[chckIndx(0, 0, args_643936.length+0-1)-0].m_type, NTI157280))) {
		F.line = 185;
		var expected_644222 = nimCopy(null, py_type_object_type_612361.name, NTI138);
		F.line = 186;
		var got_644223 = nimCopy(null, args_643936[chckIndx(0, 0, args_643936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_644224 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_644228 = mnewString(0);
		F.line = 260;
		if (fmt_res_644228 != null) { fmt_res_644228 = (fmt_res_644228).concat(expected_644222); } else { fmt_res_644228 = expected_644222.slice(); };
		F.line = 188;
		if (fmt_res_644228 != null) { fmt_res_644228 = (fmt_res_644228).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_644228 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_644228 != null) { fmt_res_644228 = (fmt_res_644228).concat(m_name_644224); } else { fmt_res_644228 = m_name_644224.slice(); };
		F.line = 188;
		if (fmt_res_644228 != null) { fmt_res_644228 = (fmt_res_644228).concat(makeNimstrLit(" (got ")); } else { fmt_res_644228 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_644228 != null) { fmt_res_644228 = (fmt_res_644228).concat(got_644223); } else { fmt_res_644228 = got_644223.slice(); };
		F.line = 188;
		if (fmt_res_644228 != null) { fmt_res_644228 = (fmt_res_644228).concat(makeNimstrLit(")")); } else { fmt_res_644228 = makeNimstrLit(")"); };
		var msg_644802 = nimCopy(null, fmt_res_644228, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_644804 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_644804.tk = 3;
		F.line = 106;
		excp_644804.thrown = true;
		F.line = 107;
		excp_644804.msg = new_py_string_176075(msg_644802);
		result_643937 = excp_644804;
		break BeforeRet;
		}
		
		F.line = 237;
		var meta_type_644806 = args_643936[chckIndx(0, 0, args_643936.length+0-1)-0];
		if (!(isObj(args_643936[chckIndx(1, 0, args_643936.length+0-1)-0].m_type, NTI175084))) {
		F.line = 185;
		var expected_644818 = nimCopy(null, py_str_object_type_175090.name, NTI138);
		F.line = 186;
		var got_644819 = nimCopy(null, args_643936[chckIndx(1, 0, args_643936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_644820 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_644824 = mnewString(0);
		F.line = 260;
		if (fmt_res_644824 != null) { fmt_res_644824 = (fmt_res_644824).concat(expected_644818); } else { fmt_res_644824 = expected_644818.slice(); };
		F.line = 188;
		if (fmt_res_644824 != null) { fmt_res_644824 = (fmt_res_644824).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_644824 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_644824 != null) { fmt_res_644824 = (fmt_res_644824).concat(m_name_644820); } else { fmt_res_644824 = m_name_644820.slice(); };
		F.line = 188;
		if (fmt_res_644824 != null) { fmt_res_644824 = (fmt_res_644824).concat(makeNimstrLit(" (got ")); } else { fmt_res_644824 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_644824 != null) { fmt_res_644824 = (fmt_res_644824).concat(got_644819); } else { fmt_res_644824 = got_644819.slice(); };
		F.line = 188;
		if (fmt_res_644824 != null) { fmt_res_644824 = (fmt_res_644824).concat(makeNimstrLit(")")); } else { fmt_res_644824 = makeNimstrLit(")"); };
		var msg_645402 = nimCopy(null, fmt_res_644824, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_645404 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_645404.tk = 3;
		F.line = 106;
		excp_645404.thrown = true;
		F.line = 107;
		excp_645404.msg = new_py_string_176075(msg_645402);
		result_643937 = excp_645404;
		break BeforeRet;
		}
		
		F.line = 237;
		var name_645406 = args_643936[chckIndx(1, 0, args_643936.length+0-1)-0];
		if (!(isObj(args_643936[chckIndx(2, 0, args_643936.length+0-1)-0].m_type, NTI464070))) {
		F.line = 185;
		var expected_645418 = nimCopy(null, py_tuple_object_type_464080.name, NTI138);
		F.line = 186;
		var got_645419 = nimCopy(null, args_643936[chckIndx(2, 0, args_643936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_645420 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_645424 = mnewString(0);
		F.line = 260;
		if (fmt_res_645424 != null) { fmt_res_645424 = (fmt_res_645424).concat(expected_645418); } else { fmt_res_645424 = expected_645418.slice(); };
		F.line = 188;
		if (fmt_res_645424 != null) { fmt_res_645424 = (fmt_res_645424).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_645424 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_645424 != null) { fmt_res_645424 = (fmt_res_645424).concat(m_name_645420); } else { fmt_res_645424 = m_name_645420.slice(); };
		F.line = 188;
		if (fmt_res_645424 != null) { fmt_res_645424 = (fmt_res_645424).concat(makeNimstrLit(" (got ")); } else { fmt_res_645424 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_645424 != null) { fmt_res_645424 = (fmt_res_645424).concat(got_645419); } else { fmt_res_645424 = got_645419.slice(); };
		F.line = 188;
		if (fmt_res_645424 != null) { fmt_res_645424 = (fmt_res_645424).concat(makeNimstrLit(")")); } else { fmt_res_645424 = makeNimstrLit(")"); };
		var msg_646002 = nimCopy(null, fmt_res_645424, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_646004 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_646004.tk = 3;
		F.line = 106;
		excp_646004.thrown = true;
		F.line = 107;
		excp_646004.msg = new_py_string_176075(msg_646002);
		result_643937 = excp_646004;
		break BeforeRet;
		}
		
		F.line = 237;
		var bases_646006 = args_643936[chckIndx(2, 0, args_643936.length+0-1)-0];
		if (!(isObj(args_643936[chckIndx(3, 0, args_643936.length+0-1)-0].m_type, NTI521178))) {
		F.line = 185;
		var expected_646018 = nimCopy(null, pydict_object_type_521222.name, NTI138);
		F.line = 186;
		var got_646019 = nimCopy(null, args_643936[chckIndx(3, 0, args_643936.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_646020 = makeNimstrLit("New");
		F.line = 188;
		F.line = 188;
		var fmt_res_646024 = mnewString(0);
		F.line = 260;
		if (fmt_res_646024 != null) { fmt_res_646024 = (fmt_res_646024).concat(expected_646018); } else { fmt_res_646024 = expected_646018.slice(); };
		F.line = 188;
		if (fmt_res_646024 != null) { fmt_res_646024 = (fmt_res_646024).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_646024 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_646024 != null) { fmt_res_646024 = (fmt_res_646024).concat(m_name_646020); } else { fmt_res_646024 = m_name_646020.slice(); };
		F.line = 188;
		if (fmt_res_646024 != null) { fmt_res_646024 = (fmt_res_646024).concat(makeNimstrLit(" (got ")); } else { fmt_res_646024 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_646024 != null) { fmt_res_646024 = (fmt_res_646024).concat(got_646019); } else { fmt_res_646024 = got_646019.slice(); };
		F.line = 188;
		if (fmt_res_646024 != null) { fmt_res_646024 = (fmt_res_646024).concat(makeNimstrLit(")")); } else { fmt_res_646024 = makeNimstrLit(")"); };
		var msg_646602 = nimCopy(null, fmt_res_646024, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_646604 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_646604.tk = 3;
		F.line = 106;
		excp_646604.thrown = true;
		F.line = 107;
		excp_646604.msg = new_py_string_176075(msg_646602);
		result_643937 = excp_646604;
		break BeforeRet;
		}
		
		F.line = 237;
		var dict_646606 = args_643936[chckIndx(3, 0, args_643936.length+0-1)-0];
		if (!((meta_type_644806 == py_type_object_type_612361))) {
		F.line = 281;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/typeobject.nim(281, 10) `metaType == pyTypeObjectType` "));
		}
		
		if (!((len_468684(bases_646006) == 0))) {
		F.line = 282;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/typeobject.nim(282, 10) `len(bases) == 0` "));
		}
		
		F.line = 283;
		var tp_647001 = new_py_type_159261(name_645406.str);
		F.line = 284;
		tp_647001.kind = 7;
		F.line = 285;
		tp_647001.magicMethods.Field26 = new_py_instance_object_magic_627046;
		F.line = 267;
		var magic_name_str_647084 = magic_name_strs_612041[0][chckIndx(0, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647084)) {
		F.line = 269;
		tp_647001.magicMethods.Field0 = add_py_instance_object_magic_636163;
		}
		
		F.line = 267;
		var magic_name_str_647090 = magic_name_strs_612041[0][chckIndx(1, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647090)) {
		F.line = 269;
		tp_647001.magicMethods.Field1 = sub_py_instance_object_magic_636236;
		}
		
		F.line = 267;
		var magic_name_str_647096 = magic_name_strs_612041[0][chckIndx(2, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647096)) {
		F.line = 269;
		tp_647001.magicMethods.Field2 = mul_py_instance_object_magic_636436;
		}
		
		F.line = 267;
		var magic_name_str_647102 = magic_name_strs_612041[0][chckIndx(3, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647102)) {
		F.line = 269;
		tp_647001.magicMethods.Field3 = truediv_py_instance_object_magic_636636;
		}
		
		F.line = 267;
		var magic_name_str_647108 = magic_name_strs_612041[0][chckIndx(4, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647108)) {
		F.line = 269;
		tp_647001.magicMethods.Field4 = floordiv_py_instance_object_magic_636836;
		}
		
		F.line = 267;
		var magic_name_str_647114 = magic_name_strs_612041[0][chckIndx(5, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647114)) {
		F.line = 269;
		tp_647001.magicMethods.Field5 = mod_py_instance_object_magic_637036;
		}
		
		F.line = 267;
		var magic_name_str_647120 = magic_name_strs_612041[0][chckIndx(6, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647120)) {
		F.line = 269;
		tp_647001.magicMethods.Field6 = pow_py_instance_object_magic_637236;
		}
		
		F.line = 267;
		var magic_name_str_647126 = magic_name_strs_612041[0][chckIndx(7, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647126)) {
		F.line = 269;
		tp_647001.magicMethods.Field7 = not_py_instance_object_magic_637436;
		}
		
		F.line = 267;
		var magic_name_str_647132 = magic_name_strs_612041[0][chckIndx(8, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647132)) {
		F.line = 269;
		tp_647001.magicMethods.Field8 = negative_py_instance_object_magic_637636;
		}
		
		F.line = 267;
		var magic_name_str_647138 = magic_name_strs_612041[0][chckIndx(9, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647138)) {
		F.line = 269;
		tp_647001.magicMethods.Field9 = positive_py_instance_object_magic_637836;
		}
		
		F.line = 267;
		var magic_name_str_647144 = magic_name_strs_612041[0][chckIndx(10, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647144)) {
		F.line = 269;
		tp_647001.magicMethods.Field10 = abs_py_instance_object_magic_638036;
		}
		
		F.line = 267;
		var magic_name_str_647150 = magic_name_strs_612041[0][chckIndx(11, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647150)) {
		F.line = 269;
		tp_647001.magicMethods.Field11 = index_py_instance_object_magic_638236;
		}
		
		F.line = 267;
		var magic_name_str_647156 = magic_name_strs_612041[0][chckIndx(12, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647156)) {
		F.line = 269;
		tp_647001.magicMethods.Field12 = bool_py_instance_object_magic_638436;
		}
		
		F.line = 267;
		var magic_name_str_647162 = magic_name_strs_612041[0][chckIndx(13, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647162)) {
		F.line = 269;
		tp_647001.magicMethods.Field13 = and_py_instance_object_magic_638636;
		}
		
		F.line = 267;
		var magic_name_str_647168 = magic_name_strs_612041[0][chckIndx(14, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647168)) {
		F.line = 269;
		tp_647001.magicMethods.Field14 = xor_py_instance_object_magic_638836;
		}
		
		F.line = 267;
		var magic_name_str_647174 = magic_name_strs_612041[0][chckIndx(15, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647174)) {
		F.line = 269;
		tp_647001.magicMethods.Field15 = or_py_instance_object_magic_639036;
		}
		
		F.line = 267;
		var magic_name_str_647180 = magic_name_strs_612041[0][chckIndx(16, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647180)) {
		F.line = 269;
		tp_647001.magicMethods.Field16 = lt_py_instance_object_magic_639236;
		}
		
		F.line = 267;
		var magic_name_str_647186 = magic_name_strs_612041[0][chckIndx(17, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647186)) {
		F.line = 269;
		tp_647001.magicMethods.Field17 = le_py_instance_object_magic_639436;
		}
		
		F.line = 267;
		var magic_name_str_647192 = magic_name_strs_612041[0][chckIndx(18, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647192)) {
		F.line = 269;
		tp_647001.magicMethods.Field18 = eq_py_instance_object_magic_639636;
		}
		
		F.line = 267;
		var magic_name_str_647198 = magic_name_strs_612041[0][chckIndx(19, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647198)) {
		F.line = 269;
		tp_647001.magicMethods.Field19 = ne_py_instance_object_magic_639836;
		}
		
		F.line = 267;
		var magic_name_str_647204 = magic_name_strs_612041[0][chckIndx(20, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647204)) {
		F.line = 269;
		tp_647001.magicMethods.Field20 = gt_py_instance_object_magic_640036;
		}
		
		F.line = 267;
		var magic_name_str_647210 = magic_name_strs_612041[0][chckIndx(21, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647210)) {
		F.line = 269;
		tp_647001.magicMethods.Field21 = ge_py_instance_object_magic_640236;
		}
		
		F.line = 267;
		var magic_name_str_647216 = magic_name_strs_612041[0][chckIndx(22, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647216)) {
		F.line = 269;
		tp_647001.magicMethods.Field22 = contains_py_instance_object_magic_640436;
		}
		
		F.line = 267;
		var magic_name_str_647222 = magic_name_strs_612041[0][chckIndx(23, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647222)) {
		F.line = 269;
		tp_647001.magicMethods.Field23 = len_py_instance_object_magic_640636;
		}
		
		F.line = 267;
		var magic_name_str_647228 = magic_name_strs_612041[0][chckIndx(24, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647228)) {
		F.line = 269;
		tp_647001.magicMethods.Field24 = str_py_instance_object_magic_640836;
		}
		
		F.line = 267;
		var magic_name_str_647234 = magic_name_strs_612041[0][chckIndx(25, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647234)) {
		F.line = 269;
		tp_647001.magicMethods.Field25 = repr_py_instance_object_magic_641036;
		}
		
		F.line = 267;
		var magic_name_str_647240 = magic_name_strs_612041[0][chckIndx(26, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647240)) {
		F.line = 269;
		tp_647001.magicMethods.Field26 = new_py_instance_object_magic_627046;
		}
		
		F.line = 267;
		var magic_name_str_647246 = magic_name_strs_612041[0][chckIndx(27, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647246)) {
		F.line = 269;
		tp_647001.magicMethods.Field27 = init_py_instance_object_magic_641236;
		}
		
		F.line = 267;
		var magic_name_str_647252 = magic_name_strs_612041[0][chckIndx(28, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647252)) {
		F.line = 269;
		tp_647001.magicMethods.Field28 = getattr_py_instance_object_magic_641447;
		}
		
		F.line = 267;
		var magic_name_str_647258 = magic_name_strs_612041[0][chckIndx(29, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647258)) {
		F.line = 269;
		tp_647001.magicMethods.Field29 = setattr_py_instance_object_magic_641636;
		}
		
		F.line = 267;
		var magic_name_str_647264 = magic_name_strs_612041[0][chckIndx(30, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647264)) {
		F.line = 269;
		tp_647001.magicMethods.Field30 = hash_py_instance_object_magic_641836;
		}
		
		F.line = 267;
		var magic_name_str_647270 = magic_name_strs_612041[0][chckIndx(31, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647270)) {
		F.line = 269;
		tp_647001.magicMethods.Field31 = call_py_instance_object_magic_642036;
		}
		
		F.line = 267;
		var magic_name_str_647276 = magic_name_strs_612041[0][chckIndx(32, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647276)) {
		F.line = 269;
		tp_647001.magicMethods.Field32 = getitem_py_instance_object_magic_642247;
		}
		
		F.line = 267;
		var magic_name_str_647282 = magic_name_strs_612041[0][chckIndx(33, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647282)) {
		F.line = 269;
		tp_647001.magicMethods.Field33 = setitem_py_instance_object_magic_642436;
		}
		
		F.line = 267;
		var magic_name_str_647288 = magic_name_strs_612041[0][chckIndx(34, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647288)) {
		F.line = 269;
		tp_647001.magicMethods.Field34 = get_py_instance_object_magic_642636;
		}
		
		F.line = 267;
		var magic_name_str_647294 = magic_name_strs_612041[0][chckIndx(35, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647294)) {
		F.line = 269;
		tp_647001.magicMethods.Field35 = set_py_instance_object_magic_642836;
		}
		
		F.line = 267;
		var magic_name_str_647300 = magic_name_strs_612041[0][chckIndx(36, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647300)) {
		F.line = 269;
		tp_647001.magicMethods.Field36 = iter_py_instance_object_magic_643036;
		}
		
		F.line = 267;
		var magic_name_str_647306 = magic_name_strs_612041[0][chckIndx(37, 0, magic_name_strs_612041[0].length+0-1)-0];
		if (has_key_522437(dict_646606, magic_name_str_647306)) {
		F.line = 269;
		tp_647001.magicMethods.Field37 = iternext_py_instance_object_magic_643236;
		}
		
		F.line = 287;
		tp_647001.dict = copy_pydict_object_method_532009(dict_646606, []);
		F.line = 288;
		type_ready_625659(tp_647001);
		result_643937 = tp_647001;
	} while (false);
	framePtr = F.prev;

	return result_643937;

}
py_type_object_type_612361.magicMethods.Field26 = new_py_type_object_magic_643921;

function register_bltin_function_648027(name_648029, fun_648030) {
	var F={procname:"bltinmodule.registerBltinFunction",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
		F.line = 10;
		var name_str_648031 = new_py_string_176075(name_648029);
		if (!(!(has_key_522437(bltin_dict_534014, name_str_648031)))) {
		F.line = 11;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/bltinmodule.nim(11, 3) `not hasKey(bltinDict, nameStr)` "));
		}
		
		F.line = 12;
		HEX5BHEX5DHEX3D_523842(bltin_dict_534014, name_str_648031, new_py_nim_func_549444(fun_648030, name_str_648031));
	framePtr = F.prev;

	
}

function builtin_print_648482(args_648485) {
	var result_648486 = null;

	var F={procname:"bltinmodule.builtinPrint",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 68;
		L1: do {
			F.line = 68;
			var obj_648495 = null;
			F.line = 3911;
			var i_649226 = 0;
			F.line = 3912;
			var l_649228 = (args_648485 != null ? args_648485.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_649226 < l_649228)) break L3;
						F.line = 3914;
						obj_648495 = args_648485[chckIndx(i_649226, 0, args_648485.length+0-1)-0];
						F.line = 69;
						F.line = 45;
						if ((obj_648495.pyType === null)) {
						F.line = 2895;
						var e_648522 = null;
						F.line = 2896;
						e_648522 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 26;
						e_648522.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
						F.line = 2891;
						e_648522.parent = null;
						F.line = 26;
						raiseException(e_648522, "InternalError");
						}
						
						F.line = 27;
						var fun_648602 = obj_648495.pyType.magicMethods.Field24;
						if ((fun_648602 === null)) {
						F.line = 29;
						var obj_type_str_648611 = obj_648495.pyType.name;
						F.line = 30;
						var method_str_648613 = makeNimstrLit("str");
						F.line = 31;
						var msg_648615 = (makeNimstrLit("No ")).concat(method_str_648613,makeNimstrLit(" method for "),obj_type_str_648611,makeNimstrLit(" defined"));
						F.line = 32;
						F.line = 104;
						var excp_648617 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_648617.tk = 3;
						F.line = 106;
						excp_648617.thrown = true;
						F.line = 107;
						excp_648617.msg = new_py_string_176075(msg_648615);
						var excp_648620 = excp_648617;
						F.line = 36;
						result_648486 = excp_648620;
						break BeforeRet;
						}
						
						var fun_648802 = fun_648602;
						F.line = 46;
						var res_648804 = fun_648802(obj_648495);
						var obj_str_649001 = res_648804;
						if (!(of_py_str_object_175092(obj_str_649001))) {
						F.line = 157;
						var type_name_649004 = nimCopy(null, obj_str_649001.pyType.name, NTI138);
						F.line = 158;
						F.line = 158;
						var fmt_res_649007 = mnewString(0);
						F.line = 158;
						if (fmt_res_649007 != null) { fmt_res_649007 = (fmt_res_649007).concat(makeNimstrLit(" returned non-string (type ")); } else { fmt_res_649007 = makeNimstrLit(" returned non-string (type "); };
						F.line = 260;
						if (fmt_res_649007 != null) { fmt_res_649007 = (fmt_res_649007).concat(type_name_649004); } else { fmt_res_649007 = type_name_649004.slice(); };
						F.line = 158;
						if (fmt_res_649007 != null) { fmt_res_649007 = (fmt_res_649007).concat(makeNimstrLit(")")); } else { fmt_res_649007 = makeNimstrLit(")"); };
						var msg_649202 = (makeNimstrLit("__str__")).concat(fmt_res_649007);
						F.line = 159;
						F.line = 104;
						var excp_649204 = new_py_type_error_simple_360601();
						F.line = 105;
						excp_649204.tk = 3;
						F.line = 106;
						excp_649204.thrown = true;
						F.line = 107;
						excp_649204.msg = new_py_string_176075(msg_649202);
						result_648486 = excp_649204;
						break BeforeRet;
						}
						
						F.line = 14;
						rawEcho(obj_str_649001.str);
						L4: do {
							F.line = 15;
							var line_649212 = null;
							F.line = 597;
							var colontmp__649215 = null;
							F.line = 71;
							colontmp__649215 = obj_str_649001.str;
							F.line = 455;
							var last_649219 = 0;
							F.line = 456;
							var splits_649221 = -1;
							L5: do {
								F.line = 614;
									L6: while (true) {
									if (!(last_649219 <= (colontmp__649215 != null ? colontmp__649215.length : 0))) break L6;
										F.line = 459;
										var first_649223 = last_649219;
										L7: do {
											F.line = 460;
												L8: while (true) {
												if (!((last_649219 < (colontmp__649215 != null ? colontmp__649215.length : 0)) && !(substr_eq_132789(colontmp__649215, last_649219, makeNimstrLit("\x0A"))))) break L8;
													F.line = 461;
													last_649219 = addInt(last_649219, 1);
												}
										} while(false);
										if ((splits_649221 == 0)) {
										F.line = 462;
										last_649219 = (colontmp__649215 != null ? colontmp__649215.length : 0);
										}
										
										F.line = 463;
										line_649212 = substr_23422(colontmp__649215, first_649223, subInt(last_649219, 1));
										F.line = 16;
										log(" ", toJSStr(line_649212));
										if ((splits_649221 == 0)) {
										F.line = 464;
										break L5;
										}
										
										F.line = 465;
										splits_649221 = subInt(splits_649221, 1);
										F.line = 466;
										last_649219 = addInt(last_649219, 1);
									}
							} while(false);
						} while(false);
						F.line = 3915;
						i_649226 = addInt(i_649226, 1);
						if (!(((args_648485 != null ? args_648485.length : 0) == l_649228))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_648486 = py_none_356044;
	} while (false);
	framePtr = F.prev;

	return result_648486;

}

function update_533227(d1_533229, d2_533230) {
	var F={procname:"dictobject.update",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 142;
			var k_533240 = null;
			F.line = 142;
			var v_533241 = null;
			F.line = 270;
			var colontmp__533243 = {data: null, counter: 0};
			F.line = 142;
			nimCopy(colontmp__533243, d2_533230.table, NTI521188);
			L2: do {
				F.line = 272;
				var h_533247 = 0;
				F.line = 2104;
				var colontmp__533249 = 0;
				F.line = 272;
				colontmp__533249 = (colontmp__533243.data != null ? (colontmp__533243.data.length-1) : -1);
				F.line = 2107;
				var res_533251 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_533251 <= colontmp__533249)) break L4;
							F.line = 2109;
							h_533247 = res_533251;
							if (is_filled_146491(colontmp__533243.data[chckIndx(h_533247, 0, colontmp__533243.data.length+0-1)-0].Field0)) {
							F.line = 273;
							k_533240 = colontmp__533243.data[chckIndx(h_533247, 0, colontmp__533243.data.length+0-1)-0].Field1;
							F.line = 273;
							v_533241 = colontmp__533243.data[chckIndx(h_533247, 0, colontmp__533243.data.length+0-1)-0].Field2;
							F.line = 143;
							HEX5BHEX5DHEX3D_523842(d1_533229, k_533240, v_533241);
							}
							
							F.line = 2110;
							res_533251 = addInt(res_533251, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function keys_532653(d_532655) {
								var Tmp5;

	var result_532656 = null;

	var F={procname:"dictobject.keys",prev:framePtr,filename:"../Objects/dictobject.nim",line:0};
	framePtr = F;
		F.line = 134;
		result_532656 = new_py_list_506257();
		L1: do {
			F.line = 135;
			var key_533140 = null;
			F.line = 281;
			var colontmp__533203 = {data: null, counter: 0};
			F.line = 135;
			nimCopy(colontmp__533203, d_532655.table, NTI521188);
			L2: do {
				F.line = 283;
				var h_533207 = 0;
				F.line = 2104;
				var colontmp__533209 = 0;
				F.line = 283;
				colontmp__533209 = (colontmp__533203.data != null ? (colontmp__533203.data.length-1) : -1);
				F.line = 2107;
				var res_533211 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_533211 <= colontmp__533209)) break L4;
							F.line = 2109;
							h_533207 = res_533211;
							if (is_filled_146491(colontmp__533203.data[chckIndx(h_533207, 0, colontmp__533203.data.length+0-1)-0].Field0)) {
							F.line = 284;
							key_533140 = colontmp__533203.data[chckIndx(h_533207, 0, colontmp__533203.data.length+0-1)-0].Field1;
							F.line = 136;
							var reb_obj_533153 = append_py_list_object_method_508859(result_532656, [key_533140]);
								if (of_py_exception_object_358259(reb_obj_533153)) {
								Tmp5 = reb_obj_533153.thrown;
								}
								else {
								Tmp5 = false;
								}
								
							if (Tmp5) {
							F.line = 2895;
							var e_533159 = null;
							F.line = 2896;
							e_533159 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 138;
							e_533159.message = nimCopy(null, makeNimstrLit("No chance for append to thrown exception"), NTI138);
							F.line = 2891;
							e_533159.parent = null;
							F.line = 138;
							raiseException(e_533159, "InternalError");
							}
							
							}
							
							F.line = 2110;
							res_533211 = addInt(res_533211, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_532656;

}

function bltindir_649243(args_649258) {
	var result_649259 = null;

	var F={procname:"bltinmodule.bltindir",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 75;
		if (!(((args_649258 != null ? args_649258.length : 0) == 1))) {
		F.line = 183;
		var msg_649271 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_649276 = mnewString(0);
		F.line = 185;
		if (fmt_res_649276 != null) { fmt_res_649276 = (fmt_res_649276).concat(makeNimstrLit(" argument (")); } else { fmt_res_649276 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_649276 != null) { fmt_res_649276 = (fmt_res_649276).concat(cstrToNimstr(((args_649258 != null ? args_649258.length : 0))+"")); } else { fmt_res_649276 = cstrToNimstr(((args_649258 != null ? args_649258.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_649276 != null) { fmt_res_649276 = (fmt_res_649276).concat(makeNimstrLit(" given)")); } else { fmt_res_649276 = makeNimstrLit(" given)"); };
		msg_649271 = nimCopy(null, (makeNimstrLit("dir takes exactly 1")).concat(fmt_res_649276), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_649410 = mnewString(0);
			F.line = 187;
			if (fmt_res_649410 != null) { fmt_res_649410 = (fmt_res_649410).concat(makeNimstrLit(" argument (")); } else { fmt_res_649410 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_649410 != null) { fmt_res_649410 = (fmt_res_649410).concat(cstrToNimstr(((args_649258 != null ? args_649258.length : 0))+"")); } else { fmt_res_649410 = cstrToNimstr(((args_649258 != null ? args_649258.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_649410 != null) { fmt_res_649410 = (fmt_res_649410).concat(makeNimstrLit(" given)")); } else { fmt_res_649410 = makeNimstrLit(" given)"); };
			msg_649271 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_649410), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_649609 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_649609.tk = 3;
		F.line = 106;
		excp_649609.thrown = true;
		F.line = 107;
		excp_649609.msg = new_py_string_176075(msg_649271);
		result_649259 = excp_649609;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_649611 = args_649258[chckIndx(0, 0, args_649258.length+0-1)-0];
		F.line = 78;
		var merged_dict_649612 = new_py_dict_522257();
		F.line = 79;
		update_533227(merged_dict_649612, get_type_dict_617304(obj_649611));
		if (has_dict_159278(obj_649611)) {
		F.line = 81;
		update_533227(merged_dict_649612, get_dict_159307(obj_649611));
		}
		
		result_649259 = keys_532653(merged_dict_649612);
	} while (false);
	framePtr = F.prev;

	return result_649259;

}

function bltinid_649626(args_649641) {
	var result_649642 = null;

	var F={procname:"bltinmodule.bltinid",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 85;
		if (!(((args_649641 != null ? args_649641.length : 0) == 1))) {
		F.line = 183;
		var msg_649654 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_649659 = mnewString(0);
		F.line = 185;
		if (fmt_res_649659 != null) { fmt_res_649659 = (fmt_res_649659).concat(makeNimstrLit(" argument (")); } else { fmt_res_649659 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_649659 != null) { fmt_res_649659 = (fmt_res_649659).concat(cstrToNimstr(((args_649641 != null ? args_649641.length : 0))+"")); } else { fmt_res_649659 = cstrToNimstr(((args_649641 != null ? args_649641.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_649659 != null) { fmt_res_649659 = (fmt_res_649659).concat(makeNimstrLit(" given)")); } else { fmt_res_649659 = makeNimstrLit(" given)"); };
		msg_649654 = nimCopy(null, (makeNimstrLit("id takes exactly 1")).concat(fmt_res_649659), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_649810 = mnewString(0);
			F.line = 187;
			if (fmt_res_649810 != null) { fmt_res_649810 = (fmt_res_649810).concat(makeNimstrLit(" argument (")); } else { fmt_res_649810 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_649810 != null) { fmt_res_649810 = (fmt_res_649810).concat(cstrToNimstr(((args_649641 != null ? args_649641.length : 0))+"")); } else { fmt_res_649810 = cstrToNimstr(((args_649641 != null ? args_649641.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_649810 != null) { fmt_res_649810 = (fmt_res_649810).concat(makeNimstrLit(" given)")); } else { fmt_res_649810 = makeNimstrLit(" given)"); };
			msg_649654 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_649810), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_650009 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_650009.tk = 3;
		F.line = 106;
		excp_650009.thrown = true;
		F.line = 107;
		excp_650009.msg = new_py_string_176075(msg_649654);
		result_649642 = excp_650009;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_650011 = args_649641[chckIndx(0, 0, args_649641.length+0-1)-0];
		result_649642 = new_py_int_376142(id_157596(obj_650011));
	} while (false);
	framePtr = F.prev;

	return result_649642;

}

function bltinlen_650025(args_650040) {
	var result_650041 = null;

	var F={procname:"bltinmodule.bltinlen",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 88;
		if (!(((args_650040 != null ? args_650040.length : 0) == 1))) {
		F.line = 183;
		var msg_650053 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_650058 = mnewString(0);
		F.line = 185;
		if (fmt_res_650058 != null) { fmt_res_650058 = (fmt_res_650058).concat(makeNimstrLit(" argument (")); } else { fmt_res_650058 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_650058 != null) { fmt_res_650058 = (fmt_res_650058).concat(cstrToNimstr(((args_650040 != null ? args_650040.length : 0))+"")); } else { fmt_res_650058 = cstrToNimstr(((args_650040 != null ? args_650040.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_650058 != null) { fmt_res_650058 = (fmt_res_650058).concat(makeNimstrLit(" given)")); } else { fmt_res_650058 = makeNimstrLit(" given)"); };
		msg_650053 = nimCopy(null, (makeNimstrLit("len takes exactly 1")).concat(fmt_res_650058), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_650210 = mnewString(0);
			F.line = 187;
			if (fmt_res_650210 != null) { fmt_res_650210 = (fmt_res_650210).concat(makeNimstrLit(" argument (")); } else { fmt_res_650210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_650210 != null) { fmt_res_650210 = (fmt_res_650210).concat(cstrToNimstr(((args_650040 != null ? args_650040.length : 0))+"")); } else { fmt_res_650210 = cstrToNimstr(((args_650040 != null ? args_650040.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_650210 != null) { fmt_res_650210 = (fmt_res_650210).concat(makeNimstrLit(" given)")); } else { fmt_res_650210 = makeNimstrLit(" given)"); };
			msg_650053 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_650210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_650409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_650409.tk = 3;
		F.line = 106;
		excp_650409.thrown = true;
		F.line = 107;
		excp_650409.msg = new_py_string_176075(msg_650053);
		result_650041 = excp_650409;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_650411 = args_650040[chckIndx(0, 0, args_650040.length+0-1)-0];
		F.line = 45;
		if ((obj_650411.pyType === null)) {
		F.line = 2895;
		var e_650438 = null;
		F.line = 2896;
		e_650438 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_650438.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_650438.parent = null;
		F.line = 26;
		raiseException(e_650438, "InternalError");
		}
		
		F.line = 27;
		var fun_650602 = obj_650411.pyType.magicMethods.Field23;
		if ((fun_650602 === null)) {
		F.line = 29;
		var obj_type_str_650611 = obj_650411.pyType.name;
		F.line = 30;
		var method_str_650613 = makeNimstrLit("len");
		F.line = 31;
		var msg_650615 = (makeNimstrLit("No ")).concat(method_str_650613,makeNimstrLit(" method for "),obj_type_str_650611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_650617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_650617.tk = 3;
		F.line = 106;
		excp_650617.thrown = true;
		F.line = 107;
		excp_650617.msg = new_py_string_176075(msg_650615);
		var excp_650620 = excp_650617;
		F.line = 36;
		result_650041 = excp_650620;
		break BeforeRet;
		}
		
		var fun_650802 = fun_650602;
		F.line = 46;
		var res_650804 = fun_650802(obj_650411);
		result_650041 = res_650804;
	} while (false);
	framePtr = F.prev;

	return result_650041;

}

function bltiniter_651014(args_651029) {
	var result_651030 = null;

	var F={procname:"bltinmodule.bltiniter",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 92;
		if (!(((args_651029 != null ? args_651029.length : 0) == 1))) {
		F.line = 183;
		var msg_651042 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_651047 = mnewString(0);
		F.line = 185;
		if (fmt_res_651047 != null) { fmt_res_651047 = (fmt_res_651047).concat(makeNimstrLit(" argument (")); } else { fmt_res_651047 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_651047 != null) { fmt_res_651047 = (fmt_res_651047).concat(cstrToNimstr(((args_651029 != null ? args_651029.length : 0))+"")); } else { fmt_res_651047 = cstrToNimstr(((args_651029 != null ? args_651029.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_651047 != null) { fmt_res_651047 = (fmt_res_651047).concat(makeNimstrLit(" given)")); } else { fmt_res_651047 = makeNimstrLit(" given)"); };
		msg_651042 = nimCopy(null, (makeNimstrLit("iter takes exactly 1")).concat(fmt_res_651047), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_651210 = mnewString(0);
			F.line = 187;
			if (fmt_res_651210 != null) { fmt_res_651210 = (fmt_res_651210).concat(makeNimstrLit(" argument (")); } else { fmt_res_651210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_651210 != null) { fmt_res_651210 = (fmt_res_651210).concat(cstrToNimstr(((args_651029 != null ? args_651029.length : 0))+"")); } else { fmt_res_651210 = cstrToNimstr(((args_651029 != null ? args_651029.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_651210 != null) { fmt_res_651210 = (fmt_res_651210).concat(makeNimstrLit(" given)")); } else { fmt_res_651210 = makeNimstrLit(" given)"); };
			msg_651042 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_651210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_651409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_651409.tk = 3;
		F.line = 106;
		excp_651409.thrown = true;
		F.line = 107;
		excp_651409.msg = new_py_string_176075(msg_651042);
		result_651030 = excp_651409;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_651411 = args_651029[chckIndx(0, 0, args_651029.length+0-1)-0];
		F.line = 45;
		if ((obj_651411.pyType === null)) {
		F.line = 2895;
		var e_651438 = null;
		F.line = 2896;
		e_651438 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_651438.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_651438.parent = null;
		F.line = 26;
		raiseException(e_651438, "InternalError");
		}
		
		F.line = 27;
		var fun_651602 = obj_651411.pyType.magicMethods.Field36;
		if ((fun_651602 === null)) {
		F.line = 29;
		var obj_type_str_651611 = obj_651411.pyType.name;
		F.line = 30;
		var method_str_651613 = makeNimstrLit("iter");
		F.line = 31;
		var msg_651615 = (makeNimstrLit("No ")).concat(method_str_651613,makeNimstrLit(" method for "),obj_type_str_651611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_651617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_651617.tk = 3;
		F.line = 106;
		excp_651617.thrown = true;
		F.line = 107;
		excp_651617.msg = new_py_string_176075(msg_651615);
		var excp_651620 = excp_651617;
		F.line = 36;
		result_651030 = excp_651620;
		break BeforeRet;
		}
		
		var fun_651802 = fun_651602;
		F.line = 46;
		var res_651804 = fun_651802(obj_651411);
		result_651030 = res_651804;
	} while (false);
	framePtr = F.prev;

	return result_651030;

}

function bltinrepr_652014(args_652029) {
	var result_652030 = null;

	var F={procname:"bltinmodule.bltinrepr",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 94;
		if (!(((args_652029 != null ? args_652029.length : 0) == 1))) {
		F.line = 183;
		var msg_652042 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_652047 = mnewString(0);
		F.line = 185;
		if (fmt_res_652047 != null) { fmt_res_652047 = (fmt_res_652047).concat(makeNimstrLit(" argument (")); } else { fmt_res_652047 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_652047 != null) { fmt_res_652047 = (fmt_res_652047).concat(cstrToNimstr(((args_652029 != null ? args_652029.length : 0))+"")); } else { fmt_res_652047 = cstrToNimstr(((args_652029 != null ? args_652029.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_652047 != null) { fmt_res_652047 = (fmt_res_652047).concat(makeNimstrLit(" given)")); } else { fmt_res_652047 = makeNimstrLit(" given)"); };
		msg_652042 = nimCopy(null, (makeNimstrLit("repr takes exactly 1")).concat(fmt_res_652047), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_652210 = mnewString(0);
			F.line = 187;
			if (fmt_res_652210 != null) { fmt_res_652210 = (fmt_res_652210).concat(makeNimstrLit(" argument (")); } else { fmt_res_652210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_652210 != null) { fmt_res_652210 = (fmt_res_652210).concat(cstrToNimstr(((args_652029 != null ? args_652029.length : 0))+"")); } else { fmt_res_652210 = cstrToNimstr(((args_652029 != null ? args_652029.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_652210 != null) { fmt_res_652210 = (fmt_res_652210).concat(makeNimstrLit(" given)")); } else { fmt_res_652210 = makeNimstrLit(" given)"); };
			msg_652042 = nimCopy(null, (makeNimstrLit("expected 1")).concat(fmt_res_652210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_652409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_652409.tk = 3;
		F.line = 106;
		excp_652409.thrown = true;
		F.line = 107;
		excp_652409.msg = new_py_string_176075(msg_652042);
		result_652030 = excp_652409;
		break BeforeRet;
		}
		
		F.line = 230;
		var obj_652411 = args_652029[chckIndx(0, 0, args_652029.length+0-1)-0];
		F.line = 45;
		if ((obj_652411.pyType === null)) {
		F.line = 2895;
		var e_652438 = null;
		F.line = 2896;
		e_652438 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 26;
		e_652438.message = nimCopy(null, makeNimstrLit("Py type not set"), NTI138);
		F.line = 2891;
		e_652438.parent = null;
		F.line = 26;
		raiseException(e_652438, "InternalError");
		}
		
		F.line = 27;
		var fun_652602 = obj_652411.pyType.magicMethods.Field25;
		if ((fun_652602 === null)) {
		F.line = 29;
		var obj_type_str_652611 = obj_652411.pyType.name;
		F.line = 30;
		var method_str_652613 = makeNimstrLit("repr");
		F.line = 31;
		var msg_652615 = (makeNimstrLit("No ")).concat(method_str_652613,makeNimstrLit(" method for "),obj_type_str_652611,makeNimstrLit(" defined"));
		F.line = 32;
		F.line = 104;
		var excp_652617 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_652617.tk = 3;
		F.line = 106;
		excp_652617.thrown = true;
		F.line = 107;
		excp_652617.msg = new_py_string_176075(msg_652615);
		var excp_652620 = excp_652617;
		F.line = 36;
		result_652030 = excp_652620;
		break BeforeRet;
		}
		
		var fun_652802 = fun_652602;
		F.line = 46;
		var res_652804 = fun_652802(obj_652411);
		result_652030 = res_652804;
	} while (false);
	framePtr = F.prev;

	return result_652030;

}

function new_py_frame_551047(fun_551049) {
			var Tmp1;

	var result_583004 = null;

	var F={procname:"neval.newPyFrame",prev:framePtr,filename:"neval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 636;
		var obj_583019 = new_py_frame_551050(fun_551049, [], null);
			if (of_py_exception_object_358259(obj_583019)) {
			Tmp1 = obj_583019.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 2895;
		var e_583025 = null;
		F.line = 2896;
		e_583025 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 25;
		e_583025.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_583025.parent = null;
		F.line = 638;
		raiseException(e_583025, "InternalError");
		}
		else {
			F.line = 640;
			result_583004 = obj_583019;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_583004;

}

function HEX5BHEX5D_538234(s_538241, x_538244) {
	var result_538246 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_538401 = x_538244.a;
		F.line = 3707;
		var l_538601 = addInt(subInt(x_538244.b, a_538401), 1);
		F.line = 3708;
		result_538246 = new Array(chckRange(l_538601, 0, 2147483647)); for (var i=0;i<chckRange(l_538601, 0, 2147483647);++i) {result_538246[i]=null;}		L1: do {
			F.line = 3709;
			var i_538621 = 0;
			F.line = 3617;
			var i_538629 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_538629 < l_538601)) break L3;
						F.line = 3619;
						i_538621 = i_538629;
						F.line = 3709;
						result_538246[chckIndx(i_538621, 0, result_538246.length+0-1)-0] = s_538241[chckIndx(addInt(i_538621, a_538401), 0, s_538241.length+0-1)-0];
						F.line = 3620;
						i_538629 = addInt(i_538629, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_538246;

}

function HEX5BHEX5D_538832(s_538839, x_538842) {
	var result_538844 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_539001 = x_538842.a;
		F.line = 3707;
		var l_539207 = addInt(subInt(subInt((s_538839 != null ? s_538839.length : 0), x_538842.b), a_539001), 1);
		F.line = 3708;
		result_538844 = new Array(chckRange(l_539207, 0, 2147483647)); for (var i=0;i<chckRange(l_539207, 0, 2147483647);++i) {result_538844[i]=null;}		L1: do {
			F.line = 3709;
			var i_539227 = 0;
			F.line = 3617;
			var i_539235 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_539235 < l_539207)) break L3;
						F.line = 3619;
						i_539227 = i_539235;
						F.line = 3709;
						result_538844[chckIndx(i_539227, 0, result_538844.length+0-1)-0] = s_538839[chckIndx(addInt(i_539227, a_539001), 0, s_538839.length+0-1)-0];
						F.line = 3620;
						i_539235 = addInt(i_539235, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_538844;

}

function to_py_dict_538073(f_538075) {
	var result_538076 = null;

	var F={procname:"frameobject.toPyDict",prev:framePtr,filename:"../Objects/frameobject.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_538076 = new_py_dict_522257();
		F.line = 29;
		var c_538077 = f_538075.code;
		L1: do {
			F.line = 30;
			var idx_538091 = 0;
			F.line = 30;
			var v_538092 = null;
			F.line = 2352;
			var colontmp__539410 = null;
			F.line = 30;
			colontmp__539410 = f_538075.fastLocals;
			F.line = 2354;
			var i_539413 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_539413 < (colontmp__539410 != null ? colontmp__539410.length : 0))) break L3;
						F.line = 2356;
						idx_538091 = i_539413;
						F.line = 2356;
						v_538092 = colontmp__539410[chckIndx(i_539413, 0, colontmp__539410.length+0-1)-0];
						L4: do {
							if ((v_538092 === null)) {
							F.line = 32;
							break L4;
							}
							
							F.line = 33;
							HEX5BHEX5DHEX3D_523842(result_538076, c_538077.localVars[chckIndx(idx_538091, 0, c_538077.localVars.length+0-1)-0], v_538092);
						} while(false);
						F.line = 2357;
						i_539413 = addInt(i_539413, 1);
					}
			} while(false);
		} while(false);
		F.line = 34;
		var n_538107 = (c_538077.cellVars != null ? c_538077.cellVars.length : 0);
		L5: do {
			F.line = 35;
			var idx_538690 = 0;
			F.line = 35;
			var cell_538691 = null;
			F.line = 2352;
			var colontmp__539416 = null;
			F.line = 35;
			colontmp__539416 = HEX5BHEX5D_538234(f_538075.cellVars, HEX2EHEX2E_48828(0, subInt(n_538107, 1)));
			F.line = 2354;
			var i_539419 = 0;
			L6: do {
				F.line = 2355;
					L7: while (true) {
					if (!(i_539419 < (colontmp__539416 != null ? colontmp__539416.length : 0))) break L7;
						F.line = 2356;
						idx_538690 = i_539419;
						F.line = 2356;
						cell_538691 = colontmp__539416[chckIndx(i_539419, 0, colontmp__539416.length+0-1)-0];
						L8: do {
							if (!(!((cell_538691 === null)))) {
							F.line = 36;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/frameobject.nim(36, 5) `not isNil(cell)` "));
							}
							
							if ((cell_538691.refObj === null)) {
							F.line = 38;
							break L8;
							}
							
							F.line = 39;
							HEX5BHEX5DHEX3D_523842(result_538076, c_538077.cellVars[chckIndx(idx_538690, 0, c_538077.cellVars.length+0-1)-0], cell_538691.refObj);
						} while(false);
						F.line = 2357;
						i_539419 = addInt(i_539419, 1);
					}
			} while(false);
		} while(false);
		L9: do {
			F.line = 40;
			var idx_539263 = 0;
			F.line = 40;
			var cell_539264 = null;
			F.line = 2352;
			var colontmp__539423 = null;
			F.line = 40;
			colontmp__539423 = HEX5BHEX5D_538832(f_538075.cellVars, HEX2EHEX2E_81053(n_538107, 1));
			F.line = 2354;
			var i_539426 = 0;
			L10: do {
				F.line = 2355;
					L11: while (true) {
					if (!(i_539426 < (colontmp__539423 != null ? colontmp__539423.length : 0))) break L11;
						F.line = 2356;
						idx_539263 = i_539426;
						F.line = 2356;
						cell_539264 = colontmp__539423[chckIndx(i_539426, 0, colontmp__539423.length+0-1)-0];
						L12: do {
							if (!(!((cell_539264 === null)))) {
							F.line = 41;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Objects/frameobject.nim(41, 5) `not isNil(cell)` "));
							}
							
							if ((cell_539264.refObj === null)) {
							F.line = 43;
							break L12;
							}
							
							F.line = 44;
							HEX5BHEX5DHEX3D_523842(result_538076, c_538077.freeVars[chckIndx(idx_539263, 0, c_538077.freeVars.length+0-1)-0], cell_539264.refObj);
						} while(false);
						F.line = 2357;
						i_539426 = addInt(i_539426, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_538076;

}

function bltinbuild_class_653018(args_653033) {
			var Tmp1;
			var Tmp2;

	var result_653034 = null;

	var F={procname:"bltinmodule.bltinbuildClass",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 96;
		if (!(((args_653033 != null ? args_653033.length : 0) == 2))) {
		F.line = 183;
		var msg_653046 = null;
		if (true) {
		F.line = 185;
		F.line = 185;
		var fmt_res_653051 = mnewString(0);
		F.line = 185;
		if (fmt_res_653051 != null) { fmt_res_653051 = (fmt_res_653051).concat(makeNimstrLit(" argument (")); } else { fmt_res_653051 = makeNimstrLit(" argument ("); };
		F.line = 270;
		if (fmt_res_653051 != null) { fmt_res_653051 = (fmt_res_653051).concat(cstrToNimstr(((args_653033 != null ? args_653033.length : 0))+"")); } else { fmt_res_653051 = cstrToNimstr(((args_653033 != null ? args_653033.length : 0))+"").slice(); };
		F.line = 185;
		if (fmt_res_653051 != null) { fmt_res_653051 = (fmt_res_653051).concat(makeNimstrLit(" given)")); } else { fmt_res_653051 = makeNimstrLit(" given)"); };
		msg_653046 = nimCopy(null, (makeNimstrLit("buildClass takes exactly 2")).concat(fmt_res_653051), NTI138);
		}
		else {
			F.line = 187;
			F.line = 187;
			var fmt_res_653210 = mnewString(0);
			F.line = 187;
			if (fmt_res_653210 != null) { fmt_res_653210 = (fmt_res_653210).concat(makeNimstrLit(" argument (")); } else { fmt_res_653210 = makeNimstrLit(" argument ("); };
			F.line = 270;
			if (fmt_res_653210 != null) { fmt_res_653210 = (fmt_res_653210).concat(cstrToNimstr(((args_653033 != null ? args_653033.length : 0))+"")); } else { fmt_res_653210 = cstrToNimstr(((args_653033 != null ? args_653033.length : 0))+"").slice(); };
			F.line = 187;
			if (fmt_res_653210 != null) { fmt_res_653210 = (fmt_res_653210).concat(makeNimstrLit(" given)")); } else { fmt_res_653210 = makeNimstrLit(" given)"); };
			msg_653046 = nimCopy(null, (makeNimstrLit("expected 2")).concat(fmt_res_653210), NTI138);
		}
		
		F.line = 188;
		F.line = 104;
		var excp_653409 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_653409.tk = 3;
		F.line = 106;
		excp_653409.thrown = true;
		F.line = 107;
		excp_653409.msg = new_py_string_176075(msg_653046);
		result_653034 = excp_653409;
		break BeforeRet;
		}
		
		if (!(isObj(args_653033[chckIndx(0, 0, args_653033.length+0-1)-0].m_type, NTI540123))) {
		F.line = 185;
		var expected_653422 = nimCopy(null, py_function_object_type_540135.name, NTI138);
		F.line = 186;
		var got_653423 = nimCopy(null, args_653033[chckIndx(0, 0, args_653033.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_653424 = makeNimstrLit("buildClass");
		F.line = 188;
		F.line = 188;
		var fmt_res_653428 = mnewString(0);
		F.line = 260;
		if (fmt_res_653428 != null) { fmt_res_653428 = (fmt_res_653428).concat(expected_653422); } else { fmt_res_653428 = expected_653422.slice(); };
		F.line = 188;
		if (fmt_res_653428 != null) { fmt_res_653428 = (fmt_res_653428).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_653428 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_653428 != null) { fmt_res_653428 = (fmt_res_653428).concat(m_name_653424); } else { fmt_res_653428 = m_name_653424.slice(); };
		F.line = 188;
		if (fmt_res_653428 != null) { fmt_res_653428 = (fmt_res_653428).concat(makeNimstrLit(" (got ")); } else { fmt_res_653428 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_653428 != null) { fmt_res_653428 = (fmt_res_653428).concat(got_653423); } else { fmt_res_653428 = got_653423.slice(); };
		F.line = 188;
		if (fmt_res_653428 != null) { fmt_res_653428 = (fmt_res_653428).concat(makeNimstrLit(")")); } else { fmt_res_653428 = makeNimstrLit(")"); };
		var msg_654002 = nimCopy(null, fmt_res_653428, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_654004 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_654004.tk = 3;
		F.line = 106;
		excp_654004.thrown = true;
		F.line = 107;
		excp_654004.msg = new_py_string_176075(msg_654002);
		result_653034 = excp_654004;
		break BeforeRet;
		}
		
		F.line = 237;
		var func_obj_654006 = args_653033[chckIndx(0, 0, args_653033.length+0-1)-0];
		if (!(isObj(args_653033[chckIndx(1, 0, args_653033.length+0-1)-0].m_type, NTI175084))) {
		F.line = 185;
		var expected_654018 = nimCopy(null, py_str_object_type_175090.name, NTI138);
		F.line = 186;
		var got_654019 = nimCopy(null, args_653033[chckIndx(1, 0, args_653033.length+0-1)-0].pyType.name, NTI138);
		F.line = 187;
		var m_name_654020 = makeNimstrLit("buildClass");
		F.line = 188;
		F.line = 188;
		var fmt_res_654024 = mnewString(0);
		F.line = 260;
		if (fmt_res_654024 != null) { fmt_res_654024 = (fmt_res_654024).concat(expected_654018); } else { fmt_res_654024 = expected_654018.slice(); };
		F.line = 188;
		if (fmt_res_654024 != null) { fmt_res_654024 = (fmt_res_654024).concat(makeNimstrLit(" is requred for ")); } else { fmt_res_654024 = makeNimstrLit(" is requred for "); };
		F.line = 260;
		if (fmt_res_654024 != null) { fmt_res_654024 = (fmt_res_654024).concat(m_name_654020); } else { fmt_res_654024 = m_name_654020.slice(); };
		F.line = 188;
		if (fmt_res_654024 != null) { fmt_res_654024 = (fmt_res_654024).concat(makeNimstrLit(" (got ")); } else { fmt_res_654024 = makeNimstrLit(" (got "); };
		F.line = 260;
		if (fmt_res_654024 != null) { fmt_res_654024 = (fmt_res_654024).concat(got_654019); } else { fmt_res_654024 = got_654019.slice(); };
		F.line = 188;
		if (fmt_res_654024 != null) { fmt_res_654024 = (fmt_res_654024).concat(makeNimstrLit(")")); } else { fmt_res_654024 = makeNimstrLit(")"); };
		var msg_654602 = nimCopy(null, fmt_res_654024, NTI138);
		F.line = 189;
		F.line = 104;
		var excp_654604 = new_py_type_error_simple_360601();
		F.line = 105;
		excp_654604.tk = 3;
		F.line = 106;
		excp_654604.thrown = true;
		F.line = 107;
		excp_654604.msg = new_py_string_176075(msg_654602);
		result_653034 = excp_654604;
		break BeforeRet;
		}
		
		F.line = 237;
		var name_654606 = args_653033[chckIndx(1, 0, args_653033.length+0-1)-0];
		F.line = 98;
		var f_654607 = new_py_frame_551047(func_obj_654006);
			if (of_py_exception_object_358259(f_654607)) {
			Tmp1 = f_654607.thrown;
			}
			else {
			Tmp1 = false;
			}
			
		if (Tmp1) {
		F.line = 2895;
		var e_654613 = null;
		F.line = 2896;
		e_654613 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 100;
		e_654613.message = nimCopy(null, makeNimstrLit("funcObj shouldn\'t have any arg issue"), NTI138);
		F.line = 2891;
		e_654613.parent = null;
		F.line = 100;
		raiseException(e_654613, "InternalError");
		}
		
		F.line = 101;
		var ret_obj_654801 = eval_frame_551056(f_654607);
			if (of_py_exception_object_358259(ret_obj_654801)) {
			Tmp2 = ret_obj_654801.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 103;
		result_653034 = ret_obj_654801;
		break BeforeRet;
		}
		
		result_653034 = new_py_type_object_magic_643921([py_type_object_type_612361, name_654606, new_py_tuple_465057([]), to_py_dict_538073(f_654607)]);
	} while (false);
	framePtr = F.prev;

	return result_653034;

}

function register_bltin_object_648214(name_648216, obj_648217) {
	var F={procname:"bltinmodule.registerBltinObject",prev:framePtr,filename:"bltinmodule.nim",line:0};
	framePtr = F;
		F.line = 16;
		var name_str_648218 = new_py_string_176075(name_648216);
		if (!(!(has_key_522437(bltin_dict_534014, name_str_648218)))) {
		F.line = 17;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/bltinmodule.nim(17, 3) `not hasKey(bltinDict, nameStr)` "));
		}
		
		F.line = 18;
		HEX5BHEX5DHEX3D_523842(bltin_dict_534014, name_str_648218, obj_648217);
	framePtr = F.prev;

	
}
register_bltin_function_648027(makeNimstrLit("print"), builtin_print_648482);
register_bltin_function_648027(makeNimstrLit("dir"), bltindir_649243);
register_bltin_function_648027(makeNimstrLit("id"), bltinid_649626);
register_bltin_function_648027(makeNimstrLit("len"), bltinlen_650025);
register_bltin_function_648027(makeNimstrLit("iter"), bltiniter_651014);
register_bltin_function_648027(makeNimstrLit("repr"), bltinrepr_652014);
register_bltin_function_648027(makeNimstrLit("__build_class__"), bltinbuild_class_653018);
register_bltin_object_648214(makeNimstrLit("None"), py_none_356044);
register_bltin_object_648214(makeNimstrLit("type"), py_type_object_type_612361);
register_bltin_object_648214(makeNimstrLit("range"), py_range_object_type_588202);
register_bltin_object_648214(makeNimstrLit("list"), py_list_object_type_505269);
register_bltin_object_648214(makeNimstrLit("tuple"), py_tuple_object_type_464080);
register_bltin_object_648214(makeNimstrLit("dict"), pydict_object_type_521222);
register_bltin_object_648214(makeNimstrLit("int"), py_int_object_type_374115);
register_bltin_object_648214(makeNimstrLit("str"), py_str_object_type_175090);
register_bltin_object_648214(makeNimstrLit("property"), py_property_object_type_604310);
register_bltin_object_648214(makeNimstrLit("NameError"), py_name_error_object_type_358419);
register_bltin_object_648214(makeNimstrLit("NotImplementedError"), py_not_implemented_error_object_type_359505);
register_bltin_object_648214(makeNimstrLit("TypeError"), py_type_error_object_type_360505);
register_bltin_object_648214(makeNimstrLit("AttributeError"), py_attribute_error_object_type_361505);
register_bltin_object_648214(makeNimstrLit("ValueError"), py_value_error_object_type_362505);
register_bltin_object_648214(makeNimstrLit("IndexError"), py_index_error_object_type_363505);
register_bltin_object_648214(makeNimstrLit("StopIterError"), py_stop_iter_error_object_type_364505);
register_bltin_object_648214(makeNimstrLit("LockError"), py_lock_error_object_type_365505);
register_bltin_object_648214(makeNimstrLit("ImportError"), py_import_error_object_type_366505);
register_bltin_object_648214(makeNimstrLit("UnboundLocalError"), py_unbound_local_error_object_type_367505);
register_bltin_object_648214(makeNimstrLit("KeyError"), py_key_error_object_type_368505);
register_bltin_object_648214(makeNimstrLit("AssertionError"), py_assertion_error_object_type_369505);
register_bltin_object_648214(makeNimstrLit("ZeroDivisionError"), py_zero_division_error_object_type_370505);
register_bltin_object_648214(makeNimstrLit("RuntimeError"), py_runtime_error_object_type_371505);
register_bltin_object_648214(makeNimstrLit("SyntaxError"), py_syntax_error_object_type_372505);

function new_lexer_345814(file_name_345816) {
	var result_345817 = null;

	var F={procname:"lexer.newLexer",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_345817 = {indentLevel: 0, lineNo: 0, tokenNodes: null, fileName: null};
		F.line = 78;
		result_345817.fileName = nimCopy(null, file_name_345816, NTI138);
	framePtr = F.prev;

	return result_345817;

}
var finished_657053 = [true];
var root_cst_657054 = [null];
var lexer_inst_657055 = new_lexer_345814(makeNimstrLit("<stdin>"));
var prev_f_657056 = [null];

function clear_indent_345872(lexer_345874) {
	var F={procname:"lexer.clearIndent",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 87;
		lexer_345874.indentLevel = 0;
	framePtr = F.prev;

	
}

function add_345888(lexer_345890, token_345891) {
	var F={procname:"lexer.add",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 90;
		if (lexer_345890.tokenNodes != null) { lexer_345890.tokenNodes.push(token_345891); } else { lexer_345890.tokenNodes = [token_345891]; };
	framePtr = F.prev;

	
}

function contains_344163(s_344168, key_344170) {
	var result_344171 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_195940(s_344168))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_344401 = [0];
		F.line = 217;
		var index_344432 = raw_get_196221(s_344168, key_344170, hc_344401, 0);
		F.line = 218;
		result_344171 = (0 <= index_344432);
	framePtr = F.prev;

	return result_344171;

}

function new_token_node_343922(token_343924, line_no_343926, col_no_343929, content_343931) {
			var Tmp1;
		var Tmp3;

	var result_343932 = null;

	var F={procname:"lexer.newTokenNode",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 53;
		result_343932 = {token: 0, lineNo: 0, colNo: 0, content: null};
			if (!(token_343924 == 2)) Tmp1 = false; else {				Tmp1 = contains_344163({data: nimCopy(null, [{Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3391160197, Field1: makeNimstrLit("not")}, {Field0: 0, Field1: []}, {Field0: 3200026375, Field1: makeNimstrLit("if")}, {Field0: 0, Field1: []}, {Field0: 1504406153, Field1: makeNimstrLit("True")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1663863439, Field1: makeNimstrLit("break")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3819243934, Field1: makeNimstrLit("with")}, {Field0: 1810735390, Field1: makeNimstrLit("and")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 2881025954, Field1: makeNimstrLit("lambda")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1910074662, Field1: makeNimstrLit("is")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3320302635, Field1: makeNimstrLit("def")}, {Field0: 374286251, Field1: makeNimstrLit("from")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3787514417, Field1: makeNimstrLit("pass")}, {Field0: 136958130, Field1: makeNimstrLit("del")}, {Field0: 0, Field1: []}, {Field0: 3932829108, Field1: makeNimstrLit("False")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 51944888, Field1: makeNimstrLit("finally")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1898487227, Field1: makeNimstrLit("try")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3262150978, Field1: makeNimstrLit("assert")}, {Field0: 2073646403, Field1: makeNimstrLit("async")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3248289094, Field1: makeNimstrLit("yield")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 4019478986, Field1: makeNimstrLit("or")}, {Field0: 1298113611, Field1: makeNimstrLit("in")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1640121937, Field1: makeNimstrLit("None")}, {Field0: 0, Field1: []}, {Field0: 3238048723, Field1: makeNimstrLit("for")}, {Field0: 0, Field1: []}, {Field0: 231505621, Field1: makeNimstrLit("raise")}, {Field0: 3304227413, Field1: makeNimstrLit("nonlocal")}, {Field0: 2733697493, Field1: makeNimstrLit("else")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 810372829, Field1: makeNimstrLit("continue")}, {Field0: 3831236573, Field1: makeNimstrLit("class")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 2568571629, Field1: makeNimstrLit("except")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 3054556913, Field1: makeNimstrLit("elif")}, {Field0: 3684180594, Field1: makeNimstrLit("global")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 447930615, Field1: makeNimstrLit("return")}, {Field0: 1878035063, Field1: makeNimstrLit("import")}, {Field0: 1977490809, Field1: makeNimstrLit("while")}, {Field0: 435603066, Field1: makeNimstrLit("as")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 2622086525, Field1: makeNimstrLit("await")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}], NTI195495), counter: 35}, content_343931);			}		if (Tmp1) {
		F.line = 55;
++excHandler;
		try {
		F.line = 56;
		result_343932.token = (Tmp3 = HEX5BHEX5D_212903(str_token_map_208604, content_343931), Tmp3[0])[Tmp3[1]];
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI3854))) {
		F.line = 2895;
		var e_344726 = null;
		F.line = 2896;
		e_344726 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 25;
		e_344726.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_344726.parent = null;
		F.line = 58;
		raiseException(e_344726, "InternalError");
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		}
		else {
			F.line = 60;
			result_343932.token = token_343924;
			F.line = 61;
			switch (token_343924) {
			case 2:
			case 3:
			case 4:
				if (!(!(eqStrings(content_343931, [])))) {
				F.line = 63;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(63, 14) `\x0Anot (content == \"\")` "));
				}
				
				F.line = 64;
				result_343932.content = nimCopy(null, content_343931, NTI138);
				break;
			default: 
				if (!(eqStrings(content_343931, []))) {
				F.line = 66;
				failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(66, 14) `content == \"\"` "));
				}
				
				break;
			}
		}
		
		if (!(!((result_343932.token == 0)))) {
		F.line = 67;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(67, 10) `\x0Anot (result.token == NULLTOKEN)` "));
		}
		
		if (is_terminator_203174(result_343932.token)) {
		if (!(((-1 < line_no_343926) && (-1 < col_no_343929)))) {
		F.line = 69;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(69, 12) `-1 < lineNo and -1 < colNo` "));
		}
		
		F.line = 70;
		result_343932.lineNo = line_no_343926;
		F.line = 71;
		result_343932.colNo = col_no_343929;
		}
		else {
			if (!(((line_no_343926 < 0) && (col_no_343929 < 0)))) {
			F.line = 73;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(73, 12) `lineNo < 0 and colNo < 0` "));
			}
			
		}
		
	framePtr = F.prev;

	return result_343932;

}

function add_345915(lexer_345917, token_345918, col_no_345919) {
	var F={procname:"lexer.add",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		if (!(is_terminator_203174(token_345918))) {
		F.line = 93;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(93, 10) `isTerminator(token)` "));
		}
		
		F.line = 94;
		add_345888(lexer_345917, new_token_node_343922(token_345918, lexer_345917.lineNo, col_no_345919, []));
	framePtr = F.prev;

	
}

function dedent_all_346014(lexer_346016) {
	var F={procname:"lexer.dedentAll",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 98;
				L2: while (true) {
				if (!!((lexer_346016.indentLevel == 0))) break L2;
					F.line = 99;
					add_345915(lexer_346016, 7, mulInt(lexer_346016.indentLevel, 4));
					F.line = 100;
					lexer_346016.indentLevel = subInt(lexer_346016.indentLevel, 1);
				}
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_337400(t_337405, key_337407, hc_337409, hc_337409_Idx) {
						var Tmp3;

	var result_337410 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_337409[hc_337409_Idx] = hash_143900(key_337407);
		if ((hc_337409[hc_337409_Idx] == 0)) {
		F.line = 45;
		hc_337409[hc_337409_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_337422 = (hc_337409[hc_337409_Idx] & (t_337405.data != null ? (t_337405.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_337405.data[chckIndx(h_337422, 0, t_337405.data.length+0-1)-0].Field0)) break L2;
						if (!(t_337405.data[chckIndx(h_337422, 0, t_337405.data.length+0-1)-0].Field0 == hc_337409[hc_337409_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_337405.data[chckIndx(h_337422, 0, t_337405.data.length+0-1)-0].Field1, key_337407);						}					if (Tmp3) {
					F.line = 38;
					result_337410 = h_337422;
					break BeforeRet;
					}
					
					F.line = 39;
					h_337422 = next_try_146614(h_337422, (t_337405.data != null ? (t_337405.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_337410 = subInt(-1, h_337422);
	} while (false);
	framePtr = F.prev;

	return result_337410;

}

function has_key_337388(t_337394, key_337396) {
	var result_337397 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_337398 = [0];
		F.line = 264;
		result_337397 = (0 <= raw_get_337400(t_337394, key_337396, hc_337398, 0));
	framePtr = F.prev;

	return result_337397;

}

function raw_insert_340416(t_340423, data_340427, data_340427_Idx, key_340429, val_340431, hc_340433, h_340435) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_340427[data_340427_Idx][chckIndx(h_340435, 0, data_340427[data_340427_Idx].length+0-1)-0].Field1 = nimCopy(null, key_340429, NTI138);
		F.line = 65;
		data_340427[data_340427_Idx][chckIndx(h_340435, 0, data_340427[data_340427_Idx].length+0-1)-0].Field2 = val_340431;
		F.line = 66;
		data_340427[data_340427_Idx][chckIndx(h_340435, 0, data_340427[data_340427_Idx].length+0-1)-0].Field0 = hc_340433;
	framePtr = F.prev;

	
}

function enlarge_339028(t_339035) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_339043 = null;
		F.line = 314;
		n_339043 = new Array(chckRange(mulInt((t_339035.data != null ? t_339035.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_339035.data != null ? t_339035.data.length : 0), 2), 0, 2147483647);++i) {n_339043[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_339035.data; t_339035.data = n_339043; n_339043 = Tmp1;		L2: do {
			F.line = 316;
			var i_339314 = 0;
			F.line = 2088;
			var colontmp__341253 = 0;
			F.line = 316;
			colontmp__341253 = (n_339043 != null ? (n_339043.length-1) : -1);
			F.line = 2094;
			var res_341256 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_341256 <= colontmp__341253)) break L4;
						F.line = 2096;
						i_339314 = res_341256;
						F.line = 317;
						var eh_339582 = n_339043[chckIndx(i_339314, 0, n_339043.length+0-1)-0].Field0;
						if (is_filled_146491(eh_339582)) {
						F.line = 319;
						var j_339591 = (eh_339582 & (t_339035.data != null ? (t_339035.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_339035.data[chckIndx(j_339591, 0, t_339035.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_339591 = next_try_146614(j_339591, (t_339035.data != null ? (t_339035.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_340416(t_339035, t_339035, "data", n_339043[chckIndx(i_339314, 0, n_339043.length+0-1)-0].Field1, n_339043[chckIndx(i_339314, 0, n_339043.length+0-1)-0].Field2, eh_339582, j_339591);
						}
						
						F.line = 2097;
						res_341256 = addInt(res_341256, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_341274(t_341279, key_341281, hc_341283) {
	var result_341284 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_341293 = (hc_341283 & (t_341279.data != null ? (t_341279.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_341279.data[chckIndx(h_341293, 0, t_341279.data.length+0-1)-0].Field0)) break L2;
					if (((t_341279.data[chckIndx(h_341293, 0, t_341279.data.length+0-1)-0].Field0 == hc_341283) && eqStrings(t_341279.data[chckIndx(h_341293, 0, t_341279.data.length+0-1)-0].Field1, key_341281))) {
					F.line = 38;
					result_341284 = h_341293;
					break BeforeRet;
					}
					
					F.line = 39;
					h_341293 = next_try_146614(h_341293, (t_341279.data != null ? (t_341279.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_341284 = subInt(-1, h_341293);
	} while (false);
	framePtr = F.prev;

	return result_341284;

}

function HEX5BHEX5DHEX3D_338481(t_338488, key_338490, val_338492) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_338493 = [0];
		F.line = 98;
		var index_338506 = raw_get_337400(t_338488, key_338490, hc_338493, 0);
		if ((0 <= index_338506)) {
		F.line = 99;
		t_338488.data[chckIndx(index_338506, 0, t_338488.data.length+0-1)-0].Field2 = val_338492;
		}
		else {
			if (must_rehash_146509((t_338488.data != null ? t_338488.data.length : 0), t_338488.counter)) {
			F.line = 90;
			enlarge_339028(t_338488);
			F.line = 91;
			index_338506 = raw_get_known_hc_341274(t_338488, key_338490, hc_338493[0]);
			}
			
			F.line = 92;
			index_338506 = subInt(-1, index_338506);
			F.line = 93;
			raw_insert_340416(t_338488, t_338488, "data", key_338490, val_338492, hc_338493[0], index_338506);
			F.line = 100;
			t_338488.counter = addInt(t_338488.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function new_338370() {
	var result_338375 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_338401 = null;
		F.line = 211;
		r_338401 = {lines: null};
		F.line = 212;
		result_338375 = r_338401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_338375;

}

function HEX5BHEX5D_342444(t_342451, key_342453) {
	var result_342455 = [null, 0];
	var result_342455_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_342457 = [0];
		F.line = 161;
		var index_342471 = raw_get_337400(t_342451, key_342453, hc_342457, 0);
		if ((0 <= index_342471)) {
		F.line = 162;
		result_342455 = t_342451.data[chckIndx(index_342471, 0, t_342451.data.length+0-1)-0]; result_342455_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_342807 = null;
			F.line = 2896;
			e_342807 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_342807.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(key_342453), NTI138);
			F.line = 2891;
			e_342807.parent = null;
			F.line = 165;
			raiseException(e_342807, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_342455, result_342455_Idx];

}

function add_source_337238(file_path_337240, content_337241) {
		var Tmp1;

	var F={procname:"lexer.addSource",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		if (!(has_key_337388(source_files_337224[0], file_path_337240))) {
		F.line = 33;
		HEX5BHEX5DHEX3D_338481(source_files_337224[0], file_path_337240, new_338370());
		}
		
		F.line = 34;
		var s_342830 = (Tmp1 = HEX5BHEX5D_342444(source_files_337224[0], file_path_337240), Tmp1[0])[Tmp1[1]];
		L2: do {
			F.line = 23;
			var item_342843 = null;
			F.line = 3909;
			var colontmp__342856 = null;
			F.line = 36;
			colontmp__342856 = nsuSplitString(content_337241, makeNimstrLit("\x0A"), -1);
			F.line = 3911;
			var i_342859 = 0;
			F.line = 3912;
			var l_342861 = (colontmp__342856 != null ? colontmp__342856.length : 0);
			L3: do {
				F.line = 3913;
					L4: while (true) {
					if (!(i_342859 < l_342861)) break L4;
						F.line = 3914;
						item_342843 = colontmp__342856[chckIndx(i_342859, 0, colontmp__342856.length+0-1)-0];
						F.line = 24;
						var Tmp5 = nimCopy(null, item_342843, NTI138);
						if (s_342830.lines != null) { s_342830.lines.push(Tmp5); } else { s_342830.lines = [Tmp5]; };
						F.line = 3915;
						i_342859 = addInt(i_342859, 1);
						if (!(((colontmp__342856 != null ? colontmp__342856.length : 0) == l_342861))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function nsuInitSkipTable(a_136262, sub_136263) {
		var m_136264 = (sub_136263 != null ? sub_136263.length : 0);
		var i_136266 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_136266 <= 248)) break L2;
					a_136262[(i_136266 + 0)] = m_136264;
					a_136262[(i_136266 + 1)] = m_136264;
					a_136262[(i_136266 + 2)] = m_136264;
					a_136262[(i_136266 + 3)] = m_136264;
					a_136262[(i_136266 + 4)] = m_136264;
					a_136262[(i_136266 + 5)] = m_136264;
					a_136262[(i_136266 + 6)] = m_136264;
					a_136262[(i_136266 + 7)] = m_136264;
					i_136266 += 8;
				}
		} while(false);
		L3: do {
			var i_136288 = 0;
			var colontmp__136291 = 0;
			colontmp__136291 = (m_136264 - 1);
			var i_136294 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_136294 < colontmp__136291)) break L5;
						i_136288 = i_136294;
						a_136262[sub_136263[i_136288]] = ((m_136264 - 1) - i_136288);
						i_136294 += 1;
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_136311, s_136312, sub_136313, start_136314, last_136315) {
		var Tmp1;

	var result_136317 = 0;

	BeforeRet: do {
		if ((last_136315 == 0)) {
		Tmp1 = (s_136312 != null ? (s_136312.length-1) : -1);
		}
		else {
		Tmp1 = last_136315;
		}
		
		var last_136319 = Tmp1;
		var s_len_136320 = ((last_136319 - start_136314) + 1);
		var sub_last_136321 = ((sub_136313 != null ? sub_136313.length : 0) - 1);
		if ((sub_last_136321 == -1)) {
		result_136317 = start_136314;
		break BeforeRet;
		}
		
		var skip_136323 = start_136314;
		L2: do {
				L3: while (true) {
				if (!(sub_last_136321 <= (last_136319 - skip_136323))) break L3;
					var i_136324 = sub_last_136321;
					L4: do {
							L5: while (true) {
							if (!(s_136312[(skip_136323 + i_136324)] == sub_136313[i_136324])) break L5;
								if ((i_136324 == 0)) {
								result_136317 = skip_136323;
								break BeforeRet;
								}
								
								i_136324 -= 1;
							}
					} while(false);
					skip_136323 += a_136311[s_136312[(skip_136323 + sub_last_136321)]];
				}
		} while(false);
		result_136317 = -1;
		break BeforeRet;
	} while (false);

	return result_136317;

}

function nsuFindStr(s_137035, sub_137036, start_137037, last_137038) {
	var result_137040 = 0;

	BeforeRet: do {
		if (((s_137035 != null ? s_137035.length : 0) < (sub_137036 != null ? sub_137036.length : 0))) {
		result_137040 = -1;
		break BeforeRet;
		}
		
		if (((sub_137036 != null ? sub_137036.length : 0) == 1)) {
		result_137040 = nsuFindChar(s_137035, sub_137036[0], start_137037, last_137038);
		break BeforeRet;
		}
		
		var a_137042 = [new Int32Array(256)];
		nsuInitSkipTable(a_137042[0], sub_137036);
		result_137040 = nsuFindStrA(a_137042[0], s_137035, sub_137036, start_137037, last_137038);
	} while (false);

	return result_137040;

}

function new_syntax_error_156096(msg_156098, file_name_156099, line_no_156100, col_no_156101) {
	var result_156102 = null;

	var F={procname:"utils.newSyntaxError",prev:framePtr,filename:"../Utils/utils.nim",line:0};
	framePtr = F;
		F.line = 14;
		result_156102 = {m_type: NTI156086, fileName: null, lineNo: 0, colNo: 0, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 15;
		result_156102.message = nimCopy(null, msg_156098, NTI138);
		F.line = 16;
		result_156102.fileName = nimCopy(null, file_name_156099, NTI138);
		F.line = 17;
		result_156102.lineNo = line_no_156100;
		F.line = 18;
		result_156102.colNo = col_no_156101;
	framePtr = F.prev;

	return result_156102;

}

function new_seq_324467(len_324471) {
	var result_324473 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_324473 = new Array(len_324471); for (var i=0;i<len_324471;++i) {result_324473[i]=0;}	framePtr = F.prev;

	return result_324473;

}

function init_bit_set_324449(size_324451) {
	var result_324452 = {s: null, key: 0};

	var F={procname:"regex.initBitSet",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2137;
		nimCopy(result_324452, {s: new_seq_324467(chckRange(size_324451, 0, 2147483647)), key: 1}, NTI324445);
	framePtr = F.prev;

	return result_324452;

}

function new_seq_324674(len_324678) {
	var result_324680 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_324680 = new Array(len_324678); for (var i=0;i<len_324678;++i) {result_324680[i]={Field0: 0, Field1: 0, Field2: 0, Field3: 0};}	framePtr = F.prev;

	return result_324680;

}

function init_elastic_seq_324661(size_324665) {
	var result_324667 = {s: null, pos: 0};

	var F={procname:"initElasticSeq.initElasticSeq",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 680;
		nimCopy(result_324667, {s: new_seq_324674(chckRange(size_324665, 0, 2147483647)), pos: 0}, NTI324646);
	framePtr = F.prev;

	return result_324667;

}

function init_states_324655(size_324657) {
	var result_324658 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};

	var F={procname:"regex.initStates",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2157;
		nimCopy(result_324658, {states: init_elastic_seq_324661(16), ids: init_bit_set_324449(size_324657)}, NTI324639);
	framePtr = F.prev;

	return result_324658;

}

function new_seq_329937(len_329941) {
	var result_329943 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_329943 = new Array(len_329941); for (var i=0;i<len_329941;++i) {result_329943[i]={kind: 0, prev: 0, idx: 0, cpIdx: 0};}	framePtr = F.prev;

	return result_329943;

}

function init_elastic_seq_329924(size_329928) {
	var result_329930 = {s: null, pos: 0};

	var F={procname:"initElasticSeq.initElasticSeq",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 680;
		nimCopy(result_329930, {s: new_seq_329937(chckRange(size_329928, 0, 2147483647)), pos: 0}, NTI325984);
	framePtr = F.prev;

	return result_329930;

}

function add_330094(ls_330100, x_330102) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (((ls_330100.s != null ? (ls_330100.s.length-1) : -1) < ls_330100.pos)) {
		F.line = 717;
		if (ls_330100.s.length < chckRange(mulInt((ls_330100.s != null ? ls_330100.s.length : 0), 2), 0, 2147483647)) { for (var i=ls_330100.s.length;i<chckRange(mulInt((ls_330100.s != null ? ls_330100.s.length : 0), 2), 0, 2147483647);++i) ls_330100.s.push({kind: 0, prev: 0, idx: 0, cpIdx: 0}); }
               else { ls_330100.s.length = chckRange(mulInt((ls_330100.s != null ? ls_330100.s.length : 0), 2), 0, 2147483647); };
		}
		
		F.line = 718;
		nimCopy(ls_330100.s[chckIndx(ls_330100.pos, 0, ls_330100.s.length+0-1)-0], x_330102, NTI320466);
		F.line = 719;
		ls_330100.pos = addInt(ls_330100.pos, 1);
	framePtr = F.prev;

	
}

function init_data_sets_329898(size_329900, with_captures_329901) {
	var result_329902 = {Field0: {s: null, key: 0}, Field1: {s: null, pos: 0}, Field2: {s: null, pos: 0}, Field3: {states: {s: null, pos: 0}, ids: {s: null, key: 0}}, Field4: {states: {s: null, pos: 0}, ids: {s: null, key: 0}}};

	var F={procname:"regex.initDataSets",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2259;
		var captured_329907 = {s: null, pos: 0};
		F.line = 2260;
		nimCopy(result_329902, {Field0: init_bit_set_324449(size_329900), Field1: init_elastic_seq_324661(16), Field2: captured_329907, Field3: init_states_324655(size_329900), Field4: init_states_324655(size_329900)}, NTI329872);
		if (with_captures_329901) {
		F.line = 2267;
		nimCopy(result_329902.Field2, init_elastic_seq_329924(16), NTI325984);
		F.line = 2268;
		add_330094(result_329902.Field2, {kind: 0, prev: 0, idx: 0, cpIdx: 0});
		}
		
	framePtr = F.prev;

	return result_329902;

}

function fill_324534(a_324540, value_324542) {
	var F={procname:"fill.fill",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 25;
		var x_324555 = 0;
		L1: do {
			F.line = 36;
				L2: while (true) {
				if (!(x_324555 <= (a_324540 != null ? (a_324540.length-1) : -1))) break L2;
					F.line = 36;
					a_324540[chckIndx(x_324555, 0, a_324540.length+0-1)-0] = value_324542;
					F.line = 28;
					x_324555 = addInt(x_324555, 1);
				}
		} while(false);
	framePtr = F.prev;

	
}

function clear_324519(bss_324522) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if ((bss_324522.key == 2147483647)) {
		F.line = 2141;
		fill_324534(bss_324522.s, 0);
		F.line = 2142;
		bss_324522.key = 0;
		}
		
		F.line = 2143;
		bss_324522.key = addInt(bss_324522.key, 1);
	framePtr = F.prev;

	
}

function clear_325689(ls_325695) {
	var F={procname:"clear.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 713;
		ls_325695.pos = 0;
	framePtr = F.prev;

	
}

function clear_325487(ss_325490) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2168;
		clear_325689(ss_325490.states);
		F.line = 2169;
		clear_324519(ss_325490.ids);
	framePtr = F.prev;

	
}

function len_330600(ls_330605) {
	var result_330606 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 707;
		result_330606 = ls_330605.pos;
	framePtr = F.prev;

	return result_330606;

}

function clear_330819(ls_330825) {
	var F={procname:"clear.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 713;
		ls_330825.pos = 0;
	framePtr = F.prev;

	
}

function clear_330167(ds_330170) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2273;
		clear_324519(ds_330170.Field0);
		F.line = 2274;
		clear_325689(ds_330170.Field1);
		F.line = 2275;
		clear_325487(ds_330170.Field3);
		F.line = 2276;
		clear_325487(ds_330170.Field4);
		if ((0 < len_330600(ds_330170.Field2))) {
		F.line = 2278;
		clear_330819(ds_330170.Field2);
		F.line = 2279;
		add_330094(ds_330170.Field2, {kind: 0, prev: 0, idx: 0, cpIdx: 0});
		}
		
	framePtr = F.prev;

	
}

function len_325454(ls_325459) {
	var result_325460 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 707;
		result_325460 = ls_325459.pos;
	framePtr = F.prev;

	return result_325460;

}

function len_325231(ss_325233) {
	var result_325234 = 0;

	var F={procname:"regex.len",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2165;
		result_325234 = len_325454(ss_325233.states);
	framePtr = F.prev;

	return result_325234;

}

function HEX5BHEX5D_324989(ls_324994, i_324996) {
	var result_324997 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 683;
		if (!((i_324996 < ls_324994.pos))) {
		F.line = 683;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(683, 10) `i < ls.pos` "));
		}
		
		nimCopy(result_324997, ls_324994.s[chckIndx(i_324996, 0, ls_324994.s.length+0-1)-0], NTI320468);
	framePtr = F.prev;

	return result_324997;

}

function HEX5BHEX5D_324732(ss_324734, i_324735) {
	var result_324736 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};

	var F={procname:"regex.[]",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2162;
		nimCopy(result_324736, HEX5BHEX5D_324989(ss_324734.states, i_324735), NTI320468);
	framePtr = F.prev;

	return result_324736;

}

function add_325843(ls_325849, x_325851) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (((ls_325849.s != null ? (ls_325849.s.length-1) : -1) < ls_325849.pos)) {
		F.line = 717;
		if (ls_325849.s.length < chckRange(mulInt((ls_325849.s != null ? ls_325849.s.length : 0), 2), 0, 2147483647)) { for (var i=ls_325849.s.length;i<chckRange(mulInt((ls_325849.s != null ? ls_325849.s.length : 0), 2), 0, 2147483647);++i) ls_325849.s.push({Field0: 0, Field1: 0, Field2: 0, Field3: 0}); }
               else { ls_325849.s.length = chckRange(mulInt((ls_325849.s != null ? ls_325849.s.length : 0), 2), 0, 2147483647); };
		}
		
		F.line = 718;
		nimCopy(ls_325849.s[chckIndx(ls_325849.pos, 0, ls_325849.s.length+0-1)-0], x_325851, NTI320468);
		F.line = 719;
		ls_325849.pos = addInt(ls_325849.pos, 1);
	framePtr = F.prev;

	
}

function pop_331980(ls_331986) {
	var result_331987 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 722;
		F.line = 722;
		ls_331986.pos = subInt(ls_331986.pos, 1);
		nimCopy(result_331987, ls_331986.s[chckIndx(ls_331986.pos, 0, ls_331986.s.length+0-1)-0], NTI320468);
	framePtr = F.prev;

	return result_331987;

}

function contains_324619(bss_324622, x_324623) {
	var result_324624 = false;

	var F={procname:"regex.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2149;
		result_324624 = (bss_324622.s[chckIndx(x_324623, 0, bss_324622.s.length+0-1)-0] == bss_324622.key);
	framePtr = F.prev;

	return result_324624;

}

function incl_324601(bss_324604, x_324605) {
	var F={procname:"regex.incl",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2146;
		bss_324604.s[chckIndx(x_324605, 0, bss_324604.s.length+0-1)-0] = bss_324604.key;
	framePtr = F.prev;

	
}

function add_325724(ss_325727, s_325728) {
	var F={procname:"regex.add",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!(contains_324619(ss_325727.ids, ((s_325728.Field0)|0)))) {
		F.line = 2173;
		add_325843(ss_325727.states, s_325728);
		F.line = 2174;
		incl_324601(ss_325727.ids, ((s_325728.Field0)|0));
		}
		
	framePtr = F.prev;

	
}

function HEX3DHEX3D_41480(a_41482, b_41483) {
	var result_41484 = false;

	var F={procname:"unicode.==",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 25;
		result_41484 = (((a_41482)|0) == ((b_41483)|0));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_41484;

}

function contains_278220(ut_278222, utm_278223) {
	var result_278224 = false;

	var F={procname:"types.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/types.nim",line:0};
	framePtr = F;
		F.line = 36;
		result_278224 = !(((ut_278222 & utm_278223) == 0));
	framePtr = F.prev;

	return result_278224;

}

function unicode_types_278027(cp_278029) {
	var result_278030 = 0;

	var F={procname:"types.unicodeTypes",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/types.nim",line:0};
	framePtr = F;
		if (!((((cp_278029)|0) <= 1114111))) {
		F.line = 23;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/unicodedb-0.6.0/unicodedb/types.nim(23, 10) `int(cp) <= 0x0010FFFF` "));
		}
		
		F.line = 25;
		var block_offset_278201 = mulInt(((types_offsets_277053[chckIndx(divInt(((cp_278029)|0), 128), 0, types_offsets_277053.length+0-1)-0])|0), 128);
		F.line = 26;
		var idx_278202 = types_indices_277234[chckIndx(addInt(block_offset_278201, modInt(((cp_278029)|0), 128)), 0, types_indices_277234.length+0-1)-0];
		F.line = 27;
		result_278030 = ((types_data_277237[chckIndx(idx_278202, 0, types_data_277237.length+0-1)-0])|0);
	framePtr = F.prev;

	return result_278030;

}

function is_alpha_num_282457(r_282459) {
	var result_282460 = false;

	var F={procname:"regex.isAlphaNum",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 371;
		result_282460 = contains_278220(unicode_types_278027(r_282459), 128);
	framePtr = F.prev;

	return result_282460;

}

function is_word_boundary_282547(r_282549, nxt_282550) {
		var Tmp1;
		var Tmp2;

	var result_282551 = false;

	var F={procname:"regex.isWordBoundary",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 392;
		F.line = 386;
		if (!!(HEX3DHEX3D_41480(r_282549, -1))) Tmp1 = false; else {			Tmp1 = is_alpha_num_282457(r_282549);		}		var is_word_282557 = Tmp1;
		F.line = 387;
		if (!!(HEX3DHEX3D_41480(nxt_282550, -1))) Tmp2 = false; else {			Tmp2 = is_alpha_num_282457(nxt_282550);		}		var is_nxt_word_282559 = Tmp2;
		result_282551 = ((is_word_282557 && !(is_nxt_word_282559)) || (!(is_word_282557) && is_nxt_word_282559));
	framePtr = F.prev;

	return result_282551;

}

function is_alpha_num_ascii_282474(r_282476) {
		var Tmp1;

	var result_282477 = false;

	var F={procname:"regex.isAlphaNumAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 374;
		F.line = 376;
		switch (((r_282476)|0)) {
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_282477 = Tmp1;
	framePtr = F.prev;

	return result_282477;

}

function is_word_boundary_ascii_282573(r_282575, nxt_282576) {
		var Tmp1;
		var Tmp2;

	var result_282577 = false;

	var F={procname:"regex.isWordBoundaryAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 397;
		F.line = 386;
		if (!!(HEX3DHEX3D_41480(r_282575, -1))) Tmp1 = false; else {			Tmp1 = is_alpha_num_ascii_282474(r_282575);		}		var is_word_282583 = Tmp1;
		F.line = 387;
		if (!!(HEX3DHEX3D_41480(nxt_282576, -1))) Tmp2 = false; else {			Tmp2 = is_alpha_num_ascii_282474(nxt_282576);		}		var is_nxt_word_282585 = Tmp2;
		result_282577 = ((is_word_282583 && !(is_nxt_word_282585)) || (!(is_word_282583) && is_nxt_word_282585));
	framePtr = F.prev;

	return result_282577;

}

function match_282599(n_282601, r_282602, nxt_282603) {
		var Tmp1;

	var result_282604 = false;

	var F={procname:"regex.match",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 402;
		F.line = 405;
		switch (n_282601.kind) {
		case 14:
		case 10:
			Tmp1 = HEX3DHEX3D_41480(r_282602, -1);
			break;
		case 15:
		case 11:
			Tmp1 = HEX3DHEX3D_41480(nxt_282603, -1);
			break;
		case 12:
			Tmp1 = (HEX3DHEX3D_41480(r_282602, -1) || HEX3DHEX3D_41480(r_282602, 10));
			break;
		case 13:
			Tmp1 = (HEX3DHEX3D_41480(nxt_282603, -1) || HEX3DHEX3D_41480(nxt_282603, 10));
			break;
		case 16:
			Tmp1 = is_word_boundary_282547(r_282602, nxt_282603);
			break;
		case 17:
			Tmp1 = !(is_word_boundary_282547(r_282602, nxt_282603));
			break;
		case 28:
			Tmp1 = is_word_boundary_ascii_282573(r_282602, nxt_282603);
			break;
		case 29:
			Tmp1 = !(is_word_boundary_ascii_282573(r_282602, nxt_282603));
			break;
		case 40:
			Tmp1 = HEX3DHEX3D_41480(n_282601.cp, nxt_282603);
			break;
		case 42:
			Tmp1 = !(HEX3DHEX3D_41480(n_282601.cp, nxt_282603));
			break;
		case 41:
			Tmp1 = HEX3DHEX3D_41480(n_282601.cp, r_282602);
			break;
		case 43:
			Tmp1 = !(HEX3DHEX3D_41480(n_282601.cp, r_282602));
			break;
		default: 
			if (true) {
			F.line = 433;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(433, 12) `false` "));
			}
			
			Tmp1 = false;
			break;
		}
		result_282604 = Tmp1;
	framePtr = F.prev;

	return result_282604;

}

function to_visit_step_330977(result_330984, n_330985, ci_330986, si_330987, ei_330988) {
	var F={procname:"regex.toVisitStep",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!((n_330985.outB == -1))) {
		F.line = 2288;
		add_325843(result_330984, {Field0: n_330985.outB, Field1: ci_330986, Field2: si_330987, Field3: ei_330988});
		}
		
		if (!((n_330985.outA == -1))) {
		F.line = 2290;
		add_325843(result_330984, {Field0: n_330985.outA, Field1: ci_330986, Field2: si_330987, Field3: ei_330988});
		}
		
	framePtr = F.prev;

	
}

function high_332382(ls_332387) {
	var result_332388 = 0;

	var F={procname:"high.high",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 710;
		result_332388 = subInt(ls_332387.pos, 1);
	framePtr = F.prev;

	return result_332388;

}

function step_331258(result_331261, pattern_331262, state_331263, ds_331265, cp_331266, nxt_331267) {
								var Tmp4;
								var Tmp5;

	var F={procname:"regex.step",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!((len_325454(ds_331265.Field1) == 0))) {
		F.line = 2299;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(2299, 10) `len(ds.toVisit) == 0` "));
		}
		
		F.line = 2300;
		add_325843(ds_331265.Field1, state_331263);
		L1: do {
			F.line = 2301;
				L2: while (true) {
				if (!(0 < len_325454(ds_331265.Field1))) break L2;
					L3: do {
						F.line = 2302;
						var s_332015 = pop_331980(ds_331265.Field1);
						if (contains_324619(ds_331265.Field0, ((s_332015.Field0)|0))) {
						F.line = 2304;
						break L3;
						}
						
						F.line = 2305;
						incl_324601(ds_331265.Field0, ((s_332015.Field0)|0));
						F.line = 2306;
						var n_332018 = nimCopy(null, pattern_331262.states[chckIndx(s_332015.Field0, 0, pattern_331262.states.length+0-1)-0], NTI281230);
						F.line = 2307;
						switch (n_332018.kind) {
						case 0:
						case 1:
						case 45:
						case 18:
						case 19:
						case 20:
						case 21:
						case 22:
						case 23:
						case 24:
						case 25:
						case 26:
						case 27:
						case 30:
						case 31:
						case 32:
						case 33:
						case 34:
						case 35:
						case 36:
						case 37:
						case 38:
						case 39:
							F.line = 2309;
							add_325724(result_331261, s_332015);
							break;
						case 10:
						case 11:
						case 12:
						case 13:
						case 14:
						case 15:
						case 16:
						case 17:
						case 28:
						case 29:
						case 40:
						case 41:
						case 42:
						case 43:
							if (match_282599(n_332018, cp_331266, nxt_331267)) {
							F.line = 2312;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							}
							
							break;
						case 3:
								if (!n_332018.isCapturing) Tmp4 = false; else {									Tmp4 = (0 < len_330600(ds_331265.Field2));								}							if (!(Tmp4)) {
							F.line = 2316;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							F.line = 2317;
							break L3;
							}
							
							F.line = 2318;
							add_330094(ds_331265.Field2, {kind: 0, cpIdx: state_331263.Field3, prev: s_332015.Field1, idx: n_332018.idx});
							F.line = 2323;
							to_visit_step_330977(ds_331265.Field1, n_332018, high_332382(ds_331265.Field2), s_332015.Field2, s_332015.Field3);
							break;
						case 4:
								if (!n_332018.isCapturing) Tmp5 = false; else {									Tmp5 = (0 < len_330600(ds_331265.Field2));								}							if (!(Tmp5)) {
							F.line = 2327;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							F.line = 2328;
							break L3;
							}
							
							F.line = 2329;
							add_330094(ds_331265.Field2, {kind: 1, cpIdx: subInt(state_331263.Field3, 1), prev: s_332015.Field1, idx: n_332018.idx});
							F.line = 2334;
							to_visit_step_330977(ds_331265.Field1, n_332018, high_332382(ds_331265.Field2), s_332015.Field2, s_332015.Field3);
							break;
						default: 
							F.line = 2336;
							to_visit_step_330977(ds_331265.Field1, n_332018, s_332015.Field1, s_332015.Field2, s_332015.Field3);
							break;
						}
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function is_decimal_279406(c_279408) {
		var Tmp1;

	var result_279409 = false;

	var F={procname:"unicodeplus.isDecimal",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodeplus-0.4.0/unicodeplus.nim",line:0};
	framePtr = F;
		F.line = 47;
		if ((((c_279408)|0) < 128)) {
		Tmp1 = nums_279349[chckIndx(((c_279408)|0), 0, nums_279349.length+0-1)-0];
		}
		else {
		Tmp1 = contains_278220(unicode_types_278027(c_279408), 1);
		}
		
		result_279409 = Tmp1;
	framePtr = F.prev;

	return result_279409;

}

function is_white_space_283256(r_283258) {
	var result_283259 = false;

	var F={procname:"regex.isWhiteSpace",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 447;
		result_283259 = contains_278220(unicode_types_278027(r_283258), 64);
	framePtr = F.prev;

	return result_283259;

}

function is_valid_283826(s_283831) {
	var result_283832 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_283832 = (0 < (s_283831.data != null ? s_283831.data.length : 0));
	framePtr = F.prev;

	return result_283832;

}

function hash_284235(x_284239) {
	var result_284240 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_284240 = x_284239;
	framePtr = F.prev;

	return result_284240;

}

function raw_get_284221(s_284226, key_284228, hc_284230, hc_284230_Idx) {
						var Tmp3;

	var result_284231 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_284261 = hash_284235(key_284228);
		if ((hc_284261 == 0)) {
		F.line = 164;
		hc_284261 = 314159265;
		}
		
		hc_284230[hc_284230_Idx] = hc_284261;
		F.line = 150;
		var h_284271 = (hc_284230[hc_284230_Idx] & (s_284226.data != null ? (s_284226.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_284226.data[chckIndx(h_284271, 0, s_284226.data.length+0-1)-0].Field0)) break L2;
						if (!(s_284226.data[chckIndx(h_284271, 0, s_284226.data.length+0-1)-0].Field0 == hc_284230[hc_284230_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_41480(s_284226.data[chckIndx(h_284271, 0, s_284226.data.length+0-1)-0].Field1, key_284228);						}					if (Tmp3) {
					F.line = 157;
					result_284231 = h_284271;
					break BeforeRet;
					}
					
					F.line = 158;
					h_284271 = next_try_154431(h_284271, (s_284226.data != null ? (s_284226.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_284231 = subInt(-1, h_284271);
	} while (false);
	framePtr = F.prev;

	return result_284231;

}

function contains_283798(s_283803, key_283805) {
	var result_283806 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_283826(s_283803))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_284201 = [0];
		F.line = 217;
		var index_285001 = raw_get_284221(s_283803, key_283805, hc_284201, 0);
		F.line = 218;
		result_283806 = (0 <= index_285001);
	framePtr = F.prev;

	return result_283806;

}

function HEX3CHEX3D_282814(x_282816, y_282817) {
	var result_282818 = false;

	var F={procname:"regex.<=",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 437;
		result_282818 = (((x_282816)|0) <= ((y_282817)|0));
	framePtr = F.prev;

	return result_282818;

}

function contains_283213(s_283220, value_283222) {
	var result_283223 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1272;
		result_283223 = (HEX3CHEX3D_282814(s_283220.a, value_283222) && HEX3CHEX3D_282814(value_283222, s_283220.b));
	framePtr = F.prev;

	return result_283223;

}

function contains_282834(sr_282841, r_282842) {
	var result_282843 = false;

	var F={procname:"regex.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 440;
		result_282843 = false;
		L1: do {
			F.line = 441;
			var sl_283015 = {a: 0, b: 0};
			F.line = 3911;
			var i_283240 = 0;
			F.line = 3912;
			var l_283242 = (sr_282841 != null ? sr_282841.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_283240 < l_283242)) break L3;
						F.line = 3914;
						nimCopy(sl_283015, sr_282841[chckIndx(i_283240, 0, sr_282841.length+0-1)-0], NTI281333);
						F.line = 442;
						result_282843 = contains_283213(sl_283015, r_282842);
						if (result_282843) {
						F.line = 444;
						break L1;
						}
						
						F.line = 3915;
						i_283240 = addInt(i_283240, 1);
						if (!(((sr_282841 != null ? sr_282841.length : 0) == l_283242))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_282843;

}

function binary_search_51351(c_51353, tab_51355, len_51356, stride_51357) {
			var Tmp3;

	var result_51358 = 0;

	var F={procname:"unicode.binarySearch",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1306;
		var n_51359 = len_51356;
		F.line = 1307;
		var t_51361 = 0;
		L1: do {
			F.line = 1308;
				L2: while (true) {
				if (!(1 < n_51359)) break L2;
					F.line = 1309;
					var m_51364 = divInt(n_51359, 2);
					F.line = 1310;
					var p_51365 = addInt(t_51361, mulInt(m_51364, stride_51357));
					if ((tab_51355[chckIndx(p_51365, 0, tab_51355.length+0-1)-0] <= ((c_51353)|0))) {
					F.line = 1312;
					t_51361 = p_51365;
					F.line = 1313;
					n_51359 = subInt(n_51359, m_51364);
					}
					else {
						F.line = 1315;
						n_51359 = m_51364;
					}
					
				}
		} while(false);
			if (!!((n_51359 == 0))) Tmp3 = false; else {				Tmp3 = (tab_51355[chckIndx(t_51361, 0, tab_51355.length+0-1)-0] <= ((c_51353)|0));			}		if (Tmp3) {
		F.line = 1317;
		result_51358 = t_51361;
		break BeforeRet;
		}
		
		F.line = 1318;
		result_51358 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_51358;

}

function nucisUpper(c_51690) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51691 = false;

	var F={procname:"unicode.isUpper",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1367;
		var c_51692 = c_51690;
		F.line = 1369;
		var p_51722 = binary_search_51351(c_51692, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 398, 399, 702, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1025, 1036, 580, 1038, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 548, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 8544, 8559, 516, 9398, 9423, 526, 65313, 65338, 532], 36, 3);
			if (!(0 <= p_51722)) Tmp2 = false; else {				Tmp2 = (tolower_ranges_50536[chckIndx(p_51722, 0, tolower_ranges_50536.length+0-1)-0] <= ((c_51692)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51692)|0) <= tolower_ranges_50536[chckIndx(addInt(p_51722, 1), 0, tolower_ranges_50536.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1371;
		result_51691 = true;
		break BeforeRet;
		}
		
		F.line = 1372;
		p_51722 = binary_search_51351(c_51692, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 416, 501, 418, 501, 420, 501, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 902, 538, 908, 564, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1217, 501, 1219, 501, 1223, 501, 1227, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1272, 501, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491], 333, 2);
			if (!(0 <= p_51722)) Tmp3 = false; else {				Tmp3 = (((c_51692)|0) == tolower_singlets_50648[chckIndx(p_51722, 0, tolower_singlets_50648.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1374;
		result_51691 = true;
		break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_51691;

}

function nuctoLower(c_51383) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51384 = 0;

	var F={procname:"unicode.toLower",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1323;
		var c_51385 = c_51383;
		F.line = 1324;
		var p_51416 = binary_search_51351(c_51385, [65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 398, 399, 702, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1025, 1036, 580, 1038, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 548, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 8544, 8559, 516, 9398, 9423, 526, 65313, 65338, 532], 36, 3);
			if (!(0 <= p_51416)) Tmp2 = false; else {				Tmp2 = (tolower_ranges_50536[chckIndx(p_51416, 0, tolower_ranges_50536.length+0-1)-0] <= ((c_51385)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51385)|0) <= tolower_ranges_50536[chckIndx(addInt(p_51416, 1), 0, tolower_ranges_50536.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1326;
		result_51384 = subInt(addInt(((c_51385)|0), tolower_ranges_50536[chckIndx(addInt(p_51416, 2), 0, tolower_ranges_50536.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1327;
		p_51416 = binary_search_51351(c_51385, [256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 416, 501, 418, 501, 420, 501, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 902, 538, 908, 564, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1217, 501, 1219, 501, 1223, 501, 1227, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1272, 501, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491], 333, 2);
			if (!(0 <= p_51416)) Tmp3 = false; else {				Tmp3 = (((c_51385)|0) == tolower_singlets_50648[chckIndx(p_51416, 0, tolower_singlets_50648.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1329;
		result_51384 = subInt(addInt(((c_51385)|0), tolower_singlets_50648[chckIndx(addInt(p_51416, 1), 0, tolower_singlets_50648.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1330;
		result_51384 = c_51385;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_51384;

}

function nucisLower(c_51609) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51610 = false;

	var F={procname:"unicode.isLower",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1355;
		var c_51611 = c_51609;
		F.line = 1357;
		var p_51641 = binary_search_51351(c_51611, [97, 122, 468, 224, 246, 468, 248, 254, 468, 598, 599, 295, 600, 601, 298, 650, 651, 283, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1105, 1116, 420, 1118, 1119, 420, 1377, 1414, 452, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 8560, 8575, 484, 9424, 9449, 474, 65345, 65370, 468], 35, 3);
			if (!(0 <= p_51641)) Tmp2 = false; else {				Tmp2 = (toupper_ranges_49743[chckIndx(p_51641, 0, toupper_ranges_49743.length+0-1)-0] <= ((c_51611)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51611)|0) <= toupper_ranges_49743[chckIndx(addInt(p_51641, 1), 0, toupper_ranges_49743.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1359;
		result_51610 = true;
		break BeforeRet;
		}
		
		F.line = 1360;
		p_51641 = binary_search_51351(c_51611, [255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 409, 499, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 595, 290, 596, 294, 603, 297, 608, 295, 611, 293, 616, 291, 617, 289, 623, 289, 626, 287, 643, 282, 648, 282, 658, 281, 940, 462, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1224, 499, 1228, 499, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1273, 499, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8131, 509, 8165, 507, 8179, 509], 340, 2);
			if (!(0 <= p_51641)) Tmp3 = false; else {				Tmp3 = (((c_51611)|0) == toupper_singlets_49852[chckIndx(p_51641, 0, toupper_singlets_49852.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1362;
		result_51610 = true;
		break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_51610;

}

function nuctoUpper(c_51470) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_51471 = 0;

	var F={procname:"unicode.toUpper",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1335;
		var c_51472 = c_51470;
		F.line = 1336;
		var p_51503 = binary_search_51351(c_51472, [97, 122, 468, 224, 246, 468, 248, 254, 468, 598, 599, 295, 600, 601, 298, 650, 651, 283, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1105, 1116, 420, 1118, 1119, 420, 1377, 1414, 452, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 8560, 8575, 484, 9424, 9449, 474, 65345, 65370, 468], 35, 3);
			if (!(0 <= p_51503)) Tmp2 = false; else {				Tmp2 = (toupper_ranges_49743[chckIndx(p_51503, 0, toupper_ranges_49743.length+0-1)-0] <= ((c_51472)|0));			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (((c_51472)|0) <= toupper_ranges_49743[chckIndx(addInt(p_51503, 1), 0, toupper_ranges_49743.length+0-1)-0]);			}		if (Tmp1) {
		F.line = 1338;
		result_51471 = subInt(addInt(((c_51472)|0), toupper_ranges_49743[chckIndx(addInt(p_51503, 2), 0, toupper_ranges_49743.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1339;
		p_51503 = binary_search_51351(c_51472, [255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 409, 499, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 595, 290, 596, 294, 603, 297, 608, 295, 611, 293, 616, 291, 617, 289, 623, 289, 626, 287, 643, 282, 648, 282, 658, 281, 940, 462, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1224, 499, 1228, 499, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1273, 499, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8131, 509, 8165, 507, 8179, 509], 340, 2);
			if (!(0 <= p_51503)) Tmp3 = false; else {				Tmp3 = (((c_51472)|0) == toupper_singlets_49852[chckIndx(p_51503, 0, toupper_singlets_49852.length+0-1)-0]);			}		if (Tmp3) {
		F.line = 1341;
		result_51471 = subInt(addInt(((c_51472)|0), toupper_singlets_49852[chckIndx(addInt(p_51503, 1), 0, toupper_singlets_49852.length+0-1)-0]), 500);
		break BeforeRet;
		}
		
		F.line = 1342;
		result_51471 = c_51472;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_51471;

}

function swap_case_283387(r_283389) {
	var result_283390 = 0;

	var F={procname:"regex.swapCase",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (nucisUpper(r_283389)) {
		F.line = 478;
		result_283390 = nuctoLower(r_283389);
		}
		else {
		if (nucisLower(r_283389)) {
		F.line = 480;
		result_283390 = nuctoUpper(r_283389);
		}
		else {
			F.line = 482;
			result_283390 = r_283389;
		}
		}
	framePtr = F.prev;

	return result_283390;

}

function is_digit_ascii_283327(r_283329) {
		var Tmp1;

	var result_283330 = false;

	var F={procname:"regex.isDigitAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 462;
		F.line = 462;
		switch (((r_283329)|0)) {
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_283330 = Tmp1;
	framePtr = F.prev;

	return result_283330;

}

function is_white_space_ascii_283273(r_283275) {
		var Tmp1;

	var result_283276 = false;

	var F={procname:"regex.isWhiteSpaceAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 450;
		F.line = 450;
		switch (((r_283275)|0)) {
		case 32:
		case 9:
		case 10:
		case 13:
		case 12:
		case 11:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_283276 = Tmp1;
	framePtr = F.prev;

	return result_283276;

}

function contains_276029(a_276031, b_276032) {
	var result_276033 = false;

	var F={procname:"properties.contains",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		F.line = 54;
		result_276033 = !(((((b_276032)|0) & ((a_276031)|0)) == 0));
	framePtr = F.prev;

	return result_276033;

}

function unicode_category_276620(props_276622) {
	var result_276623 = 0;

	var F={procname:"properties.unicodeCategory",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		F.line = 205;
		result_276623 = props_276622[chckIndx(0, 0, props_276622.length+0-1)-0];
	framePtr = F.prev;

	return result_276623;

}

function properties_276517(cp_276519) {
	var result_276520 = new Int32Array(4);

	var F={procname:"properties.properties",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		if (!((((cp_276519)|0) <= 1114111))) {
		F.line = 197;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim(197, 10) `int(cp) <= 0x0010FFFF` "));
		}
		
		F.line = 199;
		var block_offset_276601 = mulInt(((props_offsets_260203[chckIndx(divInt(((cp_276519)|0), 128), 0, props_offsets_260203.length+0-1)-0])|0), 128);
		F.line = 200;
		var idx_276602 = props_indices_268070[chckIndx(addInt(block_offset_276601, modInt(((cp_276519)|0), 128)), 0, props_indices_268070.length+0-1)-0];
		F.line = 201;
		nimCopy(result_276520, props_data_275248[chckIndx(idx_276602, 0, props_data_275248.length+0-1)-0], NTI275250);
	framePtr = F.prev;

	return result_276520;

}

function unicode_category_276638(cp_276640) {
	var result_276641 = 0;

	var F={procname:"properties.unicodeCategory",prev:framePtr,filename:"../../../../.nimble/pkgs/unicodedb-0.6.0/unicodedb/properties.nim",line:0};
	framePtr = F;
		F.line = 208;
		result_276641 = unicode_category_276620(properties_276517(cp_276640));
	framePtr = F.prev;

	return result_276641;

}

function is_any_ascii_283357(r_283359) {
		var Tmp1;

	var result_283360 = false;

	var F={procname:"regex.isAnyAscii",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 469;
		if (!(((r_283359)|0) <= 127)) Tmp1 = false; else {			Tmp1 = !(HEX3DHEX3D_41480(r_283359, 10));		}		result_283360 = Tmp1;
	framePtr = F.prev;

	return result_283360;

}

function match_283404(n_283406, r_283407) {
		var Tmp1;

	var result_283408 = false;

	var F={procname:"regex.match",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 485;
		if (!(!(HEX3DHEX3D_41480(r_283407, -1)))) {
		F.line = 488;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(488, 10) `\x0Anot (r == -1)` "));
		}
		
		F.line = 489;
		switch (n_283406.kind) {
		case 45:
			Tmp1 = false;
			break;
		case 18:
			Tmp1 = is_alpha_num_282457(r_283407);
			break;
		case 22:
			Tmp1 = !(is_alpha_num_282457(r_283407));
			break;
		case 19:
			Tmp1 = is_decimal_279406(r_283407);
			break;
		case 23:
			Tmp1 = !(is_decimal_279406(r_283407));
			break;
		case 20:
			Tmp1 = is_white_space_283256(r_283407);
			break;
		case 24:
			Tmp1 = !(is_white_space_283256(r_283407));
			break;
		case 38:
		case 39:
			F.line = 505;
			var matches_285017 = (contains_283798(n_283406.cps, r_283407) || contains_282834(n_283406.ranges, r_283407));
			if (!(matches_285017)) {
			L2: do {
				F.line = 509;
				var nn_285215 = {kind: 0, cp: 0, outA: 0, outB: 0, isGreedy: false, idx: 0, isCapturing: false, name: null, flags: null, min: 0, max: 0, cps: {data: null, counter: 0}, ranges: null, shorthands: null, cc: 0};
				F.line = 3909;
				var colontmp__285402 = null;
				F.line = 509;
				colontmp__285402 = n_283406.shorthands;
				F.line = 3911;
				var i_285405 = 0;
				F.line = 3912;
				var l_285407 = (colontmp__285402 != null ? colontmp__285402.length : 0);
				L3: do {
					F.line = 3913;
						L4: while (true) {
						if (!(i_285405 < l_285407)) break L4;
							F.line = 3914;
							nimCopy(nn_285215, colontmp__285402[chckIndx(i_285405, 0, colontmp__285402.length+0-1)-0], NTI281230);
							F.line = 510;
							matches_285017 = match_283404(nn_285215, r_283407);
							if (matches_285017) {
							F.line = 511;
							break L2;
							}
							
							F.line = 3915;
							i_285405 = addInt(i_285405, 1);
							if (!(((colontmp__285402 != null ? colontmp__285402.length : 0) == l_285407))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			}
			
			Tmp1 = ((matches_285017 && (n_283406.kind == 38)) || (!(matches_285017) && (n_283406.kind == 39)));
			break;
		case 26:
			Tmp1 = !(HEX3DHEX3D_41480(r_283407, 10));
			break;
		case 27:
			Tmp1 = true;
			break;
		case 1:
			Tmp1 = (HEX3DHEX3D_41480(r_283407, n_283406.cp) || HEX3DHEX3D_41480(r_283407, swap_case_283387(n_283406.cp)));
			break;
		case 30:
			Tmp1 = is_alpha_num_ascii_282474(r_283407);
			break;
		case 31:
			Tmp1 = is_digit_ascii_283327(r_283407);
			break;
		case 32:
			Tmp1 = is_white_space_ascii_283273(r_283407);
			break;
		case 21:
			Tmp1 = contains_276029(n_283406.cc, unicode_category_276638(r_283407));
			break;
		case 33:
			Tmp1 = !(is_alpha_num_ascii_282474(r_283407));
			break;
		case 34:
			Tmp1 = !(is_digit_ascii_283327(r_283407));
			break;
		case 35:
			Tmp1 = !(is_white_space_ascii_283273(r_283407));
			break;
		case 25:
			Tmp1 = !(contains_276029(n_283406.cc, unicode_category_276638(r_283407)));
			break;
		case 36:
			Tmp1 = is_any_ascii_283357(r_283407);
			break;
		case 37:
			Tmp1 = (is_any_ascii_283357(r_283407) || HEX3DHEX3D_41480(r_283407, 10));
			break;
		default: 
			if (!((n_283406.kind == 0))) {
			F.line = 541;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(541, 12) `n.kind == reChar` "));
			}
			
			Tmp1 = HEX3DHEX3D_41480(n_283406.cp, r_283407);
			break;
		}
		result_283408 = Tmp1;
	framePtr = F.prev;

	return result_283408;

}

function step_from_332790(result_332793, n_332794, pattern_332795, ds_332797, ci_332798, si_332799, ei_332800, cp_332801, nxt_332802) {
	var F={procname:"regex.stepFrom",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (!((n_332794.outA == -1))) {
		F.line = 2350;
		var state_332809 = {Field0: n_332794.outA, Field1: ci_332798, Field2: si_332799, Field3: ei_332800};
		F.line = 2351;
		step_331258(result_332793, pattern_332795, state_332809, ds_332797, cp_332801, nxt_332802);
		}
		
		if (!((n_332794.outB == -1))) {
		F.line = 2353;
		var state_332816 = {Field0: n_332794.outB, Field1: ci_332798, Field2: si_332799, Field3: ei_332800};
		F.line = 2354;
		step_331258(result_332793, pattern_332795, state_332816, ds_332797, cp_332801, nxt_332802);
		}
		
	framePtr = F.prev;

	
}

function clear_320763(t_320770) {
	var F={procname:"clear.clear",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 152;
			var i_321005 = 0;
			F.line = 3616;
			var colontmp__322691 = 0;
			F.line = 152;
			colontmp__322691 = (t_320770.data != null ? t_320770.data.length : 0);
			F.line = 3617;
			var i_322694 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_322694 < colontmp__322691)) break L3;
						F.line = 3619;
						i_321005 = i_322694;
						F.line = 154;
						t_320770.data[chckIndx(i_321005, 0, t_320770.data.length+0-1)-0].Field0 = 0;
						F.line = 155;
						F.line = 120;
						var v_322172 = null;
						t_320770.data[chckIndx(i_321005, 0, t_320770.data.length+0-1)-0].Field1 = nimCopy(null, v_322172, NTI138);
						F.line = 156;
						F.line = 120;
						var v_322689 = 0;
						t_320770.data[chckIndx(i_321005, 0, t_320770.data.length+0-1)-0].Field2 = v_322689;
						F.line = 3620;
						i_322694 = addInt(i_322694, 1);
					}
			} while(false);
		} while(false);
		F.line = 157;
		t_320770.counter = 0;
	framePtr = F.prev;

	
}

function clear_320523(m_320526) {
	var F={procname:"regex.clear",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if ((0 < (m_320526.captures != null ? m_320526.captures.length : 0))) {
		F.line = 2031;
		if (m_320526.captures.length < 0) { for (var i=m_320526.captures.length;i<0;++i) m_320526.captures.push({a: 0, b: 0}); }
               else { m_320526.captures.length = 0; };
		}
		
		if ((0 < (m_320526.groups != null ? m_320526.groups.length : 0))) {
		F.line = 2033;
		if (m_320526.groups.length < 0) { for (var i=m_320526.groups.length;i<0;++i) m_320526.groups.push({a: 0, b: 0}); }
               else { m_320526.groups.length = 0; };
		}
		
		F.line = 2034;
		clear_320763(m_320526.namedGroups);
		F.line = 2035;
		nimCopy(m_320526.boundaries, HEX2EHEX2E_48828(0, -1), NTI25907);
	framePtr = F.prev;

	
}

function new_seq_326020(len_326024) {
	var result_326026 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_326026 = new Array(len_326024); for (var i=0;i<len_326024;++i) {result_326026[i]={a: 0, b: 0};}	framePtr = F.prev;

	return result_326026;

}

function HEX5BHEX5D_326322(ls_326327, i_326329) {
	var result_326330 = {kind: 0, prev: 0, idx: 0, cpIdx: 0};

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 683;
		if (!((i_326329 < ls_326327.pos))) {
		F.line = 683;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(683, 10) `i < ls.pos` "));
		}
		
		nimCopy(result_326330, ls_326327.s[chckIndx(i_326329, 0, ls_326327.s.length+0-1)-0], NTI320466);
	framePtr = F.prev;

	return result_326330;

}

function populate_captures_325974(result_325977, captured_325991, c_idx_325992, gc_325993) {
	var F={procname:"regex.populateCaptures",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		if (((result_325977.groups != null ? result_325977.groups.length : 0) == 0)) {
		F.line = 2190;
		result_325977.groups = nimCopy(null, new_seq_326020(chckRange(gc_325993, 0, 2147483647)), NTI326025);
		}
		else {
			F.line = 2192;
		if (result_325977.groups.length < chckRange(gc_325993, 0, 2147483647)) { for (var i=result_325977.groups.length;i<chckRange(gc_325993, 0, 2147483647);++i) result_325977.groups.push({a: 0, b: 0}); }
               else { result_325977.groups.length = chckRange(gc_325993, 0, 2147483647); };
		}
		
		F.line = 2194;
		var curr_326067 = c_idx_325992;
		F.line = 2195;
		var ci_326069 = 0;
		L1: do {
			F.line = 2196;
				L2: while (true) {
				if (!!((curr_326067 == 0))) break L2;
					F.line = 2197;
					var c_326418 = HEX5BHEX5D_326322(captured_325991, curr_326067);
					F.line = 2198;
					result_325977.groups[chckIndx(c_326418.idx, 0, result_325977.groups.length+0-1)-0].b = addInt(result_325977.groups[chckIndx(c_326418.idx, 0, result_325977.groups.length+0-1)-0].b, 1);
					F.line = 2199;
					ci_326069 = addInt(ci_326069, 1);
					F.line = 2200;
					curr_326067 = c_326418.prev;
				}
		} while(false);
		F.line = 2201;
		var gi_326438 = 0;
		L3: do {
			F.line = 2202;
			var g_326616 = null;
			F.line = 3920;
			var i_327125 = 0;
			F.line = 3921;
			var l_327127 = (result_325977.groups != null ? result_325977.groups.length : 0);
			L4: do {
				F.line = 3922;
					L5: while (true) {
					if (!(i_327125 < l_327127)) break L5;
						F.line = 3923;
						g_326616 = result_325977.groups[chckIndx(i_327125, 0, result_325977.groups.length+0-1)-0];
						if ((0 < g_326616.b)) {
						F.line = 2204;
						gi_326438 = addInt(gi_326438, divInt(g_326616.b, 2));
						F.line = 2205;
						g_326616.a = gi_326438;
						F.line = 2206;
						g_326616.b = subInt(gi_326438, 1);
						}
						else {
							F.line = 2208;
							g_326616.b = -1;
						}
						
						F.line = 3924;
						i_327125 = addInt(i_327125, 1);
						if (!(((result_325977.groups != null ? result_325977.groups.length : 0) == l_327127))) {
						F.line = 3925;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3925, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((modInt(ci_326069, 2) == 0))) {
		F.line = 2209;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.nimble/pkgs/regex-0.10.1/regex.nim(2209, 10) `ci mod 2 == 0` "));
		}
		
		if (((result_325977.captures != null ? result_325977.captures.length : 0) == 0)) {
		F.line = 2211;
		result_325977.captures = nimCopy(null, new_seq_326020(chckRange(divInt(ci_326069, 2), 0, 2147483647)), NTI326025);
		}
		else {
			F.line = 2213;
		if (result_325977.captures.length < chckRange(divInt(ci_326069, 2), 0, 2147483647)) { for (var i=result_325977.captures.length;i<chckRange(divInt(ci_326069, 2), 0, 2147483647);++i) result_325977.captures.push({a: 0, b: 0}); }
               else { result_325977.captures.length = chckRange(divInt(ci_326069, 2), 0, 2147483647); };
		}
		
		F.line = 2214;
		curr_326067 = c_idx_325992;
		L6: do {
			F.line = 2215;
				L7: while (true) {
				if (!!((curr_326067 == 0))) break L7;
					F.line = 2217;
					var c_327110 = HEX5BHEX5D_326322(captured_325991, curr_326067);
					F.line = 2218;
					var g_327111 = nimCopy(null, result_325977.groups[chckIndx(c_327110.idx, 0, result_325977.groups.length+0-1)-0], NTI25907);
					F.line = 2219;
					switch (c_327110.kind) {
					case 1:
						F.line = 2221;
						result_325977.captures[chckIndx(subInt(g_327111.a, 1), 0, result_325977.captures.length+0-1)-0].b = c_327110.cpIdx;
						break;
					case 0:
						F.line = 2223;
						result_325977.captures[chckIndx(subInt(g_327111.a, 1), 0, result_325977.captures.length+0-1)-0].a = c_327110.cpIdx;
						F.line = 2224;
						result_325977.groups[chckIndx(c_327110.idx, 0, result_325977.groups.length+0-1)-0].a = subInt(result_325977.groups[chckIndx(c_327110.idx, 0, result_325977.groups.length+0-1)-0].a, 1);
						break;
					}
					F.line = 2225;
					curr_326067 = c_327110.prev;
				}
		} while(false);
	framePtr = F.prev;

	
}

function set_regex_match_332830(m_332833, pattern_332834, ds_332835) {
	var result_332836 = false;

	var F={procname:"regex.setRegexMatch",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2360;
		result_332836 = false;
		L1: do {
			F.line = 2361;
			var state_332837 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
			F.line = 2176;
			var colontmp__332859 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};
			F.line = 2361;
			nimCopy(colontmp__332859, ds_332835.Field3, NTI324639);
			L2: do {
				F.line = 2177;
				var s_332863 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
				F.line = 725;
				var colontmp__332865 = {s: null, pos: 0};
				F.line = 2177;
				nimCopy(colontmp__332865, colontmp__332859.states, NTI324646);
				F.line = 726;
				var i_332867 = 0;
				L3: do {
					F.line = 727;
						L4: while (true) {
						if (!(i_332867 < colontmp__332865.pos)) break L4;
							F.line = 728;
							nimCopy(s_332863, colontmp__332865.s[chckIndx(i_332867, 0, colontmp__332865.s.length+0-1)-0], NTI320468);
							F.line = 2178;
							nimCopy(state_332837, s_332863, NTI320468);
							if ((pattern_332834.states[chckIndx(state_332837.Field0, 0, pattern_332834.states.length+0-1)-0].kind == 45)) {
							F.line = 2363;
							clear_320523(m_332833);
							F.line = 2364;
							nimCopy(m_332833.boundaries, HEX2EHEX2E_48828(state_332837.Field2, subInt(state_332837.Field3, 1)), NTI25907);
							if ((0 < pattern_332834.groupsCount)) {
							F.line = 2366;
							populate_captures_325974(m_332833, ds_332835.Field2, state_332837.Field1, ((pattern_332834.groupsCount)|0));
							F.line = 2367;
							nimCopy(m_332833.namedGroups, pattern_332834.namedGroups, NTI301986);
							}
							
							F.line = 2368;
							result_332836 = true;
							break BeforeRet;
							}
							
							F.line = 729;
							i_332867 = addInt(i_332867, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_332836;

}

function find_impl_333461(ds_333464, s_333465, pattern_333466, m_333468, start_333469) {
									var Tmp6;
									var Tmp7;
					var Tmp15;
					var Tmp16;

	var result_333471 = false;

	var F={procname:"regex.findImpl",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2465;
		clear_330167(ds_333464);
		F.line = 2466;
		var states_count_333480 = chckRange((pattern_333466.states != null ? (pattern_333466.states.length-1) : -1), -32768, 32767);
		F.line = 2467;
		var si_333481 = start_333469;
		L1: do {
			F.line = 2468;
			var i_333482 = 0;
			F.line = 2468;
			var cp_333483 = 0;
			F.line = 2468;
			var nxt_333484 = 0;
			F.line = 2241;
			var prev_333552 = -1;
			F.line = 2242;
			var j_333554 = 0;
			L2: do {
				F.line = 2243;
				var i_333556 = 0;
				F.line = 2243;
				var r_333558 = 0;
				F.line = 2231;
				var i_333560 = start_333469;
				F.line = 2232;
				var result_333562 = 0;
				L3: do {
					F.line = 2233;
						L4: while (true) {
						if (!(i_333560 < (s_333465 != null ? s_333465.length : 0))) break L4;
							if ((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] <= 127)) {
							F.line = 59;
							result_333562 = s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0];
							F.line = 60;
							i_333560 = addInt(i_333560, 1);
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 5) == 6)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 2))) {
							F.line = 64;
							result_333562 = (((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 31) << 6) | (s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63));
							F.line = 66;
							i_333560 = addInt(i_333560, 2);
							}
							else {
								F.line = 68;
								result_333562 = 65533;
								F.line = 69;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 4) == 14)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 3))) {
							F.line = 74;
							result_333562 = ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 15) << 12) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63));
							F.line = 77;
							i_333560 = addInt(i_333560, 3);
							}
							else {
								F.line = 79;
								result_333562 = 65533;
								F.line = 80;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 3) == 30)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 4))) {
							F.line = 86;
							result_333562 = (((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 7) << 18) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 12)) | ((s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 3), 0, s_333465.length+0-1)-0] & 63));
							F.line = 90;
							i_333560 = addInt(i_333560, 4);
							}
							else {
								F.line = 92;
								result_333562 = 65533;
								F.line = 93;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 2) == 62)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 5))) {
							F.line = 100;
							result_333562 = ((((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 3) << 24) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 18)) | ((s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63) << 12)) | ((s_333465[chckIndx(addInt(i_333560, 3), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 4), 0, s_333465.length+0-1)-0] & 63));
							F.line = 105;
							i_333560 = addInt(i_333560, 5);
							}
							else {
								F.line = 107;
								result_333562 = 65533;
								F.line = 108;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
							if ((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] >>> 0) >>> 1) == 126)) {
							if ((i_333560 <= subInt((s_333465 != null ? s_333465.length : 0), 6))) {
							F.line = 116;
							result_333562 = (((((((s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0] & 1) << 30) | ((s_333465[chckIndx(addInt(i_333560, 1), 0, s_333465.length+0-1)-0] & 63) << 24)) | ((s_333465[chckIndx(addInt(i_333560, 2), 0, s_333465.length+0-1)-0] & 63) << 18)) | ((s_333465[chckIndx(addInt(i_333560, 3), 0, s_333465.length+0-1)-0] & 63) << 12)) | ((s_333465[chckIndx(addInt(i_333560, 4), 0, s_333465.length+0-1)-0] & 63) << 6)) | (s_333465[chckIndx(addInt(i_333560, 5), 0, s_333465.length+0-1)-0] & 63));
							F.line = 122;
							i_333560 = addInt(i_333560, 6);
							}
							else {
								F.line = 124;
								result_333562 = 65533;
								F.line = 125;
								i_333560 = addInt(i_333560, 1);
							}
							
							}
							else {
								F.line = 127;
								result_333562 = s_333465[chckIndx(i_333560, 0, s_333465.length+0-1)-0];
								F.line = 128;
								i_333560 = addInt(i_333560, 1);
							}
							}}}}}
							F.line = 2235;
							i_333556 = i_333560;
							F.line = 2235;
							r_333558 = result_333562;
							F.line = 2244;
							i_333482 = j_333554;
							F.line = 2244;
							cp_333483 = prev_333552;
							F.line = 2244;
							nxt_333484 = r_333558;
							L5: do {
									if ((len_325231(ds_333464.Field3) == 0)) Tmp6 = true; else {										Tmp6 = !((pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, subInt(len_325231(ds_333464.Field3), 1)).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45));									}								if (Tmp6) {
								F.line = 2472;
								clear_324519(ds_333464.Field0);
								F.line = 2473;
								var state_333500 = {Field0: states_count_333480, Field1: 0, Field2: si_333481, Field3: si_333481};
								F.line = 2474;
								step_331258(ds_333464.Field3, pattern_333466, state_333500, ds_333464, cp_333483, nxt_333484);
								F.line = 2475;
								si_333481 = i_333482;
								}
								
									if (!(0 < len_325231(ds_333464.Field3))) Tmp7 = false; else {										Tmp7 = (pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, 0).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45);									}								if (Tmp7) {
								F.line = 2479;
								break L1;
								}
								
								if (HEX3DHEX3D_41480(cp_333483, -1)) {
								F.line = 2481;
								break L5;
								}
								
								L8: do {
									F.line = 2482;
									var st_333512 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
									F.line = 2176;
									var colontmp__333540 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};
									F.line = 2482;
									nimCopy(colontmp__333540, ds_333464.Field3, NTI324639);
									L9: do {
										F.line = 2177;
										var s_333544 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
										F.line = 725;
										var colontmp__333546 = {s: null, pos: 0};
										F.line = 2177;
										nimCopy(colontmp__333546, colontmp__333540.states, NTI324646);
										F.line = 726;
										var i_333548 = 0;
										L10: do {
											F.line = 727;
												L11: while (true) {
												if (!(i_333548 < colontmp__333546.pos)) break L11;
													F.line = 728;
													nimCopy(s_333544, colontmp__333546.s[chckIndx(i_333548, 0, colontmp__333546.s.length+0-1)-0], NTI320468);
													F.line = 2178;
													nimCopy(st_333512, s_333544, NTI320468);
													L12: do {
														F.line = 2483;
														var n_333513 = nimCopy(null, pattern_333466.states[chckIndx(st_333512.Field0, 0, pattern_333466.states.length+0-1)-0], NTI281230);
														if ((n_333513.kind == 45)) {
														F.line = 2486;
														add_325724(ds_333464.Field4, st_333512);
														F.line = 2487;
														break L8;
														}
														
														if (!(match_283404(n_333513, cp_333483))) {
														F.line = 2489;
														break L12;
														}
														
														F.line = 2490;
														clear_324519(ds_333464.Field0);
														F.line = 2491;
														step_from_332790(ds_333464.Field4, n_333513, pattern_333466, ds_333464, st_333512.Field1, st_333512.Field2, i_333482, cp_333483, nxt_333484);
													} while(false);
													F.line = 729;
													i_333548 = addInt(i_333548, 1);
												}
										} while(false);
									} while(false);
								} while(false);
								F.line = 2493;
								var Tmp13 = ds_333464.Field3; ds_333464.Field3 = ds_333464.Field4; ds_333464.Field4 = Tmp13;								F.line = 2494;
								clear_325487(ds_333464.Field4);
							} while(false);
							F.line = 2245;
							prev_333552 = r_333558;
							F.line = 2246;
							j_333554 = i_333556;
						}
				} while(false);
			} while(false);
			F.line = 2247;
			i_333482 = j_333554;
			F.line = 2247;
			cp_333483 = prev_333552;
			F.line = 2247;
			nxt_333484 = -1;
			L14: do {
					if ((len_325231(ds_333464.Field3) == 0)) Tmp15 = true; else {						Tmp15 = !((pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, subInt(len_325231(ds_333464.Field3), 1)).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45));					}				if (Tmp15) {
				F.line = 2472;
				clear_324519(ds_333464.Field0);
				F.line = 2473;
				var state_333571 = {Field0: states_count_333480, Field1: 0, Field2: si_333481, Field3: si_333481};
				F.line = 2474;
				step_331258(ds_333464.Field3, pattern_333466, state_333571, ds_333464, cp_333483, nxt_333484);
				F.line = 2475;
				si_333481 = i_333482;
				}
				
					if (!(0 < len_325231(ds_333464.Field3))) Tmp16 = false; else {						Tmp16 = (pattern_333466.states[chckIndx(HEX5BHEX5D_324732(ds_333464.Field3, 0).Field0, 0, pattern_333466.states.length+0-1)-0].kind == 45);					}				if (Tmp16) {
				F.line = 2479;
				break L1;
				}
				
				if (HEX3DHEX3D_41480(cp_333483, -1)) {
				F.line = 2481;
				break L14;
				}
				
				L17: do {
					F.line = 2482;
					var st_333573 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
					F.line = 2176;
					var colontmp__333575 = {states: {s: null, pos: 0}, ids: {s: null, key: 0}};
					F.line = 2482;
					nimCopy(colontmp__333575, ds_333464.Field3, NTI324639);
					L18: do {
						F.line = 2177;
						var s_333577 = {Field0: 0, Field1: 0, Field2: 0, Field3: 0};
						F.line = 725;
						var colontmp__333579 = {s: null, pos: 0};
						F.line = 2177;
						nimCopy(colontmp__333579, colontmp__333575.states, NTI324646);
						F.line = 726;
						var i_333581 = 0;
						L19: do {
							F.line = 727;
								L20: while (true) {
								if (!(i_333581 < colontmp__333579.pos)) break L20;
									F.line = 728;
									nimCopy(s_333577, colontmp__333579.s[chckIndx(i_333581, 0, colontmp__333579.s.length+0-1)-0], NTI320468);
									F.line = 2178;
									nimCopy(st_333573, s_333577, NTI320468);
									L21: do {
										F.line = 2483;
										var n_333583 = nimCopy(null, pattern_333466.states[chckIndx(st_333573.Field0, 0, pattern_333466.states.length+0-1)-0], NTI281230);
										if ((n_333583.kind == 45)) {
										F.line = 2486;
										add_325724(ds_333464.Field4, st_333573);
										F.line = 2487;
										break L17;
										}
										
										if (!(match_283404(n_333583, cp_333483))) {
										F.line = 2489;
										break L21;
										}
										
										F.line = 2490;
										clear_324519(ds_333464.Field0);
										F.line = 2491;
										step_from_332790(ds_333464.Field4, n_333583, pattern_333466, ds_333464, st_333573.Field1, st_333573.Field2, i_333482, cp_333483, nxt_333484);
									} while(false);
									F.line = 729;
									i_333581 = addInt(i_333581, 1);
								}
						} while(false);
					} while(false);
				} while(false);
				F.line = 2493;
				var Tmp22 = ds_333464.Field3; ds_333464.Field3 = ds_333464.Field4; ds_333464.Field4 = Tmp22;				F.line = 2494;
				clear_325487(ds_333464.Field4);
			} while(false);
		} while(false);
		F.line = 2495;
		result_333471 = set_regex_match_332830(m_333468, pattern_333466, ds_333464);
	framePtr = F.prev;

	return result_333471;

}

function find_333597(s_333599, pattern_333600, m_333602, start_333603) {
	var result_333605 = false;

	var F={procname:"regex.find",prev:framePtr,filename:"../../../../.nimble/pkgs/regex-0.10.1/regex.nim",line:0};
	framePtr = F;
		F.line = 2512;
		var ds_333615 = [init_data_sets_329898((pattern_333600.states != null ? pattern_333600.states.length : 0), (0 < pattern_333600.groupsCount))];
		F.line = 2515;
		result_333605 = find_impl_333461(ds_333615[0], s_333599, pattern_333600, m_333602, start_333603);
	framePtr = F.prev;

	return result_333605;

}

function get_next_token_346041(lexer_346043, line_346044, idx_346046, idx_346046_Idx) {
				var Tmp1;
				var Tmp2;
				var Tmp3;
				var Tmp4;
				var Tmp5;
				var Tmp6;
				var Tmp7;
				var Tmp8;
				var Tmp9;
				var Tmp10;
				var Tmp11;
				var Tmp12;
				var Tmp13;
				var Tmp14;
				var Tmp15;
				var Tmp16;
				var Tmp17;
				var Tmp18;
				var Tmp19;
				var Tmp20;
				var Tmp21;
				var Tmp22;
				var Tmp23;

	var result_346047 = null;

	var F={procname:"lexer.getNextToken",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 139;
		switch (line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0]) {
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 95:
			F.line = 114;
			var m_346105 = [{captures: null, groups: null, namedGroups: {data: null, counter: 0}, boundaries: {a: 0, b: 0}}];
			if (!(find_333597(line_346044, regex_name_343885[0], m_346105[0], idx_346046[idx_346046_Idx]))) {
			F.line = 116;
			raiseException(new_syntax_error_156096(makeNimstrLit("Invalid identifier"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			F.line = 117;
			var first_346108 = m_346105[0].boundaries.a;
			F.line = 118;
			var last_346110 = m_346105[0].boundaries.b;
			F.line = 119;
			idx_346046[idx_346046_Idx] = addInt(last_346110, 1);
			F.line = 120;
			result_346047 = new_token_node_343922(2, lexer_346043.lineNo, first_346108, HEX5BHEX5D_48874(line_346044, HEX2EHEX2E_48828(first_346108, last_346110)));
			break;
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			F.line = 114;
			var m_346161 = [{captures: null, groups: null, namedGroups: {data: null, counter: 0}, boundaries: {a: 0, b: 0}}];
			if (!(find_333597(line_346044, regex_number_343908[0], m_346161[0], idx_346046[idx_346046_Idx]))) {
			F.line = 116;
			raiseException(new_syntax_error_156096(makeNimstrLit("Invalid number"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			F.line = 117;
			var first_346164 = m_346161[0].boundaries.a;
			F.line = 118;
			var last_346166 = m_346161[0].boundaries.b;
			F.line = 119;
			idx_346046[idx_346046_Idx] = addInt(last_346166, 1);
			F.line = 120;
			result_346047 = new_token_node_343922(3, lexer_346043.lineNo, first_346164, HEX5BHEX5D_48874(line_346044, HEX2EHEX2E_48828(first_346164, last_346166)));
			break;
		case 34:
		case 39:
			F.line = 145;
			var pairing_char_346210 = line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0];
			if ((idx_346046[idx_346046_Idx] == subInt((line_346044 != null ? line_346044.length : 0), 1))) {
			F.line = 148;
			raiseException(new_syntax_error_156096(makeNimstrLit("Invalid string syntax"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			F.line = 149;
			var l_346211 = skip_until_38050(line_346044, pairing_char_346210, addInt(idx_346046[idx_346046_Idx], 1));
			if ((addInt(addInt(idx_346046[idx_346046_Idx], l_346211), 1) == (line_346044 != null ? line_346044.length : 0))) {
			F.line = 151;
			raiseException(new_syntax_error_156096(makeNimstrLit("Invalid string syntax"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			else {
				F.line = 153;
				result_346047 = new_token_node_343922(4, lexer_346043.lineNo, idx_346046[idx_346046_Idx], HEX5BHEX5D_48874(line_346044, HEX2EHEX2E_48828(addInt(idx_346046[idx_346046_Idx], 1), addInt(idx_346046[idx_346046_Idx], l_346211))));
				F.line = 154;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], addInt(l_346211, 2));
			}
			
			break;
		case 10:
			F.line = 157;
			result_346047 = new_token_node_343922(5, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 158;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 40:
			F.line = 123;
			result_346047 = new_token_node_343922(8, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 160;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 41:
			F.line = 123;
			result_346047 = new_token_node_343922(9, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 162;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 91:
			F.line = 123;
			result_346047 = new_token_node_343922(10, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 164;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 93:
			F.line = 123;
			result_346047 = new_token_node_343922(11, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 166;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 58:
			F.line = 123;
			result_346047 = new_token_node_343922(12, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 168;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 44:
			F.line = 123;
			result_346047 = new_token_node_343922(13, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 170;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 59:
			F.line = 123;
			result_346047 = new_token_node_343922(14, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 172;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 43:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp1 = false; else {					Tmp1 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp1) {
			F.line = 131;
			result_346047 = new_token_node_343922(37, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(15, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 45:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp2 = false; else {					Tmp2 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp2) {
			F.line = 177;
			result_346047 = new_token_node_343922(38, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 178;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp3 = false; else {					Tmp3 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 62);				}			if (Tmp3) {
			F.line = 180;
			result_346047 = new_token_node_343922(52, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 181;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(16, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 183;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			}
			break;
		case 42:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp4 = false; else {					Tmp4 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 42);				}			if (Tmp4) {
			F.line = 186;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp5 = false; else {					Tmp5 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp5) {
			F.line = 188;
			result_346047 = new_token_node_343922(47, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 189;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 191;
				result_346047 = new_token_node_343922(36, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 192;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(17, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 194;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 47:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp6 = false; else {					Tmp6 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 47);				}			if (Tmp6) {
			F.line = 197;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp7 = false; else {					Tmp7 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp7) {
			F.line = 199;
			result_346047 = new_token_node_343922(49, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 200;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 202;
				result_346047 = new_token_node_343922(48, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 203;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(18, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 205;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 124:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp8 = false; else {					Tmp8 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp8) {
			F.line = 131;
			result_346047 = new_token_node_343922(43, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(19, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 38:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp9 = false; else {					Tmp9 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp9) {
			F.line = 131;
			result_346047 = new_token_node_343922(42, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(20, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 60:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp10 = false; else {					Tmp10 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp10) {
			F.line = 212;
			result_346047 = new_token_node_343922(30, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 213;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp11 = false; else {					Tmp11 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 60);				}			if (Tmp11) {
			F.line = 215;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp12 = false; else {					Tmp12 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp12) {
			F.line = 217;
			result_346047 = new_token_node_343922(45, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 218;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 220;
				result_346047 = new_token_node_343922(34, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 221;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp13 = false; else {					Tmp13 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 62);				}			if (Tmp13) {
			F.line = 223;
			raiseException(new_syntax_error_156096(makeNimstrLit("<> in PEP401 not implemented"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(21, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 225;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			}}
			break;
		case 62:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp14 = false; else {					Tmp14 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp14) {
			F.line = 228;
			result_346047 = new_token_node_343922(31, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 229;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp15 = false; else {					Tmp15 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 62);				}			if (Tmp15) {
			F.line = 231;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp16 = false; else {					Tmp16 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp16) {
			F.line = 233;
			result_346047 = new_token_node_343922(46, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 234;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 236;
				result_346047 = new_token_node_343922(35, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 237;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(22, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 239;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			}
			break;
		case 61:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp17 = false; else {					Tmp17 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp17) {
			F.line = 131;
			result_346047 = new_token_node_343922(28, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(23, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 46:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 2))) Tmp19 = false; else {					Tmp19 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 46);				}				if (!Tmp19) Tmp18 = false; else {					Tmp18 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 2), 0, line_346044.length+0-1)-0] == 46);				}			if (Tmp18) {
			F.line = 244;
			result_346047 = new_token_node_343922(53, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 245;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 3);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(24, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 247;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 37:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp20 = false; else {					Tmp20 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp20) {
			F.line = 131;
			result_346047 = new_token_node_343922(41, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(25, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 123:
			F.line = 123;
			result_346047 = new_token_node_343922(26, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 251;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 125:
			F.line = 123;
			result_346047 = new_token_node_343922(27, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 253;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 33:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp21 = false; else {					Tmp21 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp21) {
			F.line = 256;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			F.line = 123;
			result_346047 = new_token_node_343922(29, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 257;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			else {
				F.line = 259;
				raiseException(new_syntax_error_156096(makeNimstrLit("Single ! not allowed"), [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			}
			
			break;
		case 126:
			F.line = 123;
			result_346047 = new_token_node_343922(32, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 261;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			break;
		case 94:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp22 = false; else {					Tmp22 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp22) {
			F.line = 131;
			result_346047 = new_token_node_343922(44, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(33, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		case 64:
				if (!(idx_346046[idx_346046_Idx] < subInt((line_346044 != null ? line_346044.length : 0), 1))) Tmp23 = false; else {					Tmp23 = (line_346044[chckIndx(addInt(idx_346046[idx_346046_Idx], 1), 0, line_346044.length+0-1)-0] == 61);				}			if (Tmp23) {
			F.line = 131;
			result_346047 = new_token_node_343922(51, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
			F.line = 132;
			idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 2);
			}
			else {
				F.line = 123;
				result_346047 = new_token_node_343922(50, lexer_346043.lineNo, idx_346046[idx_346046_Idx], []);
				F.line = 134;
				idx_346046[idx_346046_Idx] = addInt(idx_346046[idx_346046_Idx], 1);
			}
			
			break;
		default: 
			F.line = 267;
			var fmt_res_346845 = mnewString(0);
			F.line = 267;
			if (fmt_res_346845 != null) { fmt_res_346845 = (fmt_res_346845).concat(makeNimstrLit("Unknown character ")); } else { fmt_res_346845 = makeNimstrLit("Unknown character "); };
			F.line = 268;
			if (fmt_res_346845 != null) { addChar(fmt_res_346845, line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0]); } else { fmt_res_346845 = [line_346044[chckIndx(idx_346046[idx_346046_Idx], 0, line_346044.length+0-1)-0]]; };
			F.line = 267;
			raiseException(new_syntax_error_156096(fmt_res_346845, [], lexer_346043.lineNo, idx_346046[idx_346046_Idx]), "SyntaxError:ObjectType");
			break;
		}
		if (!(!((result_346047 == null)))) {
		F.line = 268;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(268, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_346047;

}

function lex_one_line_347214(lexer_347216, line_347217) {
	var F={procname:"lexer.lexOneLine",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((nsuFindStr(line_347217, makeNimstrLit("\x0A"), 0, 0) == -1))) {
		F.line = 273;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(273, 10) `find(line, \"\\n\", 0, 0) == -1` "));
		}
		
		F.line = 275;
		var idx_347402 = [0];
		L1: do {
			F.line = 277;
				L2: while (true) {
				if (!((idx_347402[0] < (line_347217 != null ? line_347217.length : 0)) && (line_347217[chckIndx(idx_347402[0], 0, line_347217.length+0-1)-0] == 32))) break L2;
					F.line = 278;
					idx_347402[0] = addInt(idx_347402[0], 1);
				}
		} while(false);
		if (((idx_347402[0] == (line_347217 != null ? line_347217.length : 0)) || (line_347217[chckIndx(idx_347402[0], 0, line_347217.length+0-1)-0] == 35))) {
		F.line = 280;
		break BeforeRet;
		}
		
		if (!((modInt(idx_347402[0], 4) == 0))) {
		F.line = 283;
		raiseException(new_syntax_error_156096(makeNimstrLit("Indentation must be 4 spaces."), [], lexer_347216.lineNo, 0), "SyntaxError:ObjectType");
		}
		
		F.line = 284;
		var indent_level_347412 = divInt(idx_347402[0], 4);
		F.line = 285;
		var diff_347413 = subInt(indent_level_347412, lexer_347216.indentLevel);
		if ((diff_347413 < 0)) {
		L3: do {
			F.line = 287;
			var i_347422 = 0;
			F.line = 3617;
			var i_347450 = diff_347413;
			L4: do {
				F.line = 3618;
					L5: while (true) {
					if (!(i_347450 < 0)) break L5;
						F.line = 3619;
						i_347422 = i_347450;
						F.line = 288;
						add_345915(lexer_347216, 7, mulInt(addInt(lexer_347216.indentLevel, i_347422), 4));
						F.line = 3620;
						i_347450 = addInt(i_347450, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L6: do {
				F.line = 290;
				var i_347433 = 0;
				F.line = 3617;
				var i_347455 = 0;
				L7: do {
					F.line = 3618;
						L8: while (true) {
						if (!(i_347455 < diff_347413)) break L8;
							F.line = 3619;
							i_347433 = i_347455;
							F.line = 291;
							add_345915(lexer_347216, 6, mulInt(addInt(lexer_347216.indentLevel, i_347433), 4));
							F.line = 3620;
							i_347455 = addInt(i_347455, 1);
						}
				} while(false);
			} while(false);
		}
		
		F.line = 292;
		lexer_347216.indentLevel = indent_level_347412;
		L9: do {
			F.line = 294;
				L10: while (true) {
				if (!(idx_347402[0] < (line_347217 != null ? line_347217.length : 0))) break L10;
					F.line = 295;
					switch (line_347217[chckIndx(idx_347402[0], 0, line_347217.length+0-1)-0]) {
					case 32:
						F.line = 297;
						idx_347402[0] = addInt(idx_347402[0], 1);
						break;
					case 35:
						F.line = 299;
						break L9;
						break;
					default: 
						F.line = 301;
						add_345888(lexer_347216, get_next_token_346041(lexer_347216, line_347217, idx_347402, 0));
						break;
					}
				}
		} while(false);
		F.line = 302;
		add_345915(lexer_347216, 5, idx_347402[0]);
	} while (false);
	framePtr = F.prev;

	
}

function lex_string_347471(lexer_347473, input_347474, mode_347476) {
	var F={procname:"lexer.lexString",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(!((mode_347476 == 2)))) {
		F.line = 306;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/lexer.nim(306, 10) `\x0Anot (mode == Eval)` "));
		}
		
		if (((mode_347476 == 0) && ((input_347474 != null ? input_347474.length : 0) == 0))) {
		F.line = 310;
		dedent_all_346014(lexer_347473);
		F.line = 311;
		add_345915(lexer_347473, 5, 0);
		F.line = 312;
		lexer_347473.lineNo = addInt(lexer_347473.lineNo, 1);
		F.line = 313;
		add_source_337238(lexer_347473.fileName, input_347474);
		F.line = 314;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 316;
			var line_347620 = null;
			F.line = 455;
			var last_347810 = 0;
			F.line = 456;
			var splits_347812 = -1;
			L2: do {
				F.line = 614;
					L3: while (true) {
					if (!(last_347810 <= (input_347474 != null ? input_347474.length : 0))) break L3;
						F.line = 459;
						var first_347814 = last_347810;
						L4: do {
							F.line = 460;
								L5: while (true) {
								if (!((last_347810 < (input_347474 != null ? input_347474.length : 0)) && !(substr_eq_132789(input_347474, last_347810, makeNimstrLit("\x0A"))))) break L5;
									F.line = 461;
									last_347810 = addInt(last_347810, 1);
								}
						} while(false);
						if ((splits_347812 == 0)) {
						F.line = 462;
						last_347810 = (input_347474 != null ? input_347474.length : 0);
						}
						
						F.line = 463;
						line_347620 = substr_23422(input_347474, first_347814, subInt(last_347810, 1));
						F.line = 318;
						lexer_347473.lineNo = addInt(lexer_347473.lineNo, 1);
						F.line = 319;
						add_source_337238(lexer_347473.fileName, input_347474);
						F.line = 320;
						lex_one_line_347214(lexer_347473, line_347620);
						if ((splits_347812 == 0)) {
						F.line = 464;
						break L2;
						}
						
						F.line = 465;
						splits_347812 = subInt(splits_347812, 1);
						F.line = 466;
						last_347810 = addInt(last_347810, 1);
					}
			} while(false);
		} while(false);
		F.line = 325;
		switch (mode_347476) {
		case 1:
			F.line = 327;
			dedent_all_346014(lexer_347473);
			F.line = 328;
			add_345915(lexer_347473, 1, 0);
			break;
		case 0:
			break;
		case 2:
			F.line = 332;
			add_345915(lexer_347473, 1, 0);
			break;
		}
	} while (false);
	framePtr = F.prev;

	
}

function match_token_212497(node_212499, token_212500) {
			var Tmp1;

	var result_259271 = false;

	var F={procname:"grammar.matchToken",prev:framePtr,filename:"../Parser/grammar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (is_terminator_203174(node_212499.token)) {
		if ((node_212499 == success_grammar_node_212501)) {
		F.line = 604;
		result_259271 = true;
		break BeforeRet;
		}
		else {
			F.line = 606;
			result_259271 = (node_212499.token == token_212500);
			break BeforeRet;
		}
		
		}
		else {
			F.line = 608;
			result_259271 = ((Tmp1 = HEX5BHEX5D_255063(grammar_set_212224[0], node_212499.token), Tmp1[0])[Tmp1[1]].firstSet[token_212500] != undefined);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_259271;

}

function new_parse_node_348061(token_node_348063) {
	var result_348064 = null;

	var F={procname:"parser.newParseNode",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
		if (!(is_terminator_203174(token_node_348063.token))) {
		F.line = 27;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(27, 10) `isTerminator(tokenNode.token)` "));
		}
		
		F.line = 28;
		result_348064 = {tokenNode: null, children: null, grammarNodeSeq: null};
		F.line = 29;
		result_348064.tokenNode = token_node_348063;
	framePtr = F.prev;

	return result_348064;

}

function new_parse_node_348222(token_node_348224, first_token_348225) {
			var Tmp1;
		var Tmp2;

	var result_348226 = null;

	var F={procname:"parser.newParseNode",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
		if (!(((Tmp1 = HEX5BHEX5D_255063(grammar_set_212224[0], token_node_348224.token), Tmp1[0])[Tmp1[1]].firstSet[first_token_348225.token] != undefined))) {
		F.line = 33;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(33, 3) `contains(grammarSet[tokenNode.token].firstSet, firstToken.token)` "));
		}
		
		F.line = 34;
		result_348226 = {tokenNode: null, children: null, grammarNodeSeq: null};
		F.line = 35;
		result_348226.tokenNode = token_node_348224;
		F.line = 36;
		var g_node_348885 = (Tmp2 = HEX5BHEX5D_255063(grammar_set_212224[0], token_node_348224.token), Tmp2[0])[Tmp2[1]].rootNode;
		F.line = 37;
		var to_add_348886 = null;
		L3: do {
			F.line = 38;
			var child_348894 = null;
			F.line = 100;
			var colontmp__349412 = {data: null, counter: 0};
			F.line = 38;
			nimCopy(colontmp__349412, g_node_348885.epsilonSet, NTI212034);
			if (!(is_valid_214572(colontmp__349412))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L4: do {
				F.line = 120;
				var h_349416 = 0;
				F.line = 2104;
				var colontmp__349418 = 0;
				F.line = 120;
				colontmp__349418 = (colontmp__349412.data != null ? (colontmp__349412.data.length-1) : -1);
				F.line = 2107;
				var res_349420 = 0;
				L5: do {
					F.line = 2108;
						L6: while (true) {
						if (!(res_349420 <= colontmp__349418)) break L6;
							F.line = 2109;
							h_349416 = res_349420;
							if (is_filled_154282(colontmp__349412.data[chckIndx(h_349416, 0, colontmp__349412.data.length+0-1)-0].Field0)) {
							F.line = 121;
							child_348894 = colontmp__349412.data[chckIndx(h_349416, 0, colontmp__349412.data.length+0-1)-0].Field1;
							if (match_token_212497(child_348894, first_token_348225.token)) {
							F.line = 40;
							if (result_348226.grammarNodeSeq != null) { result_348226.grammarNodeSeq.push(child_348894); } else { result_348226.grammarNodeSeq = [child_348894]; };
							if (is_terminator_203174(child_348894.token)) {
							if ((to_add_348886 === null)) {
							F.line = 43;
							to_add_348886 = new_parse_node_348061(first_token_348225);
							}
							else {
								if (!((to_add_348886.tokenNode.token == child_348894.token))) {
								F.line = 45;
								failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(45, 18) `toAdd.tokenNode.token == child.token` "));
								}
								
							}
							
							}
							else {
								if ((to_add_348886 === null)) {
								F.line = 48;
								to_add_348886 = new_parse_node_348222(new_token_node_343922(child_348894.token, -1, -1, []), first_token_348225);
								}
								else {
									if (!((to_add_348886.tokenNode.token == child_348894.token))) {
									F.line = 50;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(50, 18) `toAdd.tokenNode.token == child.token` "));
									}
									
								}
								
							}
							
							}
							
							}
							
							F.line = 2110;
							res_349420 = addInt(res_349420, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		if (!(!((to_add_348886 === null)))) {
		F.line = 51;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(51, 3) `not isNil(toAdd)` "));
		}
		
		F.line = 52;
		if (result_348226.children != null) { result_348226.children.push(to_add_348886); } else { result_348226.children = [to_add_348886]; };
	framePtr = F.prev;

	return result_348226;

}

function HEX5BHEX5D_351593(s_351600, x_351603) {
	var result_351605 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_351801 = x_351603.a;
		F.line = 3707;
		var l_352007 = addInt(subInt(subInt((s_351600 != null ? s_351600.length : 0), x_351603.b), a_351801), 1);
		F.line = 3708;
		result_351605 = new Array(chckRange(l_352007, 0, 2147483647)); for (var i=0;i<chckRange(l_352007, 0, 2147483647);++i) {result_351605[i]=null;}		L1: do {
			F.line = 3709;
			var i_352027 = 0;
			F.line = 3617;
			var i_352035 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_352035 < l_352007)) break L3;
						F.line = 3619;
						i_352027 = i_352035;
						F.line = 3709;
						result_351605[chckIndx(i_352027, 0, result_351605.length+0-1)-0] = s_351600[chckIndx(addInt(i_352027, a_351801), 0, s_351600.length+0-1)-0];
						F.line = 3620;
						i_352035 = addInt(i_352035, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_351605;

}

function HEX5BHEX5D_350330(s_350336, i_350338) {
	var result_350340 = [null, 0];
	var result_350340_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_350340 = s_350336; result_350340_Idx = chckIndx(subInt((s_350336 != null ? s_350336.length : 0), i_350338), 0, s_350336.length+0-1)-0;
	framePtr = F.prev;

	return [result_350340, result_350340_Idx];

}

function apply_token_350383(node_350385, token_350386) {

							function add_nexts_350392(gn_350394) {
																var Tmp6;

								var F={procname:"applyToken.addNexts",prev:framePtr,filename:"../Parser/parser.nim",line:0};
								framePtr = F;
									L1: do {
										F.line = 79;
										var next_gn_350403 = null;
										F.line = 100;
										var colontmp__350626 = {data: null, counter: 0};
										F.line = 79;
										nimCopy(colontmp__350626, gn_350394.nextSet, NTI212034);
										if (!(is_valid_214572(colontmp__350626))) {
										F.line = 119;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
										}
										
										L2: do {
											F.line = 120;
											var h_350630 = 0;
											F.line = 2104;
											var colontmp__350632 = 0;
											F.line = 120;
											colontmp__350632 = (colontmp__350626.data != null ? (colontmp__350626.data.length-1) : -1);
											F.line = 2107;
											var res_350634 = 0;
											L3: do {
												F.line = 2108;
													L4: while (true) {
													if (!(res_350634 <= colontmp__350632)) break L4;
														F.line = 2109;
														h_350630 = res_350634;
														if (is_filled_154282(colontmp__350626.data[chckIndx(h_350630, 0, colontmp__350626.data.length+0-1)-0].Field0)) {
														F.line = 121;
														next_gn_350403 = colontmp__350626.data[chckIndx(h_350630, 0, colontmp__350626.data.length+0-1)-0].Field1;
														L5: do {
															if (match_token_212497(next_gn_350403, token_350386.token)) {
															F.line = 81;
															if (new_gn_seq_350390 != null) { new_gn_seq_350390.push(next_gn_350403); } else { new_gn_seq_350390 = [next_gn_350403]; };
															if ((next_gn_350403 == success_grammar_node_212501)) {
															F.line = 83;
															break L5;
															}
															
															if (this_layer_350391) {
															if (!(((Tmp6 = HEX5BHEX5D_350330(node_350385.children, 1), Tmp6[0])[Tmp6[1]].tokenNode.token == next_gn_350403.token))) {
															F.line = 86;
															failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(86, 18) `node.children[BackwardsIndex(1)].tokenNode.token == nextGn.token` "));
															}
															
															}
															else {
																F.line = 88;
																this_layer_350391 = true;
																if (is_terminator_203174(next_gn_350403.token)) {
																F.line = 90;
																if (node_350385.children != null) { node_350385.children.push(new_parse_node_348061(token_350386)); } else { node_350385.children = [new_parse_node_348061(token_350386)]; };
																}
																else {
																	F.line = 92;
																if (node_350385.children != null) { node_350385.children.push(new_parse_node_348222(new_token_node_343922(next_gn_350403.token, -1, -1, []), token_350386)); } else { node_350385.children = [new_parse_node_348222(new_token_node_343922(next_gn_350403.token, -1, -1, []), token_350386)]; };
																}
																
															}
															
															}
															
														} while(false);
														}
														
														F.line = 2110;
														res_350634 = addInt(res_350634, 1);
													}
											} while(false);
										} while(false);
									} while(false);
								framePtr = F.prev;

								
							}
								var Tmp4;
		var Tmp5;
			var Tmp6;

	var result_350387 = 0;

	var F={procname:"parser.applyToken",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 75;
		F.line = 75;
		var g_node_seq_350388 = nimCopy(null, node_350385.grammarNodeSeq, NTI348051);
		F.line = 76;
		var new_gn_seq_350390 = null;
		F.line = 77;
		var this_layer_350391 = false;
		F.line = 94;
		var non_terminator_token_appeared_350650 = false;
		F.line = 95;
		var child_status_350651 = 0;
		L1: do {
			F.line = 96;
			var gn_350660 = null;
			F.line = 3911;
			var i_351232 = 0;
			F.line = 3912;
			var l_351234 = (g_node_seq_350388 != null ? g_node_seq_350388.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_351232 < l_351234)) break L3;
						F.line = 3914;
						gn_350660 = g_node_seq_350388[chckIndx(i_351232, 0, g_node_seq_350388.length+0-1)-0];
						F.line = 97;
						switch (gn_350660.kind) {
						case 97:
							if (is_terminator_203174(gn_350660.token)) {
							F.line = 100;
							add_nexts_350392(gn_350660);
							}
							else {
								if (!(non_terminator_token_appeared_350650)) {
								F.line = 103;
								child_status_350651 = apply_token_350383((Tmp4 = HEX5BHEX5D_350330(node_350385.children, 1), Tmp4[0])[Tmp4[1]], token_350386);
								F.line = 104;
								non_terminator_token_appeared_350650 = true;
								}
								
								F.line = 105;
								switch (child_status_350651) {
								case 0:
									F.line = 107;
									if (new_gn_seq_350390 != null) { new_gn_seq_350390.push(gn_350660); } else { new_gn_seq_350390 = [gn_350660]; };
									break;
								case 2:
									break;
								case 1:
									F.line = 111;
									add_nexts_350392(gn_350660);
									break;
								}
							}
							
							break;
						case 115:
							break;
						default: 
							F.line = 115;
							F.line = 115;
							var fmt_res_350692 = mnewString(0);
							F.line = 115;
							if (fmt_res_350692 != null) { fmt_res_350692 = (fmt_res_350692).concat(makeNimstrLit("Grammar Node of ")); } else { fmt_res_350692 = makeNimstrLit("Grammar Node of "); };
							F.line = 270;
							if (fmt_res_350692 != null) { fmt_res_350692 = (fmt_res_350692).concat(HEX24_212438(gn_350660)); } else { fmt_res_350692 = HEX24_212438(gn_350660).slice(); };
							F.line = 115;
							if (fmt_res_350692 != null) { fmt_res_350692 = (fmt_res_350692).concat(makeNimstrLit(" has kind ")); } else { fmt_res_350692 = makeNimstrLit(" has kind "); };
							F.line = 268;
							if (fmt_res_350692 != null) { addChar(fmt_res_350692, gn_350660.kind); } else { fmt_res_350692 = [gn_350660.kind]; };
							var msg_351001 = nimCopy(null, fmt_res_350692, NTI138);
							F.line = 116;
							rawEcho(msg_351001);
							if (true) {
							F.line = 117;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Parser/parser.nim(117, 14) `false` "));
							}
							
							break;
						}
						F.line = 3915;
						i_351232 = addInt(i_351232, 1);
						if (!(((g_node_seq_350388 != null ? g_node_seq_350388.length : 0) == l_351234))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (((new_gn_seq_350390 != null ? new_gn_seq_350390.length : 0) == 0)) {
		F.line = 120;
		result_350387 = 2;
		break BeforeRet;
		}
		else {
			F.line = 122;
			node_350385.grammarNodeSeq = nimCopy(null, new_gn_seq_350390, NTI350389);
		}
		
			if (!((node_350385.grammarNodeSeq != null ? node_350385.grammarNodeSeq.length : 0) == 1)) Tmp6 = false; else {				Tmp6 = (node_350385.grammarNodeSeq[chckIndx(0, 0, node_350385.grammarNodeSeq.length+0-1)-0] == success_grammar_node_212501);			}		if (Tmp6) {
		Tmp5 = 1;
		}
		else {
		Tmp5 = 0;
		}
		
		result_350387 = Tmp5;
	} while (false);
	framePtr = F.prev;

	return result_350387;

}

function clear_tokens_345839(lexer_345841) {
	var F={procname:"lexer.clearTokens",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		if (!(((lexer_345841.tokenNodes != null ? lexer_345841.tokenNodes.length : 0) == 0))) {
		F.line = 84;
		if (lexer_345841.tokenNodes.length < 0) { for (var i=lexer_345841.tokenNodes.length;i<0;++i) lexer_345841.tokenNodes.push(null); }
               else { lexer_345841.tokenNodes.length = 0; };
		}
		
	framePtr = F.prev;

	
}

function parse_with_state_351248(input_351250, lexer_351251, mode_351253, parse_node_arg_351254) {
		var Tmp1;
			var Tmp3;

	var result_351255 = null;

	var F={procname:"parser.parseWithState",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 136;
		F.line = 136;
		lex_string_347471(lexer_351251, input_351250, mode_351253);
		F.line = 137;
		try {
		F.line = 138;
		var token_seq_351256 = nimCopy(null, lexer_351251.tokenNodes, NTI337147);
		if (((token_seq_351256 != null ? token_seq_351256.length : 0) == 0)) {
		F.line = 140;
		break BeforeRet;
		}
		
		F.line = 141;
		var parse_node_351264 = null;
		F.line = 142;
		var start_351266 = 0;
		if ((parse_node_arg_351254 === null)) {
		F.line = 146;
		var first_token_351274 = token_seq_351256[chckIndx(0, 0, token_seq_351256.length+0-1)-0];
		F.line = 147;
		start_351266 = 1;
		F.line = 148;
		var root_token_351275 = 0;
		F.line = 149;
		switch (mode_351253) {
		case 0:
			F.line = 151;
			root_token_351275 = 91;
			break;
		case 1:
			F.line = 153;
			root_token_351275 = 92;
			break;
		case 2:
			F.line = 155;
			root_token_351275 = 93;
			break;
		}
		if (!(((Tmp3 = HEX5BHEX5D_255063(grammar_set_212224[0], root_token_351275), Tmp3[0])[Tmp3[1]].firstSet[first_token_351274.token] != undefined))) {
		F.line = 157;
		raiseException(new_syntax_error_156096(makeNimstrLit("SyntaxError"), [], first_token_351274.lineNo, first_token_351274.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 158;
		parse_node_351264 = new_parse_node_348222(new_token_node_343922(root_token_351275, -1, -1, []), first_token_351274);
		}
		else {
			F.line = 160;
			parse_node_351264 = parse_node_arg_351254;
		}
		
		L4: do {
			F.line = 161;
			var token_352058 = null;
			F.line = 3909;
			var colontmp__352207 = null;
			F.line = 161;
			colontmp__352207 = HEX5BHEX5D_351593(token_seq_351256, HEX2EHEX2E_81053(start_351266, 1));
			F.line = 3911;
			var i_352210 = 0;
			F.line = 3912;
			var l_352212 = (colontmp__352207 != null ? colontmp__352207.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_352210 < l_352212)) break L6;
						F.line = 3914;
						token_352058 = colontmp__352207[chckIndx(i_352210, 0, colontmp__352207.length+0-1)-0];
						L7: do {
							F.line = 162;
							var status_352059 = apply_token_350383(parse_node_351264, token_352058);
							F.line = 165;
							switch (status_352059) {
							case 0:
								F.line = 167;
								break L7;
								break;
							default: 
								F.line = 169;
								raiseException(new_syntax_error_156096(makeNimstrLit("SyntaxError"), [], token_352058.lineNo, token_352058.colNo), "SyntaxError:ObjectType");
								break;
							}
						} while(false);
						F.line = 3915;
						i_352210 = addInt(i_352210, 1);
						if (!(((colontmp__352207 != null ? colontmp__352207.length : 0) == l_352212))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		Tmp1 = parse_node_351264;
		} finally {
		framePtr = F;
		F.line = 173;
		clear_tokens_345839(lexer_351251);
		}
		result_351255 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_351255;

}

function getCurrentException() {
	var result_15296 = null;

		if (is_nim_exception_15277()) {
		result_15296 = lastJSError;
		}
		

	return result_15296;

}

function from_bltin_syntax_error_486149(e_486151, file_name_486152) {
	var result_486153 = null;

	var F={procname:"exceptionsImpl.fromBltinSyntaxError",prev:framePtr,filename:"../Objects/exceptionsImpl.nim",line:0};
	framePtr = F;
		F.line = 73;
		F.line = 73;
		F.line = 104;
		var excp_486155 = new_py_syntax_error_simple_372601();
		F.line = 105;
		excp_486155.tk = 15;
		F.line = 106;
		excp_486155.thrown = true;
		F.line = 107;
		excp_486155.msg = new_py_string_176075(e_486151.message);
		var excp_obj_486157 = excp_486155;
		F.line = 75;
		if (excp_obj_486157.traceBacks != null) { excp_obj_486157.traceBacks.push({Field0: file_name_486152, Field1: null, Field2: e_486151.lineNo, Field3: e_486151.colNo}); } else { excp_obj_486157.traceBacks = [{Field0: file_name_486152, Field1: null, Field2: e_486151.lineNo, Field3: e_486151.colNo}]; };
		result_486153 = excp_obj_486157;
	framePtr = F.prev;

	return result_486153;

}

function new_seq_596405(len_596409) {
	var result_596411 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_596411 = new Array(len_596409); for (var i=0;i<len_596409;++i) {result_596411[i]={Field0: null, Field1: null, Field2: 0, Field3: 0};}	framePtr = F.prev;

	return result_596411;

}

function reversed_596260(a_596265, first_596267, last_596269) {
	var result_596271 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		if (!((subInt(first_596267, 1) <= last_596269))) {
		F.line = 54;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(54, 10) `\x0Afirst - 1 <= last` "));
		}
		
		F.line = 55;
		var i_596401 = subInt(last_596269, first_596267);
		F.line = 56;
		var x_596402 = first_596267;
		F.line = 57;
		result_596271 = nimCopy(null, new_seq_596405(chckRange(addInt(i_596401, 1), 0, 2147483647)), NTI596410);
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!(0 <= i_596401)) break L2;
					F.line = 59;
					nimCopy(result_596271[chckIndx(i_596401, 0, result_596271.length+0-1)-0], a_596265[chckIndx(x_596402, 0, a_596265.length+0-1)-0], NTI357165);
					F.line = 60;
					i_596401 = subInt(i_596401, 1);
					F.line = 61;
					x_596402 = addInt(x_596402, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_596271;

}

function reversed_596244(a_596249) {
	var result_596251 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_596251 = nimCopy(null, reversed_596260(a_596249, 0, (a_596249 != null ? (a_596249.length-1) : -1)), NTI596270);
	framePtr = F.prev;

	return result_596251;

}

function nsuStrip(s_132637, leading_132638, trailing_132639, chars_132641) {
					var Tmp5;

	var result_132642 = null;

		var first_132644 = 0;
		var last_132645 = ((s_132637 != null ? s_132637.length : 0) - 1);
		if (leading_132638) {
		L1: do {
				L2: while (true) {
				if (!((first_132644 <= last_132645) && (chars_132641[s_132637[first_132644]] != undefined))) break L2;
					first_132644 += 1;
				}
		} while(false);
		}
		
		if (trailing_132639) {
		L3: do {
				L4: while (true) {
					if (!(0 <= last_132645)) Tmp5 = false; else {						Tmp5 = (chars_132641[s_132637[last_132645]] != undefined);					}				if (!Tmp5) break L4;
					last_132645 -= 1;
				}
		} while(false);
		}
		
		result_132642 = nimCopy(null, substr_23422(s_132637, first_132644, last_132645), NTI138);

	return result_132642;

}

function get_source_342875(file_path_342877, line_no_342878) {
		var Tmp1;

	var result_342879 = null;

	var F={procname:"lexer.getSource",prev:framePtr,filename:"../Parser/lexer.nim",line:0};
	framePtr = F;
		F.line = 40;
		result_342879 = nimCopy(null, (Tmp1 = HEX5BHEX5D_342444(source_files_337224[0], file_path_342877), Tmp1[0])[Tmp1[1]].lines[chckIndx(subInt(line_no_342878, 1), 0, (Tmp1 = HEX5BHEX5D_342444(source_files_337224[0], file_path_342877), Tmp1[0])[Tmp1[1]].lines.length+0-1)-0], NTI138);
	framePtr = F.prev;

	return result_342879;

}

function nsuIndent(s_135663, count_135664, padding_135665) {
						var Tmp6;

	var result_135666 = null;

		result_135666 = nimCopy(null, [], NTI138);
		var i_135668 = 0;
		L1: do {
			var line_135669 = null;
			var first_135703 = 0;
			var last_135705 = 0;
			var eolpos_135707 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!((last_135705 < (s_135663 != null ? s_135663.length : 0)) && !((ConstSet21[s_135663[last_135705]] != undefined)))) break L5;
									last_135705 += 1;
								}
						} while(false);
						eolpos_135707 = last_135705;
						if ((last_135705 < (s_135663 != null ? s_135663.length : 0))) {
						if ((s_135663[last_135705] == 10)) {
						last_135705 += 1;
						}
						else {
						if ((s_135663[last_135705] == 13)) {
						last_135705 += 1;
						if (((last_135705 < (s_135663 != null ? s_135663.length : 0)) && (s_135663[last_135705] == 10))) {
						last_135705 += 1;
						}
						
						}
						}
						}
						
						if (false) {
						Tmp6 = (last_135705 - 1);
						}
						else {
						Tmp6 = (eolpos_135707 - 1);
						}
						
						line_135669 = substr_23422(s_135663, first_135703, Tmp6);
						if (!((i_135668 == 0))) {
						if (result_135666 != null) { result_135666 = (result_135666).concat(makeNimstrLit("\x0A")); } else { result_135666 = makeNimstrLit("\x0A"); };
						}
						
						L7: do {
							var j_135681 = 0;
							var colontmp__135693 = 0;
							colontmp__135693 = count_135664;
							var res_135696 = 1;
							L8: do {
									L9: while (true) {
									if (!(res_135696 <= colontmp__135693)) break L9;
										j_135681 = res_135696;
										if (result_135666 != null) { result_135666 = (result_135666).concat(padding_135665); } else { result_135666 = padding_135665.slice(); };
										res_135696 += 1;
									}
							} while(false);
						} while(false);
						if (result_135666 != null) { result_135666 = (result_135666).concat(line_135669); } else { result_135666 = line_135669.slice(); };
						i_135668 += 1;
						if ((eolpos_135707 == last_135705)) {
						break L2;
						}
						
						first_135703 = last_135705;
					}
			} while(false);
		} while(false);

	return result_135666;

}

function fmt_trace_back_595040(tb_595042) {
	var result_595043 = null;

	var F={procname:"traceback.fmtTraceBack",prev:framePtr,filename:"traceback.nim",line:0};
	framePtr = F;
		if (!(of_py_str_object_175092(tb_595042.Field0))) {
		F.line = 11;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/traceback.nim(11, 10) `ofPyStrObject(tb.fileName)` "));
		}
		
		if (!(!((tb_595042.Field2 == 0)))) {
		F.line = 13;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/traceback.nim(13, 10) `\x0Anot (tb.lineNo == 0)` "));
		}
		
		F.line = 14;
		var file_name_595401 = nimCopy(null, tb_595042.Field0.str, NTI138);
		F.line = 15;
		var at_where_595402 = null;
		if ((tb_595042.Field1 === null)) {
		F.line = 17;
		at_where_595402 = nimCopy(null, [], NTI138);
		}
		else {
			if (!(of_py_str_object_175092(tb_595042.Field1))) {
			F.line = 19;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/traceback.nim(19, 12) `ofPyStrObject(tb.funName)` "));
			}
			
			F.line = 20;
			at_where_595402 = nimCopy(null, (makeNimstrLit(", in ")).concat(tb_595042.Field1.str), NTI138);
		}
		
		F.line = 21;
		F.line = 21;
		var fmt_res_595604 = mnewString(0);
		F.line = 21;
		if (fmt_res_595604 != null) { fmt_res_595604 = (fmt_res_595604).concat(makeNimstrLit("  File \"")); } else { fmt_res_595604 = makeNimstrLit("  File \""); };
		F.line = 260;
		if (fmt_res_595604 != null) { fmt_res_595604 = (fmt_res_595604).concat(file_name_595401); } else { fmt_res_595604 = file_name_595401.slice(); };
		F.line = 21;
		if (fmt_res_595604 != null) { fmt_res_595604 = (fmt_res_595604).concat(makeNimstrLit("\", line ")); } else { fmt_res_595604 = makeNimstrLit("\", line "); };
		F.line = 270;
		if (fmt_res_595604 != null) { fmt_res_595604 = (fmt_res_595604).concat(cstrToNimstr((tb_595042.Field2)+"")); } else { fmt_res_595604 = cstrToNimstr((tb_595042.Field2)+"").slice(); };
		F.line = 260;
		if (fmt_res_595604 != null) { fmt_res_595604 = (fmt_res_595604).concat(at_where_595402); } else { fmt_res_595604 = at_where_595402.slice(); };
		F.line = 21;
		if (fmt_res_595604 != null) { fmt_res_595604 = (fmt_res_595604).concat(makeNimstrLit("\x0A")); } else { fmt_res_595604 = makeNimstrLit("\x0A"); };
		if (result_595043 != null) { result_595043 = (result_595043).concat(fmt_res_595604); } else { result_595043 = fmt_res_595604.slice(); };
		F.line = 22;
		if (result_595043 != null) { result_595043 = (result_595043).concat((makeNimstrLit("    ")).concat(nsuStrip(get_source_342875(file_name_595401, tb_595042.Field2), true, true, ConstSet20))); } else { result_595043 = (makeNimstrLit("    ")).concat(nsuStrip(get_source_342875(file_name_595401, tb_595042.Field2), true, true, ConstSet20)).slice(); };
		if (!((tb_595042.Field3 == -1))) {
		F.line = 24;
		if (result_595043 != null) { result_595043 = (result_595043).concat((makeNimstrLit("\x0A    ")).concat(nsuIndent(makeNimstrLit("^"), chckRange(tb_595042.Field3, 0, 2147483647), makeNimstrLit(" ")))); } else { result_595043 = (makeNimstrLit("\x0A    ")).concat(nsuIndent(makeNimstrLit("^"), chckRange(tb_595042.Field3, 0, 2147483647), makeNimstrLit(" "))).slice(); };
		}
		
	framePtr = F.prev;

	return result_595043;

}

function reversed_596666(a_596671, first_596673, last_596675) {
	var result_596677 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		if (!((subInt(first_596673, 1) <= last_596675))) {
		F.line = 54;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(54, 10) `\x0Afirst - 1 <= last` "));
		}
		
		F.line = 55;
		var i_596801 = subInt(last_596675, first_596673);
		F.line = 56;
		var x_596802 = first_596673;
		F.line = 57;
		result_596677 = nimCopy(null, new_seq_178023(chckRange(addInt(i_596801, 1), 0, 2147483647)), NTI178028);
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!(0 <= i_596801)) break L2;
					F.line = 59;
					result_596677[chckIndx(i_596801, 0, result_596677.length+0-1)-0] = nimCopy(null, a_596671[chckIndx(x_596802, 0, a_596671.length+0-1)-0], NTI138);
					F.line = 60;
					i_596801 = subInt(i_596801, 1);
					F.line = 61;
					x_596802 = addInt(x_596802, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_596677;

}

function reversed_596650(a_596655) {
	var result_596657 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_596657 = nimCopy(null, reversed_596666(a_596655, 0, (a_596655 != null ? (a_596655.length-1) : -1)), NTI596676);
	framePtr = F.prev;

	return result_596657;

}

function print_tb_596216(excp_596218) {
	var F={procname:"traceback.printTb",prev:framePtr,filename:"traceback.nim",line:0};
	framePtr = F;
		F.line = 28;
		var cur_596219 = excp_596218;
		F.line = 29;
		var excp_strs_596221 = null;
		L1: do {
			F.line = 30;
				L2: while (true) {
				if (!!((cur_596219 === null))) break L2;
					F.line = 31;
					var single_excp_strs_596230 = null;
					F.line = 32;
					if (single_excp_strs_596230 != null) { single_excp_strs_596230.push(makeNimstrLit("Traceback (most recent call last):")); } else { single_excp_strs_596230 = [makeNimstrLit("Traceback (most recent call last):")]; };
					L3: do {
						F.line = 33;
						var tb_596615 = {Field0: null, Field1: null, Field2: 0, Field3: 0};
						F.line = 3909;
						var colontmp__596869 = null;
						F.line = 33;
						colontmp__596869 = reversed_596244(cur_596219.traceBacks);
						F.line = 3911;
						var i_596872 = 0;
						F.line = 3912;
						var l_596874 = (colontmp__596869 != null ? colontmp__596869.length : 0);
						L4: do {
							F.line = 3913;
								L5: while (true) {
								if (!(i_596872 < l_596874)) break L5;
									F.line = 3914;
									nimCopy(tb_596615, colontmp__596869[chckIndx(i_596872, 0, colontmp__596869.length+0-1)-0], NTI357165);
									F.line = 34;
									if (single_excp_strs_596230 != null) { single_excp_strs_596230.push(fmt_trace_back_595040(tb_596615)); } else { single_excp_strs_596230 = [fmt_trace_back_595040(tb_596615)]; };
									F.line = 3915;
									i_596872 = addInt(i_596872, 1);
									if (!(((colontmp__596869 != null ? colontmp__596869.length : 0) == l_596874))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 35;
					var Tmp6 = nimCopy(null, repr_py_base_error_object_magic_473314(cur_596219).str, NTI138);
					if (single_excp_strs_596230 != null) { single_excp_strs_596230.push(Tmp6); } else { single_excp_strs_596230 = [Tmp6]; };
					F.line = 36;
					if (excp_strs_596221 != null) { excp_strs_596221.push(nsuJoinSep(single_excp_strs_596230, makeNimstrLit("\x0A"))); } else { excp_strs_596221 = [nsuJoinSep(single_excp_strs_596230, makeNimstrLit("\x0A"))]; };
					F.line = 37;
					cur_596219 = cur_596219.context;
				}
		} while(false);
		F.line = 38;
		var join_msg_596646 = makeNimstrLit("\x0A\x0ADuring handling of the above exception, another exception occured\x0A\x0A");
		F.line = 14;
		rawEcho(nsuJoinSep(reversed_596650(excp_strs_596221), join_msg_596646));
		L7: do {
			F.line = 15;
			var line_596866 = null;
			F.line = 597;
			var colontmp__596876 = null;
			F.line = 39;
			colontmp__596876 = nsuJoinSep(reversed_596650(excp_strs_596221), join_msg_596646);
			F.line = 455;
			var last_596880 = 0;
			F.line = 456;
			var splits_596882 = -1;
			L8: do {
				F.line = 614;
					L9: while (true) {
					if (!(last_596880 <= (colontmp__596876 != null ? colontmp__596876.length : 0))) break L9;
						F.line = 459;
						var first_596884 = last_596880;
						L10: do {
							F.line = 460;
								L11: while (true) {
								if (!((last_596880 < (colontmp__596876 != null ? colontmp__596876.length : 0)) && !(substr_eq_132789(colontmp__596876, last_596880, makeNimstrLit("\x0A"))))) break L11;
									F.line = 461;
									last_596880 = addInt(last_596880, 1);
								}
						} while(false);
						if ((splits_596882 == 0)) {
						F.line = 462;
						last_596880 = (colontmp__596876 != null ? colontmp__596876.length : 0);
						}
						
						F.line = 463;
						line_596866 = substr_23422(colontmp__596876, first_596884, subInt(last_596880, 1));
						F.line = 16;
						log(" ", toJSStr(line_596866));
						if ((splits_596882 == 0)) {
						F.line = 464;
						break L8;
						}
						
						F.line = 465;
						splits_596882 = subInt(splits_596882, 1);
						F.line = 466;
						last_596880 = addInt(last_596880, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function finished_350088(node_350090) {
							var Tmp4;
							var Tmp5;

	var result_350091 = false;

	var F={procname:"parser.finished",prev:framePtr,filename:"../Parser/parser.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 63;
		var non_terminator_token_appeared_350092 = false;
		L1: do {
			F.line = 64;
			var gn_350101 = null;
			F.line = 3909;
			var colontmp__350364 = null;
			F.line = 64;
			colontmp__350364 = node_350090.grammarNodeSeq;
			F.line = 3911;
			var i_350367 = 0;
			F.line = 3912;
			var l_350369 = (colontmp__350364 != null ? colontmp__350364.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_350367 < l_350369)) break L3;
						F.line = 3914;
						gn_350101 = colontmp__350364[chckIndx(i_350367, 0, colontmp__350364.length+0-1)-0];
						if (!(contains_224741(gn_350101.nextSet, success_grammar_node_212501))) {
						F.line = 66;
						result_350091 = false;
						break BeforeRet;
						}
						
							if (!!(non_terminator_token_appeared_350092)) Tmp4 = false; else {								Tmp4 = !(is_terminator_203174(gn_350101.token));							}						if (Tmp4) {
						F.line = 68;
						non_terminator_token_appeared_350092 = true;
						if (!(finished_350088((Tmp5 = HEX5BHEX5D_350330(node_350090.children, 1), Tmp5[0])[Tmp5[1]]))) {
						F.line = 70;
						result_350091 = false;
						break BeforeRet;
						}
						
						}
						
						F.line = 3915;
						i_350367 = addInt(i_350367, 1);
						if (!(((colontmp__350364 != null ? colontmp__350364.length : 0) == l_350369))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 71;
		result_350091 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_350091;

}

function new_ast_module_178845() {
	var result_178847 = null;

	var F={procname:"asdl.newAstModule",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_178847 = {m_type: NTI178837, body: null, kind: 0};
		F.line = 111;
		result_178847.kind = 0;
	framePtr = F.prev;

	return result_178847;

}

function new_ast_unary_op_180010() {
	var result_180012 = null;

	var F={procname:"asdl.newAstUnaryOp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180012 = {m_type: NTI180002, op: null, operand: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180012.kind = 2;
	framePtr = F.prev;

	return result_180012;

}

function new_unary_op_401475(op_401477, operand_401478) {
	var result_401479 = null;

	var F={procname:"ast.newUnaryOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 67;
		result_401479 = new_ast_unary_op_180010();
		F.line = 68;
		result_401479.op = op_401477;
		F.line = 69;
		result_401479.operand = operand_401478;
	framePtr = F.prev;

	return result_401479;

}

function new_ast_not_181628() {
	var result_181630 = null;

	var F={procname:"asdl.newAstNot",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181630 = {m_type: NTI181624, kind: 0};
		F.line = 111;
		result_181630.kind = 1;
	framePtr = F.prev;

	return result_181630;

}

function new_int_401060(value_401062) {
	var result_401063 = null;

	var F={procname:"ast.newInt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 33;
		result_401063 = {m_type: NTI177024, value: 0};
		F.line = 34;
		result_401063.value = value_401062;
	framePtr = F.prev;

	return result_401063;

}

function new_ast_tuple_180810() {
	var result_180812 = null;

	var F={procname:"asdl.newAstTuple",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180812 = {m_type: NTI180800, elts: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180812.kind = 24;
	framePtr = F.prev;

	return result_180812;

}

function new_ast_load_180841() {
	var result_180843 = null;

	var F={procname:"asdl.newAstLoad",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180843 = {m_type: NTI180837, kind: 0};
		F.line = 111;
		result_180843.kind = 0;
	framePtr = F.prev;

	return result_180843;

}

function new_tuple_401511(elts_401514) {
	var result_401515 = null;

	var F={procname:"ast.newTuple",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 78;
		result_401515 = new_ast_tuple_180810();
		F.line = 79;
		result_401515.elts = nimCopy(null, elts_401514, NTI401513);
		F.line = 80;
		result_401515.ctx = new_ast_load_180841();
	framePtr = F.prev;

	return result_401515;

}

function new_ast_list_comp_180193() {
	var result_180195 = null;

	var F={procname:"asdl.newAstListComp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180195 = {m_type: NTI180183, elt: null, generators: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180195.kind = 7;
	framePtr = F.prev;

	return result_180195;

}

function new_ast_comprehension_182041() {
	var result_182043 = null;

	var F={procname:"asdl.newAstComprehension",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182043 = {m_type: NTI182027, target: null, iter: null, ifs: null, is_async: null, kind: 0};
		F.line = 111;
		result_182043.kind = 0;
	framePtr = F.prev;

	return result_182043;

}

function ast_expr_list_401710(parse_node_401712) {
	var result_424224 = null;

	var F={procname:"ast.astExprList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1129;
		if (!((parse_node_401712.tokenNode.token == 165))) {
		F.line = 1129;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1129, 3) `parseNode.tokenNode.token == exprlist` "));
		}
		
		if (!(((parse_node_401712.children != null ? parse_node_401712.children.length : 0) == 1))) {
		F.line = 1130;
		raiseException(new_syntax_error_156096(makeNimstrLit("unpacking in for loop not implemented"), [], parse_node_401712.children[chckIndx(1, 0, parse_node_401712.children.length+0-1)-0].tokenNode.lineNo, parse_node_401712.children[chckIndx(1, 0, parse_node_401712.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1131;
		var child_424410 = parse_node_401712.children[chckIndx(0, 0, parse_node_401712.children.length+0-1)-0];
		if (!((child_424410.tokenNode.token == 150))) {
		F.line = 1133;
		raiseException(new_syntax_error_156096(makeNimstrLit("unpacking in for loop not implemented"), [], child_424410.tokenNode.lineNo, child_424410.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		result_424224 = ast_expr_401666(child_424410);
	framePtr = F.prev;

	return result_424224;

}

function ast_sync_comp_for_401729(parse_node_401731) {
	var result_425818 = null;

	var F={procname:"ast.astSyncCompFor",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401731.tokenNode.token == 172))) {
		F.line = 1206;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1206, 3) `parseNode.tokenNode.token == sync_comp_for` "));
		}
		
		if (((parse_node_401731.children != null ? parse_node_401731.children.length : 0) == 5)) {
		F.line = 1207;
		raiseException(new_syntax_error_156096(makeNimstrLit("Complex comprehension not implemented"), [], parse_node_401731.children[chckIndx(5, 0, parse_node_401731.children.length+0-1)-0].tokenNode.lineNo, parse_node_401731.children[chckIndx(5, 0, parse_node_401731.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1208;
		var comp_426010 = new_ast_comprehension_182041();
		F.line = 1209;
		comp_426010.target = ast_expr_list_401710(parse_node_401731.children[chckIndx(1, 0, parse_node_401731.children.length+0-1)-0]);
		F.line = 1210;
		set_store_402278(comp_426010.target);
		F.line = 1211;
		comp_426010.iter = ast_or_test_401651(parse_node_401731.children[chckIndx(3, 0, parse_node_401731.children.length+0-1)-0]);
		F.line = 1212;
		if (result_425818 != null) { result_425818.push(comp_426010); } else { result_425818 = [comp_426010]; };
	framePtr = F.prev;

	return result_425818;

}

function ast_comp_for_401733(parse_node_401735) {
	var result_426038 = null;

	var F={procname:"ast.astCompFor",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_401735.tokenNode.token == 173))) {
		F.line = 1217;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1217, 3) `parseNode.tokenNode.token == comp_for` "));
		}
		
		if (((parse_node_401735.children != null ? parse_node_401735.children.length : 0) == 2)) {
		F.line = 1218;
		raiseException(new_syntax_error_156096(makeNimstrLit("Async comprehension not implemented"), [], parse_node_401735.children[chckIndx(0, 0, parse_node_401735.children.length+0-1)-0].tokenNode.lineNo, parse_node_401735.children[chckIndx(0, 0, parse_node_401735.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1219;
		result_426038 = nimCopy(null, ast_sync_comp_for_401729(parse_node_401735.children[chckIndx(0, 0, parse_node_401735.children.length+0-1)-0]), NTI401732);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_426038;

}

function HEX5BHEX5D_414235(s_414242, x_414245) {
	var result_414247 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_414401 = x_414245.a;
		F.line = 3707;
		var l_414607 = addInt(subInt(subInt((s_414242 != null ? s_414242.length : 0), x_414245.b), a_414401), 1);
		F.line = 3708;
		result_414247 = new Array(chckRange(l_414607, 0, 2147483647)); for (var i=0;i<chckRange(l_414607, 0, 2147483647);++i) {result_414247[i]=null;}		L1: do {
			F.line = 3709;
			var i_414627 = 0;
			F.line = 3617;
			var i_414635 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_414635 < l_414607)) break L3;
						F.line = 3619;
						i_414627 = i_414635;
						F.line = 3709;
						result_414247[chckIndx(i_414627, 0, result_414247.length+0-1)-0] = s_414242[chckIndx(addInt(i_414627, a_414401), 0, s_414242.length+0-1)-0];
						F.line = 3620;
						i_414635 = addInt(i_414635, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_414247;

}

function ast_testlist_comp_401696(parse_node_401698) {
			var Tmp1;

	var result_422434 = null;

	var F={procname:"ast.astTestlistComp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_401698.tokenNode.token == 160))) {
		F.line = 1029;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1029, 3) `parseNode.tokenNode.token == testlist_comp` "));
		}
		
		F.line = 1029;
		var child1_422601 = parse_node_401698.children[chckIndx(0, 0, parse_node_401698.children.length+0-1)-0];
		if ((child1_422601.tokenNode.token == 149)) {
		F.line = 1031;
		raiseException(new_syntax_error_156096(makeNimstrLit("Star expression not implemented"), [], child1_422601.tokenNode.lineNo, child1_422601.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1032;
		var test1_422613 = ast_test_401648(child1_422601);
			if (!((parse_node_401698.children != null ? parse_node_401698.children.length : 0) == 2)) Tmp1 = false; else {				Tmp1 = (parse_node_401698.children[chckIndx(1, 0, parse_node_401698.children.length+0-1)-0].tokenNode.token == 173);			}		if (Tmp1) {
		F.line = 1036;
		var list_comp_422630 = new_ast_list_comp_180193();
		F.line = 1038;
		list_comp_422630.elt = test1_422613;
		F.line = 1039;
		list_comp_422630.generators = nimCopy(null, ast_comp_for_401733(parse_node_401698.children[chckIndx(1, 0, parse_node_401698.children.length+0-1)-0]), NTI401736);
		F.line = 1040;
		if (result_422434 != null) { result_422434.push(list_comp_422630); } else { result_422434 = [list_comp_422630]; };
		F.line = 1041;
		break BeforeRet;
		}
		
		F.line = 1043;
		if (result_422434 != null) { result_422434.push(test1_422613); } else { result_422434 = [test1_422613]; };
		L2: do {
			F.line = 1044;
			var child_422697 = null;
			F.line = 3909;
			var colontmp__422803 = null;
			F.line = 1044;
			colontmp__422803 = HEX5BHEX5D_414235(parse_node_401698.children, HEX2EHEX2E_81053(1, 1));
			F.line = 3911;
			var i_422806 = 0;
			F.line = 3912;
			var l_422808 = (colontmp__422803 != null ? colontmp__422803.length : 0);
			L3: do {
				F.line = 3913;
					L4: while (true) {
					if (!(i_422806 < l_422808)) break L4;
						F.line = 3914;
						child_422697 = colontmp__422803[chckIndx(i_422806, 0, colontmp__422803.length+0-1)-0];
						F.line = 1045;
						switch (child_422697.tokenNode.token) {
						case 13:
							break;
						case 140:
							F.line = 1049;
							if (result_422434 != null) { result_422434.push(ast_test_401648(child_422697)); } else { result_422434 = [ast_test_401648(child_422697)]; };
							break;
						case 149:
							F.line = 1051;
							raiseException(new_syntax_error_156096(makeNimstrLit("Star expression not implemented"), [], child_422697.tokenNode.lineNo, child_422697.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						default: 
							F.line = 2895;
							var e_422718 = null;
							F.line = 2896;
							e_422718 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 25;
							e_422718.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
							F.line = 2891;
							e_422718.parent = null;
							F.line = 1053;
							raiseException(e_422718, "InternalError");
							break;
						}
						F.line = 3915;
						i_422806 = addInt(i_422806, 1);
						if (!(((colontmp__422803 != null ? colontmp__422803.length : 0) == l_422808))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_422434;

}

function new_ast_list_180773() {
	var result_180775 = null;

	var F={procname:"asdl.newAstList",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180775 = {m_type: NTI180763, elts: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180775.kind = 23;
	framePtr = F.prev;

	return result_180775;

}

function new_list_401493(elts_401496) {
	var result_401497 = null;

	var F={procname:"ast.newList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 73;
		result_401497 = new_ast_list_180773();
		F.line = 74;
		result_401497.elts = nimCopy(null, elts_401496, NTI401495);
		F.line = 75;
		result_401497.ctx = new_ast_load_180841();
	framePtr = F.prev;

	return result_401497;

}

function new_ast_dict_180121() {
	var result_180123 = null;

	var F={procname:"asdl.newAstDict",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180123 = {m_type: NTI180109, keys: null, values: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180123.kind = 5;
	framePtr = F.prev;

	return result_180123;

}

function ast_dict_or_set_maker_401716(parse_node_401718) {
	var result_424823 = null;

	var F={procname:"ast.astDictOrSetMaker",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401718.tokenNode.token == 167))) {
		F.line = 1155;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1155, 3) `parseNode.tokenNode.token == dictorsetmaker` "));
		}
		
		F.line = 1155;
		var children_425001 = nimCopy(null, parse_node_401718.children, NTI348049);
		F.line = 1156;
		var d_425002 = new_ast_dict_180121();
		L1: do {
			F.line = 1158;
			var idx_425020 = 0;
			F.line = 3616;
			var colontmp__425087 = 0;
			F.line = 1158;
			colontmp__425087 = divInt(addInt((children_425001 != null ? children_425001.length : 0), 1), 4);
			F.line = 3617;
			var i_425090 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_425090 < colontmp__425087)) break L3;
						F.line = 3619;
						idx_425020 = i_425090;
						F.line = 1159;
						var i_425021 = mulInt(idx_425020, 4);
						if (((children_425001 != null ? children_425001.length : 0) < addInt(i_425021, 3))) {
						F.line = 1161;
						raiseException(new_syntax_error_156096(makeNimstrLit("dict defination too complex (no set, no comprehension)"), [], parse_node_401718.tokenNode.lineNo, parse_node_401718.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1162;
						var c1_425031 = children_425001[chckIndx(i_425021, 0, children_425001.length+0-1)-0];
						if (!((c1_425031.tokenNode.token == 140))) {
						F.line = 1164;
						raiseException(new_syntax_error_156096(makeNimstrLit("dict defination too complex (no set, no comprehension)"), [], c1_425031.tokenNode.lineNo, c1_425031.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1165;
						if (d_425002.keys != null) { d_425002.keys.push(ast_test_401648(c1_425031)); } else { d_425002.keys = [ast_test_401648(c1_425031)]; };
						if (!((children_425001[chckIndx(addInt(i_425021, 1), 0, children_425001.length+0-1)-0].tokenNode.token == 12))) {
						F.line = 1167;
						raiseException(new_syntax_error_156096(makeNimstrLit("dict defination too complex (no set, no comprehension)"), [], parse_node_401718.tokenNode.lineNo, parse_node_401718.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1168;
						var c3_425064 = children_425001[chckIndx(addInt(i_425021, 2), 0, children_425001.length+0-1)-0];
						if (!((c3_425064.tokenNode.token == 140))) {
						F.line = 1170;
						raiseException(new_syntax_error_156096(makeNimstrLit("dict defination too complex (no set, no comprehension)"), [], c3_425064.tokenNode.lineNo, c3_425064.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 1171;
						if (d_425002.values != null) { d_425002.values.push(ast_test_401648(c3_425064)); } else { d_425002.values = [ast_test_401648(c3_425064)]; };
						F.line = 3620;
						i_425090 = addInt(i_425090, 1);
					}
			} while(false);
		} while(false);
		F.line = 1172;
		result_424823 = d_425002;
	framePtr = F.prev;

	return result_424823;

}

function new_ast_name_180736() {
	var result_180738 = null;

	var F={procname:"asdl.newAstName",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180738 = {m_type: NTI180728, id: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180738.kind = 22;
	framePtr = F.prev;

	return result_180738;

}

function new_identifier_401085(value_401087) {
	var result_401088 = null;

	var F={procname:"ast.newIdentifier",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 38;
		result_401088 = {m_type: NTI177027, value: null};
		F.line = 39;
		result_401088.value = new_py_string_176075(value_401087);
	framePtr = F.prev;

	return result_401088;

}

function new_ast_name_401110(token_node_401112) {
	var result_401113 = null;

	var F={procname:"ast.newAstName",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((ConstSet22[token_node_401112.token] != undefined))) {
		F.line = 43;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(43, 10) `contains({Token.Name, Token.Number, Token.String}, tokenNode.token)` "));
		}
		
		F.line = 44;
		result_401113 = new_ast_name_180736();
		F.line = 45;
		result_401113.id = new_identifier_401085(token_node_401112.content);
		F.line = 48;
		result_401113.ctx = new_ast_load_180841();
	framePtr = F.prev;

	return result_401113;

}

function contains_195428(s_195435, value_195437) {
	var result_195438 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1272;
		result_195438 = ((s_195435.a <= value_195437) && (value_195437 <= s_195435.b));
	framePtr = F.prev;

	return result_195438;

}

function HEX2EHEX2E_195202(a_195207, b_195209) {
	var result_195217 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_195217.a = a_195207;
		F.line = 399;
		result_195217.b = b_195209;
	framePtr = F.prev;

	return result_195217;

}

function new_ast_constant_180592() {
	var result_180594 = null;

	var F={procname:"asdl.newAstConstant",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180594 = {m_type: NTI180586, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180594.kind = 18;
	framePtr = F.prev;

	return result_180594;

}

function new_401221() {
	var result_401226 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_401401 = null;
		F.line = 211;
		r_401401 = {m_type: NTI177030, value: null};
		F.line = 212;
		result_401226 = r_401401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_401226;

}

function new_ast_constant_401215(obj_401217) {
	var result_401218 = null;

	var F={procname:"ast.newAstConstant",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 51;
		result_401218 = new_ast_constant_180592();
		F.line = 52;
		result_401218.value = new_401221();
		F.line = 53;
		result_401218.value.value = obj_401217;
	framePtr = F.prev;

	return result_401218;

}

function ast_atom_401693(parse_node_401695) {
					var Tmp1;

	var result_421150 = null;

	var F={procname:"ast.astAtom",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401695.tokenNode.token == 159))) {
		F.line = 939;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(939, 3) `parseNode.tokenNode.token == atom` "));
		}
		
		F.line = 939;
		var child1_421201 = parse_node_401695.children[chckIndx(0, 0, parse_node_401695.children.length+0-1)-0];
		F.line = 940;
		switch (child1_421201.tokenNode.token) {
		case 8:
			F.line = 942;
			switch ((parse_node_401695.children != null ? parse_node_401695.children.length : 0)) {
			case 2:
				F.line = 944;
				result_421150 = new_tuple_401511([]);
				break;
			case 3:
				F.line = 946;
				var child_421224 = parse_node_401695.children[chckIndx(1, 0, parse_node_401695.children.length+0-1)-0];
				F.line = 947;
				switch (child_421224.tokenNode.token) {
				case 176:
					F.line = 949;
					raiseException(new_syntax_error_156096(makeNimstrLit("Yield expression not implemented"), [], child_421224.tokenNode.lineNo, child_421224.tokenNode.colNo), "SyntaxError:ObjectType");
					break;
				case 160:
					F.line = 951;
					var test_list_comp_421229 = ast_testlist_comp_401696(child_421224);
					if (((test_list_comp_421229 != null ? test_list_comp_421229.length : 0) == 1)) {
					if ((test_list_comp_421229[chckIndx(0, 0, test_list_comp_421229.length+0-1)-0].kind == 7)) {
					F.line = 955;
					raiseException(new_syntax_error_156096(makeNimstrLit("generator expression not implemented"), [], child_421224.tokenNode.lineNo, child_421224.tokenNode.colNo), "SyntaxError:ObjectType");
					}
					
					F.line = 956;
					result_421150 = test_list_comp_421229[chckIndx(0, 0, test_list_comp_421229.length+0-1)-0];
					}
					else {
						F.line = 958;
						result_421150 = new_tuple_401511(test_list_comp_421229);
					}
					
					break;
				default: 
					F.line = 2895;
					var e_421253 = null;
					F.line = 2896;
					e_421253 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
					F.line = 25;
					e_421253.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
					F.line = 2891;
					e_421253.parent = null;
					F.line = 960;
					raiseException(e_421253, "InternalError");
					break;
				}
				break;
			default: 
				F.line = 2895;
				var e_421406 = null;
				F.line = 2896;
				e_421406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 25;
				e_421406.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_421406.parent = null;
				F.line = 962;
				raiseException(e_421406, "InternalError");
				break;
			}
			break;
		case 10:
			F.line = 965;
			switch ((parse_node_401695.children != null ? parse_node_401695.children.length : 0)) {
			case 2:
				F.line = 967;
				result_421150 = new_list_401493([]);
				break;
			case 3:
				F.line = 969;
				var contents_421623 = ast_testlist_comp_401696(parse_node_401695.children[chckIndx(1, 0, parse_node_401695.children.length+0-1)-0]);
					if (!((contents_421623 != null ? contents_421623.length : 0) == 1)) Tmp1 = false; else {						Tmp1 = (contents_421623[chckIndx(0, 0, contents_421623.length+0-1)-0].kind == 7);					}				if (Tmp1) {
				F.line = 971;
				result_421150 = contents_421623[chckIndx(0, 0, contents_421623.length+0-1)-0];
				}
				else {
					F.line = 973;
					result_421150 = new_list_401493(contents_421623);
				}
				
				break;
			default: 
				F.line = 2895;
				var e_421645 = null;
				F.line = 2896;
				e_421645 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 25;
				e_421645.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_421645.parent = null;
				F.line = 975;
				raiseException(e_421645, "InternalError");
				break;
			}
			break;
		case 26:
			F.line = 978;
			switch ((parse_node_401695.children != null ? parse_node_401695.children.length : 0)) {
			case 2:
				F.line = 980;
				result_421150 = new_ast_dict_180121();
				break;
			case 3:
				F.line = 982;
				result_421150 = ast_dict_or_set_maker_401716(parse_node_401695.children[chckIndx(1, 0, parse_node_401695.children.length+0-1)-0]);
				break;
			default: 
				F.line = 2895;
				var e_421814 = null;
				F.line = 2896;
				e_421814 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 25;
				e_421814.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_421814.parent = null;
				F.line = 984;
				raiseException(e_421814, "InternalError");
				break;
			}
			break;
		case 2:
			F.line = 987;
			result_421150 = new_ast_name_401110(child1_421201.tokenNode);
			break;
		case 3:
			L2: do {
				F.line = 991;
				var c_422005 = 0;
				F.line = 3927;
				var colontmp__422404 = null;
				F.line = 991;
				colontmp__422404 = child1_421201.tokenNode.content;
				F.line = 3929;
				var i_422407 = 0;
				F.line = 3930;
				var l_422409 = (colontmp__422404 != null ? colontmp__422404.length : 0);
				L3: do {
					F.line = 3931;
						L4: while (true) {
						if (!(i_422407 < l_422409)) break L4;
							F.line = 3932;
							c_422005 = colontmp__422404[chckIndx(i_422407, 0, colontmp__422404.length+0-1)-0];
							if (!(contains_195428(HEX2EHEX2E_195202(48, 57), c_422005))) {
							F.line = 993;
							var f_422182 = nsuParseFloat(child1_421201.tokenNode.content);
							F.line = 994;
							var py_float_422183 = new_py_float_376176(f_422182);
							F.line = 995;
							result_421150 = new_ast_constant_401215(py_float_422183);
							}
							
							F.line = 3933;
							i_422407 = addInt(i_422407, 1);
							if (!(((colontmp__422404 != null ? colontmp__422404.length : 0) == l_422409))) {
							F.line = 3934;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3934, 11) `len(a) == L` string modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			if ((result_421150 === null)) {
			F.line = 998;
			var py_int_422192 = new_py_int_376125(child1_421201.tokenNode.content);
			F.line = 999;
			result_421150 = new_ast_constant_401215(py_int_422192);
			}
			
			break;
		case 4:
			F.line = 1002;
			var str_seq_422195 = null;
			L5: do {
				F.line = 1003;
				var child_422204 = null;
				F.line = 3909;
				var colontmp__422411 = null;
				F.line = 1003;
				colontmp__422411 = parse_node_401695.children;
				F.line = 3911;
				var i_422414 = 0;
				F.line = 3912;
				var l_422416 = (colontmp__422411 != null ? colontmp__422411.length : 0);
				L6: do {
					F.line = 3913;
						L7: while (true) {
						if (!(i_422414 < l_422416)) break L7;
							F.line = 3914;
							child_422204 = colontmp__422411[chckIndx(i_422414, 0, colontmp__422411.length+0-1)-0];
							F.line = 1004;
							var Tmp8 = nimCopy(null, child_422204.tokenNode.content, NTI138);
							if (str_seq_422195 != null) { str_seq_422195.push(Tmp8); } else { str_seq_422195 = [Tmp8]; };
							F.line = 3915;
							i_422414 = addInt(i_422414, 1);
							if (!(((colontmp__422411 != null ? colontmp__422411.length : 0) == l_422416))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			F.line = 1005;
			var py_string_422216 = new_py_string_176075(nsuJoinSep(str_seq_422195, []));
			F.line = 1006;
			result_421150 = new_ast_constant_401215(py_string_422216);
			break;
		case 57:
			F.line = 1009;
			result_421150 = new_ast_constant_401215(py_true_obj_354074);
			break;
		case 67:
			F.line = 1012;
			result_421150 = new_ast_constant_401215(py_false_obj_354075);
			break;
		case 75:
			F.line = 1015;
			result_421150 = new_ast_constant_401215(py_none_356044);
			break;
		default: 
			F.line = 1018;
			raiseException(new_syntax_error_156096(makeNimstrLit("ellipsis not implemented"), [], parse_node_401695.tokenNode.lineNo, parse_node_401695.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
		if (!(!((result_421150 == null)))) {
		F.line = 1020;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1020, 10) `\x0Anot (result == nil)` "));
		}
		
		F.line = 83;
		result_421150.lineno = new_int_401060(parse_node_401695.children[chckIndx(0, 0, parse_node_401695.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_421150.col_offset = new_int_401060(parse_node_401695.children[chckIndx(0, 0, parse_node_401695.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_421150;

}

function new_ast_call_180487() {
	var result_180489 = null;

	var F={procname:"asdl.newAstCall",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180489 = {m_type: NTI180473, fun: null, args: null, keywords: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180489.kind = 15;
	framePtr = F.prev;

	return result_180489;

}

function ast_argument_401726(parse_node_401728) {
	var result_425452 = null;

	var F={procname:"ast.astArgument",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401728.tokenNode.token == 170))) {
		F.line = 1194;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1194, 3) `parseNode.tokenNode.token == argument` "));
		}
		
		if (!(((parse_node_401728.children != null ? parse_node_401728.children.length : 0) == 1))) {
		F.line = 1195;
		raiseException(new_syntax_error_156096(makeNimstrLit("Only simple identifiers for function argument"), [], parse_node_401728.children[chckIndx(1, 0, parse_node_401728.children.length+0-1)-0].tokenNode.lineNo, parse_node_401728.children[chckIndx(1, 0, parse_node_401728.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1197;
		var child_425610 = parse_node_401728.children[chckIndx(0, 0, parse_node_401728.children.length+0-1)-0];
		F.line = 1198;
		result_425452 = ast_test_401648(child_425610);
		if (!(!((result_425452 == null)))) {
		F.line = 1199;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1199, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_425452;

}

function ast_arglist_401722(parse_node_401724, call_node_401725) {
	var result_425246 = null;

	var F={procname:"ast.astArglist",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1187;
		if (!((parse_node_401724.tokenNode.token == 169))) {
		F.line = 1187;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1187, 3) `parseNode.tokenNode.token == arglist` "));
		}
		
		L1: do {
			F.line = 1187;
			var child_425409 = null;
			F.line = 3909;
			var colontmp__425430 = null;
			F.line = 1187;
			colontmp__425430 = parse_node_401724.children;
			F.line = 3911;
			var i_425433 = 0;
			F.line = 3912;
			var l_425435 = (colontmp__425430 != null ? colontmp__425430.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_425433 < l_425435)) break L3;
						F.line = 3914;
						child_425409 = colontmp__425430[chckIndx(i_425433, 0, colontmp__425430.length+0-1)-0];
						if ((child_425409.tokenNode.token == 170)) {
						F.line = 1189;
						if (call_node_401725.args != null) { call_node_401725.args.push(ast_argument_401726(child_425409)); } else { call_node_401725.args = [ast_argument_401726(child_425409)]; };
						}
						
						F.line = 3915;
						i_425433 = addInt(i_425433, 1);
						if (!(((colontmp__425430 != null ? colontmp__425430.length : 0) == l_425435))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_425246 = call_node_401725;
	framePtr = F.prev;

	return result_425246;

}

function new_ast_subscript_180666() {
	var result_180668 = null;

	var F={procname:"asdl.newAstSubscript",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180668 = {m_type: NTI180656, value: null, slice: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180668.kind = 20;
	framePtr = F.prev;

	return result_180668;

}

function new_ast_index_181101() {
	var result_181103 = null;

	var F={procname:"asdl.newAstIndex",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181103 = {m_type: NTI181095, value: null, kind: 0};
		F.line = 111;
		result_181103.kind = 2;
	framePtr = F.prev;

	return result_181103;

}

function new_ast_slice_181033() {
	var result_181035 = null;

	var F={procname:"asdl.newAstSlice",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181035 = {m_type: NTI181023, lower: null, upper: null, step: null, kind: 0};
		F.line = 111;
		result_181035.kind = 0;
	framePtr = F.prev;

	return result_181035;

}

function ast_subscript_401707(parse_node_401709) {
			var Tmp1;

	var result_423626 = null;

	var F={procname:"ast.astSubscript",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1093;
		if (!((parse_node_401709.tokenNode.token == 163))) {
		F.line = 1093;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1093, 3) `parseNode.tokenNode.token == subscript` "));
		}
		
		F.line = 1093;
		var child1_423801 = parse_node_401709.children[chckIndx(0, 0, parse_node_401709.children.length+0-1)-0];
			if (!(child1_423801.tokenNode.token == 140)) Tmp1 = false; else {				Tmp1 = ((parse_node_401709.children != null ? parse_node_401709.children.length : 0) == 1);			}		if (Tmp1) {
		F.line = 1095;
		var index_423818 = new_ast_index_181101();
		F.line = 1096;
		index_423818.value = ast_test_401648(child1_423801);
		F.line = 1097;
		result_423626 = index_423818;
		break BeforeRet;
		}
		
		F.line = 1099;
		var slice_423819 = new_ast_slice_181033();
		F.line = 1101;
		var idx_423821 = 0;
		F.line = 1102;
		var child_423822 = parse_node_401709.children[chckIndx(idx_423821, 0, parse_node_401709.children.length+0-1)-0];
		if ((child_423822.tokenNode.token == 140)) {
		F.line = 1104;
		slice_423819.lower = ast_test_401648(child_423822);
		F.line = 1105;
		idx_423821 = addInt(idx_423821, 2);
		}
		else {
			if (!((child_423822.tokenNode.token == 12))) {
			F.line = 1107;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1107, 12) `child.tokenNode.token == Colon` "));
			}
			
			F.line = 1108;
			idx_423821 = addInt(idx_423821, 1);
		}
		
		if ((idx_423821 == (parse_node_401709.children != null ? parse_node_401709.children.length : 0))) {
		F.line = 1110;
		result_423626 = slice_423819;
		break BeforeRet;
		}
		
		F.line = 1112;
		child_423822 = parse_node_401709.children[chckIndx(idx_423821, 0, parse_node_401709.children.length+0-1)-0];
		if ((child_423822.tokenNode.token == 140)) {
		F.line = 1114;
		slice_423819.upper = ast_test_401648(child_423822);
		F.line = 1115;
		idx_423821 = addInt(idx_423821, 1);
		}
		
		if ((idx_423821 == (parse_node_401709.children != null ? parse_node_401709.children.length : 0))) {
		F.line = 1117;
		result_423626 = slice_423819;
		break BeforeRet;
		}
		
		F.line = 1118;
		child_423822 = parse_node_401709.children[chckIndx(idx_423821, 0, parse_node_401709.children.length+0-1)-0];
		if (!((child_423822.tokenNode.token == 164))) {
		F.line = 1120;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1120, 10) `child.tokenNode.token == sliceop` "));
		}
		
		if (((child_423822.children != null ? child_423822.children.length : 0) == 2)) {
		F.line = 1122;
		slice_423819.step = ast_test_401648(child_423822.children[chckIndx(1, 0, child_423822.children.length+0-1)-0]);
		}
		
		result_423626 = slice_423819;
	} while (false);
	framePtr = F.prev;

	return result_423626;

}

function ast_subscriptlist_401704(parse_node_401706) {
	var result_423419 = null;

	var F={procname:"ast.astSubscriptlist",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1086;
		if (!((parse_node_401706.tokenNode.token == 162))) {
		F.line = 1086;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1086, 3) `parseNode.tokenNode.token == subscriptlist` "));
		}
		
		if ((~((parse_node_401706.children != null ? parse_node_401706.children.length : 0)) == 1)) {
		F.line = 1087;
		raiseException(new_syntax_error_156096(makeNimstrLit("subscript only support one index"), [], parse_node_401706.children[chckIndx(1, 0, parse_node_401706.children.length+0-1)-0].tokenNode.lineNo, parse_node_401706.children[chckIndx(1, 0, parse_node_401706.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		result_423419 = ast_subscript_401707(parse_node_401706.children[chckIndx(0, 0, parse_node_401706.children.length+0-1)-0]);
	framePtr = F.prev;

	return result_423419;

}

function new_ast_attribute_180629() {
	var result_180631 = null;

	var F={procname:"asdl.newAstAttribute",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180631 = {m_type: NTI180619, value: null, attr: null, ctx: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180631.kind = 19;
	framePtr = F.prev;

	return result_180631;

}

function ast_trailer_401700(parse_node_401702, left_expr_401703) {
	var result_422826 = null;

	var F={procname:"ast.astTrailer",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401702.tokenNode.token == 161))) {
		F.line = 1057;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1057, 3) `parseNode.tokenNode.token == trailer` "));
		}
		
		F.line = 1057;
		switch (parse_node_401702.children[chckIndx(0, 0, parse_node_401702.children.length+0-1)-0].tokenNode.token) {
		case 8:
			F.line = 1059;
			var call_node_423002 = new_ast_call_180487();
			F.line = 1060;
			call_node_423002.fun = left_expr_401703;
			F.line = 1061;
			switch ((parse_node_401702.children != null ? parse_node_401702.children.length : 0)) {
			case 2:
				F.line = 1063;
				result_422826 = call_node_423002;
				break;
			case 3:
				F.line = 1065;
				result_422826 = ast_arglist_401722(parse_node_401702.children[chckIndx(1, 0, parse_node_401702.children.length+0-1)-0], call_node_423002);
				break;
			default: 
				F.line = 2895;
				var e_423015 = null;
				F.line = 2896;
				e_423015 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 25;
				e_423015.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_423015.parent = null;
				F.line = 1067;
				raiseException(e_423015, "InternalError");
				break;
			}
			break;
		case 10:
			F.line = 1069;
			var sub_423202 = new_ast_subscript_180666();
			F.line = 1070;
			sub_423202.value = left_expr_401703;
			F.line = 1071;
			sub_423202.slice = ast_subscriptlist_401704(parse_node_401702.children[chckIndx(1, 0, parse_node_401702.children.length+0-1)-0]);
			F.line = 1072;
			sub_423202.ctx = new_ast_load_180841();
			F.line = 1073;
			result_422826 = sub_423202;
			break;
		case 24:
			F.line = 1075;
			var attr_423204 = new_ast_attribute_180629();
			F.line = 1076;
			attr_423204.value = left_expr_401703;
			F.line = 1077;
			attr_423204.attr = new_identifier_401085(parse_node_401702.children[chckIndx(1, 0, parse_node_401702.children.length+0-1)-0].tokenNode.content);
			F.line = 1078;
			attr_423204.ctx = new_ast_load_180841();
			F.line = 1079;
			result_422826 = attr_423204;
			break;
		default: 
			F.line = 2895;
			var e_423211 = null;
			F.line = 2896;
			e_423211 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_423211.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_423211.parent = null;
			F.line = 1081;
			raiseException(e_423211, "InternalError");
			break;
		}
		F.line = 83;
		result_422826.lineno = new_int_401060(parse_node_401702.children[chckIndx(0, 0, parse_node_401702.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_422826.col_offset = new_int_401060(parse_node_401702.children[chckIndx(0, 0, parse_node_401702.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_422826;

}

function ast_atom_expr_401690(parse_node_401692) {
	var result_421059 = null;

	var F={procname:"ast.astAtomExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 925;
		var child_421060 = parse_node_401692.children[chckIndx(0, 0, parse_node_401692.children.length+0-1)-0];
		if ((child_421060.tokenNode.token == 89)) {
		F.line = 927;
		raiseException(new_syntax_error_156096(makeNimstrLit("Await not implemented"), [], child_421060.tokenNode.lineNo, child_421060.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 928;
		result_421059 = ast_atom_401693(child_421060);
		if (((parse_node_401692.children != null ? parse_node_401692.children.length : 0) == 1)) {
		F.line = 930;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 931;
			var trailer_child_421125 = null;
			F.line = 3909;
			var colontmp__421128 = null;
			F.line = 931;
			colontmp__421128 = HEX5BHEX5D_414235(parse_node_401692.children, HEX2EHEX2E_81053(1, 1));
			F.line = 3911;
			var i_421131 = 0;
			F.line = 3912;
			var l_421133 = (colontmp__421128 != null ? colontmp__421128.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_421131 < l_421133)) break L3;
						F.line = 3914;
						trailer_child_421125 = colontmp__421128[chckIndx(i_421131, 0, colontmp__421128.length+0-1)-0];
						F.line = 932;
						result_421059 = ast_trailer_401700(trailer_child_421125, result_421059);
						F.line = 3915;
						i_421131 = addInt(i_421131, 1);
						if (!(((colontmp__421128 != null ? colontmp__421128.length : 0) == l_421133))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_421059;

}

function new_ast_bin_op_179975() {
	var result_179977 = null;

	var F={procname:"asdl.newAstBinOp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179977 = {m_type: NTI179965, left: null, op: null, right: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179977.kind = 1;
	framePtr = F.prev;

	return result_179977;

}

function new_bin_op_401456(left_401458, op_401459, right_401460) {
	var result_401461 = null;

	var F={procname:"ast.newBinOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 61;
		result_401461 = new_ast_bin_op_179975();
		F.line = 62;
		result_401461.left = left_401458;
		F.line = 63;
		result_401461.op = op_401459;
		F.line = 64;
		result_401461.right = right_401460;
	framePtr = F.prev;

	return result_401461;

}

function new_ast_pow_181380() {
	var result_181382 = null;

	var F={procname:"asdl.newAstPow",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181382 = {m_type: NTI181376, kind: 0};
		F.line = 111;
		result_181382.kind = 6;
	framePtr = F.prev;

	return result_181382;

}

function ast_power_401687(parse_node_401689) {
	var result_421030 = null;

	var F={procname:"ast.astPower",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 914;
		var child_421031 = parse_node_401689.children[chckIndx(0, 0, parse_node_401689.children.length+0-1)-0];
		F.line = 915;
		var base_421032 = ast_atom_expr_401690(child_421031);
		if (((parse_node_401689.children != null ? parse_node_401689.children.length : 0) == 1)) {
		F.line = 917;
		result_421030 = base_421032;
		}
		else {
			F.line = 919;
			var exp_421040 = ast_factor_401684(parse_node_401689.children[chckIndx(2, 0, parse_node_401689.children.length+0-1)-0]);
			F.line = 920;
			result_421030 = new_bin_op_401456(base_421032, new_ast_pow_181380(), exp_421040);
			F.line = 83;
			result_421030.lineno = new_int_401060(parse_node_401689.children[chckIndx(1, 0, parse_node_401689.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			result_421030.col_offset = new_int_401060(parse_node_401689.children[chckIndx(1, 0, parse_node_401689.children.length+0-1)-0].tokenNode.colNo);
		}
		
	framePtr = F.prev;

	return result_421030;

}

function new_ast_uadd_181659() {
	var result_181661 = null;

	var F={procname:"asdl.newAstUAdd",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181661 = {m_type: NTI181655, kind: 0};
		F.line = 111;
		result_181661.kind = 2;
	framePtr = F.prev;

	return result_181661;

}

function new_ast_usub_181690() {
	var result_181692 = null;

	var F={procname:"asdl.newAstUSub",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181692 = {m_type: NTI181686, kind: 0};
		F.line = 111;
		result_181692.kind = 3;
	framePtr = F.prev;

	return result_181692;

}

function ast_factor_401684(parse_node_401686) {
	var result_420694 = null;

	var F={procname:"ast.astFactor",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401686.tokenNode.token == 156))) {
		F.line = 894;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(894, 3) `parseNode.tokenNode.token == factor` "));
		}
		
		F.line = 894;
		switch ((parse_node_401686.children != null ? parse_node_401686.children.length : 0)) {
		case 1:
			F.line = 896;
			var child_420808 = parse_node_401686.children[chckIndx(0, 0, parse_node_401686.children.length+0-1)-0];
			F.line = 897;
			result_420694 = ast_power_401687(child_420808);
			break;
		case 2:
			F.line = 899;
			var child1_420809 = parse_node_401686.children[chckIndx(0, 0, parse_node_401686.children.length+0-1)-0];
			F.line = 900;
			var factor_420810 = ast_factor_401684(parse_node_401686.children[chckIndx(1, 0, parse_node_401686.children.length+0-1)-0]);
			F.line = 901;
			switch (child1_420809.tokenNode.token) {
			case 15:
				F.line = 903;
				result_420694 = new_unary_op_401475(new_ast_uadd_181659(), factor_420810);
				break;
			case 16:
				F.line = 905;
				result_420694 = new_unary_op_401475(new_ast_usub_181690(), factor_420810);
				break;
			default: 
				F.line = 907;
				raiseException(new_syntax_error_156096(makeNimstrLit("Unary ~ not implemented"), [], child1_420809.tokenNode.lineNo, child1_420809.tokenNode.colNo), "SyntaxError:ObjectType");
				break;
			}
			F.line = 83;
			result_420694.lineno = new_int_401060(parse_node_401686.children[chckIndx(0, 0, parse_node_401686.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			result_420694.col_offset = new_int_401060(parse_node_401686.children[chckIndx(0, 0, parse_node_401686.children.length+0-1)-0].tokenNode.colNo);
			break;
		default: 
			F.line = 2895;
			var e_420822 = null;
			F.line = 2896;
			e_420822 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_420822.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_420822.parent = null;
			F.line = 910;
			raiseException(e_420822, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_420694;

}

function new_ast_add_181194() {
	var result_181196 = null;

	var F={procname:"asdl.newAstAdd",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181196 = {m_type: NTI181190, kind: 0};
		F.line = 111;
		result_181196.kind = 0;
	framePtr = F.prev;

	return result_181196;

}

function new_ast_sub_181225() {
	var result_181227 = null;

	var F={procname:"asdl.newAstSub",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181227 = {m_type: NTI181221, kind: 0};
		F.line = 111;
		result_181227.kind = 1;
	framePtr = F.prev;

	return result_181227;

}

function new_ast_mult_181256() {
	var result_181258 = null;

	var F={procname:"asdl.newAstMult",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181258 = {m_type: NTI181252, kind: 0};
		F.line = 111;
		result_181258.kind = 2;
	framePtr = F.prev;

	return result_181258;

}

function new_ast_div_181318() {
	var result_181320 = null;

	var F={procname:"asdl.newAstDiv",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181320 = {m_type: NTI181314, kind: 0};
		F.line = 111;
		result_181320.kind = 4;
	framePtr = F.prev;

	return result_181320;

}

function new_ast_mod_181349() {
	var result_181351 = null;

	var F={procname:"asdl.newAstMod",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181351 = {m_type: NTI181345, kind: 0};
		F.line = 111;
		result_181351.kind = 5;
	framePtr = F.prev;

	return result_181351;

}

function new_ast_floor_div_181566() {
	var result_181568 = null;

	var F={procname:"asdl.newAstFloorDiv",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181568 = {m_type: NTI181562, kind: 0};
		F.line = 111;
		result_181568.kind = 12;
	framePtr = F.prev;

	return result_181568;

}

function ast_term_401681(parse_node_401683) {
	var result_420294 = null;

	var F={procname:"ast.astTerm",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401683.tokenNode.token == 155))) {
		F.line = 890;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(890, 3) `parseNode.tokenNode.token == term` "));
		}
		
		if (!((modInt((parse_node_401683.children != null ? parse_node_401683.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_420606 = parse_node_401683.children[chckIndx(0, 0, parse_node_401683.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_420608 = ast_factor_401684(first_child_420606);
		F.line = 840;
		result_420294 = first_ast_node_420608;
		L1: do {
			F.line = 841;
			var idx_420628 = 0;
			F.line = 2104;
			var colontmp__420671 = 0;
			F.line = 841;
			colontmp__420671 = divInt((parse_node_401683.children != null ? parse_node_401683.children.length : 0), 2);
			F.line = 2107;
			var res_420674 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_420674 <= colontmp__420671)) break L3;
						F.line = 2109;
						idx_420628 = res_420674;
						F.line = 842;
						var op_parse_node_420635 = parse_node_401683.children[chckIndx(subInt(mulInt(2, idx_420628), 1), 0, parse_node_401683.children.length+0-1)-0];
						F.line = 843;
						var op_420637 = null;
						F.line = 844;
						var token_420639 = op_parse_node_420635.tokenNode.token;
						F.line = 845;
						switch (token_420639) {
						case 15:
							F.line = 847;
							op_420637 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_420637 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_420637 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_420637 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_420637 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_420637 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_420648 = mnewString(0);
							F.line = 859;
							if (fmt_res_420648 != null) { fmt_res_420648 = (fmt_res_420648).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_420648 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_420656 = (fmt_res_420648).concat(reprEnum(token_420639, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156096(msg_420656, [], parse_node_401683.tokenNode.lineNo, parse_node_401683.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_420665 = parse_node_401683.children[chckIndx(mulInt(2, idx_420628), 0, parse_node_401683.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_420667 = ast_factor_401684(second_child_420665);
						F.line = 864;
						result_420294 = new_bin_op_401456(result_420294, op_420637, second_ast_node_420667);
						F.line = 83;
						result_420294.lineno = new_int_401060(op_parse_node_420635.tokenNode.lineNo);
						F.line = 84;
						result_420294.col_offset = new_int_401060(op_parse_node_420635.tokenNode.colNo);
						F.line = 2110;
						res_420674 = addInt(res_420674, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_420294;

}

function ast_arith_expr_401678(parse_node_401680) {
	var result_419894 = null;

	var F={procname:"ast.astArithExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401680.tokenNode.token == 154))) {
		F.line = 886;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(886, 3) `parseNode.tokenNode.token == arith_expr` "));
		}
		
		if (!((modInt((parse_node_401680.children != null ? parse_node_401680.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_420206 = parse_node_401680.children[chckIndx(0, 0, parse_node_401680.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_420208 = ast_term_401681(first_child_420206);
		F.line = 840;
		result_419894 = first_ast_node_420208;
		L1: do {
			F.line = 841;
			var idx_420228 = 0;
			F.line = 2104;
			var colontmp__420271 = 0;
			F.line = 841;
			colontmp__420271 = divInt((parse_node_401680.children != null ? parse_node_401680.children.length : 0), 2);
			F.line = 2107;
			var res_420274 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_420274 <= colontmp__420271)) break L3;
						F.line = 2109;
						idx_420228 = res_420274;
						F.line = 842;
						var op_parse_node_420235 = parse_node_401680.children[chckIndx(subInt(mulInt(2, idx_420228), 1), 0, parse_node_401680.children.length+0-1)-0];
						F.line = 843;
						var op_420237 = null;
						F.line = 844;
						var token_420239 = op_parse_node_420235.tokenNode.token;
						F.line = 845;
						switch (token_420239) {
						case 15:
							F.line = 847;
							op_420237 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_420237 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_420237 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_420237 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_420237 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_420237 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_420248 = mnewString(0);
							F.line = 859;
							if (fmt_res_420248 != null) { fmt_res_420248 = (fmt_res_420248).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_420248 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_420256 = (fmt_res_420248).concat(reprEnum(token_420239, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156096(msg_420256, [], parse_node_401680.tokenNode.lineNo, parse_node_401680.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_420265 = parse_node_401680.children[chckIndx(mulInt(2, idx_420228), 0, parse_node_401680.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_420267 = ast_term_401681(second_child_420265);
						F.line = 864;
						result_419894 = new_bin_op_401456(result_419894, op_420237, second_ast_node_420267);
						F.line = 83;
						result_419894.lineno = new_int_401060(op_parse_node_420235.tokenNode.lineNo);
						F.line = 84;
						result_419894.col_offset = new_int_401060(op_parse_node_420235.tokenNode.colNo);
						F.line = 2110;
						res_420274 = addInt(res_420274, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_419894;

}

function ast_shift_expr_401675(parse_node_401677) {
	var result_419494 = null;

	var F={procname:"ast.astShiftExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401677.tokenNode.token == 153))) {
		F.line = 882;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(882, 3) `parseNode.tokenNode.token == shift_expr` "));
		}
		
		if (!((modInt((parse_node_401677.children != null ? parse_node_401677.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_419806 = parse_node_401677.children[chckIndx(0, 0, parse_node_401677.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_419808 = ast_arith_expr_401678(first_child_419806);
		F.line = 840;
		result_419494 = first_ast_node_419808;
		L1: do {
			F.line = 841;
			var idx_419828 = 0;
			F.line = 2104;
			var colontmp__419871 = 0;
			F.line = 841;
			colontmp__419871 = divInt((parse_node_401677.children != null ? parse_node_401677.children.length : 0), 2);
			F.line = 2107;
			var res_419874 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_419874 <= colontmp__419871)) break L3;
						F.line = 2109;
						idx_419828 = res_419874;
						F.line = 842;
						var op_parse_node_419835 = parse_node_401677.children[chckIndx(subInt(mulInt(2, idx_419828), 1), 0, parse_node_401677.children.length+0-1)-0];
						F.line = 843;
						var op_419837 = null;
						F.line = 844;
						var token_419839 = op_parse_node_419835.tokenNode.token;
						F.line = 845;
						switch (token_419839) {
						case 15:
							F.line = 847;
							op_419837 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_419837 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_419837 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_419837 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_419837 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_419837 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_419848 = mnewString(0);
							F.line = 859;
							if (fmt_res_419848 != null) { fmt_res_419848 = (fmt_res_419848).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_419848 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_419856 = (fmt_res_419848).concat(reprEnum(token_419839, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156096(msg_419856, [], parse_node_401677.tokenNode.lineNo, parse_node_401677.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_419865 = parse_node_401677.children[chckIndx(mulInt(2, idx_419828), 0, parse_node_401677.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_419867 = ast_arith_expr_401678(second_child_419865);
						F.line = 864;
						result_419494 = new_bin_op_401456(result_419494, op_419837, second_ast_node_419867);
						F.line = 83;
						result_419494.lineno = new_int_401060(op_parse_node_419835.tokenNode.lineNo);
						F.line = 84;
						result_419494.col_offset = new_int_401060(op_parse_node_419835.tokenNode.colNo);
						F.line = 2110;
						res_419874 = addInt(res_419874, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_419494;

}

function ast_and_expr_401672(parse_node_401674) {
	var result_419094 = null;

	var F={procname:"ast.astAndExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401674.tokenNode.token == 152))) {
		F.line = 878;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(878, 3) `parseNode.tokenNode.token == and_expr` "));
		}
		
		if (!((modInt((parse_node_401674.children != null ? parse_node_401674.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_419406 = parse_node_401674.children[chckIndx(0, 0, parse_node_401674.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_419408 = ast_shift_expr_401675(first_child_419406);
		F.line = 840;
		result_419094 = first_ast_node_419408;
		L1: do {
			F.line = 841;
			var idx_419428 = 0;
			F.line = 2104;
			var colontmp__419471 = 0;
			F.line = 841;
			colontmp__419471 = divInt((parse_node_401674.children != null ? parse_node_401674.children.length : 0), 2);
			F.line = 2107;
			var res_419474 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_419474 <= colontmp__419471)) break L3;
						F.line = 2109;
						idx_419428 = res_419474;
						F.line = 842;
						var op_parse_node_419435 = parse_node_401674.children[chckIndx(subInt(mulInt(2, idx_419428), 1), 0, parse_node_401674.children.length+0-1)-0];
						F.line = 843;
						var op_419437 = null;
						F.line = 844;
						var token_419439 = op_parse_node_419435.tokenNode.token;
						F.line = 845;
						switch (token_419439) {
						case 15:
							F.line = 847;
							op_419437 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_419437 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_419437 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_419437 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_419437 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_419437 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_419448 = mnewString(0);
							F.line = 859;
							if (fmt_res_419448 != null) { fmt_res_419448 = (fmt_res_419448).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_419448 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_419456 = (fmt_res_419448).concat(reprEnum(token_419439, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156096(msg_419456, [], parse_node_401674.tokenNode.lineNo, parse_node_401674.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_419465 = parse_node_401674.children[chckIndx(mulInt(2, idx_419428), 0, parse_node_401674.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_419467 = ast_shift_expr_401675(second_child_419465);
						F.line = 864;
						result_419094 = new_bin_op_401456(result_419094, op_419437, second_ast_node_419467);
						F.line = 83;
						result_419094.lineno = new_int_401060(op_parse_node_419435.tokenNode.lineNo);
						F.line = 84;
						result_419094.col_offset = new_int_401060(op_parse_node_419435.tokenNode.colNo);
						F.line = 2110;
						res_419474 = addInt(res_419474, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_419094;

}

function ast_xor_expr_401669(parse_node_401671) {
	var result_418694 = null;

	var F={procname:"ast.astXorExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401671.tokenNode.token == 151))) {
		F.line = 874;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(874, 3) `parseNode.tokenNode.token == xor_expr` "));
		}
		
		if (!((modInt((parse_node_401671.children != null ? parse_node_401671.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_419006 = parse_node_401671.children[chckIndx(0, 0, parse_node_401671.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_419008 = ast_and_expr_401672(first_child_419006);
		F.line = 840;
		result_418694 = first_ast_node_419008;
		L1: do {
			F.line = 841;
			var idx_419028 = 0;
			F.line = 2104;
			var colontmp__419071 = 0;
			F.line = 841;
			colontmp__419071 = divInt((parse_node_401671.children != null ? parse_node_401671.children.length : 0), 2);
			F.line = 2107;
			var res_419074 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_419074 <= colontmp__419071)) break L3;
						F.line = 2109;
						idx_419028 = res_419074;
						F.line = 842;
						var op_parse_node_419035 = parse_node_401671.children[chckIndx(subInt(mulInt(2, idx_419028), 1), 0, parse_node_401671.children.length+0-1)-0];
						F.line = 843;
						var op_419037 = null;
						F.line = 844;
						var token_419039 = op_parse_node_419035.tokenNode.token;
						F.line = 845;
						switch (token_419039) {
						case 15:
							F.line = 847;
							op_419037 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_419037 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_419037 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_419037 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_419037 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_419037 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_419048 = mnewString(0);
							F.line = 859;
							if (fmt_res_419048 != null) { fmt_res_419048 = (fmt_res_419048).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_419048 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_419056 = (fmt_res_419048).concat(reprEnum(token_419039, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156096(msg_419056, [], parse_node_401671.tokenNode.lineNo, parse_node_401671.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_419065 = parse_node_401671.children[chckIndx(mulInt(2, idx_419028), 0, parse_node_401671.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_419067 = ast_and_expr_401672(second_child_419065);
						F.line = 864;
						result_418694 = new_bin_op_401456(result_418694, op_419037, second_ast_node_419067);
						F.line = 83;
						result_418694.lineno = new_int_401060(op_parse_node_419035.tokenNode.lineNo);
						F.line = 84;
						result_418694.col_offset = new_int_401060(op_parse_node_419035.tokenNode.colNo);
						F.line = 2110;
						res_419074 = addInt(res_419074, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_418694;

}

function ast_expr_401666(parse_node_401668) {
	var result_418273 = null;

	var F={procname:"ast.astExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401668.tokenNode.token == 150))) {
		F.line = 870;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(870, 3) `parseNode.tokenNode.token == expr` "));
		}
		
		if (!((modInt((parse_node_401668.children != null ? parse_node_401668.children.length : 0), 2) == 1))) {
		F.line = 837;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(837, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 838;
		var first_child_418606 = parse_node_401668.children[chckIndx(0, 0, parse_node_401668.children.length+0-1)-0];
		F.line = 839;
		var first_ast_node_418608 = ast_xor_expr_401669(first_child_418606);
		F.line = 840;
		result_418273 = first_ast_node_418608;
		L1: do {
			F.line = 841;
			var idx_418628 = 0;
			F.line = 2104;
			var colontmp__418671 = 0;
			F.line = 841;
			colontmp__418671 = divInt((parse_node_401668.children != null ? parse_node_401668.children.length : 0), 2);
			F.line = 2107;
			var res_418674 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_418674 <= colontmp__418671)) break L3;
						F.line = 2109;
						idx_418628 = res_418674;
						F.line = 842;
						var op_parse_node_418635 = parse_node_401668.children[chckIndx(subInt(mulInt(2, idx_418628), 1), 0, parse_node_401668.children.length+0-1)-0];
						F.line = 843;
						var op_418637 = null;
						F.line = 844;
						var token_418639 = op_parse_node_418635.tokenNode.token;
						F.line = 845;
						switch (token_418639) {
						case 15:
							F.line = 847;
							op_418637 = new_ast_add_181194();
							break;
						case 16:
							F.line = 849;
							op_418637 = new_ast_sub_181225();
							break;
						case 17:
							F.line = 851;
							op_418637 = new_ast_mult_181256();
							break;
						case 18:
							F.line = 853;
							op_418637 = new_ast_div_181318();
							break;
						case 25:
							F.line = 855;
							op_418637 = new_ast_mod_181349();
							break;
						case 48:
							F.line = 857;
							op_418637 = new_ast_floor_div_181566();
							break;
						default: 
							F.line = 859;
							F.line = 859;
							var fmt_res_418648 = mnewString(0);
							F.line = 859;
							if (fmt_res_418648 != null) { fmt_res_418648 = (fmt_res_418648).concat(makeNimstrLit("Complex binary operation not implemented: ")); } else { fmt_res_418648 = makeNimstrLit("Complex binary operation not implemented: "); };
							var msg_418656 = (fmt_res_418648).concat(reprEnum(token_418639, NTI202995));
							F.line = 860;
							raiseException(new_syntax_error_156096(msg_418656, [], parse_node_401668.tokenNode.lineNo, parse_node_401668.tokenNode.colNo), "SyntaxError:ObjectType");
							break;
						}
						F.line = 862;
						var second_child_418665 = parse_node_401668.children[chckIndx(mulInt(2, idx_418628), 0, parse_node_401668.children.length+0-1)-0];
						F.line = 863;
						var second_ast_node_418667 = ast_xor_expr_401669(second_child_418665);
						F.line = 864;
						result_418273 = new_bin_op_401456(result_418273, op_418637, second_ast_node_418667);
						F.line = 83;
						result_418273.lineno = new_int_401060(op_parse_node_418635.tokenNode.lineNo);
						F.line = 84;
						result_418273.col_offset = new_int_401060(op_parse_node_418635.tokenNode.colNo);
						F.line = 2110;
						res_418674 = addInt(res_418674, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_418273;

}

function new_ast_lt_181783() {
	var result_181785 = null;

	var F={procname:"asdl.newAstLt",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181785 = {m_type: NTI181779, kind: 0};
		F.line = 111;
		result_181785.kind = 2;
	framePtr = F.prev;

	return result_181785;

}

function new_ast_gt_181845() {
	var result_181847 = null;

	var F={procname:"asdl.newAstGt",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181847 = {m_type: NTI181841, kind: 0};
		F.line = 111;
		result_181847.kind = 4;
	framePtr = F.prev;

	return result_181847;

}

function new_ast_eq_181721() {
	var result_181723 = null;

	var F={procname:"asdl.newAstEq",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181723 = {m_type: NTI181717, kind: 0};
		F.line = 111;
		result_181723.kind = 0;
	framePtr = F.prev;

	return result_181723;

}

function new_ast_gt_e_181876() {
	var result_181878 = null;

	var F={procname:"asdl.newAstGtE",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181878 = {m_type: NTI181872, kind: 0};
		F.line = 111;
		result_181878.kind = 5;
	framePtr = F.prev;

	return result_181878;

}

function new_ast_lt_e_181814() {
	var result_181816 = null;

	var F={procname:"asdl.newAstLtE",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181816 = {m_type: NTI181810, kind: 0};
		F.line = 111;
		result_181816.kind = 3;
	framePtr = F.prev;

	return result_181816;

}

function new_ast_not_eq_181752() {
	var result_181754 = null;

	var F={procname:"asdl.newAstNotEq",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181754 = {m_type: NTI181748, kind: 0};
		F.line = 111;
		result_181754.kind = 1;
	framePtr = F.prev;

	return result_181754;

}

function new_ast_in_181969() {
	var result_181971 = null;

	var F={procname:"asdl.newAstIn",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181971 = {m_type: NTI181965, kind: 0};
		F.line = 111;
		result_181971.kind = 8;
	framePtr = F.prev;

	return result_181971;

}

function new_ast_not_in_182000() {
	var result_182002 = null;

	var F={procname:"asdl.newAstNotIn",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182002 = {m_type: NTI181996, kind: 0};
		F.line = 111;
		result_182002.kind = 9;
	framePtr = F.prev;

	return result_182002;

}

function ast_comp_op_401663(parse_node_401665) {
	var result_417817 = null;

	var F={procname:"ast.astCompOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401665.tokenNode.token == 148))) {
		F.line = 811;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(811, 3) `parseNode.tokenNode.token == comp_op` "));
		}
		
		F.line = 811;
		var token_418001 = parse_node_401665.children[chckIndx(0, 0, parse_node_401665.children.length+0-1)-0].tokenNode.token;
		F.line = 812;
		switch (token_418001) {
		case 21:
			F.line = 814;
			result_417817 = new_ast_lt_181783();
			break;
		case 22:
			F.line = 816;
			result_417817 = new_ast_gt_181845();
			break;
		case 28:
			F.line = 818;
			result_417817 = new_ast_eq_181721();
			break;
		case 31:
			F.line = 820;
			result_417817 = new_ast_gt_e_181876();
			break;
		case 30:
			F.line = 822;
			result_417817 = new_ast_lt_e_181814();
			break;
		case 29:
			F.line = 824;
			result_417817 = new_ast_not_eq_181752();
			break;
		case 74:
			F.line = 826;
			result_417817 = new_ast_in_181969();
			break;
		case 55:
			F.line = 828;
			result_417817 = new_ast_not_in_182000();
			break;
		default: 
			F.line = 830;
			var fmt_res_418012 = mnewString(0);
			F.line = 830;
			if (fmt_res_418012 != null) { fmt_res_418012 = (fmt_res_418012).concat(makeNimstrLit("Complex comparison operation ")); } else { fmt_res_418012 = makeNimstrLit("Complex comparison operation "); };
			F.line = 270;
			if (fmt_res_418012 != null) { fmt_res_418012 = (fmt_res_418012).concat(reprEnum(token_418001, NTI202995)); } else { fmt_res_418012 = reprEnum(token_418001, NTI202995).slice(); };
			F.line = 830;
			if (fmt_res_418012 != null) { fmt_res_418012 = (fmt_res_418012).concat(makeNimstrLit(" not implemented")); } else { fmt_res_418012 = makeNimstrLit(" not implemented"); };
			F.line = 830;
			raiseException(new_syntax_error_156096(fmt_res_418012, [], parse_node_401665.tokenNode.lineNo, parse_node_401665.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
	framePtr = F.prev;

	return result_417817;

}

function new_ast_compare_180446() {
	var result_180448 = null;

	var F={procname:"asdl.newAstCompare",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180448 = {m_type: NTI180432, left: null, ops: null, comparators: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_180448.kind = 14;
	framePtr = F.prev;

	return result_180448;

}

function ast_comparison_401660(parse_node_401662) {
	var result_417217 = null;

	var F={procname:"ast.astComparison",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_401662.tokenNode.token == 147))) {
		F.line = 792;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(792, 3) `parseNode.tokenNode.token == comparison` "));
		}
		
		F.line = 792;
		var expr1_417401 = ast_expr_401666(parse_node_401662.children[chckIndx(0, 0, parse_node_401662.children.length+0-1)-0]);
		if (((parse_node_401662.children != null ? parse_node_401662.children.length : 0) == 1)) {
		F.line = 794;
		result_417217 = expr1_417401;
		if (!(!((result_417217 == null)))) {
		F.line = 795;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(795, 12) `\x0Anot (result == nil)` "));
		}
		
		F.line = 796;
		break BeforeRet;
		}
		
		if (!(((parse_node_401662.children != null ? parse_node_401662.children.length : 0) == 3))) {
		F.line = 798;
		raiseException(new_syntax_error_156096(makeNimstrLit("Chained comparison not implemented"), [], parse_node_401662.children[chckIndx(2, 0, parse_node_401662.children.length+0-1)-0].tokenNode.lineNo, parse_node_401662.children[chckIndx(2, 0, parse_node_401662.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 799;
		var op_417610 = ast_comp_op_401663(parse_node_401662.children[chckIndx(1, 0, parse_node_401662.children.length+0-1)-0]);
		F.line = 800;
		var expr2_417611 = ast_expr_401666(parse_node_401662.children[chckIndx(2, 0, parse_node_401662.children.length+0-1)-0]);
		F.line = 801;
		var cmp_417612 = new_ast_compare_180446();
		F.line = 802;
		cmp_417612.left = expr1_417401;
		F.line = 803;
		if (cmp_417612.ops != null) { cmp_417612.ops.push(op_417610); } else { cmp_417612.ops = [op_417610]; };
		F.line = 804;
		if (cmp_417612.comparators != null) { cmp_417612.comparators.push(expr2_417611); } else { cmp_417612.comparators = [expr2_417611]; };
		F.line = 87;
		cmp_417612.lineno = expr1_417401.lineno;
		F.line = 88;
		cmp_417612.col_offset = expr1_417401.col_offset;
		F.line = 806;
		result_417217 = cmp_417612;
		if (!(!((result_417217 == null)))) {
		F.line = 807;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(807, 10) `\x0Anot (result == nil)` "));
		}
		
	} while (false);
	framePtr = F.prev;

	return result_417217;

}

function ast_not_test_401657(parse_node_401659) {
	var result_416678 = null;

	var F={procname:"ast.astNotTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401659.tokenNode.token == 146))) {
		F.line = 779;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(779, 3) `parseNode.tokenNode.token == not_test` "));
		}
		
		F.line = 779;
		var child_416801 = parse_node_401659.children[chckIndx(0, 0, parse_node_401659.children.length+0-1)-0];
		F.line = 780;
		switch (child_416801.tokenNode.token) {
		case 55:
			F.line = 782;
			result_416678 = new_unary_op_401475(new_ast_not_181628(), ast_not_test_401657(parse_node_401659.children[chckIndx(1, 0, parse_node_401659.children.length+0-1)-0]));
			F.line = 83;
			result_416678.lineno = new_int_401060(parse_node_401659.children[chckIndx(0, 0, parse_node_401659.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			result_416678.col_offset = new_int_401060(parse_node_401659.children[chckIndx(0, 0, parse_node_401659.children.length+0-1)-0].tokenNode.colNo);
			break;
		case 147:
			F.line = 785;
			result_416678 = ast_comparison_401660(child_416801);
			break;
		default: 
			F.line = 2895;
			var e_416811 = null;
			F.line = 2896;
			e_416811 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_416811.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_416811.parent = null;
			F.line = 787;
			raiseException(e_416811, "InternalError");
			break;
		}
		if (!(!((result_416678 == null)))) {
		F.line = 788;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(788, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_416678;

}

function new_ast_and_181132() {
	var result_181134 = null;

	var F={procname:"asdl.newAstAnd",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181134 = {m_type: NTI181128, kind: 0};
		F.line = 111;
		result_181134.kind = 0;
	framePtr = F.prev;

	return result_181134;

}

function new_ast_or_181163() {
	var result_181165 = null;

	var F={procname:"asdl.newAstOr",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_181165 = {m_type: NTI181159, kind: 0};
		F.line = 111;
		result_181165.kind = 1;
	framePtr = F.prev;

	return result_181165;

}

function new_ast_bool_op_179938() {
	var result_179940 = null;

	var F={procname:"asdl.newAstBoolOp",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179940 = {m_type: NTI179928, op: null, values: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179940.kind = 0;
	framePtr = F.prev;

	return result_179940;

}

function new_bool_op_401437(op_401439, values_401441) {
	var result_401442 = null;

	var F={procname:"ast.newBoolOp",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 56;
		result_401442 = new_ast_bool_op_179938();
		F.line = 57;
		result_401442.op = op_401439;
		F.line = 58;
		result_401442.values = nimCopy(null, values_401441, NTI401440);
	framePtr = F.prev;

	return result_401442;

}

function ast_and_test_401654(parse_node_401656) {
	var result_416078 = null;

	var F={procname:"ast.astAndTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_401656.tokenNode.token == 145))) {
		F.line = 775;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(775, 3) `parseNode.tokenNode.token == and_test` "));
		}
		
		if (!((modInt((parse_node_401656.children != null ? parse_node_401656.children.length : 0), 2) == 1))) {
		F.line = 747;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(747, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 748;
		var first_child_416406 = parse_node_401656.children[chckIndx(0, 0, parse_node_401656.children.length+0-1)-0];
		F.line = 749;
		var first_ast_node_416408 = ast_not_test_401657(first_child_416406);
		if (((parse_node_401656.children != null ? parse_node_401656.children.length : 0) == 1)) {
		F.line = 751;
		result_416078 = first_ast_node_416408;
		break BeforeRet;
		}
		
		F.line = 752;
		var token_416421 = parse_node_401656.children[chckIndx(1, 0, parse_node_401656.children.length+0-1)-0].tokenNode.token;
		F.line = 753;
		var op_416423 = null;
		F.line = 754;
		switch (token_416421) {
		case 60:
			F.line = 756;
			op_416423 = new_ast_and_181132();
			break;
		case 73:
			F.line = 758;
			op_416423 = new_ast_or_181163();
			break;
		default: 
			F.line = 2895;
			var e_416431 = null;
			F.line = 2896;
			e_416431 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_416431.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_416431.parent = null;
			F.line = 760;
			raiseException(e_416431, "InternalError");
			break;
		}
		F.line = 761;
		var node_seq_416614 = [first_ast_node_416408];
		L1: do {
			F.line = 762;
			var idx_416634 = 0;
			F.line = 2104;
			var colontmp__416655 = 0;
			F.line = 762;
			colontmp__416655 = divInt((parse_node_401656.children != null ? parse_node_401656.children.length : 0), 2);
			F.line = 2107;
			var res_416658 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_416658 <= colontmp__416655)) break L3;
						F.line = 2109;
						idx_416634 = res_416658;
						F.line = 763;
						var next_child_416641 = parse_node_401656.children[chckIndx(mulInt(2, idx_416634), 0, parse_node_401656.children.length+0-1)-0];
						F.line = 764;
						var next_ast_node_416643 = ast_not_test_401657(next_child_416641);
						F.line = 765;
						if (node_seq_416614 != null) { node_seq_416614.push(next_ast_node_416643); } else { node_seq_416614 = [next_ast_node_416643]; };
						F.line = 2110;
						res_416658 = addInt(res_416658, 1);
					}
			} while(false);
		} while(false);
		F.line = 766;
		result_416078 = new_bool_op_401437(op_416423, node_seq_416614);
		F.line = 87;
		result_416078.lineno = first_ast_node_416408.lineno;
		F.line = 88;
		result_416078.col_offset = first_ast_node_416408.col_offset;
	} while (false);
	framePtr = F.prev;

	return result_416078;

}

function ast_or_test_401651(parse_node_401653) {
	var result_415461 = null;

	var F={procname:"ast.astOrTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_401653.tokenNode.token == 144))) {
		F.line = 771;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(771, 3) `parseNode.tokenNode.token == or_test` "));
		}
		
		if (!((modInt((parse_node_401653.children != null ? parse_node_401653.children.length : 0), 2) == 1))) {
		F.line = 747;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(747, 10) `len(parseNode.children) mod 2 == 1` "));
		}
		
		F.line = 748;
		var first_child_415806 = parse_node_401653.children[chckIndx(0, 0, parse_node_401653.children.length+0-1)-0];
		F.line = 749;
		var first_ast_node_415808 = ast_and_test_401654(first_child_415806);
		if (((parse_node_401653.children != null ? parse_node_401653.children.length : 0) == 1)) {
		F.line = 751;
		result_415461 = first_ast_node_415808;
		break BeforeRet;
		}
		
		F.line = 752;
		var token_415821 = parse_node_401653.children[chckIndx(1, 0, parse_node_401653.children.length+0-1)-0].tokenNode.token;
		F.line = 753;
		var op_415823 = null;
		F.line = 754;
		switch (token_415821) {
		case 60:
			F.line = 756;
			op_415823 = new_ast_and_181132();
			break;
		case 73:
			F.line = 758;
			op_415823 = new_ast_or_181163();
			break;
		default: 
			F.line = 2895;
			var e_415831 = null;
			F.line = 2896;
			e_415831 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_415831.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_415831.parent = null;
			F.line = 760;
			raiseException(e_415831, "InternalError");
			break;
		}
		F.line = 761;
		var node_seq_416014 = [first_ast_node_415808];
		L1: do {
			F.line = 762;
			var idx_416034 = 0;
			F.line = 2104;
			var colontmp__416055 = 0;
			F.line = 762;
			colontmp__416055 = divInt((parse_node_401653.children != null ? parse_node_401653.children.length : 0), 2);
			F.line = 2107;
			var res_416058 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_416058 <= colontmp__416055)) break L3;
						F.line = 2109;
						idx_416034 = res_416058;
						F.line = 763;
						var next_child_416041 = parse_node_401653.children[chckIndx(mulInt(2, idx_416034), 0, parse_node_401653.children.length+0-1)-0];
						F.line = 764;
						var next_ast_node_416043 = ast_and_test_401654(next_child_416041);
						F.line = 765;
						if (node_seq_416014 != null) { node_seq_416014.push(next_ast_node_416043); } else { node_seq_416014 = [next_ast_node_416043]; };
						F.line = 2110;
						res_416058 = addInt(res_416058, 1);
					}
			} while(false);
		} while(false);
		F.line = 766;
		result_415461 = new_bool_op_401437(op_415823, node_seq_416014);
		F.line = 87;
		result_415461.lineno = first_ast_node_415808.lineno;
		F.line = 88;
		result_415461.col_offset = first_ast_node_415808.col_offset;
	} while (false);
	framePtr = F.prev;

	return result_415461;

}

function ast_test_401648(parse_node_401650) {
	var result_415038 = null;

	var F={procname:"ast.astTest",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401650.tokenNode.token == 140))) {
		F.line = 725;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(725, 3) `parseNode.tokenNode.token == test` "));
		}
		
		if (!(((parse_node_401650.children != null ? parse_node_401650.children.length : 0) == 1))) {
		F.line = 726;
		raiseException(new_syntax_error_156096(makeNimstrLit("Inline if else not implemented"), [], parse_node_401650.children[chckIndx(1, 0, parse_node_401650.children.length+0-1)-0].tokenNode.lineNo, parse_node_401650.children[chckIndx(1, 0, parse_node_401650.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 727;
		var child_415210 = parse_node_401650.children[chckIndx(0, 0, parse_node_401650.children.length+0-1)-0];
		if (!((child_415210.tokenNode.token == 144))) {
		F.line = 729;
		raiseException(new_syntax_error_156096(makeNimstrLit("lambda not implemented"), [], parse_node_401650.tokenNode.lineNo, parse_node_401650.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 730;
		result_415038 = ast_or_test_401651(child_415210);
		if (!(!((result_415038 == null)))) {
		F.line = 731;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(731, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_415038;

}

function ast_testlist_star_expr_401568(parse_node_401570) {
	var result_408017 = null;

	var F={procname:"ast.astTestlistStarExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401570.tokenNode.token == 109))) {
		F.line = 477;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(477, 3) `parseNode.tokenNode.token == testlist_star_expr` "));
		}
		
		F.line = 477;
		var elms_408202 = null;
		L1: do {
			F.line = 478;
			var i_408220 = 0;
			F.line = 3616;
			var colontmp__408402 = 0;
			F.line = 478;
			colontmp__408402 = divInt(addInt((parse_node_401570.children != null ? parse_node_401570.children.length : 0), 1), 2);
			F.line = 3617;
			var i_408405 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_408405 < colontmp__408402)) break L3;
						F.line = 3619;
						i_408220 = i_408405;
						F.line = 479;
						var child_408222 = parse_node_401570.children[chckIndx(mulInt(2, i_408220), 0, parse_node_401570.children.length+0-1)-0];
						if (!((child_408222.tokenNode.token == 140))) {
						F.line = 481;
						raiseException(new_syntax_error_156096(makeNimstrLit("Star expression not implemented"), [], child_408222.tokenNode.lineNo, child_408222.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 482;
						if (elms_408202 != null) { elms_408202.push(ast_test_401648(child_408222)); } else { elms_408202 = [ast_test_401648(child_408222)]; };
						F.line = 3620;
						i_408405 = addInt(i_408405, 1);
					}
			} while(false);
		} while(false);
		if (((parse_node_401570.children != null ? parse_node_401570.children.length : 0) == 1)) {
		F.line = 484;
		result_408017 = elms_408202[chckIndx(0, 0, elms_408202.length+0-1)-0];
		}
		else {
			F.line = 486;
			result_408017 = new_tuple_401511(elms_408202);
		}
		
		F.line = 87;
		result_408017.lineno = elms_408202[chckIndx(0, 0, elms_408202.length+0-1)-0].lineno;
		F.line = 88;
		result_408017.col_offset = elms_408202[chckIndx(0, 0, elms_408202.length+0-1)-0].col_offset;
		if (!(!((result_408017 == null)))) {
		F.line = 488;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(488, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_408017;

}

function new_ast_expr_179808() {
	var result_179810 = null;

	var F={procname:"asdl.newAstExpr",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179810 = {m_type: NTI179802, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179810.kind = 21;
	framePtr = F.prev;

	return result_179810;

}

function new_ast_expr_401043(expr_401045) {
	var result_401046 = null;

	var F={procname:"ast.newAstExpr",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_401046 = new_ast_expr_179808();
		F.line = 29;
		result_401046.value = expr_401045;
	framePtr = F.prev;

	return result_401046;

}

function new_ast_assign_179192() {
	var result_179194 = null;

	var F={procname:"asdl.newAstAssign",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179194 = {m_type: NTI179182, targets: null, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179194.kind = 5;
	framePtr = F.prev;

	return result_179194;

}

function ast_expr_stmt_401565(parse_node_401567) {
	var result_407617 = null;

	var F={procname:"ast.astExprStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_401567.tokenNode.token == 107))) {
		F.line = 447;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(447, 3) `parseNode.tokenNode.token == expr_stmt` "));
		}
		
		F.line = 447;
		var testlist_star_expr1_407801 = ast_testlist_star_expr_401568(parse_node_401567.children[chckIndx(0, 0, parse_node_401567.children.length+0-1)-0]);
		if (((parse_node_401567.children != null ? parse_node_401567.children.length : 0) == 1)) {
		F.line = 449;
		result_407617 = new_ast_expr_401043(testlist_star_expr1_407801);
		break BeforeRet;
		}
		
		F.line = 451;
		var middle_child_407809 = parse_node_401567.children[chckIndx(1, 0, parse_node_401567.children.length+0-1)-0];
		F.line = 452;
		switch (middle_child_407809.tokenNode.token) {
		case 23:
			if (!(((parse_node_401567.children != null ? parse_node_401567.children.length : 0) == 3))) {
			F.line = 455;
			raiseException(new_syntax_error_156096(makeNimstrLit("Only support simple assign like x=1"), [], middle_child_407809.tokenNode.lineNo, middle_child_407809.tokenNode.colNo), "SyntaxError:ObjectType");
			}
			
			F.line = 456;
			var testlist_star_expr2_407820 = ast_testlist_star_expr_401568(parse_node_401567.children[chckIndx(2, 0, parse_node_401567.children.length+0-1)-0]);
			F.line = 457;
			var node_407821 = new_ast_assign_179192();
			F.line = 83;
			node_407821.lineno = new_int_401060(middle_child_407809.tokenNode.lineNo);
			F.line = 84;
			node_407821.col_offset = new_int_401060(middle_child_407809.tokenNode.colNo);
			F.line = 459;
			set_store_402278(testlist_star_expr1_407801);
			F.line = 460;
			if (node_407821.targets != null) { node_407821.targets.push(testlist_star_expr1_407801); } else { node_407821.targets = [testlist_star_expr1_407801]; };
			if (!(((node_407821.targets != null ? node_407821.targets.length : 0) == 1))) {
			F.line = 462;
			raiseException(new_syntax_error_156096(makeNimstrLit("Assign to multiple target not supported"), [], parse_node_401567.tokenNode.lineNo, parse_node_401567.tokenNode.colNo), "SyntaxError:ObjectType");
			}
			
			F.line = 463;
			node_407821.value = testlist_star_expr2_407820;
			F.line = 464;
			result_407617 = node_407821;
			break;
		case 110:
			F.line = 466;
			raiseException(new_syntax_error_156096(makeNimstrLit("Inplace operation not implemented"), [], middle_child_407809.tokenNode.lineNo, middle_child_407809.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		default: 
			F.line = 468;
			raiseException(new_syntax_error_156096(makeNimstrLit("Only support simple assignment like a=1"), [], middle_child_407809.tokenNode.lineNo, middle_child_407809.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
		if (!(!((result_407617 == null)))) {
		F.line = 469;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(469, 10) `\x0Anot (result == nil)` "));
		}
		
	} while (false);
	framePtr = F.prev;

	return result_407617;

}

function ast_del_stmt_401574(parse_node_401576) {
	var result_408632 = null;

	var F={procname:"ast.astDelStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 497;
		raiseException(new_syntax_error_156096(makeNimstrLit("del not implemented"), [], parse_node_401576.tokenNode.lineNo, parse_node_401576.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_408632;

}

function new_ast_pass_179839() {
	var result_179841 = null;

	var F={procname:"asdl.newAstPass",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179841 = {m_type: NTI179835, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179841.kind = 22;
	framePtr = F.prev;

	return result_179841;

}

function ast_pass_stmt_401577(parse_node_401579) {
	var result_408651 = null;

	var F={procname:"ast.astPassStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401579.tokenNode.token == 112))) {
		F.line = 501;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(501, 3) `parseNode.tokenNode.token == pass_stmt` "));
		}
		
		F.line = 501;
		result_408651 = new_ast_pass_179839();
		F.line = 83;
		result_408651.lineno = new_int_401060(parse_node_401579.children[chckIndx(0, 0, parse_node_401579.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_408651.col_offset = new_int_401060(parse_node_401579.children[chckIndx(0, 0, parse_node_401579.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_408651;

}

function new_ast_break_179870() {
	var result_179872 = null;

	var F={procname:"asdl.newAstBreak",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179872 = {m_type: NTI179866, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179872.kind = 23;
	framePtr = F.prev;

	return result_179872;

}

function ast_break_stmt_401583(parse_node_401585) {
	var result_409417 = null;

	var F={procname:"ast.astBreakStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401585.tokenNode.token == 114))) {
		F.line = 518;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(518, 3) `parseNode.tokenNode.token == break_stmt` "));
		}
		
		F.line = 518;
		result_409417 = new_ast_break_179870();
		F.line = 83;
		result_409417.lineno = new_int_401060(parse_node_401585.children[chckIndx(0, 0, parse_node_401585.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_409417.col_offset = new_int_401060(parse_node_401585.children[chckIndx(0, 0, parse_node_401585.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_409417;

}

function new_ast_continue_179901() {
	var result_179903 = null;

	var F={procname:"asdl.newAstContinue",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179903 = {m_type: NTI179897, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179903.kind = 24;
	framePtr = F.prev;

	return result_179903;

}

function ast_continue_stmt_401586(parse_node_401588) {
	var result_409619 = null;

	var F={procname:"ast.astContinueStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401588.tokenNode.token == 115))) {
		F.line = 522;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(522, 3) `parseNode.tokenNode.token == continue_stmt` "));
		}
		
		F.line = 522;
		result_409619 = new_ast_continue_179901();
		F.line = 83;
		result_409619.lineno = new_int_401060(parse_node_401588.children[chckIndx(0, 0, parse_node_401588.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_409619.col_offset = new_int_401060(parse_node_401588.children[chckIndx(0, 0, parse_node_401588.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_409619;

}

function new_ast_return_179120() {
	var result_179122 = null;

	var F={procname:"asdl.newAstReturn",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179122 = {m_type: NTI179114, value: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179122.kind = 3;
	framePtr = F.prev;

	return result_179122;

}

function ast_test_list_401713(parse_node_401715) {
	var result_424438 = null;

	var F={procname:"ast.astTestList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401715.tokenNode.token == 166))) {
		F.line = 1138;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1138, 3) `parseNode.tokenNode.token == testlist` "));
		}
		
		F.line = 1138;
		var elms_424602 = null;
		L1: do {
			F.line = 1139;
			var i_424620 = 0;
			F.line = 3616;
			var colontmp__424802 = 0;
			F.line = 1139;
			colontmp__424802 = divInt(addInt((parse_node_401715.children != null ? parse_node_401715.children.length : 0), 1), 2);
			F.line = 3617;
			var i_424805 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_424805 < colontmp__424802)) break L3;
						F.line = 3619;
						i_424620 = i_424805;
						F.line = 1140;
						var child_424622 = parse_node_401715.children[chckIndx(mulInt(2, i_424620), 0, parse_node_401715.children.length+0-1)-0];
						F.line = 1141;
						if (elms_424602 != null) { elms_424602.push(ast_test_401648(child_424622)); } else { elms_424602 = [ast_test_401648(child_424622)]; };
						F.line = 3620;
						i_424805 = addInt(i_424805, 1);
					}
			} while(false);
		} while(false);
		if (((parse_node_401715.children != null ? parse_node_401715.children.length : 0) == 1)) {
		F.line = 1143;
		result_424438 = elms_424602[chckIndx(0, 0, elms_424602.length+0-1)-0];
		}
		else {
			F.line = 1145;
			result_424438 = new_tuple_401511(elms_424602);
			F.line = 87;
			result_424438.lineno = elms_424602[chckIndx(0, 0, elms_424602.length+0-1)-0].lineno;
			F.line = 88;
			result_424438.col_offset = elms_424602[chckIndx(0, 0, elms_424602.length+0-1)-0].col_offset;
		}
		
		if (!(!((result_424438 == null)))) {
		F.line = 1147;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1147, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_424438;

}

function ast_return_stmt_401589(parse_node_401591) {
	var result_409819 = null;

	var F={procname:"ast.astReturnStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 527;
		if (!((parse_node_401591.tokenNode.token == 116))) {
		F.line = 527;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(527, 3) `parseNode.tokenNode.token == return_stmt` "));
		}
		
		F.line = 527;
		var node_410001 = new_ast_return_179120();
		F.line = 83;
		node_410001.lineno = new_int_401060(parse_node_401591.children[chckIndx(0, 0, parse_node_401591.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		node_410001.col_offset = new_int_401060(parse_node_401591.children[chckIndx(0, 0, parse_node_401591.children.length+0-1)-0].tokenNode.colNo);
		if (((parse_node_401591.children != null ? parse_node_401591.children.length : 0) == 1)) {
		F.line = 530;
		result_409819 = node_410001;
		break BeforeRet;
		}
		
		F.line = 531;
		node_410001.value = ast_test_list_401713(parse_node_401591.children[chckIndx(1, 0, parse_node_401591.children.length+0-1)-0]);
		result_409819 = node_410001;
	} while (false);
	framePtr = F.prev;

	return result_409819;

}

function new_ast_raise_179549() {
	var result_179551 = null;

	var F={procname:"asdl.newAstRaise",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179551 = {m_type: NTI179541, exc: null, cause: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179551.kind = 14;
	framePtr = F.prev;

	return result_179551;

}

function ast_raise_stmt_401595(parse_node_401597) {
	var result_410219 = null;

	var F={procname:"ast.astRaiseStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401597.tokenNode.token == 118))) {
		F.line = 539;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(539, 3) `parseNode.tokenNode.token == raise_stmt` "));
		}
		
		F.line = 539;
		result_410219 = new_ast_raise_179549();
		F.line = 83;
		result_410219.lineno = new_int_401060(parse_node_401597.children[chckIndx(0, 0, parse_node_401597.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_410219.col_offset = new_int_401060(parse_node_401597.children[chckIndx(0, 0, parse_node_401597.children.length+0-1)-0].tokenNode.colNo);
		F.line = 541;
		switch ((parse_node_401597.children != null ? parse_node_401597.children.length : 0)) {
		case 1:
			break;
		case 2:
			F.line = 545;
			result_410219.exc = ast_test_401648(parse_node_401597.children[chckIndx(1, 0, parse_node_401597.children.length+0-1)-0]);
			break;
		default: 
			F.line = 547;
			raiseException(new_syntax_error_156096(makeNimstrLit("Fancy raise not implemented"), [], parse_node_401597.children[chckIndx(2, 0, parse_node_401597.children.length+0-1)-0].tokenNode.lineNo, parse_node_401597.children[chckIndx(2, 0, parse_node_401597.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
	framePtr = F.prev;

	return result_410219;

}

function ast_yield_stmt_401592(parse_node_401594) {
	var result_410027 = null;

	var F={procname:"ast.astYieldStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401594.tokenNode.token == 117))) {
		F.line = 535;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(535, 3) `parseNode.tokenNode.token == yield_stmt` "));
		}
		
		F.line = 535;
		raiseException(new_syntax_error_156096(makeNimstrLit("Yield not implemented"), [], parse_node_401594.tokenNode.lineNo, parse_node_401594.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_410027;

}

function ast_flow_stmt_401580(parse_node_401582) {
	var result_408819 = null;

	var F={procname:"ast.astFlowStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401582.tokenNode.token == 113))) {
		F.line = 506;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(506, 3) `parseNode.tokenNode.token == flow_stmt` "));
		}
		
		F.line = 506;
		var child_409001 = parse_node_401582.children[chckIndx(0, 0, parse_node_401582.children.length+0-1)-0];
		F.line = 507;
		switch (child_409001.tokenNode.token) {
		case 114:
			F.line = 508;
			result_408819 = ast_break_stmt_401583(child_409001);
			break;
		case 115:
			F.line = 509;
			result_408819 = ast_continue_stmt_401586(child_409001);
			break;
		case 116:
			F.line = 510;
			result_408819 = ast_return_stmt_401589(child_409001);
			break;
		case 118:
			F.line = 511;
			result_408819 = ast_raise_stmt_401595(child_409001);
			break;
		case 117:
			F.line = 512;
			result_408819 = ast_yield_stmt_401592(child_409001);
			break;
		default: 
			if (true) {
			F.line = 512;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(512, 5) `false` "));
			}
			
			break;
		}
		if (!(!((result_408819 == null)))) {
		F.line = 514;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(514, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_408819;

}

function new_ast_import_179666() {
	var result_179668 = null;

	var F={procname:"asdl.newAstImport",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179668 = {m_type: NTI179658, names: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179668.kind = 17;
	framePtr = F.prev;

	return result_179668;

}

function new_ast_alias_182236() {
	var result_182238 = null;

	var F={procname:"asdl.newAstAlias",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182238 = {m_type: NTI182228, name: null, asname: null, kind: 0};
		F.line = 111;
		result_182238.kind = 0;
	framePtr = F.prev;

	return result_182238;

}

function ast_dotted_name_401608(parse_node_401610) {
	var result_411636 = null;

	var F={procname:"ast.astDottedName",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401610.tokenNode.token == 126))) {
		F.line = 597;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(597, 3) `parseNode.tokenNode.token == dotted_name` "));
		}
		
		if (!(((parse_node_401610.children != null ? parse_node_401610.children.length : 0) == 1))) {
		F.line = 598;
		raiseException(new_syntax_error_156096(makeNimstrLit("dotted import name not supported"), [], parse_node_401610.children[chckIndx(1, 0, parse_node_401610.children.length+0-1)-0].tokenNode.lineNo, parse_node_401610.children[chckIndx(1, 0, parse_node_401610.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 599;
		result_411636 = new_ast_alias_182236();
		F.line = 600;
		result_411636.name = new_identifier_401085(parse_node_401610.children[chckIndx(0, 0, parse_node_401610.children.length+0-1)-0].tokenNode.content);
	framePtr = F.prev;

	return result_411636;

}

function ast_dotted_as_name_411246(parse_node_411248) {
	var result_411249 = null;

	var F={procname:"ast.ast_dotted_as_name",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 579;
		if (!((parse_node_411248.tokenNode.token == 123))) {
		F.line = 579;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(579, 3) `parseNode.tokenNode.token == dotted_as_name` "));
		}
		
		if (!(((parse_node_411248.children != null ? parse_node_411248.children.length : 0) == 1))) {
		F.line = 580;
		raiseException(new_syntax_error_156096(makeNimstrLit("import alias not implemented"), [], parse_node_411248.tokenNode.lineNo, parse_node_411248.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		result_411249 = ast_dotted_name_401608(parse_node_411248.children[chckIndx(0, 0, parse_node_411248.children.length+0-1)-0]);
	framePtr = F.prev;

	return result_411249;

}

function ast_dotted_as_names_401604(parse_node_401606) {
	var result_411427 = null;

	var F={procname:"ast.astDottedAsNames",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401606.tokenNode.token == 125))) {
		F.line = 590;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(590, 3) `parseNode.tokenNode.token == dotted_as_names` "));
		}
		
		if (!(((parse_node_401606.children != null ? parse_node_401606.children.length : 0) == 1))) {
		F.line = 591;
		raiseException(new_syntax_error_156096(makeNimstrLit("import multiple modules in one line not implemented"), [], parse_node_401606.children[chckIndx(1, 0, parse_node_401606.children.length+0-1)-0].tokenNode.lineNo, parse_node_401606.children[chckIndx(1, 0, parse_node_401606.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 593;
		if (result_411427 != null) { result_411427.push(ast_dotted_as_name_411246(parse_node_401606.children[chckIndx(0, 0, parse_node_401606.children.length+0-1)-0])); } else { result_411427 = [ast_dotted_as_name_411246(parse_node_401606.children[chckIndx(0, 0, parse_node_401606.children.length+0-1)-0])]; };
	framePtr = F.prev;

	return result_411427;

}

function ast_import_name_401601(parse_node_401603) {
	var result_410817 = null;

	var F={procname:"ast.astImportName",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 563;
		if (!((parse_node_401603.tokenNode.token == 120))) {
		F.line = 563;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(563, 3) `parseNode.tokenNode.token == import_name` "));
		}
		
		F.line = 563;
		var node_411001 = new_ast_import_179666();
		F.line = 83;
		node_411001.lineno = new_int_401060(parse_node_401603.children[chckIndx(0, 0, parse_node_401603.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		node_411001.col_offset = new_int_401060(parse_node_401603.children[chckIndx(0, 0, parse_node_401603.children.length+0-1)-0].tokenNode.colNo);
		L1: do {
			F.line = 565;
			var c_411215 = null;
			F.line = 3909;
			var colontmp__411227 = null;
			F.line = 565;
			colontmp__411227 = ast_dotted_as_names_401604(parse_node_401603.children[chckIndx(1, 0, parse_node_401603.children.length+0-1)-0]);
			F.line = 3911;
			var i_411230 = 0;
			F.line = 3912;
			var l_411232 = (colontmp__411227 != null ? colontmp__411227.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_411230 < l_411232)) break L3;
						F.line = 3914;
						c_411215 = colontmp__411227[chckIndx(i_411230, 0, colontmp__411227.length+0-1)-0];
						F.line = 566;
						if (node_411001.names != null) { node_411001.names.push(c_411215); } else { node_411001.names = [c_411215]; };
						F.line = 3915;
						i_411230 = addInt(i_411230, 1);
						if (!(((colontmp__411227 != null ? colontmp__411227.length : 0) == l_411232))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_410817 = node_411001;
	framePtr = F.prev;

	return result_410817;

}

function ast_import_stmt_401598(parse_node_401600) {
	var result_410428 = null;

	var F={procname:"ast.astImportStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401600.tokenNode.token == 119))) {
		F.line = 552;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(552, 3) `parseNode.tokenNode.token == import_stmt` "));
		}
		
		F.line = 552;
		var child_410601 = parse_node_401600.children[chckIndx(0, 0, parse_node_401600.children.length+0-1)-0];
		F.line = 553;
		switch (child_410601.tokenNode.token) {
		case 120:
			F.line = 555;
			result_410428 = ast_import_name_401601(child_410601);
			break;
		case 121:
			F.line = 557;
			raiseException(new_syntax_error_156096(makeNimstrLit("Import from not implemented"), [], parse_node_401600.tokenNode.lineNo, parse_node_401600.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		default: 
			F.line = 2895;
			var e_410611 = null;
			F.line = 2896;
			e_410611 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 559;
			e_410611.message = nimCopy(null, makeNimstrLit("wrong import_stmt"), NTI138);
			F.line = 2891;
			e_410611.parent = null;
			F.line = 559;
			raiseException(e_410611, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_410428;

}

function ast_global_stmt_401611(parse_node_401613) {
	var result_411840 = null;

	var F={procname:"ast.astGlobalStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 603;
		raiseException(new_syntax_error_156096(makeNimstrLit("global stmt not implemented"), [], parse_node_401613.tokenNode.lineNo, parse_node_401613.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_411840;

}

function ast_nonlocal_stmt_401614(parse_node_401616) {
	var result_411859 = null;

	var F={procname:"ast.astNonlocalStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 606;
		raiseException(new_syntax_error_156096(makeNimstrLit("nonlocal stmt not implemented"), [], parse_node_401616.tokenNode.lineNo, parse_node_401616.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_411859;

}

function new_ast_assert_179631() {
	var result_179633 = null;

	var F={procname:"asdl.newAstAssert",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179633 = {m_type: NTI179623, test: null, msg: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179633.kind = 16;
	framePtr = F.prev;

	return result_179633;

}

function ast_assert_stmt_401617(parse_node_401619) {
	var result_411878 = null;

	var F={procname:"ast.astAssertStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401619.tokenNode.token == 129))) {
		F.line = 610;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(610, 3) `parseNode.tokenNode.token == assert_stmt` "));
		}
		
		F.line = 610;
		result_411878 = new_ast_assert_179631();
		F.line = 83;
		result_411878.lineno = new_int_401060(parse_node_401619.children[chckIndx(0, 0, parse_node_401619.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_411878.col_offset = new_int_401060(parse_node_401619.children[chckIndx(0, 0, parse_node_401619.children.length+0-1)-0].tokenNode.colNo);
		F.line = 612;
		result_411878.test = ast_test_401648(parse_node_401619.children[chckIndx(1, 0, parse_node_401619.children.length+0-1)-0]);
		if (((parse_node_401619.children != null ? parse_node_401619.children.length : 0) == 4)) {
		F.line = 614;
		result_411878.msg = ast_test_401648(parse_node_401619.children[chckIndx(3, 0, parse_node_401619.children.length+0-1)-0]);
		}
		
	framePtr = F.prev;

	return result_411878;

}

function ast_small_stmt_401562(parse_node_401564) {
	var result_407030 = null;

	var F={procname:"ast.astSmallStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401564.tokenNode.token == 106))) {
		F.line = 432;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(432, 3) `parseNode.tokenNode.token == small_stmt` "));
		}
		
		F.line = 432;
		var child_407201 = parse_node_401564.children[chckIndx(0, 0, parse_node_401564.children.length+0-1)-0];
		F.line = 433;
		switch (child_407201.tokenNode.token) {
		case 107:
			F.line = 434;
			result_407030 = ast_expr_stmt_401565(child_407201);
			break;
		case 111:
			F.line = 435;
			result_407030 = ast_del_stmt_401574(child_407201);
			break;
		case 112:
			F.line = 436;
			result_407030 = ast_pass_stmt_401577(child_407201);
			break;
		case 113:
			F.line = 437;
			result_407030 = ast_flow_stmt_401580(child_407201);
			break;
		case 119:
			F.line = 438;
			result_407030 = ast_import_stmt_401598(child_407201);
			break;
		case 127:
			F.line = 439;
			result_407030 = ast_global_stmt_401611(child_407201);
			break;
		case 128:
			F.line = 440;
			result_407030 = ast_nonlocal_stmt_401614(child_407201);
			break;
		case 129:
			F.line = 441;
			result_407030 = ast_assert_stmt_401617(child_407201);
			break;
		default: 
			if (true) {
			F.line = 441;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(441, 5) `false` "));
			}
			
			break;
		}
		if (!(!((result_407030 == null)))) {
		F.line = 442;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(442, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_407030;

}

function ast_simple_stmt_401558(parse_node_401560) {
	var result_406424 = null;

	var F={procname:"ast.astSimpleStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401560.tokenNode.token == 105))) {
		F.line = 422;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(422, 3) `parseNode.tokenNode.token == simple_stmt` "));
		}
		
		L1: do {
			F.line = 422;
			var child_406609 = null;
			F.line = 3909;
			var colontmp__407002 = null;
			F.line = 422;
			colontmp__407002 = parse_node_401560.children;
			F.line = 3911;
			var i_407005 = 0;
			F.line = 3912;
			var l_407007 = (colontmp__407002 != null ? colontmp__407002.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_407005 < l_407007)) break L3;
						F.line = 3914;
						child_406609 = colontmp__407002[chckIndx(i_407005, 0, colontmp__407002.length+0-1)-0];
						if ((child_406609.tokenNode.token == 106)) {
						F.line = 424;
						if (result_406424 != null) { result_406424.push(ast_small_stmt_401562(child_406609)); } else { result_406424 = [ast_small_stmt_401562(child_406609)]; };
						}
						
						F.line = 3915;
						i_407005 = addInt(i_407005, 1);
						if (!(((colontmp__407002 != null ? colontmp__407002.length : 0) == l_407007))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((0 < (result_406424 != null ? result_406424.length : 0)))) {
		F.line = 425;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(425, 10) `0 < len(result)` "));
		}
		
		L4: do {
			F.line = 426;
			var child_406809 = null;
			F.line = 3911;
			var i_407011 = 0;
			F.line = 3912;
			var l_407013 = (result_406424 != null ? result_406424.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_407011 < l_407013)) break L6;
						F.line = 3914;
						child_406809 = result_406424[chckIndx(i_407011, 0, result_406424.length+0-1)-0];
						if (!(!((child_406809 == null)))) {
						F.line = 427;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(427, 12) `\x0Anot (child == nil)` "));
						}
						
						F.line = 3915;
						i_407011 = addInt(i_407011, 1);
						if (!(((result_406424 != null ? result_406424.length : 0) == l_407013))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_406424;

}

function new_ast_if_179436() {
	var result_179438 = null;

	var F={procname:"asdl.newAstIf",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179438 = {m_type: NTI179422, test: null, body: null, orelse: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179438.kind = 11;
	framePtr = F.prev;

	return result_179438;

}

function ast_suite_401644(parse_node_401646) {
	var result_414029 = null;

	var F={procname:"ast.astSuite",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401646.tokenNode.token == 139))) {
		F.line = 712;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(712, 3) `parseNode.tokenNode.token == suite` "));
		}
		
		F.line = 712;
		switch ((parse_node_401646.children != null ? parse_node_401646.children.length : 0)) {
		case 1:
			F.line = 714;
			var child_414208 = parse_node_401646.children[chckIndx(0, 0, parse_node_401646.children.length+0-1)-0];
			F.line = 715;
			result_414029 = nimCopy(null, ast_simple_stmt_401558(child_414208), NTI401561);
			break;
		default: 
			L1: do {
				F.line = 717;
				var child_414658 = null;
				F.line = 3909;
				var colontmp__415010 = null;
				F.line = 717;
				colontmp__415010 = HEX5BHEX5D_414235(parse_node_401646.children, HEX2EHEX2E_81053(2, 2));
				F.line = 3911;
				var i_415013 = 0;
				F.line = 3912;
				var l_415015 = (colontmp__415010 != null ? colontmp__415010.length : 0);
				L2: do {
					F.line = 3913;
						L3: while (true) {
						if (!(i_415013 < l_415015)) break L3;
							F.line = 3914;
							child_414658 = colontmp__415010[chckIndx(i_415013, 0, colontmp__415010.length+0-1)-0];
							L4: do {
								F.line = 23;
								var item_414671 = null;
								F.line = 3909;
								var colontmp__415003 = null;
								F.line = 718;
								colontmp__415003 = ast_stmt_401554(child_414658);
								F.line = 3911;
								var i_415006 = 0;
								F.line = 3912;
								var l_415008 = (colontmp__415003 != null ? colontmp__415003.length : 0);
								L5: do {
									F.line = 3913;
										L6: while (true) {
										if (!(i_415006 < l_415008)) break L6;
											F.line = 3914;
											item_414671 = colontmp__415003[chckIndx(i_415006, 0, colontmp__415003.length+0-1)-0];
											F.line = 24;
											if (result_414029 != null) { result_414029.push(item_414671); } else { result_414029 = [item_414671]; };
											F.line = 3915;
											i_415006 = addInt(i_415006, 1);
											if (!(((colontmp__415003 != null ? colontmp__415003.length : 0) == l_415008))) {
											F.line = 3916;
											failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
											}
											
										}
								} while(false);
							} while(false);
							F.line = 3915;
							i_415013 = addInt(i_415013, 1);
							if (!(((colontmp__415010 != null ? colontmp__415010.length : 0) == l_415015))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			break;
		}
		if (!(!(((result_414029 != null ? result_414029.length : 0) == 0)))) {
		F.line = 719;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(719, 10) `\x0Anot (len(result) == 0)` "));
		}
		
		L7: do {
			F.line = 720;
			var child_414809 = null;
			F.line = 3911;
			var i_415019 = 0;
			F.line = 3912;
			var l_415021 = (result_414029 != null ? result_414029.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_415019 < l_415021)) break L9;
						F.line = 3914;
						child_414809 = result_414029[chckIndx(i_415019, 0, result_414029.length+0-1)-0];
						if (!(!((child_414809 == null)))) {
						F.line = 721;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(721, 12) `\x0Anot (child == nil)` "));
						}
						
						F.line = 3915;
						i_415019 = addInt(i_415019, 1);
						if (!(((result_414029 != null ? result_414029.length : 0) == l_415021))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_414029;

}

function ast_if_stmt_401626(parse_node_401628) {
		var Tmp1;

	var result_412817 = null;

	var F={procname:"ast.astIfStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_401628.tokenNode.token == 132))) {
		F.line = 637;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(637, 3) `parseNode.tokenNode.token == if_stmt` "));
		}
		
		F.line = 637;
		result_412817 = new_ast_if_179436();
		F.line = 83;
		result_412817.lineno = new_int_401060(parse_node_401628.children[chckIndx(0, 0, parse_node_401628.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_412817.col_offset = new_int_401060(parse_node_401628.children[chckIndx(0, 0, parse_node_401628.children.length+0-1)-0].tokenNode.colNo);
		F.line = 639;
		result_412817.test = ast_test_401648(parse_node_401628.children[chckIndx(1, 0, parse_node_401628.children.length+0-1)-0]);
		F.line = 640;
		result_412817.body = nimCopy(null, ast_suite_401644(parse_node_401628.children[chckIndx(3, 0, parse_node_401628.children.length+0-1)-0]), NTI401647);
		if (((parse_node_401628.children != null ? parse_node_401628.children.length : 0) == 4)) {
		F.line = 642;
		break BeforeRet;
		}
		
		if (!(((parse_node_401628.children != null ? parse_node_401628.children.length : 0) == 7))) {
		F.line = 644;
		raiseException(new_syntax_error_156096(makeNimstrLit("elif not implemented"), [], parse_node_401628.children[chckIndx(4, 0, parse_node_401628.children.length+0-1)-0].tokenNode.lineNo, parse_node_401628.children[chckIndx(4, 0, parse_node_401628.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 645;
		result_412817.orelse = nimCopy(null, ast_suite_401644((Tmp1 = HEX5BHEX5D_350330(parse_node_401628.children, 1), Tmp1[0])[Tmp1[1]]), NTI401647);
	} while (false);
	framePtr = F.prev;

	return result_412817;

}

function new_ast_while_179395() {
	var result_179397 = null;

	var F={procname:"asdl.newAstWhile",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179397 = {m_type: NTI179381, test: null, body: null, orelse: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179397.kind = 10;
	framePtr = F.prev;

	return result_179397;

}

function ast_while_stmt_401629(parse_node_401631) {
	var result_413051 = null;

	var F={procname:"ast.astWhileStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401631.tokenNode.token == 133))) {
		F.line = 649;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(649, 3) `parseNode.tokenNode.token == while_stmt` "));
		}
		
		F.line = 649;
		result_413051 = new_ast_while_179395();
		F.line = 83;
		result_413051.lineno = new_int_401060(parse_node_401631.children[chckIndx(0, 0, parse_node_401631.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_413051.col_offset = new_int_401060(parse_node_401631.children[chckIndx(0, 0, parse_node_401631.children.length+0-1)-0].tokenNode.colNo);
		F.line = 651;
		result_413051.test = ast_test_401648(parse_node_401631.children[chckIndx(1, 0, parse_node_401631.children.length+0-1)-0]);
		F.line = 652;
		result_413051.body = nimCopy(null, ast_suite_401644(parse_node_401631.children[chckIndx(3, 0, parse_node_401631.children.length+0-1)-0]), NTI401647);
		if (!(((parse_node_401631.children != null ? parse_node_401631.children.length : 0) == 4))) {
		F.line = 654;
		raiseException(new_syntax_error_156096(makeNimstrLit("Else clause in while not implemented"), [], parse_node_401631.children[chckIndx(4, 0, parse_node_401631.children.length+0-1)-0].tokenNode.lineNo, parse_node_401631.children[chckIndx(4, 0, parse_node_401631.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
	framePtr = F.prev;

	return result_413051;

}

function new_ast_for_179311() {
	var result_179313 = null;

	var F={procname:"asdl.newAstFor",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179313 = {m_type: NTI179295, target: null, iter: null, body: null, orelse: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179313.kind = 8;
	framePtr = F.prev;

	return result_179313;

}

function ast_for_stmt_401632(parse_node_401634) {
	var result_413228 = null;

	var F={procname:"ast.astForStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401634.tokenNode.token == 134))) {
		F.line = 658;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(658, 3) `parseNode.tokenNode.token == for_stmt` "));
		}
		
		if (!(((parse_node_401634.children != null ? parse_node_401634.children.length : 0) == 6))) {
		F.line = 659;
		raiseException(new_syntax_error_156096(makeNimstrLit("for with else not implemented"), [], parse_node_401634.children[chckIndx(6, 0, parse_node_401634.children.length+0-1)-0].tokenNode.lineNo, parse_node_401634.children[chckIndx(6, 0, parse_node_401634.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 660;
		var for_node_413410 = new_ast_for_179311();
		F.line = 83;
		for_node_413410.lineno = new_int_401060(parse_node_401634.children[chckIndx(0, 0, parse_node_401634.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		for_node_413410.col_offset = new_int_401060(parse_node_401634.children[chckIndx(0, 0, parse_node_401634.children.length+0-1)-0].tokenNode.colNo);
		F.line = 662;
		for_node_413410.target = ast_expr_list_401710(parse_node_401634.children[chckIndx(1, 0, parse_node_401634.children.length+0-1)-0]);
		F.line = 663;
		set_store_402278(for_node_413410.target);
		F.line = 664;
		for_node_413410.iter = ast_test_list_401713(parse_node_401634.children[chckIndx(3, 0, parse_node_401634.children.length+0-1)-0]);
		F.line = 665;
		for_node_413410.body = nimCopy(null, ast_suite_401644(parse_node_401634.children[chckIndx(5, 0, parse_node_401634.children.length+0-1)-0]), NTI401647);
		F.line = 666;
		result_413228 = for_node_413410;
	framePtr = F.prev;

	return result_413228;

}

function new_ast_try_179596() {
	var result_179598 = null;

	var F={procname:"asdl.newAstTry",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179598 = {m_type: NTI179576, body: null, handlers: null, orelse: null, finalbody: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179598.kind = 15;
	framePtr = F.prev;

	return result_179598;

}

function new_ast_except_handler_182080() {
	var result_182082 = null;

	var F={procname:"asdl.newAstExceptHandler",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182082 = {m_type: NTI182068, type: null, name: null, body: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_182082.kind = 0;
	framePtr = F.prev;

	return result_182082;

}

function ast_except_clause_401638(parse_node_401640) {
	var result_413819 = null;

	var F={procname:"ast.astExceptClause",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_401640.tokenNode.token == 138))) {
		F.line = 697;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(697, 3) `parseNode.tokenNode.token == except_clause` "));
		}
		
		F.line = 697;
		result_413819 = new_ast_except_handler_182080();
		F.line = 83;
		result_413819.lineno = new_int_401060(parse_node_401640.children[chckIndx(0, 0, parse_node_401640.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_413819.col_offset = new_int_401060(parse_node_401640.children[chckIndx(0, 0, parse_node_401640.children.length+0-1)-0].tokenNode.colNo);
		F.line = 699;
		switch ((parse_node_401640.children != null ? parse_node_401640.children.length : 0)) {
		case 1:
			F.line = 701;
			break BeforeRet;
			break;
		case 2:
			F.line = 703;
			result_413819.type = ast_test_401648(parse_node_401640.children[chckIndx(1, 0, parse_node_401640.children.length+0-1)-0]);
			break;
		default: 
			F.line = 705;
			raiseException(new_syntax_error_156096(makeNimstrLit("\'except\' with name not implemented"), [], parse_node_401640.children[chckIndx(2, 0, parse_node_401640.children.length+0-1)-0].tokenNode.lineNo, parse_node_401640.children[chckIndx(2, 0, parse_node_401640.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_413819;

}

function ast_try_stmt_401635(parse_node_401637) {
	var result_413429 = null;

	var F={procname:"ast.astTryStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401637.tokenNode.token == 135))) {
		F.line = 674;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(674, 3) `parseNode.tokenNode.token == try_stmt` "));
		}
		
		F.line = 674;
		result_413429 = new_ast_try_179596();
		F.line = 83;
		result_413429.lineno = new_int_401060(parse_node_401637.children[chckIndx(0, 0, parse_node_401637.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_413429.col_offset = new_int_401060(parse_node_401637.children[chckIndx(0, 0, parse_node_401637.children.length+0-1)-0].tokenNode.colNo);
		F.line = 676;
		result_413429.body = nimCopy(null, ast_suite_401644(parse_node_401637.children[chckIndx(2, 0, parse_node_401637.children.length+0-1)-0]), NTI401647);
		L1: do {
			F.line = 677;
			var i_413621 = 0;
			F.line = 2104;
			var colontmp__413647 = 0;
			F.line = 677;
			colontmp__413647 = divInt(subInt((parse_node_401637.children != null ? parse_node_401637.children.length : 0), 1), 3);
			F.line = 2107;
			var res_413650 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_413650 <= colontmp__413647)) break L3;
						F.line = 2109;
						i_413621 = res_413650;
						F.line = 678;
						var child1_413622 = parse_node_401637.children[chckIndx(mulInt(i_413621, 3), 0, parse_node_401637.children.length+0-1)-0];
						if (!((child1_413622.tokenNode.token == 138))) {
						F.line = 680;
						raiseException(new_syntax_error_156096(makeNimstrLit("else/finally in try not implemented"), [], child1_413622.tokenNode.lineNo, child1_413622.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						F.line = 681;
						var handler_413634 = ast_except_clause_401638(child1_413622);
						F.line = 682;
						var child3_413635 = parse_node_401637.children[chckIndx(addInt(mulInt(i_413621, 3), 2), 0, parse_node_401637.children.length+0-1)-0];
						F.line = 683;
						handler_413634.body = nimCopy(null, ast_suite_401644(child3_413635), NTI401647);
						F.line = 684;
						if (result_413429.handlers != null) { result_413429.handlers.push(handler_413634); } else { result_413429.handlers = [handler_413634]; };
						F.line = 2110;
						res_413650 = addInt(res_413650, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_413429;

}

function ast_with_stmt_401641(parse_node_401643) {
	var result_413670 = null;

	var F={procname:"ast.astWithStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401643.tokenNode.token == 136))) {
		F.line = 688;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(688, 3) `parseNode.tokenNode.token == with_stmt` "));
		}
		
		F.line = 688;
		raiseException(new_syntax_error_156096(makeNimstrLit("with not implemented"), [], parse_node_401643.tokenNode.lineNo, parse_node_401643.tokenNode.colNo), "SyntaxError:ObjectType");
	framePtr = F.prev;

	return result_413670;

}

function new_ast_function_def_178993() {
	var result_178995 = null;

	var F={procname:"asdl.newAstFunctionDef",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_178995 = {m_type: NTI178975, name: null, args: null, body: null, decorator_list: null, returns: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_178995.kind = 0;
	framePtr = F.prev;

	return result_178995;

}

function new_ast_arguments_182131() {
	var result_182133 = null;

	var F={procname:"asdl.newAstArguments",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182133 = {m_type: NTI182107, args: null, vararg: null, kwonlyargs: null, kw_defaults: null, kwarg: null, defaults: null, kind: 0};
		F.line = 111;
		result_182133.kind = 0;
	framePtr = F.prev;

	return result_182133;

}

function new_ast_arg_182166() {
	var result_182168 = null;

	var F={procname:"asdl.newAstArg",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_182168 = {m_type: NTI182158, arg: null, annotation: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_182168.kind = 0;
	framePtr = F.prev;

	return result_182168;

}

function ast_tfpdef_401551(parse_node_401553) {
	var result_405474 = null;

	var F={procname:"ast.astTfpdef",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401553.tokenNode.token == 101))) {
		F.line = 391;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(391, 3) `parseNode.tokenNode.token == tfpdef` "));
		}
		
		F.line = 391;
		result_405474 = new_ast_arg_182166();
		F.line = 392;
		result_405474.arg = new_identifier_401085(parse_node_401553.children[chckIndx(0, 0, parse_node_401553.children.length+0-1)-0].tokenNode.content);
		F.line = 83;
		result_405474.lineno = new_int_401060(parse_node_401553.children[chckIndx(0, 0, parse_node_401553.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_405474.col_offset = new_int_401060(parse_node_401553.children[chckIndx(0, 0, parse_node_401553.children.length+0-1)-0].tokenNode.colNo);
	framePtr = F.prev;

	return result_405474;

}

function ast_typed_args_list_401548(parse_node_401550) {
	var result_405217 = null;

	var F={procname:"ast.astTypedArgsList",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401550.tokenNode.token == 100))) {
		F.line = 378;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(378, 3) `parseNode.tokenNode.token == typedargslist` "));
		}
		
		F.line = 378;
		result_405217 = new_ast_arguments_182131();
		L1: do {
			F.line = 379;
			var i_405418 = 0;
			F.line = 3616;
			var colontmp__405453 = 0;
			F.line = 379;
			colontmp__405453 = (parse_node_401550.children != null ? parse_node_401550.children.length : 0);
			F.line = 3617;
			var i_405456 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_405456 < colontmp__405453)) break L3;
						F.line = 3619;
						i_405418 = i_405456;
						F.line = 380;
						var child_405419 = parse_node_401550.children[chckIndx(i_405418, 0, parse_node_401550.children.length+0-1)-0];
						if ((modInt(i_405418, 2) == 1)) {
						if (!((child_405419.tokenNode.token == 13))) {
						F.line = 383;
						raiseException(new_syntax_error_156096(makeNimstrLit("Only support simple function arguments like foo(a,b)"), [], child_405419.tokenNode.lineNo, child_405419.tokenNode.colNo), "SyntaxError:ObjectType");
						}
						
						}
						else {
							if (!((child_405419.tokenNode.token == 101))) {
							F.line = 386;
							raiseException(new_syntax_error_156096(makeNimstrLit("Only support simple function arguments like foo(a,b)"), [], child_405419.tokenNode.lineNo, child_405419.tokenNode.colNo), "SyntaxError:ObjectType");
							}
							
							F.line = 387;
							if (result_405217.args != null) { result_405217.args.push(ast_tfpdef_401551(child_405419)); } else { result_405217.args = [ast_tfpdef_401551(child_405419)]; };
						}
						
						F.line = 3620;
						i_405456 = addInt(i_405456, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_405217;

}

function ast_parameters_401545(parse_node_401547) {
	var result_404818 = null;

	var F={procname:"ast.astParameters",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401547.tokenNode.token == 99))) {
		F.line = 361;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(361, 3) `parseNode.tokenNode.token == parameters` "));
		}
		
		F.line = 361;
		switch ((parse_node_401547.children != null ? parse_node_401547.children.length : 0)) {
		case 2:
			F.line = 363;
			result_404818 = new_ast_arguments_182131();
			break;
		case 3:
			F.line = 365;
			result_404818 = ast_typed_args_list_401548(parse_node_401547.children[chckIndx(1, 0, parse_node_401547.children.length+0-1)-0]);
			break;
		default: 
			F.line = 2895;
			var e_405013 = null;
			F.line = 2896;
			e_405013 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_405013.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_405013.parent = null;
			F.line = 367;
			raiseException(e_405013, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_404818;

}

function ast_funcdef_401542(parse_node_401544) {
		var Tmp1;

	var result_404419 = null;

	var F={procname:"ast.astFuncdef",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401544.tokenNode.token == 98))) {
		F.line = 350;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(350, 3) `parseNode.tokenNode.token == funcdef` "));
		}
		
		F.line = 350;
		result_404419 = new_ast_function_def_178993();
		F.line = 83;
		result_404419.lineno = new_int_401060(parse_node_401544.children[chckIndx(0, 0, parse_node_401544.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_404419.col_offset = new_int_401060(parse_node_401544.children[chckIndx(0, 0, parse_node_401544.children.length+0-1)-0].tokenNode.colNo);
		F.line = 352;
		result_404419.name = new_identifier_401085(parse_node_401544.children[chckIndx(1, 0, parse_node_401544.children.length+0-1)-0].tokenNode.content);
		F.line = 353;
		result_404419.args = ast_parameters_401545(parse_node_401544.children[chckIndx(2, 0, parse_node_401544.children.length+0-1)-0]);
		if (!(((parse_node_401544.children != null ? parse_node_401544.children.length : 0) == 5))) {
		F.line = 355;
		raiseException(new_syntax_error_156096(makeNimstrLit("Return type annotation not implemented"), [], parse_node_401544.tokenNode.lineNo, parse_node_401544.tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 356;
		result_404419.body = nimCopy(null, ast_suite_401644((Tmp1 = HEX5BHEX5D_350330(parse_node_401544.children, 1), Tmp1[0])[Tmp1[1]]), NTI401647);
		if (!(!((result_404419 == null)))) {
		F.line = 357;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(357, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_404419;

}

function new_ast_class_def_179087() {
	var result_179089 = null;

	var F={procname:"asdl.newAstClassDef",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_179089 = {m_type: NTI179065, name: null, bases: null, keywords: null, body: null, decorator_list: null, lineno: null, col_offset: null, kind: 0};
		F.line = 111;
		result_179089.kind = 2;
	framePtr = F.prev;

	return result_179089;

}

function ast_class_def_401719(parse_node_401721) {
		var Tmp1;

	var result_425108 = null;

	var F={procname:"ast.astClassDef",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401721.tokenNode.token == 168))) {
		F.line = 1176;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(1176, 3) `parseNode.tokenNode.token == classdef` "));
		}
		
		if (!(((parse_node_401721.children != null ? parse_node_401721.children.length : 0) == 4))) {
		F.line = 1177;
		raiseException(new_syntax_error_156096(makeNimstrLit("inherit not implemented"), [], parse_node_401721.children[chckIndx(4, 0, parse_node_401721.children.length+0-1)-0].tokenNode.lineNo, parse_node_401721.children[chckIndx(4, 0, parse_node_401721.children.length+0-1)-0].tokenNode.colNo), "SyntaxError:ObjectType");
		}
		
		F.line = 1178;
		result_425108 = new_ast_class_def_179087();
		F.line = 83;
		result_425108.lineno = new_int_401060(parse_node_401721.children[chckIndx(0, 0, parse_node_401721.children.length+0-1)-0].tokenNode.lineNo);
		F.line = 84;
		result_425108.col_offset = new_int_401060(parse_node_401721.children[chckIndx(0, 0, parse_node_401721.children.length+0-1)-0].tokenNode.colNo);
		F.line = 1180;
		result_425108.name = new_identifier_401085(parse_node_401721.children[chckIndx(1, 0, parse_node_401721.children.length+0-1)-0].tokenNode.content);
		F.line = 1181;
		result_425108.body = nimCopy(null, ast_suite_401644((Tmp1 = HEX5BHEX5D_350330(parse_node_401721.children, 1), Tmp1[0])[Tmp1[1]]), NTI401647);
	framePtr = F.prev;

	return result_425108;

}

function ast_decorator_403269(parse_node_403271) {
	var result_403272 = null;

	var F={procname:"ast.ast_decorator",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_403271.tokenNode.token == 94))) {
		F.line = 297;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(297, 3) `parseNode.tokenNode.token == decorator` "));
		}
		
		F.line = 297;
		var dotted_name_403401 = parse_node_403271.children[chckIndx(1, 0, parse_node_403271.children.length+0-1)-0];
		F.line = 298;
		switch ((dotted_name_403401.children != null ? dotted_name_403401.children.length : 0)) {
		case 1:
			F.line = 300;
			var name_403409 = dotted_name_403401.children[chckIndx(0, 0, dotted_name_403401.children.length+0-1)-0];
			F.line = 301;
			result_403272 = new_ast_name_401110(name_403409.tokenNode);
			F.line = 83;
			result_403272.lineno = new_int_401060(name_403409.tokenNode.lineNo);
			F.line = 84;
			result_403272.col_offset = new_int_401060(name_403409.tokenNode.colNo);
			break;
		default: 
			F.line = 304;
			raiseException(new_syntax_error_156096(makeNimstrLit("dotted name in decorators not implemented"), [], dotted_name_403401.tokenNode.lineNo, dotted_name_403401.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		}
		F.line = 306;
		switch ((parse_node_403271.children != null ? parse_node_403271.children.length : 0)) {
		case 3:
			break;
		default: 
			F.line = 310;
			var call_node_403421 = new_ast_call_180487();
			F.line = 311;
			call_node_403421.fun = result_403272;
			F.line = 83;
			call_node_403421.lineno = new_int_401060(dotted_name_403401.children[chckIndx(0, 0, dotted_name_403401.children.length+0-1)-0].tokenNode.lineNo);
			F.line = 84;
			call_node_403421.col_offset = new_int_401060(dotted_name_403401.children[chckIndx(0, 0, dotted_name_403401.children.length+0-1)-0].tokenNode.colNo);
			F.line = 313;
			switch ((parse_node_403271.children != null ? parse_node_403271.children.length : 0)) {
			case 5:
				F.line = 315;
				result_403272 = call_node_403421;
				break;
			case 6:
				F.line = 317;
				result_403272 = ast_arglist_401722(parse_node_403271.children[chckIndx(3, 0, parse_node_403271.children.length+0-1)-0], call_node_403421);
				break;
			default: 
				F.line = 2895;
				var e_403436 = null;
				F.line = 2896;
				e_403436 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 25;
				e_403436.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_403436.parent = null;
				F.line = 319;
				raiseException(e_403436, "InternalError");
				break;
			}
			break;
		}
	framePtr = F.prev;

	return result_403272;

}

function ast_decorators_403614(parse_node_403616) {
	var result_403618 = null;

	var F={procname:"ast.ast_decorators",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_403616.tokenNode.token == 95))) {
		F.line = 323;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(323, 3) `parseNode.tokenNode.token == decorators` "));
		}
		
		L1: do {
			F.line = 323;
			var child_403809 = null;
			F.line = 3909;
			var colontmp__403821 = null;
			F.line = 323;
			colontmp__403821 = parse_node_403616.children;
			F.line = 3911;
			var i_403824 = 0;
			F.line = 3912;
			var l_403826 = (colontmp__403821 != null ? colontmp__403821.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_403824 < l_403826)) break L3;
						F.line = 3914;
						child_403809 = colontmp__403821[chckIndx(i_403824, 0, colontmp__403821.length+0-1)-0];
						F.line = 324;
						if (result_403618 != null) { result_403618.push(ast_decorator_403269(child_403809)); } else { result_403618 = [ast_decorator_403269(child_403809)]; };
						F.line = 3915;
						i_403824 = addInt(i_403824, 1);
						if (!(((colontmp__403821 != null ? colontmp__403821.length : 0) == l_403826))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_403618;

}

function ast_decorated_401539(parse_node_401541) {
	var result_403843 = null;

	var F={procname:"ast.astDecorated",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((parse_node_401541.tokenNode.token == 96))) {
		F.line = 328;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(328, 3) `parseNode.tokenNode.token == decorated` "));
		}
		
		F.line = 328;
		var decorators_404001 = ast_decorators_403614(parse_node_401541.children[chckIndx(0, 0, parse_node_401541.children.length+0-1)-0]);
		F.line = 329;
		var child2_404002 = parse_node_401541.children[chckIndx(1, 0, parse_node_401541.children.length+0-1)-0];
		F.line = 330;
		switch (child2_404002.tokenNode.token) {
		case 168:
			F.line = 332;
			var class_def_404004 = ast_class_def_401719(child2_404002);
			F.line = 333;
			class_def_404004.decorator_list = nimCopy(null, decorators_404001, NTI403617);
			F.line = 334;
			result_403843 = class_def_404004;
			break BeforeRet;
			break;
		case 98:
			F.line = 336;
			var func_def_404006 = ast_funcdef_401542(child2_404002);
			F.line = 337;
			func_def_404006.decorator_list = nimCopy(null, decorators_404001, NTI403617);
			F.line = 338;
			result_403843 = func_def_404006;
			break BeforeRet;
			break;
		case 97:
			F.line = 340;
			raiseException(new_syntax_error_156096(makeNimstrLit("async function not implemented"), [], child2_404002.tokenNode.lineNo, child2_404002.tokenNode.colNo), "SyntaxError:ObjectType");
			break;
		default: 
			F.line = 2895;
			var e_404015 = null;
			F.line = 2896;
			e_404015 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_404015.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_404015.parent = null;
			F.line = 342;
			raiseException(e_404015, "InternalError");
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_403843;

}

function ast_async_stmt_401623(parse_node_401625) {
	var result_412617 = null;

	var F={procname:"ast.astAsyncStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401625.tokenNode.token == 131))) {
		F.line = 633;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(633, 3) `parseNode.tokenNode.token == async_stmt` "));
		}
		
	framePtr = F.prev;

	return result_412617;

}

function ast_compound_stmt_401620(parse_node_401622) {
	var result_412026 = null;

	var F={procname:"ast.astCompoundStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401622.tokenNode.token == 130))) {
		F.line = 618;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(618, 3) `parseNode.tokenNode.token == compound_stmt` "));
		}
		
		F.line = 618;
		var child_412201 = parse_node_401622.children[chckIndx(0, 0, parse_node_401622.children.length+0-1)-0];
		F.line = 619;
		switch (child_412201.tokenNode.token) {
		case 132:
			F.line = 620;
			result_412026 = ast_if_stmt_401626(child_412201);
			break;
		case 133:
			F.line = 621;
			result_412026 = ast_while_stmt_401629(child_412201);
			break;
		case 134:
			F.line = 622;
			result_412026 = ast_for_stmt_401632(child_412201);
			break;
		case 135:
			F.line = 623;
			result_412026 = ast_try_stmt_401635(child_412201);
			break;
		case 136:
			F.line = 624;
			result_412026 = ast_with_stmt_401641(child_412201);
			break;
		case 98:
			F.line = 625;
			result_412026 = ast_funcdef_401542(child_412201);
			break;
		case 168:
			F.line = 626;
			result_412026 = ast_class_def_401719(child_412201);
			break;
		case 96:
			F.line = 627;
			result_412026 = ast_decorated_401539(child_412201);
			break;
		case 131:
			F.line = 628;
			result_412026 = ast_async_stmt_401623(child_412201);
			break;
		default: 
			if (true) {
			F.line = 628;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(628, 5) `false` "));
			}
			
			break;
		}
		if (!(!((result_412026 == null)))) {
		F.line = 630;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(630, 10) `\x0Anot (result == nil)` "));
		}
		
	framePtr = F.prev;

	return result_412026;

}

function ast_stmt_401554(parse_node_401556) {
	var result_405621 = null;

	var F={procname:"ast.astStmt",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_401556.tokenNode.token == 104))) {
		F.line = 407;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(407, 3) `parseNode.tokenNode.token == stmt` "));
		}
		
		F.line = 407;
		var child_405801 = parse_node_401556.children[chckIndx(0, 0, parse_node_401556.children.length+0-1)-0];
		F.line = 408;
		switch (child_405801.tokenNode.token) {
		case 105:
			F.line = 410;
			result_405621 = nimCopy(null, ast_simple_stmt_401558(child_405801), NTI401561);
			break;
		case 130:
			F.line = 412;
			if (result_405621 != null) { result_405621.push(ast_compound_stmt_401620(child_405801)); } else { result_405621 = [ast_compound_stmt_401620(child_405801)]; };
			break;
		default: 
			F.line = 2895;
			var e_405819 = null;
			F.line = 2896;
			e_405819 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_405819.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_405819.parent = null;
			F.line = 414;
			raiseException(e_405819, "InternalError");
			break;
		}
		if (!((0 < (result_405621 != null ? result_405621.length : 0)))) {
		F.line = 415;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(415, 10) `0 < len(result)` "));
		}
		
		L1: do {
			F.line = 416;
			var child_406209 = null;
			F.line = 3911;
			var i_406404 = 0;
			F.line = 3912;
			var l_406406 = (result_405621 != null ? result_405621.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_406404 < l_406406)) break L3;
						F.line = 3914;
						child_406209 = result_405621[chckIndx(i_406404, 0, result_405621.length+0-1)-0];
						if (!(!((child_406209 == null)))) {
						F.line = 417;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(417, 12) `\x0Anot (child == nil)` "));
						}
						
						F.line = 3915;
						i_406404 = addInt(i_406404, 1);
						if (!(((result_405621 != null ? result_405621.length : 0) == l_406406))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_405621;

}

function ast_file_input_403014(parse_node_403016) {
	var result_403017 = null;

	var F={procname:"ast.ast_file_input",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_403016.tokenNode.token == 92))) {
		F.line = 284;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(284, 3) `parseNode.tokenNode.token == file_input` "));
		}
		
		F.line = 284;
		result_403017 = new_ast_module_178845();
		L1: do {
			F.line = 285;
			var child_403209 = null;
			F.line = 3909;
			var colontmp__403250 = null;
			F.line = 285;
			colontmp__403250 = parse_node_403016.children;
			F.line = 3911;
			var i_403253 = 0;
			F.line = 3912;
			var l_403255 = (colontmp__403250 != null ? colontmp__403250.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_403253 < l_403255)) break L3;
						F.line = 3914;
						child_403209 = colontmp__403250[chckIndx(i_403253, 0, colontmp__403250.length+0-1)-0];
						if ((child_403209.tokenNode.token == 104)) {
						L4: do {
							F.line = 23;
							var item_403231 = null;
							F.line = 3909;
							var colontmp__403244 = null;
							F.line = 287;
							colontmp__403244 = ast_stmt_401554(child_403209);
							F.line = 3911;
							var i_403247 = 0;
							F.line = 3912;
							var l_403249 = (colontmp__403244 != null ? colontmp__403244.length : 0);
							L5: do {
								F.line = 3913;
									L6: while (true) {
									if (!(i_403247 < l_403249)) break L6;
										F.line = 3914;
										item_403231 = colontmp__403244[chckIndx(i_403247, 0, colontmp__403244.length+0-1)-0];
										F.line = 24;
										if (result_403017.body != null) { result_403017.body.push(item_403231); } else { result_403017.body = [item_403231]; };
										F.line = 3915;
										i_403247 = addInt(i_403247, 1);
										if (!(((colontmp__403244 != null ? colontmp__403244.length : 0) == l_403249))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						}
						
						F.line = 3915;
						i_403253 = addInt(i_403253, 1);
						if (!(((colontmp__403250 != null ? colontmp__403250.length : 0) == l_403255))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_403017;

}

function new_ast_interactive_178880() {
	var result_178882 = null;

	var F={procname:"asdl.newAstInteractive",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_178882 = {m_type: NTI178872, body: null, kind: 0};
		F.line = 111;
		result_178882.kind = 1;
	framePtr = F.prev;

	return result_178882;

}

function ast_single_input_402495(parse_node_402497) {
	var result_402498 = null;

	var F={procname:"ast.ast_single_input",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!((parse_node_402497.tokenNode.token == 91))) {
		F.line = 266;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/ast.nim(266, 3) `parseNode.tokenNode.token == single_input` "));
		}
		
		F.line = 266;
		result_402498 = new_ast_interactive_178880();
		F.line = 267;
		var child_402601 = parse_node_402497.children[chckIndx(0, 0, parse_node_402497.children.length+0-1)-0];
		F.line = 268;
		switch ((parse_node_402497.children != null ? parse_node_402497.children.length : 0)) {
		case 1:
			F.line = 270;
			switch (child_402601.tokenNode.token) {
			case 5:
				break;
			case 105:
				F.line = 274;
				result_402498.body = nimCopy(null, ast_simple_stmt_401558(child_402601), NTI401561);
				break;
			default: 
				F.line = 2895;
				var e_402616 = null;
				F.line = 2896;
				e_402616 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
				F.line = 25;
				e_402616.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
				F.line = 2891;
				e_402616.parent = null;
				F.line = 276;
				raiseException(e_402616, "InternalError");
				break;
			}
			break;
		case 2:
			F.line = 278;
			if (result_402498.body != null) { result_402498.body.push(ast_compound_stmt_401620(child_402601)); } else { result_402498.body = [ast_compound_stmt_401620(child_402601)]; };
			break;
		default: 
			F.line = 2895;
			var e_402816 = null;
			F.line = 2896;
			e_402816 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_402816.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_402816.parent = null;
			F.line = 280;
			raiseException(e_402816, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_402498;

}

function ast_426236(root_426238) {
	var result_426239 = null;

	var F={procname:"ast.ast",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 1237;
		switch (root_426238.tokenNode.token) {
		case 92:
			F.line = 1239;
			result_426239 = ast_file_input_403014(root_426238);
			break;
		case 91:
			F.line = 1241;
			result_426239 = ast_single_input_402495(root_426238);
			break;
		case 93:
			F.line = 2895;
			var e_426248 = null;
			F.line = 2896;
			e_426248 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_426248.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_426248.parent = null;
			F.line = 1243;
			raiseException(e_426248, "InternalError");
			break;
		default: 
			F.line = 2895;
			var e_426406 = null;
			F.line = 2896;
			e_426406 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_426406.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_426406.parent = null;
			F.line = 1245;
			raiseException(e_426406, "InternalError");
			break;
		}
	framePtr = F.prev;

	return result_426239;

}

function new_494654() {
	var result_494659 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_494801 = null;
		F.line = 211;
		r_494801 = {units: null, st: null, interactive: false, fileName: null};
		F.line = 212;
		result_494659 = r_494801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_494659;

}

function init_table_458558(initial_size_458563) {
	var result_458565 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_458563))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_458565.counter = 0;
		F.line = 354;
		result_458565.data = new Array(chckRange(initial_size_458563, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_458563, 0, 2147483647);++i) {result_458565.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_458565;

}

function pop_443422(s_443428, s_443428_Idx) {
	var result_443429 = {Field0: null, Field1: null};

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_443437 = subInt((s_443428[s_443428_Idx] != null ? s_443428[s_443428_Idx].length : 0), 1);
		F.line = 2525;
		nimCopy(result_443429, s_443428[s_443428_Idx][chckIndx(l_443437, 0, s_443428[s_443428_Idx].length+0-1)-0], NTI443401);
		F.line = 2526;
		if (s_443428[s_443428_Idx].length < chckRange(l_443437, 0, 2147483647)) { for (var i=s_443428[s_443428_Idx].length;i<chckRange(l_443437, 0, 2147483647);++i) s_443428[s_443428_Idx].push({Field0: null, Field1: null}); }
               else { s_443428[s_443428_Idx].length = chckRange(l_443437, 0, 2147483647); };
	framePtr = F.prev;

	return result_443429;

}

function new_427371() {
	var result_427376 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_427401 = null;
		F.line = 211;
		r_427401 = {parent: null, children: null, argVars: {data: null, counter: 0}, declaredVars: {data: null, counter: 0}, usedVars: {data: null, counter: 0}, scopes: {data: null, counter: 0}, names: {data: null, counter: 0}, localVars: {data: null, counter: 0}, cellVars: {data: null, counter: 0}, freeVars: {data: null, counter: 0}};
		F.line = 212;
		result_427376 = r_427401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_427376;

}

function init_table_427443(initial_size_427448) {
	var result_427450 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_427448))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_427450.counter = 0;
		F.line = 354;
		result_427450.data = new Array(chckRange(initial_size_427448, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_427448, 0, 2147483647);++i) {result_427450.data[i]={Field0: 0, Field1: null, Field2: 0};}	framePtr = F.prev;

	return result_427450;

}

function init_427652(s_427658, initial_size_427660) {
	var F={procname:"init.init",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_427660))) {
		F.line = 400;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(400, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 401;
		s_427658.counter = 0;
		F.line = 402;
		s_427658.data = new Array(chckRange(initial_size_427660, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_427660, 0, 2147483647);++i) {s_427658.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_427626(initial_size_427630) {
	var result_427632 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 414;
		init_427652(result_427632[0], initial_size_427630);
	framePtr = F.prev;

	return result_427632[0];

}

function init_table_427849(initial_size_427854) {
	var result_427856 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_128047(initial_size_427854))) {
		F.line = 352;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim(352, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 353;
		result_427856.counter = 0;
		F.line = 354;
		result_427856.data = new Array(chckRange(initial_size_427854, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_427854, 0, 2147483647);++i) {result_427856.data[i]={Field0: 0, Field1: null, Field2: 0};}	framePtr = F.prev;

	return result_427856;

}

function new_sym_table_entry_427365(parent_427367) {
	var result_427368 = null;

	var F={procname:"symtable.newSymTableEntry",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 55;
		result_427368 = new_427371();
		F.line = 56;
		result_427368.parent = parent_427367;
		if (!((parent_427367 === null))) {
		F.line = 58;
		if (parent_427367.children != null) { parent_427367.children.push(result_427368); } else { parent_427367.children = [result_427368]; };
		}
		
		F.line = 59;
		nimCopy(result_427368.argVars, init_table_427443(64), NTI427186);
		F.line = 60;
		nimCopy(result_427368.declaredVars, init_set_427626(64), NTI427211);
		F.line = 61;
		nimCopy(result_427368.usedVars, init_set_427626(64), NTI427211);
		F.line = 62;
		nimCopy(result_427368.scopes, init_table_427849(64), NTI427242);
		F.line = 63;
		nimCopy(result_427368.names, init_table_427443(64), NTI427186);
		F.line = 64;
		nimCopy(result_427368.localVars, init_table_427443(64), NTI427186);
		F.line = 65;
		nimCopy(result_427368.cellVars, init_table_427443(64), NTI427186);
		F.line = 66;
		nimCopy(result_427368.freeVars, init_table_427443(64), NTI427186);
	framePtr = F.prev;

	return result_427368;

}

function raw_get_428330(t_428335, key_428337, hc_428339, hc_428339_Idx) {
						var Tmp3;

	var result_428340 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_428339[hc_428339_Idx] = hash_177049(key_428337);
		if ((hc_428339[hc_428339_Idx] == 0)) {
		F.line = 45;
		hc_428339[hc_428339_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_428350 = (hc_428339[hc_428339_Idx] & (t_428335.data != null ? (t_428335.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_428335.data[chckIndx(h_428350, 0, t_428335.data.length+0-1)-0].Field0)) break L2;
						if (!(t_428335.data[chckIndx(h_428350, 0, t_428335.data.length+0-1)-0].Field0 == hc_428339[hc_428339_Idx])) Tmp3 = false; else {							Tmp3 = (t_428335.data[chckIndx(h_428350, 0, t_428335.data.length+0-1)-0].Field1 == key_428337);						}					if (Tmp3) {
					F.line = 38;
					result_428340 = h_428350;
					break BeforeRet;
					}
					
					F.line = 39;
					h_428350 = next_try_146614(h_428350, (t_428335.data != null ? (t_428335.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_428340 = subInt(-1, h_428350);
	} while (false);
	framePtr = F.prev;

	return result_428340;

}

function raw_insert_445354(t_445361, data_445365, data_445365_Idx, key_445367, val_445369, hc_445371, h_445373) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_445365[data_445365_Idx][chckIndx(h_445373, 0, data_445365[data_445365_Idx].length+0-1)-0].Field1 = key_445367;
		F.line = 65;
		data_445365[data_445365_Idx][chckIndx(h_445373, 0, data_445365[data_445365_Idx].length+0-1)-0].Field2 = val_445369;
		F.line = 66;
		data_445365[data_445365_Idx][chckIndx(h_445373, 0, data_445365[data_445365_Idx].length+0-1)-0].Field0 = hc_445371;
	framePtr = F.prev;

	
}

function enlarge_444110(t_444117) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_444125 = null;
		F.line = 314;
		n_444125 = new Array(chckRange(mulInt((t_444117.data != null ? t_444117.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_444117.data != null ? t_444117.data.length : 0), 2), 0, 2147483647);++i) {n_444125[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 315;
		var Tmp1 = t_444117.data; t_444117.data = n_444125; n_444125 = Tmp1;		L2: do {
			F.line = 316;
			var i_444380 = 0;
			F.line = 2088;
			var colontmp__446095 = 0;
			F.line = 316;
			colontmp__446095 = (n_444125 != null ? (n_444125.length-1) : -1);
			F.line = 2094;
			var res_446098 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_446098 <= colontmp__446095)) break L4;
						F.line = 2096;
						i_444380 = res_446098;
						F.line = 317;
						var eh_444616 = n_444125[chckIndx(i_444380, 0, n_444125.length+0-1)-0].Field0;
						if (is_filled_146491(eh_444616)) {
						F.line = 319;
						var j_444625 = (eh_444616 & (t_444117.data != null ? (t_444117.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_444117.data[chckIndx(j_444625, 0, t_444117.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_444625 = next_try_146614(j_444625, (t_444117.data != null ? (t_444117.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_445354(t_444117, t_444117, "data", n_444125[chckIndx(i_444380, 0, n_444125.length+0-1)-0].Field1, n_444125[chckIndx(i_444380, 0, n_444125.length+0-1)-0].Field2, eh_444616, j_444625);
						}
						
						F.line = 2097;
						res_446098 = addInt(res_446098, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_446116(t_446121, key_446123, hc_446125) {
	var result_446126 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_446135 = (hc_446125 & (t_446121.data != null ? (t_446121.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_446121.data[chckIndx(h_446135, 0, t_446121.data.length+0-1)-0].Field0)) break L2;
					if (((t_446121.data[chckIndx(h_446135, 0, t_446121.data.length+0-1)-0].Field0 == hc_446125) && (t_446121.data[chckIndx(h_446135, 0, t_446121.data.length+0-1)-0].Field1 == key_446123))) {
					F.line = 38;
					result_446126 = h_446135;
					break BeforeRet;
					}
					
					F.line = 39;
					h_446135 = next_try_146614(h_446135, (t_446121.data != null ? (t_446121.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_446126 = subInt(-1, h_446135);
	} while (false);
	framePtr = F.prev;

	return result_446126;

}

function HEX5BHEX5DHEX3D_443611(t_443618, key_443620, val_443622) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_443623 = [0];
		F.line = 98;
		var index_443636 = raw_get_428330(t_443618, key_443620, hc_443623, 0);
		if ((0 <= index_443636)) {
		F.line = 99;
		t_443618.data[chckIndx(index_443636, 0, t_443618.data.length+0-1)-0].Field2 = val_443622;
		}
		else {
			if (must_rehash_146509((t_443618.data != null ? t_443618.data.length : 0), t_443618.counter)) {
			F.line = 90;
			enlarge_444110(t_443618);
			F.line = 91;
			index_443636 = raw_get_known_hc_446116(t_443618, key_443620, hc_443623[0]);
			}
			
			F.line = 92;
			index_443636 = subInt(-1, index_443636);
			F.line = 93;
			raw_insert_445354(t_443618, t_443618, "data", key_443620, val_443622, hc_443623[0], index_443636);
			F.line = 100;
			t_443618.counter = addInt(t_443618.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function is_valid_429696(s_429701) {
	var result_429702 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_429702 = (0 < (s_429701.data != null ? s_429701.data.length : 0));
	framePtr = F.prev;

	return result_429702;

}

function HEX3DHEX3D_398059(self_398061, other_398062) {
	var result_398063 = false;

	var F={procname:"stringobjectImpl.==",prev:framePtr,filename:"../Objects/stringobjectImpl.nim",line:0};
	framePtr = F;
		F.line = 14;
		result_398063 = eqStrings(self_398061.str, other_398062.str);
	framePtr = F.prev;

	return result_398063;

}

function raw_get_430021(s_430026, key_430028, hc_430030, hc_430030_Idx) {
						var Tmp3;

	var result_430031 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 168;
		F.line = 162;
		var hc_430035 = hash_398040(key_430028);
		if ((hc_430035 == 0)) {
		F.line = 164;
		hc_430035 = 314159265;
		}
		
		hc_430030[hc_430030_Idx] = hc_430035;
		F.line = 150;
		var h_430045 = (hc_430030[hc_430030_Idx] & (s_430026.data != null ? (s_430026.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_430026.data[chckIndx(h_430045, 0, s_430026.data.length+0-1)-0].Field0)) break L2;
						if (!(s_430026.data[chckIndx(h_430045, 0, s_430026.data.length+0-1)-0].Field0 == hc_430030[hc_430030_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_398059(s_430026.data[chckIndx(h_430045, 0, s_430026.data.length+0-1)-0].Field1, key_430028);						}					if (Tmp3) {
					F.line = 157;
					result_430031 = h_430045;
					break BeforeRet;
					}
					
					F.line = 158;
					h_430045 = next_try_154431(h_430045, (s_430026.data != null ? (s_430026.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_430031 = subInt(-1, h_430045);
	} while (false);
	framePtr = F.prev;

	return result_430031;

}

function raw_get_known_hc_433659(s_433664, key_433666, hc_433668) {
	var result_433669 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_433678 = (hc_433668 & (s_433664.data != null ? (s_433664.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_154282(s_433664.data[chckIndx(h_433678, 0, s_433664.data.length+0-1)-0].Field0)) break L2;
					if (((s_433664.data[chckIndx(h_433678, 0, s_433664.data.length+0-1)-0].Field0 == hc_433668) && HEX3DHEX3D_398059(s_433664.data[chckIndx(h_433678, 0, s_433664.data.length+0-1)-0].Field1, key_433666))) {
					F.line = 157;
					result_433669 = h_433678;
					break BeforeRet;
					}
					
					F.line = 158;
					h_433678 = next_try_154431(h_433678, (s_433664.data != null ? (s_433664.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_433669 = subInt(-1, h_433678);
	} while (false);
	framePtr = F.prev;

	return result_433669;

}

function raw_insert_434898(s_434904, data_434908, data_434908_Idx, key_434910, hc_434912, h_434914) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 172;
		data_434908[data_434908_Idx][chckIndx(h_434914, 0, data_434908[data_434908_Idx].length+0-1)-0].Field1 = key_434910;
		F.line = 173;
		data_434908[data_434908_Idx][chckIndx(h_434914, 0, data_434908[data_434908_Idx].length+0-1)-0].Field0 = hc_434912;
	framePtr = F.prev;

	
}

function enlarge_432667(s_432673) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		F.line = 225;
		var n_432678 = null;
		F.line = 226;
		n_432678 = new Array(chckRange(mulInt((s_432673.data != null ? s_432673.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_432673.data != null ? s_432673.data.length : 0), 2), 0, 2147483647);++i) {n_432678[i]={Field0: 0, Field1: null};}		F.line = 227;
		var Tmp1 = s_432673.data; s_432673.data = n_432678; n_432678 = Tmp1;		L2: do {
			F.line = 228;
			var i_432933 = 0;
			F.line = 2088;
			var colontmp__435400 = 0;
			F.line = 228;
			colontmp__435400 = (n_432678 != null ? (n_432678.length-1) : -1);
			F.line = 2094;
			var res_435403 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_435403 <= colontmp__435400)) break L4;
						F.line = 2096;
						i_432933 = res_435403;
						if (is_filled_154282(n_432678[chckIndx(i_432933, 0, n_432678.length+0-1)-0].Field0)) {
						F.line = 230;
						var j_434407 = subInt(-1, raw_get_known_hc_433659(s_432673, n_432678[chckIndx(i_432933, 0, n_432678.length+0-1)-0].Field1, n_432678[chckIndx(i_432933, 0, n_432678.length+0-1)-0].Field0));
						F.line = 231;
						raw_insert_434898(s_432673, s_432673, "data", n_432678[chckIndx(i_432933, 0, n_432678.length+0-1)-0].Field1, n_432678[chckIndx(i_432933, 0, n_432678.length+0-1)-0].Field0, j_434407);
						}
						
						F.line = 2097;
						res_435403 = addInt(res_435403, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_432325(s_432331, key_432333) {
	var F={procname:"incl.incl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_429696(s_432331))) {
		F.line = 265;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(265, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 234;
		var hc_432401 = [0];
		F.line = 235;
		var index_432432 = raw_get_430021(s_432331, key_432333, hc_432401, 0);
		if ((index_432432 < 0)) {
		if (must_rehash_154361((s_432331.data != null ? s_432331.data.length : 0), s_432331.counter)) {
		F.line = 238;
		enlarge_432667(s_432331);
		F.line = 239;
		index_432432 = raw_get_known_hc_433659(s_432331, key_432333, hc_432401[0]);
		}
		
		F.line = 240;
		raw_insert_434898(s_432331, s_432331, "data", key_432333, hc_432401[0], subInt(-1, index_432432));
		F.line = 241;
		s_432331.counter = addInt(s_432331.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function add_declaration_432242(ste_432244, name_432245) {
	var F={procname:"symtable.addDeclaration",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 83;
		incl_432325(ste_432244.declaredVars, name_432245);
	framePtr = F.prev;

	
}

function add_declaration_435524(ste_435526, name_435527) {
	var F={procname:"symtable.addDeclaration",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 86;
		var name_str_435528 = name_435527.value;
		F.line = 87;
		add_declaration_432242(ste_435526, name_str_435528);
	framePtr = F.prev;

	
}

function raw_get_435918(t_435923, key_435925, hc_435927, hc_435927_Idx) {
						var Tmp3;

	var result_435928 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_435927[hc_435927_Idx] = hash_398040(key_435925);
		if ((hc_435927[hc_435927_Idx] == 0)) {
		F.line = 45;
		hc_435927[hc_435927_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_435938 = (hc_435927[hc_435927_Idx] & (t_435923.data != null ? (t_435923.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_435923.data[chckIndx(h_435938, 0, t_435923.data.length+0-1)-0].Field0)) break L2;
						if (!(t_435923.data[chckIndx(h_435938, 0, t_435923.data.length+0-1)-0].Field0 == hc_435927[hc_435927_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_398059(t_435923.data[chckIndx(h_435938, 0, t_435923.data.length+0-1)-0].Field1, key_435925);						}					if (Tmp3) {
					F.line = 38;
					result_435928 = h_435938;
					break BeforeRet;
					}
					
					F.line = 39;
					h_435938 = next_try_146614(h_435938, (t_435923.data != null ? (t_435923.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_435928 = subInt(-1, h_435938);
	} while (false);
	framePtr = F.prev;

	return result_435928;

}

function raw_insert_439593(t_439600, data_439604, data_439604_Idx, key_439606, val_439608, hc_439610, h_439612) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_439604[data_439604_Idx][chckIndx(h_439612, 0, data_439604[data_439604_Idx].length+0-1)-0].Field1 = key_439606;
		F.line = 65;
		data_439604[data_439604_Idx][chckIndx(h_439612, 0, data_439604[data_439604_Idx].length+0-1)-0].Field2 = val_439608;
		F.line = 66;
		data_439604[data_439604_Idx][chckIndx(h_439612, 0, data_439604[data_439604_Idx].length+0-1)-0].Field0 = hc_439610;
	framePtr = F.prev;

	
}

function enlarge_438349(t_438356) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_438364 = null;
		F.line = 314;
		n_438364 = new Array(chckRange(mulInt((t_438356.data != null ? t_438356.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_438356.data != null ? t_438356.data.length : 0), 2), 0, 2147483647);++i) {n_438364[i]={Field0: 0, Field1: null, Field2: 0};}		F.line = 315;
		var Tmp1 = t_438356.data; t_438356.data = n_438364; n_438364 = Tmp1;		L2: do {
			F.line = 316;
			var i_438619 = 0;
			F.line = 2088;
			var colontmp__440334 = 0;
			F.line = 316;
			colontmp__440334 = (n_438364 != null ? (n_438364.length-1) : -1);
			F.line = 2094;
			var res_440337 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_440337 <= colontmp__440334)) break L4;
						F.line = 2096;
						i_438619 = res_440337;
						F.line = 317;
						var eh_438855 = n_438364[chckIndx(i_438619, 0, n_438364.length+0-1)-0].Field0;
						if (is_filled_146491(eh_438855)) {
						F.line = 319;
						var j_438864 = (eh_438855 & (t_438356.data != null ? (t_438356.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_438356.data[chckIndx(j_438864, 0, t_438356.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_438864 = next_try_146614(j_438864, (t_438356.data != null ? (t_438356.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_439593(t_438356, t_438356, "data", n_438364[chckIndx(i_438619, 0, n_438364.length+0-1)-0].Field1, n_438364[chckIndx(i_438619, 0, n_438364.length+0-1)-0].Field2, eh_438855, j_438864);
						}
						
						F.line = 2097;
						res_440337 = addInt(res_440337, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_440355(t_440360, key_440362, hc_440364) {
	var result_440365 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_440374 = (hc_440364 & (t_440360.data != null ? (t_440360.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_440360.data[chckIndx(h_440374, 0, t_440360.data.length+0-1)-0].Field0)) break L2;
					if (((t_440360.data[chckIndx(h_440374, 0, t_440360.data.length+0-1)-0].Field0 == hc_440364) && HEX3DHEX3D_398059(t_440360.data[chckIndx(h_440374, 0, t_440360.data.length+0-1)-0].Field1, key_440362))) {
					F.line = 38;
					result_440365 = h_440374;
					break BeforeRet;
					}
					
					F.line = 39;
					h_440374 = next_try_146614(h_440374, (t_440360.data != null ? (t_440360.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_440365 = subInt(-1, h_440374);
	} while (false);
	framePtr = F.prev;

	return result_440365;

}

function HEX5BHEX5DHEX3D_437850(t_437857, key_437859, val_437861) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_437862 = [0];
		F.line = 98;
		var index_437875 = raw_get_435918(t_437857, key_437859, hc_437862, 0);
		if ((0 <= index_437875)) {
		F.line = 99;
		t_437857.data[chckIndx(index_437875, 0, t_437857.data.length+0-1)-0].Field2 = val_437861;
		}
		else {
			if (must_rehash_146509((t_437857.data != null ? t_437857.data.length : 0), t_437857.counter)) {
			F.line = 90;
			enlarge_438349(t_437857);
			F.line = 91;
			index_437875 = raw_get_known_hc_440355(t_437857, key_437859, hc_437862[0]);
			}
			
			F.line = 92;
			index_437875 = subInt(-1, index_437875);
			F.line = 93;
			raw_insert_439593(t_437857, t_437857, "data", key_437859, val_437861, hc_437862[0], index_437875);
			F.line = 100;
			t_437857.counter = addInt(t_437857.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function pop_447809(s_447815, s_447815_Idx) {
	var result_447816 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_447824 = subInt((s_447815[s_447815_Idx] != null ? s_447815[s_447815_Idx].length : 0), 1);
		F.line = 2525;
		result_447816 = s_447815[s_447815_Idx][chckIndx(l_447824, 0, s_447815[s_447815_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_447815[s_447815_Idx].length < chckRange(l_447824, 0, 2147483647)) { for (var i=s_447815[s_447815_Idx].length;i<chckRange(l_447824, 0, 2147483647);++i) s_447815[s_447815_Idx].push(null); }
               else { s_447815[s_447815_Idx].length = chckRange(l_447824, 0, 2147483647); };
	framePtr = F.prev;

	return result_447816;

}

function add_used_435542(ste_435544, name_435545) {
	var F={procname:"symtable.addUsed",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 90;
		incl_432325(ste_435544.usedVars, name_435545);
	framePtr = F.prev;

	
}

function add_used_435648(ste_435650, name_435651) {
	var F={procname:"symtable.addUsed",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 93;
		var name_str_435652 = name_435651.value;
		F.line = 94;
		add_used_435542(ste_435650, name_str_435652);
	framePtr = F.prev;

	
}

function collect_declaration_443396(st_443398, ast_root_443399) {
	var F={procname:"symtable.collectDeclaration",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 148;
		var to_visit_443402 = [null];
		F.line = 149;
		if (to_visit_443402[0] != null) { to_visit_443402[0].push({Field0: ast_root_443399, Field1: null}); } else { to_visit_443402[0] = [{Field0: ast_root_443399, Field1: null}]; };
		L1: do {
			F.line = 150;
				L2: while (true) {
				if (!!(((to_visit_443402[0] != null ? to_visit_443402[0].length : 0) == 0))) break L2;
					F.line = 151;
					var colontmp__657431 = {Field0: null, Field1: null};
					F.line = 151;
					var ast_node_443462 = null;
					F.line = 151;
					var parent_ste_443463 = null;
					F.line = 151;
					nimCopy(colontmp__657431, pop_443422(to_visit_443402, 0), NTI443401);
					F.line = 151;
					ast_node_443462 = colontmp__657431["Field0"];
					F.line = 151;
					parent_ste_443463 = colontmp__657431["Field1"];
					F.line = 152;
					var ste_443464 = new_sym_table_entry_427365(parent_ste_443463);
					F.line = 153;
					HEX5BHEX5DHEX3D_443611(st_443398.entries, ast_node_443462, ste_443464);
					F.line = 154;
					var to_visit_per_ste_446935 = [null];
					if (isObj(ast_node_443462.m_type, NTI178837)) {
					L3: do {
						F.line = 163;
						var node_446980 = null;
						F.line = 3909;
						var colontmp__451404 = null;
						F.line = 163;
						colontmp__451404 = ast_node_443462.body;
						F.line = 3911;
						var i_451407 = 0;
						F.line = 3912;
						var l_451409 = (colontmp__451404 != null ? colontmp__451404.length : 0);
						L4: do {
							F.line = 3913;
								L5: while (true) {
								if (!(i_451407 < l_451409)) break L5;
									F.line = 3914;
									node_446980 = colontmp__451404[chckIndx(i_451407, 0, colontmp__451404.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(node_446980); } else { to_visit_per_ste_446935[0] = [node_446980]; };
									F.line = 3915;
									i_451407 = addInt(i_451407, 1);
									if (!(((colontmp__451404 != null ? colontmp__451404.length : 0) == l_451409))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_443462.m_type, NTI178872)) {
					L6: do {
						F.line = 163;
						var node_447013 = null;
						F.line = 3909;
						var colontmp__451412 = null;
						F.line = 163;
						colontmp__451412 = ast_node_443462.body;
						F.line = 3911;
						var i_451415 = 0;
						F.line = 3912;
						var l_451417 = (colontmp__451412 != null ? colontmp__451412.length : 0);
						L7: do {
							F.line = 3913;
								L8: while (true) {
								if (!(i_451415 < l_451417)) break L8;
									F.line = 3914;
									node_447013 = colontmp__451412[chckIndx(i_451415, 0, colontmp__451412.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(node_447013); } else { to_visit_per_ste_446935[0] = [node_447013]; };
									F.line = 3915;
									i_451415 = addInt(i_451415, 1);
									if (!(((colontmp__451412 != null ? colontmp__451412.length : 0) == l_451417))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_443462.m_type, NTI178975)) {
					L9: do {
						F.line = 163;
						var node_447046 = null;
						F.line = 3909;
						var colontmp__451420 = null;
						F.line = 163;
						colontmp__451420 = ast_node_443462.body;
						F.line = 3911;
						var i_451423 = 0;
						F.line = 3912;
						var l_451425 = (colontmp__451420 != null ? colontmp__451420.length : 0);
						L10: do {
							F.line = 3913;
								L11: while (true) {
								if (!(i_451423 < l_451425)) break L11;
									F.line = 3914;
									node_447046 = colontmp__451420[chckIndx(i_451423, 0, colontmp__451420.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(node_447046); } else { to_visit_per_ste_446935[0] = [node_447046]; };
									F.line = 3915;
									i_451423 = addInt(i_451423, 1);
									if (!(((colontmp__451420 != null ? colontmp__451420.length : 0) == l_451425))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 173;
					var f_447057 = ast_node_443462;
					F.line = 174;
					var args_447058 = nimCopy(null, f_447057.args.args, NTI182108);
					L12: do {
						F.line = 175;
						var idx_447105 = 0;
						F.line = 175;
						var arg_447106 = null;
						F.line = 2354;
						var i_451430 = 0;
						L13: do {
							F.line = 2355;
								L14: while (true) {
								if (!(i_451430 < (args_447058 != null ? args_447058.length : 0))) break L14;
									F.line = 2356;
									idx_447105 = i_451430;
									F.line = 2356;
									arg_447106 = args_447058[chckIndx(i_451430, 0, args_447058.length+0-1)-0];
									if (!(isObj(arg_447106.m_type, NTI182158))) {
									F.line = 176;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(176, 16) `arg of AstArg` "));
									}
									
									F.line = 177;
									add_declaration_435524(ste_443464, arg_447106.arg);
									F.line = 178;
									HEX5BHEX5DHEX3D_437850(ste_443464.argVars, arg_447106.arg.value, idx_447105);
									F.line = 2357;
									i_451430 = addInt(i_451430, 1);
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_443462.m_type, NTI179065)) {
					L15: do {
						F.line = 163;
						var node_447382 = null;
						F.line = 3909;
						var colontmp__451433 = null;
						F.line = 163;
						colontmp__451433 = ast_node_443462.body;
						F.line = 3911;
						var i_451436 = 0;
						F.line = 3912;
						var l_451438 = (colontmp__451433 != null ? colontmp__451433.length : 0);
						L16: do {
							F.line = 3913;
								L17: while (true) {
								if (!(i_451436 < l_451438)) break L17;
									F.line = 3914;
									node_447382 = colontmp__451433[chckIndx(i_451436, 0, colontmp__451433.length+0-1)-0];
									F.line = 164;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(node_447382); } else { to_visit_per_ste_446935[0] = [node_447382]; };
									F.line = 3915;
									i_451436 = addInt(i_451436, 1);
									if (!(((colontmp__451433 != null ? colontmp__451433.length : 0) == l_451438))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					}
					else {
					if (isObj(ast_node_443462.m_type, NTI180183)) {
					F.line = 182;
					var comp_node_447404 = ast_node_443462;
					F.line = 183;
					if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(comp_node_447404.elt); } else { to_visit_per_ste_446935[0] = [comp_node_447404.elt]; };
					L18: do {
						F.line = 184;
						var gen_447423 = null;
						F.line = 3909;
						var colontmp__451441 = null;
						F.line = 184;
						colontmp__451441 = comp_node_447404.generators;
						F.line = 3911;
						var i_451444 = 0;
						F.line = 3912;
						var l_451446 = (colontmp__451441 != null ? colontmp__451441.length : 0);
						L19: do {
							F.line = 3913;
								L20: while (true) {
								if (!(i_451444 < l_451446)) break L20;
									F.line = 3914;
									gen_447423 = colontmp__451441[chckIndx(i_451444, 0, colontmp__451441.length+0-1)-0];
									F.line = 185;
									var gen_node_447424 = gen_447423;
									F.line = 186;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(gen_node_447424.target); } else { to_visit_per_ste_446935[0] = [gen_node_447424.target]; };
									F.line = 3915;
									i_451444 = addInt(i_451444, 1);
									if (!(((colontmp__451441 != null ? colontmp__451441.length : 0) == l_451446))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 188;
					add_declaration_432242(ste_443464, new_py_string_176075(makeNimstrLit(".0")));
					F.line = 189;
					HEX5BHEX5DHEX3D_437850(ste_443464.argVars, new_py_string_176075(makeNimstrLit(".0")), 0);
					}
					else {
						F.line = 2895;
						var e_447599 = null;
						F.line = 2896;
						e_447599 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
						F.line = 25;
						e_447599.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
						F.line = 2891;
						e_447599.parent = null;
						F.line = 191;
						raiseException(e_447599, "InternalError");
					}
					}}}}
					L21: do {
						F.line = 193;
							L22: while (true) {
							if (!!(((to_visit_per_ste_446935[0] != null ? to_visit_per_ste_446935[0].length : 0) == 0))) break L22;
								F.line = 194;
								var ast_node_447849 = pop_447809(to_visit_per_ste_446935, 0);
								if (isObj(ast_node_447849.m_type, NTI178726)) {
								F.line = 196;
								switch (ast_node_447849.kind) {
								case 0:
									F.line = 199;
									var func_node_447862 = ast_node_447849;
									F.line = 200;
									add_declaration_435524(ste_443464, func_node_447862.name);
									F.line = 201;
									if (to_visit_443402[0] != null) { to_visit_443402[0].push({Field0: ast_node_447849, Field1: ste_443464}); } else { to_visit_443402[0] = [{Field0: ast_node_447849, Field1: ste_443464}]; };
									L23: do {
										F.line = 159;
										var ast_node_447885 = null;
										F.line = 3909;
										var colontmp__451450 = null;
										F.line = 202;
										colontmp__451450 = func_node_447862.decorator_list;
										F.line = 3911;
										var i_451453 = 0;
										F.line = 3912;
										var l_451455 = (colontmp__451450 != null ? colontmp__451450.length : 0);
										L24: do {
											F.line = 3913;
												L25: while (true) {
												if (!(i_451453 < l_451455)) break L25;
													F.line = 3914;
													ast_node_447885 = colontmp__451450[chckIndx(i_451453, 0, colontmp__451450.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_447885); } else { to_visit_per_ste_446935[0] = [ast_node_447885]; };
													F.line = 3915;
													i_451453 = addInt(i_451453, 1);
													if (!(((colontmp__451450 != null ? colontmp__451450.length : 0) == l_451455))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 2:
									F.line = 205;
									var class_node_447897 = ast_node_447849;
									if (!(((class_node_447897.bases != null ? class_node_447897.bases.length : 0) == 0))) {
									F.line = 206;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(206, 18) `len(classNode.bases) == 0` "));
									}
									
									if (!(((class_node_447897.keywords != null ? class_node_447897.keywords.length : 0) == 0))) {
									F.line = 207;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(207, 18) `len(classNode.keywords) == 0` "));
									}
									
									if (!(((class_node_447897.decorator_list != null ? class_node_447897.decorator_list.length : 0) == 0))) {
									F.line = 208;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(208, 18) `len(classNode.decorator_list) == 0` "));
									}
									
									F.line = 209;
									add_declaration_435524(ste_443464, class_node_447897.name);
									F.line = 210;
									if (to_visit_443402[0] != null) { to_visit_443402[0].push({Field0: ast_node_447849, Field1: ste_443464}); } else { to_visit_443402[0] = [{Field0: ast_node_447849, Field1: ste_443464}]; };
									break;
								case 3:
									if (!((ast_node_447849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_447849.value); } else { to_visit_per_ste_446935[0] = [ast_node_447849.value]; };
									}
									
									break;
								case 5:
									F.line = 216;
									var assign_node_448431 = ast_node_447849;
									if (!(((assign_node_448431.targets != null ? assign_node_448431.targets.length : 0) == 1))) {
									F.line = 217;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(217, 18) `len(assignNode.targets) == 1` "));
									}
									
									if (!((assign_node_448431.targets[chckIndx(0, 0, assign_node_448431.targets.length+0-1)-0] === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(assign_node_448431.targets[chckIndx(0, 0, assign_node_448431.targets.length+0-1)-0]); } else { to_visit_per_ste_446935[0] = [assign_node_448431.targets[chckIndx(0, 0, assign_node_448431.targets.length+0-1)-0]]; };
									}
									
									if (!((assign_node_448431.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(assign_node_448431.value); } else { to_visit_per_ste_446935[0] = [assign_node_448431.value]; };
									}
									
									break;
								case 8:
									F.line = 222;
									var for_node_448636 = ast_node_447849;
									if (!((for_node_448636.target.kind == 22))) {
									F.line = 224;
									raiseException(new_syntax_error_156096(makeNimstrLit("only name as loop variable"), [], for_node_448636.target.lineno.value, for_node_448636.target.col_offset.value), "SyntaxError:ObjectType");
									}
									
									if (!((for_node_448636.target === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(for_node_448636.target); } else { to_visit_per_ste_446935[0] = [for_node_448636.target]; };
									}
									
									if (!((for_node_448636.iter === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(for_node_448636.iter); } else { to_visit_per_ste_446935[0] = [for_node_448636.iter]; };
									}
									
									L26: do {
										F.line = 159;
										var ast_node_448691 = null;
										F.line = 3909;
										var colontmp__451457 = null;
										F.line = 227;
										colontmp__451457 = for_node_448636.body;
										F.line = 3911;
										var i_451460 = 0;
										F.line = 3912;
										var l_451462 = (colontmp__451457 != null ? colontmp__451457.length : 0);
										L27: do {
											F.line = 3913;
												L28: while (true) {
												if (!(i_451460 < l_451462)) break L28;
													F.line = 3914;
													ast_node_448691 = colontmp__451457[chckIndx(i_451460, 0, colontmp__451457.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_448691); } else { to_visit_per_ste_446935[0] = [ast_node_448691]; };
													F.line = 3915;
													i_451460 = addInt(i_451460, 1);
													if (!(((colontmp__451457 != null ? colontmp__451457.length : 0) == l_451462))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									if (!(((for_node_448636.orelse != null ? for_node_448636.orelse.length : 0) == 0))) {
									F.line = 228;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(228, 18) `len(forNode.orelse) == 0` "));
									}
									
									break;
								case 10:
									F.line = 231;
									var while_node_448802 = ast_node_447849;
									if (!((while_node_448802.test === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(while_node_448802.test); } else { to_visit_per_ste_446935[0] = [while_node_448802.test]; };
									}
									
									L29: do {
										F.line = 159;
										var ast_node_448831 = null;
										F.line = 3909;
										var colontmp__451464 = null;
										F.line = 233;
										colontmp__451464 = while_node_448802.body;
										F.line = 3911;
										var i_451467 = 0;
										F.line = 3912;
										var l_451469 = (colontmp__451464 != null ? colontmp__451464.length : 0);
										L30: do {
											F.line = 3913;
												L31: while (true) {
												if (!(i_451467 < l_451469)) break L31;
													F.line = 3914;
													ast_node_448831 = colontmp__451464[chckIndx(i_451467, 0, colontmp__451464.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_448831); } else { to_visit_per_ste_446935[0] = [ast_node_448831]; };
													F.line = 3915;
													i_451467 = addInt(i_451467, 1);
													if (!(((colontmp__451464 != null ? colontmp__451464.length : 0) == l_451469))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									if (!(((while_node_448802.orelse != null ? while_node_448802.orelse.length : 0) == 0))) {
									F.line = 234;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(234, 18) `len(whileNode.orelse) == 0` "));
									}
									
									break;
								case 11:
									F.line = 237;
									var if_node_449002 = ast_node_447849;
									if (!((if_node_449002.test === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(if_node_449002.test); } else { to_visit_per_ste_446935[0] = [if_node_449002.test]; };
									}
									
									L32: do {
										F.line = 159;
										var ast_node_449031 = null;
										F.line = 3909;
										var colontmp__451471 = null;
										F.line = 239;
										colontmp__451471 = if_node_449002.body;
										F.line = 3911;
										var i_451474 = 0;
										F.line = 3912;
										var l_451476 = (colontmp__451471 != null ? colontmp__451471.length : 0);
										L33: do {
											F.line = 3913;
												L34: while (true) {
												if (!(i_451474 < l_451476)) break L34;
													F.line = 3914;
													ast_node_449031 = colontmp__451471[chckIndx(i_451474, 0, colontmp__451471.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449031); } else { to_visit_per_ste_446935[0] = [ast_node_449031]; };
													F.line = 3915;
													i_451474 = addInt(i_451474, 1);
													if (!(((colontmp__451471 != null ? colontmp__451471.length : 0) == l_451476))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L35: do {
										F.line = 159;
										var ast_node_449053 = null;
										F.line = 3909;
										var colontmp__451478 = null;
										F.line = 240;
										colontmp__451478 = if_node_449002.orelse;
										F.line = 3911;
										var i_451481 = 0;
										F.line = 3912;
										var l_451483 = (colontmp__451478 != null ? colontmp__451478.length : 0);
										L36: do {
											F.line = 3913;
												L37: while (true) {
												if (!(i_451481 < l_451483)) break L37;
													F.line = 3914;
													ast_node_449053 = colontmp__451478[chckIndx(i_451481, 0, colontmp__451478.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449053); } else { to_visit_per_ste_446935[0] = [ast_node_449053]; };
													F.line = 3915;
													i_451481 = addInt(i_451481, 1);
													if (!(((colontmp__451478 != null ? colontmp__451478.length : 0) == l_451483))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 14:
									F.line = 243;
									var raise_node_449065 = ast_node_447849;
									if (!((raise_node_449065.exc === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(raise_node_449065.exc); } else { to_visit_per_ste_446935[0] = [raise_node_449065.exc]; };
									}
									
									if (!((raise_node_449065.cause === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(raise_node_449065.cause); } else { to_visit_per_ste_446935[0] = [raise_node_449065.cause]; };
									}
									
									break;
								case 16:
									F.line = 248;
									var assert_node_449101 = ast_node_447849;
									F.line = 249;
									add_used_435542(ste_443464, new_py_string_176075(makeNimstrLit("AssertionError")));
									if (!((assert_node_449101.test === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(assert_node_449101.test); } else { to_visit_per_ste_446935[0] = [assert_node_449101.test]; };
									}
									
									if (!((assert_node_449101.msg === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(assert_node_449101.msg); } else { to_visit_per_ste_446935[0] = [assert_node_449101.msg]; };
									}
									
									break;
								case 15:
									F.line = 254;
									var try_node_449137 = ast_node_447849;
									L38: do {
										F.line = 159;
										var ast_node_449149 = null;
										F.line = 3909;
										var colontmp__451485 = null;
										F.line = 255;
										colontmp__451485 = try_node_449137.body;
										F.line = 3911;
										var i_451488 = 0;
										F.line = 3912;
										var l_451490 = (colontmp__451485 != null ? colontmp__451485.length : 0);
										L39: do {
											F.line = 3913;
												L40: while (true) {
												if (!(i_451488 < l_451490)) break L40;
													F.line = 3914;
													ast_node_449149 = colontmp__451485[chckIndx(i_451488, 0, colontmp__451485.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449149); } else { to_visit_per_ste_446935[0] = [ast_node_449149]; };
													F.line = 3915;
													i_451488 = addInt(i_451488, 1);
													if (!(((colontmp__451485 != null ? colontmp__451485.length : 0) == l_451490))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L41: do {
										F.line = 159;
										var ast_node_449171 = null;
										F.line = 3909;
										var colontmp__451492 = null;
										F.line = 256;
										colontmp__451492 = try_node_449137.handlers;
										F.line = 3911;
										var i_451495 = 0;
										F.line = 3912;
										var l_451497 = (colontmp__451492 != null ? colontmp__451492.length : 0);
										L42: do {
											F.line = 3913;
												L43: while (true) {
												if (!(i_451495 < l_451497)) break L43;
													F.line = 3914;
													ast_node_449171 = colontmp__451492[chckIndx(i_451495, 0, colontmp__451492.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449171); } else { to_visit_per_ste_446935[0] = [ast_node_449171]; };
													F.line = 3915;
													i_451495 = addInt(i_451495, 1);
													if (!(((colontmp__451492 != null ? colontmp__451492.length : 0) == l_451497))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L44: do {
										F.line = 159;
										var ast_node_449193 = null;
										F.line = 3909;
										var colontmp__451499 = null;
										F.line = 257;
										colontmp__451499 = try_node_449137.orelse;
										F.line = 3911;
										var i_451502 = 0;
										F.line = 3912;
										var l_451504 = (colontmp__451499 != null ? colontmp__451499.length : 0);
										L45: do {
											F.line = 3913;
												L46: while (true) {
												if (!(i_451502 < l_451504)) break L46;
													F.line = 3914;
													ast_node_449193 = colontmp__451499[chckIndx(i_451502, 0, colontmp__451499.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449193); } else { to_visit_per_ste_446935[0] = [ast_node_449193]; };
													F.line = 3915;
													i_451502 = addInt(i_451502, 1);
													if (!(((colontmp__451499 != null ? colontmp__451499.length : 0) == l_451504))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L47: do {
										F.line = 159;
										var ast_node_449215 = null;
										F.line = 3909;
										var colontmp__451506 = null;
										F.line = 258;
										colontmp__451506 = try_node_449137.finalbody;
										F.line = 3911;
										var i_451509 = 0;
										F.line = 3912;
										var l_451511 = (colontmp__451506 != null ? colontmp__451506.length : 0);
										L48: do {
											F.line = 3913;
												L49: while (true) {
												if (!(i_451509 < l_451511)) break L49;
													F.line = 3914;
													ast_node_449215 = colontmp__451506[chckIndx(i_451509, 0, colontmp__451506.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449215); } else { to_visit_per_ste_446935[0] = [ast_node_449215]; };
													F.line = 3915;
													i_451509 = addInt(i_451509, 1);
													if (!(((colontmp__451506 != null ? colontmp__451506.length : 0) == l_451511))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 17:
									if (!(((ast_node_447849.names != null ? ast_node_447849.names.length : 0) == 1))) {
									F.line = 261;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(261, 18) `len(AstImport(astNode).names) == 1` "));
									}
									
									F.line = 262;
									add_declaration_435524(ste_443464, ast_node_447849.names[chckIndx(0, 0, ast_node_447849.names.length+0-1)-0].name);
									break;
								case 21:
									if (!((ast_node_447849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_447849.value); } else { to_visit_per_ste_446935[0] = [ast_node_447849.value]; };
									}
									
									break;
								case 22:
								case 23:
								case 24:
									break;
								default: 
									F.line = 2895;
									var e_449433 = null;
									F.line = 2896;
									e_449433 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 270;
									e_449433.message = nimCopy(null, reprEnum(ast_node_447849.kind, NTI178567), NTI138);
									F.line = 2891;
									e_449433.parent = null;
									F.line = 270;
									raiseException(e_449433, "InternalError");
									break;
								}
								}
								else {
								if (isObj(ast_node_447849.m_type, NTI178731)) {
								F.line = 272;
								switch (ast_node_447849.kind) {
								case 0:
									L50: do {
										F.line = 159;
										var ast_node_449624 = null;
										F.line = 3909;
										var colontmp__451514 = null;
										F.line = 275;
										colontmp__451514 = ast_node_447849.values;
										F.line = 3911;
										var i_451517 = 0;
										F.line = 3912;
										var l_451519 = (colontmp__451514 != null ? colontmp__451514.length : 0);
										L51: do {
											F.line = 3913;
												L52: while (true) {
												if (!(i_451517 < l_451519)) break L52;
													F.line = 3914;
													ast_node_449624 = colontmp__451514[chckIndx(i_451517, 0, colontmp__451514.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449624); } else { to_visit_per_ste_446935[0] = [ast_node_449624]; };
													F.line = 3915;
													i_451517 = addInt(i_451517, 1);
													if (!(((colontmp__451514 != null ? colontmp__451514.length : 0) == l_451519))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 1:
									F.line = 278;
									var bin_op_node_449636 = ast_node_447849;
									if (!((bin_op_node_449636.left === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(bin_op_node_449636.left); } else { to_visit_per_ste_446935[0] = [bin_op_node_449636.left]; };
									}
									
									if (!((bin_op_node_449636.right === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(bin_op_node_449636.right); } else { to_visit_per_ste_446935[0] = [bin_op_node_449636.right]; };
									}
									
									break;
								case 2:
									if (!((ast_node_447849.operand === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_447849.operand); } else { to_visit_per_ste_446935[0] = [ast_node_447849.operand]; };
									}
									
									break;
								case 5:
									F.line = 286;
									var dict_node_449690 = ast_node_447849;
									L53: do {
										F.line = 159;
										var ast_node_449702 = null;
										F.line = 3909;
										var colontmp__451521 = null;
										F.line = 287;
										colontmp__451521 = dict_node_449690.keys;
										F.line = 3911;
										var i_451524 = 0;
										F.line = 3912;
										var l_451526 = (colontmp__451521 != null ? colontmp__451521.length : 0);
										L54: do {
											F.line = 3913;
												L55: while (true) {
												if (!(i_451524 < l_451526)) break L55;
													F.line = 3914;
													ast_node_449702 = colontmp__451521[chckIndx(i_451524, 0, colontmp__451521.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449702); } else { to_visit_per_ste_446935[0] = [ast_node_449702]; };
													F.line = 3915;
													i_451524 = addInt(i_451524, 1);
													if (!(((colontmp__451521 != null ? colontmp__451521.length : 0) == l_451526))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									L56: do {
										F.line = 159;
										var ast_node_449724 = null;
										F.line = 3909;
										var colontmp__451528 = null;
										F.line = 288;
										colontmp__451528 = dict_node_449690.values;
										F.line = 3911;
										var i_451531 = 0;
										F.line = 3912;
										var l_451533 = (colontmp__451528 != null ? colontmp__451528.length : 0);
										L57: do {
											F.line = 3913;
												L58: while (true) {
												if (!(i_451531 < l_451533)) break L58;
													F.line = 3914;
													ast_node_449724 = colontmp__451528[chckIndx(i_451531, 0, colontmp__451528.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449724); } else { to_visit_per_ste_446935[0] = [ast_node_449724]; };
													F.line = 3915;
													i_451531 = addInt(i_451531, 1);
													if (!(((colontmp__451528 != null ? colontmp__451528.length : 0) == l_451533))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 6:
									F.line = 291;
									var set_node_449736 = ast_node_447849;
									L59: do {
										F.line = 159;
										var ast_node_449748 = null;
										F.line = 3909;
										var colontmp__451535 = null;
										F.line = 292;
										colontmp__451535 = set_node_449736.elts;
										F.line = 3911;
										var i_451538 = 0;
										F.line = 3912;
										var l_451540 = (colontmp__451535 != null ? colontmp__451535.length : 0);
										L60: do {
											F.line = 3913;
												L61: while (true) {
												if (!(i_451538 < l_451540)) break L61;
													F.line = 3914;
													ast_node_449748 = colontmp__451535[chckIndx(i_451538, 0, colontmp__451535.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449748); } else { to_visit_per_ste_446935[0] = [ast_node_449748]; };
													F.line = 3915;
													i_451538 = addInt(i_451538, 1);
													if (!(((colontmp__451535 != null ? colontmp__451535.length : 0) == l_451540))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 7:
									F.line = 296;
									if (to_visit_443402[0] != null) { to_visit_443402[0].push({Field0: ast_node_447849, Field1: ste_443464}); } else { to_visit_443402[0] = [{Field0: ast_node_447849, Field1: ste_443464}]; };
									F.line = 297;
									var comp_node_449771 = ast_node_447849;
									L62: do {
										F.line = 298;
										var gen_449780 = null;
										F.line = 3909;
										var colontmp__451542 = null;
										F.line = 298;
										colontmp__451542 = comp_node_449771.generators;
										F.line = 3911;
										var i_451545 = 0;
										F.line = 3912;
										var l_451547 = (colontmp__451542 != null ? colontmp__451542.length : 0);
										L63: do {
											F.line = 3913;
												L64: while (true) {
												if (!(i_451545 < l_451547)) break L64;
													F.line = 3914;
													gen_449780 = colontmp__451542[chckIndx(i_451545, 0, colontmp__451542.length+0-1)-0];
													F.line = 299;
													var gen_node_449781 = gen_449780;
													if (!((gen_node_449781.iter === null))) {
													F.line = 157;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(gen_node_449781.iter); } else { to_visit_per_ste_446935[0] = [gen_node_449781.iter]; };
													}
													
													F.line = 3915;
													i_451545 = addInt(i_451545, 1);
													if (!(((colontmp__451542 != null ? colontmp__451542.length : 0) == l_451547))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 14:
									F.line = 303;
									var compare_node_449800 = ast_node_447849;
									if (!((compare_node_449800.left === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(compare_node_449800.left); } else { to_visit_per_ste_446935[0] = [compare_node_449800.left]; };
									}
									
									L65: do {
										F.line = 159;
										var ast_node_449829 = null;
										F.line = 3909;
										var colontmp__451549 = null;
										F.line = 305;
										colontmp__451549 = compare_node_449800.comparators;
										F.line = 3911;
										var i_451552 = 0;
										F.line = 3912;
										var l_451554 = (colontmp__451549 != null ? colontmp__451549.length : 0);
										L66: do {
											F.line = 3913;
												L67: while (true) {
												if (!(i_451552 < l_451554)) break L67;
													F.line = 3914;
													ast_node_449829 = colontmp__451549[chckIndx(i_451552, 0, colontmp__451549.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449829); } else { to_visit_per_ste_446935[0] = [ast_node_449829]; };
													F.line = 3915;
													i_451552 = addInt(i_451552, 1);
													if (!(((colontmp__451549 != null ? colontmp__451549.length : 0) == l_451554))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									break;
								case 15:
									F.line = 308;
									var call_node_449841 = ast_node_447849;
									if (!((call_node_449841.fun === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(call_node_449841.fun); } else { to_visit_per_ste_446935[0] = [call_node_449841.fun]; };
									}
									
									L68: do {
										F.line = 159;
										var ast_node_449870 = null;
										F.line = 3909;
										var colontmp__451556 = null;
										F.line = 310;
										colontmp__451556 = call_node_449841.args;
										F.line = 3911;
										var i_451559 = 0;
										F.line = 3912;
										var l_451561 = (colontmp__451556 != null ? colontmp__451556.length : 0);
										L69: do {
											F.line = 3913;
												L70: while (true) {
												if (!(i_451559 < l_451561)) break L70;
													F.line = 3914;
													ast_node_449870 = colontmp__451556[chckIndx(i_451559, 0, colontmp__451556.length+0-1)-0];
													F.line = 160;
													if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_449870); } else { to_visit_per_ste_446935[0] = [ast_node_449870]; };
													F.line = 3915;
													i_451559 = addInt(i_451559, 1);
													if (!(((colontmp__451556 != null ? colontmp__451556.length : 0) == l_451561))) {
													F.line = 3916;
													failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
													}
													
												}
										} while(false);
									} while(false);
									if (!(((call_node_449841.keywords != null ? call_node_449841.keywords.length : 0) == 0))) {
									F.line = 311;
									failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(311, 18) `len(callNode.keywords) == 0` "));
									}
									
									break;
								case 19:
									if (!((ast_node_447849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_447849.value); } else { to_visit_per_ste_446935[0] = [ast_node_447849.value]; };
									}
									
									break;
								case 20:
									F.line = 317;
									var subs_node_450020 = ast_node_447849;
									if (!((subs_node_450020.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(subs_node_450020.value); } else { to_visit_per_ste_446935[0] = [subs_node_450020.value]; };
									}
									
									if (!((subs_node_450020.slice === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(subs_node_450020.slice); } else { to_visit_per_ste_446935[0] = [subs_node_450020.slice]; };
									}
									
									break;
								case 22:
									F.line = 322;
									var name_node_450056 = ast_node_447849;
									F.line = 323;
									switch (name_node_450056.ctx.kind) {
									case 1:
										F.line = 325;
										add_declaration_435524(ste_443464, name_node_450056.id);
										break;
									case 0:
										F.line = 327;
										add_used_435648(ste_443464, name_node_450056.id);
										break;
									default: 
										F.line = 2895;
										var e_450064 = null;
										F.line = 2896;
										e_450064 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 25;
										e_450064.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_450064.parent = null;
										F.line = 329;
										raiseException(e_450064, "InternalError");
										break;
									}
									break;
								case 23:
									F.line = 332;
									var list_node_450202 = ast_node_447849;
									F.line = 333;
									switch (list_node_450202.ctx.kind) {
									case 1:
									case 0:
										L71: do {
											F.line = 159;
											var ast_node_450216 = null;
											F.line = 3909;
											var colontmp__451563 = null;
											F.line = 335;
											colontmp__451563 = list_node_450202.elts;
											F.line = 3911;
											var i_451566 = 0;
											F.line = 3912;
											var l_451568 = (colontmp__451563 != null ? colontmp__451563.length : 0);
											L72: do {
												F.line = 3913;
													L73: while (true) {
													if (!(i_451566 < l_451568)) break L73;
														F.line = 3914;
														ast_node_450216 = colontmp__451563[chckIndx(i_451566, 0, colontmp__451563.length+0-1)-0];
														F.line = 160;
														if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_450216); } else { to_visit_per_ste_446935[0] = [ast_node_450216]; };
														F.line = 3915;
														i_451566 = addInt(i_451566, 1);
														if (!(((colontmp__451563 != null ? colontmp__451563.length : 0) == l_451568))) {
														F.line = 3916;
														failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
														}
														
													}
											} while(false);
										} while(false);
										break;
									default: 
										F.line = 2895;
										var e_450232 = null;
										F.line = 2896;
										e_450232 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 25;
										e_450232.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_450232.parent = null;
										F.line = 337;
										raiseException(e_450232, "InternalError");
										break;
									}
									break;
								case 24:
									F.line = 340;
									var tuple_node_450402 = ast_node_447849;
									F.line = 341;
									switch (tuple_node_450402.ctx.kind) {
									case 1:
									case 0:
										L74: do {
											F.line = 159;
											var ast_node_450416 = null;
											F.line = 3909;
											var colontmp__451570 = null;
											F.line = 343;
											colontmp__451570 = tuple_node_450402.elts;
											F.line = 3911;
											var i_451573 = 0;
											F.line = 3912;
											var l_451575 = (colontmp__451570 != null ? colontmp__451570.length : 0);
											L75: do {
												F.line = 3913;
													L76: while (true) {
													if (!(i_451573 < l_451575)) break L76;
														F.line = 3914;
														ast_node_450416 = colontmp__451570[chckIndx(i_451573, 0, colontmp__451570.length+0-1)-0];
														F.line = 160;
														if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_450416); } else { to_visit_per_ste_446935[0] = [ast_node_450416]; };
														F.line = 3915;
														i_451573 = addInt(i_451573, 1);
														if (!(((colontmp__451570 != null ? colontmp__451570.length : 0) == l_451575))) {
														F.line = 3916;
														failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
														}
														
													}
											} while(false);
										} while(false);
										break;
									default: 
										F.line = 2895;
										var e_450432 = null;
										F.line = 2896;
										e_450432 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
										F.line = 25;
										e_450432.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
										F.line = 2891;
										e_450432.parent = null;
										F.line = 345;
										raiseException(e_450432, "InternalError");
										break;
									}
									break;
								case 18:
									break;
								default: 
									F.line = 2895;
									var e_450607 = null;
									F.line = 2896;
									e_450607 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 25;
									e_450607.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
									F.line = 2891;
									e_450607.parent = null;
									F.line = 351;
									raiseException(e_450607, "InternalError");
									break;
								}
								}
								else {
								if (isObj(ast_node_447849.m_type, NTI178739)) {
								F.line = 354;
								switch (ast_node_447849.kind) {
								case 0:
									F.line = 357;
									var slice_node_450813 = ast_node_447849;
									if (!((slice_node_450813.lower === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(slice_node_450813.lower); } else { to_visit_per_ste_446935[0] = [slice_node_450813.lower]; };
									}
									
									if (!((slice_node_450813.upper === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(slice_node_450813.upper); } else { to_visit_per_ste_446935[0] = [slice_node_450813.upper]; };
									}
									
									if (!((slice_node_450813.step === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(slice_node_450813.step); } else { to_visit_per_ste_446935[0] = [slice_node_450813.step]; };
									}
									
									break;
								case 1:
									F.line = 2895;
									var e_450871 = null;
									F.line = 2896;
									e_450871 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 25;
									e_450871.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
									F.line = 2891;
									e_450871.parent = null;
									F.line = 363;
									raiseException(e_450871, "InternalError");
									break;
								case 2:
									if (!((ast_node_447849.value === null))) {
									F.line = 157;
									if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_447849.value); } else { to_visit_per_ste_446935[0] = [ast_node_447849.value]; };
									}
									
									break;
								}
								}
								else {
								if (isObj(ast_node_447849.m_type, NTI178757)) {
								F.line = 369;
								var excp_node_451030 = ast_node_447849;
								if (!((excp_node_451030.name === null))) {
								F.line = 370;
								failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/symtable.nim(370, 16) `isNil(excpNode.name)` "));
								}
								
								L77: do {
									F.line = 159;
									var ast_node_451212 = null;
									F.line = 3909;
									var colontmp__451579 = null;
									F.line = 371;
									colontmp__451579 = excp_node_451030.body;
									F.line = 3911;
									var i_451582 = 0;
									F.line = 3912;
									var l_451584 = (colontmp__451579 != null ? colontmp__451579.length : 0);
									L78: do {
										F.line = 3913;
											L79: while (true) {
											if (!(i_451582 < l_451584)) break L79;
												F.line = 3914;
												ast_node_451212 = colontmp__451579[chckIndx(i_451582, 0, colontmp__451579.length+0-1)-0];
												F.line = 160;
												if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(ast_node_451212); } else { to_visit_per_ste_446935[0] = [ast_node_451212]; };
												F.line = 3915;
												i_451582 = addInt(i_451582, 1);
												if (!(((colontmp__451579 != null ? colontmp__451579.length : 0) == l_451584))) {
												F.line = 3916;
												failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
												}
												
											}
									} while(false);
								} while(false);
								if (!((excp_node_451030.type === null))) {
								F.line = 157;
								if (to_visit_per_ste_446935[0] != null) { to_visit_per_ste_446935[0].push(excp_node_451030.type); } else { to_visit_per_ste_446935[0] = [excp_node_451030.type]; };
								}
								
								}
								else {
									F.line = 2895;
									var e_451245 = null;
									F.line = 2896;
									e_451245 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
									F.line = 25;
									e_451245.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
									F.line = 2891;
									e_451245.parent = null;
									F.line = 374;
									raiseException(e_451245, "InternalError");
								}
								}}}
							}
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_428315(t_428322, key_428324) {
	var result_428326 = [null, 0];
	var result_428326_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_428328 = [0];
		F.line = 161;
		var index_429091 = raw_get_428330(t_428322, key_428324, hc_428328, 0);
		if ((0 <= index_429091)) {
		F.line = 162;
		result_428326 = t_428322.data[chckIndx(index_429091, 0, t_428322.data.length+0-1)-0]; result_428326_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_429406 = null;
			F.line = 2896;
			e_429406 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_429406.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_177554(key_428324)), NTI138);
			F.line = 2891;
			e_429406.parent = null;
			F.line = 165;
			raiseException(e_429406, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_428326, result_428326_Idx];

}

function get_ste_428078(st_428080, key_428081) {
		var Tmp1;

	var result_428082 = null;

	var F={procname:"symtable.getSte",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 71;
		result_428082 = (Tmp1 = HEX5BHEX5D_428315(st_428080.entries, key_428081), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_428082;

}

function raw_get_431055(t_431060, key_431062, hc_431064, hc_431064_Idx) {
						var Tmp3;

	var result_431065 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_431064[hc_431064_Idx] = hash_398040(key_431062);
		if ((hc_431064[hc_431064_Idx] == 0)) {
		F.line = 45;
		hc_431064[hc_431064_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_431075 = (hc_431064[hc_431064_Idx] & (t_431060.data != null ? (t_431060.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_431060.data[chckIndx(h_431075, 0, t_431060.data.length+0-1)-0].Field0)) break L2;
						if (!(t_431060.data[chckIndx(h_431075, 0, t_431060.data.length+0-1)-0].Field0 == hc_431064[hc_431064_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_398059(t_431060.data[chckIndx(h_431075, 0, t_431060.data.length+0-1)-0].Field1, key_431062);						}					if (Tmp3) {
					F.line = 38;
					result_431065 = h_431075;
					break BeforeRet;
					}
					
					F.line = 39;
					h_431075 = next_try_146614(h_431075, (t_431060.data != null ? (t_431060.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_431065 = subInt(-1, h_431075);
	} while (false);
	framePtr = F.prev;

	return result_431065;

}

function has_key_451748(t_451754, key_451756) {
	var result_451757 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_451758 = [0];
		F.line = 264;
		result_451757 = (0 <= raw_get_431055(t_451754, key_451756, hc_451758, 0));
	framePtr = F.prev;

	return result_451757;

}

function is_root_ste_429442(ste_429444) {
	var result_429445 = false;

	var F={procname:"symtable.isRootSte",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 74;
		result_429445 = (ste_429444.parent === null);
	framePtr = F.prev;

	return result_429445;

}

function raw_insert_453675(t_453682, data_453686, data_453686_Idx, key_453688, val_453690, hc_453692, h_453694) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_453686[data_453686_Idx][chckIndx(h_453694, 0, data_453686[data_453686_Idx].length+0-1)-0].Field1 = key_453688;
		F.line = 65;
		data_453686[data_453686_Idx][chckIndx(h_453694, 0, data_453686[data_453686_Idx].length+0-1)-0].Field2 = val_453690;
		F.line = 66;
		data_453686[data_453686_Idx][chckIndx(h_453694, 0, data_453686[data_453686_Idx].length+0-1)-0].Field0 = hc_453692;
	framePtr = F.prev;

	
}

function enlarge_452431(t_452438) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 313;
		var n_452446 = null;
		F.line = 314;
		n_452446 = new Array(chckRange(mulInt((t_452438.data != null ? t_452438.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_452438.data != null ? t_452438.data.length : 0), 2), 0, 2147483647);++i) {n_452446[i]={Field0: 0, Field1: null, Field2: 0};}		F.line = 315;
		var Tmp1 = t_452438.data; t_452438.data = n_452446; n_452446 = Tmp1;		L2: do {
			F.line = 316;
			var i_452701 = 0;
			F.line = 2088;
			var colontmp__454416 = 0;
			F.line = 316;
			colontmp__454416 = (n_452446 != null ? (n_452446.length-1) : -1);
			F.line = 2094;
			var res_454419 = 0;
			L3: do {
				F.line = 2095;
					L4: while (true) {
					if (!(res_454419 <= colontmp__454416)) break L4;
						F.line = 2096;
						i_452701 = res_454419;
						F.line = 317;
						var eh_452937 = n_452446[chckIndx(i_452701, 0, n_452446.length+0-1)-0].Field0;
						if (is_filled_146491(eh_452937)) {
						F.line = 319;
						var j_452946 = (eh_452937 & (t_452438.data != null ? (t_452438.data.length-1) : -1));
						L5: do {
							F.line = 320;
								L6: while (true) {
								if (!is_filled_146491(t_452438.data[chckIndx(j_452946, 0, t_452438.data.length+0-1)-0].Field0)) break L6;
									F.line = 321;
									j_452946 = next_try_146614(j_452946, (t_452438.data != null ? (t_452438.data.length-1) : -1));
								}
						} while(false);
						F.line = 322;
						raw_insert_453675(t_452438, t_452438, "data", n_452446[chckIndx(i_452701, 0, n_452446.length+0-1)-0].Field1, n_452446[chckIndx(i_452701, 0, n_452446.length+0-1)-0].Field2, eh_452937, j_452946);
						}
						
						F.line = 2097;
						res_454419 = addInt(res_454419, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_454437(t_454442, key_454444, hc_454446) {
	var result_454447 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_454456 = (hc_454446 & (t_454442.data != null ? (t_454442.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_146491(t_454442.data[chckIndx(h_454456, 0, t_454442.data.length+0-1)-0].Field0)) break L2;
					if (((t_454442.data[chckIndx(h_454456, 0, t_454442.data.length+0-1)-0].Field0 == hc_454446) && HEX3DHEX3D_398059(t_454442.data[chckIndx(h_454456, 0, t_454442.data.length+0-1)-0].Field1, key_454444))) {
					F.line = 38;
					result_454447 = h_454456;
					break BeforeRet;
					}
					
					F.line = 39;
					h_454456 = next_try_146614(h_454456, (t_454442.data != null ? (t_454442.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_454447 = subInt(-1, h_454456);
	} while (false);
	framePtr = F.prev;

	return result_454447;

}

function HEX5BHEX5DHEX3D_451932(t_451939, key_451941, val_451943) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_451944 = [0];
		F.line = 98;
		var index_451957 = raw_get_431055(t_451939, key_451941, hc_451944, 0);
		if ((0 <= index_451957)) {
		F.line = 99;
		t_451939.data[chckIndx(index_451957, 0, t_451939.data.length+0-1)-0].Field2 = val_451943;
		}
		else {
			if (must_rehash_146509((t_451939.data != null ? t_451939.data.length : 0), t_451939.counter)) {
			F.line = 90;
			enlarge_452431(t_451939);
			F.line = 91;
			index_451957 = raw_get_known_hc_454437(t_451939, key_451941, hc_451944[0]);
			}
			
			F.line = 92;
			index_451957 = subInt(-1, index_451957);
			F.line = 93;
			raw_insert_453675(t_451939, t_451939, "data", key_451941, val_451943, hc_451944[0], index_451957);
			F.line = 100;
			t_451939.counter = addInt(t_451939.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function contains_429668(s_429673, key_429675) {
	var result_429676 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_429696(s_429673))) {
		F.line = 215;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(215, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 216;
		var hc_430001 = [0];
		F.line = 217;
		var index_430775 = raw_get_430021(s_429673, key_429675, hc_430001, 0);
		F.line = 218;
		result_429676 = (0 <= index_430775);
	framePtr = F.prev;

	return result_429676;

}

function declared_429466(ste_429468, local_name_429469) {
	var result_429470 = false;

	var F={procname:"symtable.declared",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_429470 = contains_429668(ste_429468.declaredVars, local_name_429469);
	framePtr = F.prev;

	return result_429470;

}

function HEX5BHEX5D_455424(s_455430, i_455432) {
	var result_455434 = [null, 0];
	var result_455434_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_455434 = s_455430; result_455434_Idx = chckIndx(subInt((s_455430 != null ? s_455430.length : 0), i_455432), 0, s_455430.length+0-1)-0;
	framePtr = F.prev;

	return [result_455434, result_455434_Idx];

}

function HEX5BHEX5D_455827(s_455834, x_455837) {
	var result_455839 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3706;
		var a_456001 = x_455837.a;
		F.line = 3707;
		var l_456207 = addInt(subInt(subInt((s_455834 != null ? s_455834.length : 0), x_455837.b), a_456001), 1);
		F.line = 3708;
		result_455839 = new Array(chckRange(l_456207, 0, 2147483647)); for (var i=0;i<chckRange(l_456207, 0, 2147483647);++i) {result_455839[i]=null;}		L1: do {
			F.line = 3709;
			var i_456227 = 0;
			F.line = 3617;
			var i_456235 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_456235 < l_456207)) break L3;
						F.line = 3619;
						i_456227 = i_456235;
						F.line = 3709;
						result_455839[chckIndx(i_456227, 0, result_455839.length+0-1)-0] = s_455834[chckIndx(addInt(i_456227, a_456001), 0, s_455834.length+0-1)-0];
						F.line = 3620;
						i_456235 = addInt(i_456235, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_455839;

}

function determine_scope_451598(ste_451600, name_451601) {
					var Tmp3;
		var Tmp4;

	var F={procname:"symtable.determineScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (has_key_451748(ste_451600.scopes, name_451601)) {
		F.line = 378;
		break BeforeRet;
		}
		
		if (is_root_ste_429442(ste_451600)) {
		F.line = 380;
		HEX5BHEX5DHEX3D_451932(ste_451600.scopes, name_451601, 3);
		F.line = 381;
		break BeforeRet;
		}
		
		if (declared_429466(ste_451600, name_451601)) {
		F.line = 383;
		HEX5BHEX5DHEX3D_451932(ste_451600.scopes, name_451601, 0);
		F.line = 384;
		break BeforeRet;
		}
		
		F.line = 385;
		var traceback_455417 = [ste_451600, ste_451600.parent];
		F.line = 386;
		var scope_455418 = 0;
		L1: do {
			F.line = 387;
				L2: while (true) {
				if (!true) break L2;
					F.line = 388;
					var cur_ste_455456 = (Tmp3 = HEX5BHEX5D_455424(traceback_455417, 1), Tmp3[0])[Tmp3[1]];
					if (is_root_ste_429442(cur_ste_455456)) {
					F.line = 390;
					scope_455418 = 3;
					F.line = 391;
					break L1;
					}
					
					if (declared_429466(cur_ste_455456, name_451601)) {
					F.line = 393;
					scope_455418 = 1;
					F.line = 394;
					break L1;
					}
					
					F.line = 395;
					if (traceback_455417 != null) { traceback_455417.push(cur_ste_455456.parent); } else { traceback_455417 = [cur_ste_455456.parent]; };
				}
		} while(false);
		F.line = 396;
		HEX5BHEX5DHEX3D_451932((Tmp4 = HEX5BHEX5D_455424(traceback_455417, 1), Tmp4[0])[Tmp4[1]].scopes, name_451601, scope_455418);
		F.line = 397;
		switch (scope_455418) {
		case 1:
			F.line = 399;
			scope_455418 = 2;
			break;
		case 3:
			break;
		default: 
			F.line = 2895;
			var e_455651 = null;
			F.line = 2896;
			e_455651 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_455651.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_455651.parent = null;
			F.line = 403;
			raiseException(e_455651, "InternalError");
			break;
		}
		L5: do {
			F.line = 404;
			var cur_ste_456415 = null;
			F.line = 3909;
			var colontmp__456580 = null;
			F.line = 404;
			colontmp__456580 = HEX5BHEX5D_455827(traceback_455417, HEX2EHEX2E_81053(0, 2));
			F.line = 3911;
			var i_456583 = 0;
			F.line = 3912;
			var l_456585 = (colontmp__456580 != null ? colontmp__456580.length : 0);
			L6: do {
				F.line = 3913;
					L7: while (true) {
					if (!(i_456583 < l_456585)) break L7;
						F.line = 3914;
						cur_ste_456415 = colontmp__456580[chckIndx(i_456583, 0, colontmp__456580.length+0-1)-0];
						F.line = 405;
						HEX5BHEX5DHEX3D_451932(cur_ste_456415.scopes, name_451601, scope_455418);
						F.line = 3915;
						i_456583 = addInt(i_456583, 1);
						if (!(((colontmp__456580 != null ? colontmp__456580.length : 0) == l_456585))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function len_437683(t_437689) {
	var result_437690 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 154;
		result_437690 = t_437689.counter;
	framePtr = F.prev;

	return result_437690;

}

function determine_scope_456599(ste_456601) {
	var F={procname:"symtable.determineScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 409;
			var child_456610 = null;
			F.line = 3909;
			var colontmp__458472 = null;
			F.line = 409;
			colontmp__458472 = ste_456601.children;
			F.line = 3911;
			var i_458475 = 0;
			F.line = 3912;
			var l_458477 = (colontmp__458472 != null ? colontmp__458472.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_458475 < l_458477)) break L3;
						F.line = 3914;
						child_456610 = colontmp__458472[chckIndx(i_458475, 0, colontmp__458472.length+0-1)-0];
						F.line = 410;
						determine_scope_456599(child_456610);
						F.line = 3915;
						i_458475 = addInt(i_458475, 1);
						if (!(((colontmp__458472 != null ? colontmp__458472.length : 0) == l_458477))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 411;
			var name_457312 = null;
			F.line = 100;
			var colontmp__458479 = {data: null, counter: 0};
			F.line = 411;
			nimCopy(colontmp__458479, ste_456601.usedVars, NTI427211);
			if (!(is_valid_429696(colontmp__458479))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L5: do {
				F.line = 120;
				var h_458483 = 0;
				F.line = 2104;
				var colontmp__458485 = 0;
				F.line = 120;
				colontmp__458485 = (colontmp__458479.data != null ? (colontmp__458479.data.length-1) : -1);
				F.line = 2107;
				var res_458487 = 0;
				L6: do {
					F.line = 2108;
						L7: while (true) {
						if (!(res_458487 <= colontmp__458485)) break L7;
							F.line = 2109;
							h_458483 = res_458487;
							if (is_filled_154282(colontmp__458479.data[chckIndx(h_458483, 0, colontmp__458479.data.length+0-1)-0].Field0)) {
							F.line = 121;
							name_457312 = colontmp__458479.data[chckIndx(h_458483, 0, colontmp__458479.data.length+0-1)-0].Field1;
							F.line = 412;
							determine_scope_451598(ste_456601, name_457312);
							}
							
							F.line = 2110;
							res_458487 = addInt(res_458487, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		L8: do {
			F.line = 414;
			var name_457320 = null;
			F.line = 100;
			var colontmp__458491 = {data: null, counter: 0};
			F.line = 414;
			nimCopy(colontmp__458491, ste_456601.declaredVars, NTI427211);
			if (!(is_valid_429696(colontmp__458491))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/collections/sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L9: do {
				F.line = 120;
				var h_458495 = 0;
				F.line = 2104;
				var colontmp__458497 = 0;
				F.line = 120;
				colontmp__458497 = (colontmp__458491.data != null ? (colontmp__458491.data.length-1) : -1);
				F.line = 2107;
				var res_458499 = 0;
				L10: do {
					F.line = 2108;
						L11: while (true) {
						if (!(res_458499 <= colontmp__458497)) break L11;
							F.line = 2109;
							h_458495 = res_458499;
							if (is_filled_154282(colontmp__458491.data[chckIndx(h_458495, 0, colontmp__458491.data.length+0-1)-0].Field0)) {
							F.line = 121;
							name_457320 = colontmp__458491.data[chckIndx(h_458495, 0, colontmp__458491.data.length+0-1)-0].Field1;
							F.line = 415;
							determine_scope_451598(ste_456601, name_457320);
							}
							
							F.line = 2110;
							res_458499 = addInt(res_458499, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		L12: do {
			F.line = 417;
			var name_458077 = null;
			F.line = 417;
			var scope_458078 = 0;
			F.line = 270;
			var colontmp__458503 = {data: null, counter: 0};
			F.line = 417;
			nimCopy(colontmp__458503, ste_456601.scopes, NTI427242);
			L13: do {
				F.line = 272;
				var h_458507 = 0;
				F.line = 2104;
				var colontmp__458509 = 0;
				F.line = 272;
				colontmp__458509 = (colontmp__458503.data != null ? (colontmp__458503.data.length-1) : -1);
				F.line = 2107;
				var res_458511 = 0;
				L14: do {
					F.line = 2108;
						L15: while (true) {
						if (!(res_458511 <= colontmp__458509)) break L15;
							F.line = 2109;
							h_458507 = res_458511;
							if (is_filled_146491(colontmp__458503.data[chckIndx(h_458507, 0, colontmp__458503.data.length+0-1)-0].Field0)) {
							F.line = 273;
							name_458077 = colontmp__458503.data[chckIndx(h_458507, 0, colontmp__458503.data.length+0-1)-0].Field1;
							F.line = 273;
							scope_458078 = colontmp__458503.data[chckIndx(h_458507, 0, colontmp__458503.data.length+0-1)-0].Field2;
							F.line = 418;
							var d_458087 = null;
							F.line = 419;
							switch (scope_458078) {
							case 0:
								F.line = 421;
								d_458087 = ste_456601.localVars;
								break;
							case 3:
								F.line = 423;
								d_458087 = ste_456601.names;
								break;
							case 1:
								F.line = 425;
								d_458087 = ste_456601.cellVars;
								break;
							case 2:
								F.line = 427;
								d_458087 = ste_456601.freeVars;
								break;
							}
							F.line = 428;
							HEX5BHEX5DHEX3D_437850(d_458087, name_458077, len_437683(d_458087));
							}
							
							F.line = 2110;
							res_458511 = addInt(res_458511, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function determine_scope_458527(st_458529) {
	var F={procname:"symtable.determineScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 431;
		determine_scope_456599(st_458529.root);
	framePtr = F.prev;

	
}

function new_sym_table_458543(ast_root_458545) {
	var result_458546 = null;

	var F={procname:"symtable.newSymTable",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 434;
		result_458546 = {entries: {data: null, counter: 0}, root: null};
		F.line = 435;
		nimCopy(result_458546.entries, init_table_458558(64), NTI427152);
		F.line = 438;
		collect_declaration_443396(result_458546, ast_root_458545);
		F.line = 439;
		result_458546.root = get_ste_428078(result_458546, ast_root_458545);
		F.line = 441;
		determine_scope_458527(result_458546);
	framePtr = F.prev;

	return result_458546;

}

function new_494445() {
	var result_494450 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_494601 = null;
		F.line = 211;
		r_494601 = {ste: null, blocks: null, constants: null, codeName: null};
		F.line = 212;
		result_494450 = r_494601;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_494450;

}

function new_494245() {
	var result_494250 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_494401 = null;
		F.line = 211;
		r_494401 = {instrSeq: null, tp: 0, next: null, seenReturn: false, offset: 0};
		F.line = 212;
		result_494250 = r_494401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_494250;

}

function new_basic_block_494238(tp_494241) {
	var result_494242 = null;

	var F={procname:"compile.newBasicBlock",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 82;
		result_494242 = new_494245();
		F.line = 83;
		result_494242.seenReturn = false;
		F.line = 84;
		result_494242.tp = tp_494241;
	framePtr = F.prev;

	return result_494242;

}

function new_compiler_unit_494437(st_494439, node_494440, code_name_494441) {
	var result_494442 = null;

	var F={procname:"compile.newCompilerUnit",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 89;
		result_494442 = new_494445();
		F.line = 90;
		result_494442.ste = get_ste_428078(st_494439, node_494440);
		F.line = 91;
		if (result_494442.blocks != null) { result_494442.blocks.push(new_basic_block_494238(0)); } else { result_494442.blocks = [new_basic_block_494238(0)]; };
		F.line = 92;
		result_494442.codeName = code_name_494441;
	framePtr = F.prev;

	return result_494442;

}

function new_compiler_494647(root_494649, file_name_494650) {
	var result_494651 = null;

	var F={procname:"compile.newCompiler",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 96;
		result_494651 = new_494654();
		F.line = 97;
		result_494651.st = new_sym_table_458543(root_494649);
		F.line = 98;
		if (result_494651.units != null) { result_494651.units.push(new_compiler_unit_494437(result_494651.st, root_494649, new_py_str_176092(makeNimstrLit("<module>")))); } else { result_494651.units = [new_compiler_unit_494437(result_494651.st, root_494649, new_py_str_176092(makeNimstrLit("<module>")))]; };
		F.line = 99;
		result_494651.fileName = file_name_494650;
	framePtr = F.prev;

	return result_494651;

}

function len_495130(cb_495132) {
	var result_495133 = 0;

	var F={procname:"compile.len",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 137;
		result_495133 = (cb_495132.instrSeq != null ? cb_495132.instrSeq.length : 0);
	framePtr = F.prev;

	return result_495133;

}

function HEX5BHEX5D_495067(s_495073, i_495075) {
	var result_495077 = [null, 0];
	var result_495077_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_495077 = s_495073; result_495077_Idx = chckIndx(subInt((s_495073 != null ? s_495073.length : 0), i_495075), 0, s_495073.length+0-1)-0;
	framePtr = F.prev;

	return [result_495077, result_495077_Idx];

}

function tcb_495058(cu_495060) {
		var Tmp1;

	var result_495061 = null;

	var F={procname:"compile.tcb",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 131;
		result_495061 = (Tmp1 = HEX5BHEX5D_495067(cu_495060.blocks, 1), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_495061;

}

function find_494898(a_494903, item_494905) {
	var result_494906 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_494915 = null;
			F.line = 3911;
			var i_494939 = 0;
			F.line = 3912;
			var l_494941 = (a_494903 != null ? a_494903.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_494939 < l_494941)) break L3;
						F.line = 3914;
						i_494915 = a_494903[chckIndx(i_494939, 0, a_494903.length+0-1)-0];
						if ((i_494915 == item_494905)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_494906 = addInt(result_494906, 1);
						F.line = 3915;
						i_494939 = addInt(i_494939, 1);
						if (!(((a_494903 != null ? a_494903.length : 0) == l_494941))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_494906 = -1;
	} while (false);
	framePtr = F.prev;

	return result_494906;

}

function constant_id_494892(cu_494894, py_object_494895) {
	var result_494896 = 0;

	var F={procname:"compile.constantId",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 112;
		result_494896 = find_494898(cu_494894.constants, py_object_494895);
		if (!((result_494896 == -1))) {
		F.line = 114;
		break BeforeRet;
		}
		
		F.line = 115;
		result_494896 = (cu_494894.constants != null ? cu_494894.constants.length : 0);
		F.line = 116;
		if (cu_494894.constants != null) { cu_494894.constants.push(py_object_494895); } else { cu_494894.constants = [py_object_494895]; };
	} while (false);
	framePtr = F.prev;

	return result_494896;

}

function new_493603() {
	var result_493608 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_493801 = null;
		F.line = 211;
		r_493801 = {m_type: NTI493045, opArg: 0, opCode: 0, lineNo: 0};
		F.line = 212;
		result_493608 = r_493801;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_493608;

}

function new_arg_instr_493437(op_code_493439, op_arg_493440, line_no_493441) {
	var result_493442 = null;

	var F={procname:"compile.newArgInstr",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!((ConstSet23[op_code_493439] != undefined))) {
		F.line = 67;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(67, 10) `contains({OpCode.STORE_NAME, OpCode.DELETE_NAME, OpCode.UNPACK_SEQUENCE,\x0A          OpCode.FOR_ITER, OpCode.UNPACK_EX, OpCode.STORE_ATTR, OpCode.DELETE_ATTR,\x0A          OpCode.STORE_GLOBAL, OpCode.DELETE_GLOBAL, OpCode.LOAD_CONST,\x0A          OpCode.LOAD_NAME, OpCode.BUILD_TUPLE, OpCode.BUILD_LIST,\x0A          OpCode.BUILD_SET, OpCode.BUILD_MAP, OpCode.LOAD_ATTR, OpCode.COMPARE_OP,\x0A          OpCode.IMPORT_NAME, OpCode.IMPORT_FROM, OpCode.JUMP_FORWARD,\x0A          OpCode.JUMP_IF_FALSE_OR_POP, OpCode.JUMP_IF_TRUE_OR_POP,\x0A          OpCode.JUMP_ABSOLUTE, OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE,\x0A          OpCode.LOAD_GLOBAL, OpCode.SETUP_FINALLY, OpCode.LOAD_FAST,\x0A          OpCode.STORE_FAST, OpCode.DELETE_FAST, OpCode.RAISE_VARARGS,\x0A          OpCode.CALL_FUNCTION, OpCode.MAKE_FUNCTION, OpCode.BUILD_SLICE,\x0A          OpCode.LOAD_CLOSURE, OpCode.LOAD_DEREF, OpCode.STORE_DEREF,\x0A          OpCode.DELETE_DEREF, OpCode.CALL_FUNCTION_KW, OpCode.CALL_FUNCTION_EX,\x0A          OpCode.SETUP_WITH, OpCode.EXTENDED_ARG, OpCode.LIST_APPEND,\x0A          OpCode.SET_ADD, OpCode.MAP_ADD, OpCode.LOAD_CLASSDEREF,\x0A          OpCode.BUILD_LIST_UNPACK, OpCode.BUILD_MAP_UNPACK,\x0A          OpCode.BUILD_MAP_UNPACK_WITH_CALL, OpCode.BUILD_TUPLE_UNPACK,\x0A          OpCode.BUILD_SET_UNPACK, OpCode.SETUP_ASYNC_WITH, OpCode.FORMAT_VALUE,\x0A          OpCode.BUILD_CONST_KEY_MAP, OpCode.BUILD_STRING,\x0A          OpCode.BUILD_TUPLE_UNPACK_WITH_CALL, OpCode.LOAD_METHOD,\x0A          OpCode.CALL_METHOD, OpCode.CALL_FINALLY, OpCode.POP_FINALLY,\x0A          OpCode.EXCEPT_HANDLER}, opCode)` "));
		}
		
		F.line = 68;
		result_493442 = new_493603();
		F.line = 69;
		result_493442.opCode = op_code_493439;
		F.line = 70;
		result_493442.opArg = op_arg_493440;
		F.line = 71;
		result_493442.lineNo = line_no_493441;
	framePtr = F.prev;

	return result_493442;

}

function add_op_495445(cu_495447, instr_495448) {
		var Tmp1;

	var F={procname:"compile.addOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 156;
		if ((Tmp1 = HEX5BHEX5D_495067(cu_495447.blocks, 1), Tmp1[0])[Tmp1[1]].instrSeq != null) { (Tmp1 = HEX5BHEX5D_495067(cu_495447.blocks, 1), Tmp1[0])[Tmp1[1]].instrSeq.push(instr_495448); } else { (Tmp1 = HEX5BHEX5D_495067(cu_495447.blocks, 1), Tmp1[0])[Tmp1[1]].instrSeq = [instr_495448]; };
	framePtr = F.prev;

	
}

function add_load_const_495641(cu_495643, py_object_495644, line_no_495645) {
	var F={procname:"compile.addLoadConst",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 172;
		var arg_495646 = constant_id_494892(cu_495643, py_object_495644);
		F.line = 173;
		var instr_495648 = new_arg_instr_493437(71, arg_495646, line_no_495645);
		F.line = 174;
		add_op_495445(cu_495643, instr_495648);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_495212(s_495218, i_495220) {
	var result_495222 = [null, 0];
	var result_495222_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_495222 = s_495218; result_495222_Idx = chckIndx(subInt((s_495218 != null ? s_495218.length : 0), i_495220), 0, s_495218.length+0-1)-0;
	framePtr = F.prev;

	return [result_495222, result_495222_Idx];

}

function last_line_no_495154(cu_495156) {
							var Tmp5;
								var Tmp6;
								var Tmp7;

	var result_495157 = 0;

	var F={procname:"compile.lastLineNo",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 141;
			var i_495176 = 0;
			F.line = 2104;
			var colontmp__495249 = 0;
			F.line = 141;
			colontmp__495249 = (cu_495156.blocks != null ? cu_495156.blocks.length : 0);
			F.line = 2107;
			var res_495252 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_495252 <= colontmp__495249)) break L3;
						F.line = 2109;
						i_495176 = res_495252;
						L4: do {
							F.line = 142;
							switch (len_495130((Tmp5 = HEX5BHEX5D_495067(cu_495156.blocks, i_495176), Tmp5[0])[Tmp5[1]])) {
							case 0:
								F.line = 144;
								break L4;
								break;
							default: 
								F.line = 146;
								result_495157 = (Tmp7 = HEX5BHEX5D_495212((Tmp6 = HEX5BHEX5D_495067(cu_495156.blocks, i_495176), Tmp6[0])[Tmp6[1]].instrSeq, 1), Tmp7[0])[Tmp7[1]].lineNo;
								break BeforeRet;
								break;
							}
						} while(false);
						F.line = 2110;
						res_495252 = addInt(res_495252, 1);
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_495157;

}

function new_493203() {
	var result_493208 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_493401 = null;
		F.line = 211;
		r_493401 = {m_type: NTI493041, opCode: 0, lineNo: 0};
		F.line = 212;
		result_493208 = r_493401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_493208;

}

function new_instr_493133(op_code_493135, line_no_493136) {
	var result_493137 = null;

	var F={procname:"compile.newInstr",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(!((ConstSet24[op_code_493135] != undefined)))) {
		F.line = 61;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(61, 9) `not contains({OpCode.STORE_NAME, OpCode.DELETE_NAME, OpCode.UNPACK_SEQUENCE,\x0A             OpCode.FOR_ITER, OpCode.UNPACK_EX, OpCode.STORE_ATTR,\x0A             OpCode.DELETE_ATTR, OpCode.STORE_GLOBAL, OpCode.DELETE_GLOBAL,\x0A             OpCode.LOAD_CONST, OpCode.LOAD_NAME, OpCode.BUILD_TUPLE,\x0A             OpCode.BUILD_LIST, OpCode.BUILD_SET, OpCode.BUILD_MAP,\x0A             OpCode.LOAD_ATTR, OpCode.COMPARE_OP, OpCode.IMPORT_NAME,\x0A             OpCode.IMPORT_FROM, OpCode.JUMP_FORWARD, OpCode.JUMP_IF_FALSE_OR_POP,\x0A             OpCode.JUMP_IF_TRUE_OR_POP, OpCode.JUMP_ABSOLUTE,\x0A             OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE,\x0A             OpCode.LOAD_GLOBAL, OpCode.SETUP_FINALLY, OpCode.LOAD_FAST,\x0A             OpCode.STORE_FAST, OpCode.DELETE_FAST, OpCode.RAISE_VARARGS,\x0A             OpCode.CALL_FUNCTION, OpCode.MAKE_FUNCTION, OpCode.BUILD_SLICE,\x0A             OpCode.LOAD_CLOSURE, OpCode.LOAD_DEREF, OpCode.STORE_DEREF,\x0A             OpCode.DELETE_DEREF, OpCode.CALL_FUNCTION_KW,\x0A             OpCode.CALL_FUNCTION_EX, OpCode.SETUP_WITH, OpCode.EXTENDED_ARG,\x0A             OpCode.LIST_APPEND, OpCode.SET_ADD, OpCode.MAP_ADD,\x0A             OpCode.LOAD_CLASSDEREF, OpCode.BUILD_LIST_UNPACK,\x0A             OpCode.BUILD_MAP_UNPACK, OpCode.BUILD_MAP_UNPACK_WITH_CALL,\x0A             OpCode.BUILD_TUPLE_UNPACK, OpCode.BUILD_SET_UNPACK,\x0A             OpCode.SETUP_ASYNC_WITH, OpCode.FORMAT_VALUE,\x0A             OpCode.BUILD_CONST_KEY_MAP, OpCode.BUILD_STRING,\x0A             OpCode.BUILD_TUPLE_UNPACK_WITH_CALL, OpCode.LOAD_METHOD,\x0A             OpCode.CALL_METHOD, OpCode.CALL_FINALLY, OpCode.POP_FINALLY,\x0A             OpCode.EXCEPT_HANDLER}, opCode)` "));
		}
		
		F.line = 62;
		result_493137 = new_493203();
		F.line = 63;
		result_493137.opCode = op_code_493135;
		F.line = 64;
		result_493137.lineNo = line_no_493136;
	framePtr = F.prev;

	return result_493137;

}

function new_py_code_488257(code_name_488259, file_name_488260, length_488261) {
	var result_488262 = null;

	var F={procname:"codeobject.newPyCode",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 36;
		result_488262 = new_py_code_simple_487401();
		F.line = 45;
		result_488262.codeName = code_name_488259;
		F.line = 46;
		result_488262.fileName = file_name_488260;
	framePtr = F.prev;

	return result_488262;

}

function num_codes_495286(cu_495288) {
	var result_495289 = 0;

	var F={procname:"compile.numCodes",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 152;
			var b_495415 = null;
			F.line = 3909;
			var colontmp__495426 = null;
			F.line = 152;
			colontmp__495426 = cu_495288.blocks;
			F.line = 3911;
			var i_495429 = 0;
			F.line = 3912;
			var l_495431 = (colontmp__495426 != null ? colontmp__495426.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_495429 < l_495431)) break L3;
						F.line = 3914;
						b_495415 = colontmp__495426[chckIndx(i_495429, 0, colontmp__495426.length+0-1)-0];
						F.line = 153;
						result_495289 = addInt(result_495289, len_495130(b_495415));
						F.line = 3915;
						i_495429 = addInt(i_495429, 1);
						if (!(((colontmp__495426 != null ? colontmp__495426.length : 0) == l_495431))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_495289;

}

function len_488414(code_488416) {
	var result_488417 = 0;

	var F={procname:"codeobject.len",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 49;
		result_488417 = (code_488416.code != null ? code_488416.code.length : 0);
	framePtr = F.prev;

	return result_488417;

}

function add_op_code_488490(code_488492, instr_488497) {
	var F={procname:"codeobject.addOpCode",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 65;
		addInt(code_488492.opCodes, mulInt(len_488414(code_488492), 1))[0] = instr_488497.Field0;
		F.line = 66;
		addInt(code_488492.opArgs, mulInt(len_488414(code_488492), 4))[0] = instr_488497.Field1;
		F.line = 67;
		if (code_488492.code != null) { code_488492.code.push({Field0: instr_488497.Field0, Field1: instr_488497.Field1}); } else { code_488492.code = [{Field0: instr_488497.Field0, Field1: instr_488497.Field1}]; };
		F.line = 68;
		var Tmp1 = nimCopy(null, instr_488497.Field2, NTI104);
		if (code_488492.lineNos != null) { code_488492.lineNos.push(Tmp1); } else { code_488492.lineNos = [Tmp1]; };
	framePtr = F.prev;

	
}

function new_seq_442278(len_442282) {
	var result_442284 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_442284 = new Array(len_442282); for (var i=0;i<len_442282;++i) {result_442284[i]=null;}	framePtr = F.prev;

	return result_442284;

}

function to_inverse_seq_442262(t_442271) {
	var result_442273 = null;

	var F={procname:"symtable.toInverseSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 121;
		result_442273 = nimCopy(null, new_seq_442278(chckRange(len_437683(t_442271), 0, 2147483647)), NTI442283);
		L1: do {
			F.line = 122;
			var name_443298 = null;
			F.line = 122;
			var id_443299 = 0;
			L2: do {
				F.line = 272;
				var h_443304 = 0;
				F.line = 2104;
				var colontmp__443306 = 0;
				F.line = 272;
				colontmp__443306 = (t_442271.data != null ? (t_442271.data.length-1) : -1);
				F.line = 2107;
				var res_443308 = 0;
				L3: do {
					F.line = 2108;
						L4: while (true) {
						if (!(res_443308 <= colontmp__443306)) break L4;
							F.line = 2109;
							h_443304 = res_443308;
							if (is_filled_146491(t_442271.data[chckIndx(h_443304, 0, t_442271.data.length+0-1)-0].Field0)) {
							F.line = 273;
							name_443298 = t_442271.data[chckIndx(h_443304, 0, t_442271.data.length+0-1)-0].Field1;
							F.line = 273;
							id_443299 = t_442271.data[chckIndx(h_443304, 0, t_442271.data.length+0-1)-0].Field2;
							F.line = 123;
							result_442273[chckIndx(id_443299, 0, result_442273.length+0-1)-0] = name_443298;
							}
							
							F.line = 2110;
							res_443308 = addInt(res_443308, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_442273;

}

function names_to_seq_443324(ste_443326) {
	var result_443328 = null;

	var F={procname:"symtable.namesToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 126;
		result_443328 = nimCopy(null, to_inverse_seq_442262(ste_443326.names), NTI442272);
	framePtr = F.prev;

	return result_443328;

}

function local_vars_to_seq_443342(ste_443344) {
	var result_443346 = null;

	var F={procname:"symtable.localVarsToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 129;
		result_443346 = nimCopy(null, to_inverse_seq_442262(ste_443344.localVars), NTI442272);
	framePtr = F.prev;

	return result_443346;

}

function cell_vars_to_seq_443360(ste_443362) {
	var result_443364 = null;

	var F={procname:"symtable.cellVarsToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 132;
		result_443364 = nimCopy(null, to_inverse_seq_442262(ste_443362.cellVars), NTI442272);
	framePtr = F.prev;

	return result_443364;

}

function free_vars_to_seq_443378(ste_443380) {
	var result_443382 = null;

	var F={procname:"symtable.freeVarsToSeq",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 135;
		result_443382 = nimCopy(null, to_inverse_seq_442262(ste_443380.freeVars), NTI442272);
	framePtr = F.prev;

	return result_443382;

}

function new_seq_496257(len_496261) {
	var result_496263 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_496263 = new Array(len_496261); for (var i=0;i<len_496261;++i) {result_496263[i]={Field0: 0, Field1: 0};}	framePtr = F.prev;

	return result_496263;

}

function HEX5BHEX5D_431040(t_431047, key_431049) {
	var result_431051 = [null, 0];
	var result_431051_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_431053 = [0];
		F.line = 161;
		var index_431806 = raw_get_431055(t_431047, key_431049, hc_431053, 0);
		if ((0 <= index_431806)) {
		F.line = 162;
		result_431051 = t_431047.data[chckIndx(index_431806, 0, t_431047.data.length+0-1)-0]; result_431051_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_432206 = null;
			F.line = 2896;
			e_432206 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_432206.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_157579(key_431049)), NTI138);
			F.line = 2891;
			e_432206.parent = null;
			F.line = 165;
			raiseException(e_432206, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_431051, result_431051_Idx];

}

function get_scope_430803(ste_430805, name_430806) {
		var Tmp1;

	var result_430807 = 0;

	var F={procname:"symtable.getScope",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 80;
		result_430807 = (Tmp1 = HEX5BHEX5D_431040(ste_430805.scopes, name_430806), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_430807;

}

function HEX5BHEX5D_435903(t_435910, key_435912) {
	var result_435914 = [null, 0];
	var result_435914_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 160;
		var hc_435916 = [0];
		F.line = 161;
		var index_436669 = raw_get_435918(t_435910, key_435912, hc_435916, 0);
		if ((0 <= index_436669)) {
		F.line = 162;
		result_435914 = t_435910.data[chckIndx(index_436669, 0, t_435910.data.length+0-1)-0]; result_435914_Idx = "Field2";
		}
		else {
			F.line = 2895;
			var e_437006 = null;
			F.line = 2896;
			e_437006 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 165;
			e_437006.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(HEX24_157579(key_435912)), NTI138);
			F.line = 2891;
			e_437006.parent = null;
			F.line = 165;
			raiseException(e_437006, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_435914, result_435914_Idx];

}

function local_id_435666(ste_435668, local_name_435669) {
		var Tmp1;

	var result_435670 = 0;

	var F={procname:"symtable.localId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 97;
		result_435670 = (Tmp1 = HEX5BHEX5D_435903(ste_435668.localVars, local_name_435669), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_435670;

}

function has_key_437193(t_437199, key_437201) {
	var result_437202 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 263;
		var hc_437203 = [0];
		F.line = 264;
		result_437202 = (0 <= raw_get_435918(t_437199, key_437201, hc_437203, 0));
	framePtr = F.prev;

	return result_437202;

}

function name_id_437042(ste_437044, name_str_437045) {
		var Tmp1;

	var result_437046 = 0;

	var F={procname:"symtable.nameId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (has_key_437193(ste_437044.names, name_str_437045)) {
		F.line = 102;
		result_437046 = (Tmp1 = HEX5BHEX5D_435903(ste_437044.names, name_str_437045), Tmp1[0])[Tmp1[1]];
		break BeforeRet;
		}
		else {
			F.line = 104;
			result_437046 = len_437683(ste_437044.names);
			F.line = 105;
			HEX5BHEX5DHEX3D_437850(ste_437044.names, name_str_437045, result_437046);
		}
		
	} while (false);
	framePtr = F.prev;

	return result_437046;

}

function cell_id_441176(ste_441178, name_str_441179) {
		var Tmp1;

	var result_441180 = 0;

	var F={procname:"symtable.cellId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 108;
		result_441180 = (Tmp1 = HEX5BHEX5D_435903(ste_441178.cellVars, name_str_441179), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_441180;

}

function assemble_495778(cu_495780, file_name_495781) {
	var result_495782 = null;

	var F={procname:"compile.assemble",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 243;
			var i_495800 = 0;
			F.line = 3616;
			var colontmp__496603 = 0;
			F.line = 243;
			colontmp__496603 = subInt((cu_495780.blocks != null ? cu_495780.blocks.length : 0), 1);
			F.line = 3617;
			var i_496606 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_496606 < colontmp__496603)) break L3;
						F.line = 3619;
						i_495800 = i_496606;
						F.line = 244;
						var last_block_495801 = cu_495780.blocks[chckIndx(i_495800, 0, cu_495780.blocks.length+0-1)-0];
						F.line = 245;
						var this_block_495802 = cu_495780.blocks[chckIndx(addInt(i_495800, 1), 0, cu_495780.blocks.length+0-1)-0];
						F.line = 246;
						this_block_495802.offset = addInt(last_block_495801.offset, len_495130(last_block_495801));
						F.line = 3620;
						i_496606 = addInt(i_496606, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 248;
			var cb_495811 = null;
			F.line = 3909;
			var colontmp__496617 = null;
			F.line = 248;
			colontmp__496617 = cu_495780.blocks;
			F.line = 3911;
			var i_496620 = 0;
			F.line = 3912;
			var l_496622 = (colontmp__496617 != null ? colontmp__496617.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_496620 < l_496622)) break L6;
						F.line = 3914;
						cb_495811 = colontmp__496617[chckIndx(i_496620, 0, colontmp__496617.length+0-1)-0];
						L7: do {
							F.line = 249;
							var instr_496015 = null;
							F.line = 3909;
							var colontmp__496611 = null;
							F.line = 249;
							colontmp__496611 = cb_495811.instrSeq;
							F.line = 3911;
							var i_496614 = 0;
							F.line = 3912;
							var l_496616 = (colontmp__496611 != null ? colontmp__496611.length : 0);
							L8: do {
								F.line = 3913;
									L9: while (true) {
									if (!(i_496614 < l_496616)) break L9;
										F.line = 3914;
										instr_496015 = colontmp__496611[chckIndx(i_496614, 0, colontmp__496611.length+0-1)-0];
										if (isObj(instr_496015.m_type, NTI493048)) {
										F.line = 251;
										var jump_instr_496027 = instr_496015;
										F.line = 252;
										jump_instr_496027.opArg = jump_instr_496027.target.offset;
										}
										
										F.line = 3915;
										i_496614 = addInt(i_496614, 1);
										if (!(((colontmp__496611 != null ? colontmp__496611.length : 0) == l_496616))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 3915;
						i_496620 = addInt(i_496620, 1);
						if (!(((colontmp__496617 != null ? colontmp__496617.length : 0) == l_496622))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!(tcb_495058(cu_495780).seenReturn)) {
		F.line = 256;
		add_load_const_495641(cu_495780, py_none_356044, last_line_no_495154(cu_495780));
		F.line = 257;
		add_op_495445(cu_495780, new_instr_493133(54, last_line_no_495154(cu_495780)));
		}
		
		F.line = 259;
		result_495782 = new_py_code_488257(cu_495780.codeName, file_name_495781, num_codes_495286(cu_495780));
		L10: do {
			F.line = 260;
			var cb_496037 = null;
			F.line = 3909;
			var colontmp__496631 = null;
			F.line = 260;
			colontmp__496631 = cu_495780.blocks;
			F.line = 3911;
			var i_496634 = 0;
			F.line = 3912;
			var l_496636 = (colontmp__496631 != null ? colontmp__496631.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_496634 < l_496636)) break L12;
						F.line = 3914;
						cb_496037 = colontmp__496631[chckIndx(i_496634, 0, colontmp__496631.length+0-1)-0];
						L13: do {
							F.line = 261;
							var instr_496046 = null;
							F.line = 3909;
							var colontmp__496625 = null;
							F.line = 261;
							colontmp__496625 = cb_496037.instrSeq;
							F.line = 3911;
							var i_496628 = 0;
							F.line = 3912;
							var l_496630 = (colontmp__496625 != null ? colontmp__496625.length : 0);
							L14: do {
								F.line = 3913;
									L15: while (true) {
									if (!(i_496628 < l_496630)) break L15;
										F.line = 3914;
										instr_496046 = colontmp__496625[chckIndx(i_496628, 0, colontmp__496625.length+0-1)-0];
										F.line = 262;
										add_op_code_488490(result_495782, to_tuple_494853(instr_496046));
										F.line = 3915;
										i_496628 = addInt(i_496628, 1);
										if (!(((colontmp__496625 != null ? colontmp__496625.length : 0) == l_496630))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 3915;
						i_496634 = addInt(i_496634, 1);
						if (!(((colontmp__496631 != null ? colontmp__496631.length : 0) == l_496636))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 263;
		result_495782.constants = nimCopy(null, cu_495780.constants, NTI493066);
		F.line = 264;
		result_495782.names = nimCopy(null, names_to_seq_443324(cu_495780.ste), NTI443327);
		F.line = 265;
		result_495782.localVars = nimCopy(null, local_vars_to_seq_443342(cu_495780.ste), NTI443345);
		F.line = 267;
		result_495782.cellVars = nimCopy(null, cell_vars_to_seq_443360(cu_495780.ste), NTI443363);
		F.line = 268;
		result_495782.freeVars = nimCopy(null, free_vars_to_seq_443378(cu_495780.ste), NTI443381);
		F.line = 269;
		result_495782.argNames = nimCopy(null, new_seq_442278(chckRange(len_437683(cu_495780.ste.argVars), 0, 2147483647)), NTI442283);
		F.line = 270;
		result_495782.argScopes = nimCopy(null, new_seq_496257(chckRange(len_437683(cu_495780.ste.argVars), 0, 2147483647)), NTI496262);
		L16: do {
			F.line = 271;
			var arg_name_496487 = null;
			F.line = 271;
			var arg_idx_496488 = 0;
			F.line = 270;
			var colontmp__496638 = {data: null, counter: 0};
			F.line = 271;
			nimCopy(colontmp__496638, cu_495780.ste.argVars, NTI427186);
			L17: do {
				F.line = 272;
				var h_496642 = 0;
				F.line = 2104;
				var colontmp__496644 = 0;
				F.line = 272;
				colontmp__496644 = (colontmp__496638.data != null ? (colontmp__496638.data.length-1) : -1);
				F.line = 2107;
				var res_496646 = 0;
				L18: do {
					F.line = 2108;
						L19: while (true) {
						if (!(res_496646 <= colontmp__496644)) break L19;
							F.line = 2109;
							h_496642 = res_496646;
							if (is_filled_146491(colontmp__496638.data[chckIndx(h_496642, 0, colontmp__496638.data.length+0-1)-0].Field0)) {
							F.line = 273;
							arg_name_496487 = colontmp__496638.data[chckIndx(h_496642, 0, colontmp__496638.data.length+0-1)-0].Field1;
							F.line = 273;
							arg_idx_496488 = colontmp__496638.data[chckIndx(h_496642, 0, colontmp__496638.data.length+0-1)-0].Field2;
							F.line = 272;
							var scope_496489 = get_scope_430803(cu_495780.ste, arg_name_496487);
							F.line = 273;
							var scope_idx_496490 = 0;
							F.line = 274;
							switch (scope_496489) {
							case 0:
								F.line = 276;
								scope_idx_496490 = local_id_435666(cu_495780.ste, arg_name_496487);
								break;
							case 3:
								F.line = 278;
								scope_idx_496490 = name_id_437042(cu_495780.ste, arg_name_496487);
								break;
							case 1:
								F.line = 280;
								scope_idx_496490 = cell_id_441176(cu_495780.ste, arg_name_496487);
								break;
							case 2:
								F.line = 2895;
								var e_496500 = null;
								F.line = 2896;
								e_496500 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
								F.line = 282;
								e_496500.message = nimCopy(null, makeNimstrLit("arguments can\'t be free"), NTI138);
								F.line = 2891;
								e_496500.parent = null;
								F.line = 282;
								raiseException(e_496500, "InternalError");
								break;
							}
							F.line = 283;
							result_495782.argNames[chckIndx(arg_idx_496488, 0, result_495782.argNames.length+0-1)-0] = arg_name_496487;
							F.line = 284;
							nimCopy(result_495782.argScopes[chckIndx(arg_idx_496488, 0, result_495782.argScopes.length+0-1)-0], {Field0: scope_496489, Field1: scope_idx_496490}, NTI487148);
							}
							
							F.line = 2110;
							res_496646 = addInt(res_496646, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_495782;

}

function HEX5BHEX5D_494995(s_495001, i_495003) {
	var result_495005 = [null, 0];
	var result_495005_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3730;
		result_495005 = s_495001; result_495005_Idx = chckIndx(subInt((s_495001 != null ? s_495001.length : 0), i_495003), 0, s_495001.length+0-1)-0;
	framePtr = F.prev;

	return [result_495005, result_495005_Idx];

}

function tcu_494986(c_494988) {
		var Tmp1;

	var result_494989 = null;

	var F={procname:"compile.tcu",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 121;
		result_494989 = (Tmp1 = HEX5BHEX5D_494995(c_494988.units, 1), Tmp1[0])[Tmp1[1]];
	framePtr = F.prev;

	return result_494989;

}

function compile_503014(ast_root_503016, file_name_503017) {
	var result_503018 = null;

	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 843;
		F.line = 843;
		var c_503019 = new_compiler_494647(ast_root_503016, new_py_str_176092(file_name_503017));
		F.line = 844;
++excHandler;
		try {
		F.line = 845;
		compile_497538(c_503019, ast_root_503016);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156086))) {
		F.line = 847;
		var e_503020 = getCurrentException();
		F.line = 848;
		result_503018 = from_bltin_syntax_error_486149(e_503020, new_py_str_176092(file_name_503017));
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		result_503018 = assemble_495778(tcu_494986(c_503019), c_503019.fileName);
	} while (false);
	framePtr = F.prev;

	return result_503018;

}

function compile_503054(input_503056, file_name_503057) {
	var result_503058 = null;

	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 860;
++excHandler;
		try {
		F.line = 861;
		var ast_root_503059 = ast_426236(input_503056);
		F.line = 862;
		result_503058 = compile_503014(ast_root_503059, file_name_503057);
		break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156086))) {
		F.line = 864;
		var e_503060 = getCurrentException();
		F.line = 865;
		result_503058 = from_bltin_syntax_error_486149(e_503060, new_py_str_176092(file_name_503057));
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
	} while (false);
	framePtr = F.prev;

	return result_503058;

}

function interactivePython(input_657072) {
			var Tmp2;
			var Tmp3;

	var result_657073 = false;

	var F={procname:"jspython.interactivePython",prev:framePtr,filename:"jspython.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 16;
		F.line = 16;
		rawEcho(cstrToNimstr(input_657072));
		if (finished_657053[0]) {
		F.line = 18;
		root_cst_657054[0] = null;
		F.line = 19;
		clear_indent_345872(lexer_inst_657055);
		}
		else {
			if (!(!((root_cst_657054[0] === null)))) {
			F.line = 21;
			failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/jspython.nim(21, 5) `not isNil(rootCst)` "));
			}
			
		}
		
		F.line = 23;
++excHandler;
		try {
		F.line = 24;
		root_cst_657054[0] = parse_with_state_351248(cstrToNimstr(input_657072), lexer_inst_657055, 0, root_cst_657054[0]);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI156086))) {
		F.line = 26;
		var e_657202 = getCurrentException();
		F.line = 27;
		var excp_obj_657203 = from_bltin_syntax_error_486149(e_657202, new_py_str_176092(makeNimstrLit("<stdin>")));
		F.line = 28;
		print_tb_596216(excp_obj_657203);
		F.line = 29;
		finished_657053[0] = true;
		F.line = 30;
		result_657073 = true;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
		if ((root_cst_657054[0] === null)) {
		F.line = 33;
		result_657073 = true;
		break BeforeRet;
		}
		
		F.line = 34;
		finished_657053[0] = finished_350088(root_cst_657054[0]);
		if (!(finished_657053[0])) {
		F.line = 36;
		result_657073 = false;
		break BeforeRet;
		}
		
		F.line = 38;
		var compile_res_657211 = compile_503054(root_cst_657054[0], makeNimstrLit("<stdin>"));
			if (of_py_exception_object_358259(compile_res_657211)) {
			Tmp2 = compile_res_657211.thrown;
			}
			else {
			Tmp2 = false;
			}
			
		if (Tmp2) {
		F.line = 40;
		print_tb_596216(compile_res_657211);
		F.line = 41;
		result_657073 = true;
		break BeforeRet;
		}
		
		F.line = 42;
		var co_657212 = compile_res_657211;
		F.line = 47;
		var globals_657401 = null;
		if (!((prev_f_657056[0] == null))) {
		F.line = 49;
		globals_657401 = prev_f_657056[0].globals;
		}
		else {
			F.line = 51;
			globals_657401 = new_py_dict_522257();
		}
		
		F.line = 52;
		var fun_657413 = new_py_func_542057(new_py_string_176075(makeNimstrLit("Bla")), co_657212, globals_657401, null);
		F.line = 53;
		var f_657414 = new_py_frame_551047(fun_657413);
		F.line = 54;
		var ret_obj_657415 = eval_frame_551056(f_657414);
			if (of_py_exception_object_358259(ret_obj_657415)) {
			Tmp3 = ret_obj_657415.thrown;
			}
			else {
			Tmp3 = false;
			}
			
		if (Tmp3) {
		F.line = 56;
		print_tb_596216(ret_obj_657415);
		}
		else {
			F.line = 58;
			prev_f_657056[0] = f_657414;
		}
		
		result_657073 = true;
	} while (false);
	framePtr = F.prev;

	return result_657073;

}

function py_init_656214(args_656217) {
	var F={procname:"lifecycle.pyInit",prev:framePtr,filename:"lifecycle.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 12;
			var t_656415 = null;
			F.line = 3911;
			var i_656604 = 0;
			F.line = 3912;
			var l_656606 = (bltin_types_158717[0] != null ? bltin_types_158717[0].length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_656604 < l_656606)) break L3;
						F.line = 3914;
						t_656415 = bltin_types_158717[0][chckIndx(i_656604, 0, bltin_types_158717[0].length+0-1)-0];
						F.line = 13;
						type_ready_625659(t_656415);
						F.line = 3915;
						i_656604 = addInt(i_656604, 1);
						if (!(((bltin_types_158717[0] != null ? bltin_types_158717[0].length : 0) == l_656606))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}
py_init_656214([]);

function sys_fatal_16979(message_16985) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_16987 = null;
		F.line = 2916;
		e_16987 = {m_type: NTI3886, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_16987.message = nimCopy(null, message_16985, NTI138);
		F.line = 2918;
		raiseException(e_16987, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_16976, p_16976_Idx) {
		if ((p_16976_Idx == 0)) {
		sys_fatal_16979(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function HEX24_373878(e_373880) {
	var result_373881 = null;

	var F={procname:"exceptions.$",prev:framePtr,filename:"../Objects/exceptions.nim",line:0};
	framePtr = F;
		F.line = 142;
		result_373881 = nimCopy(null, (makeNimstrLit("Error: ")).concat(reprEnum(e_373880.tk, NTI357147),makeNimstrLit(" ")), NTI138);
		if (!((e_373880.msg === null))) {
		F.line = 144;
		if (result_373881 != null) { result_373881 = (result_373881).concat(HEX24_157579(e_373880.msg)); } else { result_373881 = HEX24_157579(e_373880.msg).slice(); };
		}
		
	framePtr = F.prev;

	return result_373881;

}

function HEX24_176057(str_obj_176059) {
	var result_176060 = null;

	var F={procname:"stringobject.$",prev:framePtr,filename:"../Objects/stringobject.nim",line:0};
	framePtr = F;
		F.line = 10;
		result_176060 = nimCopy(null, (makeNimstrLit("\"")).concat(str_obj_176059.str,makeNimstrLit("\"")), NTI138);
	framePtr = F.prev;

	return result_176060;

}

function HEX24_376057(i_376059) {
	var result_376060 = null;

	var F={procname:"numobjects.$",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_376060 = nimCopy(null, cstrToNimstr((i_376059.v)+""), NTI138);
	framePtr = F.prev;

	return result_376060;

}

function nucruneLen(s_41507) {
	var result_41508 = 0;

	var F={procname:"unicode.runeLen",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
		F.line = 31;
		var i_41510 = 0;
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!(i_41510 < (s_41507 != null ? s_41507.length : 0))) break L2;
					if ((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] <= 127)) {
					F.line = 33;
					i_41510 = addInt(i_41510, 1);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					F.line = 34;
					i_41510 = addInt(i_41510, 2);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 4) == 14)) {
					F.line = 35;
					i_41510 = addInt(i_41510, 3);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 3) == 30)) {
					F.line = 36;
					i_41510 = addInt(i_41510, 4);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 2) == 62)) {
					F.line = 37;
					i_41510 = addInt(i_41510, 5);
					}
					else {
					if ((((s_41507[chckIndx(i_41510, 0, s_41507.length+0-1)-0] >>> 0) >>> 1) == 126)) {
					F.line = 38;
					i_41510 = addInt(i_41510, 6);
					}
					else {
						F.line = 39;
					i_41510 = addInt(i_41510, 1);
					}
					}}}}}
					F.line = 40;
					result_41508 = addInt(result_41508, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_41508;

}

function rune_len_at_41696(s_41698, i_41699) {
	var result_41700 = 0;

	var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
		if ((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] <= 127)) {
		F.line = 44;
		result_41700 = 1;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 5) == 6)) {
		F.line = 45;
		result_41700 = 2;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 4) == 14)) {
		F.line = 46;
		result_41700 = 3;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 3) == 30)) {
		F.line = 47;
		result_41700 = 4;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 2) == 62)) {
		F.line = 48;
		result_41700 = 5;
		}
		else {
		if ((((s_41698[chckIndx(i_41699, 0, s_41698.length+0-1)-0] >>> 0) >>> 1) == 126)) {
		F.line = 49;
		result_41700 = 6;
		}
		else {
			F.line = 50;
			result_41700 = 1;
		}
		}}}}}
	framePtr = F.prev;

	return result_41700;

}

function rune_offset_46235(s_46237, pos_46238, start_46239) {
	var result_46240 = 0;

	var F={procname:"unicode.runeOffset",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 234;
		var i_46242 = 0;
		F.line = 235;
		var o_46243 = start_46239;
		L1: do {
			F.line = 236;
				L2: while (true) {
				if (!(i_46242 < pos_46238)) break L2;
					F.line = 237;
					o_46243 = addInt(o_46243, chckRange(rune_len_at_41696(s_46237, o_46243), 0, 2147483647));
					if (((s_46237 != null ? s_46237.length : 0) <= o_46243)) {
					F.line = 239;
					result_46240 = -1;
					break BeforeRet;
					}
					
					F.line = 240;
					i_46242 = addInt(i_46242, 1);
				}
		} while(false);
		F.line = 241;
		result_46240 = o_46243;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_46240;

}

function validate_utf8_41958(s_41960) {
	var result_41961 = 0;

	var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 133;
		var i_41963 = 0;
		F.line = 134;
		var l_41964 = (s_41960 != null ? s_41960.length : 0);
		L1: do {
			F.line = 135;
				L2: while (true) {
				if (!(i_41963 < l_41964)) break L2;
					if ((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] <= 127)) {
					F.line = 137;
					i_41963 = addInt(i_41963, 1);
					}
					else {
					if ((((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] < 194)) {
					F.line = 139;
					result_41961 = i_41963;
					break BeforeRet;
					}
					
					if (((addInt(i_41963, 1) < l_41964) && (((s_41960[chckIndx(addInt(i_41963, 1), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2))) {
					F.line = 140;
					i_41963 = addInt(i_41963, 2);
					}
					else {
						F.line = 141;
						result_41961 = i_41963;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] >>> 0) >>> 4) == 14)) {
					if ((((addInt(i_41963, 2) < l_41964) && (((s_41960[chckIndx(addInt(i_41963, 1), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2)) && (((s_41960[chckIndx(addInt(i_41963, 2), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2))) {
					F.line = 144;
					i_41963 = addInt(i_41963, 3);
					}
					else {
						F.line = 145;
						result_41961 = i_41963;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_41960[chckIndx(i_41963, 0, s_41960.length+0-1)-0] >>> 0) >>> 3) == 30)) {
					if (((((addInt(i_41963, 3) < l_41964) && (((s_41960[chckIndx(addInt(i_41963, 1), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2)) && (((s_41960[chckIndx(addInt(i_41963, 2), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2)) && (((s_41960[chckIndx(addInt(i_41963, 3), 0, s_41960.length+0-1)-0] >>> 0) >>> 6) == 2))) {
					F.line = 150;
					i_41963 = addInt(i_41963, 4);
					}
					else {
						F.line = 151;
						result_41961 = i_41963;
						break BeforeRet;
					}
					
					}
					else {
						F.line = 153;
						result_41961 = i_41963;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		F.line = 154;
		result_41961 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_41961;

}

function align_string_141827(s_141829, minimum_width_141830, align_141831, fill_141832) {
			var Tmp1;

	var result_141833 = null;

	var F={procname:"strformat.alignString",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		if ((minimum_width_141830 == 0)) {
		F.line = 353;
		result_141833 = nimCopy(null, s_141829, NTI138);
		}
		else {
			F.line = 355;
			if ((validate_utf8_41958(s_141829) == -1)) {
			Tmp1 = nucruneLen(s_141829);
			}
			else {
			Tmp1 = (s_141829 != null ? s_141829.length : 0);
			}
			
			var s_rune_len_141835 = Tmp1;
			F.line = 356;
			var to_fill_141836 = subInt(minimum_width_141830, s_rune_len_141835);
			if ((to_fill_141836 <= 0)) {
			F.line = 358;
			result_141833 = nimCopy(null, s_141829, NTI138);
			}
			else {
			if (((align_141831 == 60) || (align_141831 == 0))) {
			F.line = 360;
			result_141833 = nimCopy(null, (s_141829).concat(nsuRepeatChar(fill_141832, chckRange(to_fill_141836, 0, 2147483647))), NTI138);
			}
			else {
			if ((align_141831 == 94)) {
			F.line = 362;
			var half_141837 = divInt(to_fill_141836, 2);
			F.line = 363;
			result_141833 = nimCopy(null, (nsuRepeatChar(fill_141832, chckRange(half_141837, 0, 2147483647))).concat(s_141829,nsuRepeatChar(fill_141832, chckRange(subInt(to_fill_141836, half_141837), 0, 2147483647))), NTI138);
			}
			else {
				F.line = 365;
				result_141833 = nimCopy(null, (nsuRepeatChar(fill_141832, chckRange(to_fill_141836, 0, 2147483647))).concat(s_141829), NTI138);
			}
			}}
		}
		
	framePtr = F.prev;

	return result_141833;

}

function format_142201(value_142203, specifier_142204, res_142206, res_142206_Idx) {
	var F={procname:"strformat.format",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 567;
		var spec_142207 = parse_standard_format_specifier_141928(specifier_142204, 0, false);
		F.line = 568;
		var value_142208 = nimCopy(null, value_142203, NTI138);
		F.line = 569;
		switch (spec_142207.typ) {
		case 115:
		case 0:
			break;
		default: 
			F.line = 2895;
			var e_142215 = null;
			F.line = 2896;
			e_142215 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 573;
			e_142215.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ")).concat([spec_142207.typ]), NTI138);
			F.line = 2891;
			e_142215.parent = null;
			F.line = 572;
			raiseException(e_142215, "ValueError");
			break;
		}
		if (!((spec_142207.precision == -1))) {
		if ((spec_142207.precision < nucruneLen(value_142208))) {
		F.line = 577;
		value_142208.length = chckRange(rune_offset_46235(value_142208, chckRange(spec_142207.precision, 0, 2147483647), 0), 0, 2147483647);
		}
		
		}
		
		F.line = 578;
		if (res_142206[res_142206_Idx] != null) { res_142206[res_142206_Idx] = (res_142206[res_142206_Idx]).concat(align_string_141827(value_142208, spec_142207.minimumWidth, spec_142207.align, spec_142207.fill)); } else { res_142206[res_142206_Idx] = align_string_141827(value_142208, spec_142207.minimumWidth, spec_142207.align, spec_142207.fill).slice(); };
	framePtr = F.prev;

	
}

function of_py_code_object_487183(obj_487070) {
	var result_487185 = false;

	var F={procname:"codeobject.ofPyCodeObject",prev:framePtr,filename:"../Objects/pyobject.nim",line:0};
	framePtr = F;
		F.line = 553;
		result_487185 = (obj_487070.pyType.kind == 11);
	framePtr = F.prev;

	return result_487185;

}

function HEX24_489229(code_489231) {
	var result_489232 = null;

	var F={procname:"codeobject.$",prev:framePtr,filename:"../Objects/codeobject.nim",line:0};
	framePtr = F;
		F.line = 77;
		var s_489234 = null;
		F.line = 78;
		if (s_489234 != null) { s_489234.push((makeNimstrLit("Names: ")).concat(HEX24_489237(code_489231.names))); } else { s_489234 = [(makeNimstrLit("Names: ")).concat(HEX24_489237(code_489231.names))]; };
		F.line = 79;
		if (s_489234 != null) { s_489234.push((makeNimstrLit("Local variables: ")).concat(HEX24_489237(code_489231.localVars))); } else { s_489234 = [(makeNimstrLit("Local variables: ")).concat(HEX24_489237(code_489231.localVars))]; };
		F.line = 80;
		if (s_489234 != null) { s_489234.push((makeNimstrLit("Cell variables: ")).concat(HEX24_489237(code_489231.cellVars))); } else { s_489234 = [(makeNimstrLit("Cell variables: ")).concat(HEX24_489237(code_489231.cellVars))]; };
		F.line = 81;
		if (s_489234 != null) { s_489234.push((makeNimstrLit("Free variables: ")).concat(HEX24_489237(code_489231.freeVars))); } else { s_489234 = [(makeNimstrLit("Free variables: ")).concat(HEX24_489237(code_489231.freeVars))]; };
		F.line = 83;
		var other_codes_489912 = null;
		L1: do {
			F.line = 84;
			var idx_489959 = 0;
			F.line = 84;
			var op_array_489960 = {Field0: 0, Field1: 0};
			F.line = 2352;
			var colontmp__492418 = null;
			F.line = 84;
			colontmp__492418 = code_489231.code;
			F.line = 2354;
			var i_492421 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_492421 < (colontmp__492418 != null ? colontmp__492418.length : 0))) break L3;
						F.line = 2356;
						idx_489959 = i_492421;
						F.line = 2356;
						nimCopy(op_array_489960, colontmp__492418[chckIndx(i_492421, 0, colontmp__492418.length+0-1)-0], NTI487127);
						F.line = 85;
						var op_code_489961 = op_array_489960["Field0"];
						F.line = 86;
						var op_arg_489962 = op_array_489960["Field1"];
						F.line = 87;
						F.line = 87;
						var fmt_res_489965 = [mnewString(0)];
						F.line = 274;
						format_158402(idx_489959, makeNimstrLit(">10"), fmt_res_489965, 0);
						F.line = 87;
						if (fmt_res_489965[0] != null) { fmt_res_489965[0] = (fmt_res_489965[0]).concat(makeNimstrLit(" ")); } else { fmt_res_489965[0] = makeNimstrLit(" "); };
						F.line = 278;
						format_142201(reprEnum(op_code_489961, NTI459016), makeNimstrLit("<30"), fmt_res_489965, 0);
						var line_490612 = nimCopy(null, fmt_res_489965[0], NTI138);
						if ((ConstSet25[op_code_489961] != undefined)) {
						F.line = 89;
						F.line = 89;
						var fmt_res_490624 = [mnewString(0)];
						F.line = 274;
						format_158402(op_arg_489962, makeNimstrLit("<4"), fmt_res_490624, 0);
						if (line_490612 != null) { line_490612 = (line_490612).concat(fmt_res_490624[0]); } else { line_490612 = fmt_res_490624[0].slice(); };
						F.line = 90;
						switch (op_code_489961) {
						case 72:
						case 62:
						case 77:
						case 87:
						case 69:
							F.line = 93;
							F.line = 93;
							var fmt_res_491019 = mnewString(0);
							F.line = 93;
							if (fmt_res_491019 != null) { fmt_res_491019 = (fmt_res_491019).concat(makeNimstrLit(" (")); } else { fmt_res_491019 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_491019 != null) { fmt_res_491019 = (fmt_res_491019).concat(HEX24_157579(code_489231.names[chckIndx(op_arg_489962, 0, code_489231.names.length+0-1)-0])); } else { fmt_res_491019 = HEX24_157579(code_489231.names[chckIndx(op_arg_489962, 0, code_489231.names.length+0-1)-0]).slice(); };
							F.line = 93;
							if (fmt_res_491019 != null) { fmt_res_491019 = (fmt_res_491019).concat(makeNimstrLit(")")); } else { fmt_res_491019 = makeNimstrLit(")"); };
							if (line_490612 != null) { line_490612 = (line_490612).concat(fmt_res_491019); } else { line_490612 = fmt_res_491019.slice(); };
							break;
						case 71:
							F.line = 95;
							var const_obj_491202 = code_489231.constants[chckIndx(op_arg_489962, 0, code_489231.constants.length+0-1)-0];
							if (of_py_code_object_487183(const_obj_491202)) {
							F.line = 97;
							var other_code_491203 = const_obj_491202;
							F.line = 98;
							if (other_codes_489912 != null) { other_codes_489912.push(other_code_491203); } else { other_codes_489912 = [other_code_491203]; };
							F.line = 99;
							var repr_str_491214 = repr_py_code_object_magic_488552(other_code_491203);
							F.line = 100;
							F.line = 100;
							var fmt_res_491217 = mnewString(0);
							F.line = 100;
							if (fmt_res_491217 != null) { fmt_res_491217 = (fmt_res_491217).concat(makeNimstrLit(" (")); } else { fmt_res_491217 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_491217 != null) { fmt_res_491217 = (fmt_res_491217).concat(HEX24_157579(repr_str_491214)); } else { fmt_res_491217 = HEX24_157579(repr_str_491214).slice(); };
							F.line = 100;
							if (fmt_res_491217 != null) { fmt_res_491217 = (fmt_res_491217).concat(makeNimstrLit(")")); } else { fmt_res_491217 = makeNimstrLit(")"); };
							if (line_490612 != null) { line_490612 = (line_490612).concat(fmt_res_491217); } else { line_490612 = fmt_res_491217.slice(); };
							}
							else {
								F.line = 102;
								F.line = 102;
								var fmt_res_491403 = mnewString(0);
								F.line = 102;
								if (fmt_res_491403 != null) { fmt_res_491403 = (fmt_res_491403).concat(makeNimstrLit(" (")); } else { fmt_res_491403 = makeNimstrLit(" ("); };
								F.line = 270;
								if (fmt_res_491403 != null) { fmt_res_491403 = (fmt_res_491403).concat(HEX24_157579(code_489231.constants[chckIndx(op_arg_489962, 0, code_489231.constants.length+0-1)-0])); } else { fmt_res_491403 = HEX24_157579(code_489231.constants[chckIndx(op_arg_489962, 0, code_489231.constants.length+0-1)-0]).slice(); };
								F.line = 102;
								if (fmt_res_491403 != null) { fmt_res_491403 = (fmt_res_491403).concat(makeNimstrLit(")")); } else { fmt_res_491403 = makeNimstrLit(")"); };
							if (line_490612 != null) { line_490612 = (line_490612).concat(fmt_res_491403); } else { line_490612 = fmt_res_491403.slice(); };
							}
							
							break;
						case 89:
						case 90:
							F.line = 104;
							F.line = 104;
							var fmt_res_491605 = mnewString(0);
							F.line = 104;
							if (fmt_res_491605 != null) { fmt_res_491605 = (fmt_res_491605).concat(makeNimstrLit(" (")); } else { fmt_res_491605 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_491605 != null) { fmt_res_491605 = (fmt_res_491605).concat(HEX24_157579(code_489231.localVars[chckIndx(op_arg_489962, 0, code_489231.localVars.length+0-1)-0])); } else { fmt_res_491605 = HEX24_157579(code_489231.localVars[chckIndx(op_arg_489962, 0, code_489231.localVars.length+0-1)-0]).slice(); };
							F.line = 104;
							if (fmt_res_491605 != null) { fmt_res_491605 = (fmt_res_491605).concat(makeNimstrLit(")")); } else { fmt_res_491605 = makeNimstrLit(")"); };
							if (line_490612 != null) { line_490612 = (line_490612).concat(fmt_res_491605); } else { line_490612 = fmt_res_491605.slice(); };
							break;
						case 97:
						case 98:
							if ((op_arg_489962 < (code_489231.cellVars != null ? code_489231.cellVars.length : 0))) {
							F.line = 107;
							F.line = 107;
							var fmt_res_491812 = mnewString(0);
							F.line = 107;
							if (fmt_res_491812 != null) { fmt_res_491812 = (fmt_res_491812).concat(makeNimstrLit(" (")); } else { fmt_res_491812 = makeNimstrLit(" ("); };
							F.line = 270;
							if (fmt_res_491812 != null) { fmt_res_491812 = (fmt_res_491812).concat(HEX24_157579(code_489231.cellVars[chckIndx(op_arg_489962, 0, code_489231.cellVars.length+0-1)-0])); } else { fmt_res_491812 = HEX24_157579(code_489231.cellVars[chckIndx(op_arg_489962, 0, code_489231.cellVars.length+0-1)-0]).slice(); };
							F.line = 107;
							if (fmt_res_491812 != null) { fmt_res_491812 = (fmt_res_491812).concat(makeNimstrLit(")")); } else { fmt_res_491812 = makeNimstrLit(")"); };
							if (line_490612 != null) { line_490612 = (line_490612).concat(fmt_res_491812); } else { line_490612 = fmt_res_491812.slice(); };
							}
							else {
								F.line = 109;
								F.line = 109;
								var fmt_res_492003 = mnewString(0);
								F.line = 109;
								if (fmt_res_492003 != null) { fmt_res_492003 = (fmt_res_492003).concat(makeNimstrLit(" (")); } else { fmt_res_492003 = makeNimstrLit(" ("); };
								F.line = 270;
								if (fmt_res_492003 != null) { fmt_res_492003 = (fmt_res_492003).concat(HEX24_157579(code_489231.freeVars[chckIndx(subInt(op_arg_489962, (code_489231.cellVars != null ? code_489231.cellVars.length : 0)), 0, code_489231.freeVars.length+0-1)-0])); } else { fmt_res_492003 = HEX24_157579(code_489231.freeVars[chckIndx(subInt(op_arg_489962, (code_489231.cellVars != null ? code_489231.cellVars.length : 0)), 0, code_489231.freeVars.length+0-1)-0]).slice(); };
								F.line = 109;
								if (fmt_res_492003 != null) { fmt_res_492003 = (fmt_res_492003).concat(makeNimstrLit(")")); } else { fmt_res_492003 = makeNimstrLit(")"); };
							if (line_490612 != null) { line_490612 = (line_490612).concat(fmt_res_492003); } else { line_490612 = fmt_res_492003.slice(); };
							}
							
							break;
						case 93:
						case 65:
						case 74:
						case 73:
						case 64:
						case 94:
						case 92:
						case 81:
						case 82:
						case 83:
						case 84:
						case 85:
						case 86:
						case 88:
							break;
						default: 
							F.line = 115;
							if (line_490612 != null) { line_490612 = (line_490612).concat(makeNimstrLit(" (Unknown OpCode)")); } else { line_490612 = makeNimstrLit(" (Unknown OpCode)"); };
							break;
						}
						}
						
						F.line = 116;
						var Tmp4 = nimCopy(null, line_490612, NTI138);
						if (s_489234 != null) { s_489234.push(Tmp4); } else { s_489234 = [Tmp4]; };
						F.line = 2357;
						i_492421 = addInt(i_492421, 1);
					}
			} while(false);
		} while(false);
		F.line = 117;
		if (s_489234 != null) { s_489234.push(makeNimstrLit("\x0A")); } else { s_489234 = [makeNimstrLit("\x0A")]; };
		F.line = 118;
		result_489232 = nimCopy(null, nsuJoinSep(s_489234, makeNimstrLit("\x0A")), NTI138);
		L5: do {
			F.line = 119;
			var other_code_492415 = null;
			F.line = 3911;
			var i_492425 = 0;
			F.line = 3912;
			var l_492427 = (other_codes_489912 != null ? other_codes_489912.length : 0);
			L6: do {
				F.line = 3913;
					L7: while (true) {
					if (!(i_492425 < l_492427)) break L7;
						F.line = 3914;
						other_code_492415 = other_codes_489912[chckIndx(i_492425, 0, other_codes_489912.length+0-1)-0];
						F.line = 120;
						if (result_489232 != null) { result_489232 = (result_489232).concat(HEX24_157579(other_code_492415)); } else { result_489232 = HEX24_157579(other_code_492415).slice(); };
						F.line = 3915;
						i_492425 = addInt(i_492425, 1);
						if (!(((other_codes_489912 != null ? other_codes_489912.length : 0) == l_492427))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_489232;

}

function HEX24_391119(obj_391121) {
	var result_391122 = null;

	var F={procname:"boolobjectImpl.$",prev:framePtr,filename:"../Objects/boolobjectImpl.nim",line:0};
	framePtr = F;
		F.line = 14;
		result_391122 = nimCopy(null, nimBoolToStr(obj_391121.b), NTI138);
	framePtr = F.prev;

	return result_391122;

}

function HEX24_376074(f_376076) {
	var result_376077 = null;

	var F={procname:"numobjects.$",prev:framePtr,filename:"../Objects/numobjects.nim",line:0};
	framePtr = F;
		F.line = 30;
		result_376077 = nimCopy(null, cstrToNimstr((f_376076.v)+""), NTI138);
	framePtr = F.prev;

	return result_376077;

}

function HEX24_157574(obj_157576) {
	var result_157577 = null;

	var F={procname:"pyobjectBase.$",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
		F.line = 163;
		result_157577 = nimCopy(null, makeNimstrLit("Python object"), NTI138);
	framePtr = F.prev;

	return result_157577;

}

function HEX24_157579(obj_157576) {
	var result_157582 = null;

	var F={procname:"pyobjectBase.$",prev:framePtr,filename:"../Objects/pyobjectBase.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(obj_157576);
		if (isObj(obj_157576.m_type, NTI357231)) {
		F.line = 162;
		result_157582 = HEX24_373878(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI175084)) {
		F.line = 162;
		result_157582 = HEX24_176057(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI374109)) {
		F.line = 162;
		result_157582 = HEX24_376057(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI487125)) {
		F.line = 162;
		result_157582 = HEX24_489229(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI353098)) {
		F.line = 162;
		result_157582 = HEX24_391119(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI375100)) {
		F.line = 162;
		result_157582 = HEX24_376074(obj_157576);
		break BeforeRet;
		}
		else {
		if (isObj(obj_157576.m_type, NTI157273)) {
		F.line = 162;
		result_157582 = HEX24_157574(obj_157576);
		break BeforeRet;
		}
		}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_157582;

}

function hash_177044(node_177046) {
	var result_177047 = 0;

	var F={procname:"asdl.hash",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 23;
		result_177047 = hash_143801(node_177046);
	framePtr = F.prev;

	return result_177047;

}

function hash_177049(node_177046) {
	var result_177052 = 0;

	var F={procname:"asdl.hash",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 22;
		result_177052 = hash_177044(node_177046);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_177052;

}

function add_182829(x_182835, x_182835_Idx, y_182838) {
	var F={procname:"add.add",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1612;
		var xl_182846 = (x_182835[x_182835_Idx] != null ? x_182835[x_182835_Idx].length : 0);
		F.line = 1613;
		if (x_182835[x_182835_Idx].length < chckRange(addInt(xl_182846, (y_182838 != null ? y_182838.length : 0)), 0, 2147483647)) { for (var i=x_182835[x_182835_Idx].length;i<chckRange(addInt(xl_182846, (y_182838 != null ? y_182838.length : 0)), 0, 2147483647);++i) x_182835[x_182835_Idx].push(null); }
               else { x_182835[x_182835_Idx].length = chckRange(addInt(xl_182846, (y_182838 != null ? y_182838.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1614;
			var i_182881 = 0;
			F.line = 2104;
			var colontmp__182883 = 0;
			F.line = 1614;
			colontmp__182883 = (y_182838 != null ? (y_182838.length-1) : -1);
			F.line = 2107;
			var res_182886 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_182886 <= colontmp__182883)) break L3;
						F.line = 2109;
						i_182881 = res_182886;
						F.line = 1614;
						x_182835[x_182835_Idx][chckIndx(addInt(xl_182846, i_182881), 0, x_182835[x_182835_Idx].length+0-1)-0] = nimCopy(null, y_182838[chckIndx(i_182881, 0, y_182838.length+0-1)-0], NTI138);
						F.line = 2110;
						res_182886 = addInt(res_182886, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function indent_177636(str_177638, level_177639) {
	var result_177642 = null;

	var F={procname:"asdl.indent",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 136;
		F.line = 136;
		var indent_177643 = [];
		L1: do {
			F.line = 137;
			var i_177654 = 0;
			F.line = 3617;
			var i_178078 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_178078 < level_177639)) break L3;
						F.line = 3619;
						i_177654 = i_178078;
						F.line = 138;
						if (indent_177643 != null) { indent_177643 = (indent_177643).concat(makeNimstrLit("   ")); } else { indent_177643 = makeNimstrLit("   "); };
						F.line = 3620;
						i_178078 = addInt(i_178078, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 139;
			var HEX3Atmp_178009 = nsuSplitString(str_177638, makeNimstrLit("\x0A"), -1);
			F.line = 687;
			var i_178013 = 0;
			F.line = 688;
			var result_178054 = new_seq_178023(chckRange((HEX3Atmp_178009 != null ? HEX3Atmp_178009.length : 0), 0, 2147483647));
			L5: do {
				F.line = 689;
				var it_178063 = null;
				F.line = 3911;
				var i_178084 = 0;
				F.line = 3912;
				var l_178086 = (HEX3Atmp_178009 != null ? HEX3Atmp_178009.length : 0);
				L6: do {
					F.line = 3913;
						L7: while (true) {
						if (!(i_178084 < l_178086)) break L7;
							F.line = 3914;
							it_178063 = HEX3Atmp_178009[chckIndx(i_178084, 0, HEX3Atmp_178009.length+0-1)-0];
							F.line = 139;
							result_178054[chckIndx(i_178013, 0, result_178054.length+0-1)-0] = nimCopy(null, (indent_177643).concat(it_178063), NTI138);
							F.line = 691;
							i_178013 = addInt(i_178013, 1);
							F.line = 3915;
							i_178084 = addInt(i_178084, 1);
							if (!(((HEX3Atmp_178009 != null ? HEX3Atmp_178009.length : 0) == l_178086))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		} while(false);
		result_177642 = nimCopy(null, result_178054, NTI178028);
	framePtr = F.prev;

	return result_177642;

}

function HEX24_182365(node_182367) {
	var result_186913 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 374;
		var string_seq_186926 = [nimCopy(null, [makeNimstrLit("Import")], NTI182673)];
		F.line = 374;
		if (string_seq_186926[0] != null) { string_seq_186926[0].push(makeNimstrLit("   names")); } else { string_seq_186926[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187015 = null;
			F.line = 3909;
			var colontmp__187054 = null;
			F.line = 374;
			colontmp__187054 = node_182367.names;
			F.line = 3911;
			var i_187057 = 0;
			F.line = 3912;
			var l_187059 = (colontmp__187054 != null ? colontmp__187054.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187057 < l_187059)) break L3;
						F.line = 3914;
						child_187015 = colontmp__187054[chckIndx(i_187057, 0, colontmp__187054.length+0-1)-0];
						if ((child_187015 == null)) {
						F.line = 374;
						add_182829(string_seq_186926, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 374;
						add_182829(string_seq_186926, 0, indent_177636(HEX24_177554(child_187015), 2));
						}
						
						F.line = 3915;
						i_187057 = addInt(i_187057, 1);
						if (!(((colontmp__187054 != null ? colontmp__187054.length : 0) == l_187059))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_186913 = nimCopy(null, nsuJoinSep(string_seq_186926[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186913;

}

function HEX24_182371(node_182373) {
	var result_187243 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 377;
		var string_seq_187256 = [nimCopy(null, [makeNimstrLit("Global")], NTI182673)];
		F.line = 377;
		if (string_seq_187256[0] != null) { string_seq_187256[0].push(makeNimstrLit("   names")); } else { string_seq_187256[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187415 = null;
			F.line = 3909;
			var colontmp__187454 = null;
			F.line = 377;
			colontmp__187454 = node_182373.names;
			F.line = 3911;
			var i_187457 = 0;
			F.line = 3912;
			var l_187459 = (colontmp__187454 != null ? colontmp__187454.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187457 < l_187459)) break L3;
						F.line = 3914;
						child_187415 = colontmp__187454[chckIndx(i_187457, 0, colontmp__187454.length+0-1)-0];
						if ((child_187415 == null)) {
						F.line = 377;
						add_182829(string_seq_187256, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 377;
						add_182829(string_seq_187256, 0, indent_177636(HEX24_177554(child_187415), 2));
						}
						
						F.line = 3915;
						i_187457 = addInt(i_187457, 1);
						if (!(((colontmp__187454 != null ? colontmp__187454.length : 0) == l_187459))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_187243 = nimCopy(null, nsuJoinSep(string_seq_187256[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187243;

}

function HEX24_182368(node_182370) {
	var result_187076 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 375;
		var string_seq_187089 = [nimCopy(null, [makeNimstrLit("ImportFrom")], NTI182673)];
		if ((node_182370.module == null)) {
		F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(HEX24_177554(node_182370.module), 1));
		}
		
		F.line = 375;
		if (string_seq_187089[0] != null) { string_seq_187089[0].push(makeNimstrLit("   names")); } else { string_seq_187089[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187145 = null;
			F.line = 3909;
			var colontmp__187221 = null;
			F.line = 375;
			colontmp__187221 = node_182370.names;
			F.line = 3911;
			var i_187224 = 0;
			F.line = 3912;
			var l_187226 = (colontmp__187221 != null ? colontmp__187221.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187224 < l_187226)) break L3;
						F.line = 3914;
						child_187145 = colontmp__187221[chckIndx(i_187224, 0, colontmp__187221.length+0-1)-0];
						if ((child_187145 == null)) {
						F.line = 375;
						add_182829(string_seq_187089, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 375;
						add_182829(string_seq_187089, 0, indent_177636(HEX24_177554(child_187145), 2));
						}
						
						F.line = 3915;
						i_187224 = addInt(i_187224, 1);
						if (!(((colontmp__187221 != null ? colontmp__187221.length : 0) == l_187226))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182370.level == null)) {
		F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 375;
		add_182829(string_seq_187089, 0, indent_177636(HEX24_177554(node_182370.level), 1));
		}
		
		F.line = 476;
		result_187076 = nimCopy(null, nsuJoinSep(string_seq_187089[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187076;

}

function HEX24_182377(node_182379) {
	var result_187569 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 379;
		var string_seq_187582 = [nimCopy(null, [makeNimstrLit("Expr")], NTI182673)];
		if ((node_182379.value == null)) {
		F.line = 379;
		add_182829(string_seq_187582, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 379;
		add_182829(string_seq_187582, 0, indent_177636(HEX24_177554(node_182379.value), 1));
		}
		
		F.line = 476;
		result_187569 = nimCopy(null, nsuJoinSep(string_seq_187582[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187569;

}

function HEX24_182383(node_182385) {
	var result_187653 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 381;
		result_187653 = nimCopy(null, makeNimstrLit("Break"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187653;

}

function HEX24_182380(node_182382) {
	var result_187636 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 380;
		result_187636 = nimCopy(null, makeNimstrLit("Pass"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187636;

}

function HEX24_182350(node_182352) {
	var result_185864 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 367;
		var string_seq_185877 = [nimCopy(null, [makeNimstrLit("With")], NTI182673)];
		F.line = 367;
		if (string_seq_185877[0] != null) { string_seq_185877[0].push(makeNimstrLit("   items")); } else { string_seq_185877[0] = [makeNimstrLit("   items")]; };
		L1: do {
			F.line = 215;
			var child_186015 = null;
			F.line = 3909;
			var colontmp__186110 = null;
			F.line = 367;
			colontmp__186110 = node_182352.items;
			F.line = 3911;
			var i_186113 = 0;
			F.line = 3912;
			var l_186115 = (colontmp__186110 != null ? colontmp__186110.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_186113 < l_186115)) break L3;
						F.line = 3914;
						child_186015 = colontmp__186110[chckIndx(i_186113, 0, colontmp__186110.length+0-1)-0];
						if ((child_186015 == null)) {
						F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(HEX24_177554(child_186015), 2));
						}
						
						F.line = 3915;
						i_186113 = addInt(i_186113, 1);
						if (!(((colontmp__186110 != null ? colontmp__186110.length : 0) == l_186115))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 367;
		if (string_seq_185877[0] != null) { string_seq_185877[0].push(makeNimstrLit("   body")); } else { string_seq_185877[0] = [makeNimstrLit("   body")]; };
		L4: do {
			F.line = 215;
			var child_186071 = null;
			F.line = 3909;
			var colontmp__186117 = null;
			F.line = 367;
			colontmp__186117 = node_182352.body;
			F.line = 3911;
			var i_186120 = 0;
			F.line = 3912;
			var l_186122 = (colontmp__186117 != null ? colontmp__186117.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_186120 < l_186122)) break L6;
						F.line = 3914;
						child_186071 = colontmp__186117[chckIndx(i_186120, 0, colontmp__186117.length+0-1)-0];
						if ((child_186071 == null)) {
						F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 367;
						add_182829(string_seq_185877, 0, indent_177636(HEX24_177554(child_186071), 2));
						}
						
						F.line = 3915;
						i_186120 = addInt(i_186120, 1);
						if (!(((colontmp__186117 != null ? colontmp__186117.length : 0) == l_186122))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185864 = nimCopy(null, nsuJoinSep(string_seq_185877[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185864;

}

function HEX24_182374(node_182376) {
	var result_187476 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 378;
		var string_seq_187489 = [nimCopy(null, [makeNimstrLit("Nonlocal")], NTI182673)];
		F.line = 378;
		if (string_seq_187489[0] != null) { string_seq_187489[0].push(makeNimstrLit("   names")); } else { string_seq_187489[0] = [makeNimstrLit("   names")]; };
		L1: do {
			F.line = 215;
			var child_187508 = null;
			F.line = 3909;
			var colontmp__187547 = null;
			F.line = 378;
			colontmp__187547 = node_182376.names;
			F.line = 3911;
			var i_187550 = 0;
			F.line = 3912;
			var l_187552 = (colontmp__187547 != null ? colontmp__187547.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187550 < l_187552)) break L3;
						F.line = 3914;
						child_187508 = colontmp__187547[chckIndx(i_187550, 0, colontmp__187547.length+0-1)-0];
						if ((child_187508 == null)) {
						F.line = 378;
						add_182829(string_seq_187489, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 378;
						add_182829(string_seq_187489, 0, indent_177636(HEX24_177554(child_187508), 2));
						}
						
						F.line = 3915;
						i_187550 = addInt(i_187550, 1);
						if (!(((colontmp__187547 != null ? colontmp__187547.length : 0) == l_187552))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_187476 = nimCopy(null, nsuJoinSep(string_seq_187489[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187476;

}

function HEX24_182395(node_182397) {
	var result_187921 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 389;
		var string_seq_187934 = [nimCopy(null, [makeNimstrLit("BinOp")], NTI182673)];
		if ((node_182397.left == null)) {
		F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(HEX24_177554(node_182397.left), 1));
		}
		
		if ((node_182397.op == null)) {
		F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(HEX24_177554(node_182397.op), 1));
		}
		
		if ((node_182397.right == null)) {
		F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 389;
		add_182829(string_seq_187934, 0, indent_177636(HEX24_177554(node_182397.right), 1));
		}
		
		F.line = 476;
		result_187921 = nimCopy(null, nsuJoinSep(string_seq_187934[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187921;

}

function HEX24_182401(node_182403) {
	var result_188166 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 391;
		var string_seq_188179 = [nimCopy(null, [makeNimstrLit("Lambda")], NTI182673)];
		if ((node_182403.args == null)) {
		F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(HEX24_177554(node_182403.args), 1));
		}
		
		if ((node_182403.body == null)) {
		F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 391;
		add_182829(string_seq_188179, 0, indent_177636(HEX24_177554(node_182403.body), 1));
		}
		
		F.line = 476;
		result_188166 = nimCopy(null, nsuJoinSep(string_seq_188179[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188166;

}

function HEX24_182386(node_182388) {
	var result_187670 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 382;
		result_187670 = nimCopy(null, makeNimstrLit("Continue"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187670;

}

function HEX24_182329(node_182331) {
	var result_184569 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 357;
		var string_seq_184582 = [nimCopy(null, [makeNimstrLit("Assign")], NTI182673)];
		F.line = 357;
		if (string_seq_184582[0] != null) { string_seq_184582[0].push(makeNimstrLit("   targets")); } else { string_seq_184582[0] = [makeNimstrLit("   targets")]; };
		L1: do {
			F.line = 215;
			var child_184601 = null;
			F.line = 3909;
			var colontmp__184677 = null;
			F.line = 357;
			colontmp__184677 = node_182331.targets;
			F.line = 3911;
			var i_184680 = 0;
			F.line = 3912;
			var l_184682 = (colontmp__184677 != null ? colontmp__184677.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_184680 < l_184682)) break L3;
						F.line = 3914;
						child_184601 = colontmp__184677[chckIndx(i_184680, 0, colontmp__184677.length+0-1)-0];
						if ((child_184601 == null)) {
						F.line = 357;
						add_182829(string_seq_184582, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 357;
						add_182829(string_seq_184582, 0, indent_177636(HEX24_177554(child_184601), 2));
						}
						
						F.line = 3915;
						i_184680 = addInt(i_184680, 1);
						if (!(((colontmp__184677 != null ? colontmp__184677.length : 0) == l_184682))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182331.value == null)) {
		F.line = 357;
		add_182829(string_seq_184582, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 357;
		add_182829(string_seq_184582, 0, indent_177636(HEX24_177554(node_182331.value), 1));
		}
		
		F.line = 476;
		result_184569 = nimCopy(null, nsuJoinSep(string_seq_184582[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184569;

}

function HEX24_182392(node_182394) {
	var result_187791 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 388;
		var string_seq_187804 = [nimCopy(null, [makeNimstrLit("BoolOp")], NTI182673)];
		if ((node_182394.op == null)) {
		F.line = 388;
		add_182829(string_seq_187804, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 388;
		add_182829(string_seq_187804, 0, indent_177636(HEX24_177554(node_182394.op), 1));
		}
		
		F.line = 388;
		if (string_seq_187804[0] != null) { string_seq_187804[0].push(makeNimstrLit("   values")); } else { string_seq_187804[0] = [makeNimstrLit("   values")]; };
		L1: do {
			F.line = 215;
			var child_187860 = null;
			F.line = 3909;
			var colontmp__187899 = null;
			F.line = 388;
			colontmp__187899 = node_182394.values;
			F.line = 3911;
			var i_187902 = 0;
			F.line = 3912;
			var l_187904 = (colontmp__187899 != null ? colontmp__187899.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_187902 < l_187904)) break L3;
						F.line = 3914;
						child_187860 = colontmp__187899[chckIndx(i_187902, 0, colontmp__187899.length+0-1)-0];
						if ((child_187860 == null)) {
						F.line = 388;
						add_182829(string_seq_187804, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 388;
						add_182829(string_seq_187804, 0, indent_177636(HEX24_177554(child_187860), 2));
						}
						
						F.line = 3915;
						i_187902 = addInt(i_187902, 1);
						if (!(((colontmp__187899 != null ? colontmp__187899.length : 0) == l_187904))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_187791 = nimCopy(null, nsuJoinSep(string_seq_187804[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187791;

}

function HEX24_182335(node_182337) {
	var result_184840 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 360;
		var string_seq_184853 = [nimCopy(null, [makeNimstrLit("AnnAssign")], NTI182673)];
		if ((node_182337.target == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.target), 1));
		}
		
		if ((node_182337.annotation == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.annotation), 1));
		}
		
		if ((node_182337.value == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.value), 1));
		}
		
		if ((node_182337.simple == null)) {
		F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 360;
		add_182829(string_seq_184853, 0, indent_177636(HEX24_177554(node_182337.simple), 1));
		}
		
		F.line = 476;
		result_184840 = nimCopy(null, nsuJoinSep(string_seq_184853[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184840;

}

function HEX24_182341(node_182343) {
	var result_185248 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 364;
		var string_seq_185261 = [nimCopy(null, [makeNimstrLit("AsyncFor")], NTI182673)];
		if ((node_182343.target == null)) {
		F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(node_182343.target), 1));
		}
		
		if ((node_182343.iter == null)) {
		F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 364;
		add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(node_182343.iter), 1));
		}
		
		F.line = 364;
		if (string_seq_185261[0] != null) { string_seq_185261[0].push(makeNimstrLit("   body")); } else { string_seq_185261[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185354 = null;
			F.line = 3909;
			var colontmp__185449 = null;
			F.line = 364;
			colontmp__185449 = node_182343.body;
			F.line = 3911;
			var i_185452 = 0;
			F.line = 3912;
			var l_185454 = (colontmp__185449 != null ? colontmp__185449.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185452 < l_185454)) break L3;
						F.line = 3914;
						child_185354 = colontmp__185449[chckIndx(i_185452, 0, colontmp__185449.length+0-1)-0];
						if ((child_185354 == null)) {
						F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(child_185354), 2));
						}
						
						F.line = 3915;
						i_185452 = addInt(i_185452, 1);
						if (!(((colontmp__185449 != null ? colontmp__185449.length : 0) == l_185454))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 364;
		if (string_seq_185261[0] != null) { string_seq_185261[0].push(makeNimstrLit("   orelse")); } else { string_seq_185261[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185410 = null;
			F.line = 3909;
			var colontmp__185456 = null;
			F.line = 364;
			colontmp__185456 = node_182343.orelse;
			F.line = 3911;
			var i_185459 = 0;
			F.line = 3912;
			var l_185461 = (colontmp__185456 != null ? colontmp__185456.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185459 < l_185461)) break L6;
						F.line = 3914;
						child_185410 = colontmp__185456[chckIndx(i_185459, 0, colontmp__185456.length+0-1)-0];
						if ((child_185410 == null)) {
						F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 364;
						add_182829(string_seq_185261, 0, indent_177636(HEX24_177554(child_185410), 2));
						}
						
						F.line = 3915;
						i_185459 = addInt(i_185459, 1);
						if (!(((colontmp__185456 != null ? colontmp__185456.length : 0) == l_185461))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185248 = nimCopy(null, nsuJoinSep(string_seq_185261[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185248;

}

function HEX24_182326(node_182328) {
	var result_184476 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 356;
		var string_seq_184489 = [nimCopy(null, [makeNimstrLit("Delete")], NTI182673)];
		F.line = 356;
		if (string_seq_184489[0] != null) { string_seq_184489[0].push(makeNimstrLit("   targets")); } else { string_seq_184489[0] = [makeNimstrLit("   targets")]; };
		L1: do {
			F.line = 215;
			var child_184508 = null;
			F.line = 3909;
			var colontmp__184547 = null;
			F.line = 356;
			colontmp__184547 = node_182328.targets;
			F.line = 3911;
			var i_184550 = 0;
			F.line = 3912;
			var l_184552 = (colontmp__184547 != null ? colontmp__184547.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_184550 < l_184552)) break L3;
						F.line = 3914;
						child_184508 = colontmp__184547[chckIndx(i_184550, 0, colontmp__184547.length+0-1)-0];
						if ((child_184508 == null)) {
						F.line = 356;
						add_182829(string_seq_184489, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 356;
						add_182829(string_seq_184489, 0, indent_177636(HEX24_177554(child_184508), 2));
						}
						
						F.line = 3915;
						i_184550 = addInt(i_184550, 1);
						if (!(((colontmp__184547 != null ? colontmp__184547.length : 0) == l_184552))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_184476 = nimCopy(null, nsuJoinSep(string_seq_184489[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184476;

}

function HEX24_182347(node_182349) {
	var result_185671 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 366;
		var string_seq_185684 = [nimCopy(null, [makeNimstrLit("If")], NTI182673)];
		if ((node_182349.test == null)) {
		F.line = 366;
		add_182829(string_seq_185684, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 366;
		add_182829(string_seq_185684, 0, indent_177636(HEX24_177554(node_182349.test), 1));
		}
		
		F.line = 366;
		if (string_seq_185684[0] != null) { string_seq_185684[0].push(makeNimstrLit("   body")); } else { string_seq_185684[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185740 = null;
			F.line = 3909;
			var colontmp__185835 = null;
			F.line = 366;
			colontmp__185835 = node_182349.body;
			F.line = 3911;
			var i_185838 = 0;
			F.line = 3912;
			var l_185840 = (colontmp__185835 != null ? colontmp__185835.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185838 < l_185840)) break L3;
						F.line = 3914;
						child_185740 = colontmp__185835[chckIndx(i_185838, 0, colontmp__185835.length+0-1)-0];
						if ((child_185740 == null)) {
						F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(HEX24_177554(child_185740), 2));
						}
						
						F.line = 3915;
						i_185838 = addInt(i_185838, 1);
						if (!(((colontmp__185835 != null ? colontmp__185835.length : 0) == l_185840))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 366;
		if (string_seq_185684[0] != null) { string_seq_185684[0].push(makeNimstrLit("   orelse")); } else { string_seq_185684[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185796 = null;
			F.line = 3909;
			var colontmp__185842 = null;
			F.line = 366;
			colontmp__185842 = node_182349.orelse;
			F.line = 3911;
			var i_185845 = 0;
			F.line = 3912;
			var l_185847 = (colontmp__185842 != null ? colontmp__185842.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185845 < l_185847)) break L6;
						F.line = 3914;
						child_185796 = colontmp__185842[chckIndx(i_185845, 0, colontmp__185842.length+0-1)-0];
						if ((child_185796 == null)) {
						F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 366;
						add_182829(string_seq_185684, 0, indent_177636(HEX24_177554(child_185796), 2));
						}
						
						F.line = 3915;
						i_185845 = addInt(i_185845, 1);
						if (!(((colontmp__185842 != null ? colontmp__185842.length : 0) == l_185847))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185671 = nimCopy(null, nsuJoinSep(string_seq_185684[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185671;

}

function HEX24_182398(node_182400) {
	var result_188062 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 390;
		var string_seq_188075 = [nimCopy(null, [makeNimstrLit("UnaryOp")], NTI182673)];
		if ((node_182400.op == null)) {
		F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(HEX24_177554(node_182400.op), 1));
		}
		
		if ((node_182400.operand == null)) {
		F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 390;
		add_182829(string_seq_188075, 0, indent_177636(HEX24_177554(node_182400.operand), 1));
		}
		
		F.line = 476;
		result_188062 = nimCopy(null, nsuJoinSep(string_seq_188075[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188062;

}

function HEX24_182353(node_182355) {
	var result_186139 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 368;
		var string_seq_186152 = [nimCopy(null, [makeNimstrLit("AsyncWith")], NTI182673)];
		F.line = 368;
		if (string_seq_186152[0] != null) { string_seq_186152[0].push(makeNimstrLit("   items")); } else { string_seq_186152[0] = [makeNimstrLit("   items")]; };
		L1: do {
			F.line = 215;
			var child_186171 = null;
			F.line = 3909;
			var colontmp__186266 = null;
			F.line = 368;
			colontmp__186266 = node_182355.items;
			F.line = 3911;
			var i_186269 = 0;
			F.line = 3912;
			var l_186271 = (colontmp__186266 != null ? colontmp__186266.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_186269 < l_186271)) break L3;
						F.line = 3914;
						child_186171 = colontmp__186266[chckIndx(i_186269, 0, colontmp__186266.length+0-1)-0];
						if ((child_186171 == null)) {
						F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(HEX24_177554(child_186171), 2));
						}
						
						F.line = 3915;
						i_186269 = addInt(i_186269, 1);
						if (!(((colontmp__186266 != null ? colontmp__186266.length : 0) == l_186271))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 368;
		if (string_seq_186152[0] != null) { string_seq_186152[0].push(makeNimstrLit("   body")); } else { string_seq_186152[0] = [makeNimstrLit("   body")]; };
		L4: do {
			F.line = 215;
			var child_186227 = null;
			F.line = 3909;
			var colontmp__186273 = null;
			F.line = 368;
			colontmp__186273 = node_182355.body;
			F.line = 3911;
			var i_186276 = 0;
			F.line = 3912;
			var l_186278 = (colontmp__186273 != null ? colontmp__186273.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_186276 < l_186278)) break L6;
						F.line = 3914;
						child_186227 = colontmp__186273[chckIndx(i_186276, 0, colontmp__186273.length+0-1)-0];
						if ((child_186227 == null)) {
						F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 368;
						add_182829(string_seq_186152, 0, indent_177636(HEX24_177554(child_186227), 2));
						}
						
						F.line = 3915;
						i_186276 = addInt(i_186276, 1);
						if (!(((colontmp__186273 != null ? colontmp__186273.length : 0) == l_186278))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_186139 = nimCopy(null, nsuJoinSep(string_seq_186152[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186139;

}

function HEX24_182338(node_182340) {
	var result_185018 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 363;
		var string_seq_185031 = [nimCopy(null, [makeNimstrLit("For")], NTI182673)];
		if ((node_182340.target == null)) {
		F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(node_182340.target), 1));
		}
		
		if ((node_182340.iter == null)) {
		F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 363;
		add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(node_182340.iter), 1));
		}
		
		F.line = 363;
		if (string_seq_185031[0] != null) { string_seq_185031[0].push(makeNimstrLit("   body")); } else { string_seq_185031[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185124 = null;
			F.line = 3909;
			var colontmp__185219 = null;
			F.line = 363;
			colontmp__185219 = node_182340.body;
			F.line = 3911;
			var i_185222 = 0;
			F.line = 3912;
			var l_185224 = (colontmp__185219 != null ? colontmp__185219.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185222 < l_185224)) break L3;
						F.line = 3914;
						child_185124 = colontmp__185219[chckIndx(i_185222, 0, colontmp__185219.length+0-1)-0];
						if ((child_185124 == null)) {
						F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(child_185124), 2));
						}
						
						F.line = 3915;
						i_185222 = addInt(i_185222, 1);
						if (!(((colontmp__185219 != null ? colontmp__185219.length : 0) == l_185224))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 363;
		if (string_seq_185031[0] != null) { string_seq_185031[0].push(makeNimstrLit("   orelse")); } else { string_seq_185031[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185180 = null;
			F.line = 3909;
			var colontmp__185226 = null;
			F.line = 363;
			colontmp__185226 = node_182340.orelse;
			F.line = 3911;
			var i_185229 = 0;
			F.line = 3912;
			var l_185231 = (colontmp__185226 != null ? colontmp__185226.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185229 < l_185231)) break L6;
						F.line = 3914;
						child_185180 = colontmp__185226[chckIndx(i_185229, 0, colontmp__185226.length+0-1)-0];
						if ((child_185180 == null)) {
						F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 363;
						add_182829(string_seq_185031, 0, indent_177636(HEX24_177554(child_185180), 2));
						}
						
						F.line = 3915;
						i_185229 = addInt(i_185229, 1);
						if (!(((colontmp__185226 != null ? colontmp__185226.length : 0) == l_185231))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185018 = nimCopy(null, nsuJoinSep(string_seq_185031[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185018;

}

function HEX24_182359(node_182361) {
	var result_186399 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 371;
		var string_seq_186412 = [nimCopy(null, [makeNimstrLit("Try")], NTI182673)];
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   body")); } else { string_seq_186412[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_186431 = null;
			F.line = 3909;
			var colontmp__186766 = null;
			F.line = 371;
			colontmp__186766 = node_182361.body;
			F.line = 3911;
			var i_186769 = 0;
			F.line = 3912;
			var l_186771 = (colontmp__186766 != null ? colontmp__186766.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_186769 < l_186771)) break L3;
						F.line = 3914;
						child_186431 = colontmp__186766[chckIndx(i_186769, 0, colontmp__186766.length+0-1)-0];
						if ((child_186431 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186431), 2));
						}
						
						F.line = 3915;
						i_186769 = addInt(i_186769, 1);
						if (!(((colontmp__186766 != null ? colontmp__186766.length : 0) == l_186771))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   handlers")); } else { string_seq_186412[0] = [makeNimstrLit("   handlers")]; };
		L4: do {
			F.line = 215;
			var child_186615 = null;
			F.line = 3909;
			var colontmp__186773 = null;
			F.line = 371;
			colontmp__186773 = node_182361.handlers;
			F.line = 3911;
			var i_186776 = 0;
			F.line = 3912;
			var l_186778 = (colontmp__186773 != null ? colontmp__186773.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_186776 < l_186778)) break L6;
						F.line = 3914;
						child_186615 = colontmp__186773[chckIndx(i_186776, 0, colontmp__186773.length+0-1)-0];
						if ((child_186615 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186615), 2));
						}
						
						F.line = 3915;
						i_186776 = addInt(i_186776, 1);
						if (!(((colontmp__186773 != null ? colontmp__186773.length : 0) == l_186778))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   orelse")); } else { string_seq_186412[0] = [makeNimstrLit("   orelse")]; };
		L7: do {
			F.line = 215;
			var child_186671 = null;
			F.line = 3909;
			var colontmp__186780 = null;
			F.line = 371;
			colontmp__186780 = node_182361.orelse;
			F.line = 3911;
			var i_186783 = 0;
			F.line = 3912;
			var l_186785 = (colontmp__186780 != null ? colontmp__186780.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_186783 < l_186785)) break L9;
						F.line = 3914;
						child_186671 = colontmp__186780[chckIndx(i_186783, 0, colontmp__186780.length+0-1)-0];
						if ((child_186671 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186671), 2));
						}
						
						F.line = 3915;
						i_186783 = addInt(i_186783, 1);
						if (!(((colontmp__186780 != null ? colontmp__186780.length : 0) == l_186785))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 371;
		if (string_seq_186412[0] != null) { string_seq_186412[0].push(makeNimstrLit("   finalbody")); } else { string_seq_186412[0] = [makeNimstrLit("   finalbody")]; };
		L10: do {
			F.line = 215;
			var child_186727 = null;
			F.line = 3909;
			var colontmp__186787 = null;
			F.line = 371;
			colontmp__186787 = node_182361.finalbody;
			F.line = 3911;
			var i_186790 = 0;
			F.line = 3912;
			var l_186792 = (colontmp__186787 != null ? colontmp__186787.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_186790 < l_186792)) break L12;
						F.line = 3914;
						child_186727 = colontmp__186787[chckIndx(i_186790, 0, colontmp__186787.length+0-1)-0];
						if ((child_186727 == null)) {
						F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 371;
						add_182829(string_seq_186412, 0, indent_177636(HEX24_177554(child_186727), 2));
						}
						
						F.line = 3915;
						i_186790 = addInt(i_186790, 1);
						if (!(((colontmp__186787 != null ? colontmp__186787.length : 0) == l_186792))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_186399 = nimCopy(null, nsuJoinSep(string_seq_186412[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186399;

}

function HEX24_182413(node_182415) {
	var result_188660 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 395;
		var string_seq_188673 = [nimCopy(null, [makeNimstrLit("ListComp")], NTI182673)];
		if ((node_182415.elt == null)) {
		F.line = 395;
		add_182829(string_seq_188673, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 395;
		add_182829(string_seq_188673, 0, indent_177636(HEX24_177554(node_182415.elt), 1));
		}
		
		F.line = 395;
		if (string_seq_188673[0] != null) { string_seq_188673[0].push(makeNimstrLit("   generators")); } else { string_seq_188673[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_188815 = null;
			F.line = 3909;
			var colontmp__188854 = null;
			F.line = 395;
			colontmp__188854 = node_182415.generators;
			F.line = 3911;
			var i_188857 = 0;
			F.line = 3912;
			var l_188859 = (colontmp__188854 != null ? colontmp__188854.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188857 < l_188859)) break L3;
						F.line = 3914;
						child_188815 = colontmp__188854[chckIndx(i_188857, 0, colontmp__188854.length+0-1)-0];
						if ((child_188815 == null)) {
						F.line = 395;
						add_182829(string_seq_188673, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 395;
						add_182829(string_seq_188673, 0, indent_177636(HEX24_177554(child_188815), 2));
						}
						
						F.line = 3915;
						i_188857 = addInt(i_188857, 1);
						if (!(((colontmp__188854 != null ? colontmp__188854.length : 0) == l_188859))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188660 = nimCopy(null, nsuJoinSep(string_seq_188673[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188660;

}

function HEX24_182407(node_182409) {
	var result_188411 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 393;
		var string_seq_188424 = [nimCopy(null, [makeNimstrLit("Dict")], NTI182673)];
		F.line = 393;
		if (string_seq_188424[0] != null) { string_seq_188424[0].push(makeNimstrLit("   keys")); } else { string_seq_188424[0] = [makeNimstrLit("   keys")]; };
		L1: do {
			F.line = 215;
			var child_188443 = null;
			F.line = 3909;
			var colontmp__188538 = null;
			F.line = 393;
			colontmp__188538 = node_182409.keys;
			F.line = 3911;
			var i_188541 = 0;
			F.line = 3912;
			var l_188543 = (colontmp__188538 != null ? colontmp__188538.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188541 < l_188543)) break L3;
						F.line = 3914;
						child_188443 = colontmp__188538[chckIndx(i_188541, 0, colontmp__188538.length+0-1)-0];
						if ((child_188443 == null)) {
						F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(HEX24_177554(child_188443), 2));
						}
						
						F.line = 3915;
						i_188541 = addInt(i_188541, 1);
						if (!(((colontmp__188538 != null ? colontmp__188538.length : 0) == l_188543))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 393;
		if (string_seq_188424[0] != null) { string_seq_188424[0].push(makeNimstrLit("   values")); } else { string_seq_188424[0] = [makeNimstrLit("   values")]; };
		L4: do {
			F.line = 215;
			var child_188499 = null;
			F.line = 3909;
			var colontmp__188545 = null;
			F.line = 393;
			colontmp__188545 = node_182409.values;
			F.line = 3911;
			var i_188548 = 0;
			F.line = 3912;
			var l_188550 = (colontmp__188545 != null ? colontmp__188545.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_188548 < l_188550)) break L6;
						F.line = 3914;
						child_188499 = colontmp__188545[chckIndx(i_188548, 0, colontmp__188545.length+0-1)-0];
						if ((child_188499 == null)) {
						F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 393;
						add_182829(string_seq_188424, 0, indent_177636(HEX24_177554(child_188499), 2));
						}
						
						F.line = 3915;
						i_188548 = addInt(i_188548, 1);
						if (!(((colontmp__188545 != null ? colontmp__188545.length : 0) == l_188550))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188411 = nimCopy(null, nsuJoinSep(string_seq_188424[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188411;

}

function HEX24_182512(node_182514) {
	var result_191811 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191811 = nimCopy(null, makeNimstrLit("Add"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191811;

}

function HEX24_182344(node_182346) {
	var result_185478 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 365;
		var string_seq_185491 = [nimCopy(null, [makeNimstrLit("While")], NTI182673)];
		if ((node_182346.test == null)) {
		F.line = 365;
		add_182829(string_seq_185491, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 365;
		add_182829(string_seq_185491, 0, indent_177636(HEX24_177554(node_182346.test), 1));
		}
		
		F.line = 365;
		if (string_seq_185491[0] != null) { string_seq_185491[0].push(makeNimstrLit("   body")); } else { string_seq_185491[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_185547 = null;
			F.line = 3909;
			var colontmp__185642 = null;
			F.line = 365;
			colontmp__185642 = node_182346.body;
			F.line = 3911;
			var i_185645 = 0;
			F.line = 3912;
			var l_185647 = (colontmp__185642 != null ? colontmp__185642.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_185645 < l_185647)) break L3;
						F.line = 3914;
						child_185547 = colontmp__185642[chckIndx(i_185645, 0, colontmp__185642.length+0-1)-0];
						if ((child_185547 == null)) {
						F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(HEX24_177554(child_185547), 2));
						}
						
						F.line = 3915;
						i_185645 = addInt(i_185645, 1);
						if (!(((colontmp__185642 != null ? colontmp__185642.length : 0) == l_185647))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 365;
		if (string_seq_185491[0] != null) { string_seq_185491[0].push(makeNimstrLit("   orelse")); } else { string_seq_185491[0] = [makeNimstrLit("   orelse")]; };
		L4: do {
			F.line = 215;
			var child_185603 = null;
			F.line = 3909;
			var colontmp__185649 = null;
			F.line = 365;
			colontmp__185649 = node_182346.orelse;
			F.line = 3911;
			var i_185652 = 0;
			F.line = 3912;
			var l_185654 = (colontmp__185649 != null ? colontmp__185649.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_185652 < l_185654)) break L6;
						F.line = 3914;
						child_185603 = colontmp__185649[chckIndx(i_185652, 0, colontmp__185649.length+0-1)-0];
						if ((child_185603 == null)) {
						F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 365;
						add_182829(string_seq_185491, 0, indent_177636(HEX24_177554(child_185603), 2));
						}
						
						F.line = 3915;
						i_185652 = addInt(i_185652, 1);
						if (!(((colontmp__185649 != null ? colontmp__185649.length : 0) == l_185654))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_185478 = nimCopy(null, nsuJoinSep(string_seq_185491[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_185478;

}

function HEX24_182419(node_182421) {
	var result_189006 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 397;
		var string_seq_189019 = [nimCopy(null, [makeNimstrLit("DictComp")], NTI182673)];
		if ((node_182421.key == null)) {
		F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(HEX24_177554(node_182421.key), 1));
		}
		
		if ((node_182421.value == null)) {
		F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 397;
		add_182829(string_seq_189019, 0, indent_177636(HEX24_177554(node_182421.value), 1));
		}
		
		F.line = 397;
		if (string_seq_189019[0] != null) { string_seq_189019[0].push(makeNimstrLit("   generators")); } else { string_seq_189019[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_189112 = null;
			F.line = 3909;
			var colontmp__189151 = null;
			F.line = 397;
			colontmp__189151 = node_182421.generators;
			F.line = 3911;
			var i_189154 = 0;
			F.line = 3912;
			var l_189156 = (colontmp__189151 != null ? colontmp__189151.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_189154 < l_189156)) break L3;
						F.line = 3914;
						child_189112 = colontmp__189151[chckIndx(i_189154, 0, colontmp__189151.length+0-1)-0];
						if ((child_189112 == null)) {
						F.line = 397;
						add_182829(string_seq_189019, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 397;
						add_182829(string_seq_189019, 0, indent_177636(HEX24_177554(child_189112), 2));
						}
						
						F.line = 3915;
						i_189154 = addInt(i_189154, 1);
						if (!(((colontmp__189151 != null ? colontmp__189151.length : 0) == l_189156))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189006 = nimCopy(null, nsuJoinSep(string_seq_189019[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189006;

}

function HEX24_182362(node_182364) {
	var result_186809 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 372;
		var string_seq_186822 = [nimCopy(null, [makeNimstrLit("Assert")], NTI182673)];
		if ((node_182364.test == null)) {
		F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(HEX24_177554(node_182364.test), 1));
		}
		
		if ((node_182364.msg == null)) {
		F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 372;
		add_182829(string_seq_186822, 0, indent_177636(HEX24_177554(node_182364.msg), 1));
		}
		
		F.line = 476;
		result_186809 = nimCopy(null, nsuJoinSep(string_seq_186822[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186809;

}

function HEX24_182494(node_182496) {
	var result_191460 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 424;
		var string_seq_191473 = [nimCopy(null, [makeNimstrLit("ExtSlice")], NTI182673)];
		F.line = 424;
		if (string_seq_191473[0] != null) { string_seq_191473[0].push(makeNimstrLit("   dims")); } else { string_seq_191473[0] = [makeNimstrLit("   dims")]; };
		L1: do {
			F.line = 215;
			var child_191615 = null;
			F.line = 3909;
			var colontmp__191654 = null;
			F.line = 424;
			colontmp__191654 = node_182496.dims;
			F.line = 3911;
			var i_191657 = 0;
			F.line = 3912;
			var l_191659 = (colontmp__191654 != null ? colontmp__191654.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_191657 < l_191659)) break L3;
						F.line = 3914;
						child_191615 = colontmp__191654[chckIndx(i_191657, 0, colontmp__191654.length+0-1)-0];
						if ((child_191615 == null)) {
						F.line = 424;
						add_182829(string_seq_191473, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 424;
						add_182829(string_seq_191473, 0, indent_177636(HEX24_177554(child_191615), 2));
						}
						
						F.line = 3915;
						i_191657 = addInt(i_191657, 1);
						if (!(((colontmp__191654 != null ? colontmp__191654.length : 0) == l_191659))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_191460 = nimCopy(null, nsuJoinSep(string_seq_191473[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191460;

}

function HEX24_182356(node_182358) {
	var result_186295 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 370;
		var string_seq_186308 = [nimCopy(null, [makeNimstrLit("Raise")], NTI182673)];
		if ((node_182358.exc == null)) {
		F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(HEX24_177554(node_182358.exc), 1));
		}
		
		if ((node_182358.cause == null)) {
		F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 370;
		add_182829(string_seq_186308, 0, indent_177636(HEX24_177554(node_182358.cause), 1));
		}
		
		F.line = 476;
		result_186295 = nimCopy(null, nsuJoinSep(string_seq_186308[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_186295;

}

function HEX24_182473(node_182475) {
	var result_191217 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191217 = nimCopy(null, makeNimstrLit("Store"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191217;

}

function HEX24_182416(node_182418) {
	var result_188876 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 396;
		var string_seq_188889 = [nimCopy(null, [makeNimstrLit("SetComp")], NTI182673)];
		if ((node_182418.elt == null)) {
		F.line = 396;
		add_182829(string_seq_188889, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 396;
		add_182829(string_seq_188889, 0, indent_177636(HEX24_177554(node_182418.elt), 1));
		}
		
		F.line = 396;
		if (string_seq_188889[0] != null) { string_seq_188889[0].push(makeNimstrLit("   generators")); } else { string_seq_188889[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_188945 = null;
			F.line = 3909;
			var colontmp__188984 = null;
			F.line = 396;
			colontmp__188984 = node_182418.generators;
			F.line = 3911;
			var i_188987 = 0;
			F.line = 3912;
			var l_188989 = (colontmp__188984 != null ? colontmp__188984.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188987 < l_188989)) break L3;
						F.line = 3914;
						child_188945 = colontmp__188984[chckIndx(i_188987, 0, colontmp__188984.length+0-1)-0];
						if ((child_188945 == null)) {
						F.line = 396;
						add_182829(string_seq_188889, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 396;
						add_182829(string_seq_188889, 0, indent_177636(HEX24_177554(child_188945), 2));
						}
						
						F.line = 3915;
						i_188987 = addInt(i_188987, 1);
						if (!(((colontmp__188984 != null ? colontmp__188984.length : 0) == l_188989))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188876 = nimCopy(null, nsuJoinSep(string_seq_188889[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188876;

}

function HEX24_182506(node_182508) {
	var result_191777 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 428;
		result_191777 = nimCopy(null, makeNimstrLit("Or"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191777;

}

function HEX24_182323(node_182325) {
	var result_184409 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 354;
		var string_seq_184422 = [nimCopy(null, [makeNimstrLit("Return")], NTI182673)];
		if ((node_182325.value == null)) {
		F.line = 354;
		add_182829(string_seq_184422, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 354;
		add_182829(string_seq_184422, 0, indent_177636(HEX24_177554(node_182325.value), 1));
		}
		
		F.line = 476;
		result_184409 = nimCopy(null, nsuJoinSep(string_seq_184422[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184409;

}

function HEX24_182317(node_182319) {
	var result_183720 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 347;
		var string_seq_183733 = [nimCopy(null, [makeNimstrLit("AsyncFunctionDef")], NTI182673)];
		if ((node_182319.name == null)) {
		F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(node_182319.name), 1));
		}
		
		if ((node_182319.args == null)) {
		F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 348;
		add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(node_182319.args), 1));
		}
		
		F.line = 349;
		if (string_seq_183733[0] != null) { string_seq_183733[0].push(makeNimstrLit("   body")); } else { string_seq_183733[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_183826 = null;
			F.line = 3909;
			var colontmp__183958 = null;
			F.line = 349;
			colontmp__183958 = node_182319.body;
			F.line = 3911;
			var i_183961 = 0;
			F.line = 3912;
			var l_183963 = (colontmp__183958 != null ? colontmp__183958.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183961 < l_183963)) break L3;
						F.line = 3914;
						child_183826 = colontmp__183958[chckIndx(i_183961, 0, colontmp__183958.length+0-1)-0];
						if ((child_183826 == null)) {
						F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(child_183826), 2));
						}
						
						F.line = 3915;
						i_183961 = addInt(i_183961, 1);
						if (!(((colontmp__183958 != null ? colontmp__183958.length : 0) == l_183963))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 349;
		if (string_seq_183733[0] != null) { string_seq_183733[0].push(makeNimstrLit("   decorator_list")); } else { string_seq_183733[0] = [makeNimstrLit("   decorator_list")]; };
		L4: do {
			F.line = 215;
			var child_183882 = null;
			F.line = 3909;
			var colontmp__183965 = null;
			F.line = 349;
			colontmp__183965 = node_182319.decorator_list;
			F.line = 3911;
			var i_183968 = 0;
			F.line = 3912;
			var l_183970 = (colontmp__183965 != null ? colontmp__183965.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_183968 < l_183970)) break L6;
						F.line = 3914;
						child_183882 = colontmp__183965[chckIndx(i_183968, 0, colontmp__183965.length+0-1)-0];
						if ((child_183882 == null)) {
						F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 349;
						add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(child_183882), 2));
						}
						
						F.line = 3915;
						i_183968 = addInt(i_183968, 1);
						if (!(((colontmp__183965 != null ? colontmp__183965.length : 0) == l_183970))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182319.returns == null)) {
		F.line = 349;
		add_182829(string_seq_183733, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 349;
		add_182829(string_seq_183733, 0, indent_177636(HEX24_177554(node_182319.returns), 1));
		}
		
		F.line = 476;
		result_183720 = nimCopy(null, nsuJoinSep(string_seq_183733[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183720;

}

function HEX24_182491(node_182493) {
	var result_191319 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 423;
		var string_seq_191332 = [nimCopy(null, [makeNimstrLit("Slice")], NTI182673)];
		if ((node_182493.lower == null)) {
		F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(HEX24_177554(node_182493.lower), 1));
		}
		
		if ((node_182493.upper == null)) {
		F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(HEX24_177554(node_182493.upper), 1));
		}
		
		if ((node_182493.step == null)) {
		F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 423;
		add_182829(string_seq_191332, 0, indent_177636(HEX24_177554(node_182493.step), 1));
		}
		
		F.line = 476;
		result_191319 = nimCopy(null, nsuJoinSep(string_seq_191332[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191319;

}

function HEX24_182497(node_182499) {
	var result_191676 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 425;
		var string_seq_191689 = [nimCopy(null, [makeNimstrLit("Index")], NTI182673)];
		if ((node_182499.value == null)) {
		F.line = 425;
		add_182829(string_seq_191689, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 425;
		add_182829(string_seq_191689, 0, indent_177636(HEX24_177554(node_182499.value), 1));
		}
		
		F.line = 476;
		result_191676 = nimCopy(null, nsuJoinSep(string_seq_191689[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191676;

}

function HEX24_182332(node_182334) {
	var result_184699 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 358;
		var string_seq_184712 = [nimCopy(null, [makeNimstrLit("AugAssign")], NTI182673)];
		if ((node_182334.target == null)) {
		F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(HEX24_177554(node_182334.target), 1));
		}
		
		if ((node_182334.op == null)) {
		F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(HEX24_177554(node_182334.op), 1));
		}
		
		if ((node_182334.value == null)) {
		F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 358;
		add_182829(string_seq_184712, 0, indent_177636(HEX24_177554(node_182334.value), 1));
		}
		
		F.line = 476;
		result_184699 = nimCopy(null, nsuJoinSep(string_seq_184712[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_184699;

}

function HEX24_182302(node_182304) {
	var result_182940 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 335;
		var string_seq_182953 = [nimCopy(null, [makeNimstrLit("Interactive")], NTI182673)];
		F.line = 335;
		if (string_seq_182953[0] != null) { string_seq_182953[0].push(makeNimstrLit("   body")); } else { string_seq_182953[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_182972 = null;
			F.line = 3909;
			var colontmp__183011 = null;
			F.line = 335;
			colontmp__183011 = node_182304.body;
			F.line = 3911;
			var i_183014 = 0;
			F.line = 3912;
			var l_183016 = (colontmp__183011 != null ? colontmp__183011.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183014 < l_183016)) break L3;
						F.line = 3914;
						child_182972 = colontmp__183011[chckIndx(i_183014, 0, colontmp__183011.length+0-1)-0];
						if ((child_182972 == null)) {
						F.line = 335;
						add_182829(string_seq_182953, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 335;
						add_182829(string_seq_182953, 0, indent_177636(HEX24_177554(child_182972), 2));
						}
						
						F.line = 3915;
						i_183014 = addInt(i_183014, 1);
						if (!(((colontmp__183011 != null ? colontmp__183011.length : 0) == l_183016))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_182940 = nimCopy(null, nsuJoinSep(string_seq_182953[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_182940;

}

function HEX24_182470(node_182472) {
	var result_191200 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191200 = nimCopy(null, makeNimstrLit("Load"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191200;

}

function HEX24_182308(node_182310) {
	var result_183100 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 337;
		var string_seq_183113 = [nimCopy(null, [makeNimstrLit("Suite")], NTI182673)];
		F.line = 337;
		if (string_seq_183113[0] != null) { string_seq_183113[0].push(makeNimstrLit("   body")); } else { string_seq_183113[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_183132 = null;
			F.line = 3909;
			var colontmp__183171 = null;
			F.line = 337;
			colontmp__183171 = node_182310.body;
			F.line = 3911;
			var i_183174 = 0;
			F.line = 3912;
			var l_183176 = (colontmp__183171 != null ? colontmp__183171.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183174 < l_183176)) break L3;
						F.line = 3914;
						child_183132 = colontmp__183171[chckIndx(i_183174, 0, colontmp__183171.length+0-1)-0];
						if ((child_183132 == null)) {
						F.line = 337;
						add_182829(string_seq_183113, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 337;
						add_182829(string_seq_183113, 0, indent_177636(HEX24_177554(child_183132), 2));
						}
						
						F.line = 3915;
						i_183174 = addInt(i_183174, 1);
						if (!(((colontmp__183171 != null ? colontmp__183171.length : 0) == l_183176))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_183100 = nimCopy(null, nsuJoinSep(string_seq_183113[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183100;

}

function HEX24_182503(node_182505) {
	var result_191760 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 428;
		result_191760 = nimCopy(null, makeNimstrLit("And"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191760;

}

function HEX24_182314(node_182316) {
	var result_183297 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 343;
		var string_seq_183310 = [nimCopy(null, [makeNimstrLit("FunctionDef")], NTI182673)];
		if ((node_182316.name == null)) {
		F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(node_182316.name), 1));
		}
		
		if ((node_182316.args == null)) {
		F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 344;
		add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(node_182316.args), 1));
		}
		
		F.line = 345;
		if (string_seq_183310[0] != null) { string_seq_183310[0].push(makeNimstrLit("   body")); } else { string_seq_183310[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_183403 = null;
			F.line = 3909;
			var colontmp__183691 = null;
			F.line = 345;
			colontmp__183691 = node_182316.body;
			F.line = 3911;
			var i_183694 = 0;
			F.line = 3912;
			var l_183696 = (colontmp__183691 != null ? colontmp__183691.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_183694 < l_183696)) break L3;
						F.line = 3914;
						child_183403 = colontmp__183691[chckIndx(i_183694, 0, colontmp__183691.length+0-1)-0];
						if ((child_183403 == null)) {
						F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(child_183403), 2));
						}
						
						F.line = 3915;
						i_183694 = addInt(i_183694, 1);
						if (!(((colontmp__183691 != null ? colontmp__183691.length : 0) == l_183696))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 345;
		if (string_seq_183310[0] != null) { string_seq_183310[0].push(makeNimstrLit("   decorator_list")); } else { string_seq_183310[0] = [makeNimstrLit("   decorator_list")]; };
		L4: do {
			F.line = 215;
			var child_183615 = null;
			F.line = 3909;
			var colontmp__183698 = null;
			F.line = 345;
			colontmp__183698 = node_182316.decorator_list;
			F.line = 3911;
			var i_183701 = 0;
			F.line = 3912;
			var l_183703 = (colontmp__183698 != null ? colontmp__183698.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_183701 < l_183703)) break L6;
						F.line = 3914;
						child_183615 = colontmp__183698[chckIndx(i_183701, 0, colontmp__183698.length+0-1)-0];
						if ((child_183615 == null)) {
						F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 345;
						add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(child_183615), 2));
						}
						
						F.line = 3915;
						i_183701 = addInt(i_183701, 1);
						if (!(((colontmp__183698 != null ? colontmp__183698.length : 0) == l_183703))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182316.returns == null)) {
		F.line = 345;
		add_182829(string_seq_183310, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 345;
		add_182829(string_seq_183310, 0, indent_177636(HEX24_177554(node_182316.returns), 1));
		}
		
		F.line = 476;
		result_183297 = nimCopy(null, nsuJoinSep(string_seq_183310[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183297;

}

function HEX24_182521(node_182523) {
	var result_191862 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191862 = nimCopy(null, makeNimstrLit("MatMult"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191862;

}

function HEX24_182320(node_182322) {
	var result_183987 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 352;
		var string_seq_184000 = [nimCopy(null, [makeNimstrLit("ClassDef")], NTI182673)];
		if ((node_182322.name == null)) {
		F.line = 352;
		add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 352;
		add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(node_182322.name), 1));
		}
		
		F.line = 352;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   bases")); } else { string_seq_184000[0] = [makeNimstrLit("   bases")]; };
		L1: do {
			F.line = 215;
			var child_184056 = null;
			F.line = 3909;
			var colontmp__184366 = null;
			F.line = 352;
			colontmp__184366 = node_182322.bases;
			F.line = 3911;
			var i_184369 = 0;
			F.line = 3912;
			var l_184371 = (colontmp__184366 != null ? colontmp__184366.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_184369 < l_184371)) break L3;
						F.line = 3914;
						child_184056 = colontmp__184366[chckIndx(i_184369, 0, colontmp__184366.length+0-1)-0];
						if ((child_184056 == null)) {
						F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184056), 2));
						}
						
						F.line = 3915;
						i_184369 = addInt(i_184369, 1);
						if (!(((colontmp__184366 != null ? colontmp__184366.length : 0) == l_184371))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 352;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   keywords")); } else { string_seq_184000[0] = [makeNimstrLit("   keywords")]; };
		L4: do {
			F.line = 215;
			var child_184215 = null;
			F.line = 3909;
			var colontmp__184373 = null;
			F.line = 352;
			colontmp__184373 = node_182322.keywords;
			F.line = 3911;
			var i_184376 = 0;
			F.line = 3912;
			var l_184378 = (colontmp__184373 != null ? colontmp__184373.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_184376 < l_184378)) break L6;
						F.line = 3914;
						child_184215 = colontmp__184373[chckIndx(i_184376, 0, colontmp__184373.length+0-1)-0];
						if ((child_184215 == null)) {
						F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 352;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184215), 2));
						}
						
						F.line = 3915;
						i_184376 = addInt(i_184376, 1);
						if (!(((colontmp__184373 != null ? colontmp__184373.length : 0) == l_184378))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 353;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   body")); } else { string_seq_184000[0] = [makeNimstrLit("   body")]; };
		L7: do {
			F.line = 215;
			var child_184271 = null;
			F.line = 3909;
			var colontmp__184380 = null;
			F.line = 353;
			colontmp__184380 = node_182322.body;
			F.line = 3911;
			var i_184383 = 0;
			F.line = 3912;
			var l_184385 = (colontmp__184380 != null ? colontmp__184380.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_184383 < l_184385)) break L9;
						F.line = 3914;
						child_184271 = colontmp__184380[chckIndx(i_184383, 0, colontmp__184380.length+0-1)-0];
						if ((child_184271 == null)) {
						F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184271), 2));
						}
						
						F.line = 3915;
						i_184383 = addInt(i_184383, 1);
						if (!(((colontmp__184380 != null ? colontmp__184380.length : 0) == l_184385))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 353;
		if (string_seq_184000[0] != null) { string_seq_184000[0].push(makeNimstrLit("   decorator_list")); } else { string_seq_184000[0] = [makeNimstrLit("   decorator_list")]; };
		L10: do {
			F.line = 215;
			var child_184327 = null;
			F.line = 3909;
			var colontmp__184387 = null;
			F.line = 353;
			colontmp__184387 = node_182322.decorator_list;
			F.line = 3911;
			var i_184390 = 0;
			F.line = 3912;
			var l_184392 = (colontmp__184387 != null ? colontmp__184387.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_184390 < l_184392)) break L12;
						F.line = 3914;
						child_184327 = colontmp__184387[chckIndx(i_184390, 0, colontmp__184387.length+0-1)-0];
						if ((child_184327 == null)) {
						F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 353;
						add_182829(string_seq_184000, 0, indent_177636(HEX24_177554(child_184327), 2));
						}
						
						F.line = 3915;
						i_184390 = addInt(i_184390, 1);
						if (!(((colontmp__184387 != null ? colontmp__184387.length : 0) == l_184392))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_183987 = nimCopy(null, nsuJoinSep(string_seq_184000[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183987;

}

function HEX24_182536(node_182538) {
	var result_191947 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191947 = nimCopy(null, makeNimstrLit("RShift"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191947;

}

function HEX24_182455(node_182457) {
	var result_190715 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 414;
		var string_seq_190728 = [nimCopy(null, [makeNimstrLit("Starred")], NTI182673)];
		if ((node_182457.value == null)) {
		F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(HEX24_177554(node_182457.value), 1));
		}
		
		if ((node_182457.ctx == null)) {
		F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 414;
		add_182829(string_seq_190728, 0, indent_177636(HEX24_177554(node_182457.ctx), 1));
		}
		
		F.line = 476;
		result_190715 = nimCopy(null, nsuJoinSep(string_seq_190728[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190715;

}

function HEX24_182515(node_182517) {
	var result_191828 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191828 = nimCopy(null, makeNimstrLit("Sub"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191828;

}

function HEX24_182434(node_182436) {
	var result_189504 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 405;
		var string_seq_189517 = [nimCopy(null, [makeNimstrLit("Compare")], NTI182673)];
		if ((node_182436.left == null)) {
		F.line = 405;
		add_182829(string_seq_189517, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 405;
		add_182829(string_seq_189517, 0, indent_177636(HEX24_177554(node_182436.left), 1));
		}
		
		F.line = 405;
		if (string_seq_189517[0] != null) { string_seq_189517[0].push(makeNimstrLit("   ops")); } else { string_seq_189517[0] = [makeNimstrLit("   ops")]; };
		L1: do {
			F.line = 215;
			var child_189815 = null;
			F.line = 3909;
			var colontmp__189910 = null;
			F.line = 405;
			colontmp__189910 = node_182436.ops;
			F.line = 3911;
			var i_189913 = 0;
			F.line = 3912;
			var l_189915 = (colontmp__189910 != null ? colontmp__189910.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_189913 < l_189915)) break L3;
						F.line = 3914;
						child_189815 = colontmp__189910[chckIndx(i_189913, 0, colontmp__189910.length+0-1)-0];
						if ((child_189815 == null)) {
						F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(HEX24_177554(child_189815), 2));
						}
						
						F.line = 3915;
						i_189913 = addInt(i_189913, 1);
						if (!(((colontmp__189910 != null ? colontmp__189910.length : 0) == l_189915))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 405;
		if (string_seq_189517[0] != null) { string_seq_189517[0].push(makeNimstrLit("   comparators")); } else { string_seq_189517[0] = [makeNimstrLit("   comparators")]; };
		L4: do {
			F.line = 215;
			var child_189871 = null;
			F.line = 3909;
			var colontmp__189917 = null;
			F.line = 405;
			colontmp__189917 = node_182436.comparators;
			F.line = 3911;
			var i_189920 = 0;
			F.line = 3912;
			var l_189922 = (colontmp__189917 != null ? colontmp__189917.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_189920 < l_189922)) break L6;
						F.line = 3914;
						child_189871 = colontmp__189917[chckIndx(i_189920, 0, colontmp__189917.length+0-1)-0];
						if ((child_189871 == null)) {
						F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 405;
						add_182829(string_seq_189517, 0, indent_177636(HEX24_177554(child_189871), 2));
						}
						
						F.line = 3915;
						i_189920 = addInt(i_189920, 1);
						if (!(((colontmp__189917 != null ? colontmp__189917.length : 0) == l_189922))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189504 = nimCopy(null, nsuJoinSep(string_seq_189517[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189504;

}

function HEX24_182428(node_182430) {
	var result_189370 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 401;
		var string_seq_189383 = [nimCopy(null, [makeNimstrLit("Yield")], NTI182673)];
		if ((node_182430.value == null)) {
		F.line = 401;
		add_182829(string_seq_189383, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 401;
		add_182829(string_seq_189383, 0, indent_177636(HEX24_177554(node_182430.value), 1));
		}
		
		F.line = 476;
		result_189370 = nimCopy(null, nsuJoinSep(string_seq_189383[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189370;

}

function HEX24_182449(node_182451) {
	var result_190433 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 412;
		var string_seq_190446 = [nimCopy(null, [makeNimstrLit("Attribute")], NTI182673)];
		if ((node_182451.value == null)) {
		F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(HEX24_177554(node_182451.value), 1));
		}
		
		if ((node_182451.attr == null)) {
		F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(HEX24_177554(node_182451.attr), 1));
		}
		
		if ((node_182451.ctx == null)) {
		F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 412;
		add_182829(string_seq_190446, 0, indent_177636(HEX24_177554(node_182451.ctx), 1));
		}
		
		F.line = 476;
		result_190433 = nimCopy(null, nsuJoinSep(string_seq_190446[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190433;

}

function HEX24_182404(node_182406) {
	var result_188270 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 392;
		var string_seq_188283 = [nimCopy(null, [makeNimstrLit("IfExp")], NTI182673)];
		if ((node_182406.test == null)) {
		F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(HEX24_177554(node_182406.test), 1));
		}
		
		if ((node_182406.body == null)) {
		F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(HEX24_177554(node_182406.body), 1));
		}
		
		if ((node_182406.orelse == null)) {
		F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 392;
		add_182829(string_seq_188283, 0, indent_177636(HEX24_177554(node_182406.orelse), 1));
		}
		
		F.line = 476;
		result_188270 = nimCopy(null, nsuJoinSep(string_seq_188283[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188270;

}

function HEX24_182479(node_182481) {
	var result_191251 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191251 = nimCopy(null, makeNimstrLit("AugLoad"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191251;

}

function HEX24_182518(node_182520) {
	var result_191845 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191845 = nimCopy(null, makeNimstrLit("Mult"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191845;

}

function HEX24_182461(node_182463) {
	var result_190923 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 416;
		var string_seq_190936 = [nimCopy(null, [makeNimstrLit("List")], NTI182673)];
		F.line = 416;
		if (string_seq_190936[0] != null) { string_seq_190936[0].push(makeNimstrLit("   elts")); } else { string_seq_190936[0] = [makeNimstrLit("   elts")]; };
		L1: do {
			F.line = 215;
			var child_190955 = null;
			F.line = 3909;
			var colontmp__191031 = null;
			F.line = 416;
			colontmp__191031 = node_182463.elts;
			F.line = 3911;
			var i_191034 = 0;
			F.line = 3912;
			var l_191036 = (colontmp__191031 != null ? colontmp__191031.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_191034 < l_191036)) break L3;
						F.line = 3914;
						child_190955 = colontmp__191031[chckIndx(i_191034, 0, colontmp__191031.length+0-1)-0];
						if ((child_190955 == null)) {
						F.line = 416;
						add_182829(string_seq_190936, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 416;
						add_182829(string_seq_190936, 0, indent_177636(HEX24_177554(child_190955), 2));
						}
						
						F.line = 3915;
						i_191034 = addInt(i_191034, 1);
						if (!(((colontmp__191031 != null ? colontmp__191031.length : 0) == l_191036))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182463.ctx == null)) {
		F.line = 416;
		add_182829(string_seq_190936, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 416;
		add_182829(string_seq_190936, 0, indent_177636(HEX24_177554(node_182463.ctx), 1));
		}
		
		F.line = 476;
		result_190923 = nimCopy(null, nsuJoinSep(string_seq_190936[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190923;

}

function HEX24_182458(node_182460) {
	var result_190819 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 415;
		var string_seq_190832 = [nimCopy(null, [makeNimstrLit("Name")], NTI182673)];
		if ((node_182460.id == null)) {
		F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(HEX24_177554(node_182460.id), 1));
		}
		
		if ((node_182460.ctx == null)) {
		F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 415;
		add_182829(string_seq_190832, 0, indent_177636(HEX24_177554(node_182460.ctx), 1));
		}
		
		F.line = 476;
		result_190819 = nimCopy(null, nsuJoinSep(string_seq_190832[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190819;

}

function HEX24_182533(node_182535) {
	var result_191930 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191930 = nimCopy(null, makeNimstrLit("LShift"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191930;

}

function HEX24_182431(node_182433) {
	var result_189437 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 402;
		var string_seq_189450 = [nimCopy(null, [makeNimstrLit("YieldFrom")], NTI182673)];
		if ((node_182433.value == null)) {
		F.line = 402;
		add_182829(string_seq_189450, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 402;
		add_182829(string_seq_189450, 0, indent_177636(HEX24_177554(node_182433.value), 1));
		}
		
		F.line = 476;
		result_189437 = nimCopy(null, nsuJoinSep(string_seq_189450[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189437;

}

function HEX24_182614(node_182616) {
	var result_192813 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 442;
		var string_seq_192826 = [nimCopy(null, [makeNimstrLit("Arguments")], NTI182673)];
		F.line = 442;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   args")); } else { string_seq_192826[0] = [makeNimstrLit("   args")]; };
		L1: do {
			F.line = 215;
			var child_193015 = null;
			F.line = 3909;
			var colontmp__193296 = null;
			F.line = 442;
			colontmp__193296 = node_182616.args;
			F.line = 3911;
			var i_193299 = 0;
			F.line = 3912;
			var l_193301 = (colontmp__193296 != null ? colontmp__193296.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_193299 < l_193301)) break L3;
						F.line = 3914;
						child_193015 = colontmp__193296[chckIndx(i_193299, 0, colontmp__193296.length+0-1)-0];
						if ((child_193015 == null)) {
						F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193015), 2));
						}
						
						F.line = 3915;
						i_193299 = addInt(i_193299, 1);
						if (!(((colontmp__193296 != null ? colontmp__193296.length : 0) == l_193301))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182616.vararg == null)) {
		F.line = 442;
		add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 442;
		add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(node_182616.vararg), 1));
		}
		
		F.line = 442;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   kwonlyargs")); } else { string_seq_192826[0] = [makeNimstrLit("   kwonlyargs")]; };
		L4: do {
			F.line = 215;
			var child_193108 = null;
			F.line = 3909;
			var colontmp__193303 = null;
			F.line = 442;
			colontmp__193303 = node_182616.kwonlyargs;
			F.line = 3911;
			var i_193306 = 0;
			F.line = 3912;
			var l_193308 = (colontmp__193303 != null ? colontmp__193303.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_193306 < l_193308)) break L6;
						F.line = 3914;
						child_193108 = colontmp__193303[chckIndx(i_193306, 0, colontmp__193303.length+0-1)-0];
						if ((child_193108 == null)) {
						F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 442;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193108), 2));
						}
						
						F.line = 3915;
						i_193306 = addInt(i_193306, 1);
						if (!(((colontmp__193303 != null ? colontmp__193303.length : 0) == l_193308))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 443;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   kw_defaults")); } else { string_seq_192826[0] = [makeNimstrLit("   kw_defaults")]; };
		L7: do {
			F.line = 215;
			var child_193164 = null;
			F.line = 3909;
			var colontmp__193310 = null;
			F.line = 443;
			colontmp__193310 = node_182616.kw_defaults;
			F.line = 3911;
			var i_193313 = 0;
			F.line = 3912;
			var l_193315 = (colontmp__193310 != null ? colontmp__193310.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_193313 < l_193315)) break L9;
						F.line = 3914;
						child_193164 = colontmp__193310[chckIndx(i_193313, 0, colontmp__193310.length+0-1)-0];
						if ((child_193164 == null)) {
						F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193164), 2));
						}
						
						F.line = 3915;
						i_193313 = addInt(i_193313, 1);
						if (!(((colontmp__193310 != null ? colontmp__193310.length : 0) == l_193315))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182616.kwarg == null)) {
		F.line = 443;
		add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 443;
		add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(node_182616.kwarg), 1));
		}
		
		F.line = 443;
		if (string_seq_192826[0] != null) { string_seq_192826[0].push(makeNimstrLit("   defaults")); } else { string_seq_192826[0] = [makeNimstrLit("   defaults")]; };
		L10: do {
			F.line = 215;
			var child_193257 = null;
			F.line = 3909;
			var colontmp__193317 = null;
			F.line = 443;
			colontmp__193317 = node_182616.defaults;
			F.line = 3911;
			var i_193320 = 0;
			F.line = 3912;
			var l_193322 = (colontmp__193317 != null ? colontmp__193317.length : 0);
			L11: do {
				F.line = 3913;
					L12: while (true) {
					if (!(i_193320 < l_193322)) break L12;
						F.line = 3914;
						child_193257 = colontmp__193317[chckIndx(i_193320, 0, colontmp__193317.length+0-1)-0];
						if ((child_193257 == null)) {
						F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 443;
						add_182829(string_seq_192826, 0, indent_177636(HEX24_177554(child_193257), 2));
						}
						
						F.line = 3915;
						i_193320 = addInt(i_193320, 1);
						if (!(((colontmp__193317 != null ? colontmp__193317.length : 0) == l_193322))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_192813 = nimCopy(null, nsuJoinSep(string_seq_192826[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192813;

}

function HEX24_182464(node_182466) {
	var result_191053 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 417;
		var string_seq_191066 = [nimCopy(null, [makeNimstrLit("Tuple")], NTI182673)];
		F.line = 417;
		if (string_seq_191066[0] != null) { string_seq_191066[0].push(makeNimstrLit("   elts")); } else { string_seq_191066[0] = [makeNimstrLit("   elts")]; };
		L1: do {
			F.line = 215;
			var child_191085 = null;
			F.line = 3909;
			var colontmp__191161 = null;
			F.line = 417;
			colontmp__191161 = node_182466.elts;
			F.line = 3911;
			var i_191164 = 0;
			F.line = 3912;
			var l_191166 = (colontmp__191161 != null ? colontmp__191161.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_191164 < l_191166)) break L3;
						F.line = 3914;
						child_191085 = colontmp__191161[chckIndx(i_191164, 0, colontmp__191161.length+0-1)-0];
						if ((child_191085 == null)) {
						F.line = 417;
						add_182829(string_seq_191066, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 417;
						add_182829(string_seq_191066, 0, indent_177636(HEX24_177554(child_191085), 2));
						}
						
						F.line = 3915;
						i_191164 = addInt(i_191164, 1);
						if (!(((colontmp__191161 != null ? colontmp__191161.length : 0) == l_191166))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182466.ctx == null)) {
		F.line = 417;
		add_182829(string_seq_191066, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 417;
		add_182829(string_seq_191066, 0, indent_177636(HEX24_177554(node_182466.ctx), 1));
		}
		
		F.line = 476;
		result_191053 = nimCopy(null, nsuJoinSep(string_seq_191066[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191053;

}

function HEX24_182485(node_182487) {
	var result_191285 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191285 = nimCopy(null, makeNimstrLit("Param"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191285;

}

function HEX24_182305(node_182307) {
	var result_183033 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 336;
		var string_seq_183046 = [nimCopy(null, [makeNimstrLit("Expression")], NTI182673)];
		if ((node_182307.body == null)) {
		F.line = 336;
		add_182829(string_seq_183046, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 336;
		add_182829(string_seq_183046, 0, indent_177636(HEX24_177554(node_182307.body), 1));
		}
		
		F.line = 476;
		result_183033 = nimCopy(null, nsuJoinSep(string_seq_183046[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183033;

}

function HEX24_182476(node_182478) {
	var result_191234 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191234 = nimCopy(null, makeNimstrLit("Del"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191234;

}

function HEX24_182539(node_182541) {
	var result_191964 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191964 = nimCopy(null, makeNimstrLit("BitOr"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191964;

}

function HEX24_182482(node_182484) {
	var result_191268 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191268 = nimCopy(null, makeNimstrLit("AugStore"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191268;

}

function HEX24_182437(node_182439) {
	var result_189939 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 406;
		var string_seq_189952 = [nimCopy(null, [makeNimstrLit("Call")], NTI182673)];
		if ((node_182439.fun == null)) {
		F.line = 406;
		add_182829(string_seq_189952, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 406;
		add_182829(string_seq_189952, 0, indent_177636(HEX24_177554(node_182439.fun), 1));
		}
		
		F.line = 406;
		if (string_seq_189952[0] != null) { string_seq_189952[0].push(makeNimstrLit("   args")); } else { string_seq_189952[0] = [makeNimstrLit("   args")]; };
		L1: do {
			F.line = 215;
			var child_190008 = null;
			F.line = 3909;
			var colontmp__190103 = null;
			F.line = 406;
			colontmp__190103 = node_182439.args;
			F.line = 3911;
			var i_190106 = 0;
			F.line = 3912;
			var l_190108 = (colontmp__190103 != null ? colontmp__190103.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_190106 < l_190108)) break L3;
						F.line = 3914;
						child_190008 = colontmp__190103[chckIndx(i_190106, 0, colontmp__190103.length+0-1)-0];
						if ((child_190008 == null)) {
						F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(HEX24_177554(child_190008), 2));
						}
						
						F.line = 3915;
						i_190106 = addInt(i_190106, 1);
						if (!(((colontmp__190103 != null ? colontmp__190103.length : 0) == l_190108))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 406;
		if (string_seq_189952[0] != null) { string_seq_189952[0].push(makeNimstrLit("   keywords")); } else { string_seq_189952[0] = [makeNimstrLit("   keywords")]; };
		L4: do {
			F.line = 215;
			var child_190064 = null;
			F.line = 3909;
			var colontmp__190110 = null;
			F.line = 406;
			colontmp__190110 = node_182439.keywords;
			F.line = 3911;
			var i_190113 = 0;
			F.line = 3912;
			var l_190115 = (colontmp__190110 != null ? colontmp__190110.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_190113 < l_190115)) break L6;
						F.line = 3914;
						child_190064 = colontmp__190110[chckIndx(i_190113, 0, colontmp__190110.length+0-1)-0];
						if ((child_190064 == null)) {
						F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 406;
						add_182829(string_seq_189952, 0, indent_177636(HEX24_177554(child_190064), 2));
						}
						
						F.line = 3915;
						i_190113 = addInt(i_190113, 1);
						if (!(((colontmp__190110 != null ? colontmp__190110.length : 0) == l_190115))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189939 = nimCopy(null, nsuJoinSep(string_seq_189952[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189939;

}

function HEX24_182410(node_182412) {
	var result_188567 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 394;
		var string_seq_188580 = [nimCopy(null, [makeNimstrLit("Set")], NTI182673)];
		F.line = 394;
		if (string_seq_188580[0] != null) { string_seq_188580[0].push(makeNimstrLit("   elts")); } else { string_seq_188580[0] = [makeNimstrLit("   elts")]; };
		L1: do {
			F.line = 215;
			var child_188599 = null;
			F.line = 3909;
			var colontmp__188638 = null;
			F.line = 394;
			colontmp__188638 = node_182412.elts;
			F.line = 3911;
			var i_188641 = 0;
			F.line = 3912;
			var l_188643 = (colontmp__188638 != null ? colontmp__188638.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_188641 < l_188643)) break L3;
						F.line = 3914;
						child_188599 = colontmp__188638[chckIndx(i_188641, 0, colontmp__188638.length+0-1)-0];
						if ((child_188599 == null)) {
						F.line = 394;
						add_182829(string_seq_188580, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 394;
						add_182829(string_seq_188580, 0, indent_177636(HEX24_177554(child_188599), 2));
						}
						
						F.line = 3915;
						i_188641 = addInt(i_188641, 1);
						if (!(((colontmp__188638 != null ? colontmp__188638.length : 0) == l_188643))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_188567 = nimCopy(null, nsuJoinSep(string_seq_188580[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_188567;

}

function HEX24_182632(node_182634) {
	var result_193685 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 451;
		var string_seq_193698 = [nimCopy(null, [makeNimstrLit("Alias")], NTI182673)];
		if ((node_182634.name == null)) {
		F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(HEX24_177554(node_182634.name), 1));
		}
		
		if ((node_182634.asname == null)) {
		F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 451;
		add_182829(string_seq_193698, 0, indent_177636(HEX24_177554(node_182634.asname), 1));
		}
		
		F.line = 476;
		result_193685 = nimCopy(null, nsuJoinSep(string_seq_193698[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193685;

}

function HEX24_182422(node_182424) {
	var result_189173 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 398;
		var string_seq_189186 = [nimCopy(null, [makeNimstrLit("GeneratorExp")], NTI182673)];
		if ((node_182424.elt == null)) {
		F.line = 398;
		add_182829(string_seq_189186, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 398;
		add_182829(string_seq_189186, 0, indent_177636(HEX24_177554(node_182424.elt), 1));
		}
		
		F.line = 398;
		if (string_seq_189186[0] != null) { string_seq_189186[0].push(makeNimstrLit("   generators")); } else { string_seq_189186[0] = [makeNimstrLit("   generators")]; };
		L1: do {
			F.line = 215;
			var child_189242 = null;
			F.line = 3909;
			var colontmp__189281 = null;
			F.line = 398;
			colontmp__189281 = node_182424.generators;
			F.line = 3911;
			var i_189284 = 0;
			F.line = 3912;
			var l_189286 = (colontmp__189281 != null ? colontmp__189281.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_189284 < l_189286)) break L3;
						F.line = 3914;
						child_189242 = colontmp__189281[chckIndx(i_189284, 0, colontmp__189281.length+0-1)-0];
						if ((child_189242 == null)) {
						F.line = 398;
						add_182829(string_seq_189186, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 398;
						add_182829(string_seq_189186, 0, indent_177636(HEX24_177554(child_189242), 2));
						}
						
						F.line = 3915;
						i_189284 = addInt(i_189284, 1);
						if (!(((colontmp__189281 != null ? colontmp__189281.length : 0) == l_189286))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_189173 = nimCopy(null, nsuJoinSep(string_seq_189186[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189173;

}

function HEX24_182443(node_182445) {
	var result_190273 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 408;
		var string_seq_190286 = [nimCopy(null, [makeNimstrLit("JoinedStr")], NTI182673)];
		F.line = 408;
		if (string_seq_190286[0] != null) { string_seq_190286[0].push(makeNimstrLit("   values")); } else { string_seq_190286[0] = [makeNimstrLit("   values")]; };
		L1: do {
			F.line = 215;
			var child_190305 = null;
			F.line = 3909;
			var colontmp__190344 = null;
			F.line = 408;
			colontmp__190344 = node_182445.values;
			F.line = 3911;
			var i_190347 = 0;
			F.line = 3912;
			var l_190349 = (colontmp__190344 != null ? colontmp__190344.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_190347 < l_190349)) break L3;
						F.line = 3914;
						child_190305 = colontmp__190344[chckIndx(i_190347, 0, colontmp__190344.length+0-1)-0];
						if ((child_190305 == null)) {
						F.line = 408;
						add_182829(string_seq_190286, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 408;
						add_182829(string_seq_190286, 0, indent_177636(HEX24_177554(child_190305), 2));
						}
						
						F.line = 3915;
						i_190347 = addInt(i_190347, 1);
						if (!(((colontmp__190344 != null ? colontmp__190344.length : 0) == l_190349))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_190273 = nimCopy(null, nsuJoinSep(string_seq_190286[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190273;

}

function HEX24_182557(node_182559) {
	var result_192066 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192066 = nimCopy(null, makeNimstrLit("Not"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192066;

}

function HEX24_182578(node_182580) {
	var result_192185 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192185 = nimCopy(null, makeNimstrLit("LtE"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192185;

}

function HEX24_182440(node_182442) {
	var result_190132 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 407;
		var string_seq_190145 = [nimCopy(null, [makeNimstrLit("FormattedValue")], NTI182673)];
		if ((node_182442.value == null)) {
		F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(HEX24_177554(node_182442.value), 1));
		}
		
		if ((node_182442.conversion == null)) {
		F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(HEX24_177554(node_182442.conversion), 1));
		}
		
		if ((node_182442.format_spec == null)) {
		F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 407;
		add_182829(string_seq_190145, 0, indent_177636(HEX24_177554(node_182442.format_spec), 1));
		}
		
		F.line = 476;
		result_190132 = nimCopy(null, nsuJoinSep(string_seq_190145[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190132;

}

function HEX24_182527(node_182529) {
	var result_191896 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191896 = nimCopy(null, makeNimstrLit("Mod"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191896;

}

function HEX24_182596(node_182598) {
	var result_192287 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192287 = nimCopy(null, makeNimstrLit("NotIn"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192287;

}

function HEX24_182590(node_182592) {
	var result_192253 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192253 = nimCopy(null, makeNimstrLit("IsNot"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192253;

}

function HEX24_182581(node_182583) {
	var result_192202 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192202 = nimCopy(null, makeNimstrLit("Gt"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192202;

}

function HEX24_182446(node_182448) {
	var result_190366 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 409;
		var string_seq_190379 = [nimCopy(null, [makeNimstrLit("Constant")], NTI182673)];
		if ((node_182448.value == null)) {
		F.line = 409;
		add_182829(string_seq_190379, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 409;
		add_182829(string_seq_190379, 0, indent_177636(HEX24_177554(node_182448.value), 1));
		}
		
		F.line = 476;
		result_190366 = nimCopy(null, nsuJoinSep(string_seq_190379[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190366;

}

function HEX24_182575(node_182577) {
	var result_192168 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192168 = nimCopy(null, makeNimstrLit("Lt"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192168;

}

function HEX24_182554(node_182556) {
	var result_192049 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192049 = nimCopy(null, makeNimstrLit("Invert"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192049;

}

function HEX24_182620(node_182622) {
	var result_193443 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 445;
		var string_seq_193456 = [nimCopy(null, [makeNimstrLit("Arg")], NTI182673)];
		if ((node_182622.arg == null)) {
		F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(HEX24_177554(node_182622.arg), 1));
		}
		
		if ((node_182622.annotation == null)) {
		F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193456, 0, indent_177636(HEX24_177554(node_182622.annotation), 1));
		}
		
		F.line = 476;
		result_193443 = nimCopy(null, nsuJoinSep(string_seq_193456[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193443;

}

function HEX24_182602(node_182604) {
	var result_192321 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 437;
		var string_seq_192334 = [nimCopy(null, [makeNimstrLit("Comprehension")], NTI182673)];
		if ((node_182604.target == null)) {
		F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(node_182604.target), 1));
		}
		
		if ((node_182604.iter == null)) {
		F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(node_182604.iter), 1));
		}
		
		F.line = 437;
		if (string_seq_192334[0] != null) { string_seq_192334[0].push(makeNimstrLit("   ifs")); } else { string_seq_192334[0] = [makeNimstrLit("   ifs")]; };
		L1: do {
			F.line = 215;
			var child_192427 = null;
			F.line = 3909;
			var colontmp__192503 = null;
			F.line = 437;
			colontmp__192503 = node_182604.ifs;
			F.line = 3911;
			var i_192506 = 0;
			F.line = 3912;
			var l_192508 = (colontmp__192503 != null ? colontmp__192503.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_192506 < l_192508)) break L3;
						F.line = 3914;
						child_192427 = colontmp__192503[chckIndx(i_192506, 0, colontmp__192503.length+0-1)-0];
						if ((child_192427 == null)) {
						F.line = 437;
						add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 437;
						add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(child_192427), 2));
						}
						
						F.line = 3915;
						i_192506 = addInt(i_192506, 1);
						if (!(((colontmp__192503 != null ? colontmp__192503.length : 0) == l_192508))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((node_182604.is_async == null)) {
		F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 437;
		add_182829(string_seq_192334, 0, indent_177636(HEX24_177554(node_182604.is_async), 1));
		}
		
		F.line = 476;
		result_192321 = nimCopy(null, nsuJoinSep(string_seq_192334[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192321;

}

function HEX24_182593(node_182595) {
	var result_192270 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192270 = nimCopy(null, makeNimstrLit("In"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192270;

}

function HEX24_182626(node_182628) {
	var result_193564 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 448;
		var string_seq_193577 = [nimCopy(null, [makeNimstrLit("Keyword")], NTI182673)];
		if ((node_182628.arg == null)) {
		F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(HEX24_177554(node_182628.arg), 1));
		}
		
		if ((node_182628.value == null)) {
		F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 448;
		add_182829(string_seq_193577, 0, indent_177636(HEX24_177554(node_182628.value), 1));
		}
		
		F.line = 476;
		result_193564 = nimCopy(null, nsuJoinSep(string_seq_193577[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193564;

}

function HEX24_182524(node_182526) {
	var result_191879 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191879 = nimCopy(null, makeNimstrLit("Div"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191879;

}

function HEX24_182638(node_182640) {
	var result_193806 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 453;
		var string_seq_193819 = [nimCopy(null, [makeNimstrLit("Withitem")], NTI182673)];
		if ((node_182640.context_expr == null)) {
		F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(HEX24_177554(node_182640.context_expr), 1));
		}
		
		if ((node_182640.optional_vars == null)) {
		F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 453;
		add_182829(string_seq_193819, 0, indent_177636(HEX24_177554(node_182640.optional_vars), 1));
		}
		
		F.line = 476;
		result_193806 = nimCopy(null, nsuJoinSep(string_seq_193819[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193806;

}

function HEX24_182635(node_182637) {
	var result_193789 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 453;
		result_193789 = nimCopy(null, makeNimstrLit("withitem"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193789;

}

function HEX24_182548(node_182550) {
	var result_192015 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_192015 = nimCopy(null, makeNimstrLit("FloorDiv"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192015;

}

function HEX24_182452(node_182454) {
	var result_190574 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 413;
		var string_seq_190587 = [nimCopy(null, [makeNimstrLit("Subscript")], NTI182673)];
		if ((node_182454.value == null)) {
		F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(HEX24_177554(node_182454.value), 1));
		}
		
		if ((node_182454.slice == null)) {
		F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(HEX24_177554(node_182454.slice), 1));
		}
		
		if ((node_182454.ctx == null)) {
		F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 413;
		add_182829(string_seq_190587, 0, indent_177636(HEX24_177554(node_182454.ctx), 1));
		}
		
		F.line = 476;
		result_190574 = nimCopy(null, nsuJoinSep(string_seq_190587[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_190574;

}

function HEX24_182623(node_182625) {
	var result_193547 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 448;
		result_193547 = nimCopy(null, makeNimstrLit("keyword"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193547;

}

function HEX24_182425(node_182427) {
	var result_189303 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 400;
		var string_seq_189316 = [nimCopy(null, [makeNimstrLit("Await")], NTI182673)];
		if ((node_182427.value == null)) {
		F.line = 400;
		add_182829(string_seq_189316, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 400;
		add_182829(string_seq_189316, 0, indent_177636(HEX24_177554(node_182427.value), 1));
		}
		
		F.line = 476;
		result_189303 = nimCopy(null, nsuJoinSep(string_seq_189316[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_189303;

}

function HEX24_182584(node_182586) {
	var result_192219 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192219 = nimCopy(null, makeNimstrLit("GtE"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192219;

}

function HEX24_182563(node_182565) {
	var result_192100 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192100 = nimCopy(null, makeNimstrLit("USub"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192100;

}

function HEX24_182569(node_182571) {
	var result_192134 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192134 = nimCopy(null, makeNimstrLit("Eq"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192134;

}

function HEX24_182608(node_182610) {
	var result_192629 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 440;
		var string_seq_192642 = [nimCopy(null, [makeNimstrLit("ExceptHandler")], NTI182673)];
		if ((node_182610.type == null)) {
		F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(HEX24_177554(node_182610.type), 1));
		}
		
		if ((node_182610.name == null)) {
		F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 440;
		add_182829(string_seq_192642, 0, indent_177636(HEX24_177554(node_182610.name), 1));
		}
		
		F.line = 440;
		if (string_seq_192642[0] != null) { string_seq_192642[0].push(makeNimstrLit("   body")); } else { string_seq_192642[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_192735 = null;
			F.line = 3909;
			var colontmp__192774 = null;
			F.line = 440;
			colontmp__192774 = node_182610.body;
			F.line = 3911;
			var i_192777 = 0;
			F.line = 3912;
			var l_192779 = (colontmp__192774 != null ? colontmp__192774.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_192777 < l_192779)) break L3;
						F.line = 3914;
						child_192735 = colontmp__192774[chckIndx(i_192777, 0, colontmp__192774.length+0-1)-0];
						if ((child_192735 == null)) {
						F.line = 440;
						add_182829(string_seq_192642, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 440;
						add_182829(string_seq_192642, 0, indent_177636(HEX24_177554(child_192735), 2));
						}
						
						F.line = 3915;
						i_192777 = addInt(i_192777, 1);
						if (!(((colontmp__192774 != null ? colontmp__192774.length : 0) == l_192779))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_192629 = nimCopy(null, nsuJoinSep(string_seq_192642[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192629;

}

function HEX24_182560(node_182562) {
	var result_192083 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192083 = nimCopy(null, makeNimstrLit("UAdd"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192083;

}

function HEX24_182542(node_182544) {
	var result_191981 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191981 = nimCopy(null, makeNimstrLit("BitXor"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191981;

}

function HEX24_182587(node_182589) {
	var result_192236 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192236 = nimCopy(null, makeNimstrLit("Is"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192236;

}

function HEX24_182299(node_182301) {
	var result_182661 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 334;
		var string_seq_182674 = [nimCopy(null, [makeNimstrLit("Module")], NTI182673)];
		F.line = 334;
		if (string_seq_182674[0] != null) { string_seq_182674[0].push(makeNimstrLit("   body")); } else { string_seq_182674[0] = [makeNimstrLit("   body")]; };
		L1: do {
			F.line = 215;
			var child_182815 = null;
			F.line = 3909;
			var colontmp__182918 = null;
			F.line = 334;
			colontmp__182918 = node_182301.body;
			F.line = 3911;
			var i_182921 = 0;
			F.line = 3912;
			var l_182923 = (colontmp__182918 != null ? colontmp__182918.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_182921 < l_182923)) break L3;
						F.line = 3914;
						child_182815 = colontmp__182918[chckIndx(i_182921, 0, colontmp__182918.length+0-1)-0];
						if ((child_182815 == null)) {
						F.line = 334;
						add_182829(string_seq_182674, 0, indent_177636(makeNimstrLit("Nil Node"), 2));
						}
						else {
							F.line = 334;
						add_182829(string_seq_182674, 0, indent_177636(HEX24_177554(child_182815), 2));
						}
						
						F.line = 3915;
						i_182921 = addInt(i_182921, 1);
						if (!(((colontmp__182918 != null ? colontmp__182918.length : 0) == l_182923))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 476;
		result_182661 = nimCopy(null, nsuJoinSep(string_seq_182674[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_182661;

}

function HEX24_182572(node_182574) {
	var result_192151 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192151 = nimCopy(null, makeNimstrLit("NotEq"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192151;

}

function HEX24_177605(node_177607) {
	var result_177608 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 131;
		result_177608 = nimCopy(null, HEX24_157579(node_177607.value), NTI138);
	framePtr = F.prev;

	return result_177608;

}

function HEX24_182545(node_182547) {
	var result_191998 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 431;
		result_191998 = nimCopy(null, makeNimstrLit("BitAnd"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191998;

}

function HEX24_177588(node_177590) {
	var result_177591 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_177591 = nimCopy(null, HEX24_157579(node_177590.value), NTI138);
	framePtr = F.prev;

	return result_177591;

}

function HEX24_182530(node_182532) {
	var result_191913 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191913 = nimCopy(null, makeNimstrLit("Pow"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191913;

}

function HEX24_182488(node_182490) {
	var result_191302 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 422;
		result_191302 = nimCopy(null, makeNimstrLit("slice"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191302;

}

function HEX24_182296(node_182298) {
	var result_182644 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 333;
		result_182644 = nimCopy(null, makeNimstrLit("modl"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_182644;

}

function HEX24_177571(node_177573) {
	var result_177574 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 125;
		result_177574 = nimCopy(null, cstrToNimstr((node_177573.value)+""), NTI138);
	framePtr = F.prev;

	return result_177574;

}

function HEX24_182311(node_182313) {
	var result_183193 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 342;
		var string_seq_183206 = [nimCopy(null, [makeNimstrLit("stmt")], NTI182673)];
		if ((node_182313.lineno == null)) {
		F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(HEX24_177554(node_182313.lineno), 1));
		}
		
		if ((node_182313.col_offset == null)) {
		F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 342;
		add_182829(string_seq_183206, 0, indent_177636(HEX24_177554(node_182313.col_offset), 1));
		}
		
		F.line = 476;
		result_183193 = nimCopy(null, nsuJoinSep(string_seq_183206[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_183193;

}

function HEX24_182467(node_182469) {
	var result_191183 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 420;
		result_191183 = nimCopy(null, makeNimstrLit("expr_context"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191183;

}

function HEX24_182617(node_182619) {
	var result_193339 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 445;
		var string_seq_193352 = [nimCopy(null, [makeNimstrLit("arg")], NTI182673)];
		if ((node_182619.lineno == null)) {
		F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(HEX24_177554(node_182619.lineno), 1));
		}
		
		if ((node_182619.col_offset == null)) {
		F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 445;
		add_182829(string_seq_193352, 0, indent_177636(HEX24_177554(node_182619.col_offset), 1));
		}
		
		F.line = 476;
		result_193339 = nimCopy(null, nsuJoinSep(string_seq_193352[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193339;

}

function HEX24_182605(node_182607) {
	var result_192525 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 439;
		var string_seq_192538 = [nimCopy(null, [makeNimstrLit("excepthandler")], NTI182673)];
		if ((node_182607.lineno == null)) {
		F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(HEX24_177554(node_182607.lineno), 1));
		}
		
		if ((node_182607.col_offset == null)) {
		F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 439;
		add_182829(string_seq_192538, 0, indent_177636(HEX24_177554(node_182607.col_offset), 1));
		}
		
		F.line = 476;
		result_192525 = nimCopy(null, nsuJoinSep(string_seq_192538[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192525;

}

function HEX24_182599(node_182601) {
	var result_192304 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 437;
		result_192304 = nimCopy(null, makeNimstrLit("comprehension"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192304;

}

function HEX24_182611(node_182613) {
	var result_192796 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 442;
		result_192796 = nimCopy(null, makeNimstrLit("arguments"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192796;

}

function HEX24_182629(node_182631) {
	var result_193668 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 451;
		result_193668 = nimCopy(null, makeNimstrLit("alias"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_193668;

}

function HEX24_182500(node_182502) {
	var result_191743 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 428;
		result_191743 = nimCopy(null, makeNimstrLit("boolop"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191743;

}

function HEX24_182389(node_182391) {
	var result_187687 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 386;
		var string_seq_187700 = [nimCopy(null, [makeNimstrLit("expr")], NTI182673)];
		if ((node_182391.lineno == null)) {
		F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(HEX24_177554(node_182391.lineno), 1));
		}
		
		if ((node_182391.col_offset == null)) {
		F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(makeNimstrLit("Nil Node"), 1));
		}
		else {
			F.line = 386;
		add_182829(string_seq_187700, 0, indent_177636(HEX24_177554(node_182391.col_offset), 1));
		}
		
		F.line = 476;
		result_187687 = nimCopy(null, nsuJoinSep(string_seq_187700[0], makeNimstrLit("\x0A")), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_187687;

}

function HEX24_182566(node_182568) {
	var result_192117 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 435;
		result_192117 = nimCopy(null, makeNimstrLit("cmpop"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192117;

}

function HEX24_182509(node_182511) {
	var result_191794 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 430;
		result_191794 = nimCopy(null, makeNimstrLit("operator"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191794;

}

function HEX24_182551(node_182553) {
	var result_192032 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 433;
		result_192032 = nimCopy(null, makeNimstrLit("unaryop"), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_192032;

}

function HEX24_177549(node_177551) {
	var result_177552 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 122;
		result_177552 = nimCopy(null, makeNimstrLit("!!!DUMMY!!!"), NTI138);
	framePtr = F.prev;

	return result_177552;

}

function HEX24_177554(node_177551) {
	var result_177557 = null;

	var F={procname:"asdl.$",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(node_177551);
		if (isObj(node_177551.m_type, NTI179658)) {
		F.line = 119;
		result_177557 = HEX24_182365(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179732)) {
		F.line = 119;
		result_177557 = HEX24_182371(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179693)) {
		F.line = 119;
		result_177557 = HEX24_182368(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179802)) {
		F.line = 119;
		result_177557 = HEX24_182377(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179866)) {
		F.line = 119;
		result_177557 = HEX24_182383(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179835)) {
		F.line = 119;
		result_177557 = HEX24_182380(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179463)) {
		F.line = 119;
		result_177557 = HEX24_182350(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179767)) {
		F.line = 119;
		result_177557 = HEX24_182374(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179965)) {
		F.line = 119;
		result_177557 = HEX24_182395(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180037)) {
		F.line = 119;
		result_177557 = HEX24_182401(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179897)) {
		F.line = 119;
		result_177557 = HEX24_182386(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179182)) {
		F.line = 119;
		result_177557 = HEX24_182329(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179928)) {
		F.line = 119;
		result_177557 = HEX24_182392(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179256)) {
		F.line = 119;
		result_177557 = HEX24_182335(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179338)) {
		F.line = 119;
		result_177557 = HEX24_182341(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179147)) {
		F.line = 119;
		result_177557 = HEX24_182326(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179422)) {
		F.line = 119;
		result_177557 = HEX24_182347(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180002)) {
		F.line = 119;
		result_177557 = HEX24_182398(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179502)) {
		F.line = 119;
		result_177557 = HEX24_182353(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179295)) {
		F.line = 119;
		result_177557 = HEX24_182338(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179576)) {
		F.line = 119;
		result_177557 = HEX24_182359(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180183)) {
		F.line = 119;
		result_177557 = HEX24_182413(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180109)) {
		F.line = 119;
		result_177557 = HEX24_182407(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181190)) {
		F.line = 119;
		result_177557 = HEX24_182512(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179381)) {
		F.line = 119;
		result_177557 = HEX24_182344(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180257)) {
		F.line = 119;
		result_177557 = HEX24_182419(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179623)) {
		F.line = 119;
		result_177557 = HEX24_182362(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181060)) {
		F.line = 119;
		result_177557 = HEX24_182494(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179541)) {
		F.line = 119;
		result_177557 = HEX24_182356(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180868)) {
		F.line = 119;
		result_177557 = HEX24_182473(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180220)) {
		F.line = 119;
		result_177557 = HEX24_182416(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181159)) {
		F.line = 119;
		result_177557 = HEX24_182506(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179114)) {
		F.line = 119;
		result_177557 = HEX24_182323(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179020)) {
		F.line = 119;
		result_177557 = HEX24_182317(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181023)) {
		F.line = 119;
		result_177557 = HEX24_182491(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181095)) {
		F.line = 119;
		result_177557 = HEX24_182497(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179219)) {
		F.line = 119;
		result_177557 = HEX24_182332(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178872)) {
		F.line = 119;
		result_177557 = HEX24_182302(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180837)) {
		F.line = 119;
		result_177557 = HEX24_182470(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178940)) {
		F.line = 119;
		result_177557 = HEX24_182308(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181128)) {
		F.line = 119;
		result_177557 = HEX24_182503(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178975)) {
		F.line = 119;
		result_177557 = HEX24_182314(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181283)) {
		F.line = 119;
		result_177557 = HEX24_182521(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179065)) {
		F.line = 119;
		result_177557 = HEX24_182320(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181438)) {
		F.line = 119;
		result_177557 = HEX24_182536(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180693)) {
		F.line = 119;
		result_177557 = HEX24_182455(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181221)) {
		F.line = 119;
		result_177557 = HEX24_182515(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180432)) {
		F.line = 119;
		result_177557 = HEX24_182434(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180366)) {
		F.line = 119;
		result_177557 = HEX24_182428(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180619)) {
		F.line = 119;
		result_177557 = HEX24_182449(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180072)) {
		F.line = 119;
		result_177557 = HEX24_182404(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180930)) {
		F.line = 119;
		result_177557 = HEX24_182479(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181252)) {
		F.line = 119;
		result_177557 = HEX24_182518(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180763)) {
		F.line = 119;
		result_177557 = HEX24_182461(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180728)) {
		F.line = 119;
		result_177557 = HEX24_182458(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181407)) {
		F.line = 119;
		result_177557 = HEX24_182533(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180399)) {
		F.line = 119;
		result_177557 = HEX24_182431(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182107)) {
		F.line = 119;
		result_177557 = HEX24_182614(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180800)) {
		F.line = 119;
		result_177557 = HEX24_182464(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180992)) {
		F.line = 119;
		result_177557 = HEX24_182485(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178907)) {
		F.line = 119;
		result_177557 = HEX24_182305(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180899)) {
		F.line = 119;
		result_177557 = HEX24_182476(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181469)) {
		F.line = 119;
		result_177557 = HEX24_182539(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180961)) {
		F.line = 119;
		result_177557 = HEX24_182482(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180473)) {
		F.line = 119;
		result_177557 = HEX24_182437(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180148)) {
		F.line = 119;
		result_177557 = HEX24_182410(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182228)) {
		F.line = 119;
		result_177557 = HEX24_182632(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180296)) {
		F.line = 119;
		result_177557 = HEX24_182422(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180551)) {
		F.line = 119;
		result_177557 = HEX24_182443(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181624)) {
		F.line = 119;
		result_177557 = HEX24_182557(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181810)) {
		F.line = 119;
		result_177557 = HEX24_182578(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180514)) {
		F.line = 119;
		result_177557 = HEX24_182440(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181345)) {
		F.line = 119;
		result_177557 = HEX24_182527(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181996)) {
		F.line = 119;
		result_177557 = HEX24_182596(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181934)) {
		F.line = 119;
		result_177557 = HEX24_182590(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181841)) {
		F.line = 119;
		result_177557 = HEX24_182581(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180586)) {
		F.line = 119;
		result_177557 = HEX24_182446(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181779)) {
		F.line = 119;
		result_177557 = HEX24_182575(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181593)) {
		F.line = 119;
		result_177557 = HEX24_182554(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182158)) {
		F.line = 119;
		result_177557 = HEX24_182620(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182027)) {
		F.line = 119;
		result_177557 = HEX24_182602(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181965)) {
		F.line = 119;
		result_177557 = HEX24_182593(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182193)) {
		F.line = 119;
		result_177557 = HEX24_182626(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179065)) {
		F.line = 119;
		result_177557 = HEX24_182320(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181314)) {
		F.line = 119;
		result_177557 = HEX24_182524(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182263)) {
		F.line = 119;
		result_177557 = HEX24_182638(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182263)) {
		F.line = 119;
		result_177557 = HEX24_182638(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178776)) {
		F.line = 119;
		result_177557 = HEX24_182635(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178776)) {
		F.line = 119;
		result_177557 = HEX24_182635(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179732)) {
		F.line = 119;
		result_177557 = HEX24_182371(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179576)) {
		F.line = 119;
		result_177557 = HEX24_182359(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181562)) {
		F.line = 119;
		result_177557 = HEX24_182548(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180656)) {
		F.line = 119;
		result_177557 = HEX24_182452(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182193)) {
		F.line = 119;
		result_177557 = HEX24_182626(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178770)) {
		F.line = 119;
		result_177557 = HEX24_182623(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178770)) {
		F.line = 119;
		result_177557 = HEX24_182623(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180333)) {
		F.line = 119;
		result_177557 = HEX24_182425(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181872)) {
		F.line = 119;
		result_177557 = HEX24_182584(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179020)) {
		F.line = 119;
		result_177557 = HEX24_182317(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181686)) {
		F.line = 119;
		result_177557 = HEX24_182563(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179295)) {
		F.line = 119;
		result_177557 = HEX24_182338(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179802)) {
		F.line = 119;
		result_177557 = HEX24_182377(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179182)) {
		F.line = 119;
		result_177557 = HEX24_182329(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179541)) {
		F.line = 119;
		result_177557 = HEX24_182356(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181717)) {
		F.line = 119;
		result_177557 = HEX24_182569(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182068)) {
		F.line = 119;
		result_177557 = HEX24_182608(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179835)) {
		F.line = 119;
		result_177557 = HEX24_182380(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179693)) {
		F.line = 119;
		result_177557 = HEX24_182368(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179623)) {
		F.line = 119;
		result_177557 = HEX24_182362(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178975)) {
		F.line = 119;
		result_177557 = HEX24_182314(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181655)) {
		F.line = 119;
		result_177557 = HEX24_182560(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179256)) {
		F.line = 119;
		result_177557 = HEX24_182335(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181500)) {
		F.line = 119;
		result_177557 = HEX24_182542(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181903)) {
		F.line = 119;
		result_177557 = HEX24_182587(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179502)) {
		F.line = 119;
		result_177557 = HEX24_182353(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179422)) {
		F.line = 119;
		result_177557 = HEX24_182347(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179767)) {
		F.line = 119;
		result_177557 = HEX24_182374(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178837)) {
		F.line = 119;
		result_177557 = HEX24_182299(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179658)) {
		F.line = 119;
		result_177557 = HEX24_182365(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178837)) {
		F.line = 119;
		result_177557 = HEX24_182299(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181748)) {
		F.line = 119;
		result_177557 = HEX24_182572(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179463)) {
		F.line = 119;
		result_177557 = HEX24_182350(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177030)) {
		F.line = 119;
		result_177557 = HEX24_177605(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179219)) {
		F.line = 119;
		result_177557 = HEX24_182332(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181531)) {
		F.line = 119;
		result_177557 = HEX24_182545(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179114)) {
		F.line = 119;
		result_177557 = HEX24_182323(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179381)) {
		F.line = 119;
		result_177557 = HEX24_182344(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180002)) {
		F.line = 119;
		result_177557 = HEX24_182398(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181095)) {
		F.line = 119;
		result_177557 = HEX24_182497(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178940)) {
		F.line = 119;
		result_177557 = HEX24_182308(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180930)) {
		F.line = 119;
		result_177557 = HEX24_182479(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177027)) {
		F.line = 119;
		result_177557 = HEX24_177588(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181376)) {
		F.line = 119;
		result_177557 = HEX24_182530(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181060)) {
		F.line = 119;
		result_177557 = HEX24_182494(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181023)) {
		F.line = 119;
		result_177557 = HEX24_182491(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178739)) {
		F.line = 119;
		result_177557 = HEX24_182488(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178739)) {
		F.line = 119;
		result_177557 = HEX24_182488(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179338)) {
		F.line = 119;
		result_177557 = HEX24_182341(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180961)) {
		F.line = 119;
		result_177557 = HEX24_182482(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178907)) {
		F.line = 119;
		result_177557 = HEX24_182305(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178872)) {
		F.line = 119;
		result_177557 = HEX24_182302(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178723)) {
		F.line = 119;
		result_177557 = HEX24_182296(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178723)) {
		F.line = 119;
		result_177557 = HEX24_182296(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179965)) {
		F.line = 119;
		result_177557 = HEX24_182395(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180693)) {
		F.line = 119;
		result_177557 = HEX24_182455(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180514)) {
		F.line = 119;
		result_177557 = HEX24_182440(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180899)) {
		F.line = 119;
		result_177557 = HEX24_182476(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177024)) {
		F.line = 119;
		result_177557 = HEX24_177571(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179897)) {
		F.line = 119;
		result_177557 = HEX24_182386(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180656)) {
		F.line = 119;
		result_177557 = HEX24_182452(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180296)) {
		F.line = 119;
		result_177557 = HEX24_182422(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180763)) {
		F.line = 119;
		result_177557 = HEX24_182461(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180037)) {
		F.line = 119;
		result_177557 = HEX24_182401(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179866)) {
		F.line = 119;
		result_177557 = HEX24_182383(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180868)) {
		F.line = 119;
		result_177557 = HEX24_182473(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179928)) {
		F.line = 119;
		result_177557 = HEX24_182392(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180183)) {
		F.line = 119;
		result_177557 = HEX24_182413(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180473)) {
		F.line = 119;
		result_177557 = HEX24_182437(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI179147)) {
		F.line = 119;
		result_177557 = HEX24_182326(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178726)) {
		F.line = 119;
		result_177557 = HEX24_182311(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178726)) {
		F.line = 119;
		result_177557 = HEX24_182311(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180992)) {
		F.line = 119;
		result_177557 = HEX24_182485(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180800)) {
		F.line = 119;
		result_177557 = HEX24_182464(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180619)) {
		F.line = 119;
		result_177557 = HEX24_182449(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180257)) {
		F.line = 119;
		result_177557 = HEX24_182419(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180728)) {
		F.line = 119;
		result_177557 = HEX24_182458(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181252)) {
		F.line = 119;
		result_177557 = HEX24_182518(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180432)) {
		F.line = 119;
		result_177557 = HEX24_182434(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180399)) {
		F.line = 119;
		result_177557 = HEX24_182431(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180837)) {
		F.line = 119;
		result_177557 = HEX24_182470(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178736)) {
		F.line = 119;
		result_177557 = HEX24_182467(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178736)) {
		F.line = 119;
		result_177557 = HEX24_182467(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180148)) {
		F.line = 119;
		result_177557 = HEX24_182410(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180109)) {
		F.line = 119;
		result_177557 = HEX24_182407(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180072)) {
		F.line = 119;
		result_177557 = HEX24_182404(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180551)) {
		F.line = 119;
		result_177557 = HEX24_182443(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181128)) {
		F.line = 119;
		result_177557 = HEX24_182503(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182158)) {
		F.line = 119;
		result_177557 = HEX24_182620(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178765)) {
		F.line = 119;
		result_177557 = HEX24_182617(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178765)) {
		F.line = 119;
		result_177557 = HEX24_182617(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180220)) {
		F.line = 119;
		result_177557 = HEX24_182416(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181221)) {
		F.line = 119;
		result_177557 = HEX24_182515(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181190)) {
		F.line = 119;
		result_177557 = HEX24_182512(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180366)) {
		F.line = 119;
		result_177557 = HEX24_182428(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182068)) {
		F.line = 119;
		result_177557 = HEX24_182608(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178757)) {
		F.line = 119;
		result_177557 = HEX24_182605(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178757)) {
		F.line = 119;
		result_177557 = HEX24_182605(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182027)) {
		F.line = 119;
		result_177557 = HEX24_182602(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178754)) {
		F.line = 119;
		result_177557 = HEX24_182599(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182107)) {
		F.line = 119;
		result_177557 = HEX24_182614(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178762)) {
		F.line = 119;
		result_177557 = HEX24_182611(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178762)) {
		F.line = 119;
		result_177557 = HEX24_182611(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181841)) {
		F.line = 119;
		result_177557 = HEX24_182581(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181810)) {
		F.line = 119;
		result_177557 = HEX24_182578(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181779)) {
		F.line = 119;
		result_177557 = HEX24_182575(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180333)) {
		F.line = 119;
		result_177557 = HEX24_182425(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181965)) {
		F.line = 119;
		result_177557 = HEX24_182593(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI182228)) {
		F.line = 119;
		result_177557 = HEX24_182632(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178773)) {
		F.line = 119;
		result_177557 = HEX24_182629(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178773)) {
		F.line = 119;
		result_177557 = HEX24_182629(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181159)) {
		F.line = 119;
		result_177557 = HEX24_182506(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178742)) {
		F.line = 119;
		result_177557 = HEX24_182500(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178754)) {
		F.line = 119;
		result_177557 = HEX24_182599(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI180586)) {
		F.line = 119;
		result_177557 = HEX24_182446(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178731)) {
		F.line = 119;
		result_177557 = HEX24_182389(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178731)) {
		F.line = 119;
		result_177557 = HEX24_182389(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181686)) {
		F.line = 119;
		result_177557 = HEX24_182563(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181655)) {
		F.line = 119;
		result_177557 = HEX24_182560(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178742)) {
		F.line = 119;
		result_177557 = HEX24_182500(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181469)) {
		F.line = 119;
		result_177557 = HEX24_182539(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181903)) {
		F.line = 119;
		result_177557 = HEX24_182587(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181748)) {
		F.line = 119;
		result_177557 = HEX24_182572(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181717)) {
		F.line = 119;
		result_177557 = HEX24_182569(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181934)) {
		F.line = 119;
		result_177557 = HEX24_182590(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181283)) {
		F.line = 119;
		result_177557 = HEX24_182521(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181872)) {
		F.line = 119;
		result_177557 = HEX24_182584(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181500)) {
		F.line = 119;
		result_177557 = HEX24_182542(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181314)) {
		F.line = 119;
		result_177557 = HEX24_182524(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181407)) {
		F.line = 119;
		result_177557 = HEX24_182533(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181996)) {
		F.line = 119;
		result_177557 = HEX24_182596(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178751)) {
		F.line = 119;
		result_177557 = HEX24_182566(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178751)) {
		F.line = 119;
		result_177557 = HEX24_182566(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181345)) {
		F.line = 119;
		result_177557 = HEX24_182527(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181438)) {
		F.line = 119;
		result_177557 = HEX24_182536(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181531)) {
		F.line = 119;
		result_177557 = HEX24_182545(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181376)) {
		F.line = 119;
		result_177557 = HEX24_182530(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181562)) {
		F.line = 119;
		result_177557 = HEX24_182548(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178745)) {
		F.line = 119;
		result_177557 = HEX24_182509(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178745)) {
		F.line = 119;
		result_177557 = HEX24_182509(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181624)) {
		F.line = 119;
		result_177557 = HEX24_182557(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI181593)) {
		F.line = 119;
		result_177557 = HEX24_182554(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178748)) {
		F.line = 119;
		result_177557 = HEX24_182551(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI178748)) {
		F.line = 119;
		result_177557 = HEX24_182551(node_177551);
		break BeforeRet;
		}
		else {
		if (isObj(node_177551.m_type, NTI177022)) {
		F.line = 119;
		result_177557 = HEX24_177549(node_177551);
		break BeforeRet;
		}
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_177557;

}

function new_ast_store_180872() {
	var result_180874 = null;

	var F={procname:"asdl.newAstStore",prev:framePtr,filename:"asdl.nim",line:0};
	framePtr = F;
		F.line = 110;
		result_180874 = {m_type: NTI180868, kind: 0};
		F.line = 111;
		result_180874.kind = 1;
	framePtr = F.prev;

	return result_180874;

}

function set_store_402447(ast_node_402449) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 257;
		ast_node_402449.ctx = new_ast_store_180872();
	framePtr = F.prev;

	
}

function set_store_402431(ast_node_402433) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 254;
		ast_node_402433.ctx = new_ast_store_180872();
	framePtr = F.prev;

	
}

function set_store_402415(ast_node_402417) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 251;
		ast_node_402417.ctx = new_ast_store_180872();
	framePtr = F.prev;

	
}

function set_store_402463(ast_node_402465) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 260;
		ast_node_402465.ctx = new_ast_store_180872();
		L1: do {
			F.line = 261;
			var elm_402474 = null;
			F.line = 3909;
			var colontmp__402476 = null;
			F.line = 261;
			colontmp__402476 = ast_node_402465.elts;
			F.line = 3911;
			var i_402479 = 0;
			F.line = 3912;
			var l_402481 = (colontmp__402476 != null ? colontmp__402476.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_402479 < l_402481)) break L3;
						F.line = 3914;
						elm_402474 = colontmp__402476[chckIndx(i_402479, 0, colontmp__402476.length+0-1)-0];
						F.line = 262;
						set_store_402278(elm_402474);
						F.line = 3915;
						i_402479 = addInt(i_402479, 1);
						if (!(((colontmp__402476 != null ? colontmp__402476.length : 0) == l_402481))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function set_store_402274(ast_node_402276) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		if (!(isObj(ast_node_402276.m_type, NTI178731))) {
		F.line = 2895;
		var e_402296 = null;
		F.line = 2896;
		e_402296 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 25;
		e_402296.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_402296.parent = null;
		F.line = 247;
		raiseException(e_402296, "InternalError");
		}
		
		F.line = 248;
		raiseException(new_syntax_error_156096(makeNimstrLit("can\'t assign"), [], ast_node_402276.lineno.value, ast_node_402276.col_offset.value), "SyntaxError:ObjectType");
	framePtr = F.prev;

	
}

function set_store_402278(ast_node_402276) {
	var F={procname:"ast.setStore",prev:framePtr,filename:"ast.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(ast_node_402276);
		if (isObj(ast_node_402276.m_type, NTI180656)) {
		F.line = 245;
		set_store_402447(ast_node_402276);
		}
		else {
		if (isObj(ast_node_402276.m_type, NTI180619)) {
		F.line = 245;
		set_store_402431(ast_node_402276);
		}
		else {
		if (isObj(ast_node_402276.m_type, NTI180728)) {
		F.line = 245;
		set_store_402415(ast_node_402276);
		}
		else {
		if (isObj(ast_node_402276.m_type, NTI180800)) {
		F.line = 245;
		set_store_402463(ast_node_402276);
		}
		else {
		if (isObj(ast_node_402276.m_type, NTI177022)) {
		F.line = 245;
		set_store_402274(ast_node_402276);
		}
		}}}}
	framePtr = F.prev;

	
}

function to_tuple_494873(instr_494875) {
	var result_494877 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"compile.toTuple",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 107;
		nimCopy(result_494877, {Field0: instr_494875.opCode, Field1: instr_494875.opArg, Field2: instr_494875.lineNo}, NTI494876);
	framePtr = F.prev;

	return result_494877;

}

function to_tuple_494847(instr_494849) {
	var result_494851 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"compile.toTuple",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 103;
		nimCopy(result_494851, {Field0: instr_494849.opCode, Field1: -1, Field2: instr_494849.lineNo}, NTI494850);
	framePtr = F.prev;

	return result_494851;

}

function to_tuple_494853(instr_494849) {
	var result_494856 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"compile.toTuple",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(instr_494849);
		if (isObj(instr_494849.m_type, NTI493045)) {
		F.line = 102;
		nimCopy(result_494856, to_tuple_494873(instr_494849), NTI494850);
		break BeforeRet;
		}
		else {
		if (isObj(instr_494849.m_type, NTI493041)) {
		F.line = 102;
		nimCopy(result_494856, to_tuple_494847(instr_494849), NTI494850);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_494856;

}

function to_op_code_497250(ast_node_497252) {
	var result_497253 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 356;
		result_497253 = 15;
	framePtr = F.prev;

	return result_497253;

}

function to_op_code_497232(ast_node_497234) {
	var result_497235 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 355;
		result_497235 = 18;
	framePtr = F.prev;

	return result_497235;

}

function to_op_code_497214(ast_node_497216) {
	var result_497217 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 354;
		result_497217 = 17;
	framePtr = F.prev;

	return result_497217;

}

function to_op_code_497322(ast_node_497324) {
	var result_497325 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 360;
		result_497325 = 20;
	framePtr = F.prev;

	return result_497325;

}

function to_op_code_497304(ast_node_497306) {
	var result_497307 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 359;
		result_497307 = 14;
	framePtr = F.prev;

	return result_497307;

}

function to_op_code_497286(ast_node_497288) {
	var result_497289 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 358;
		result_497289 = 16;
	framePtr = F.prev;

	return result_497289;

}

function to_op_code_497268(ast_node_497270) {
	var result_497271 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 357;
		result_497271 = 21;
	framePtr = F.prev;

	return result_497271;

}

function to_op_code_497082(op_497084) {
	var result_497085 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 348;
		rawEcho(HEX24_177554(op_497084));
		if (true) {
		F.line = 349;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(349, 10) `false` "));
		}
		
	framePtr = F.prev;

	return result_497085;

}

function to_op_code_497087(op_497084) {
	var result_497090 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(op_497084);
		if (isObj(op_497084.m_type, NTI181252)) {
		F.line = 347;
		result_497090 = to_op_code_497250(op_497084);
		break BeforeRet;
		}
		else {
		if (isObj(op_497084.m_type, NTI181221)) {
		F.line = 347;
		result_497090 = to_op_code_497232(op_497084);
		break BeforeRet;
		}
		else {
		if (isObj(op_497084.m_type, NTI181190)) {
		F.line = 347;
		result_497090 = to_op_code_497214(op_497084);
		break BeforeRet;
		}
		else {
		if (isObj(op_497084.m_type, NTI181562)) {
		F.line = 347;
		result_497090 = to_op_code_497322(op_497084);
		break BeforeRet;
		}
		else {
		if (isObj(op_497084.m_type, NTI181376)) {
		F.line = 347;
		result_497090 = to_op_code_497304(op_497084);
		break BeforeRet;
		}
		else {
		if (isObj(op_497084.m_type, NTI181345)) {
		F.line = 347;
		result_497090 = to_op_code_497286(op_497084);
		break BeforeRet;
		}
		else {
		if (isObj(op_497084.m_type, NTI181314)) {
		F.line = 347;
		result_497090 = to_op_code_497268(op_497084);
		break BeforeRet;
		}
		else {
		if (isObj(op_497084.m_type, NTI178745)) {
		F.line = 347;
		result_497090 = to_op_code_497082(op_497084);
		break BeforeRet;
		}
		}}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_497090;

}

function to_op_code_497450(ast_node_497452) {
	var result_497453 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 372;
		result_497453 = 8;
	framePtr = F.prev;

	return result_497453;

}

function to_op_code_497432(ast_node_497434) {
	var result_497435 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 371;
		result_497435 = 10;
	framePtr = F.prev;

	return result_497435;

}

function to_op_code_497414(ast_node_497416) {
	var result_497417 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 370;
		result_497417 = 11;
	framePtr = F.prev;

	return result_497417;

}

function to_op_code_497468(ast_node_497470) {
	var result_497471 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 373;
		result_497471 = 9;
	framePtr = F.prev;

	return result_497471;

}

function to_op_code_497353(op_497355) {
	var result_497356 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_497367 = null;
		F.line = 2896;
		e_497367 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 25;
		e_497367.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_497367.parent = null;
		F.line = 365;
		raiseException(e_497367, "InternalError");
	framePtr = F.prev;

	return result_497356;

}

function to_op_code_497358(op_497355) {
	var result_497361 = 0;

	var F={procname:"compile.toOpCode",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(op_497355);
		if (isObj(op_497355.m_type, NTI181655)) {
		F.line = 364;
		result_497361 = to_op_code_497450(op_497355);
		break BeforeRet;
		}
		else {
		if (isObj(op_497355.m_type, NTI181624)) {
		F.line = 364;
		result_497361 = to_op_code_497432(op_497355);
		break BeforeRet;
		}
		else {
		if (isObj(op_497355.m_type, NTI181593)) {
		F.line = 364;
		result_497361 = to_op_code_497414(op_497355);
		break BeforeRet;
		}
		else {
		if (isObj(op_497355.m_type, NTI181686)) {
		F.line = 364;
		result_497361 = to_op_code_497468(op_497355);
		break BeforeRet;
		}
		else {
		if (isObj(op_497355.m_type, NTI178748)) {
		F.line = 364;
		result_497361 = to_op_code_497353(op_497355);
		break BeforeRet;
		}
		}}}}
	} while (false);
	framePtr = F.prev;

	return result_497361;

}

function add_op_495505(c_495507, op_code_495508, line_no_495509) {
	var F={procname:"compile.addOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(!((ConstSet26[op_code_495508] != undefined)))) {
		F.line = 164;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(164, 3) `not contains({OpCode.STORE_NAME, OpCode.DELETE_NAME, OpCode.UNPACK_SEQUENCE,\x0A             OpCode.FOR_ITER, OpCode.UNPACK_EX, OpCode.STORE_ATTR,\x0A             OpCode.DELETE_ATTR, OpCode.STORE_GLOBAL, OpCode.DELETE_GLOBAL,\x0A             OpCode.LOAD_CONST, OpCode.LOAD_NAME, OpCode.BUILD_TUPLE,\x0A             OpCode.BUILD_LIST, OpCode.BUILD_SET, OpCode.BUILD_MAP,\x0A             OpCode.LOAD_ATTR, OpCode.COMPARE_OP, OpCode.IMPORT_NAME,\x0A             OpCode.IMPORT_FROM, OpCode.JUMP_FORWARD, OpCode.JUMP_IF_FALSE_OR_POP,\x0A             OpCode.JUMP_IF_TRUE_OR_POP, OpCode.JUMP_ABSOLUTE,\x0A             OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE,\x0A             OpCode.LOAD_GLOBAL, OpCode.SETUP_FINALLY, OpCode.LOAD_FAST,\x0A             OpCode.STORE_FAST, OpCode.DELETE_FAST, OpCode.RAISE_VARARGS,\x0A             OpCode.CALL_FUNCTION, OpCode.MAKE_FUNCTION, OpCode.BUILD_SLICE,\x0A             OpCode.LOAD_CLOSURE, OpCode.LOAD_DEREF, OpCode.STORE_DEREF,\x0A             OpCode.DELETE_DEREF, OpCode.CALL_FUNCTION_KW,\x0A             OpCode.CALL_FUNCTION_EX, OpCode.SETUP_WITH, OpCode.EXTENDED_ARG,\x0A             OpCode.LIST_APPEND, OpCode.SET_ADD, OpCode.MAP_ADD,\x0A             OpCode.LOAD_CLASSDEREF, OpCode.BUILD_LIST_UNPACK,\x0A             OpCode.BUILD_MAP_UNPACK, OpCode.BUILD_MAP_UNPACK_WITH_CALL,\x0A             OpCode.BUILD_TUPLE_UNPACK, OpCode.BUILD_SET_UNPACK,\x0A             OpCode.SETUP_ASYNC_WITH, OpCode.FORMAT_VALUE,\x0A             OpCode.BUILD_CONST_KEY_MAP, OpCode.BUILD_STRING,\x0A             OpCode.BUILD_TUPLE_UNPACK_WITH_CALL, OpCode.LOAD_METHOD,\x0A             OpCode.CALL_METHOD, OpCode.CALL_FINALLY, OpCode.POP_FINALLY,\x0A             OpCode.EXCEPT_HANDLER}, opCode)` "));
		}
		
		F.line = 165;
		add_op_495445(tcu_494986(c_495507), new_instr_493133(op_code_495508, line_no_495509));
	framePtr = F.prev;

	
}

function compile_502216(c_502218, ast_node_502219) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 755;
		var line_no_502220 = ast_node_502219.lineno.value;
		if (isObj(ast_node_502219.ctx.m_type, NTI180837)) {
		F.line = 757;
		compile_497538(c_502218, ast_node_502219.value);
		F.line = 758;
		compile_497538(c_502218, ast_node_502219.slice);
		F.line = 759;
		add_op_495505(c_502218, 19, line_no_502220);
		}
		else {
		if (isObj(ast_node_502219.ctx.m_type, NTI180868)) {
		F.line = 761;
		compile_497538(c_502218, ast_node_502219.value);
		F.line = 762;
		compile_497538(c_502218, ast_node_502219.slice);
		F.line = 763;
		add_op_495505(c_502218, 33, line_no_502220);
		}
		else {
			F.line = 2895;
			var e_502250 = null;
			F.line = 2896;
			e_502250 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_502250.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_502250.parent = null;
			F.line = 765;
			raiseException(e_502250, "InternalError");
		}
		}
	framePtr = F.prev;

	
}

function tste_495041(c_495043) {
	var result_495044 = null;

	var F={procname:"compile.tste",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 126;
		result_495044 = tcu_494986(c_495043).ste;
	framePtr = F.prev;

	return result_495044;

}

function add_op_495488(c_495490, instr_495491) {
	var F={procname:"compile.addOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 160;
		add_op_495445(tcu_494986(c_495490), instr_495491);
	framePtr = F.prev;

	
}

function compile_502029(c_502031, ast_node_502032) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 744;
		var line_no_502033 = ast_node_502032.lineno.value;
		F.line = 745;
		compile_497538(c_502031, ast_node_502032.value);
		F.line = 746;
		var op_arg_502034 = name_id_437042(tste_495041(c_502031), ast_node_502032.attr.value);
		if (isObj(ast_node_502032.ctx.m_type, NTI180837)) {
		F.line = 748;
		add_op_495488(c_502031, new_arg_instr_493437(77, op_arg_502034, line_no_502033));
		}
		else {
		if (isObj(ast_node_502032.ctx.m_type, NTI180868)) {
		F.line = 750;
		add_op_495488(c_502031, new_arg_instr_493437(67, op_arg_502034, line_no_502033));
		}
		else {
			F.line = 2895;
			var e_502064 = null;
			F.line = 2896;
			e_502064 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_502064.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_502064.parent = null;
			F.line = 752;
			raiseException(e_502064, "InternalError");
		}
		}
	framePtr = F.prev;

	
}

function free_id_441438(ste_441440, name_str_441441) {
		var Tmp1;

	var result_441442 = 0;

	var F={procname:"symtable.freeId",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 112;
		result_441442 = addInt((Tmp1 = HEX5BHEX5D_435903(ste_441440.freeVars, name_str_441441), Tmp1[0])[Tmp1[1]], len_437683(ste_441440.cellVars));
	framePtr = F.prev;

	return result_441442;

}

function add_load_op_495680(c_495682, name_str_495683, line_no_495684) {
	var F={procname:"compile.addLoadOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 182;
		var scope_495685 = get_scope_430803(tste_495041(c_495682), name_str_495683);
		F.line = 185;
		var op_arg_495686 = 0;
		F.line = 186;
		var op_code_495687 = 0;
		F.line = 188;
		switch (scope_495685) {
		case 0:
			F.line = 190;
			op_arg_495686 = local_id_435666(tste_495041(c_495682), name_str_495683);
			F.line = 191;
			op_code_495687 = 89;
			break;
		case 3:
			F.line = 193;
			op_arg_495686 = name_id_437042(tste_495041(c_495682), name_str_495683);
			F.line = 194;
			op_code_495687 = 87;
			break;
		case 1:
			F.line = 196;
			op_arg_495686 = cell_id_441176(tste_495041(c_495682), name_str_495683);
			F.line = 197;
			op_code_495687 = 97;
			break;
		case 2:
			F.line = 199;
			op_arg_495686 = free_id_441438(tste_495041(c_495682), name_str_495683);
			F.line = 200;
			op_code_495687 = 97;
			break;
		}
		F.line = 202;
		var instr_495696 = new_arg_instr_493437(op_code_495687, op_arg_495686, line_no_495684);
		F.line = 203;
		add_op_495488(c_495682, instr_495696);
	framePtr = F.prev;

	
}

function add_load_op_495710(c_495712, name_495713, line_no_495714) {
	var F={procname:"compile.addLoadOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 207;
		var name_str_495715 = name_495713.value;
		F.line = 208;
		add_load_op_495680(c_495712, name_str_495715, line_no_495714);
	framePtr = F.prev;

	
}

function add_store_op_495729(c_495731, name_str_495732, line_no_495733) {
	var F={procname:"compile.addStoreOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 212;
		var scope_495734 = get_scope_430803(tste_495041(c_495731), name_str_495732);
		F.line = 215;
		var op_arg_495735 = 0;
		F.line = 216;
		var op_code_495736 = 0;
		F.line = 218;
		switch (scope_495734) {
		case 0:
			F.line = 220;
			op_arg_495735 = local_id_435666(tste_495041(c_495731), name_str_495732);
			F.line = 221;
			op_code_495736 = 90;
			break;
		case 3:
			F.line = 223;
			op_arg_495735 = name_id_437042(tste_495041(c_495731), name_str_495732);
			F.line = 224;
			op_code_495736 = 69;
			break;
		case 1:
			F.line = 226;
			op_arg_495735 = cell_id_441176(tste_495041(c_495731), name_str_495732);
			F.line = 227;
			op_code_495736 = 98;
			break;
		case 2:
			F.line = 229;
			op_arg_495735 = free_id_441438(tste_495041(c_495731), name_str_495732);
			F.line = 230;
			op_code_495736 = 98;
			break;
		}
		F.line = 232;
		var instr_495745 = new_arg_instr_493437(op_code_495736, op_arg_495735, line_no_495733);
		F.line = 233;
		add_op_495488(c_495731, instr_495745);
	framePtr = F.prev;

	
}

function add_store_op_495759(c_495761, name_495762, line_no_495763) {
	var F={procname:"compile.addStoreOp",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 237;
		var name_str_495764 = name_495762.value;
		F.line = 238;
		add_store_op_495729(c_495761, name_str_495764, line_no_495763);
	framePtr = F.prev;

	
}

function compile_502433(c_502435, ast_node_502436) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 773;
		var line_no_502437 = ast_node_502436.lineno.value;
		if (isObj(ast_node_502436.ctx.m_type, NTI180837)) {
		F.line = 775;
		add_load_op_495710(c_502435, ast_node_502436.id, line_no_502437);
		}
		else {
		if (isObj(ast_node_502436.ctx.m_type, NTI180868)) {
		F.line = 777;
		add_store_op_495759(c_502435, ast_node_502436.id, line_no_502437);
		}
		else {
			F.line = 2895;
			var e_502465 = null;
			F.line = 2896;
			e_502465 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_502465.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_502465.parent = null;
			F.line = 779;
			raiseException(e_502465, "InternalError");
		}
		}
	framePtr = F.prev;

	
}

function compile_502416(c_502418, ast_node_502419) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 769;
		add_load_const_495641(tcu_494986(c_502418), ast_node_502419.value.value, ast_node_502419.lineno.value);
	framePtr = F.prev;

	
}

function last_line_no_495269(c_495271) {
	var result_495272 = 0;

	var F={procname:"compile.lastLineNo",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 149;
		result_495272 = last_line_no_495154(tcu_494986(c_495271));
	framePtr = F.prev;

	return result_495272;

}

function compile_502665(c_502667, ast_node_502668) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 793;
		switch (ast_node_502668.ctx.kind) {
		case 0:
			L1: do {
				F.line = 795;
				var elt_502678 = null;
				F.line = 3909;
				var colontmp__502802 = null;
				F.line = 795;
				colontmp__502802 = ast_node_502668.elts;
				F.line = 3911;
				var i_502805 = 0;
				F.line = 3912;
				var l_502807 = (colontmp__502802 != null ? colontmp__502802.length : 0);
				L2: do {
					F.line = 3913;
						L3: while (true) {
						if (!(i_502805 < l_502807)) break L3;
							F.line = 3914;
							elt_502678 = colontmp__502802[chckIndx(i_502805, 0, colontmp__502802.length+0-1)-0];
							F.line = 796;
							compile_497538(c_502667, elt_502678);
							F.line = 3915;
							i_502805 = addInt(i_502805, 1);
							if (!(((colontmp__502802 != null ? colontmp__502802.length : 0) == l_502807))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			F.line = 797;
			var line_no_502679 = 0;
			if (((ast_node_502668.elts != null ? ast_node_502668.elts.length : 0) == 0)) {
			F.line = 799;
			line_no_502679 = ast_node_502668.lineno.value;
			}
			else {
				F.line = 801;
				line_no_502679 = last_line_no_495269(c_502667);
			}
			
			F.line = 802;
			add_op_495488(c_502667, new_arg_instr_493437(73, (ast_node_502668.elts != null ? ast_node_502668.elts.length : 0), line_no_502679));
			break;
		case 1:
			F.line = 804;
			add_op_495488(c_502667, new_arg_instr_493437(64, (ast_node_502668.elts != null ? ast_node_502668.elts.length : 0), ast_node_502668.lineno.value));
			L4: do {
				F.line = 805;
				var elt_502712 = null;
				F.line = 3909;
				var colontmp__502809 = null;
				F.line = 805;
				colontmp__502809 = ast_node_502668.elts;
				F.line = 3911;
				var i_502812 = 0;
				F.line = 3912;
				var l_502814 = (colontmp__502809 != null ? colontmp__502809.length : 0);
				L5: do {
					F.line = 3913;
						L6: while (true) {
						if (!(i_502812 < l_502814)) break L6;
							F.line = 3914;
							elt_502712 = colontmp__502809[chckIndx(i_502812, 0, colontmp__502809.length+0-1)-0];
							F.line = 806;
							compile_497538(c_502667, elt_502712);
							F.line = 3915;
							i_502812 = addInt(i_502812, 1);
							if (!(((colontmp__502809 != null ? colontmp__502809.length : 0) == l_502814))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
			break;
		default: 
			F.line = 2895;
			var e_502718 = null;
			F.line = 2896;
			e_502718 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_502718.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_502718.parent = null;
			F.line = 808;
			raiseException(e_502718, "InternalError");
			break;
		}
	framePtr = F.prev;

	
}

function compile_502616(c_502618, ast_node_502619) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 783;
			var elt_502628 = null;
			F.line = 3909;
			var colontmp__502646 = null;
			F.line = 783;
			colontmp__502646 = ast_node_502619.elts;
			F.line = 3911;
			var i_502649 = 0;
			F.line = 3912;
			var l_502651 = (colontmp__502646 != null ? colontmp__502646.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_502649 < l_502651)) break L3;
						F.line = 3914;
						elt_502628 = colontmp__502646[chckIndx(i_502649, 0, colontmp__502646.length+0-1)-0];
						F.line = 784;
						compile_497538(c_502618, elt_502628);
						F.line = 3915;
						i_502649 = addInt(i_502649, 1);
						if (!(((colontmp__502646 != null ? colontmp__502646.length : 0) == l_502651))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 785;
		var line_no_502629 = 0;
		if (((ast_node_502619.elts != null ? ast_node_502619.elts.length : 0) == 0)) {
		F.line = 787;
		line_no_502629 = ast_node_502619.lineno.value;
		}
		else {
			F.line = 789;
			line_no_502629 = last_line_no_495269(c_502618);
		}
		
		F.line = 790;
		add_op_495488(c_502618, new_arg_instr_493437(74, (ast_node_502619.elts != null ? ast_node_502619.elts.length : 0), line_no_502629));
	framePtr = F.prev;

	
}

function compile_502879(c_502881, ast_node_502882) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 831;
		compile_497538(c_502881, ast_node_502882.value);
	framePtr = F.prev;

	
}

function add_load_const_495662(c_495664, py_object_495665, line_no_495666) {
	var F={procname:"compile.addLoadConst",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 177;
		add_load_const_495641(tcu_494986(c_495664), py_object_495665, line_no_495666);
	framePtr = F.prev;

	
}

function compile_502828(c_502830, ast_node_502831) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 811;
		var line_no_502832 = last_line_no_495269(c_502830);
		F.line = 812;
		var n_502834 = 2;
		if ((ast_node_502831.lower === null)) {
		F.line = 815;
		add_load_const_495662(c_502830, py_none_356044, line_no_502832);
		}
		else {
			F.line = 817;
		compile_497538(c_502830, ast_node_502831.lower);
		}
		
		if ((ast_node_502831.upper === null)) {
		F.line = 820;
		add_load_const_495662(c_502830, py_none_356044, line_no_502832);
		}
		else {
			F.line = 822;
		compile_497538(c_502830, ast_node_502831.upper);
		}
		
		if (!((ast_node_502831.step === null))) {
		F.line = 825;
		compile_497538(c_502830, ast_node_502831.step);
		F.line = 826;
		n_502834 = addInt(n_502834, 1);
		}
		
		F.line = 828;
		add_op_495488(c_502830, new_arg_instr_493437(95, n_502834, line_no_502832));
	framePtr = F.prev;

	
}

function compile_501068(c_501070, ast_node_501071) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 669;
		var n_501079 = (ast_node_501071.values != null ? ast_node_501071.values.length : 0);
		L1: do {
			F.line = 670;
			var i_501097 = 0;
			F.line = 3616;
			var colontmp__501108 = 0;
			F.line = 670;
			colontmp__501108 = (ast_node_501071.keys != null ? ast_node_501071.keys.length : 0);
			F.line = 3617;
			var i_501111 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_501111 < colontmp__501108)) break L3;
						F.line = 3619;
						i_501097 = i_501111;
						F.line = 671;
						compile_497538(c_501070, ast_node_501071.values[chckIndx(i_501097, 0, ast_node_501071.values.length+0-1)-0]);
						F.line = 672;
						compile_497538(c_501070, ast_node_501071.keys[chckIndx(i_501097, 0, ast_node_501071.keys.length+0-1)-0]);
						F.line = 3620;
						i_501111 = addInt(i_501111, 1);
					}
			} while(false);
		} while(false);
		F.line = 673;
		var line_no_501098 = 0;
		if (((ast_node_501071.keys != null ? ast_node_501071.keys.length : 0) == 0)) {
		F.line = 675;
		line_no_501098 = ast_node_501071.lineno.value;
		}
		else {
			F.line = 677;
			line_no_501098 = last_line_no_495269(c_501070);
		}
		
		F.line = 678;
		add_op_495488(c_501070, new_arg_instr_493437(76, n_501079, line_no_501098));
	framePtr = F.prev;

	
}

function compile_502919(c_502921, ast_node_502922) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_502928 = null;
		F.line = 2896;
		e_502928 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 25;
		e_502928.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_502928.parent = null;
		F.line = 840;
		raiseException(e_502928, "InternalError");
	framePtr = F.prev;

	
}

function compile_501243(c_501245, ast_node_501246) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_501246.ops != null ? ast_node_501246.ops.length : 0) == 1))) {
		F.line = 708;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(708, 10) `len(astNode.ops) == 1` "));
		}
		
		if (!(((ast_node_501246.comparators != null ? ast_node_501246.comparators.length : 0) == 1))) {
		F.line = 709;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(709, 10) `len(astNode.comparators) == 1` "));
		}
		
		F.line = 710;
		compile_497538(c_501245, ast_node_501246.left);
		F.line = 711;
		compile_497538(c_501245, ast_node_501246.comparators[chckIndx(0, 0, ast_node_501246.comparators.length+0-1)-0]);
		F.line = 714;
		switch (ast_node_501246.ops[chckIndx(0, 0, ast_node_501246.ops.length+0-1)-0].kind) {
		case 2:
			F.line = 716;
			add_op_495488(c_501245, new_arg_instr_493437(78, 0, ast_node_501246.lineno.value));
			break;
		case 3:
			F.line = 718;
			add_op_495488(c_501245, new_arg_instr_493437(78, 1, ast_node_501246.lineno.value));
			break;
		case 4:
			F.line = 720;
			add_op_495488(c_501245, new_arg_instr_493437(78, 4, ast_node_501246.lineno.value));
			break;
		case 5:
			F.line = 722;
			add_op_495488(c_501245, new_arg_instr_493437(78, 5, ast_node_501246.lineno.value));
			break;
		case 0:
			F.line = 724;
			add_op_495488(c_501245, new_arg_instr_493437(78, 2, ast_node_501246.lineno.value));
			break;
		case 1:
			F.line = 726;
			add_op_495488(c_501245, new_arg_instr_493437(78, 3, ast_node_501246.lineno.value));
			break;
		case 8:
			F.line = 728;
			add_op_495488(c_501245, new_arg_instr_493437(78, 6, ast_node_501246.lineno.value));
			break;
		case 9:
			F.line = 730;
			add_op_495488(c_501245, new_arg_instr_493437(78, 7, ast_node_501246.lineno.value));
			break;
		default: 
			F.line = 2895;
			var e_501639 = null;
			F.line = 2896;
			e_501639 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_501639.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_501639.parent = null;
			F.line = 732;
			raiseException(e_501639, "InternalError");
			break;
		}
	framePtr = F.prev;

	
}

function add_block_495614(c_495616, cb_495617) {
	var F={procname:"compile.addBlock",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 169;
		if (tcu_494986(c_495616).blocks != null) { tcu_494986(c_495616).blocks.push(cb_495617); } else { tcu_494986(c_495616).blocks = [cb_495617]; };
	framePtr = F.prev;

	
}

function new_494003() {
	var result_494008 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_494201 = null;
		F.line = 211;
		r_494201 = {m_type: NTI493048, target: null, opArg: 0, opCode: 0, lineNo: 0};
		F.line = 212;
		result_494008 = r_494201;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_494008;

}

function new_jump_instr_493837(op_code_493839, target_493840, line_no_493841) {
	var result_493842 = null;

	var F={procname:"compile.newJumpInstr",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!((ConstSet27[op_code_493839] != undefined))) {
		F.line = 74;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(74, 10) `contains({OpCode.JUMP_FORWARD, OpCode.JUMP_IF_FALSE_OR_POP,\x0A          OpCode.JUMP_IF_TRUE_OR_POP, OpCode.JUMP_ABSOLUTE,\x0A          OpCode.POP_JUMP_IF_FALSE, OpCode.POP_JUMP_IF_TRUE, OpCode.FOR_ITER,\x0A          OpCode.SETUP_FINALLY}, opCode)` "));
		}
		
		F.line = 75;
		result_493842 = new_494003();
		F.line = 76;
		result_493842.opCode = op_code_493839;
		F.line = 77;
		result_493842.opArg = -1;
		F.line = 78;
		result_493842.target = target_493840;
		F.line = 79;
		result_493842.lineNo = line_no_493841;
	framePtr = F.prev;

	return result_493842;

}

function has_cell_441916(ste_441918, name_str_441919) {
	var result_441920 = false;

	var F={procname:"symtable.hasCell",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 115;
		result_441920 = has_key_437193(ste_441918.cellVars, name_str_441919);
	framePtr = F.prev;

	return result_441920;

}

function has_free_442089(ste_442091, name_str_442092) {
	var result_442093 = false;

	var F={procname:"symtable.hasFree",prev:framePtr,filename:"symtable.nim",line:0};
	framePtr = F;
		F.line = 118;
		result_442093 = has_key_437193(ste_442091.freeVars, name_str_442092);
	framePtr = F.prev;

	return result_442093;

}

function make_function_496662(c_496664, cu_496665, function_name_496666, line_no_496667) {
	var F={procname:"compile.makeFunction",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(!((cu_496665.codeName === null)))) {
		F.line = 289;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(289, 3) `not isNil(cu.codeName)` "));
		}
		
		F.line = 291;
		var co_496801 = assemble_495778(cu_496665, c_496664.fileName);
		F.line = 293;
		var flag_496802 = 0;
		if (!(((co_496801.freeVars != null ? co_496801.freeVars.length : 0) == 0))) {
		L1: do {
			F.line = 308;
			var name_496818 = null;
			F.line = 3909;
			var colontmp__497011 = null;
			F.line = 308;
			colontmp__497011 = co_496801.freeVars;
			F.line = 3911;
			var i_497014 = 0;
			F.line = 3912;
			var l_497016 = (colontmp__497011 != null ? colontmp__497011.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_497014 < l_497016)) break L3;
						F.line = 3914;
						name_496818 = colontmp__497011[chckIndx(i_497014, 0, colontmp__497011.length+0-1)-0];
						if (has_cell_441916(tste_495041(c_496664), name_496818)) {
						F.line = 310;
						add_op_495488(c_496664, new_arg_instr_493437(96, cell_id_441176(tste_495041(c_496664), name_496818), line_no_496667));
						}
						else {
						if (has_free_442089(tste_495041(c_496664), name_496818)) {
						F.line = 312;
						add_op_495488(c_496664, new_arg_instr_493437(96, free_id_441438(tste_495041(c_496664), name_496818), line_no_496667));
						}
						else {
							F.line = 2895;
							var e_496826 = null;
							F.line = 2896;
							e_496826 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 25;
							e_496826.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
							F.line = 2891;
							e_496826.parent = null;
							F.line = 314;
							raiseException(e_496826, "InternalError");
						}
						}
						F.line = 3915;
						i_497014 = addInt(i_497014, 1);
						if (!(((colontmp__497011 != null ? colontmp__497011.length : 0) == l_497016))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 315;
		add_op_495488(c_496664, new_arg_instr_493437(73, (co_496801.freeVars != null ? co_496801.freeVars.length : 0), line_no_496667));
		F.line = 316;
		flag_496802 = (flag_496802 | 8);
		}
		
		F.line = 318;
		add_load_const_495641(tcu_494986(c_496664), co_496801, line_no_496667);
		F.line = 319;
		add_load_const_495641(tcu_494986(c_496664), function_name_496666, line_no_496667);
		F.line = 321;
		add_op_495488(c_496664, new_arg_instr_493437(94, flag_496802, line_no_496667));
	framePtr = F.prev;

	
}

function pop_498014(s_498020, s_498020_Idx) {
	var result_498021 = null;

	var F={procname:"pop.pop",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2524;
		var l_498029 = subInt((s_498020[s_498020_Idx] != null ? s_498020[s_498020_Idx].length : 0), 1);
		F.line = 2525;
		result_498021 = s_498020[s_498020_Idx][chckIndx(l_498029, 0, s_498020[s_498020_Idx].length+0-1)-0];
		F.line = 2526;
		if (s_498020[s_498020_Idx].length < chckRange(l_498029, 0, 2147483647)) { for (var i=s_498020[s_498020_Idx].length;i<chckRange(l_498029, 0, 2147483647);++i) s_498020[s_498020_Idx].push(null); }
               else { s_498020[s_498020_Idx].length = chckRange(l_498029, 0, 2147483647); };
	framePtr = F.prev;

	return result_498021;

}

function compile_501126(c_501128, ast_node_501129) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 681;
		var line_no_501130 = ast_node_501129.lineno.value;
		if (!(((ast_node_501129.generators != null ? ast_node_501129.generators.length : 0) == 1))) {
		F.line = 682;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(682, 10) `len(astNode.generators) == 1` "));
		}
		
		F.line = 683;
		var gen_node_501201 = ast_node_501129.generators[chckIndx(0, 0, ast_node_501129.generators.length+0-1)-0];
		F.line = 684;
		if (c_501128.units != null) { c_501128.units.push(new_compiler_unit_494437(c_501128.st, ast_node_501129, new_py_str_176092(makeNimstrLit("<listcomp>")))); } else { c_501128.units = [new_compiler_unit_494437(c_501128.st, ast_node_501129, new_py_str_176092(makeNimstrLit("<listcomp>")))]; };
		F.line = 686;
		var body_501212 = new_basic_block_494238(0);
		F.line = 687;
		var ending_501213 = new_basic_block_494238(0);
		F.line = 688;
		add_op_495488(c_501128, new_arg_instr_493437(74, 0, line_no_501130));
		F.line = 689;
		add_load_op_495680(c_501128, new_py_string_176075(makeNimstrLit(".0")), ast_node_501129.lineno.value);
		F.line = 690;
		add_block_495614(c_501128, body_501212);
		F.line = 691;
		add_op_495488(c_501128, new_jump_instr_493837(65, ending_501213, line_no_501130));
		F.line = 692;
		compile_497538(c_501128, gen_node_501201.target);
		F.line = 693;
		compile_497538(c_501128, ast_node_501129.elt);
		F.line = 695;
		add_op_495488(c_501128, new_arg_instr_493437(104, 2, line_no_501130));
		F.line = 696;
		add_op_495488(c_501128, new_jump_instr_493837(84, body_501212, line_no_501130));
		F.line = 697;
		add_block_495614(c_501128, ending_501213);
		F.line = 698;
		add_op_495505(c_501128, 54, line_no_501130);
		F.line = 700;
		make_function_496662(c_501128, pop_498014(c_501128, "units"), new_py_string_176075(makeNimstrLit("listcomp")), line_no_501130);
		F.line = 702;
		compile_497538(c_501128, gen_node_501201.iter);
		F.line = 703;
		add_op_495505(c_501128, 41, line_no_501130);
		F.line = 704;
		add_op_495488(c_501128, new_arg_instr_493437(93, 1, line_no_501130));
	framePtr = F.prev;

	
}

function compile_500067(c_500069, ast_node_500070) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 583;
		var line_no_500071 = ast_node_500070.lineno.value;
		F.line = 584;
		var ending_500072 = new_basic_block_494238(0);
		F.line = 585;
		compile_497538(c_500069, ast_node_500070.test);
		F.line = 586;
		add_op_495488(c_500069, new_jump_instr_493837(86, ending_500072, line_no_500071));
		F.line = 587;
		add_load_op_495680(c_500069, new_py_string_176075(makeNimstrLit("AssertionError")), line_no_500071);
		if (!((ast_node_500070.msg === null))) {
		F.line = 589;
		compile_497538(c_500069, ast_node_500070.msg);
		F.line = 590;
		add_op_495488(c_500069, new_arg_instr_493437(93, 1, line_no_500071));
		}
		
		F.line = 591;
		add_op_495488(c_500069, new_arg_instr_493437(92, 1, line_no_500071));
		F.line = 592;
		add_block_495614(c_500069, ending_500072);
	framePtr = F.prev;

	
}

function compile_501822(c_501824, ast_node_501825) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 736;
		compile_497538(c_501824, ast_node_501825.fun);
		L1: do {
			F.line = 737;
			var arg_501834 = null;
			F.line = 3909;
			var colontmp__502010 = null;
			F.line = 737;
			colontmp__502010 = ast_node_501825.args;
			F.line = 3911;
			var i_502013 = 0;
			F.line = 3912;
			var l_502015 = (colontmp__502010 != null ? colontmp__502010.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_502013 < l_502015)) break L3;
						F.line = 3914;
						arg_501834 = colontmp__502010[chckIndx(i_502013, 0, colontmp__502010.length+0-1)-0];
						F.line = 738;
						compile_497538(c_501824, arg_501834);
						F.line = 3915;
						i_502013 = addInt(i_502013, 1);
						if (!(((colontmp__502010 != null ? colontmp__502010.length : 0) == l_502015))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!(((ast_node_501825.keywords != null ? ast_node_501825.keywords.length : 0) == 0))) {
		F.line = 739;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(739, 10) `len(astNode.keywords) == 0` "));
		}
		
		F.line = 740;
		add_op_495488(c_501824, new_arg_instr_493437(93, (ast_node_501825.args != null ? ast_node_501825.args.length : 0), ast_node_501825.lineno.value));
	framePtr = F.prev;

	
}

function compile_500216(c_500218, ast_node_500219) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 606;
		var line_no_500220 = ast_node_500219.value.lineno.value;
		F.line = 607;
		compile_497538(c_500218, ast_node_500219.value);
		if (c_500218.interactive) {
		F.line = 609;
		add_op_495488(c_500218, new_instr_493133(43, line_no_500220));
		}
		else {
			F.line = 611;
		add_op_495488(c_500218, new_instr_493133(1, line_no_500220));
		}
		
	framePtr = F.prev;

	
}

function compile_500096(c_500098, ast_node_500099) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 596;
		var line_no_500100 = ast_node_500099.lineno.value;
		if ((~((ast_node_500099.names != null ? ast_node_500099.names.length : 0)) == 1)) {
		F.line = 2895;
		var e_500113 = null;
		F.line = 2896;
		e_500113 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 25;
		e_500113.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_500113.parent = null;
		F.line = 598;
		raiseException(e_500113, "InternalError");
		}
		
		F.line = 599;
		var name_500201 = ast_node_500099.names[chckIndx(0, 0, ast_node_500099.names.length+0-1)-0].name;
		F.line = 600;
		add_op_495488(c_500098, new_arg_instr_493437(79, name_id_437042(tste_495041(c_500098), name_500201.value), line_no_500100));
		F.line = 601;
		add_store_op_495759(c_500098, name_500201, line_no_500100);
	framePtr = F.prev;

	
}

function new_seq_500405(len_500409) {
	var result_500411 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_500411 = new Array(len_500409); for (var i=0;i<len_500409;++i) {result_500411[i]=null;}	framePtr = F.prev;

	return result_500411;

}

function reversed_500304(a_500309, first_500311, last_500313) {
	var result_500315 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		if (!((subInt(first_500311, 1) <= last_500313))) {
		F.line = 54;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim(54, 10) `\x0Afirst - 1 <= last` "));
		}
		
		F.line = 55;
		var i_500401 = subInt(last_500313, first_500311);
		F.line = 56;
		var x_500402 = first_500311;
		F.line = 57;
		result_500315 = nimCopy(null, new_seq_500405(chckRange(addInt(i_500401, 1), 0, 2147483647)), NTI500410);
		L1: do {
			F.line = 58;
				L2: while (true) {
				if (!(0 <= i_500401)) break L2;
					F.line = 59;
					result_500315[chckIndx(i_500401, 0, result_500315.length+0-1)-0] = a_500309[chckIndx(x_500402, 0, a_500309.length+0-1)-0];
					F.line = 60;
					i_500401 = subInt(i_500401, 1);
					F.line = 61;
					x_500402 = addInt(x_500402, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_500315;

}

function reversed_500288(a_500293) {
	var result_500295 = null;

	var F={procname:"reversed.reversed",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/algorithm.nim",line:0};
	framePtr = F;
		F.line = 64;
		result_500295 = nimCopy(null, reversed_500304(a_500293, 0, (a_500293 != null ? (a_500293.length-1) : -1)), NTI500314);
	framePtr = F.prev;

	return result_500295;

}

function compile_500278(c_500280, ast_node_500281) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 626;
		var loop_block_500282 = null;
		L1: do {
			F.line = 617;
			var basic_block_500493 = null;
			F.line = 3909;
			var colontmp__500515 = null;
			F.line = 617;
			colontmp__500515 = reversed_500288(tcu_494986(c_500280).blocks);
			F.line = 3911;
			var i_500518 = 0;
			F.line = 3912;
			var l_500520 = (colontmp__500515 != null ? colontmp__500515.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_500518 < l_500520)) break L3;
						F.line = 3914;
						basic_block_500493 = colontmp__500515[chckIndx(i_500518, 0, colontmp__500515.length+0-1)-0];
						if ((ConstSet28[basic_block_500493.tp] != undefined)) {
						F.line = 619;
						loop_block_500282 = basic_block_500493;
						F.line = 620;
						break L1;
						}
						
						F.line = 3915;
						i_500518 = addInt(i_500518, 1);
						if (!(((colontmp__500515 != null ? colontmp__500515.length : 0) == l_500520))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((loop_block_500282 === null)) {
		F.line = 622;
		raiseException(new_syntax_error_156096(makeNimstrLit("\'break\' outside loop"), [], ast_node_500281.lineno.value, ast_node_500281.col_offset.value), "SyntaxError:ObjectType");
		}
		
		F.line = 628;
		add_op_495488(c_500280, new_jump_instr_493837(84, loop_block_500282.next, ast_node_500281.lineno.value));
	framePtr = F.prev;

	
}

function compile_500236(c_500238, ast_node_500239) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 614;
		add_op_495505(c_500238, 7, ast_node_500239.lineno.value);
	framePtr = F.prev;

	
}

function compile_500601(c_500603, ast_node_500604) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 638;
		var ending_500605 = new_basic_block_494238(0);
		F.line = 639;
		var num_values_500613 = (ast_node_500604.values != null ? ast_node_500604.values.length : 0);
		F.line = 640;
		var op_500614 = 0;
		if (isObj(ast_node_500604.op.m_type, NTI181128)) {
		F.line = 642;
		op_500614 = 82;
		}
		else {
		if (isObj(ast_node_500604.op.m_type, NTI181159)) {
		F.line = 644;
		op_500614 = 83;
		}
		else {
			F.line = 2895;
			var e_500644 = null;
			F.line = 2896;
			e_500644 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_500644.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
			F.line = 2891;
			e_500644.parent = null;
			F.line = 646;
			raiseException(e_500644, "InternalError");
		}
		}
		if (!((1 < num_values_500613))) {
		F.line = 647;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(647, 10) `1 < numValues` "));
		}
		
		L1: do {
			F.line = 648;
			var i_501011 = 0;
			F.line = 3617;
			var i_501017 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_501017 < num_values_500613)) break L3;
						F.line = 3619;
						i_501011 = i_501017;
						F.line = 649;
						compile_497538(c_500603, ast_node_500604.values[chckIndx(i_501011, 0, ast_node_500604.values.length+0-1)-0]);
						if (!((i_501011 == subInt(num_values_500613, 1)))) {
						F.line = 651;
						add_op_495488(c_500603, new_jump_instr_493837(op_500614, ending_500605, last_line_no_495269(c_500603)));
						}
						
						F.line = 3620;
						i_501017 = addInt(i_501017, 1);
					}
			} while(false);
		} while(false);
		F.line = 652;
		add_block_495614(c_500603, ending_500605);
	framePtr = F.prev;

	
}

function compile_500534(c_500536, ast_node_500537) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 632;
		var loop_block_500538 = null;
		L1: do {
			F.line = 617;
			var basic_block_500560 = null;
			F.line = 3909;
			var colontmp__500582 = null;
			F.line = 617;
			colontmp__500582 = reversed_500288(tcu_494986(c_500536).blocks);
			F.line = 3911;
			var i_500585 = 0;
			F.line = 3912;
			var l_500587 = (colontmp__500582 != null ? colontmp__500582.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_500585 < l_500587)) break L3;
						F.line = 3914;
						basic_block_500560 = colontmp__500582[chckIndx(i_500585, 0, colontmp__500582.length+0-1)-0];
						if ((ConstSet29[basic_block_500560.tp] != undefined)) {
						F.line = 619;
						loop_block_500538 = basic_block_500560;
						F.line = 620;
						break L1;
						}
						
						F.line = 3915;
						i_500585 = addInt(i_500585, 1);
						if (!(((colontmp__500582 != null ? colontmp__500582.length : 0) == l_500587))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if ((loop_block_500538 === null)) {
		F.line = 622;
		raiseException(new_syntax_error_156096(makeNimstrLit("\'break\' outside loop"), [], ast_node_500537.lineno.value, ast_node_500537.col_offset.value), "SyntaxError:ObjectType");
		}
		
		F.line = 634;
		add_op_495488(c_500536, new_jump_instr_493837(84, loop_block_500538, ast_node_500537.lineno.value));
	framePtr = F.prev;

	
}

function compile_501050(c_501052, ast_node_501053) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 664;
		compile_497538(c_501052, ast_node_501053.operand);
		F.line = 665;
		var op_code_501054 = to_op_code_497358(ast_node_501053.op);
		F.line = 666;
		add_op_495488(c_501052, new_instr_493133(op_code_501054, ast_node_501053.lineno.value));
	framePtr = F.prev;

	
}

function compile_501032(c_501034, ast_node_501035) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 656;
		compile_497538(c_501034, ast_node_501035.left);
		F.line = 657;
		compile_497538(c_501034, ast_node_501035.right);
		F.line = 658;
		var op_code_501036 = to_op_code_497087(ast_node_501035.op);
		F.line = 659;
		add_op_495488(c_501034, new_instr_493133(op_code_501036, ast_node_501035.lineno.value));
	framePtr = F.prev;

	
}

function compile_499038(c_499040, ast_node_499041) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 504;
		var has_or_else_499051 = (0 < (ast_node_499041.orelse != null ? ast_node_499041.orelse.length : 0));
		F.line = 505;
		var next_499052 = null;
		F.line = 505;
		var ending_499053 = null;
		F.line = 506;
		ending_499053 = new_basic_block_494238(0);
		if (has_or_else_499051) {
		F.line = 508;
		next_499052 = new_basic_block_494238(0);
		}
		else {
			F.line = 510;
			next_499052 = ending_499053;
		}
		
		F.line = 512;
		compile_497538(c_499040, ast_node_499041.test);
		F.line = 513;
		add_op_495488(c_499040, new_jump_instr_493837(85, next_499052, ast_node_499041.lineno.value));
		L1: do {
			F.line = 401;
			var ast_node_499066 = null;
			F.line = 3909;
			var colontmp__499081 = null;
			F.line = 514;
			colontmp__499081 = ast_node_499041.body;
			F.line = 3911;
			var i_499084 = 0;
			F.line = 3912;
			var l_499086 = (colontmp__499081 != null ? colontmp__499081.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_499084 < l_499086)) break L3;
						F.line = 3914;
						ast_node_499066 = colontmp__499081[chckIndx(i_499084, 0, colontmp__499081.length+0-1)-0];
						F.line = 402;
						compile_497538(c_499040, ast_node_499066);
						F.line = 3915;
						i_499084 = addInt(i_499084, 1);
						if (!(((colontmp__499081 != null ? colontmp__499081.length : 0) == l_499086))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (has_or_else_499051) {
		F.line = 521;
		add_op_495488(c_499040, new_jump_instr_493837(81, ending_499053, last_line_no_495269(c_499040)));
		F.line = 522;
		add_block_495614(c_499040, next_499052);
		L4: do {
			F.line = 401;
			var ast_node_499079 = null;
			F.line = 3909;
			var colontmp__499088 = null;
			F.line = 523;
			colontmp__499088 = ast_node_499041.orelse;
			F.line = 3911;
			var i_499091 = 0;
			F.line = 3912;
			var l_499093 = (colontmp__499088 != null ? colontmp__499088.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_499091 < l_499093)) break L6;
						F.line = 3914;
						ast_node_499079 = colontmp__499088[chckIndx(i_499091, 0, colontmp__499088.length+0-1)-0];
						F.line = 402;
						compile_497538(c_499040, ast_node_499079);
						F.line = 3915;
						i_499091 = addInt(i_499091, 1);
						if (!(((colontmp__499088 != null ? colontmp__499088.length : 0) == l_499093))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 524;
		add_block_495614(c_499040, ending_499053);
	framePtr = F.prev;

	
}

function compile_498839(c_498841, ast_node_498842) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_498842.orelse != null ? ast_node_498842.orelse.length : 0) == 0))) {
		F.line = 490;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(490, 10) `len(astNode.orelse) == 0` "));
		}
		
		F.line = 491;
		var loop_499002 = new_basic_block_494238(1);
		F.line = 492;
		var ending_499003 = new_basic_block_494238(0);
		F.line = 494;
		loop_499002.next = ending_499003;
		F.line = 495;
		add_block_495614(c_498841, loop_499002);
		F.line = 496;
		compile_497538(c_498841, ast_node_498842.test);
		F.line = 497;
		add_op_495488(c_498841, new_jump_instr_493837(85, ending_499003, ast_node_498842.lineno.value));
		L1: do {
			F.line = 401;
			var ast_node_499016 = null;
			F.line = 3909;
			var colontmp__499019 = null;
			F.line = 498;
			colontmp__499019 = ast_node_498842.body;
			F.line = 3911;
			var i_499022 = 0;
			F.line = 3912;
			var l_499024 = (colontmp__499019 != null ? colontmp__499019.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_499022 < l_499024)) break L3;
						F.line = 3914;
						ast_node_499016 = colontmp__499019[chckIndx(i_499022, 0, colontmp__499019.length+0-1)-0];
						F.line = 402;
						compile_497538(c_498841, ast_node_499016);
						F.line = 3915;
						i_499022 = addInt(i_499022, 1);
						if (!(((colontmp__499019 != null ? colontmp__499019.length : 0) == l_499024))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 499;
		add_op_495488(c_498841, new_jump_instr_493837(84, loop_499002, last_line_no_495269(c_498841)));
		F.line = 500;
		add_block_495614(c_498841, ending_499003);
	framePtr = F.prev;

	
}

function compile_499223(c_499225, ast_node_499226) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_499226.orelse != null ? ast_node_499226.orelse.length : 0) == 0))) {
		F.line = 536;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(536, 10) `len(astNode.orelse) == 0` "));
		}
		
		if (!(((ast_node_499226.finalbody != null ? ast_node_499226.finalbody.length : 0) == 0))) {
		F.line = 537;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(537, 10) `len(astNode.finalbody) == 0` "));
		}
		
		if (!((0 < (ast_node_499226.handlers != null ? ast_node_499226.handlers.length : 0)))) {
		F.line = 538;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(538, 10) `0 < len(astNode.handlers)` "));
		}
		
		F.line = 540;
		var body_499801 = new_basic_block_494238(0);
		F.line = 541;
		var excp_blocks_499803 = null;
		L1: do {
			F.line = 542;
			var i_499821 = 0;
			F.line = 3616;
			var colontmp__500029 = 0;
			F.line = 542;
			colontmp__500029 = (ast_node_499226.handlers != null ? ast_node_499226.handlers.length : 0);
			F.line = 3617;
			var i_500032 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_500032 < colontmp__500029)) break L3;
						F.line = 3619;
						i_499821 = i_500032;
						F.line = 543;
						if (excp_blocks_499803 != null) { excp_blocks_499803.push(new_basic_block_494238(0)); } else { excp_blocks_499803 = [new_basic_block_494238(0)]; };
						F.line = 3620;
						i_500032 = addInt(i_500032, 1);
					}
			} while(false);
		} while(false);
		F.line = 544;
		var ending_499832 = new_basic_block_494238(0);
		F.line = 546;
		add_block_495614(c_499225, body_499801);
		F.line = 548;
		add_op_495488(c_499225, new_jump_instr_493837(88, excp_blocks_499803[chckIndx(0, 0, excp_blocks_499803.length+0-1)-0], ast_node_499226.lineno.value));
		L4: do {
			F.line = 401;
			var ast_node_499845 = null;
			F.line = 3909;
			var colontmp__500035 = null;
			F.line = 549;
			colontmp__500035 = ast_node_499226.body;
			F.line = 3911;
			var i_500038 = 0;
			F.line = 3912;
			var l_500040 = (colontmp__500035 != null ? colontmp__500035.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_500038 < l_500040)) break L6;
						F.line = 3914;
						ast_node_499845 = colontmp__500035[chckIndx(i_500038, 0, colontmp__500035.length+0-1)-0];
						F.line = 402;
						compile_497538(c_499225, ast_node_499845);
						F.line = 3915;
						i_500038 = addInt(i_500038, 1);
						if (!(((colontmp__500035 != null ? colontmp__500035.length : 0) == l_500040))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 551;
		add_op_495488(c_499225, new_jump_instr_493837(84, ending_499832, last_line_no_495269(c_499225)));
		L7: do {
			F.line = 553;
			var idx_499893 = 0;
			F.line = 553;
			var handler_obj_499894 = null;
			F.line = 2352;
			var colontmp__500050 = null;
			F.line = 553;
			colontmp__500050 = ast_node_499226.handlers;
			F.line = 2354;
			var i_500053 = 0;
			L8: do {
				F.line = 2355;
					L9: while (true) {
					if (!(i_500053 < (colontmp__500050 != null ? colontmp__500050.length : 0))) break L9;
						F.line = 2356;
						idx_499893 = i_500053;
						F.line = 2356;
						handler_obj_499894 = colontmp__500050[chckIndx(i_500053, 0, colontmp__500050.length+0-1)-0];
						F.line = 554;
						var is_last_499902 = (idx_499893 == subInt((ast_node_499226.handlers != null ? ast_node_499226.handlers.length : 0), 1));
						F.line = 556;
						var handler_499903 = handler_obj_499894;
						if (!((handler_499903.name === null))) {
						F.line = 557;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(557, 12) `isNil(handler.name)` "));
						}
						
						F.line = 558;
						add_block_495614(c_499225, excp_blocks_499803[chckIndx(idx_499893, 0, excp_blocks_499803.length+0-1)-0]);
						if (!((handler_499903.type === null))) {
						F.line = 564;
						compile_497538(c_499225, handler_499903.type);
						F.line = 565;
						add_op_495488(c_499225, new_arg_instr_493437(78, 10, handler_499903.lineno.value));
						if (is_last_499902) {
						F.line = 567;
						add_op_495488(c_499225, new_jump_instr_493837(85, ending_499832, last_line_no_495269(c_499225)));
						}
						else {
							F.line = 569;
						add_op_495488(c_499225, new_jump_instr_493837(85, excp_blocks_499803[chckIndx(addInt(idx_499893, 1), 0, excp_blocks_499803.length+0-1)-0], last_line_no_495269(c_499225)));
						}
						
						}
						
						F.line = 571;
						add_op_495505(c_499225, 1, handler_499903.lineno.value);
						L10: do {
							F.line = 401;
							var ast_node_500024 = null;
							F.line = 3909;
							var colontmp__500044 = null;
							F.line = 572;
							colontmp__500044 = handler_499903.body;
							F.line = 3911;
							var i_500047 = 0;
							F.line = 3912;
							var l_500049 = (colontmp__500044 != null ? colontmp__500044.length : 0);
							L11: do {
								F.line = 3913;
									L12: while (true) {
									if (!(i_500047 < l_500049)) break L12;
										F.line = 3914;
										ast_node_500024 = colontmp__500044[chckIndx(i_500047, 0, colontmp__500044.length+0-1)-0];
										F.line = 402;
										compile_497538(c_499225, ast_node_500024);
										F.line = 3915;
										i_500047 = addInt(i_500047, 1);
										if (!(((colontmp__500044 != null ? colontmp__500044.length : 0) == l_500049))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						if (!(is_last_499902)) {
						F.line = 575;
						add_op_495488(c_499225, new_jump_instr_493837(84, ending_499832, last_line_no_495269(c_499225)));
						}
						
						F.line = 2357;
						i_500053 = addInt(i_500053, 1);
					}
			} while(false);
		} while(false);
		F.line = 577;
		var last_line_no_500026 = last_line_no_495269(c_499225);
		F.line = 578;
		add_block_495614(c_499225, ending_499832);
		F.line = 579;
		add_op_495505(c_499225, 58, last_line_no_500026);
	framePtr = F.prev;

	
}

function compile_499107(c_499109, ast_node_499110) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!((ast_node_499110.cause === null))) {
		F.line = 528;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(528, 10) `isNil(astNode.cause)` "));
		}
		
		if ((ast_node_499110.exc === null)) {
		F.line = 530;
		add_op_495488(c_499109, new_arg_instr_493437(92, 0, ast_node_499110.lineno.value));
		}
		else {
			F.line = 532;
			compile_497538(c_499109, ast_node_499110.exc);
			F.line = 533;
			add_op_495488(c_499109, new_arg_instr_493437(92, 1, ast_node_499110.lineno.value));
		}
		
	framePtr = F.prev;

	
}

function compile_497561(c_497563, ast_node_497564) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 401;
			var ast_node_497576 = null;
			F.line = 3909;
			var colontmp__497578 = null;
			F.line = 413;
			colontmp__497578 = ast_node_497564.body;
			F.line = 3911;
			var i_497581 = 0;
			F.line = 3912;
			var l_497583 = (colontmp__497578 != null ? colontmp__497578.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_497581 < l_497583)) break L3;
						F.line = 3914;
						ast_node_497576 = colontmp__497578[chckIndx(i_497581, 0, colontmp__497578.length+0-1)-0];
						F.line = 402;
						compile_497538(c_497563, ast_node_497576);
						F.line = 3915;
						i_497581 = addInt(i_497581, 1);
						if (!(((colontmp__497578 != null ? colontmp__497578.length : 0) == l_497583))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function compile_498098(c_498100, ast_node_498101) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 436;
			var deco_498110 = null;
			F.line = 3909;
			var colontmp__498156 = null;
			F.line = 436;
			colontmp__498156 = ast_node_498101.decorator_list;
			F.line = 3911;
			var i_498159 = 0;
			F.line = 3912;
			var l_498161 = (colontmp__498156 != null ? colontmp__498156.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_498159 < l_498161)) break L3;
						F.line = 3914;
						deco_498110 = colontmp__498156[chckIndx(i_498159, 0, colontmp__498156.length+0-1)-0];
						F.line = 437;
						compile_497538(c_498100, deco_498110);
						F.line = 3915;
						i_498159 = addInt(i_498159, 1);
						if (!(((colontmp__498156 != null ? colontmp__498156.length : 0) == l_498161))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 438;
		var line_no_498111 = ast_node_498101.lineno.value;
		F.line = 439;
		add_op_495505(c_498100, 44, line_no_498111);
		F.line = 442;
		if (c_498100.units != null) { c_498100.units.push(new_compiler_unit_494437(c_498100.st, ast_node_498101, ast_node_498101.name.value)); } else { c_498100.units = [new_compiler_unit_494437(c_498100.st, ast_node_498101, ast_node_498101.name.value)]; };
		L4: do {
			F.line = 401;
			var ast_node_498134 = null;
			F.line = 3909;
			var colontmp__498163 = null;
			F.line = 443;
			colontmp__498163 = ast_node_498101.body;
			F.line = 3911;
			var i_498166 = 0;
			F.line = 3912;
			var l_498168 = (colontmp__498163 != null ? colontmp__498163.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_498166 < l_498168)) break L6;
						F.line = 3914;
						ast_node_498134 = colontmp__498163[chckIndx(i_498166, 0, colontmp__498163.length+0-1)-0];
						F.line = 402;
						compile_497538(c_498100, ast_node_498134);
						F.line = 3915;
						i_498166 = addInt(i_498166, 1);
						if (!(((colontmp__498163 != null ? colontmp__498163.length : 0) == l_498168))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 444;
		make_function_496662(c_498100, pop_498014(c_498100, "units"), ast_node_498101.name.value, line_no_498111);
		F.line = 446;
		add_load_const_495662(c_498100, ast_node_498101.name.value, ast_node_498101.lineno.value);
		F.line = 448;
		add_op_495488(c_498100, new_arg_instr_493437(93, 2, line_no_498111));
		L7: do {
			F.line = 449;
			var deco_498153 = null;
			F.line = 3909;
			var colontmp__498170 = null;
			F.line = 449;
			colontmp__498170 = ast_node_498101.decorator_list;
			F.line = 3911;
			var i_498173 = 0;
			F.line = 3912;
			var l_498175 = (colontmp__498170 != null ? colontmp__498170.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_498173 < l_498175)) break L9;
						F.line = 3914;
						deco_498153 = colontmp__498170[chckIndx(i_498173, 0, colontmp__498170.length+0-1)-0];
						F.line = 450;
						add_op_495488(c_498100, new_arg_instr_493437(93, 1, deco_498153.lineno.value));
						F.line = 3915;
						i_498173 = addInt(i_498173, 1);
						if (!(((colontmp__498170 != null ? colontmp__498170.length : 0) == l_498175))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 451;
		add_store_op_495729(c_498100, ast_node_498101.name.value, line_no_498111);
	framePtr = F.prev;

	
}

function compile_497633(c_497635, ast_node_497636) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 422;
			var deco_497645 = null;
			F.line = 3909;
			var colontmp__498065 = null;
			F.line = 422;
			colontmp__498065 = ast_node_497636.decorator_list;
			F.line = 3911;
			var i_498068 = 0;
			F.line = 3912;
			var l_498070 = (colontmp__498065 != null ? colontmp__498065.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_498068 < l_498070)) break L3;
						F.line = 3914;
						deco_497645 = colontmp__498065[chckIndx(i_498068, 0, colontmp__498065.length+0-1)-0];
						F.line = 423;
						compile_497538(c_497635, deco_497645);
						F.line = 3915;
						i_498068 = addInt(i_498068, 1);
						if (!(((colontmp__498065 != null ? colontmp__498065.length : 0) == l_498070))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ast_node_497636.returns == null))) {
		F.line = 424;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(424, 10) `astNode.returns == nil` "));
		}
		
		F.line = 425;
		if (c_497635.units != null) { c_497635.units.push(new_compiler_unit_494437(c_497635.st, ast_node_497636, ast_node_497636.name.value)); } else { c_497635.units = [new_compiler_unit_494437(c_497635.st, ast_node_497636, ast_node_497636.name.value)]; };
		if (!(!((tcu_494986(c_497635).codeName === null)))) {
		F.line = 426;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(426, 3) `not isNil(tcu(c).codeName)` "));
		}
		
		L4: do {
			F.line = 401;
			var ast_node_498012 = null;
			F.line = 3909;
			var colontmp__498072 = null;
			F.line = 428;
			colontmp__498072 = ast_node_497636.body;
			F.line = 3911;
			var i_498075 = 0;
			F.line = 3912;
			var l_498077 = (colontmp__498072 != null ? colontmp__498072.length : 0);
			L5: do {
				F.line = 3913;
					L6: while (true) {
					if (!(i_498075 < l_498077)) break L6;
						F.line = 3914;
						ast_node_498012 = colontmp__498072[chckIndx(i_498075, 0, colontmp__498072.length+0-1)-0];
						F.line = 402;
						compile_497538(c_497635, ast_node_498012);
						F.line = 3915;
						i_498075 = addInt(i_498075, 1);
						if (!(((colontmp__498072 != null ? colontmp__498072.length : 0) == l_498077))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 429;
		make_function_496662(c_497635, pop_498014(c_497635, "units"), ast_node_497636.name.value, ast_node_497636.lineno.value);
		L7: do {
			F.line = 430;
			var deco_498062 = null;
			F.line = 3909;
			var colontmp__498079 = null;
			F.line = 430;
			colontmp__498079 = ast_node_497636.decorator_list;
			F.line = 3911;
			var i_498082 = 0;
			F.line = 3912;
			var l_498084 = (colontmp__498079 != null ? colontmp__498079.length : 0);
			L8: do {
				F.line = 3913;
					L9: while (true) {
					if (!(i_498082 < l_498084)) break L9;
						F.line = 3914;
						deco_498062 = colontmp__498079[chckIndx(i_498082, 0, colontmp__498079.length+0-1)-0];
						F.line = 431;
						add_op_495488(c_497635, new_arg_instr_493437(93, 1, deco_498062.lineno.value));
						F.line = 3915;
						i_498082 = addInt(i_498082, 1);
						if (!(((colontmp__498079 != null ? colontmp__498079.length : 0) == l_498084))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 432;
		add_store_op_495729(c_497635, ast_node_497636.name.value, ast_node_497636.lineno.value);
	framePtr = F.prev;

	
}

function compile_497597(c_497599, ast_node_497600) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 417;
		c_497599.interactive = true;
		L1: do {
			F.line = 401;
			var ast_node_497612 = null;
			F.line = 3909;
			var colontmp__497614 = null;
			F.line = 418;
			colontmp__497614 = ast_node_497600.body;
			F.line = 3911;
			var i_497617 = 0;
			F.line = 3912;
			var l_497619 = (colontmp__497614 != null ? colontmp__497614.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_497617 < l_497619)) break L3;
						F.line = 3914;
						ast_node_497612 = colontmp__497614[chckIndx(i_497617, 0, colontmp__497614.length+0-1)-0];
						F.line = 402;
						compile_497538(c_497599, ast_node_497612);
						F.line = 3915;
						i_497617 = addInt(i_497617, 1);
						if (!(((colontmp__497614 != null ? colontmp__497614.length : 0) == l_497619))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function tcb_495113(c_495115) {
	var result_495116 = null;

	var F={procname:"compile.tcb",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 134;
		result_495116 = tcb_495058(tcu_494986(c_495115));
	framePtr = F.prev;

	return result_495116;

}

function compile_498189(c_498191, ast_node_498192) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if ((ast_node_498192.value === null)) {
		F.line = 456;
		add_load_const_495662(c_498191, py_none_356044, ast_node_498192.lineno.value);
		}
		else {
			F.line = 458;
		compile_497538(c_498191, ast_node_498192.value);
		}
		
		F.line = 459;
		add_op_495488(c_498191, new_instr_493133(54, ast_node_498192.lineno.value));
		F.line = 460;
		tcb_495113(c_498191).seenReturn = true;
	framePtr = F.prev;

	
}

function compile_498614(c_498616, ast_node_498617) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_498617.orelse != null ? ast_node_498617.orelse.length : 0) == 0))) {
		F.line = 475;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(475, 10) `len(astNode.orelse) == 0` "));
		}
		
		F.line = 476;
		var start_498802 = new_basic_block_494238(2);
		F.line = 477;
		var ending_498803 = new_basic_block_494238(0);
		F.line = 479;
		start_498802.next = ending_498803;
		F.line = 480;
		compile_497538(c_498616, ast_node_498617.iter);
		F.line = 481;
		add_op_495505(c_498616, 41, ast_node_498617.iter.lineno.value);
		F.line = 482;
		add_block_495614(c_498616, start_498802);
		F.line = 483;
		add_op_495488(c_498616, new_jump_instr_493837(65, ending_498803, ast_node_498617.lineno.value));
		F.line = 484;
		compile_497538(c_498616, ast_node_498617.target);
		L1: do {
			F.line = 401;
			var ast_node_498817 = null;
			F.line = 3909;
			var colontmp__498820 = null;
			F.line = 485;
			colontmp__498820 = ast_node_498617.body;
			F.line = 3911;
			var i_498823 = 0;
			F.line = 3912;
			var l_498825 = (colontmp__498820 != null ? colontmp__498820.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_498823 < l_498825)) break L3;
						F.line = 3914;
						ast_node_498817 = colontmp__498820[chckIndx(i_498823, 0, colontmp__498820.length+0-1)-0];
						F.line = 402;
						compile_497538(c_498616, ast_node_498817);
						F.line = 3915;
						i_498823 = addInt(i_498823, 1);
						if (!(((colontmp__498820 != null ? colontmp__498820.length : 0) == l_498825))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/wtli/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 486;
		add_op_495488(c_498616, new_jump_instr_493837(84, start_498802, last_line_no_495269(c_498616)));
		F.line = 487;
		add_block_495614(c_498616, ending_498803);
	framePtr = F.prev;

	
}

function compile_498414(c_498416, ast_node_498417) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_498423 = null;
		F.line = 2896;
		e_498423 = {m_type: NTI156081, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 25;
		e_498423.message = nimCopy(null, makeNimstrLit("Shouldn\'t be here"), NTI138);
		F.line = 2891;
		e_498423.parent = null;
		F.line = 471;
		raiseException(e_498423, "InternalError");
	framePtr = F.prev;

	
}

function compile_498214(c_498216, ast_node_498217) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		if (!(((ast_node_498217.targets != null ? ast_node_498217.targets.length : 0) == 1))) {
		F.line = 464;
		failed_assert_impl_20481(makeNimstrLit("/home/wtli/GitClone/liwt31/NPython/Python/compile.nim(464, 10) `len(astNode.targets) == 1` "));
		}
		
		F.line = 465;
		compile_497538(c_498216, ast_node_498217.value);
		F.line = 466;
		compile_497538(c_498216, ast_node_498217.targets[chckIndx(0, 0, ast_node_498217.targets.length+0-1)-0]);
	framePtr = F.prev;

	
}

function compile_497533(c_497535, ast_node_497536) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 406;
		rawEcho(makeNimstrLit("!!!WARNING, ast node compile method not implemented"));
		F.line = 407;
		rawEcho(HEX24_177554(ast_node_497536));
		F.line = 408;
		rawEcho(makeNimstrLit("###WARNING, ast node compile method not implemented"));
	framePtr = F.prev;

	
}

function compile_497538(c_497535, ast_node_497536) {
	var F={procname:"compile.compile",prev:framePtr,filename:"compile.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(ast_node_497536);
		if (isObj(ast_node_497536.m_type, NTI180656)) {
		F.line = 405;
		compile_502216(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180619)) {
		F.line = 405;
		compile_502029(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180728)) {
		F.line = 405;
		compile_502433(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180586)) {
		F.line = 405;
		compile_502416(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180800)) {
		F.line = 405;
		compile_502665(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180763)) {
		F.line = 405;
		compile_502616(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI181095)) {
		F.line = 405;
		compile_502879(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI181023)) {
		F.line = 405;
		compile_502828(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180109)) {
		F.line = 405;
		compile_501068(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI182107)) {
		F.line = 405;
		compile_502919(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180432)) {
		F.line = 405;
		compile_501243(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180183)) {
		F.line = 405;
		compile_501126(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179623)) {
		F.line = 405;
		compile_500067(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180473)) {
		F.line = 405;
		compile_501822(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179802)) {
		F.line = 405;
		compile_500216(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179658)) {
		F.line = 405;
		compile_500096(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179866)) {
		F.line = 405;
		compile_500278(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179835)) {
		F.line = 405;
		compile_500236(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179928)) {
		F.line = 405;
		compile_500601(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179897)) {
		F.line = 405;
		compile_500534(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI180002)) {
		F.line = 405;
		compile_501050(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179965)) {
		F.line = 405;
		compile_501032(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179422)) {
		F.line = 405;
		compile_499038(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179381)) {
		F.line = 405;
		compile_498839(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179576)) {
		F.line = 405;
		compile_499223(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179541)) {
		F.line = 405;
		compile_499107(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI178837)) {
		F.line = 405;
		compile_497561(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179065)) {
		F.line = 405;
		compile_498098(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI178975)) {
		F.line = 405;
		compile_497633(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI178872)) {
		F.line = 405;
		compile_497597(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179114)) {
		F.line = 405;
		compile_498189(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179295)) {
		F.line = 405;
		compile_498614(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179219)) {
		F.line = 405;
		compile_498414(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI179182)) {
		F.line = 405;
		compile_498214(c_497535, ast_node_497536);
		}
		else {
		if (isObj(ast_node_497536.m_type, NTI177022)) {
		F.line = 405;
		compile_497533(c_497535, ast_node_497536);
		}
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	framePtr = F.prev;

	
}
